[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    result_tup = test_tup1 & test_tup2\n    return result_tup\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # compare the first element from each list\n    if test_tup1[0] == test_tup2[0]:\n        if test_tup1[0] == test_tup2[0]:\n            return True\n        else:\n            return False\n    # compare the second element from each list\n    elif test_tup1[1] == test_tup2[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = list(set(test_tup1) & set(test_tup2))\n    common = tuple(common)\n    return common\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1 == test_tup2:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return similar_elements(test_tup2, test_tup1)\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return len(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return similar_elements(test_tup2, test_tup1)\n    if len(test_tup1) == len(test_tup2):\n        if len(test_tup1) == 1:\n            return test_tup1\n        else:\n            return similar_elements(test_tup1[:len(test_tup1)//2], test_tup1[len(test_tup1)//2:])\n    elif len(test_tup1) == len(test_tup2) + 1:\n        return similar_elements(test_tup1[:len(test_tup1)//2], test_tup2[len(test_tup2)//2:])\n    else:\n        return similar_elements(test_tup1, test_tup2[:len(test_tup2)//2])\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return True\n    for x in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % x == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return n < 2\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    return n > 1 and n % 2!= 0 and all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))\n    \ndef is_prime_seq(n):\n    '''\n    Write a python function to identify prime numbers in a sequence.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef sum_of_primes(n):\n    '''\n    Write a python function to find the sum of all the prime numbers less than n.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if is_prime(i):\n            sum += i\n    return sum\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of an integer.\n    '''\n    return 1 if (n == 1 or n == 0) else n * factorial(n - 1)\n    \ndef fib(n):\n    '''\n    Write a python function to find the nth number in the fibonacci sequence.\n    '''\n    return 1 if n == 1 else fib(n - 1) + fib(n - 2)\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to determine if a number is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_palindrome_seq(n):\n    '''\n    Write a python function to determine if a sequence of numbers is a palindrome.\n    '''\n    return all(is_palindrome(n) for n in range(1, len(str(n)) + 1))\n    \ndef is_pandigital(n):\n    '''\n    Write a python function to determine if a number is pandigital.\n    '''\n    return len(str(n)) == len(set(str(n)))\n    \ndef is_pandigital_seq(n):\n    '''\n    Write a python function to determine if a sequence of numbers is pandigital.\n    '''\n    return all(len(str(n)) == len(set(str(n))) for n in range(1, len(str(n)) + 1))\n    \ndef is_pandigital_prime(n):\n    '''\n    Write a python function to determine if a number is pandigital and prime.\n    '''\n    return is_pandigital(n) and is_prime(n)\n    \ndef is_pandigital_prime_seq(n):\n    '''\n    Write a python function to determine if a sequence of numbers is pandigital and prime.\n    '''\n    return is_pandigital_seq(n) and is_prime_seq(n)\n    \ndef number_of_combinations(n, k):\n    '''\n    Write a python function to compute the number of combinations of size k from a set of n distinct elements.\n    '''\n    return factorial(n) / (factorial(k) * factorial(n - k))\n    \ndef number_of_permutations(n, k):\n    '''\n    Write a python function to compute the number of permutations of size k from a set of n distinct elements.\n    '''\n    return math.factorial(n) / math.factorial(n - k)\n    \ndef number_of_k_digit_permutations(n, k):\n    '''\n    Write a python function to compute the number of permutations of k digits from a set of n distinct elements.\n    '''\n    return math.factorial(n + k - 1) / math.factorial(k)\n    \ndef is_k_palindrome(n, k):\n    '''\n    Write a python function to determine if a number is a k-palindrome.\n    '''\n    return is_palindrome(n) and str(n)[k - 1] == str(n)[-k]\n    \ndef is_k_palindrome_seq(n, k):\n    '''\n    Write a python function to determine if a sequence of numbers is a k-palindrome.\n    '''\n    return all(is_k_palindrome(n, k) for n in range(1, len(str(n)) + 1))\n    \ndef is_k_pandigital(n, k):\n    '''\n    Write a python function to determine if a number is a k-pandigital.\n    '''\n    return is_pandigital(n) and len(str(n)) == len(set(str(n))) and len(str(n)) == k\n    \ndef is_k_pandigital_seq(n, k):\n    '''\n    Write a python function to determine if a sequence of numbers is a k-pandigital.\n    '''\n    return is_pandigital_seq(n) and len(str(n)) == len(set(str(n))) and len(str(n)) == k\n    \ndef is_k_pandigital_prime(n, k):\n    '''\n    Write a python function to determine if a number is a k-pandigital and prime.\n    '''\n    return is_pandigital_prime(n) and len(str(n)) == len(set(str(n))) and len(str(n)) == k\n    \ndef is_k_pandigital_prime_seq(n, k):\n    '''\n    Write a python function to determine if a sequence of numbers is a k-pandigital and prime.\n    '''\n    return is_pandigital_prime_seq(n) and len(str(n)) == len(set(str(n))) and len(str(n)) == k\n    \ndef is_k_prime(n, k):\n    '''\n    Write a python function to determine if a number is a k-prime.\n    '''\n    return is_prime(n) and len(str(n)) == len(set(str(n))) and len(str(n)) == k\n    \ndef is_k_prime_seq(n, k):\n    '''\n    Write a python function to determine if a sequence of numbers is a k-prime.\n    '''\n    return is_prime_seq(n) and len(str(n)) == len(set(str(n))) and len(str(n)) == k\n    \ndef is_k_prime_prime(n, k):\n    '''\n    Write a python function to determine if a number is a k-prime and prime.\n    '''\n    return is_prime(n) and len(str(n)) == len(set(str(n))) and len(str(n)) == k\n    \ndef is_k_prime_prime_seq(n, k):\n    '''\n    Write a python function to determine if a sequence of numbers is a k-prime and prime.\n    '''\n    return is_prime_seq(n) and len(str(n)) == len(set(str(n))) and len(str(n)) == k\n    \ndef is_k_prime_factors(n, k):\n    '''\n    Write a python function to determine if a number is a k-prime with prime factors of k.\n    '''\n    if n <= 0:\n        return False\n    elif k <= 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and is_prime(i):\n            if len(str(n)) == len(set(str(n))) and len(str(n)) == k:\n                return True\n    return False\n    \ndef is_k_prime_factors_seq(n, k):\n    '''\n    Write a python function to determine if a sequence of numbers is a k-prime with prime factors of k.\n    '''\n    if n <= 0:\n        return False\n    elif k <= 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and is_prime(i):\n            if len(str(n)) == len"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    if n < 4:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for x in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % x == 0:\n            return True\n        if n % (x + 2) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1 or n==0:\n        return 1\n    elif n%2==0:\n        return 1\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return 1\n        return 0\n    return 0\ndef is_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1 or n==0:\n        return 1\n    elif n%2==0:\n        return 0\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return 0\n        return 1\n    return 0\ndef get_prime_factors(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_number(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 1\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return 0\n        return 1\n    return 0\ndef get_perfect_factor(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor2(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor3(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor4(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor5(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor6(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor7(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor8(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor9(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor10(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor11(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor12(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return 0\ndef get_perfect_factor13(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    elif n<0:\n        return 1\n    else:\n        max=int(math.sqrt(n))\n        for x in range(3,max+1,2):\n            if n%x==0:\n                return x\n        return n\n    return "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n%x==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 0:\n        return False\n    else:\n        if n % 2 == 0 and n > 2:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in range(n):\n        hq.heappush(h,-1*nums[i])\n    result=[]\n    for i in range(n):\n        result.append(-1*hq.heappop(h))\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, -i)\n    res = []\n    for i in range(n):\n        res.append(-hq.heappop(h))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\ndef heap_max_of_smallest_n(nums,n):\n    '''\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n    Each element in the array represents your maximum jump length at that position.\n    Your goal is to reach the last index in the minimum number of jumps.\n    For example:\n    Given array A = [2,3,1,1,4]\n    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = 0\n    while len(h) > 1:\n        a = hq.heappop(h)\n        res += 1\n        a = a - a%2\n        if a > 0:\n            hq.heappush(h, a)\n    return res\ndef heap_min_of_largest_n(nums,n):\n    '''\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n    Each element in the array represents your maximum jump length at that position.\n    Your goal is to reach the last index in the minimum number of jumps.\n    For example:\n    Given array A = [2,3,1,1,4]\n    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, -i)\n    res = 0\n    while len(h) > 1:\n        a = hq.heappop(h)\n        res += 1\n        a = a + a%2\n        if a > 0:\n            hq.heappush(h, a)\n    return res\ndef heap_sum_of_smallest_n(nums,n):\n    '''\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n    Each element in the array represents your maximum jump length at that position.\n    Your goal is to reach the last index in the minimum number of jumps.\n    For example:\n    Given array A = [2,3,1,1,4]\n    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = 0\n    while len(h) > 1:\n        a = hq.heappop(h)\n        res += a\n        a = a + a%2\n        if a > 0:\n            hq.heappush(h, a)\n    return res\ndef heap_sum_of_largest_n(nums,n):\n    '''\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n    Each element in the array represents your maximum jump length at that position.\n    Your goal is to reach the last index in the minimum number of jumps.\n    For example:\n    Given array A = [2,3,1,1,4]\n    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, -i)\n    res = 0\n    while len(h) > 1:\n        a = hq.heappop(h)\n        res += a\n        a = a + a%2\n        if a > 0:\n            hq.heappush(h, a)\n    return -res\ndef heap_max_of_smallest_n_from_last(nums,n):\n    '''\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n    Each element in the array represents your maximum jump length at that position.\n    Your goal is to reach the last index in the minimum number of jumps.\n    For example:\n    Given array A = [2,3,1,1,4]\n    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = 0\n    while len(h) > 1:\n        a = hq.heappop(h)\n        res += 1\n        a = a - a%2\n        if a > 0:\n            hq.heappush(h, a)\n    return res\ndef heap_min_of_largest_n_from_last(nums,n):\n    '''\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n    Each element in the array represents your maximum jump length at that position.\n    Your goal is to reach the last index in the minimum number of jumps.\n    For example:\n    Given array A = [2,3,1,1,4]\n    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, -i)\n    res = 0\n    while len(h) > 1:\n        a = hq.heappop(h)\n        res += 1\n        a = a + a%2\n        if a > 0:\n            hq.heappush(h, a)\n    return res\ndef max_of_smallest_n_from_last(nums,n):\n    '''\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n    Each element in the array represents your maximum jump length at that position.\n    Your goal is to reach the last index in the minimum number of jumps.\n    For example:\n    Given array A = [2,3,1,1,4]\n    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = 0\n    while len(h) > 1:\n        a = hq.heappop(h)\n        res += 1\n        a = a - a%2\n        if a > 0:\n            hq.heappush(h, a)\n    return res\ndef max_of_largest_n_from_last(nums,n):\n    '''\n    Given an array of non-negative integers, you are initially positioned at the first index of the array.\n    Each element in the array represents your maximum jump length at that position.\n    Your goal is to reach the last index in the minimum number of jumps.\n    For example:\n    Given array A = [2,3,1,1,4]\n    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, -i)\n    res = 0\n    while len(h) > 1:\n        a = hq.heappop(h)\n        res += 1\n        a = a + a%2\n        if a > 0:\n            hq.h"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in xrange(n):\n        res.append(hq.heappop(nums))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,-1*num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    result = []\n    while len(heap) > 0:\n        result.append(-1*hq.heappop(heap))\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    sorted_nums = sorted(nums,reverse=True)\n    # print(sorted_nums)\n    l = []\n    for i in range(n):\n        l.append(sorted_nums[i])\n    return l\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    largest_queue = []\n    for i in range(len(nums)):\n        hq.heappush(largest_queue, nums[i])\n        if len(largest_queue) > n:\n            hq.heappop(largest_queue)\n    return largest_queue\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    smallest_queue = []\n    for i in range(len(nums)):\n        hq.heappush(smallest_queue, nums[i])\n        if len(smallest_queue) > n:\n            hq.heappop(smallest_queue)\n    return smallest_queue\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def heappush(heap, item):\n        '''Push item onto heap, maintaining the heap invariant.'''\n        hq.heappush(heap, item)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1) == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Initialize the result\n    res = False\n    if (x!= 0):\n        if ((x & (x - 1)) == 0):\n            res = True\n    return res\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x==0 or x&(x-1)==0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x & (x-1)) == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    mask = 1\n    y = x | mask\n    while (y & mask) == 0:\n        y = y >> 1\n        mask = mask << 1\n    x = x & (mask - 1)\n    if x == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    return (x&(x-1))==0\n    \ndef power_of_two(x):\n    '''\n    Write a python function to check whether the given number is power of two or not.\n    '''\n    if is_Power_Of_Two(x) and x!=0:\n        return True\n    else:\n        return False\n    \ndef PowerOfTwo(x):\n    '''\n    Write a python function to check whether the given number is power of two or not.\n    '''\n    if power_of_two(x):\n        return True\n    else:\n        return False\n    \ndef is_Power_Of_Two_Recursive(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not using recursion.\n    '''\n    \n    if x==1:\n        return True\n    else:\n        if x%2==1:\n            return False\n        else:\n            return is_Power_Of_Two_Recursive(x/2)\n    \ndef power_of_two_recursive(x):\n    '''\n    Write a python function to check whether the given number is power of two or not using recursion.\n    '''\n    if is_Power_Of_Two_Recursive(x):\n        return True\n    else:\n        return False\n    \ndef PowerOfTwo_Recursive(x):\n    '''\n    Write a python function to check whether the given number is power of two or not using recursion.\n    '''\n    if power_of_two_recursive(x):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # create a list to store the bits of the two numbers\n    bits_num = []\n    # calculate the bits of the two numbers\n    while x:\n        bits_num.append(x & 1)\n        x = x >> 1\n    # check if the first bit of the two numbers are not the same\n    if bits_num[0] == bits_num[1]:\n        return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (((x & (x - 1)) == 0) and x!= 0) \n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    import re\n    text=text.split()\n    char_long=[]\n    for word in text:\n        if len(word)>4:\n            char_long.append(word)\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('[a-zA-Z]+', text)\n    return [x for x in result if len(x) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.split(' ')\n    for i in text:\n        if len(i)>=4:\n            print i\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    t = text.split()\n    return [x for x in t if len(x) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('\\w{4,}', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # text = 'To be or not to be, that is the question'\n    char_long = [item for item in re.split('\\W+', text) if len(item) > 3]\n    print(char_long)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    s = re.findall('[a-zA-Z]+',text)\n    return [x for x in s if len(x)>=4]\n    \ndef find_char_range(text):\n    '''\n    Write a function to find all the words in a string which have at least 1 to 3 consecutive characters\n    '''\n    s = re.findall('[a-zA-Z]+',text)\n    return [x for x in s if len(x)>=1 and len(x)<=3]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    long_words = re.findall(r'\\w{4,}', text)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile('[a-zA-Z]+')\n    return [m.group() for m in regex.finditer(text)]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n * n for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n*n)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n * n for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a list of all rotations of the string\n    rot_list = [str[i:]+str[:i] for i in range(len(str))]\n    # return the count of string rotations\n    return rot_list.count(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    if n<2:\n        return 0\n    l=0\n    r=n-1\n    if str[l]==str[r]:\n        return 1\n    else:\n        while l<r:\n            if str[l]!=str[r]:\n                return 2\n            if str[l+1]==str[r]:\n                return 1+find_Rotations(str[l+1:r+1])\n            l+=1\n            r-=1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotation_count = 0\n    len_str = len(str)\n    while rotation_count < len_str:\n        if str[rotation_count:] == str[:len_str - rotation_count]:\n            break\n        rotation_count += 1\n    if rotation_count == len_str:\n        return 0\n    return rotation_count\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    \n    for i in range(n):\n        if str[i:] == str[i:] + str[:i]:\n            return i + 1\n    \n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)):\n        temp = str[i:] + str[:i]\n        if temp == str:\n            return len(str) - i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    rotations = []\n    for i in range(l):\n        temp = str[i:] + str[:i]\n        rotations.append(temp)\n    return min(rotations, key=len)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    N = len(str) \n    l = 1\n    h = N - 1\n    result = 0\n    while l <= h:\n        if str[l:] == str[l:l+1] * N:\n            return l\n        if str[l:] == str[h:] * N:\n            return h\n        result = l\n        if str[l] == str[h]:\n            l += 1\n            h -= 1\n        else:\n            if str[l] > str[h]:\n                l += 1\n            else:\n                h -= 1\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == None or str == \"\":\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:]+str[:i] == str:\n            return i\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    if len(str) == 0:\n        return 0\n    for i in range(len(str)):\n        temp = str[i:] + str[:i]\n        if temp == str:\n            return rotations + 1\n        else:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', 1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    a = s.replace(ch, '', 1)\n    b = a.replace(ch, '', 1)\n    return b\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s) \n    n = s.count(ch) \n    i = 0\n    while i < n: \n        s.remove(ch) \n        i += 1\n    s = ''.join(s) \n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    res = \"\"\n    if len(s)>0:\n        res = s.replace(ch, \"\", 1)\n        res = res.replace(ch, \"\", 1)\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        x = s.index(ch)\n        s = s[:x] + s[x+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n    \n    \n    "
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    while i<len(s):\n        if s[i]==ch:\n            s=s[0:i]+s[i+1:]\n        else:\n            i+=1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[:i] + s[i+1:]\n            return s\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    str1 = s[1:-1]\n    return str1\n    \ndef remove_0(s): \n    '''\n    Write a python function to remove all occurence of 0 from the string.\n    '''\n    str1 = s.replace('0','')\n    return str1\n    \ndef remove_all_0(s):\n    '''\n    Write a python function to remove all occurence of 0 from the string.\n    '''\n    while '0' in s:\n        s = s.replace('0','')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        return s\n    \n    if len(s)==1:\n        if s==ch:\n            return ''\n        else:\n            return s\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        min_num = min(M[i])\n        min_index = M[i].index(min_num)\n        min_row = min_index\n        for j in range(len(M)):\n            M[i][j], M[min_row][j] = M[min_row][j], M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        min_i = i\n        for j in range(i + 1, n):\n            if M[j][0] < M[min_i][0] or M[j][1] < M[min_i][1]:\n                min_i = j\n        if min_i!= i:\n            temp = M[i]\n            M[i] = M[min_i]\n            M[min_i] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    for i in range(len(M)):\n        M[i] = [sum(M[i])] + M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    global row\n    for i in range(len(M)):\n        tmp = max(M[i])\n        row.append(tmp)\n    print(row)\n    for i in range(len(M)-1,0,-1):\n        for j in range(i):\n            if M[j][i] > M[j+1][i]:\n                M[j],M[j+1] = M[j+1],M[j]\n    return M\ndef matrix_sort(M):\n    row = []\n    for i in range(len(M)):\n        tmp = max(M[i])\n        row.append(tmp)\n    print(row)\n    for i in range(len(M)-1,0,-1):\n        for j in range(i):\n            if M[j][i] > M[j+1][i]:\n                M[j],M[j+1] = M[j+1],M[j]\n    return M\ndef matrix_sort(M):\n    row = []\n    for i in range(len(M)):\n        tmp = max(M[i])\n        row.append(tmp)\n    print(row)\n    for i in range(len(M)-1,0,-1):\n        for j in range(i):\n            if M[j][i] > M[j+1][i]:\n                M[j],M[j+1] = M[j+1],M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_list = []\n    for i in xrange(len(M)):\n        row_sum = sum(M[i])\n        sorted_list.append(row_sum)\n    row_list = [[i,j] for i in xrange(len(M)) for j in xrange(len(M[i]))]\n    row_list = sorted(row_list, key=lambda x: sorted_list[x[0]])\n    for i in xrange(len(row_list)):\n        for j in xrange(len(row_list[i])):\n            M[row_list[i][0]][j] = M[row_list[i][0]][j] * sorted_list[row_list[i][1]]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_M = []\n    \n    # For each row of the matrix, get the sum of its elements, and add to a new matrix\n    for i in range(len(M)):\n        new_row = []\n        total_sum = 0\n        for j in range(len(M[i])):\n            total_sum += M[i][j]\n            new_row.append(total_sum)\n        new_M.append(new_row)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    M.sort(key = lambda x: sum(x))\n    return M\n    \ndef test_sort_matrix():\n    assert [2,1,3,4] == sort_matrix([[3,2,1,4],[4,3,2,1],[1,4,3,2],[2,1,4,3]])\n    assert [1,2,4,3] == sort_matrix([[3,2,1,4],[4,3,2,1],[1,4,3,2],[2,1,4,3]])\n    assert [1,2,4,3] == sort_matrix([[3,2,1,4],[4,3,2,1],[1,4,3,2],[2,1,4,3]])\n    assert [1,2,3,4] == sort_matrix([[3,2,1,4],[4,3,2,1],[1,4,3,2],[2,1,4,3]])\n    assert [1,2,3,4] == sort_matrix([[3,2,1,4],[4,3,2,1],[1,4,3,2],[2,1,4,3]])\n    assert [1,2,3,4] == sort_matrix([[3,2,1,4],[4,3,2,1],[1,4,3,2],[2,1,4,3]])\n    \ntest_sort_matrix("
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda row: sum(row))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_list = []\n    for i in range(len(M)):\n        sorted_list.append(sum(M[i]))\n    sorted_list = sorted(sorted_list)\n    return sorted_list\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # I am using pythons native sorting functions here\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 1/3 * l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    if l < b and l < h :\n        V = (b*h)/2\n    elif b < l and b < h :\n        V = (l*h)/2\n    elif h < l and h < b :\n        V = (l*b)/2\n    else :\n        V = 'Not a valid triangle'\n    \n    return V\n    \n    \n    \nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,5)\nprint find_Volume(3,4,5)\nprint find_Volume(2,4,"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = b * h / 3\n    print(\"The volume of the box is %f\" % (volume))\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = ((l*b)*h)/2\n    print \"The volume of the triangular prism is : \",Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((b-l)*(h**2))/4\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = b*h/3\n    return Volume\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r'^[a-z]+_?[a-z]+$',text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if re.search(r'[a-z]+_[a-z]+',text) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_', text):\n        return True\n    else:\n        return False\ndef text_lowercase_letters(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters and false otherwise.\n    '''\n    if re.search(r'[a-z]+', text):\n        return True\n    else:\n        return False\ndef text_lowercase_letters_and_underscores(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters and underscores and false otherwise.\n    '''\n    if re.search(r'[a-z]+_', text):\n        return True\n    else:\n        return False\ndef text_letters_and_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters and numbers and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9]+', text):\n        return True\n    else:\n        return False\ndef text_letters_and_symbols(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters and symbols and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+', text):\n        return True\n    else:\n        return False\ndef text_letters_and_symbols_and_letters(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, symbols, and letters and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+', text):\n        return True\n    else:\n        return False\ndef text_letters_and_symbols_and_letters_and_symbols(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, symbols, and letters and symbols and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+', text):\n        return True\n    else:\n        return False\ndef text_letters_and_symbols_and_letters_and_symbols_and_symbols(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, symbols, and letters and symbols and symbols and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+', text):\n        return True\n    else:\n        return False\ndef text_letters_and_symbols_and_letters_and_symbols_and_symbols_and_symbols(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, symbols, and letters and symbols and symbols and symbols and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+', text):\n        return True\n    else:\n        return False\ndef text_letters_and_symbols_and_letters_and_symbols_and_symbols_and_symbols_and_symbols(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, symbols, and letters and symbols and symbols and symbols and symbols and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+', text):\n        return True\n    else:\n        return False\ndef text_letters_and_symbols_and_letters_and_symbols_and_symbols_and_symbols_and_symbols_and_symbols(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, symbols, and letters and symbols and symbols and symbols and symbols and symbols and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+', text):\n        return True\n    else:\n        return False\ndef text_letters_and_symbols_and_letters_and_symbols_and_symbols_and_symbols_and_symbols_and_symbols_and_symbols_and_symbols(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, symbols, and letters and symbols and symbols and symbols and symbols and symbols and symbols and false otherwise.\n    '''\n    if re.search(r'[a-zA-Z0-9!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\/,.]+[a-zA-Z]+[a-zA-Z!@#$%^&*()+=?<>{}|~`;:\"|\\"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    return not bool(re.search(r'[^a-z]+', text))\n    \ndef test_lowercase_underscore():\n    assert text_lowercase_underscore('abc') == False\n    assert text_lowercase_underscore('abc_def') == True\n    assert text_lowercase_underscore('a_b_c') == False\n    assert text_lowercase_underscore('ab_cd') == True\n    assert text_lowercase_underscore('ab_cd_efg') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text == '':\n        return True\n    else:\n        if text[0].islower() and text[1:].isalpha():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    string = re.findall(r'[a-z]+', text)\n    if len(string)>=1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return not re.match(r'[a-z]+_[a-z]+', text) is None\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new = [] \n    for i in string: \n        if i not in new: \n            new.append(i) \n    return new \n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [None] * len(string)\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j] and i!= j:\n                break\n        else:\n            list1[i] = string[i]\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if string[i] not in list_of_chars:\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef check_char(char, string):\n    '''\n    Write a function to check if the letter is in the string or not.\n    '''\n    return char in string\ndef add_all_letters(string):\n    '''\n    Write a function to add all the letters from the string in a list.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        list_of_chars.append(string[i])\n    return list_of_chars\ndef remove_special_characters(string):\n    '''\n    Write a function to remove special characters from the string\n    '''\n    # string = string.lower()\n    list_of_chars = []\n    for i in range(len(string)):\n        if not (string[i].isalpha()):\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef remove_spaces(string):\n    '''\n    Write a function to remove spaces from the string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if string[i]!='':\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef remove_numbers(string):\n    '''\n    Write a function to remove numbers from the string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if not (string[i].isdigit()):\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef remove_capital_letters(string):\n    '''\n    Write a function to remove capital letters from the string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if not (string[i].isupper()):\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef convert_to_list(string):\n    '''\n    Write a function to convert the string into a list.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        list_of_chars.append(string[i])\n    return list_of_chars\ndef check_string_validity(string):\n    '''\n    Write a function to check if the string contains only alphabetical characters and spaces.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if string[i].isalpha():\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef convert_to_lower_case(string):\n    '''\n    Write a function to convert the string to lowercase.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        list_of_chars.append(string[i].lower())\n    return list_of_chars\ndef count_occurrences(string, char):\n    '''\n    Write a function to count the number of times the given character occurs in the string.\n    '''\n    occurrence = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            occurrence += 1\n    return occurrence\ndef count_occurences(string, char):\n    '''\n    Write a function to count the number of times the given character occurs in the string.\n    '''\n    occurrence = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            occurrence += 1\n    return occurrence\ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in the string.\n    '''\n    occurrence = 0\n    for i in range(len(string)):\n        if string[i] in ['a', 'e', 'i', 'o', 'u']:\n            occurrence += 1\n    return occurrence\ndef count_consonants(string):\n    '''\n    Write a function to count the number of consonants in the string.\n    '''\n    occurrence = 0\n    for i in range(len(string)):\n        if string[i] not in ['a', 'e', 'i', 'o', 'u']:\n            occurrence += 1\n    return occurrence\ndef check_for_periods(string):\n    '''\n    Write a function to check if the string has at least one period.\n    '''\n    for i in range(len(string)):\n        if string[i] == '.':\n            return True\n    return False\ndef reverse_string(string):\n    '''\n    Write a function to reverse the string.\n    '''\n    rev_string = ''\n    for i in range(len(string)):\n        rev_string += string[len(string)-1-i]\n    return rev_string\ndef remove_first_char(string):\n    '''\n    Write a function to remove the first character from the string.\n    '''\n    return string[1:]\ndef remove_last_char(string):\n    '''\n    Write a function to remove the last character from the string.\n    '''\n    return string[:-1]\ndef remove_spaces(string):\n    '''\n    Write a function to remove spaces from the string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if string[i]!='':\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef get_only_char(string):\n    '''\n    Write a function to get the only character present in the string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if string[i] not in list_of_chars:\n            list_of_chars.append(string[i])\n    return list_of_chars[0]\ndef remove_multiple_char(string, char):\n    '''\n    Write a function to remove multiple characters from the string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if string[i]!= char:\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef get_last_char(string):\n    '''\n    Write a function to get the last character of the string.\n    '''\n    return string[-1]\ndef is_empty(string):\n    '''\n    Write a function to check if the string is empty or not.\n    '''\n    if len(string) == 0:\n        return True\n    return False\ndef strip_and_reverse(string):\n    '''\n    Write a function to strip the characters from both the ends and reverse the string.\n    '''\n    string = string.strip()\n    return reverse_string(string)\ndef replace_char(string, char1, char2):\n    '''\n    Write a function to replace all the characters in the string by another character.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if string[i] == char1:\n            list_of_chars.append(char2)\n        else:\n            list_of_chars.append(string[i])\n    return list_of_chars\ndef insert_char(string, char, index):\n    '''\n    Write a function to insert a character at the given index in the string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        if i == index:\n            list_of_chars.append(char)\n        list_of_chars.append(string[i])\n    return list_of_chars\ndef compare_strings(string1, string2):\n    '''\n    Write a function to compare two strings.\n    '''"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(0, len(string)):\n        if string[i] not in list1:\n            list1.append(string[i])\n    for j in range(0, len(list1)):\n        print list1[j],\n    print\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(0, len(string)):\n        char_list.append(string[i])\n    return char_list\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #def replace(c):\n    #    return chr(ord(c) - 5)\n    #str = string.translate(replace)\n    #return str\n    return list(string)\ndef list_to_str(list): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #def replace(c):\n    #    return chr(ord(c) + 5)\n    #str = string.translate(replace)\n    #return str\n    return ''.join(list)\ndef find_sub_string(string, sub_string):\n    '''\n    Write a function to find the first occurrence of the sub-string in the given string. \n    '''\n    if string.find(sub_string) > -1:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check if the string is a palindrome.\n    '''\n    string = str_to_list(string)\n    if list_to_str(string) == list_to_str(string)[::-1]:\n        return True\n    return False\ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the number of times the substring occurs in the given string.\n    '''\n    counter = 0\n    for i in range(len(string)):\n        if find_sub_string(string[i:], sub_string) == True:\n            counter += 1\n    return counter\ndef find_max_occurences(string, sub_string):\n    '''\n    Write a function to find the maximum number of times the substring occurs in the given string.\n    '''\n    max_count = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i, len(string)):\n            if string[j:].startswith(sub_string):\n                count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\ndef print_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print(matrix[i][j], end ='')\n        print()\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate a matrix by 90 degrees (clockwise).\n    '''\n    return list(zip(*matrix[::-1]))\ndef get_diagonals(matrix):\n    '''\n    Write a function to get all the diagonals in the given matrix.\n    '''\n    diagonals = []\n    for i in range(len(matrix)):\n        diagonals.append(matrix[i][i])\n        diagonals.append(matrix[i][len(matrix) - i - 1])\n    return diagonals\ndef is_valid_parenthesis(string):\n    '''\n    Write a function to check whether the input string is valid parenthesis or not.\n    '''\n    stack = []\n    for i in string:\n        if i == '[' or i == '(' or i == '{':\n            stack.append(i)\n        else:\n            if len(stack) > 0:\n                if i == ']' and stack.pop()!= '[':\n                    return False\n                elif i == ')' and stack.pop()!= '(':\n                    return False\n                elif i == '}' and stack.pop()!= '{':\n                    return False\n            else:\n                return False\n    if len(stack) > 0:\n        return False\n    return True\ndef check_binary_search_tree(root):\n    '''\n    Write a function to check whether the given tree is a binary search tree or not.\n    '''\n    return check_BST(root)\ndef check_BST(root):\n    if root == None:\n        return True\n    if (root.left!= None and root.left.data > root.data) or (root.right!= None and root.right.data < root.data):\n        return False\n    return check_BST(root.left) and check_BST(root.right)\ndef count_leaves(root):\n    if root == None:\n        return 0\n    if root.left == None and root.right == None:\n        return 1\n    return count_leaves(root.left) + count_leaves(root.right)\ndef get_left_most_node(root):\n    while root.left!= None:\n        root = root.left\n    return root\ndef check_balanced_BST(root):\n    '''\n    Write a function to check whether the given tree is balanced or not.\n    '''\n    return check_balanced(root)\ndef check_balanced(root):\n    if root == None:\n        return True\n    if abs(get_height(root.left) - get_height(root.right)) <= 1:\n        return check_balanced(root.left) and check_balanced(root.right)\n    else:\n        return False\ndef get_height(root):\n    if root == None:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\ndef is_binary_search_tree(root):\n    '''\n    Write a function to check whether the given tree is a binary search tree or not.\n    '''\n    return is_BST(root)\ndef is_BST(root):\n    '''\n    Write a function to check whether the given tree is a binary search tree or not.\n    '''\n    return check_BST(root)\ndef swap_nodes(root, x, y):\n    '''\n    Write a function to swap nodes x and y in a given binary tree.\n    '''\n    if root == None:\n        return\n    if root.data > x.data and root.data > y.data:\n        swap_nodes(root.left, x, y)\n    elif root.data < x.data and root.data < y.data:\n        swap_nodes(root.right, x, y)\n    else:\n        if x.data > y.data:\n            x.data, y.data = y.data, x.data\n        swap_nodes(root.left, x, y)\n        swap_nodes(root.right, x, y)\ndef count_occurences(string, sub_string):\n    '''\n    Write a function to count the number of occurences of the substring in the given string.\n    '''\n    counter = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            counter += 1\n    return counter\ndef get_code(node, code, value):\n    if node == None:\n        return\n    get_code(node.left, code, value + '0')\n    get_code(node.right, code, value + '1')\n    if node.data == '1':\n        code[0] += value\n    elif node.data == '2':\n        code[1] += value\n    elif node.data == '3':\n        code[2] += value\n    elif node.data == '4':\n        code[3] += value\ndef get_encoded_string(string):\n    '''\n    Write a function to encode the string according to the following mapping:\n    'a' -> \"1\",\n    'b' -> \"2\",\n    'c' -> \"3\",\n    'd' -> \"4\",\n    'e' -> \"5\",\n    'f' -> \"6\",\n    'g' -> \"7\",\n    'h' -> \"8\",\n    'i' -> \"9\",\n    'j' -> \"10\",\n    'k' -> \"11\",\n    'l' -> \"12\",\n    'm' -> \"13\",\n    'n' -> \"14\",\n    'o' -> \"15\",\n    'p' -> \"16\",\n    'q' -> \"17\",\n    'r' -> \"18\",\n    's' -> \"19\",\n    't' -> \"20\",\n    'u' -> \"21\",\n    'v' -> \"22\",\n    'w' -> \"23\",\n    'x' -> \"24\""
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = [char for char in list1 if char not in list2]\n    new_string = ''.join(list2)\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = list(string)\n    str2 = list(string)\n    for x in str1:\n        if x in str2:\n            str2.remove(x)\n    return str2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string) \n    for i in range(len(string_list)): \n        if(string_list[i] in string_list[i + 1:]): \n            string_list[i] = \"\" \n    str_list = \"\".join(string_list).split() \n    return str_list \n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums[:]\n    def isUnique(arr):\n        return len(arr) == len(set(arr))\n    return isUnique(array)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    if len(arraynums) == 1:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dic = {}\n    for num in arraynums:\n        if num in dic:\n            return True\n        else:\n            dic[num] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    visited = set()\n    for num in arraynums:\n        if num in visited:\n            return True\n        visited.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i)>1:\n            return True\n    return False\n    \ndef test_suite():\n    test(test_duplicate, ([],))\n    test(test_duplicate, ([1],))\n    test(test_duplicate, ([1, 2],))\n    test(test_duplicate, ([1, 2, 3],))\n    test(test_duplicate, ([1, 2, 3, 4],))\n    test(test_duplicate, ([1, 2, 3, 4, 5],))\n    test(test_duplicate, ([1, 2, 3, 4, 5, 6],))\n    test(test_duplicate, ([1, 2, 3, 4, 5, 6, 7],))\n    test(test_duplicate, ([1, 2, 3, 4, 5, 6, 7, 8],))\n    test(test_duplicate, ([1, 2, 3, 4, 5, 6, 7, 8, 9],))\n    test(test_duplicate, ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],))\n    test(test_duplicate, ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],))\n    test(test_duplicate, ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],))\n    \nif __name__ == '__main__':\n    test_suite("
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    temp = sorted(arraynums)\n    for i in range(1,len(temp)):\n        if temp[i] == temp[i-1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = False\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            duplicates = True\n    return duplicates\n    \nprint test_duplicate([1,2,3,4,5,6,6,6,7,8,9])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    d = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    sum = 0\n    for i in x:\n        if i.lower() in d:\n            sum += d[i.lower()]\n    if sum%33 == 0:\n        return True\n    else:\n        return False\ndef get_substring(s):\n    '''\n    Write a function to extract a substring from the given string\n    '''\n    l = s.split(' ')\n    return l[2]\ndef is_palindrome(x):\n    '''\n    Write a function to check if the given string is a palindrome\n    '''\n    if x == x[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(x,y):\n    '''\n    Write a function to check if the given strings are anagrams\n    '''\n    if sorted(x) == sorted(y):\n        return True\n    else:\n        return False\ndef is_valid_panagram(x):\n    '''\n    Write a function to check if the given string is a panagram\n    '''\n    d = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    for i in x:\n        if i not in d:\n            return False\n    return True\ndef is_automaton_present(x):\n    '''\n    Write a function to check if the given string is a regular expression.\n    '''\n    pairs = {}\n    for i in x:\n        if i in pairs:\n            pairs[i] += 1\n        else:\n            pairs[i] = 1\n    for i in pairs:\n        if pairs[i] % 2!= 0:\n            return False\n    return True\ndef is_valid_ip(x):\n    '''\n    Write a function to check if the given string is a valid IP address\n    '''\n    if x[0] == '0' and x[1] == '0' and x[2] == '0' and x[3] == '0':\n        return False\n    elif x[0] == '0' or x[1] == '0' or x[2] == '0' or x[3] == '0':\n        return False\n    for i in x:\n        if i.isdigit() is False:\n            return False\n    if len(x) == 4:\n        return True\n    if len(x) == 12:\n        return True\n    else:\n        return False\ndef is_rotation(x,y):\n    '''\n    Write a function to check if the given two strings are rotations of each other\n    '''\n    return x in y+y\ndef is_string_rotation(x,y):\n    '''\n    Write a function to check if the given two strings are rotations of each other\n    '''\n    if len(x)!= len(y):\n        return False\n    for i in range(len(x)):\n        if x[i:i+len(y)] == y:\n            return True\n    return False\ndef is_rotation_2(x,y):\n    '''\n    Write a function to check if the given two strings are rotations of each other\n    '''\n    if len(x)!= len(y):\n        return False\n    for i in range(len(x)):\n        if x[i:]+x[:i] == y:\n            return True\n    return False\ndef is_string_rotation_2(x,y):\n    '''\n    Write a function to check if the given two strings are rotations of each other\n    '''\n    if len(x)!= len(y):\n        return False\n    if x[:len(y)] == y:\n        return True\n    if x[len(y):len(y)+len(y)] == y:\n        return True\n    if x[len(y)+len(y):] == y:\n        return True\n    return False\ndef is_strict_grammar(x):\n    '''\n    Write a function to check if the given string is a strict grammar\n    '''\n    if len(x) == 0:\n        return False\n    d = {}\n    for i in x:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > 1:\n            return False\n    return True\ndef is_skew_grammar(x):\n    '''\n    Write a function to check if the given string is a skew grammar\n    '''\n    if len(x) == 0:\n        return False\n    d = {}\n    for i in x:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > 0 and d[i] < 3:\n            return False\n    return True\ndef is_balanced(x):\n    '''\n    Write a function to check if the given string is a balanced expression\n    '''\n    d = {'(':')', '[':']', '{':'}'}\n    stack = []\n    for i in x:\n        if i in d:\n            stack.append(i)\n        if len(stack) == 0:\n            return False\n        if stack[-1] == d[i]:\n            stack.pop()\n        else:\n            return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef is_bracket_balanced(x):\n    '''\n    Write a function to check if the given string is a balanced expression\n    '''\n    d = {'(':')', '[':']', '{':'}'}\n    stack = []\n    for i in x:\n        if i in d:\n            stack.append(i)\n        if len(stack) == 0:\n            return False\n        if stack[-1] == d[i]:\n            stack.pop()\n        else:\n            if i == ')':\n                if stack[-1]!= '(':\n                    return False\n                stack.pop()\n            elif i == '}':\n                if stack[-1]!= '{':\n                    return False\n                stack.pop()\n            elif i == ']':\n                if stack[-1]!= '[':\n                    return False\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef is_balanced_parentheses(x):\n    '''\n    Write a function to check if the given string is a balanced expression\n    '''\n    d = {'(':')', '[':']', '{':'}'}\n    stack = []\n    for i in x:\n        if i in d:\n            stack.append(i)\n        if len(stack) == 0:\n            return False\n        if stack[-1] == d[i]:\n            stack.pop()\n        else:\n            if i == ')':\n                if stack[-1]!= '(':\n                    return False\n                stack.pop()\n            elif i == '}':\n                if stack[-1]!= '{':\n                    return False\n                stack.pop()\n            elif i == ']':\n                if stack[-1]!= '[':\n                    return False\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        retur"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x)==int:\n        if len(str(x))==6:\n            s=str(x)\n            s=s[-1]\n            t=s[-1]\n            s=s[0]\n            if int(s)+int(t)==int(t):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(len(x)):\n        if x[i] not in '0123456789':\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (int(x[0])**5 + int(x[1])**3 + int(x[2])**2 + int(x[3])**1 + int(x[4])**0) % 11 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    res = False\n    for i in s:\n        if i in \"04\":\n            res = True\n            break\n    return res\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x))!= 6 or x < 100000 or x > 999999:\n        return False\n    n = str(x)\n    if n[0] == n[1] and n[0] == n[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if '2' in str(x) and '7' in str(x):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2==0\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (len(x)==7) and (x.isdigit())\ndef is_palindrome(x): \n    '''\n    Write a function to check if the given number is a palindrome or not.\n    '''\n    return (x[::-1]==x)\ndef is_pangram(x): \n    '''\n    Write a function to check if the given string is a pangram or not.\n    '''\n    return (set(x.lower()).issuperset(set('abcdefghijklmnopqrstuvwxyz')))\ndef is_keypad(x): \n    '''\n    Write a function to check if the given number is a keypad or not.\n    '''\n    return (x in '@ABCDEFGHIJKLMNOPQRSTUVWXYZ')\ndef is_binary(x): \n    '''\n    Write a function to check if the given number is a binary number or not.\n    '''\n    return (x in [0, 1])\ndef is_pandigital(x): \n    '''\n    Write a function to check if the given number is a pandigital number or not.\n    '''\n    return (len(str(x))==9) and (set(str(x))-set('123456789')==set())\ndef is_plus(x): \n    '''\n    Write a function to check if the given number is a plus or not.\n    '''\n    return (x=='+')\ndef is_minus(x): \n    '''\n    Write a function to check if the given number is a minus or not.\n    '''\n    return (x=='-')\ndef is_multiply(x): \n    '''\n    Write a function to check if the given number is a multiply or not.\n    '''\n    return (x=='*')\ndef is_divide(x): \n    '''\n    Write a function to check if the given number is a divide or not.\n    '''\n    return (x=='/')\ndef is_perfect(x): \n    '''\n    Write a function to check if the given number is a perfect number or not.\n    '''\n    return (sum(int(i) for i in str(x))==x)\ndef is_happy(x): \n    '''\n    Write a function to check if the given number is a happy number or not.\n    '''\n    return (x==1)\ndef is_anagram(x,y): \n    '''\n    Write a function to check if the given two strings are anagrams or not.\n    '''\n    return (sorted(x)==sorted(y))\ndef is_isogram(x): \n    '''\n    Write a function to check if the given number is a isogram or not.\n    '''\n    return (set(x)==set(x.lower()))\ndef is_rotate(x): \n    '''\n    Write a function to check if the given number is a rotate or not.\n    '''\n    return (int(str(x)[2]+str(x)[:2]+str(x)[3:])==x)\ndef is_phone_number(x): \n    '''\n    Write a function to check if the given number is a phone number or not.\n    '''\n    return (len(x)==10) and (set(x)==set(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']))\ndef is_phone_number2(x): \n    '''\n    Write a function to check if the given number is a phone number or not.\n    '''\n    return (len(x)==10) and (set(x)==set('0123456789'))\ndef is_power_of_k(x,k): \n    '''\n    Write a function to check if the given number is a power of k or not.\n    '''\n    return ((x%k==0) and (x/k in range(0,10)))\ndef is_substring(x,y): \n    '''\n    Write a function to check if the given two strings are substring or not.\n    '''\n    return (x in y)\ndef is_substring2(x,y): \n    '''\n    Write a function to check if the given two strings are substring or not.\n    '''\n    return (y in x)\ndef is_match(x,y): \n    '''\n    Write a function to check if the given two strings are a match or not.\n    '''\n    if (len(x)==len(y)): \n        return (x==y)\n    else: \n        return (x in y)\ndef is_alternate(x): \n    '''\n    Write a function to check if the given number is an alternate of number or not.\n    '''\n    return (str(x)[2:]==str(x)[:2])\ndef is_odd(x): \n    '''\n    Write a function to check if the given number is odd or even.\n    '''\n    return (x%2==1)\ndef is_first_unique(x): \n    '''\n    Write a function to check if the given number is first unique or not.\n    '''\n    return (x in set([x])-set(str(x)[1:]))\ndef is_every_x_repeated(x,x_times): \n    '''\n    Write a function to check if the given number is every x_times repeated or not.\n    '''\n    return (x in set([str(x*i) for i in range(1,x_times+1)]))\ndef is_fibonacci(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return (is_power_of_k(x,5))\ndef is_fibonacci2(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>4) and (x<40))\ndef is_fibonacci3(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>1) and (x<40))\ndef is_fibonacci4(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>3) and (x<40))\ndef is_fibonacci5(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>2) and (x<40))\ndef is_fibonacci6(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>1) and (x<40))\ndef is_fibonacci7(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>0) and (x<40))\ndef is_fibonacci8(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>0) and (x<40))\ndef is_fibonacci9(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>0) and (x<40))\ndef is_fibonacci10(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    '''\n    return ((x%5==0) and (x>0) and (x<40))\ndef is_fibonacci11(x): \n    '''\n    Write a function to check if the given number is fibonacci or not.\n    ''"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revs = 0\n    while num > 0:\n        rem = num % 10\n        revs = revs * 10 + rem\n        num = num / 10\n    if revs == num - 1:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #print num\n    #print num[::-1]\n    if num == num[::-1]:\n        return True\n    else:\n        return False\n        \ndef palindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome number. \n    A palindrome number is a number that is the same when reversed. \n    For example, 121 is a palindrome while 123 is not.\n    '''\n    rev_num = str(num)[::-1]\n    if num == int(rev_num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    elif num % 2 == 0:\n        return False\n    else:\n        rev = 0\n        while num > 0:\n            rem = num % 10\n            rev = rev * 10 + rem\n            num = num / 10\n        return (rev == (num - 2))\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if(num == num[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    rev_num = 0\n    while num > 0:\n        digit = num%10\n        rev_num = (rev_num*10) + digit\n        num = num/10\n    if num == rev_num-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if int(str(num)[::-1]) == 2 * int(str(num)[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if int(str(num)[::-1]) == 2 * int(str(num)[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    else:\n        if num%10 == num/2:\n            return rev(num//10)\n        else:\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = int(num)\n    rev_num = 0\n    while (num > 0):\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    if (rev_num == (2 * num) - 1):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = int(str(num)[::-1])\n    if (num - rev) == 2*rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    l = len(arr)\n    max_num = 0\n    if arr[0] > arr[1]:\n        max_num = arr[0]\n    else:\n        max_num = arr[1]\n    for i in range(2,l):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxnum=arr[0]\n    for i in range(1,len(arr)) :\n        if arr[i]>maxnum :\n            maxnum=arr[i]\n    return maxnum\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    length = len(arr)\n    if length == 0:\n        return 0\n    if length == 1:\n        return arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 :\n        return arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max :\n            max = arr[i]\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    for x in arr : \n        num = num * 10 + x\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==0 :\n        return 0\n    elif len(arr)==1 :\n        return arr[0]\n    elif len(arr)==2 :\n        if arr[0]==arr[1] :\n            return 0\n        elif arr[0]>arr[1] :\n            return arr[0]\n        else :\n            return arr[1]\n    else :\n        arr2=arr[0:len(arr)/2]\n        arr3=arr[len(arr)/2:]\n        return find_Max_Num(arr2) if find_Max_Num(arr2)>find_Max_Num(arr3) else find_Max_Num(arr3)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 :\n        return None\n    elif len(arr) == 1 :\n        return arr[0]\n    else :\n        return max(arr[0]*10+arr[1], arr[0]*100+arr[2], arr[0]*1000+arr[3])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr : \n        return None\n    max_num = arr[0]\n    for i in range(1, len(arr)) : \n        if max_num < arr[i] : \n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n    \ndef palindrome(x):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    if x < 0:\n        return False\n    num = x\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num%10\n        num = num / 10\n    return reverse == x\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #Make sure that x and y are integers.\n    x=int(x)\n    y=int(y)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    elif x==0 and y==0:\n        return False\n    else:\n        return False\ndef is_Pentagonal(x):\n    '''\n    Write a python function to check whether the given integer is pentagonal or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 24*x)**0.5)/6\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Hexagonal(x):\n    '''\n    Write a python function to check whether the given integer is hexagonal or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 8*x)**0.5)/4\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Heptagonal(x):\n    '''\n    Write a python function to check whether the given integer is heptagonal or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 16*x)**0.5)/8\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Octagonal(x):\n    '''\n    Write a python function to check whether the given integer is octagonal or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 36*x)**0.5)/9\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Icosagonal(x):\n    '''\n    Write a python function to check whether the given integer is icosagonal or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 4*x)**0.5)/2\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Square(x):\n    '''\n    Write a python function to check whether the given integer is square or not.\n    '''\n    from math import sqrt\n    z = sqrt(x)\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Triangular(x):\n    '''\n    Write a python function to check whether the given integer is triangular or not.\n    '''\n    from math import sqrt\n    z = (1 + x)**0.5\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Trapezoidal(x):\n    '''\n    Write a python function to check whether the given integer is trapezoidal or not.\n    '''\n    from math import sqrt\n    z = (x + (x**2 + 4*x)**0.5)/2\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Trinomial(x):\n    '''\n    Write a python function to check whether the given integer is trinomial or not.\n    '''\n    from math import sqrt\n    z = (1 + (x**3 + x)**0.5)/2\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Quadratic(x):\n    '''\n    Write a python function to check whether the given integer is quadratic or not.\n    '''\n    from math import sqrt\n    z = x**2\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Power(x):\n    '''\n    Write a python function to check whether the given integer is power or not.\n    '''\n    from math import sqrt\n    z = (x**0.5)\n    if z-int(z)==0:\n        return True\n    else:\n        return False\ndef is_Hexagonal_Prime(x):\n    '''\n    Write a python function to check whether the given integer is hexagonal prime or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 8*x)**0.5)/4\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Pentagonal_Prime(x):\n    '''\n    Write a python function to check whether the given integer is pentagonal prime or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 24*x)**0.5)/6\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Hexagonal_Prime(x):\n    '''\n    Write a python function to check whether the given integer is hexagonal prime or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 16*x)**0.5)/8\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Heptagonal_Prime(x):\n    '''\n    Write a python function to check whether the given integer is heptagonal prime or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 36*x)**0.5)/9\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Octagonal_Prime(x):\n    '''\n    Write a python function to check whether the given integer is octagonal prime or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 36*x)**0.5)/9\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Icosagonal_Prime(x):\n    '''\n    Write a python function to check whether the given integer is icosagonal prime or not.\n    '''\n    from math import sqrt\n    z = (1 + (1 + 4*x)**0.5)/2\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Square_Prime(x):\n    '''\n    Write a python function to check whether the given integer is square prime or not.\n    '''\n    from math import sqrt\n    z = sqrt(x)\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Triangular_Prime(x):\n    '''\n    Write a python function to check whether the given integer is triangular prime or not.\n    '''\n    from math import sqrt\n    z = (1 + x)**0.5\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Trapezoidal_Prime(x):\n    '''\n    Write a python function to check whether the given integer is trapezoidal prime or not.\n    '''\n    from math import sqrt\n    z = (x + (x**2 + 4*x)**0.5)/2\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Trinomial_Prime(x):\n    '''\n    Write a python function to check whether the given integer is trinomial prime or not.\n    '''\n    from math import sqrt\n    z = (1 + x**3 + x)**0.5\n    if z-int(z)==0 and is_Prime(int(z)):\n        return True\n    else:\n        return False\ndef is_Quadratic_Prime(x):\n    '''\n    Write a python function to check whether the given integer is quadratic prime or not.\n    '''\n    from math import sqrt\n    z = x**2\n    if z-int(z)==0 and is_Prim"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        print 'No'\n    elif x>0 and y<0:\n        print 'Yes'\n    elif x<0 and y>0:\n        print 'Yes'\n    elif x>0 and y>0:\n        print 'No'\n    else:\n        print 'Not Valid'\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    if x == y:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # nth_octagonal = [n*(n*n + 1) / 2 for n in range(1, 1000)]\n    nth_octagonal = [n*(3*n - 1) / 2 for n in range(1, 1000)]\n    return nth_octagonal[n - 1]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (2*n*(n+1) + 1)**2 == (2*n+1)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 + n) == (2*n + 1)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return 1/2**(1/4)*(2*n+1)**2\n    \ndef get_all_octagonals(n):\n    '''\n    Return a list of all the octagonals up to n.\n    '''\n    res = []\n    for i in range(n):\n        res.append(is_octagonal(i+1))\n    return res\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n-1))/2\n    \n    \nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number to find the octagonal number for: \"))\n    \n    print(is_octagonal(n))\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_nums = [1, 8, 15, 22, 29, 36, 43, 50, 57, 64, 71, 78, 85, 82, 79, 78, 75, 72, 69, 66, 63, 60, 57, 54, 51, 48, 45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0]\n    # octagonal_nums = [1, 5, 12, 19, 28, 35, 42, 49, 56, 63, 70, 77, 84, 82, 81, 78, 75, 72, 69, 66, 63, 60, 57, 54, 51, 48, 45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0]\n    if n > len(octagonal_nums):\n        return False\n    return octagonal_nums[n]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n + 1)) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n**2 * (3*n - 1) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return n*(3*n - 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    counter = 0\n    current = 0\n    while counter < n:\n        current += counter ** 2\n        counter += 1\n    return current\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = len(s)\n    if m==0:\n        return 0\n    d = defaultdict(int)\n    count = 0\n    cur = 0\n    d[0] = 1\n    for i in range(m):\n        cur += (ord(s[i]) - ord('0'))\n        d[cur] += 1\n    for key in d:\n        if key==0:\n            count += d[key]\n        else:\n            count += (d[key] * (d[key]-1)) // 2\n    return count\nprint count_Substrings('1314')\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            d[s[j:j + len(s) - i]] += 1\n    print(d)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s1 = s\n    s1_l = list(s1)\n    count = 0\n    if len(s1) == 0:\n        return 0\n    if len(s1) == 1:\n        if int(s1_l[0]) == 1:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict1 = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            dict1[j-i]+=1\n    print(dict1)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if sum(int(char) for char in s[i:j]) == j-i:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        if i == 0:\n            d[s[i]] += 1\n        elif s[i] == s[i-1]:\n            d[s[i]] += 1\n        else:\n            d[s[i]] += 1\n            d[s[i] - s[i-1]] += 1\n    return sum(d.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            summ = 0\n            for k in range(j,i,-1):\n                summ += int(s[k])\n                if summ == j-i+1:\n                    count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i,n):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(len(s)-i+1):\n            d[int(s[j:j+i])]+=1\n    return sum(d.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            d[sum(int(a) for a in s[i:j+1])]+=1\n    print(d)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    for x in xs:\n        if x < small:\n            small = x\n    return small\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append(abs(test_list[i] - test_list[j]))\n    return max(result)\n    \ndef max_difference_list(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                result.append(abs(test_list[i] - test_list[j]))\n    return max(result)\n    \ndef max_difference_list(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                result.append(abs(test_list[i] - test_list[j]))\n    return max(result)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    if len(test_list) < 2:\n        return -1\n    diffs = [abs(test_list[i]-test_list[i+1]) for i in range(0, len(test_list)-1)]\n    return max(diffs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Store the minumum value\n    min_val = test_list[0]\n    max_diff = abs(test_list[1]-test_list[0])\n    for i in range(len(test_list)-1):\n        if abs(test_list[i+1]-test_list[i]) > max_diff:\n            max_diff = abs(test_list[i+1]-test_list[i])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #Sorting the list to get better performance\n    test_list.sort()\n    \n    for i in range(len(test_list)):\n        if i==0:\n            continue\n        else:\n            if test_list[i]==test_list[i-1]:\n                return 0\n    return test_list[-1]-test_list[0]\n    \n    \nif __name__=='__main__':\n    print max_difference(test_list)"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #result = (test_list[0] + test_list[1]) - (test_list[2] + test_list[3])\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result = max(result, (test_list[i] + test_list[j]) - (test_list[i] + test_list[j]))\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    max_difference = 0\n    sorted_list = sorted(test_list)\n    for i in range(0, len(sorted_list) - 1, 2):\n        max_difference = max(max_difference, sorted_list[i+1] - sorted_list[i])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    total_diff = 0\n    for i in range(len(sorted_list) - 1):\n        diff = abs(sorted_list[i] - sorted_list[i + 1])\n        total_diff = max(diff, total_diff)\n    return total_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    def get_max_diff(current_list):\n        if not current_list:\n            return 0\n        elif len(current_list) == 2:\n            return abs(current_list[0] - current_list[1])\n        else:\n            return max(current_list[0] - current_list[1], current_list[-1] - current_list[-2])\n    \n    diff = 0\n    for i in range(0, len(test_list), 2):\n        diff = max(diff, get_max_diff(test_list[i:i+2]))\n    return diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return -1\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    return sorted_list[-1] - sorted_list[0]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = sorted(subjectmarks, key=lambda x: x[1])\n    for i in l:\n        print(i[0], i[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    res = sorted(subjectmarks, key=lambda x: x[1])\n    return res\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list1 = []\n    for i in subjectmarks:\n        list1.append(i[1])\n    list1.sort()\n    return list1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if subjectmarks:\n        return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list) and len(data_list) == 0:\n        return 0\n    elif isinstance(data_list, list) and len(data_list) == 1:\n        return data_list[0]\n    elif isinstance(data_list, list) and len(data_list) > 1:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: list of length 0\n    if not data_list:\n        return 0\n    # split list into sublists\n    sublist_1 = data_list[0]\n    sublist_2 = data_list[1:]\n    return sublist_1 + recursive_list_sum(sublist_2)\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if data_list == []:\n        return 0\n    elif type(data_list[0]) == type([]):\n        total += recursive_list_sum(data_list[0])\n    else:\n        total += data_list[0]\n    return total + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(x) for x in data_list])\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == list:\n        data_list = [element for sublist in data_list for element in sublist]\n        return sum(data_list)\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is not list:\n        return data_list\n    else:\n        result = 0\n        for element in data_list:\n            result += recursive_list_sum(element)\n        return result\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if type(data_list) is list:\n        for val in data_list:\n            total += recursive_list_sum(val)\n    else:\n        total += data_list\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for element in list:\n        if element > 0:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count = pos_count + 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for x in list:\n        if x > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for num in list:\n        if num > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0 for _ in range(n+1)]\n    bell[1] = bell[2] = 1\n    for i in range(3, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Create a 2d array to store the values\n    result = [[0 for i in range(n)] for j in range(n)]\n    # Initialize the first row\n    for i in range(n):\n        result[0][i] = 1\n    # Fill in the rest of the rows\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                result[i][j] += result[i-1][k]\n    return result[n-1][n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    num = [0] * n\n    num[0] = 1\n    num[1] = 1\n    for i in xrange(2, n):\n        num[i] = (num[i-1] + num[i-2]) % 1000000007\n    return num[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # number of ways to partition n into 2 partitions of sizes 1 and n-1\n    # where n is a positive integer\n    # i.e. n=1,2,3,4,5,6,7,8,9,10,... are the numbers of ways to partition them\n    # n=0,1,2,3,4,5,6,7,8,9,10,... are the numbers of ways to partition them with\n    # 0 partitions\n    # n=2,3,4,5,6,7,8,9,10,... are the numbers of ways to partition them with 2 partitions\n    # n=4,5,6,7,8,9,10,... are the numbers of ways to partition them with 3 partitions\n    #...\n    # n=7,8,9,10,... are the numbers of ways to partition them with n-1 partitions\n    # the number of ways to partition a set of Bell numbers is given by the Bell number\n    # b(n) = (n-1)*n/2 + 1\n    #       = b(n-1) + b(n-2) +... + b(2) + 1\n    #       = (n-1)*(n-2)/2 + n/2\n    #       = n(n-1)/2\n    # and for any n, if n is even, then n(n-1)/2 is the number of ways to partition n into\n    # 2 partitions of size n/2\n    # for n odd, n(n-1)/2 is the number of ways to partition n into 3 partitions of size n/3\n    # so, b(n) = n(n-1)/2 * n/2 = n(n-1)*(n-2)/2\n    # for example, b(7)=7*6/2*5/2*4/2*3/2*2/2 = 105\n    # and for any n, if n is even, then n(n-1)/2 is the number of ways to partition n into\n    # 2 partitions of size n/2\n    # for example, b(7)=7*6/2*5/2*4/2*3/2*2/2 = 105\n    # the number of ways to partition a set of Bell numbers is the sum of the Bell numbers\n    # from 1 to n\n    # for example, b(7)=105+105+105+105+105+105+105+105+105\n    # or, b(7)=1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n    # so, for any n, if n is even, then n(n-1)/2 is the number of ways to partition n into\n    # 2 partitions of size n/2\n    # for example, b(7)=105+105+105+105+105+105+105+105+105\n    # for any n, if n is odd, then n(n-1)/2 is the number of ways to partition n into\n    # 3 partitions of size n/3\n    # for example, b(7)=105+105+105+105+105+105+105+105\n    # and for any n, if n is even, then n(n-1)/2 is the number of ways to partition n into\n    # 2 partitions of size n/2\n    # for example, b(7)=105+105+105+105+105+105+105+105\n    # so, for any n, if n is odd, then n(n-1)/2 is the number of ways to partition n into\n    # 3 partitions of size n/3\n    # for example, b(7)=105+105+105+105+105+105+105\n    # for any n, if n is even, then n(n-1)/2 is the number of ways to partition n into\n    # 2 partitions of size n/2\n    # for example, b(7)=105+105+105+105+105+105+105\n    # for any n, if n is odd, then n(n-1)/2 is the number of ways to partition n into\n    # 3 partitions of size n/3\n    # for example, b(7)=105+105+105+105+105+105\n    # so, b(n) is the number of ways to partition a set of Bell numbers from 1 to n\n    # therefore, if b(n) = b(n-1) + b(n-2) +... + b(2) + 1\n    # then, we know that for any n, if n is even, then n(n-1)/2 is the number of ways to\n    # partition n into 2 partitions of size n/2\n    # for example, b(7)=105+105+105+105+105+105+105\n    # for any n, if n is odd, then n(n-1)/2 is the number of ways to partition n into\n    # 3 partitions of size n/3\n    # for example, b(7)=105+105+105+105+105+105\n    # and for any n, if n is even, then n(n-1)/2 is the number of ways to partition n into\n    # 2 partitions of size n/2\n    # for example, b(7)=105+105+105+105+105+105\n    # so, b(n) is the number of ways to partition a set of Bell numbers from 1 to n\n    # so, b(7) = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b(6) + b(5) + b(4) + b(3) + b(2) + b(1) + 1\n    #       = b("
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n        "
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell(n+1)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A==None or len(A)<2: return False\n    if A[0]<=A[1]: #check the first and second element\n        for i in xrange(2,len(A)):\n            if A[i]<=A[i-1]: return False\n    else: #check the last and second element\n        for i in xrange(2,len(A)):\n            if A[i]>=A[i-1]: return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0 or len(A)==1:\n        return True\n    for i in range(1,len(A)):\n        if A[i-1]<A[i] and A[i]>=A[i-1]:\n            continue\n        else:\n            return False\n    return True\ndef is_Monotonic_Increasing(A):\n    '''\n    Write a python function to check whether the given array is monotonic increasing or not.\n    '''\n    if len(A)==0 or len(A)==1:\n        return True\n    for i in range(1,len(A)):\n        if A[i-1]>=A[i] and A[i]<=A[i-1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or \n            all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if the array is of length 0, return false\n    if len(A) == 0:\n        return False\n    # check for monotonicity in array\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: return True\n    state = True\n    for i in range(1,len(A)):\n        if A[i] <= A[i-1]:\n            state = False\n            break\n    return state\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    return A[0] < A[1] and A[1] > A[2]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0 or len(A)==1:\n        return True\n    if A[0]<=A[1]:\n        for i in xrange(1,len(A)-1):\n            if A[i]<=A[i+1] or A[i+1]<=A[i]:\n                return False\n    else:\n        for i in xrange(1,len(A)-1):\n            if A[i]>=A[i+1] or A[i+1]>=A[i]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (A[0] < A[1] and A[1] < A[2] and A[2] < A[3] and A[3] < A[4] and A[4] < A[5])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    elif A[0]<=A[1]:\n        for i in range(2,len(A)):\n            if A[i]<=A[i-1]:\n                return False\n    else:\n        for i in range(2,len(A)):\n            if A[i]>=A[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in xrange(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if len(s) == 0:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i] == s[0]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return True\n    if s == l[:len(s)]:\n        return True\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l1 = l[:]\n    for item in s:\n        if item in l1:\n            l1.remove(item)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #this function is not correct\n    #check whether l is sublist of s\n    for i in l:\n        if i not in s:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #print \"l:\",l,\"s:\",s\n    s_len = len(s)\n    i = 0\n    for i in xrange(len(l)):\n        if l[i] == s[0]:\n            #print \"1\",l[i:s_len+i]\n            if l[i:s_len+i] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    if not s:\n        return True\n    else:\n        l1 = l[:len(s)]\n        if l1 == s:\n            return True\n        else:\n            return is_sublist(l[len(s):], s)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = 0\n    for x in Input:\n        if len(x) == len(Input[0]):\n            result = 1\n            break\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    count = 0\n    for each in Input:\n        count += 1\n        if len(each)!= count:\n            return False\n    \n    return True\n    \nprint(find_equal_tuple([(1,2,3),(1,2,3),(1,2,3)]))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    elif len(Input) == 1:\n        return True\n    else:\n        return (len(Input[0]) == len(Input[1])) and find_equal_tuple(Input[1:])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(x) for x in Input])) < 2\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = sorted(Input)\n    input_length = len(Input)\n    for i in range(1,input_length):\n        if len(Input[i-1])!= len(Input[i]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = list(Input)\n    temp = list(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= len(temp):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!=len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for index in range(0,len(Input)-1):\n        if len(Input[index])!= len(Input[index+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if type(Input) == list:\n        if len(Input) > 1:\n            temp = Input[0]\n            if len(temp) == len(Input[1]):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return []\n    else:\n        comparisons = 0\n        length = len(nums)\n        for i in range(length):\n            comparisons += 1\n            for j in range(length - i - 1):\n                comparisons += 1\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return comparisons\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in xrange(len(nums) - 1):\n        curr = nums[i]\n        idx = i\n        for j in xrange(i + 1, len(nums)):\n            if nums[j] < curr:\n                idx = j\n                curr = nums[j]\n        if idx!= i:\n            nums[i], nums[idx] = nums[idx], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    #check for empty list\n    if not nums:\n        return\n    \n    #check for length 1 or 2\n    if len(nums) == 1 or len(nums) == 2:\n        return nums\n    \n    #check for negative numbers\n    if min(nums) < 0:\n        raise ValueError(\"Comb Sort can only be used with non-negative numbers\")\n    \n    #set the starting position\n    first = 0\n    \n    #set the ending position\n    last = len(nums) - 1\n    \n    #calculate the start and ending position\n    while first < last:\n        \n        #initialise the start and ending positions\n        start = first\n        end = last\n        \n        #store the start and end position in variables\n        start_pos = nums[first]\n        end_pos = nums[last]\n        \n        #print the start and end positions\n        print start_pos, end_pos\n        \n        #while the start position is less than the end position\n        while start < end:\n            \n            #set the value of end\n            end = end - 1\n            \n            #check if the start position is less than the end position\n            if nums[end] > start_pos:\n                \n                #swap the two positions\n                nums[end], nums[start] = nums[start], nums[end]\n                \n                #print the current position\n                print nums[start], nums[end]\n                \n                #increment the start position\n                start = start + 1\n            \n        #while the start position is less than the end position\n        while start < end:\n            \n            #set the value of start\n            start = start + 1\n            \n            #check if the end position is less than the start position\n            if nums[end] > end_pos:\n                \n                #swap the two positions\n                nums[end], nums[start] = nums[start], nums[end]\n                \n                #print the current position\n                print nums[start], nums[end]\n                \n                #increment the end position\n                end = end - 1\n                \n        #print the end position\n        print end_pos\n        \n        #check if the last position is less than the start position\n        if last > first:\n            nums[first], nums[last] = nums[last], nums[first]\n            \n            #print the current position\n            print nums[first], nums[last]\n        \n        #increment the first position\n        first = first + 1\n        \n    #return the sorted list\n    return nums\n    "
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def exchange(a, b):\n        '''\n        Perform exchange between two elements a and b.\n        '''\n        tmp = a\n        a = b\n        b = tmp\n    \n    def split(arr, elem, start, end):\n        '''\n        Perform split operation on the array arr.\n        '''\n        middle = int((start + end) / 2)\n        exchange(arr[middle], elem)\n        return middle\n    \n    # Main\n    combs = 1\n    while True:\n        combs *= 2\n        if combs > len(nums):\n            return nums\n        for i in range(len(nums) - combs + 1):\n            if nums[i] > nums[i + combs - 1]:\n                pivot = split(nums, nums[i + combs - 1], i, i + combs - 1)\n                exchange(nums[pivot], nums[i])\n    \n    "
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap/1.25))\n        swapped = False\n        for i in range(0, length - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        return sorted(nums)\n    if len(nums) > 2:\n        for i in range(0, len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    swaps = 0\n    for i in range(length):\n        if i < length - 1:\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swaps += 1\n    print('swaps: ', swaps)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        swapped = False\n        gap = max(1, int(gap / 1.25))\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import sqrt\n    for i in range(n): \n        if i*i <= n and sqrt(n-i*i) * sqrt(n-i*i) == n-i*i: \n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    elif n % 4 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n/2): \n        for j in range(i+1, n/2):\n            if i**2 + j**2 == n: \n                return True\n    return False\ndef dif_Triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two triangles or not.\n    '''\n    i = 1\n    while i*(i+1)/2 <= n: \n        if i*(i+1)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Pentagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two pentagons or not.\n    '''\n    i = 1\n    while i*(3*i-1)/2 < n: \n        if i*(3*i-1)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Hexagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(2*i-1) < n: \n        if i*(2*i-1) == n: \n            return True\n        i += 1\n    return False\ndef dif_Hexagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(2*i-1) < n: \n        if i*(2*i-1) == n: \n            return True\n        i += 1\n    return False\ndef dif_Heptagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(5*i-3)/2 < n: \n        if i*(5*i-3)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Octagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(3*i-2) < n: \n        if i*(3*i-2) == n: \n            return True\n        i += 1\n    return False\ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(i+1)/2 < n: \n        if i*(i+1)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Pentagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(3*i-1)/2 < n: \n        if i*(3*i-1)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Hexagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(2*i-1) < n: \n        if i*(2*i-1) == n: \n            return True\n        i += 1\n    return False\ndef dif_Hexagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(2*i-1) < n: \n        if i*(2*i-1) == n: \n            return True\n        i += 1\n    return False\ndef dif_Heptagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(5*i-3)/2 < n: \n        if i*(5*i-3)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Octagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(3*i-2) < n: \n        if i*(3*i-2) == n: \n            return True\n        i += 1\n    return False\ndef dif_Pentagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(5*i-3)/2 < n: \n        if i*(5*i-3)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Hexagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(2*i-1) < n: \n        if i*(2*i-1) == n: \n            return True\n        i += 1\n    return False\ndef dif_Heptagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(5*i-3)/2 < n: \n        if i*(5*i-3)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Octagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(3*i-2) < n: \n        if i*(3*i-2) == n: \n            return True\n        i += 1\n    return False\ndef dif_Pentagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(5*i-3)/2 < n: \n        if i*(5*i-3)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Hexagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(2*i-1) < n: \n        if i*(2*i-1) == n: \n            return True\n        i += 1\n    return False\ndef dif_Heptagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(5*i-3)/2 < n: \n        if i*(5*i-3)/2 == n: \n            return True\n        i += 1\n    return False\ndef dif_Octagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while i*(3*i-2) < n: \n        if i*(3*i-2) == n: \n            return True\n        i += 1\n    return False\ndef dif_Pentagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagons or not.\n    '''\n    i = 1\n    while "
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    list_of_square = []\n    for i in range(1, n):\n        if i ** 2 < n and (n - i ** 2) ** 0.5 == int((n - i ** 2) ** 0.5):\n            list_of_square.append(i)\n            list_of_square.append(n - i)\n    return list_of_square\ndef check_if_Prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    list_of_prime = []\n    for i in range(2, n):\n        if n % i == 0:\n            list_of_prime.append(i)\n    return list_of_prime\ndef prime_factors(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    list_of_prime = check_if_Prime(n)\n    list_of_factor = []\n    for i in list_of_prime:\n        if n % i == 0:\n            list_of_factor.append(i)\n    return list_of_factor\ndef divisors(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    list_of_factor = prime_factors(n)\n    list_of_divisors = []\n    for i in list_of_factor:\n        temp_list = []\n        j = 2\n        while j <= n / i:\n            if n % j == 0:\n                temp_list.append(j)\n                while n % j == 0:\n                    n /= j\n            j += 1\n        if len(temp_list) > 0:\n            list_of_divisors = list_of_divisors + temp_list\n    return list_of_divisors\ndef divisors_of_n(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    list_of_divisors = divisors(n)\n    for i in list_of_divisors:\n        list_of_divisors.remove(i)\n        list_of_divisors.remove(i)\n    return list_of_divisors\ndef check_if_Circular(n):\n    '''\n    Write a python function to check whether the given number is Circular or not.\n    '''\n    list_of_divisors = divisors_of_n(n)\n    if len(list_of_divisors) == 0:\n        return True\n    else:\n        return False\ndef circular_primes(n):\n    '''\n    Write a python function to check whether the given number is Circular or not.\n    '''\n    list_of_circular = []\n    for i in range(2, n):\n        if check_if_Circular(i):\n            list_of_circular.append(i)\n    return list_of_circular\ndef rabin_miller(n):\n    '''\n    Write a python function to check whether the given number is Prime or not.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    s = 0\n    d = n - 1\n    while d % 2 == 0:\n        d = d / 2\n        s = s + 1\n    for i in range(100):\n        a = random.randrange(2, n - 1)\n        t = pow(a, d, n)\n        if t == 1 or t == n - 1:\n            continue\n        for j in range(s - 1):\n            t = t * t % n\n            if t == n - 1:\n                break\n        else:\n            return False\n    return True\ndef rabin_miller_for_n(n):\n    '''\n    Write a python function to check whether the given number is Prime or not.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    s = 0\n    d = n - 1\n    while d % 2 == 0:\n        d = d / 2\n        s = s + 1\n    for i in range(100):\n        a = random.randrange(2, n - 1)\n        t = pow(a, d, n)\n        if t == 1 or t == n - 1:\n            continue\n        for j in range(s - 1):\n            t = t * t % n\n            if t == n - 1:\n                break\n        else:\n            return False\n    return True\ndef armstrong_numbers(n):\n    '''\n    Write a python function to check whether the given number is Armstrong or not.\n    '''\n    temp_list = []\n    temp_list = divisors_of_n(n)\n    if len(temp_list) == 0:\n        return True\n    else:\n        return False\ndef armstrong_numbers_for_n(n):\n    '''\n    Write a python function to check whether the given number is Armstrong or not.\n    '''\n    temp_list = []\n    temp_list = divisors_of_n(n)\n    for i in temp_list:\n        if i ** len(temp_list) == n:\n            return True\n    return False\ndef rsa_encryption(n, e, plaintext):\n    '''\n    Write a python function to encrypt the given message using the RSA algorithm.\n    '''\n    cipher = []\n    for i in plaintext:\n        cipher.append(pow(ord(i), e, n))\n    return cipher\ndef rsa_decryption(n, d, ciphertext):\n    '''\n    Write a python function to decrypt the given message using the RSA algorithm.\n    '''\n    plaintext = []\n    for i in ciphertext:\n        plaintext.append(chr(pow(i, d, n)))\n    return plaintext\ndef rsa_encryption_for_n(n, e, plaintext):\n    '''\n    Write a python function to encrypt the given message using the RSA algorithm.\n    '''\n    cipher = []\n    for i in plaintext:\n        cipher.append(pow(ord(i), e, n))\n    return cipher\ndef rsa_decryption_for_n(n, d, ciphertext):\n    '''\n    Write a python function to decrypt the given message using the RSA algorithm.\n    '''\n    plaintext = []\n    for i in ciphertext:\n        plaintext.append(chr(pow(i, d, n)))\n    return plaintext\ndef rsa_encryption_for_prime(n, e, plaintext):\n    '''\n    Write a python function to encrypt the given message using the RSA algorithm.\n    '''\n    cipher = []\n    for i in plaintext:\n        cipher.append(pow(ord(i), e, n))\n    return cipher\ndef rsa_decryption_for_prime(n, d, ciphertext):\n    '''\n    Write a python function to decrypt the given message using the RSA algorithm.\n    '''\n    plaintext = []\n    for i in ciphertext:\n        plaintext.append(chr(pow(i, d, n)))\n    return plaintext\ndef test_rsa_encryption_decryption():\n    '''\n    Write a python function to test the above functions.\n    '''\n    plaintext = 'This is a test message'\n    ciphertext = rsa_encryption_for_prime(15, 3, plaintext)\n    decrypted_plaintext = rsa_decryption_for_prime(15, 3, ciphertext)\n    if decrypted_plaintext == plaintext:\n        print 'Successful Decryption using RSA algorithm'\n    else:\n        print 'Failed Decryption using RSA algorithm'\n    ciphertext = rsa_encryption_for_n(15, 3, plaintext)\n    decrypted_plaintext = rsa_decryption_for_n(15, 3, ciphertext)\n    if decrypted_plaintext == plaintext:\n        print 'Successful Decryption using RSA algorithm'\n    else:\n        print 'Failed Decryption using RSA algorithm'\ndef test_dif_Square():\n    '''\n    Write a python function to test the above functions.\n    '''\n    prin"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = 0\n    b = 0\n    while a**2 < n:\n        b = a\n        a = a + 1\n    if a**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n**0.5).is_integer(): \n        return False\n    else:\n        for i in range(1,int(n**0.5)+1):\n            if n==i**2+i**0.5**2:\n                return True\n            elif n==i**2+i**0.5**2-1:\n                return True\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    for i in xrange(1, int(sqrt(n))):\n        if (i**2) == n:\n            return True\n        elif (i**2) < n:\n            return False\n        elif (i**2) > n:\n            return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n): \n        if n - i*i == i*i : print 'True'\n        else: print 'False'\ndef test_dif_Square():\n    assert dif_Square(10) == True\n    assert dif_Square(11) == False\n    assert dif_Square(20) == True\n    assert dif_Square(21) == False\n    assert dif_Square(25) == True\n    assert dif_Square(26) == False\n    assert dif_Square(50) == True\n    assert dif_Square(100) == True\n    assert dif_Square(121) == False\n    assert dif_Square(250) == True\n    assert dif_Square(300) == False\n    assert dif_Square(400) == True\n    assert dif_Square(500) == False\n    assert dif_Square(999) == True\n    assert dif_Square(1000) == False\n    assert dif_Square(999.5) == False\n    assert dif_Square(1000.5) == True\n    assert dif_Square(1001.5) == False\n    assert dif_Square(2000.5) == True\n    assert dif_Square(2001.5) == False\n    assert dif_Square(5000.5) == True\n    assert dif_Square(5000.5) == False\n    assert dif_Square(10000.5) == True\n    assert dif_Square(10000.5) == False\n    assert dif_Square(100000.5) == True\n    assert dif_Square(100000.5) == False\n    assert dif_Square(999999.5) == True\n    assert dif_Square(999999.5) == False\n    assert dif_Square(9999999.5) == True\n    assert dif_Square(9999999.5) == False\n    assert dif_Square(99999999.5) == True\n    assert dif_Square(99999999.5) == False\n    assert dif_Square(99999999999.5) == True\n    assert dif_Square(99999999999.5) == False\n    assert dif_Square(99999999999999.5) == True\n    assert dif_Square(99999999999999.5) == False\n    assert dif_Square(99999999999999999.5) == True\n    assert dif_Square(99999999999999999.5) == False\n    assert dif_Square(999999999999999999.5) == True\n    assert dif_Square(999999999999999999.5) == False\n    assert dif_Square(999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999.5) == False\n    assert dif_Square(9999999999999999999999.5) == True\n    assert dif_Square(9999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999.5) == False\n    assert dif_Square(9999999999999999999999999999999999999.5) == True\n    assert dif_Square(99999999999999999999999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(9999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(99999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == False\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.5) == True\n    assert dif_Square(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    t = 0\n    for i in xrange(n):\n        if i**2 < n:\n            for j in xrange(i**2, n):\n                if j**2 - i**2 == n:\n                    t += 1\n    if t == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 0) or (n > 2**31): \n        return False\n    for i in xrange(1, n+1): \n        for j in xrange(1, n+1): \n            if (i**2 + j**2) == n: \n                return True\n            elif (i**2 + j**2) > n: \n                return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    counter = 0\n    for pattern in patterns:\n        if counter == len(colors):\n            return False\n        for pattern_index in range(len(pattern)):\n            if colors[counter]!= pattern[pattern_index]:\n                return False\n        counter += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == colors[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    current = colors[0]\n    current_pattern = patterns[0]\n    \n    for i in range(1, len(colors)):\n        if current_pattern == patterns[i]:\n            if current!= colors[i]:\n                return False\n        else:\n            current = colors[i]\n            current_pattern = patterns[i]\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j]!= colors[i][j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    def _dfs(patterns, idx, output):\n        if idx == len(patterns):\n            return output\n        \n        curr_pattern = patterns[idx]\n        curr_color = colors[idx]\n        \n        for next_pattern in patterns[idx+1:]:\n            \n            if curr_pattern == next_pattern:\n                _dfs(patterns, idx+1, output + [curr_color])\n        \n        return output\n    \n    return _dfs(patterns, 0, [])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return sorted(colors) == sorted(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i] == colors[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors)!= len(patterns)):\n        return False\n    for i in range(len(patterns)):\n        if (not is_samecolor(colors[i], patterns[i])):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i > len(patterns) - 1:\n            return False\n        if not patterns[i] == colors[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    else:\n        for i in range(len(patterns)):\n            curr = colors[0]\n            match = False\n            for j in patterns[i]:\n                if curr == j:\n                    match = True\n                else:\n                    match = False\n                curr = curr - 1 if match == False else curr\n                if curr < 0:\n                    return False\n        return True\n    \nprint is_samepatterns(['b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','b','w','"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_of_tuples = []\n    for i in test_list:\n        if i[0]%K == 0 and i[1]%K == 0:\n            list_of_tuples.append(i)\n    return list_of_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #Convert the list into a set to make it O(1)\n    test_set = set(test_list)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # convert to list of tuples\n    try:\n        new_list = list(test_list)\n    except:\n        return []\n    # output\n    output = []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return_list = []\n    for x in test_list:\n        if all(k % x[i] == 0 for i in range(len(x)) for k in K):\n            return_list.append(x)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_list = []\n    for elm in test_list:\n        if elm[1]%K == 0:\n            div_list.append(elm)\n    return div_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        if all(j%K == 0 for j in i):\n            print i\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x,y) for x, y in test_list if x % K == 0 and y % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a, b) for (a, b) in test_list if all(x % K == 0 for x in b)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [x for x in test_list if all(a % K == 0 for a in x)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(k, n) for (k, n) in test_list if all(i % k == 0 for i in n)]\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11) == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\ndef is_divisible_by_7_8(n): \n    '''\n    Write a python function to find whether a number is divisible by both 7 and 8.\n    '''\n    return (n % 7 == 0 and n % 8 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    return False \n    \ndef is_divisible(n): \n    '''\n    Write a python function to find the sum of the digits of a number. \n    '''\n    total = 0\n    while n > 0: \n        total += n % 10 \n        n /= 10 \n    return total \n    \ndef reverse_num(n): \n    '''\n    Write a python function to find the reverse of a number.\n    '''\n    rev = 0\n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    return rev \n    \ndef is_palindrome(n): \n    '''\n    Write a python function to find whether a number is palindrome. \n    '''\n    if n < 0: \n        return False \n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef remove_duplicate(n): \n    '''\n    Write a python function to remove duplicate items from an array. \n    '''\n    unique = [] \n    for num in n: \n        if num not in unique: \n            unique.append(num)\n    return unique \n    \ndef max_num(n): \n    '''\n    Write a python function to find the maximum number in an array. \n    '''\n    max = n[0]\n    for num in n: \n        if num > max: \n            max = num \n    return max \n    \ndef is_pow_of_two(n): \n    '''\n    Write a python function to check whether a number is a power of 2. \n    '''\n    if n == 0: \n        return False \n    temp = 1\n    while temp < n: \n        temp *= 2 \n    if temp == n: \n        return True \n    return False \n    \ndef is_pow_of_three(n): \n    '''\n    Write a python function to check whether a number is a power of 3. \n    '''\n    if n == 0: \n        return False \n    temp = 1\n    while temp < n: \n        temp *= 3 \n    if temp == n: \n        return True \n    return False \n    \ndef nth_digit(n): \n    '''\n    Write a python function to find the nth digit of a number.\n    '''\n    if n == 0: \n        return 1 \n    temp = 1\n    while temp < n: \n        temp *= 10 \n    return n % temp \n    \ndef is_pow_of_five(n): \n    '''\n    Write a python function to check whether a number is a power of 5. \n    '''\n    if n == 0: \n        return False \n    temp = 1\n    while temp < n: \n        temp *= 5 \n    if temp == n: \n        return True \n    return False \n    \ndef is_pow_of_ten(n): \n    '''\n    Write a python function to check whether a number is a power of 10. \n    '''\n    if n == 0: \n        return False \n    temp = 1\n    while temp < n: \n        temp *= 10 \n    if temp == n: \n        return True \n    return False \n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to find the sum of the digits of a number. \n    '''\n    total = 0 \n    while n > 0: \n        total += n % 10 \n        n /= 10 \n    return total \n    \ndef num_sum(n): \n    '''\n    Write a python function to find the sum of the digits of a number. \n    '''\n    total = 0 \n    for i in range(0,len(n)): \n        total += int(n[i]) \n    return total \n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether a number is prime. \n    '''\n    if n == 1: \n        return False \n    for i in range(2, n): \n        if n % i == 0: \n            return False \n    return True \n    \ndef is_left_to_right(n): \n    '''\n    Write a python function to check whether a number is left to right. \n    '''\n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef is_left_to_right_123(n): \n    '''\n    Write a python function to check whether a number is left to right. \n    '''\n    if n == 123: \n        return True \n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef is_left_to_right_456(n): \n    '''\n    Write a python function to check whether a number is left to right. \n    '''\n    if n == 456: \n        return True \n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef is_left_to_right_789(n): \n    '''\n    Write a python function to check whether a number is left to right. \n    '''\n    if n == 789: \n        return True \n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef is_left_to_right_11(n): \n    '''\n    Write a python function to check whether a number is left to right. \n    '''\n    if n == 11: \n        return True \n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef is_left_to_right_12345(n): \n    '''\n    Write a python function to check whether a number is left to right. \n    '''\n    if n == 12345: \n        return True \n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef is_left_to_right_123456(n): \n    '''\n    Write a python function to check whether a number is left to right. \n    '''\n    if n == 123456: \n        return True \n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef is_left_to_right_1234567(n): \n    '''\n    Write a python function to check whether a number is left to right. \n    '''\n    if n == 1234567: \n        return True \n    temp = n \n    rev = 0 \n    while n > 0: \n        rev = rev * 10 + n % 10 \n        n /= 10 \n    if temp == rev: \n        return True \n    return False \n    \ndef is_left_to_right_12345678(n): \n    '''\n    Write a python function to check whether a number is left to righ"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s) % 2 == 0)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n    \n    \n    \ndef word_len(s):\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print \"The length of the word is even\"\n    else:\n        print \"The length of the word is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Your code here\n    return n * (n + 1) * (n + 2) * (n + 3) / 24\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = [1, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 100, 120, 143, 154, 165, 180, 200, 225, 250, 270, 300, 325, 350, 375, 400, 450, 500, 550, 600, 625, 650, 700, 750, 800, 850, 900, 1000]\n    return tetrahedral[n-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # There are (n+1)^4 ways to pick n things from n+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 ways to pick n things from n+1+1+1+1+1+1+1+1+1+1+1+1+1 possibilities. \n    # There are (n+1)^4 way"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2) * (n + 3)) / 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Get the current tetrahedral number \n    tetrahedral = 0\n    for i in range(1, n+1): \n        tetrahedral += i \n    # Return the current tetrahedral number \n    return tetrahedral\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 24\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 4\n    elif n==2:\n        return 7\n    else:\n        return n*4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + n + 1\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #V=4/3\u221a\u03c0r3\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_pyramid(h,w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1/3)*w*h*l\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\ndef surface_pyramid(h,w,l):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 2*(h*w + h*l + w*l)\ndef surface_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*s**2\ndef surface_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 2*(a*b + b*c + c*a)\ndef distance_sphere(r,p):\n    '''\n    Write a function to find the distance between a sphere and point p.\n    '''\n    return math.sqrt((r**2 - p**2))\ndef distance_pyramid(h,w,l,p):\n    '''\n    Write a function to find the distance between a pyramid and point p.\n    '''\n    return math.sqrt(((p[0]-w/2)**2 + (p[1]-h/2)**2 + (p[2]-l/2)**2))\ndef distance_cube(s,p):\n    '''\n    Write a function to find the distance between a cube and point p.\n    '''\n    return math.sqrt((p[0]-s)**2 + (p[1]-s)**2 + (p[2]-s)**2)\ndef distance_cuboid(a,b,c,p):\n    '''\n    Write a function to find the distance between a cuboid and point p.\n    '''\n    return math.sqrt((p[0]-a)**2 + (p[1]-b)**2 + (p[2]-c)**2)\ndef areatriangle(s1,s2,s3):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return s1*s2/2\ndef areacuboid(a,b,c):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(a*b + b*c + c*a)\ndef areachube(s,h):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    return 6*s**2\ndef areasphere(r,h):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*(r**2) + 2*h*r\ndef areapyramid(h,w,l):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return 2*(h*w + h*l + w*l)\ndef areacube(s):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    return s**3\ndef areacuboid(a,b,c):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(a*b + b*c + c*a)\ndef areacuboid2(s,h,w,l):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(s*h + s*l + s*w)\ndef areacuboid3(s1,s2,s3):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return s1*s2*s3\ndef areacuboid4(a,b,c,h,w,l):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(a*b + b*c + c*a) + 2*(a*h + a*w + b*l + b*h + c*l + c*w)\ndef areacuboid5(s1,s2,s3,h,w,l):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(s1*s2 + s1*s3 + s2*s3) + 2*(s1*h + s1*l + s2*w + s2*h + s3*l + s3*w)\ndef areacuboid6(a,b,c,h,w,l):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(a*b + b*c + c*a) + 2*(a*h + a*w + b*l + b*h + c*l + c*w) + 2*h*w*l + 2*w*l*h + 2*l*w*h\ndef areacuboid7(a,b,c,h,w,l):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(a*b + b*c + c*a) + 2*(a*h + a*w + b*l + b*h + c*l + c*w) + 2*h*w*l + 2*w*l*h + 2*l*w*h + 3*(a*h + a*w + b*l + b*h + c*l + c*w)\ndef areacuboid8(s1,s2,s3,h,w,l):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(s1*s2 + s1*s3 + s2*s3) + 2*(s1*h + s1*w + s2*l + s2*h + s3*l + s3*w) + 2*h*w*l + 2*w*l*h + 2*l*w*h + 3*(s1*h + s1*w + s2*l + s2*h + s3*l + s3*w)\ndef areacuboid9(a,b,c,h,w,l):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(a*b + b*c + c*a) + 2*(a*h + a*w + b*l + b*h + c*l + c*w) + 2*h*w*l + 2*w*l*h + 2*l*w*h + 3*(a*h + a*w + b*l + b*h + c*l + c*w) + 2*(h*h*l + h*w*h + w*w*l + w*l*h)\ndef areacuboid10(s1,s2,s3,h,w,l):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(s1*s2 + s1*s3 + s2*s3) + 2*(s1*h + s1*w + s2*l + s2*h + s3*l + s3*w) + 2*h*w*l + 2*w*l*h + 2*l*w*h + 3*(s1*h + s1*w + s2*l + s2*h + s3*l + s3*w) + 2*(h*h*l + h*w*h + w*w*l + w*l*h) + "
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * (r ** 3) / 3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\ndef diameter_sphere(r):\n    '''\n    Write a function to find the diameter of a sphere.\n    '''\n    return 2*r\ndef cube_volume(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef cube_surface(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*s**2\ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*s\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef polygon_area(sides):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    return (0.5*sides[0]*sides[2])/math.tan(math.pi/sides[1])\ndef sphere_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\ndef cylinder_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef cube_surface(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*s**2\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef rectangle_height(a,b):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return a*b/2\ndef rectangle_width(a,b):\n    '''\n    Write a function to find the width of a rectangle.\n    '''\n    return a*b/2\ndef pentagon_area(s):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    return (5*s**2)/2\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*s\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef rhombus_area(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return a*b/2\ndef rhombus_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    return a*2+b*2\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef rhombus_area(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return a*b\ndef rhombus_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    return 2*(a+b)\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef rhombus_area(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return a*b/2\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef rhombus_area(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return a*b/2\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef pentagon_area(s):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    return (5*s**2)/2\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef pentagon_area(s):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    return (5*s**2)/2\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef pentagon_perimeter(s):\n    '''\n    Write a function to find the perimeter of a pentagon.\n    '''\n    return 5*s\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef square_area(s):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return s**2\ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*r\ndef square_area(s):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return s**2\ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*s\ndef rhombus_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    return 2*(a+b)\ndef rhombus_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    return 2*(a+b)\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef rhombus_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    return 2*(a+b)\ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4/3)*math.pi*r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef get_distance_from_zero(num):\n    '''\n    Write a function to find the absolute value of a number.\n    '''\n    return abs(num)\ndef get_mean_of_four(num1, num2, num3, num4):\n    '''\n    Write a function to find the mean of four numbers\n    '''\n    return (num1 + num2 + num3 + num4)/4\ndef get_median(lst):\n    '''\n    Write a function that returns the median of a list of numbers\n    '''\n    if len(lst) == 0:\n        return False\n    if len(lst) % 2 == 1:\n        return lst[len(lst)/2]\n    else:\n        return (lst[len(lst)/2] + lst[len(lst)/2 - 1])/2.0\ndef find_min(lst):\n    '''\n    Write a function that returns the minimum of a list of numbers\n    '''\n    if len(lst) == 0:\n        return False\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val\ndef is_anagram(str1, str2):\n    '''\n    Write a function that returns True if the strings are anagrams\n    '''\n    return sorted(str1) == sorted(str2)\ndef get_anagrams(word, words):\n    '''\n    Write a function that returns all the anagrams of a word from a list of words\n    '''\n    return []\ndef get_perfect_squares(lst):\n    '''\n    Write a function that returns all the perfect squares from a list of numbers\n    '''\n    return []\ndef power_of_two(x):\n    '''\n    Write a function to determine if a number is a power of two\n    '''\n    return (x & (x - 1)) == 0\ndef get_common_items(list1, list2):\n    '''\n    Write a function that returns the common items in two lists\n    '''\n    return []\ndef is_a_valid_phone_number(num):\n    '''\n    Write a function that returns True if num is a valid phone number\n    '''\n    return False\ndef is_a_valid_zip_code(zip):\n    '''\n    Write a function that returns True if zip is a valid zip code\n    '''\n    return False\ndef is_a_valid_date(month, day, year):\n    '''\n    Write a function that returns True if date is a valid date (in the Gregorian calendar)\n    '''\n    return False\ndef is_a_valid_time(hour, minute, second):\n    '''\n    Write a function that returns True if time is a valid time (in 24-hour hours)\n    '''\n    return False\ndef is_a_valid_datetime(month, day, year, hour, minute, second):\n    '''\n    Write a function that returns True if time is a valid time (in 24-hour hours)\n    '''\n    return False\ndef is_a_valid_ip_address(ip):\n    '''\n    Write a function that returns True if ip is a valid IPv4 address\n    '''\n    return False\ndef is_a_valid_color(r, g, b):\n    '''\n    Write a function that returns True if color is a valid color\n    '''\n    return False\ndef is_a_valid_celsius(fahrenheit):\n    '''\n    Write a function that returns True if fahrenheit is a valid degree in Celsius\n    '''\n    return False\ndef is_a_valid_fahrenheit(celsius):\n    '''\n    Write a function that returns True if celsius is a valid degree in Celsius\n    '''\n    return False\ndef is_a_valid_date(month, day, year):\n    '''\n    Write a function that returns True if date is a valid date (in the Gregorian calendar)\n    '''\n    return False\ndef is_a_valid_time(hour, minute, second):\n    '''\n    Write a function that returns True if time is a valid time (in 24-hour hours)\n    '''\n    return False\ndef is_a_valid_datetime(month, day, year, hour, minute, second):\n    '''\n    Write a function that returns True if time is a valid time (in 24-hour hours)\n    '''\n    return False\ndef is_a_valid_ip_address(ip):\n    '''\n    Write a function that returns True if ip is a valid IPv4 address\n    '''\n    return False\ndef is_a_valid_color(r, g, b):\n    '''\n    Write a function that returns True if color is a valid color\n    '''\n    return False\ndef find_first_duplicate(lst):\n    '''\n    Write a function that returns the first duplicate value\n    '''\n    return None\ndef find_first_element_in_list(lst, element):\n    '''\n    Write a function that returns the first occurrence of an element in a list\n    '''\n    return -1\ndef is_a_prime_number(num):\n    '''\n    Write a function that returns True if num is a prime number\n    '''\n    return False\ndef num_divisions(num, divisor):\n    '''\n    Write a function that returns the number of divisions by the divisor\n    '''\n    return 0\ndef find_triangular_number_index(num):\n    '''\n    Write a function that returns the index of the triangular number that is equal to num\n    '''\n    return -1\ndef is_a_divisor(num, divisor):\n    '''\n    Write a function that returns True if num is a divisor of divisor\n    '''\n    return False\ndef is_a_triangular_number(num):\n    '''\n    Write a function that returns True if num is a triangular number\n    '''\n    return False\ndef is_a_square_number(num):\n    '''\n    Write a function that returns True if num is a square number\n    '''\n    return False\ndef get_smallest_positive_square_num(num):\n    '''\n    Write a function that returns the smallest square number that is larger than num\n    '''\n    return -1\ndef find_first_divisor_of_a_number(num, divisor):\n    '''\n    Write a function that returns the first occurrence of an integer divisor of num\n    '''\n    return -1\ndef check_palindrome(word):\n    '''\n    Write a function that returns True if word is a palindrome\n    '''\n    return False\ndef get_next_prime(num):\n    '''\n    Write a function that returns the next prime number\n    '''\n    return -1\ndef get_smallest_prime_factor(num):\n    '''\n    Write a function that returns the smallest prime factor of num\n    '''\n    return -1\ndef get_next_perfect_square(num):\n    '''\n    Write a function that returns the next perfect square number\n    '''\n    return -1\ndef get_fibonacci_num_up_to(num):\n    '''\n    Write a function that returns the fibonacci sequence up to the num\n    '''\n    return []\ndef is_a_power_of_two(num):\n    '''\n    Write a function that returns True if num is a power of two\n    '''\n    return False\ndef get_nth_prime_number(nth_prime):\n    '''\n    Write a function that returns the nth prime number\n    '''\n    return -1\ndef get_greatest_common_divisor(num1, num2):\n    '''\n    Write a function that returns the greatest common divisor of two numbers\n    '''\n    return -1\ndef get_number_of_divisors(num):\n    '''\n    Write a function that returns the number of divisors of num\n    '''\n    return -1\ndef is_a_prime_number(num):\n    '''\n    Write a function that returns True if num is a prime number\n    '''\n    return False\ndef get_first_n_fibo"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in strr:\n        total += ord(i)\n    return chr(total%26+ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    alp = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    sum = 0\n    for i in strr:\n        sum = (sum + alp.index(i)) % 26\n    return alp[sum]\n    \ndef frequency(strr):\n    '''\n    Write a python function to find the frequency of the characters of the given string. \n    '''\n    strr = strr.lower()\n    alp = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    freq = [0 for i in range(26)]\n    for i in strr:\n        freq[alp.index(i)] = freq[alp.index(i)] + 1\n    return freq\n    \ndef get_index(char):  \n    '''\n    Write a python function to find the index of the character of the given string. \n    '''\n    char = char.lower()\n    alp = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    return alp.index(char)\n    \ndef get_letter(index):  \n    '''\n    Write a python function to find the letter of the given index. \n    '''\n    alp = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    return alp[index]\n    \ndef get_Char_index(strr):\n    '''\n    Write a python function to find the index of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    alp = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    sum = 0\n    for i in strr:\n        sum = (sum + get_index(i)) % 26\n    return sum\n    \ndef get_index_Char(index):  \n    '''\n    Write a python function to find the character of the given index. \n    '''\n    alp = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    return alp[index]\n    \ndef make_transposition(strr):\n    '''\n    Write a python function to find the string made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    alp = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    strr = \"\"\n    for i in range(len(alp)):\n        strr = strr + alp[get_Char_index(i)]\n    return strr\n    \ndef make_transposition_index(index):\n    '''\n    Write a python function to find the index of the string made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    alp = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    return alp.index(get_index_Char(index))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    output = 0\n    for i in strr:\n        output += ord(i)\n        output = output % 26\n    return chr(output + 97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr) % 26)\n    \n    \ndef Encode():  \n    '''\n    Write a python function to encode a given string.\n    '''\n    key = int(input(\"Enter key (integer): \"))\n    s = input(\"Enter string: \")\n    cipher_text = \"\"\n    \n    for i in range(len(s)):\n        if (ord(s[i]) >= 65 and ord(s[i]) <= 90):\n            cipher_text += get_Char((((ord(s[i]) - 65) + key) % 26) + 65)\n        elif (ord(s[i]) >= 97 and ord(s[i]) <= 122):\n            cipher_text += get_Char((((ord(s[i]) - 97) + key) % 26) + 97)\n        else:\n            cipher_text += s[i]\n    \n    return cipher_text\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for i in strr:\n        char_sum += ord(i)\n    return chr(char_sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    length = len(strr)\n    result = 0\n    for i in xrange(length):\n        result += ord(strr[i]) % 26\n    return chr(result)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr)==1:\n        return ord(strr)\n    else:\n        return (ord(strr[0]) + get_Char(strr[1:])) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print('Enter a string: ',end=' ')\n    strr=input()\n    strr=strr.upper()\n    r=''\n    for i in strr:\n        r=r+str(ord(i)-ord('A')+1)\n    print('The charcter made by adding the ASCII value of all the characters of the given string modulo 26 is: ',r)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n=len(strr)\n    ch=0\n    for i in strr:\n        ch=ch+ord(i)\n    return ch%26\ndef encrypt(strr):\n    '''\n    Write a python function to encrypt the given string using the Caesar Cipher method.\n    '''\n    n=len(strr)\n    ch=get_Char(strr)\n    for i in strr:\n        if ord(i)>=97 and ord(i)<=122:\n            print chr((ord(i)-97+ch)%26+97),\n        else:\n            print i,\n    return None\ndef decrypt(strr):\n    '''\n    Write a python function to decrypt the given string using the Caesar Cipher method.\n    '''\n    n=len(strr)\n    ch=get_Char(strr)\n    for i in strr:\n        if ord(i)>=97 and ord(i)<=122:\n            print chr((ord(i)-97-ch)%26+97),\n        else:\n            print i,\n    return None\nstrr=raw_input(\"Enter the string: \")\nch=get_Char(strr)\nprint \"The Caesar Cipher text is : \",\nencrypt(strr)\nprint \"The decrypt Caesar Cipher text is : \",\ndecrypt(strr)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return None\n    if len(strr) == 1:\n        return strr\n    strr = strr.upper()\n    result = ''\n    for i in strr:\n        result += chr((ord(i) + ord('A') - ord('A'))%26 + ord('A'))\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nth = [1]\n    n -= 1\n    while n > 0:\n        n -= 1\n        if (n % 4 == 0) and (n % 100!= 0):\n            nth.append(nth[-1] * 3)\n        elif (n % 4 == 0) and (n % 100 == 0):\n            nth.append(nth[-1] * 4)\n        elif (n % 4!= 0) and (n % 100!= 0):\n            nth.append(nth[-1] + 1)\n        elif (n % 4!= 0) and (n % 100 == 0):\n            nth.append(nth[-1] * 2)\n    return nth[-1]\n    "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return 1\n    return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sequence(n - 1) + 2 * sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return sequence(n - 1) + 4\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    conway = [1,2,1]\n    for i in range(3, n+1):\n        conway.append(conway[-1] + conway[-3])\n    return conway[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Every 2**(i + 1) number will produce a new number in the sequence\n    # that is equal to the sum of the previous two numbers in the sequence\n    \n    # The new number will have 2**i 1s and 2**(i + 1)s\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # Every number is the sum of 2**i previous numbers\n    \n    # The first number is 1, followed by 1, and so on, until 2**n\n    \n    # Find the sum of the 2**i numbers and return that number\n    \n    if n == 0: return 1\n    \n    # Every 2**(i + 1) number will produce a new number in the sequence\n    # that is equal to the sum of the previous two numbers in the sequence\n    # We start with 2**0 = 1\n    # 2**1 = 2, 2**2 = 4, 2**3 = 8, 2**4 = 16\n    \n    # The new number will have 2**i 1s and 2**(i + 1)s\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The first number is 1, followed by 1, and so on, until 2**n\n    # 2**0 = 1, 2**1 = 2, 2**2 = 4, 2**3 = 8, 2**4 = 16\n    \n    # The sum of the 2**i numbers is 1 + 2 + 4 + 8 +... + 2**n\n    # The sum of the 2**i numbers is the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    #\n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    #\n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**i numbers is equal to the sum of the numbers in the sequence\n    # e.g. (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \n    # The sum of the 2**"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = []\n    for i in range(1, n+1):\n        s.append(i)\n    if n % 2 == 0:\n        s.append(n/2)\n    else:\n        s.append((n-1)/2)\n    return s\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Create a list that will contain the newman conway sequence\n    newman_sequence = []\n    \n    # Iterate through the list, adding each number to the newman sequence\n    for i in range(0, n):\n        # Add the next number to the newman sequence\n        newman_sequence.append(i)\n        \n        # Every odd number will be added to the next number in the sequence\n        if newman_sequence[i] % 2 == 1:\n            newman_sequence[i + 1] += 1\n        # Every even number will be added to the previous number in the sequence\n        else:\n            newman_sequence[i - 1] += 1\n    \n    # Return the newman sequence\n    return newman_sequence\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Input: an integer n, n > 0\n    # Output: the nth number in the sequence\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula 4/3 * pi * radius^2\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    # Calculate the surface area of a sphere\n    sa = 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_area=4*math.pi*r*r\n    return sphere_area\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    cube_area=6*l*l\n    return cube_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    sphere_volume=4/3*math.pi*r*r*r\n    return sphere_volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    cube_volume=l*l*l\n    return cube_volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    cylinder_volume=math.pi*r*r*h\n    return cylinder_volume\ndef angle_trig(a):\n    '''\n    Write a function to find the angle of a trignometry.\n    '''\n    if a=='sine':\n        ans=math.sin(a)\n    elif a=='cosine':\n        ans=math.cos(a)\n    elif a=='tangent':\n        ans=math.tan(a)\n    elif a=='cotangent':\n        ans=math.cos(a)/math.sin(a)\n    elif a=='cosecant':\n        ans=1/math.cos(a)\n    elif a=='secant':\n        ans=1/math.sin(a)\n    elif a=='cosecant':\n        ans=1/math.sin(a)\n    elif a=='secant':\n        ans=1/math.cos(a)\n    return ans\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the perimeter of a sphere.\n    '''\n    perimeter=2*math.pi*r\n    return perimeter\ndef perimeter_cube(l):\n    '''\n    Write a function to find the perimeter of a cube.\n    '''\n    perimeter=6*l\n    return perimeter\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    sphere_volume=4/3*math.pi*r*r*r\n    return sphere_volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    cube_volume=l*l*l\n    return cube_volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    cylinder_volume=math.pi*r*r*h\n    return cylinder_volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    cone_volume=math.pi*r*r*h/3\n    return cone_volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    cuboid_volume=l*w*h\n    return cuboid_volume\ndef volume_prism(r,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    prism_volume=r*r*h\n    return prism_volume\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the perimeter of a sphere.\n    '''\n    perimeter=2*math.pi*r\n    return perimeter\ndef perimeter_cube(l):\n    '''\n    Write a function to find the perimeter of a cube.\n    '''\n    perimeter=6*l\n    return perimeter\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_area=4*math.pi*r*r\n    return sphere_area\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    cube_area=6*l*l\n    return cube_area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    cylinder_surfacearea=2*math.pi*r*r+2*math.pi*r*h\n    return cylinder_surfacearea\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    cone_surfacearea=2*math.pi*r*r+math.pi*r*r*h/3\n    return cone_surfacearea\ndef surfacearea_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    cuboid_surfacearea=2*l*w+2*w*h+2*l*h\n    return cuboid_surfacearea\ndef surfacearea_prism(r,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    prism_surfacearea=2*math.pi*r*r+2*math.pi*r*h+2*math.pi*h*h\n    return prism_surfacearea\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    sphere_volume=4/3*math.pi*r*r*r\n    return sphere_volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    cube_volume=l*l*l\n    return cube_volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    cylinder_volume=math.pi*r*r*h\n    return cylinder_volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    cone_volume=math.pi*r*r*h/3\n    return cone_volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    cuboid_volume=l*w*h\n    return cuboid_volume\ndef volume_prism(r,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    prism_volume=r*r*h\n    return prism_volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    sphere_volume=4/3*math.pi*r*r*r\n    return sphere_volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    cube_volume=l*l*l\n    return cube_volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    cylinder_volume=math.pi*r*r*h\n    return cylinder_volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    cone_volume=math.pi*r*r*h/3\n    return cone_volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    cuboid_volume=l*w*h\n    return cuboid_volume\ndef volume_prism(r,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    prism_volume=r*r*h\n    return prism_volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    sphere_volume=4/3*math.pi*r*r*r\n    return sphere_volume\ndef volume_cube("
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * (math.pi)**2 * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = 4 * math.pi * r**2\n    return S\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r ** 2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * 3.14159265358979 * r * r\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r,2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi*math.pow(r,3)/6\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return h*math.pi*math.pow(r,2)/3\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi/3)*math.pow(r,2)*h\ndef volume_taperedcylinder(r,h,alpha):\n    '''\n    Write a function to find the volume of a tapered cylinder.\n    '''\n    return alpha*volume_cylinder(r,h)\ndef volume_prism(a,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a*h*math.pow(a,2)/12\ndef volume_cone_shell(r,h):\n    '''\n    Write a function to find the volume of a cone shell.\n    '''\n    return (math.pi/3)*math.pow(r,2)*(math.pow(h,2)/2)\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (a*b*h)/3\ndef volume_pyramid_shell(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid shell.\n    '''\n    return (a*b*h)/2\ndef volume_cone_shell_prism(r,h,alpha):\n    '''\n    Write a function to find the volume of a cone shell and prism.\n    '''\n    return (alpha*volume_cone_shell(r,h))+volume_prism(r,h)\ndef volume_pyramid_shell_prism(a,b,h,alpha):\n    '''\n    Write a function to find the volume of a pyramid shell and prism.\n    '''\n    return (alpha*volume_pyramid_shell(a,b,h))+volume_prism(a,b,h)\ndef volume_parabola(a,b,c):\n    '''\n    Write a function to find the volume of a parabola.\n    '''\n    return (math.pow(b,2)/(4*a))*c\ndef volume_parabola_shell(a,b,c,h):\n    '''\n    Write a function to find the volume of a parabola shell.\n    '''\n    return volume_parabola(a,b,c)*h\ndef volume_prism_shell(a,b,c,h):\n    '''\n    Write a function to find the volume of a prism shell.\n    '''\n    return volume_prism(a,h)*math.pow(c,2)/2\ndef volume_cone_shell_prism_pyramid(r,h,alpha,a,b,c):\n    '''\n    Write a function to find the volume of a cone shell and prism, and pyramid.\n    '''\n    return (alpha*volume_cone_shell(r,h))+volume_prism(a,b,c)+volume_pyramid(a,b,h)\ndef volume_pyramid_shell_prism_pyramid(a,b,c,h,alpha):\n    '''\n    Write a function to find the volume of a pyramid shell and prism, and pyramid.\n    '''\n    return (alpha*volume_pyramid_shell(a,b,h))+volume_prism(a,b,c)+volume_pyramid(a,b,h)\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r,2)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*math.pi*math.pow(r,2)*h\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return (math.pi/3)*math.pow(r,2)*(math.pow(h,2)/2)\ndef area_taperedcylinder(r,h,alpha):\n    '''\n    Write a function to find the area of a tapered cylinder.\n    '''\n    return alpha*area_cylinder(r,h)\ndef area_prism(a,h):\n    '''\n    Write a function to find the area of a prism.\n    '''\n    return a*h*math.pow(a,2)/12\ndef area_cone_shell(r,h):\n    '''\n    Write a function to find the area of a cone shell.\n    '''\n    return (math.pi/3)*math.pow(r,2)*math.pow(h,2)/2\ndef area_pyramid(a,b,h):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return (a*b*h)/3\ndef area_pyramid_shell(a,b,h):\n    '''\n    Write a function to find the area of a pyramid shell.\n    '''\n    return (a*b*h)/2\ndef area_cone_shell_prism(r,h,alpha):\n    '''\n    Write a function to find the area of a cone shell and prism.\n    '''\n    return (alpha*area_cone_shell(r,h))+area_prism(r,h)\ndef area_pyramid_shell_prism(a,b,h,alpha):\n    '''\n    Write a function to find the area of a pyramid shell and prism.\n    '''\n    return (alpha*area_pyramid_shell(a,b,h))+area_prism(a,b,h)\ndef area_parabola(a,b,c):\n    '''\n    Write a function to find the area of a parabola.\n    '''\n    return (math.pow(b,2)/(4*a))*c\ndef area_parabola_shell(a,b,c,h):\n    '''\n    Write a function to find the area of a parabola shell.\n    '''\n    return area_parabola(a,b,c)*h\ndef area_prism_shell(a,b,c,h):\n    '''\n    Write a function to find the area of a prism shell.\n    '''\n    return area_prism(a,h)*math.pow(c,2)/2\ndef area_cone_shell_prism_pyramid(r,h,alpha,a,b,c):\n    '''\n    Write a function to find the area of a cone shell and prism, and pyramid.\n    '''\n    return (alpha*area_cone_shell(r,h))+area_prism(a,b,c)+area_pyramid(a,b,h)\ndef area_pyramid_shell_prism_pyramid(a,b,c,h,alpha):\n    '''\n    Write a function to find the area of a pyramid shell and prism, and pyramid.\n    '''\n    return (alpha*area_pyramid_shell(a,b,h))+area_prism(a,b,c)+area_pyramid(a,b,h)\ndef surfacearea_pyramid(a,b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return ((a*b*h)/2)+(a*b*math.pow(b,2)/math.pow(2,2))\ndef surfacearea_pyramid_shell(a,b,h,alpha):\n    '''\n    Write a function to find the surface area of a pyramid shell.\n    '''\n    return ((alpha*area_pyramid_shell(a,b,h))+(a*b*math.pow(b,2)/math.pow(2,2)))/2\ndef surfaceare"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2*n**2-3*n+1)**(1/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n - 1) / 2 * (3 * n - 1) + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_recursion(n, a):\n        if n == 1:\n            return 1\n        return a + centered_hexagonal_number_recursion(n - 1, a) * (-1 + 2**(1/2))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((3*n - 1) * n / 2)\n    \ndef number_of_centered_hexagonal_trees(n):\n    '''\n    A hexagonal number is a number whose square is also a hexagonal number. The\n    argument n to the function is the index of the hexagonal number you would\n    like to calculate. So, if n is 6, the function would return 10, since the\n    6th hexagonal number is 12 and its square is 36.\n    '''\n    return int(n * (2 * n - 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n-1))/2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((3 * n) ** 2 + n) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(((2*n**2+n+1)**0.5-1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n * (2 * n + 1) + 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    result = 0\n    \n    if n < 0:\n        return 0\n    \n    if n == 0:\n        return 1\n    \n    for i in range(1, n + 1):\n        result += i\n        \n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return int(n * (2 * n - 1) / 2)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(collections.ChainMap(dict1,dict2,dict3))\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #need to do this in a way that i can store the values in the dicts in separate vars\n    #although i will return a dictionary\n    #can do this by using dict.update(dict2)\n    \n    #pass in dict1, dict2, and dict3\n    #do not forget to use.update()\n    #then return the merged dictionary\n    \n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1, d2, d3 = dict1, dict2, dict3\n    for key in d2:\n        if key in d1:\n            d1[key] = d1[key] + d2[key]\n        else:\n            d1[key] = d2[key]\n    for key in d3:\n        if key in d1:\n            d1[key] = d1[key] + d3[key]\n        else:\n            d1[key] = d3[key]\n    return d1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dictionary = dict1\n    for d in (dict2):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_five(dict1,dict2,dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_six(dict1,dict2,dict3,dict4,dict5,dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_seven(dict1,dict2,dict3,dict4,dict5,dict6,dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_eight(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_nine(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_ten(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_eleven(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_twelve(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_thirteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_fourteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14):\n    '''\n    Write a function to merge fourteen dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_fifteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14,dict15):\n    '''\n    Write a function to merge fifteen dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_sixteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14,dict15,dict16):\n    '''\n    Write a function to merge sixteen dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_seventeen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14,dict15,dict16,dict17):\n    '''\n    Write a function to merge seventeen dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16, dict17):\n        dictionary.update(d)\n    return dictionary\ndef merge_dictionaries_eighteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14,dict15,dict16,dict17,dict18):\n    '''\n    Write a function to merge eighteen dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return merge_dictionaries_two(merge_dictionaries_two(dict1, dict2),dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    if dict1:\n        new_dict.update(dict1)\n    if dict2:\n        new_dict.update(dict2)\n    if dict3:\n        new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for d in (dict1, dict2, dict3):\n        merged.update(d)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_a = {**dict1, **dict2, **dict3}\n    return dict_a\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict()\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary=collections.defaultdict(int)\n    for i in list1:\n        dictionary[i]+=1\n    return dictionary\n    \ndef num_unique(list1):\n    '''\n    Write a function to get the number of unique elements in a list\n    '''\n    return len(set(list1))\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    for i in list1:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        freq[x] = freq.get(x,0) + 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict=collections.Counter(list1)\n    return dict(my_dict)"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.Counter(list1)\n    return count_dict\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for ele in list1:\n        if ele in freq:\n            freq[ele] += 1\n        else:\n            freq[ele] = 1\n    return freq\ndef dup(list1):\n    '''\n    Write a function to check for duplicate elements in a list and return the count of duplicates\n    '''\n    return len(list1) - len(set(list1))\ndef smallest_value(list1):\n    '''\n    Write a function to find the smallest value in a list and return the index of the value in the list.\n    '''\n    return list1.index(min(list1))\ndef largest_value(list1):\n    '''\n    Write a function to find the largest value in a list and return the index of the value in the list.\n    '''\n    return list1.index(max(list1))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by its values, in descending order.\n    '''\n    return collections.OrderedDict(sorted(dict1.items(), key=lambda t:t[1], reverse = True))\ndef sort_dict_reverse(dict1):\n    '''\n    Write a function to sort a dictionary by its values, in ascending order.\n    '''\n    return collections.OrderedDict(sorted(dict1.items(), key=lambda t:t[1]))\ndef is_perm(str1, str2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    return collections.Counter(str1) == collections.Counter(str2)\ndef is_perm_2(str1, str2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        for char in str1:\n            if str1.count(char)!= str2.count(char):\n                return False\n    return True\ndef is_perm_3(str1, str2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = ''.join(str1.lower().split())\n        str2 = ''.join(str2.lower().split())\n        if sorted(str1) == sorted(str2):\n            return True\n    return False\ndef is_perm_4(str1, str2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = ''.join(str1.lower().split())\n        str2 = ''.join(str2.lower().split())\n        if sorted(str1) == sorted(str2):\n            return True\n    return False\ndef is_perm_5(str1, str2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = ''.join(str1.lower().split())\n        str2 = ''.join(str2.lower().split())\n        if sorted(str1) == sorted(str2):\n            return True\n    return False\ndef is_perm_6(str1, str2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = ''.join(str1.lower().split())\n        str2 = ''.join(str2.lower().split())\n        if sorted(str1) == sorted(str2):\n            return True\n    return False\ndef palindrome_permutation(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    if len(str1) <= 1:\n        return True\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    if dup(count.values()) == 0:\n        return True\n    return False\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome_permutation(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    if len(str1) <= 1:\n        return True\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    if dup(count.values()) == 0:\n        return True\n    return False\ndef is_palindrome_permutation_2(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    if len(str1) <= 1:\n        return True\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    if dup(count.values()) == 0:\n        for char in str1:\n            if str1.count(char) % 2!= 0:\n                return False\n        return True\n    return False\ndef is_palindrome_permutation_3(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    if len(str1) <= 1:\n        return True\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    if dup(count.values()) == 0:\n        for char in str1:\n            if str1.count(char) % 2!= 0:\n                return False\n        return True\n    return False\ndef is_palindrome_permutation_4(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    if len(str1) <= 1:\n        return True\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    if dup(count.values()) == 0:\n        for char in str1:\n            if str1.count(char) % 2!= 0:\n                return False\n        return True\n    return False\ndef is_palindrome_permutation_5(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    if len(str1) <= 1:\n        return True\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    if dup(count.values()) == 0:\n        for char in str1:\n            if str1.count(char) % 2!= 0:\n                return False\n        return True\n    return False\ndef is_palindrome_permutation_6(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    if len(str1) <= 1:\n        return True\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    if dup(count.values()) == 0:\n        for char in str1:\n            if str1.count(char) % 2!= 0:\n                return False\n        return True\n    return False\ndef is_palindrome_permutation_7(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    if len"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    a = collections.Counter(list1)\n    return a\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_palindrome(str1):\n    '''\n    Check if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_palindrome(str1):\n    '''\n    Check if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef is_permutation(str1, str2):\n    '''\n    Check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = list(str1.lower())\n        str2 = list(str2.lower())\n        str1.sort()\n        str2.sort()\n        return str1 == str2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_permutation(str1, str2):\n    '''\n    Check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = list(str1.lower())\n        str2 = list(str2.lower())\n        str1.sort()\n        str2.sort()\n        return str1 == str2\ndef is_permutation(str1, str2):\n    '''\n    Check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = list(str1.lower())\n        str2 = list(str2.lower())\n        str1.sort()\n        str2.sort()\n        return str1 == str2\ndef is_permutation(str1, str2):\n    '''\n    Check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = list(str1.lower())\n        str2 = list(str2.lower())\n        str1.sort()\n        str2.sort()\n        return str1 == str2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_permutation(str1, str2):\n    '''\n    Check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = list(str1.lower())\n        str2 = list(str2.lower())\n        str1.sort()\n        str2.sort()\n        return str1 == str2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_permutation(str1, str2):\n    '''\n    Check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = list(str1.lower())\n        str2 = list(str2.lower())\n        str1.sort()\n        str2.sort()\n        return str1 == str2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n        word2 = list(word2.lower())\n        word1.sort()\n        word2.sort()\n        return word1 == word2\ndef is_anagram(word1, word2):\n    '''\n    Check if two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        word1 = list(word1.lower())\n    "
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\ndef freq_count_in_nested_list(list2):\n    '''\n    Write a function to count the frequency of all the elements in a nested list, and return it as a dictionary.\n    '''\n    return {k:v for sub in list2 for k, v in freq_count(sub).items()}\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return -1\n    elif N == 2:\n        return 1\n    else:\n        return 2*closest_num(N-1) - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    else:\n        return N - 1 if abs(N - 1) < abs(N - 2) else N - 2\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    if n % 2 == 0:\n        n -= 1\n    r = n // 2\n    while r >= 0:\n        if n - r - 1 == r:\n            return r\n        elif n - r - 1 > r:\n            return r + 1\n        else:\n            r -= 1\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # N is the input, so no need to check if it's negative or positive\n    # so we can just make sure we have a positive integer as the input\n    if N < 1:\n        print \"Input should be a positive integer\"\n    # initialize closest_num to the value of N as that's what the algorithm works\n    closest_num = N\n    # check if N is even, if so make it odd\n    if N % 2 == 0:\n        closest_num = closest_num + 1\n    # loop through each number up to the one closest to N\n    for i in range(N - 1, 1, -1):\n        # compute the absolute value difference between the current and the previous\n        # if that difference is smaller than the previous closest_num, update closest_num\n        if abs(closest_num - i) < abs(closest_num - closest_num - 1):\n            closest_num = i\n    # return the closest number\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num(n):\n        res = n\n        return (res - (res % n) + n) if (res % n) else res\n    smallest_divisor = 0\n    for i in range(n):\n        smallest_divisor = i\n        if n % i == 0:\n            smallest_divisor = i\n            break\n    return closest_num(smallest_divisor)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = [int(i) for i in N]\n    n.sort()\n    if n[0] < 0:\n        return str(n[1])\n    if n[-1] > 0:\n        return str(n[-2])\n    return str(n[-1])\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    return closest_num(N - 1) + 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 1:\n        return 1\n    i = 1\n    while i < n:\n        i = i * 2\n    return i / 2\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n <= 1:\n        return 1\n    else:\n        return int(str(n)[1:])\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while n - 1 >= 1:\n        if n % 10 > 1:\n            n = n // 10\n        else:\n            n = n // 10 - 1\n    return n\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort()\n    return len(list1[-1])\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_list=[]\n    for item in list1:\n        new_list.append(len(item))\n    return max(new_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for x in list1:\n        if len(x)>length:\n            length=len(x)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    str1 = ''\n    for i in range(0,len(list1)):\n        if len(list1[i]) > len(str1):\n            str1 = list1[i]\n    print str1\n    return len(str1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for x in list1:\n        list2.append(len(x))\n    return max(list2)\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max=0\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    print max\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = []\n    for x in list1:\n        words.append(len(x))\n    return max(words)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for i in list1:\n        word_len.append(len(i))\n    print \"The length of the longest word is : \", max(word_len)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str_list = [s for s in str1.split()]\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) <= len(sub_str):\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_3(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_4(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_5(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_6(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_7(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_8(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_9(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_10(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_11(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_12(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_13(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_14(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_15(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_16(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_17(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n            \n    return False\n    \n    \ndef find_substring_18(str1, sub_str):\n    '''\n    Write a function to check i"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    n = len(str1)\n    m = len(sub_str)\n    if n < m:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([sub_str in s for s in str1])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    try:\n        return str1.index(sub_str)\n    except ValueError:\n        return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1_len = len(str1)\n    sub_str_len = len(sub_str)\n    \n    for i in range(0, len(str1)):\n        if i + sub_str_len > str1_len:\n            break\n        elif str1[i:i+sub_str_len] == sub_str:\n            return True\n    \n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in xrange(len(str(n))/2):\n        if str(n)[i]!= str(n)[-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    d = {}\n    d[str(n)[0]] = n % 10\n    for i in range(1, len(str(n))):\n        d[str(n)[i]] = (n % 10) * 10 ** (i)\n    if d[str(n)[0]] == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2: \n        return True \n    elif n % 2 == 0: \n        return False \n    for i in range(3, n+1, 2): \n        if n % i == 0: \n            return False \n    return True \n    \ndef is_prim(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if n < 2: \n        return False \n    elif n == 2: \n        return True \n    elif n % 2 == 0: \n        return False \n    for i in range(3, int(n**0.5)+1, 2): \n        if n % i == 0: \n            return False \n    return True \n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        n_str = str(n)\n        for i in range(1, len(n_str)):\n            if int(n_str[i]) < int(n_str[i-1]):\n                return False\n        return True\n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, int(n/2) + 1):\n                if n % i == 0:\n                    return False\n            return True\n    \n    \n    \n    \ndef rotate(n):\n    '''\n    Write a function to check whether the given number is a rotational number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        n_str = str(n)\n        for i in range(1, len(n_str)):\n            if int(n_str[i]) < int(n_str[i-1]):\n                return False\n        return True\n    \n    \n    \n    \ndef is_super_increasing(n):\n    '''\n    Write a function to check whether the given number is a super increasing number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        n_str = str(n)\n        for i in range(1, len(n_str)):\n            if int(n_str[i]) <= int(n_str[i-1]):\n                return False\n        return True\n    \n    \n    \n    \ndef is_super_increasing2(n):\n    '''\n    Write a function to check whether the given number is a super increasing number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        l = len(s)\n        for i in range(l - 1):\n            if int(s[i+1]) <= int(s[i]):\n                return False\n        return True\n    \n    \n    \ndef super_increasing(n):\n    '''\n    Write a function to check whether the given number is a super increasing number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) > int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef super_increasing2(n):\n    '''\n    Write a function to check whether the given number is a super increasing number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) < int(s[i+1]):\n                return False\n        return True\n    \n    \ndef sub_string_div(n):\n    '''\n    Write a function to check whether the given number is a super increasing number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        l = len(str(n))\n        for i in range(1, l):\n            if n % i == 0:\n                return True\n        return False\n    \n    \n    \n    \ndef is_inclusion(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if s[i+1] < s[i]:\n                return False\n        return True\n    \n    \n    \n    \ndef is_inclusion2(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if s[i] > s[i+1]:\n                return False\n        return True\n    \n    \ndef is_inclusion3(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) > int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion4(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) < int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion5(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) > int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion6(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) < int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion7(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) > int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion8(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) < int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion9(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) > int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion10(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) < int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion11(n):\n    '''\n    Write a function to check whether the given number is an inclusion number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 1):\n            if int(s[i]) > int(s[i+1]):\n                return False\n        return True\n    \n    \n    \ndef is_inclusion12(n):\n    '''\n    Write a function to check whether the give"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1: \n        return False\n    return n % 2 == 1 and is_undulating(n//2)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (((n**2) + ((n**2)//2))**0.5) % 1 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_factor(n,i):\n        if n%i == 0:\n            return True\n        else:\n            return False\n    \n    if n == 1:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in xrange(3,n,2):\n            if is_factor(n,i) and is_factor(n,i+2):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if int(s[i]) > int(s[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n and n % 2 == 0 and is_undulating(n//2)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n)) == 1:\n        return True\n    a, b = divmod(n, 10)\n    return is_undulating(a) and is_undulating(b)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return 1 if b == 0 else a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        if abs(b)%2 == 1:\n            return 1/power(a,-b)\n        else:\n            return 1\n    else:\n        if b%2 == 0:\n            return power(a*a, b//2)\n        else:\n            return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        if a == 0:\n            return 1/0\n        return 1/a\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    elif b > 1:\n        return power(a,b-1)*a\n    else:\n        return 1/power(a,b+1)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    elif(b==1):\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        raise ValueError(\"power: negative exponents are not supported\")\n    if b==0:\n        return 1\n    else:\n        p=1\n        while b>0:\n            p*=a\n            b-=1\n        return p\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    # If test_list is empty, return None\n    if test_list == []:\n        return None\n    \n    # Else, if the first item is None, return the next one\n    if test_list[0][0] == None:\n        return index_minimum(test_list[1:])\n    \n    # Else, return the first item\n    if test_list[0][1] <= test_list[1][1]:\n        return test_list[0]\n    else:\n        return index_minimum(test_list[1:])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n    \ndef get_coast(trajectory, grid):\n    '''\n    Given a dictionary of the form {(x,y): value,...}, return the number of coast cells.\n    '''\n    coast = 0\n    for (x, y) in trajectory:\n        if grid[x][y] == 'c':\n            coast += 1\n    return coast\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #first sort the list based on the second value, then return the first value\n    return sorted(test_list,key=itemgetter(1))[0][0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    #first sort the list based on the second value, then return the first value\n    return sorted(test_list,key=itemgetter(1),reverse=True)[0][0]\n    \ndef sum_of_elements(test_list):\n    '''\n    Write a function that returns the sum of all the elements in a list.\n    '''\n    return sum(test_list)\n    \ndef count_elements(test_list, value):\n    '''\n    Write a function that returns the number of times value appears in the list.\n    '''\n    return test_list.count(value)\n    \ndef cumulative_sum(test_list):\n    '''\n    Write a function that returns a list of all the cumulative sums of a given list.\n    For example, if the list is [1,2,3,4,5,6,7] the cumulative sums will be [1,3,6,10,15,21,28]\n    '''\n    cumulative_sum_list = []\n    cumulative_sum_list.append(test_list[0])\n    \n    for i in xrange(1,len(test_list)):\n        cumulative_sum_list.append(cumulative_sum_list[i-1]+test_list[i])\n    \n    return cumulative_sum_list\n    \ndef reverse_list(test_list):\n    '''\n    Write a function that returns the reverse of a given list.\n    For example, if the list is [1,2,3,4,5,6,7] the reverse will be [7,6,5,4,3,2,1]\n    '''\n    return test_list[::-1]\n    \ndef square_of_elements(test_list):\n    '''\n    Write a function that returns the square of all the elements in a list.\n    For example, if the list is [1,2,3,4,5,6,7] the square of all elements will be [1,4,9,16,25,36,49]\n    '''\n    square_list = []\n    for i in xrange(len(test_list)):\n        square_list.append(test_list[i]**2)\n    \n    return square_list\n    \ndef even_odd_list(test_list):\n    '''\n    Write a function that returns a list that contains the even numbers from the original list, and the odd numbers from the original list.\n    For example, if the list is [1,2,3,4,5,6,7] the even and odd numbers will be [2,4,6,8,10]\n    '''\n    even_list = []\n    odd_list = []\n    \n    for i in xrange(len(test_list)):\n        if test_list[i]%2 == 0:\n            even_list.append(test_list[i])\n        else:\n            odd_list.append(test_list[i])\n    \n    return [even_list,odd_list]\n    \ndef multiply_by_two(test_list):\n    '''\n    Write a function that returns a list that contains the the multiplication by two of all the elements in the original list.\n    For example, if the list is [1,2,3,4,5,6,7] the multiplication by two of all elements will be [2,4,6,8,10,12,14]\n    '''\n    multiplied_list = []\n    \n    for i in xrange(len(test_list)):\n        multiplied_list.append(test_list[i]*2)\n    \n    return multiplied_list\n    \ndef middle_element(test_list):\n    '''\n    Write a function that returns the middle element of a list.\n    For example, if the list is [1,2,3,4,5,6,7] the middle element will be 4\n    '''\n    return test_list[len(test_list)/2]\n    \ndef mean_list(test_list):\n    '''\n    Write a function that returns the mean of a list.\n    For example, if the list is [1,2,3,4,5,6,7] the mean of the list will be 4\n    '''\n    mean = float(sum(test_list))/len(test_list)\n    \n    return mean\n    \ndef median_element(test_list):\n    '''\n    Write a function that returns the median of a list.\n    For example, if the list is [1,2,3,4,5,6,7] the median will be 4\n    '''\n    sorted_list = sorted(test_list)\n    \n    if len(sorted_list) % 2 == 0:\n        median = float(sorted_list[(len(sorted_list)/2)-1]+sorted_list[(len(sorted_list)/2)])/2\n    else:\n        median = sorted_list[len(sorted_list)/2]\n    \n    return median\n    \ndef first_last(test_list):\n    '''\n    Write a function that returns a list that contains the first element and the last element of the original list.\n    For example, if the list is [1,2,3,4,5,6,7] the first and last elements will be [1,7]\n    '''\n    first_last_list = [test_list[0],test_list[-1]]\n    return first_last_list\n    \ndef mode_list(test_list):\n    '''\n    Write a function that returns a list that contains the most occuring value in a list.\n    For example, if the list is [1,2,3,4,5,6,7,7] the mode will be 7\n    '''\n    mode_list = []\n    \n    for i in xrange(len(test_list)):\n        count = test_list.count(test_list[i])\n        if count > count:\n            count = test_list.count(test_list[i])\n    \n    for i in xrange(len(test_list)):\n        if test_list.count(test_list[i]) == count:\n            mode_list.append(test_list[i])\n    \n    return mode_list\n    \ndef min_max_list(test_list):\n    '''\n    Write a function that returns a list that contains the smallest and largest element in a list.\n    For example, if the list is [1,2,3,4,5,6,7] the smallest and largest elements will be [1,7]\n    '''\n    min_max_list = [test_list[0],test_list[-1]]\n    return min_max_list\n    \ndef flatten_list(test_list):\n    '''\n    Write a function that returns a flattened version of a list.\n    For example, if the list is [[1,2,3,4], [5,6,7], [8,9,10]] the flattened version will be [1,2,3,4,5,6,7,8,9,10]\n    '''\n    flat_list = []\n    for i in xrange(len(test_list)):\n        for j in xrange(len(test_list[i])):\n            flat_list.append(test_list[i][j])\n    \n    return flat_list\n    \ndef find_minimum(test_list, value):\n    '''\n    Write a function that returns the index of the first occurrence of a given value in the given list.\n    '''\n    return test_list.index(value)\n    \ndef find_maximum(test_list, value):\n    '''\n    Write a function that returns the index of the last occurrence of a given value in the given list.\n    '''\n    return len(test_list) - test_list[::-1].index(value) - 1\n    \ndef freq_list(test_list):\n    '''\n    Write a function that returns a list of the most frequent values in "
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = min(test_list, key=itemgetter(1))\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # As a doctest, let's use a dummy list of tuples,\n    # with three tuples that have the same second value.\n    # Test:\n    # test_list = [('a', 2), ('b', 2), ('c', 2)]\n    # This should return:\n    # b\n    test_list = [('a', 2), ('b', 2), ('c', 2)]\n    min_index = 0\n    min_val = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    #test_list = [(0, 4), (1, 2), (1, 3), (2, 6)]\n    #return sorted(test_list, key=itemgetter(1))[0][0]\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp = []\n    for i in test_list:\n        temp.append(i[1])\n    min_index = temp.index(min(temp))\n    return test_list[min_index][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lengths = []\n    for item in lst:\n        lengths.append(len(item))\n    return min(lengths)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublst in lst:\n        if len(sublst)<min_length:\n            min_length = len(sublst)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len = len(lst[0])\n    \n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    for i in lst:\n        if len(i) < length:\n            length = len(i)\n    return length\n    \ndef Min_List(lst):\n    '''\n    Write a python function to find the shortest list in a list of lists.\n    '''\n    length = Find_Min_Length(lst)\n    return [i for i in lst if len(i) == length]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst[0])\n    for i in lst:\n        if len(i) < length:\n            length = len(i)\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for l in lst:\n        if min_len > len(l):\n            min_len = len(l)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = min(len(lst) for lst in lst)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list_length = []  \n    for i in lst:  \n        list_length.append(len(i))  \n    min_length = min(list_length)  \n    return min_length \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 9999\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len\n    \ndef Sort_list_by_length(lst):\n    '''\n    Write a python function to sort a list of lists by the length of the list. \n    '''\n    lst.sort(key=lambda x:len(x))\n    return lst\n    \ndef Find_unique_words(lst):\n    '''\n    Write a python function to find the unique words in a list of lists.\n    '''\n    unique = set()\n    for l in lst:\n        unique.update(l)\n    return list(unique)\n    \ndef Check_Permutation(str1, str2):\n    '''\n    Write a python function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = str1.lower()\n    str2 = str2.lower()\n    str1_dict = {}\n    str2_dict = {}\n    for c in str1:\n        str1_dict[c] = str1_dict.get(c, 0) + 1\n    for c in str2:\n        str2_dict[c] = str2_dict.get(c, 0) + 1\n    return str1_dict == str2_dict\n    \ndef Sum_Pairs(lst, K):\n    '''\n    Write a python function to return the sum of all the pairs of numbers whose sum is equal to K.\n    '''\n    pairs = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == K:\n                pairs.append((lst[i], lst[j]))\n    return pairs\n    \ndef Find_Min_Difference(lst):\n    '''\n    Write a python function to find the minimum absolute difference between any two numbers in a list.\n    '''\n    lst.sort()\n    min_diff = abs(lst[0] - lst[-1])\n    for i in range(len(lst) - 1):\n        min_diff = min(min_diff, abs(lst[i] - lst[i+1]))\n    return min_diff\n    \ndef Find_Max_Value(lst):\n    '''\n    Write a python function to find the maximum value in a list.\n    '''\n    return max(lst)\n    \ndef Count_Pairs(lst, K):\n    '''\n    Write a python function to count the number of pairs in a list whose sum is equal to K.\n    '''\n    cnt = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == K:\n                cnt += 1\n    return cnt\n    \ndef Is_Palindrome(word):\n    '''\n    Write a python function to check if a word is a palindrome.\n    '''\n    return word[::-1] == word\n    \ndef Palindrome_Num(n):\n    '''\n    Write a python function to check if a number is a palindrome number.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    return sum(Factors(n)) == n\n    \ndef Factors(n):\n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    return [num for num in range(1, n + 1) if n % num == 0]\n    \ndef Perfect_Num(n):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    return sum(Factors(n)) == n\n    \ndef Prime_Num(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    for num in range(2, n):\n        if n % num == 0:\n            return False\n    return True\n    \ndef Count_Upper_Case(str1):\n    '''\n    Write a python function to count the number of uppercase characters in a string.\n    '''\n    return sum(1 for c in str1 if c.isupper())\n    \ndef Count_Lower_Case(str1):\n    '''\n    Write a python function to count the number of lowercase characters in a string.\n    '''\n    return sum(1 for c in str1 if c.islower())\n    \ndef Contains_Vowel(str1):\n    '''\n    Write a python function to check if a string contains at least one vowel.\n    '''\n    return any(c in \"aeiouAEIOU\" for c in str1)\n    \ndef Count_Digits(str1):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    return sum(1 for c in str1 if c.isdigit())\n    \ndef Compression(str1):\n    '''\n    Write a python function to convert a string to a compressed string.\n    '''\n    if len(str1) == 1:\n        return str1\n    count = 1\n    compressed = ''\n    for i in range(1, len(str1)):\n        if str1[i] == str1[i-1]:\n            count += 1\n        else:\n            compressed += str1[i-1] + str(count)\n            count = 1\n    compressed += str1[-1] + str(count)\n    return compressed\n    \ndef Insert_Spaces(str1, len1):\n    '''\n    Write a python function to insert spaces in a string so that the string has a length len1.\n    '''\n    return ''.join([''for i in range(len1 - len(str1))] + [str1])\n    \ndef Insert_Space(str1, len1):\n    '''\n    Write a python function to insert spaces in a string so that the string has a length len1.\n    '''\n    return ''.join([''for i in range(len1 - len(str1))] + [str1])\n    \ndef Count_Vowels(str1):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return sum(1 for c in str1 if c in \"aeiouAEIOU\")\n    \ndef Find_Max_Substring(str1):\n    '''\n    Write a python function to find the longest substring in a string which has no repeating characters.\n    '''\n    max_len = 1\n    max_substr = str1[0]\n    for i in range(len(str1)):\n        for j in range(i, len(str1)):\n            if str1[i:j+1] not in str1[i+1:j+2]:\n                if max_len < j - i + 1:\n                    max_len = j - i + 1\n                    max_substr = str1[i:j+1]\n    return max_substr\n    \ndef Find_Max_Subarray(lst):\n    '''\n    Write a python function to find the maximum sum of any contiguous subarray.\n    '''\n    max_so_far = lst[0]\n    max_ending_here = lst[0]\n    for i in range(1, len(lst)):\n        max_ending_here = max(lst[i], max_ending_here + lst[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n    \ndef Count_Unique_Words(lst):\n    '''\n    Write a python function to count the number of unique words in a list of lists.\n    '''\n    unique = set()\n    for l in lst:\n        unique.update(l)\n    return len(unique)\n    \ndef Count_Words_with_Spaces(str1):\n    '''\n    Write a python function to count th"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [1]\n    for i in range(2, n):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    else:\n        divisors=0\n        for i in range(1,n+1):\n            if n%i==0:\n                divisors+=1\n        return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    for i in range(2, int(n/2) + 1):\n        if n % i == 0:\n            return i, n / i\n    return 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div=1\n    divisors=0\n    for i in range(1,n):\n        if n%i==0:\n            divisors+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # If n is divisible by any number other than 1,\n    # there are divisors\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    # if n is divisible by only 1 or 2,\n    # there is no divisor\n    if n % 2 == 0:\n        return 2\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    from math import sqrt\n    divisors = 1\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            divisors += 2\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    d = 1\n    for i in range(2, n):\n        if (n % i) == 0:\n            d += 1\n    return d\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count = count + 1\n        i = i + 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        for j in i:\n            if j in dict1:\n                dict1[j] += 1\n            else:\n                dict1[j] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #Create a dictionary of lists to store frequencies\n    freq_dict = {}\n    #Iterate through list1\n    for item in list1:\n        #If not in the dictionary, add it as a key with a value of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        #If the item is already in the dictionary, add one to the value\n        else:\n            freq_dict[item] += 1\n    #Return the dictionary\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for item in list1:\n        d[item] += 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in range(0,len(list1)):\n        if list1[i] in frequency_dict:\n            frequency_dict[list1[i]] += 1\n        else:\n            frequency_dict[list1[i]] = 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freqDict = {}\n    for i in list1:\n        if i in freqDict:\n            freqDict[i] += 1\n        else:\n            freqDict[i] = 1\n    return freqDict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    return Counter(element for sublist in list1 for element in sublist)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n    if len(list1) == 1:\n        return {list1[0]:1}\n    if len(list1[0]) == 0:\n        return {list1[0]:1}\n    first = list1[0][0]\n    rest = list1[1:]\n    sub_dict = frequency_lists(rest)\n    sub_dict[first] = sub_dict.get(first,0) + 1\n    return sub_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize dictionary:\n    dict1 = {}\n    # loop over elements in list1:\n    for element in list1:\n        # check if element is in dictionary:\n        if element in dict1:\n            # if so, increment value of element:\n            dict1[element] += 1\n        else:\n            # otherwise, add element to dictionary with value 1:\n            dict1[element] = 1\n    # return dictionary:\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict = {}\n    for item in list1:\n        if item in dict:\n            dict[item] += 1\n        else:\n            dict[item] = 1\n    return dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        freq_dict.setdefault(item, 0)\n        freq_dict[item] += 1\n    return freq_dict\n    \ndef check_numbers_in_list(list1):\n    '''\n    Write a function to check if a list contains all the numbers in the range between 1 and 50, return True or False\n    '''\n    for num in list1:\n        if num < 1 or num > 50:\n            return False\n    return True\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y: x*y, numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 1\n    for i in numbers:\n        res *= i\n    return res / len(numbers)\n    "
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product = product * num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result = result * n\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in numbers:\n        num *= i\n    return num / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / length\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul_num = 1\n    for i in numbers:\n        mul_num = mul_num * i\n    div_num = len(numbers)\n    print 'the numbers in the list are: '\n    for i in numbers:\n        print i\n    print 'the result is: '\n    print mul_num / div_num\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    total = 1\n    for num in numbers:\n        total = total * num\n    print(total / length)\n    \nmultiply_num([2,3,4,5])\n    \n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n > 1:\n        return decimal_to_binary(n//2) + str(n%2)\n    else:\n        return '1' + str(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Edge case - n = 0\n    if n == 0:\n        return 0\n    # Edge case - n = 1\n    elif n == 1:\n        return 1\n    else:\n        # Populate the queue with non-base 10 binary numbers from right to left\n        binary = []\n        while n > 0:\n            binary.append(n%2)\n            n = n/2\n        # Reverse the queue to get the right-most-leftmost bit\n        binary.reverse()\n        # Populate the queue with 0's\n        for i in range(len(binary),8):\n            binary.append(0)\n        # Convert to string\n        return ''.join(str(e) for e in binary)\n    \ndef binary_to_decimal(n):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    # Edge case - n = 0\n    if n == 0:\n        return 0\n    # Edge case - n = 1\n    elif n == 1:\n        return 1\n    else:\n        # Populate the queue with non-base 10 binary numbers from right to left\n        n = int(n)\n        decimal = 0\n        for i in range(len(n)):\n            decimal = decimal*2\n            decimal += n[i]\n        return decimal\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        decimal_to_binary(n/2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_num = ''\n    while n > 0:\n        rem = n % 2\n        bin_num = str(rem) + bin_num\n        n /= 2\n    return bin_num\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    \n    bits = []\n    while n > 0:\n        bits.append(str(n%2))\n        n = n / 2\n    \n    bits.reverse()\n    return \"\".join(bits)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return str(0)\n    elif n == 1:\n        return str(1)\n    else:\n        return str(decimal_to_binary(n//2)) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    elif n == 1: \n        return \"1\"\n    else: \n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    elif n % 2 == 0: \n        return decimal_to_binary(n/2) + \"0\"\n    else: \n        return decimal_to_binary(n/2) + \"1\"\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    if ((num % 10) == 0) or ((num % 10) == 1):\n        num += 9\n    while (num % 10 == 0):\n        num /= 10\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num+=1\n    if num>9:\n        num=0\n    while not is_palindrome(num):\n        num+=1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if len(num_str) % 2 == 0:\n        return int(num_str[:len(num_str)//2] + num_str[len(num_str)//2:][::-1])\n    else:\n        return int(num_str[:len(num_str)//2] + num_str[len(num_str)//2+1:][::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return int(num) + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    next_num = num + 1\n    while not is_palindrome(next_num):\n        next_num += 1\n    return next_num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[:i])+1 < 10:\n            num = num[:i]+str(int(num[:i])+1)\n            return int(num)\n        elif int(num[:i])+1 >= 10:\n            if int(num[i])-1 < 0:\n                return int(num[:i-1]+str(int(num[i-1])+1)+'0')\n            else:\n                return int(num[:i]+str(int(num[i])-1))\ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[:i])-1 > 0:\n            num = num[:i]+str(int(num[:i])-1)\n            return int(num)\n        elif int(num[:i])-1 <= 0:\n            if int(num[i])+1 > 9:\n                return int(num[:i-1]+str(int(num[i-1])-1)+'9')\n            else:\n                return int(num[:i]+str(int(num[i])+1))\ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[:i])+1 > int(num[i:]):\n            return int(num[:i]+str(int(num[i:])+1))\n        elif int(num[:i])+1 < int(num[i:]):\n            return int(num[:i]+str(int(num[i:])-1))\n        elif int(num[:i])+1 == int(num[i:]):\n            return int(num[:i]+str(int(num[i:])-1))\ndef next_almost_palindrome(num):\n    '''\n    Write a function to find the next almost palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[:i])+1 > int(num[i:]):\n            num = num[:i]+str(int(num[i:])+1)\n            if num[i:] == num[:i-1:-1]:\n                return int(num[:i-1:-1]+str(int(num[i-1:-1])+1))\n            else:\n                return int(num[:i])\n        elif int(num[:i])+1 < int(num[i:]):\n            num = num[:i]+str(int(num[i:])-1)\n            if num[i:] == num[:i-1:-1]:\n                return int(num[:i-1:-1]+str(int(num[i-1:-1])-1))\n            else:\n                return int(num[:i])\n        elif int(num[:i])+1 == int(num[i:]):\n            num = num[:i]+str(int(num[i:])-1)\n            if num[i:] == num[:i-1:-1]:\n                return int(num[:i-1:-1]+str(int(num[i-1:-1])-1))\n            else:\n                return int(num[:i])\ndef next_greater_palindrome(num):\n    '''\n    Write a function to find the next greater palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[:i])+1 > int(num[i:]):\n            num = num[:i]+str(int(num[i:])+1)\n            return int(num)\n        elif int(num[:i])+1 < int(num[i:]):\n            num = num[:i]+str(int(num[i:])-1)\n            return int(num)\n        elif int(num[:i])+1 == int(num[i:]):\n            num = num[:i]+str(int(num[i:])-1)\n            return int(num)\ndef next_smallest_same_sign(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[:i])-1 > 0:\n            num = num[:i]+str(int(num[i:])+1)\n            return int(num)\n        elif int(num[:i])-1 < 0:\n            num = num[:i]+str(int(num[i:])-1)\n            return int(num)\n        elif int(num[:i])-1 == 0:\n            if int(num[i])-1 < 0:\n                return int(num[:i-1]+str(int(num[i-1])+1)+'0')\n            else:\n                return int(num[:i]+str(int(num[i])-1))\ndef next_greater_same_sign(num):\n    '''\n    Write a function to find the next greater palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[:i])+1 > int(num[i:]):\n            num = num[:i]+str(int(num[i:])+1)\n            return int(num)\n        elif int(num[:i])+1 < int(num[i:]):\n            num = num[:i]+str(int(num[i:])-1)\n            return int(num)\n        elif int(num[:i])+1 == int(num[i:]):\n            num = num[:i]+str(int(num[i:])-1)\n            return int(num)\ndef next_almost_same_sign(num):\n    '''\n    Write a function to find the next almost palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if int(num[:i])+1 > int(num[i:]):\n            num = num[:i]+str(int(num[i:])+1)\n            if num[i:] == num[:i-1:-1]:\n                return int(num[:i-1:-1]+str(int(num[i-1:-1])+1))\n            else:\n                return int(num[:i])\n        elif int(num[:i])+1 < int(num[i:]):\n            num = num[:i]+str(int(num[i:])-1)\n            if num[i:] == num[:i-1:-1]:\n                return int(num[:i-1:-1]+str(int(num[i-1:-1])-1))\n            else:\n                return int(num[:i])\n        elif int(num[:i])+1 == int(num[i:]):\n            num = num[:i]+str(int(num[i:])-1)\n            if num[i:] == num[:i-1:-1]:\n                return int(num[:i-1:-1]+str(int(num[i-1:-1])-1))\n            else:\n                return int(num[:i])\ndef next_greater_different_sign(num):\n    '''\n    Write a function to find the next greater palindrome of a specifie"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = num + 1\n    while not is_palindrome(result):\n        result += 1\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    if num == 0:\n        return 1\n    elif num < 0:\n        return -1\n    else:\n        num = str(num)\n        if len(num) == 1:\n            return int(num) + 1\n        elif num[0] == '9':\n            return int(num[1:]) + 1\n        else:\n            return int(num[1:])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    s = str(num)\n    mid = int(len(s)/2)\n    if len(s)%2 == 0:\n        #print(mid)\n        s = s[:mid-1] + s[mid:]\n    else:\n        s = s[:mid] + s[mid+1:]\n    if s[0] == '9':\n        s = s[1:]\n    print(s)\n    s = int(s[::-1])\n    return s + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError(\"Kth element can only be found in a list\")\n    elif k <= 0:\n        raise IndexError(\"Invalid index. Given index %s is out of bounds\" % k)\n    if k > len(arr):\n        raise IndexError(\"Kth element can only be found in a list of length %s\" % len(arr))\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None or len(arr) == 0 or k < 0 or k > len(arr):\n        return None\n    \n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, left, right):\n        pivot = arr[left]\n        i, j = left, right\n        while i < j:\n            while i < j and arr[j] >= pivot:\n                j -= 1\n            while i < j and arr[i] <= pivot:\n                i += 1\n            if i < j:\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[left], arr[i] = arr[i], arr[left]\n        return i\n    left, right = 0, len(arr)-1\n    while True:\n        pivot = partition(arr, left, right)\n        if pivot+1 == k:\n            return arr[pivot]\n        if pivot+1 < k:\n            left = pivot+1\n        else:\n            right = pivot-1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if i == k - 1:\n            return arr[i]\n        \n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return arr\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k >= len(arr):\n        return 'Invalid kth element'\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    first, *others = word.split('_')\n    return first + ''.join(map(str.capitalize, others))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace(\"_\",\" \")\n    words = word.split(\" \")\n    output = \"\"\n    for word in words:\n        output += word.capitalize()\n    return output\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # if word is None:\n    #     return word\n    # elif len(word) == 1:\n    #     return word\n    # else:\n    #     return word.title()\n    return ''.join(word.title() for word in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == \"\":\n        return word\n    else:\n        letter = word[0]\n        if letter == \" \":\n            return word\n        else:\n            if letter == \"_\":\n                return word[1:].title()\n            else:\n                return word[0].upper() + word[1:].title()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = word.split('_')\n    new_word = ''.join(x.title() for x in new_word)\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    new_string = ''\n    new_word = word[0].upper()\n    for i in range(1, len(word)):\n        if word[i]!= '_':\n            new_word += word[i]\n        else:\n            new_word += '_'\n            new_string += new_word\n            new_word = ''\n    new_string += new_word\n    return new_string\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([x.capitalize() for x in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    snake_word = word.split('_')\n    for word in snake_word:\n        camel_word += word.capitalize()\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # First, just return the string as it is\n    if type(word) == str:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) < 2:\n        return word\n    if word[0] == word[1].lower():\n        return word[0] + camel_case(word[1:])\n    else:\n        return word[0] + camel_case(word[1:])[0].upper() + camel_case(word[1:])[1:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return m + 1\n    if n == 2:\n        return m*(m+1) + 1\n    if n == 3:\n        return m*(m+1)*(m+2) + m + 1\n    if n == 4:\n        return m*(m+1)*(m+2)*(m+3) + m*(m+1) + 1\n    if n == 5:\n        return m*(m+1)*(m+2)*(m+3)*(m+4) + m*(m+1)*(m+2) + m + 1\n    if n == 6:\n        return m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5) + m*(m+1)*(m+2)*(m+3) + m + 1\n    if n == 7:\n        return m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6) + m*(m+1)*(m+2)*(m+3)*(m+4) + m + 1\n    if n == 8:\n        return m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6)*(m+7) + m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5) + m + 1\n    if n == 9:\n        return m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6)*(m+7)*(m+8) + m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6) + m + 1\n    if n == 10:\n        return m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6)*(m+7)*(m+8)*(m+9) + m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6)*(m+7) + m + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return gcd(n, m) \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (eulerian_num(n-1, m) + m * eulerian_num(n-1, m)) % (10**9 + 7)\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    assert n >= 0\n    assert m >= 0\n    if n == 0:\n        return 0\n    else:\n        return (eulerian_num(n-1, m) + m) % n\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def get_num(a, b, n):\n        \"\"\"\n        Get the eulerian number for the sequence of numbers from a to b.\n        \"\"\"\n        euler_num = 1\n        for i in range(a, b):\n            euler_num = euler_num * (i+1)\n        return euler_num\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    else:\n        return (n+m) * (eulerian_num(n-1,m) + eulerian_num(n,m-1))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return len(eulerian_graph(n, m))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n + 1\n    return n * eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return 0\n    if n == 0: \n        return 1\n    return eulerian_num(n-1, m-1) + m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1: return 1\n    if n % 2 == 0: \n        return eulerian_num(n/2, m) + eulerian_num(n/2, m) * m\n    return eulerian_num((n - 1)/2, m) + eulerian_num((n - 1)/2, m) * m\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a list to store the sorted sublists\n    sorted_sublists = []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result_list = []\n    for sublist in input_list:\n        sublist.sort()\n        result_list.append(sublist)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # import pdb; pdb.set_trace()\n    sort_list = []\n    for i in input_list:\n        sorted_i = sorted(i)\n        sort_list.append(sorted_i)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[sorted(string) for string in sublist] for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # the nested for loop might seem odd, but it's so that we can\n    # safely iterate over elements of the main list.\n    # think of it like a for loop that iterates over the elements\n    # of the list of lists.\n    # This loop iterates over the elements of the main list\n    for i in range(len(input_list)):\n        # for each element in the list of lists\n        for j in range(len(input_list[i])):\n            # sort the sublist\n            input_list[i][j].sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for element in lst if element])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst1 = []\n    for i in lst:\n        if i == True:\n            lst1.append(i)\n        else:\n            lst1.append(i)\n    print(lst1.count(True))\n    return lst1.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for e in lst if e)\n    \ndef unique(lst):\n    '''\n    Write a python function to return unique values from the given list\n    '''\n    return len(set(lst))\n    \ndef reverse(lst):\n    '''\n    Write a python function to reverse the given list\n    '''\n    return lst[::-1]\n    \ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a list in place.\n    '''\n    for i in range(len(lst)/2):\n        lst[i],lst[-1-i] = lst[-1-i],lst[i]\n    return lst\n    \ndef group(lst,size):\n    '''\n    Write a python function to group the given list into list of lists.\n    '''\n    return [lst[i:i+size] for i in range(0, len(lst), size)]\n    \ndef shuffle(lst):\n    '''\n    Write a python function to shuffle the given list\n    '''\n    random.shuffle(lst)\n    return lst\n    \ndef sum_range(start, end):\n    '''\n    Write a python function to return sum of a range using a loop\n    '''\n    total = 0\n    for i in range(start,end):\n        total = total + i\n    return total\n    \ndef sum_range_it(start, end):\n    '''\n    Write a python function to return sum of a range using an iterator\n    '''\n    total = sum(i for i in range(start,end))\n    return total\n    \ndef is_member(element, lst):\n    '''\n    Write a python function to check whether the given element is a member of the given list\n    '''\n    return element in lst\n    \ndef avg(lst):\n    '''\n    Write a python function to calculate the average of the given list\n    '''\n    return sum(lst) / float(len(lst))\n    \ndef median(lst):\n    '''\n    Write a python function to calculate the median of the given list\n    '''\n    return sorted(lst)[len(lst) / 2]\n    \ndef max_key(d):\n    '''\n    Write a python function to find the maximum value in the given dictionary\n    '''\n    return max(d.values())\n    \ndef min_key(d):\n    '''\n    Write a python function to find the minimum value in the given dictionary\n    '''\n    return min(d.values())\n    \ndef filter_even(lst):\n    '''\n    Write a python function to filter the given list to remove all even elements\n    '''\n    return [x for x in lst if x % 2]\n    \ndef divisors(number):\n    '''\n    Write a python function to return all divisors of the given number\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef prime_factors(number):\n    '''\n    Write a python function to find the prime factors of the given number\n    '''\n    divisors = []\n    for i in range(2,number):\n        if number % i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef is_prime(number):\n    '''\n    Write a python function to check whether the given number is a prime number\n    '''\n    divisors = []\n    for i in range(2,number):\n        if number % i == 0:\n            divisors.append(i)\n    if len(divisors) == 0:\n        return True\n    return False\n    \ndef count_occurences(lst, elem):\n    '''\n    Write a python function to count the occurences of the given element in the given list\n    '''\n    return lst.count(elem)\n    \ndef reverse_nums(lst):\n    '''\n    Write a python function to reverse the digits of the given list\n    '''\n    n = len(lst)\n    return [lst[i] for i in range(n-1,-1,-1)]\n    \ndef flatten(lst):\n    '''\n    Write a python function to flatten the given list of lists\n    '''\n    return [item for sublist in lst for item in sublist]\n    \ndef minimum_element(lst):\n    '''\n    Write a python function to find the minimum element in the given list\n    '''\n    return min(lst)\n    \ndef maximum_element(lst):\n    '''\n    Write a python function to find the maximum element in the given list\n    '''\n    return max(lst)\n    \ndef common_elements(lst1,lst2):\n    '''\n    Write a python function to find common elements between the given lists\n    '''\n    return list(set(lst1).intersection(lst2))\n    \ndef frequency_count(lst, elem):\n    '''\n    Write a python function to count the occurences of the given element in the given list\n    '''\n    return lst.count(elem)\n    \ndef is_palindrome(lst):\n    '''\n    Write a python function to check whether the given list is a palindrome or not\n    '''\n    return lst == lst[::-1]\n    \ndef find_smallest_num(lst):\n    '''\n    Write a python function to find the smallest element in the given list\n    '''\n    return min(lst)\n    \ndef find_largest_num(lst):\n    '''\n    Write a python function to find the largest element in the given list\n    '''\n    return max(lst)\n    \ndef is_palindrome_iter(lst):\n    '''\n    Write a python function to check whether the given list is a palindrome or not\n    '''\n    for i in range(len(lst) / 2):\n        if lst[i]!= lst[-1-i]:\n            return False\n    return True\n    \ndef max_sublist_sum(lst):\n    '''\n    Write a python function to find the maximum sum of the sublists of the given list\n    '''\n    return max([sum(sublist) for sublist in group(lst,len(lst) / 2)])\n    \ndef max_sublist_size(lst):\n    '''\n    Write a python function to find the maximum size of the sublists of the given list\n    '''\n    return max([len(sublist) for sublist in group(lst,len(lst) / 2)])\n    \ndef reverse_sublist(lst, start, stop):\n    '''\n    Write a python function to reverse the sublist from the given list from the given start to the given stop index\n    '''\n    for i in range(start,stop, -1):\n        lst[i],lst[start - 1] = lst[start - 1],lst[i]\n    return lst\n    \ndef max_min_diff(lst):\n    '''\n    Write a python function to find the max and min difference between two consecutive elements in the given list\n    '''\n    return [max(lst[i+1],lst[i]) - min(lst[i+1],lst[i]) for i in range(len(lst)-1)]\n    \ndef swap_nodes(lst, a, b):\n    '''\n    Write a python function to swap two given nodes in the given list\n    '''\n    lst[a], lst[b] = lst[b], lst[a]\n    return lst\n    \ndef is_rotation(lst1, lst2):\n    '''\n    Write a python function to check whether the given lists are rotations of each other or not\n    '''\n    return lst1 == lst2[-len(lst1):]\n    \ndef is_rotation_bit(lst1, lst2):\n    '''\n    Write a python function to check whether the given lists are rotations of each other or not\n    '''\n    if len(lst1)!= len(lst"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for el in lst if el==True])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if (i == True):\n            count +=1\n    return count\n    \ndef multiply(lst):\n    '''\n    Write a python function to multiply all the elements in the given list.\n    '''\n    count = 1\n    for i in lst:\n        count *= i\n    return count\n    \ndef first_and_last(lst):\n    '''\n    Write a python function to return the first and last element of the given list.\n    '''\n    return [lst[0], lst[-1]]\n    \ndef test_function():\n    print('Testing count()...')\n    assert(count([True, True, False, False]) == 2)\n    assert(count([1, 2, 3, 4]) == 4)\n    assert(count([False, False, False, False, False]) == 0)\n    assert(count(range(0, 20)) == 20)\n    assert(count([]) == 0)\n    print('Passed!')\n    \n    print('Testing multiply()...')\n    assert(multiply([]) == 1)\n    assert(multiply([1, 2, 3]) == 6)\n    assert(multiply([True, False, True]) == 2)\n    assert(multiply(range(0, 20)) == 0)\n    assert(multiply([2]) == 2)\n    print('Passed!')\n    \n    print('Testing first_and_last()...')\n    assert(first_and_last([]) == [None, None])\n    assert(first_and_last([1, 2, 3]) == [1, 3])\n    assert(first_and_last([1]) == [1, 1])\n    assert(first_and_last([True, False, True]) == [True, True])\n    assert(first_and_last(range(0, 20)) == [0, 19])\n    print('Passed!')\n    \ntest_function()"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    # creating a new list of boolean values\n    boolean_lst = [bool(i) for i in lst]\n    \n    #counting the booleans in the list\n    count = 0\n    for i in boolean_lst:\n        if i == True:\n            count = count + 1\n    \n    #returning the count\n    return count\n    \nprint(count(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']))"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i:\n            c+=1\n    return c\n    "
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([i for i in lst if i is True])\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    x = test_list.append(test_tup)\n    return x\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup_list = []\n    for item in test_list:\n        tup_list.append((item,))\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # write your code here\n    if len(test_list) == 0:\n        return test_tup\n    else:\n        last = test_list[-1]\n        new_tup = (last, test_list)\n        return add_lists(test_list[:-1], new_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_list)!= type(test_tup):\n        return 'Both the arguments need to be of the same type'\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    try:\n        for item in test_tup:\n            test_list.append(item)\n    except:\n        for item in test_tup:\n            test_list.append(item)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    return test_list + test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge_heap(num1,num2,num3):\n        '''\n        Write a function to merge three lists into a single sorted list.\n        '''\n        heapq.heappush(heap,(num1[0],num1))\n        heapq.heappush(heap,(num2[0],num2))\n        heapq.heappush(heap,(num3[0],num3))\n        return heap\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    list1 = num1\n    list2 = num2\n    list3 = num3\n    list1.extend(list2)\n    list1.extend(list3)\n    sorted_list = sorted(list1)\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1 + num2 + num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    heapq.heappush(sorted_list,num1)\n    heapq.heappush(sorted_list,num2)\n    heapq.heappush(sorted_list,num3)\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = [1,2,3]\n    list2 = [4,5,6]\n    list3 = [7,8,9]\n    sorted_list = []\n    if num1 == None:\n        if num2 == None:\n            sorted_list = sorted(list3)\n        else:\n            sorted_list = sorted(list2)\n    else:\n        if num2 == None:\n            sorted_list = sorted(list1)\n        else:\n            sorted_list = sorted(list1+list2)\n    print sorted_list\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None and num2 == None and num3 == None:\n        return None\n    if num1 == None and num2 == None:\n        return num3\n    if num1 == None and num3 == None:\n        return num2\n    if num2 == None and num3 == None:\n        return num1\n    if num1 == None:\n        return sorted(num2+num3)\n    if num2 == None:\n        return sorted(num1+num3)\n    if num3 == None:\n        return sorted(num1+num2)\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    h=[]\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    for i in num1:\n        if i not in num2:\n            heapq.heappush(h,i)\n    for i in num2:\n        if i not in num1:\n            heapq.heappush(h,i)\n    for i in num3:\n        if i not in num1 and i not in num2:\n            heapq.heappush(h,i)\n    return h\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #res = []\n    #res += num1\n    #res += num2\n    #res += num3\n    #res = sorted(res)\n    #return res\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    if num2 == None:\n        return num1\n    if num3 == None:\n        return num1\n    \n    if num1[0]<num2[0]:\n        return num1+num2\n    else:\n        return num1+num3\ndef multiply_list(num1,num2):\n    if num2 == None:\n        return None\n    if len(num2) == 1:\n        return num1*num2[0]\n    i = 0\n    result = 0\n    while i < len(num1):\n        result += num1[i]*num2[i]\n        i+=1\n    return result\ndef peek_one_element(heap):\n    return heap[0][0]\ndef peek_all_elements(heap):\n    return [i[0] for i in heap]\ndef peek_one_element_with_index(heap):\n    index,value = peek_one_element(heap)\n    return index,value\ndef peek_all_elements_with_index(heap):\n    return [(i[0],i[1]) for i in heap]\ndef get_min_heap_element(heap):\n    return heap[0]\ndef get_min_heap(heap):\n    return heap[1:]\ndef peek_one_element_with_index_in_heap(heap):\n    index,value = peek_one_element_with_index(heap)\n    return index,value\ndef peek_all_elements_with_index_in_heap(heap):\n    return [(i[0],i[1]) for i in peek_all_elements_with_index(heap)]\ndef remove_heap_element(heap,element):\n    if heap == None or element not in heap:\n        return None\n    \n    i = heap.index(element)\n    if i == 0:\n        return heap[1:]\n    heap[i] = heap[-1]\n    heap = heap[:-1]\n    return heap\ndef heap_sort(heap):\n    while len(heap) > 1:\n        heap[0] = heap[-1]\n        heap = heap[:-1]\n        heapify(heap,0)\n    return heap\ndef heapify(heap,index):\n    while index!= 0:\n        parent = index\n        if heap[index][0] > heap[(index-1)//2][0]:\n            parent = (index-1)//2\n        if heap[index][0] < heap[parent][0]:\n            heap[index],heap[parent] = heap[parent],heap[index]\n        index = parent\n    return heap\ndef heapsort(num):\n    n = len(num)\n    if n == 0:\n        return None\n    if n == 1:\n        return num\n    left = num[:n//2]\n    right = num[n//2:]\n    return merge_sorted_list(heapsort(left),heapsort(right),num)\ndef heapsort_smallest_first(num):\n    return merge_sorted_list(heapsort(num[:-1]),heapsort(num[-1:]),None)\ndef insert_into_heap(heap,index,value):\n    heap.append(value)\n    heapify(heap,len(heap)-1)\ndef delete_from_heap(heap,index):\n    if len(heap) == 0:\n        return None\n    elif index == 0:\n        return heap[1:]\n    elif index == len(heap)-1:\n        return heap[:-1]\n    else:\n        heap[index],heap[-1] = heap[-1],heap[index]\n        heap = heap[:-1]\n        heapify(heap,index)\n        return heap\ndef heapsort_from_top_to_bottom(num):\n    n = len(num)\n    if n == 0:\n        return None\n    if n == 1:\n        return num\n    heap = [i[0] for i in num]\n    for i in range(n//2-1,-1,-1):\n        heapify(heap,i)\n    for i in range(n-1,0,-1):\n        heap[0] = num[i][0]\n        heap = delete_from_heap(heap,0)\n        heapify(heap,0)\n    return heap\ndef heapsort_from_bottom_to_top(num):\n    n = len(num)\n    if n == 0:\n        return None\n    if n == 1:\n        return num\n    heap = [i[0] for i in num]\n    for i in range(n//2-1,-1,-1):\n        heapify(heap,i)\n    for i in range(n-1,0,-1):\n        heap[0] = num[i][0]\n        heap = delete_from_heap(heap,0)\n        heapify(heap,0)\n    return heap\ndef is_sorted(num):\n    if len(num) <= 1:\n        return True\n    previous = num[0]\n    for i in range(1,len(num)):\n        if num[i] < previous:\n            return False\n        previous = num[i]\n    return True\ndef is_sorted_bottom_to_top(num):\n    if len(num) <= 1:\n        return True\n    for i in range(1,len(num)):\n        if num[i][0] < num[i-1][0]:\n            return False\n    return True\ndef is_sorted_top_to_bottom(num):\n    if len(num) <= 1:\n        return True\n    for i in range(1,len(num)):\n        if num[i][0] > num[i-1][0]:\n            return False\n    return True\ndef heap_sort_top_to_bottom(num):\n    if len(num) == 0:\n        return None\n    if len(num) == 1:\n        return num\n    n = len(num)\n    left = num[:n//2]\n    right = num[n//2:]\n    heapify(left,0)\n    heapify(right,0)\n    i = 0\n    while len(left) > 1 and len(right) > 1:\n        if left[0] > right[0]:\n            num[i] = right[0]\n            right = delete_from_heap(right,0)\n        else:\n            num[i] = left[0]\n            left = delete_from_heap(left,0)\n        i+=1\n    if len(left) == 1:\n        num[i] = left[0]\n        num = num[:i]+right+num[i+1:]\n    else:\n        num = num[:i]+right+num[i+1:]\n    return num\ndef heap_sort_bottom_to_top(num):\n    if len(num) == 0:\n        return None\n    if len(num) == 1:\n        return num\n    n = len(num)\n    left = num[:n//2]\n    right = num[n//2:]\n    heapify(left,0)\n    heapify(right,0)\n    i = 0\n    while len(left) > 1 and len(right) > 1:\n        if left[0] < right[0]:\n            num[i] = right[0]\n            right = delete_from_heap(right,0)\n        else:\n            num[i] = left[0]\n            left = delete_from_heap(left,0)\n        i+=1\n    if len(left) == 1:\n        num[i] = left[0]\n        num = num[:i]+right+num[i+1:]\n    else:\n        num = num[:i]+right+num[i+1:]\n    return num\ndef heap_sort_top_to_bottom_in_place(num):\n    if len(num) == 0:\n        return None\n    if len(num) == 1:\n        return num\n    n = len"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    for i in range(n):\n        s = rotate(s)\n    return sum(1 for j in s if j == '1')\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == \"\": return 0\n    n = n % len(s)\n    if n == 0: return 1\n    if len(s) == 1: return 0\n    if s[:2] == '10':\n        return odd_Equivalent(s[1:],n-1) + odd_Equivalent(s[1:],n)\n    else:\n        return odd_Equivalent(s[1:],n)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    from math import ceil\n    from itertools import groupby\n    b = []\n    s = [int(x) for x in s]\n    for i in range(len(s)):\n        b.append(s[(i+n)%len(s)])\n    c = [len(list(v)) for k,v in groupby(b)]\n    c = sum(c)\n    print(c)\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n < 0:\n        return\n    else:\n        for i in range(n):\n            temp = s[1:] + s[0]\n            print temp\n        odd_Equivalent(temp, n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(len(s)):\n        tmp = int(s[i:]+s[:i],2)\n        if tmp%n==1:\n            odd_count+=1\n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def Odd_Equivalent(s):\n        n = len(s)\n        j = len(s)\n        count = 0\n        if n == 0:\n            return 0\n        elif n == 1:\n            if s[0] == '0':\n                return 0\n            else:\n                return 1\n        else:\n            while j > 0:\n                j = j - 1\n                if j < n:\n                    if s[j] == '1':\n                        count = count + 1\n                    elif s[j] == '0':\n                        count = count\n                elif j == n:\n                    if s[j] == '0':\n                        count = count + 1\n                    elif s[j] == '1':\n                        count = count\n            return count\n    def odd_Equivalent_Rev(s):\n        n = len(s)\n        j = len(s)\n        count = 0\n        if n == 0:\n            return 0\n        elif n == 1:\n            if s[0] == '0':\n                return 0\n            else:\n                return 1\n        else:\n            while j > 0:\n                j = j - 1\n                if j < n:\n                    if s[j] == '0':\n                        count = count + 1\n                    elif s[j] == '1':\n                        count = count\n                elif j == n:\n                    if s[j] == '0':\n                        count = count + 1\n                    elif s[j] == '1':\n                        count = count\n            return count\n    if n == 0:\n        return 0\n    elif n == 1:\n        if s[0] == '0':\n            return 0\n        else:\n            return 1\n    else:\n        count = 0\n        if n%2!= 0:\n            for i in range(0,n):\n                j = odd_Equivalent_Rev(s)\n                if j%2!= 0:\n                    count = count + 1\n        else:\n            for i in range(0,n):\n                j = odd_Equivalent(s)\n                if j%2!= 0:\n                    count = count + 1\n        return count\ndef even_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    def even_Equivalent_Rev(s):\n        n = len(s)\n        j = len(s)\n        count = 0\n        if n == 0:\n            return 0\n        elif n == 1:\n            if s[0] == '0':\n                return 0\n            else:\n                return 1\n        else:\n            while j > 0:\n                j = j - 1\n                if j < n:\n                    if s[j] == '0':\n                        count = count + 1\n                    elif s[j] == '1':\n                        count = count\n                elif j == n:\n                    if s[j] == '0':\n                        count = count + 1\n                    elif s[j] == '1':\n                        count = count\n            return count\n    def even_Equivalent(s):\n        n = len(s)\n        j = len(s)\n        count = 0\n        if n == 0:\n            return 0\n        elif n == 1:\n            if s[0] == '0':\n                return 0\n            else:\n                return 1\n        else:\n            while j > 0:\n                j = j - 1\n                if j < n:\n                    if s[j] == '0':\n                        count = count + 1\n                    elif s[j] == '1':\n                        count = count\n                elif j == n:\n                    if s[j] == '0':\n                        count = count + 1\n                    elif s[j] == '1':\n                        count = count\n            return count\n    if n == 0:\n        return 0\n    elif n == 1:\n        if s[0] == '0':\n            return 0\n        else:\n            return 1\n    else:\n        count = 0\n        if n%2!= 0:\n            for i in range(0,n):\n                j = even_Equivalent_Rev(s)\n                if j%2 == 0:\n                    count = count + 1\n        else:\n            for i in range(0,n):\n                j = even_Equivalent(s)\n                if j%2 == 0:\n                    count = count + 1\n        return count\ndef prime_digit(n):\n    '''\n    Write a python function to find the number of prime numbers upto n.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        if n%2 == 0:\n            return 0\n        else:\n            count = 0\n            for i in range(3,n+1):\n                if i%2 == 1:\n                    if i%3!= 1:\n                        if i%3!= 2:\n                            if i%5!= 1:\n                                if i%5!= 2:\n                                    if i%7!= 1:\n                                        if i%7!= 2:\n                                            if i%11!= 1:\n                                                if i%11!= 2:\n                                                    if i%13!= 1:\n                                                        if i%13!= 2:\n                                                            count = count + 1\n            return count\ndef letter_digit(s):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i].isdigit():\n            count = count + 1\n    return count\ndef count_numbers(s,n):\n    '''\n    Write a python function to find the number of strings with n distinct characters in the given string.\n    '''\n    n = int(n)\n    s = s\n    count = 0\n    if n == 0:\n        return 0\n    else:\n        for i in range(0,n):\n            j = len(s)\n            count = count + 1\n            while j > 0:\n                j = j - 1\n                if j < len(s):\n                    if s[j].isdigit():\n                        if s[j] == s[j+1]:\n                            count = count\n                        else:\n                            count = count + 1\n                elif j == 0:\n                    if s[j].isdigit():\n                        if s[j] == s[j+1]:\n                            count = count\n                        else:\n                            count = count + 1\n        return count\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef arithmetic_series(n,a,b):\n    '''\n    Write a python function to find the arithmetic series upto n given the first and last terms of the series.\n    '''\n    a = int(a)\n    b = int(b)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return b\n    else:\n        return b + (a-b)*arithmetic_series(n-1,a,b)/n\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth number of the fibonacci sequence.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef count_vowels(s):\n    '''\n    Write a python function to count the vowels in the given string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            count = count + 1\n    return count\ndef substrings(s):\n    '''\n    Write a python function to find the substrings of a string in lexicographic order.\n    '''\n    n = len(s)\n    if n == 0:"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    length = len(s)\n    output = ''\n    for i in range(0,n):\n        output = output + s[length - i - 1]\n    return output\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    num_of_rotations = n%len(s)\n    \n    if num_of_rotations == 0:\n        return \"The binary string is not rotated\"\n    else:\n        return len(s) - num_of_rotations\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Counting the number of binary strings with the given number of characters\n    num_of_strings = bin(n).count(\"1\")\n    total = num_of_strings\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string = s\n    i = 0\n    count = 0\n    while i < n:\n        a = string[1:]\n        a = a+string[0]\n        string = a\n        i+=1\n        \n    for i in string:\n        if int(i)%2!= 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def _common_in_nested_lists(nestedlist, common_set):\n        if len(nestedlist) == 0:\n            return common_set\n        if len(nestedlist) == 1:\n            return _common_in_nested_lists(nestedlist[0], set(nestedlist[0]))\n        else:\n            return _common_in_nested_lists(nestedlist[1:], set(nestedlist[0]).intersection(_common_in_nested_lists(nestedlist[1:], set())))\n    return _common_in_nested_lists(nestedlist, set())\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #return \n    nestedlist = [element for sublist in nestedlist for element in sublist]\n    return set(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # def common_in_nested_lists(nestedlist):\n    #     for i in nestedlist:\n    #         for j in i:\n    #             if i.count(j) > 1:\n    #                 return j\n    #     return None\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) < 2:\n        return None\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not any(nestedlist):\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    return set(nestedlist[0]).intersection(*nestedlist[1:])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #for every element in the list\n    for sublist in nestedlist:\n        #if element in sublist is in the same position in the list\n        for index, element in enumerate(sublist):\n            if element in sublist:\n                #then we need to add that element to the result\n                result.append(element)\n                #we don't need to check the rest of the elements\n                break\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_items = []\n    for outer_list in nestedlist:\n        for inner_list in outer_list:\n            if inner_list in common_items:\n                pass\n            else:\n                common_items.append(inner_list)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set(reduce(lambda x, y: x + y, nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist:\n        if type(item) == list:\n            for item2 in item:\n                if item2 not in common:\n                    common.append(item2)\n        elif type(item) == str:\n            if item not in common:\n                common.append(item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return set()\n    elif len(nestedlist) == 1:\n        return set(nestedlist[0])\n    else:\n        small_result = common_in_nested_lists(nestedlist[1:])\n        return small_result.intersection(set(nestedlist[0]))\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    for char in text:\n        if not char.isdigit():\n            return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(x) == 0 for x in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for l in list1:\n        if l:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i.keys() == []:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list = []\n    for i in list1:\n        if bool(i) == False:\n            empty_list.append(True)\n        else:\n            empty_list.append(False)\n    if False in empty_list:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = 0\n    for item in list1:\n        if item:\n            flag = 1\n    if flag == 1:\n        return False\n    else:\n        return True\n    \ndef populate_dit(keys, vals):\n    '''\n    Write a function to populate a dictionary with the given keys and values.\n    '''\n    dict1 = {}\n    for key, val in zip(keys, vals):\n        dict1[key] = val\n    return dict1\n    \ndef get_most_common(lst):\n    '''\n    Write a function to get the most common element in a list.\n    '''\n    from collections import Counter\n    return Counter(lst).most_common(1)[0][0]\n    \ndef merge_dicts(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into one\n    '''\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\n    \ndef find_duplicate_elems(lst):\n    '''\n    Write a function to find duplicate elements in a list.\n    '''\n    from collections import Counter\n    counts = Counter(lst)\n    duplicate = [item for item, count in counts.items() if count > 1]\n    return duplicate\n    \ndef find_duplicate_elem_vals(dict1):\n    '''\n    Write a function to find duplicate elements in a dictionary.\n    '''\n    from collections import Counter\n    counts = Counter(dict1.values())\n    duplicate = [val for val, count in counts.items() if count > 1]\n    return duplicate\n    \ndef get_duplicate_items(lst):\n    '''\n    Write a function to find the items with duplicate values in a list\n    '''\n    from collections import Counter\n    counts = Counter(lst)\n    duplicate = {key:val for key, val in counts.items() if val > 1}\n    return duplicate\n    \ndef find_top_n(lst, n):\n    '''\n    Write a function to find the top n items in a list, sorted in descending order.\n    '''\n    return lst[-n:]\n    \ndef get_missing_elem(lst):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    from collections import Counter\n    counts = Counter(lst)\n    unique = set(lst)\n    for item in unique:\n        if counts[item] == 1:\n            return item\n    return None\n    \ndef get_missing_elem_2(lst):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    if not lst:\n        return 1\n    else:\n        length = len(lst)\n        n = length + 1\n        for i in range(n):\n            if i not in lst:\n                return i\n    \ndef get_missing_elem_3(lst):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    if not lst:\n        return 1\n    else:\n        for item in lst:\n            val = abs(item)\n            if val not in lst:\n                return val\n    \ndef get_missing_elem_4(lst):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    if not lst:\n        return 1\n    else:\n        res = list(range(1, max(lst) + 2))\n        return set(res) - set(lst)\n    \ndef get_missing_elem_5(lst):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    if not lst:\n        return 1\n    else:\n        res = list(range(1, max(lst) + 2))\n        return sorted(res) - sorted(lst)\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \ndef is_anagram_2(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        if str1 == str2:\n            return True\n        else:\n            return False\n    \ndef is_anagram_3(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return False\n        return True\n    \ndef is_anagram_4(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        counts = {}\n        for i in str1:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n        for i in str2:\n            if i in counts:\n                counts[i] -= 1\n            else:\n                counts[i] = 1\n        for i in counts:\n            if counts[i]!= 0:\n                return False\n        return True\n    \ndef is_anagram_5(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return False\n        return True\n    \ndef is_anagram_6(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        if str1 == str2:\n            return True\n        else:\n            return False\n    \ndef is_anagram_7(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        str1 = ''.join(str1)\n        str2 = ''.join(str2)\n        if str1 == str2:\n            return True\n        else:\n            return False\n    \ndef is_anagram_8(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        str1 = ''.join(str1)\n        str2 = ''.join(str2)\n        if str1 == str2:\n            return True\n        else:\n            return False\n    \ndef is_anagram_9(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        str1 = ''.join(str1)\n        str2 = ''.join(str2)\n        if str1 == str2:\n            return True\n        else"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    a = 0\n    for n in nums:\n        a = a * 10 + n\n    return a\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([(x ** 2) for x in nums])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(n) for n in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res *= 10\n        res += num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res = res*10 + i\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for item in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for a_list in test_list:\n        for i, x in enumerate(a_list):\n            try:\n                a_list[i] = float(x)\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        for n in range(0, len(test_list)):\n            for m in range(0, len(test_list[n])):\n                if type(test_list[n][m]) == type(1) or type(test_list[n][m]) == type(1.0):\n                    test_list[n][m] = float(test_list[n][m])\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(x) for x in test_list]\n    except ValueError:\n        return 0.0\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for element in test_list:\n        try:\n            result.append(float(element))\n        except ValueError:\n            pass\n    return result\n    \ndef print_data_stats(data):\n    '''\n    Write a function to print the minimum, maximum, average, and standard deviation of a given list of numbers.\n    '''\n    data = list_to_float(data)\n    print 'Min:', min(data)\n    print 'Max:', max(data)\n    print 'Avg:', sum(data) / float(len(data))\n    print 'Std:', statistics.stdev(data)\n    \ndef print_stat_by_comparison(data1, data2):\n    '''\n    Write a function to print the minimum, maximum, average, and standard deviation of a list of lists, where each sublist contains numbers of different sizes.\n    For example, the list [2, 3, 4, 5, 6] would have the following statistics:\n    Min: 2\n    Max: 6\n    Avg: 4.5\n    Std: 1.777\n    '''\n    data1 = list_to_float(data1)\n    data2 = list_to_float(data2)\n    if len(data1)!= len(data2):\n        return 'Lists are not the same length.'\n    print 'Min:', min(data1), 'Min:', min(data2)\n    print 'Max:', max(data1), 'Max:', max(data2)\n    print 'Avg:', sum(data1) / float(len(data1)), 'Avg:', sum(data2) / float(len(data2))\n    print 'Std:', statistics.stdev(data1), 'Std:', statistics.stdev(data2"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(i) for i in test_list]\n    except:\n        return [float('nan') for i in test_list]\n    \ndef fun_average(x):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    try:\n        return np.mean(x)\n    except:\n        return float('nan')\n    \ndef fun_pulse_location(test_list, index):\n    '''\n    Write a function to compute the location of the pulse in the trace.\n    '''\n    if test_list[index] < test_list[index+1]:\n        return True\n    else:\n        return False\n    \ndef fun_pulse_amp(test_list, index):\n    '''\n    Write a function to compute the pulse amplitude in the trace.\n    '''\n    return test_list[index+1] - test_list[index]\n    \ndef fun_pulse_start(test_list, index):\n    '''\n    Write a function to compute the start time of the pulse in the trace.\n    '''\n    return test_list[index]\n    \ndef fun_pulse_end(test_list, index):\n    '''\n    Write a function to compute the end time of the pulse in the trace.\n    '''\n    return test_list[index+1]\n    \ndef fun_pulse_duration(test_list, index):\n    '''\n    Write a function to compute the duration of the pulse in the trace.\n    '''\n    return fun_pulse_end(test_list, index) - fun_pulse_start(test_list, index)\n    \ndef fun_pulse_angle(test_list, index):\n    '''\n    Write a function to compute the angle of the pulse in the trace.\n    '''\n    return fun_pulse_end(test_list, index) - fun_pulse_start(test_list, index)\n    \ndef fun_total_pulse_angle(test_list, index):\n    '''\n    Write a function to compute the total angle of the pulse in the trace.\n    '''\n    return fun_pulse_angle(test_list, index) + fun_pulse_duration(test_list, index)\n    \ndef fun_average_pulse_angle(test_list, index):\n    '''\n    Write a function to compute the average angle of the pulse in the trace.\n    '''\n    return fun_total_pulse_angle(test_list, index)/fun_pulse_duration(test_list, index)\n    \ndef fun_average_pulse_angle_in_degree(test_list, index):\n    '''\n    Write a function to compute the average angle of the pulse in the trace in degree.\n    '''\n    return fun_average_pulse_angle(test_list, index)*180/math.pi\n    \ndef fun_std_pulse_angle(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the angle of the pulse in the trace.\n    '''\n    return np.std(test_list[index-10:index+10])\n    \ndef fun_std_pulse_angle_in_degree(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the angle of the pulse in the trace in degree.\n    '''\n    return fun_std_pulse_angle(test_list, index)*180/math.pi\n    \ndef fun_average_pulse_freq(test_list, index):\n    '''\n    Write a function to compute the average of the frequency of the pulse in the trace.\n    '''\n    return fun_average(test_list[index-20:index+20])\n    \ndef fun_std_pulse_freq(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the frequency of the pulse in the trace.\n    '''\n    return np.std(test_list[index-20:index+20])\n    \ndef fun_std_pulse_freq_in_degree(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the frequency of the pulse in the trace in degree.\n    '''\n    return fun_std_pulse_freq(test_list, index)*180/math.pi\n    \ndef fun_average_pulse_freq_in_Hz(test_list, index):\n    '''\n    Write a function to compute the average of the frequency of the pulse in the trace in Hz.\n    '''\n    return fun_average(test_list[index-20:index+20])*(1/10)\n    \ndef fun_std_pulse_freq_in_Hz(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the frequency of the pulse in the trace in Hz.\n    '''\n    return fun_std_pulse_freq(test_list, index)*(1/10)\n    \ndef fun_std_pulse_freq_in_degree_in_Hz(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the frequency of the pulse in the trace in degree in Hz.\n    '''\n    return fun_std_pulse_freq_in_Hz(test_list, index)*(1/10)\n    \ndef fun_average_pulse_freq_in_Hz_in_Hz(test_list, index):\n    '''\n    Write a function to compute the average of the frequency of the pulse in the trace in Hz in Hz.\n    '''\n    return fun_average_pulse_freq(test_list, index)*(1/10)\n    \ndef fun_std_pulse_freq_in_Hz_in_Hz(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the frequency of the pulse in the trace in Hz in Hz.\n    '''\n    return fun_std_pulse_freq_in_Hz(test_list, index)*(1/10)\n    \ndef fun_std_pulse_freq_in_degree_in_Hz_in_Hz(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the frequency of the pulse in the trace in degree in Hz in Hz.\n    '''\n    return fun_std_pulse_freq_in_Hz_in_Hz(test_list, index)*(1/10)\n    \ndef fun_average_pulse_freq_in_Hz_in_Hz_in_Hz(test_list, index):\n    '''\n    Write a function to compute the average of the frequency of the pulse in the trace in Hz in Hz in Hz.\n    '''\n    return fun_average_pulse_freq_in_Hz(test_list, index)*(1/10)\n    \ndef fun_pulse_freq_in_Hz_in_Hz_in_Hz(test_list, index):\n    '''\n    Write a function to compute the frequency of the pulse in the trace in Hz in Hz in Hz.\n    '''\n    return fun_average_pulse_freq_in_Hz_in_Hz(test_list, index)*(1/10)\n    \ndef fun_std_pulse_freq_in_Hz_in_Hz_in_Hz(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the frequency of the pulse in the trace in Hz in Hz in Hz.\n    '''\n    return fun_std_pulse_freq_in_Hz_in_Hz(test_list, index)*(1/10)\n    \ndef fun_std_pulse_freq_in_degree_in_Hz_in_Hz_in_Hz(test_list, index):\n    '''\n    Write a function to compute the standard deviation of the frequency of the pulse in the trace in degree in Hz in Hz in Hz.\n    '''\n    return fun_std_pulse_freq_in_Hz_in_Hz(test_list, index)*(1/10)\n    \ndef fun_total_pulse_freq(test_list, index):\n    '''\n    Write a function to compute the total frequency of the pulse in the trace.\n    '''\n    return fun_average_pulse_freq(test_list, index) + fu"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for i in xrange(len(sublist)):\n            try:\n                sublist[i] = float(sublist[i])\n            except ValueError:\n                sublist[i] = float('NaN')\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # your code here\n    result = string.split(\" \")\n    return result\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split(' ')\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split(' ')\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n    start, end = 0, len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[mid]:\n                count += 1\n        if count > mid:\n            end = mid\n        else:\n            start = mid + 1\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr)//2\n    if arr[mid] == arr[mid+1]:\n        return search(arr[mid+1:])\n    elif arr[mid] == arr[mid-1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    return helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    s = set(arr)\n    for i in range(1,len(s)):\n        if s[i] == i:\n            continue\n        return s[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = [1, 2, 4, 5, 6, 6, 7, 7, 7, 7]\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n    n = len(arr)\n    if n == 0:\n        return None\n    \n    if n == 1:\n        return arr[0]\n    \n    mid = n//2\n    \n    if mid == 0:\n        return None\n    \n    if arr[mid] == arr[mid-1]:\n        return search(arr[0:mid])\n    \n    elif arr[mid] == arr[mid+1]:\n        return search(arr[mid+1:n])\n    \n    else:\n        return arr[mid]\n    \ndef search_recursive(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n    \n    if len(arr) == 0:\n        return None\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == arr[mid-1]:\n        return search_recursive(arr[0:mid])\n    \n    elif arr[mid] == arr[mid+1]:\n        return search_recursive(arr[mid+1:n])\n    \n    else:\n        return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    elif arr[0]!= arr[1]:\n        return arr[0]\n    else:\n        return search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    for i in xrange(length):\n        if arr[i] == arr[arr[i]-1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def search_once(arr):\n        length = len(arr)\n        if length == 0:\n            return None\n        elif length == 1:\n            return arr[0]\n        elif arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            left = search_once(arr[1:])\n            return left if left is not None else search_once(arr[2:])\n    return search_once(arr)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(map(lambda x:max(x)*min(x),list1))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1=0\n    max2=0\n    for i in list1:\n        temp1=i[0]*i[1]\n        temp2=i[1]*i[0]\n        if temp1>max1:\n            max1=temp1\n        if temp2>max2:\n            max2=temp2\n    return max1,max2\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            list2.append(list1[i][0] * list1[i][1])\n    print list2\n    return max(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    max_product = [list1[0]*list1[1]]\n    for i in range(1, len(list1), 2):\n        max_product.append(max(list1[i-1]*list1[i], list1[i]*list1[i-1]))\n    return max(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #[(1, -1), (2, -2), (3, -3)]\n    #[(2, -2), (3, -3), (4, -4)]\n    #[(3, -3), (4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[(4, -4)]\n    #[("
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = [(-100, -100), (100, 100), (100, 0), (-100, 100)]\n    list2 = [(-100, -100), (100, 100), (100, 0), (-100, 100)]\n    return max(max(abs(a*b) for a,b in zip(list1, list2)))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product_list = []\n    for pair in list1:\n        product_list.append(abs(pair[0]*pair[1]))\n    return max(product_list)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_tuple = (0,0)\n    for tuple1 in list1:\n        for tuple2 in list1:\n            product = tuple1[0]*tuple2[1]\n            if product > max_tuple[0]:\n                max_tuple = (product, tuple1[0], tuple2[1])\n    return max_tuple\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [1]\n    for number in range(2, limit):\n        amicable_numbers.append(number)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2,limit):\n        divisors_sum = sum(set([x for x in range(1,i) if i % x == 0]))\n        if divisors_sum == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if is_amicable_number(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = sum([num for num in range(1, limit) if is_amicable(num)])\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and i!= a:\n            amicable_numbers.append(i)\n            amicable_numbers.append(b)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(2, limit):\n        amicable_numbers.append(number)\n    for number in range(2, limit):\n        if number not in amicable_numbers:\n            continue\n        if number == sum(divisors(number)):\n            amicable_numbers.append(number)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for num in range(1, limit):\n        s = 0\n        for i in range(1, num):\n            if num % i == 0:\n                s += i\n        if s == num:\n            result += num\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    sum_of_amicable_numbers = 0\n    for num in range(1, limit):\n        num2 = num\n        sum_of_num = 0\n        while num2 > 0:\n            digit = num2 % 10\n            sum_of_num = sum_of_num + digit\n            num2 = num2 // 10\n        if num == sum_of_num and num!= num2 and num!= sum_of_num:\n            amicable_numbers.append(num)\n            amicable_numbers.append(sum_of_num)\n    sum_of_amicable_numbers = sum(amicable_numbers)\n    return sum_of_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        is_amicable = True\n        if num % 2 == 0:\n            if num/2 in sieve_of_eratosthenes(num/2):\n                amicable_sum += num\n                is_amicable = False\n        if num % 3 == 0:\n            if num/3 in sieve_of_eratosthenes(num/3):\n                amicable_sum += num\n                is_amicable = False\n        if num % 5 == 0:\n            if num/5 in sieve_of_eratosthenes(num/5):\n                amicable_sum += num\n                is_amicable = False\n        if is_amicable:\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a,b = complex(a), complex(b)\n    return cmath.phase(a-b)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    s = a + b*1j\n    print(s)\n    return cmath.phase(s)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.atan2(b.imag,b.real)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return atan2(a.imag,a.real)\ndef map_complex(complex_list, func):\n    '''\n    Write a function to map a list of complex numbers onto a new list.\n    '''\n    return [func(a) for a in complex_list]\ndef map_complex_1d(complex_list, func):\n    '''\n    Write a function to map a list of complex numbers onto a new list, one element per line.\n    '''\n    return [func(complex_list[i]) for i in range(len(complex_list))]\ndef list_complex_to_string(complex_list):\n    '''\n    Write a function to map a list of complex numbers onto a new list, one element per line, using string formatting.\n    '''\n    return [('{0:.2f}+{1:.2f}j').format(a.real,a.imag) for a in complex_list]\ndef check_complex(complex_list,func):\n    '''\n    Write a function to check the validity of a list of complex numbers.\n    '''\n    return all([func(a) for a in complex_list])\ndef check_complex_1d(complex_list,func):\n    '''\n    Write a function to check the validity of a list of complex numbers, one element per line.\n    '''\n    return all([func(complex_list[i]) for i in range(len(complex_list))])\ndef check_complex_list_length(complex_list, n):\n    '''\n    Write a function to check the validity of a list of complex numbers.\n    '''\n    return len(complex_list)==n\ndef check_complex_list_length_1d(complex_list, n):\n    '''\n    Write a function to check the validity of a list of complex numbers, one element per line.\n    '''\n    return len(complex_list)==n\ndef parse_complex_list(complex_list, func):\n    '''\n    Write a function to parse a list of complex numbers into a list of tuples, where each tuple is a complex number and the angle to that number.\n    '''\n    return [tuple([func(complex_list[i]), angle_complex(complex_list[i],complex_list[j])]) for i in range(len(complex_list)) for j in range(len(complex_list)) if i!= j]\ndef parse_complex_list_1d(complex_list, func):\n    '''\n    Write a function to parse a list of complex numbers into a list of tuples, where each tuple is a complex number and the angle to that number.\n    '''\n    return [tuple([func(complex_list[i]), angle_complex(complex_list[i],complex_list[j])]) for i in range(len(complex_list)) for j in range(len(complex_list)) if i!= j]\ndef to_complex(a):\n    '''\n    Write a function to convert a single element to a complex number.\n    '''\n    return complex(a)\ndef to_complex_list(complex_list):\n    '''\n    Write a function to convert a list of complex numbers to a list of complex numbers.\n    '''\n    return [to_complex(a) for a in complex_list]\ndef to_complex_list_1d(complex_list):\n    '''\n    Write a function to convert a list of complex numbers to a list of complex numbers, one element per line.\n    '''\n    return [to_complex(complex_list[i]) for i in range(len(complex_list))]\ndef to_complex_list_from_1d(complex_list):\n    '''\n    Write a function to convert a list of complex numbers to a list of complex numbers, one element per line.\n    '''\n    return [to_complex(complex_list[i]) for i in range(len(complex_list))]\ndef from_complex(a):\n    '''\n    Write a function to convert a complex number to a list of complex numbers.\n    '''\n    return (a.real,a.imag)\ndef from_complex_list(complex_list):\n    '''\n    Write a function to convert a list of complex numbers to a list of complex numbers.\n    '''\n    return [from_complex(a) for a in complex_list]\ndef from_complex_list_1d(complex_list):\n    '''\n    Write a function to convert a list of complex numbers to a list of complex numbers, one element per line.\n    '''\n    return [from_complex(complex_list[i]) for i in range(len(complex_list))]\ndef from_complex_list_1d_to_complex(complex_list):\n    '''\n    Write a function to convert a list of complex numbers to a list of complex numbers, one element per line.\n    '''\n    return [from_complex(complex_list[i]) for i in range(len(complex_list))]\ndef sum_complex(complex_list):\n    '''\n    Write a function to sum a list of complex numbers.\n    '''\n    return sum([a for a in complex_list])\ndef sum_complex_1d(complex_list):\n    '''\n    Write a function to sum a list of complex numbers, one element per line.\n    '''\n    return sum([complex_list[i] for i in range(len(complex_list))])\ndef sum_complex_list_to_string(complex_list):\n    '''\n    Write a function to sum a list of complex numbers, one element per line, using string formatting.\n    '''\n    return '+'.join([('{0:.2f}+{1:.2f}j').format(a.real,a.imag) for a in complex_list])\ndef product_complex(complex_list):\n    '''\n    Write a function to multiply a list of complex numbers.\n    '''\n    return reduce(lambda x,y: x*y, [a for a in complex_list])\ndef product_complex_1d(complex_list):\n    '''\n    Write a function to multiply a list of complex numbers, one element per line.\n    '''\n    return reduce(lambda x,y: x*y, [complex_list[i] for i in range(len(complex_list))])\ndef product_complex_list_to_string(complex_list):\n    '''\n    Write a function to multiply a list of complex numbers, one element per line, using string formatting.\n    '''\n    return '*'.join([('{0:.2f}+{1:.2f}j').format(a.real,a.imag) for a in complex_list])\ndef conjugate_complex(complex_list):\n    '''\n    Write a function to conjugate a list of complex numbers.\n    '''\n    return [a.conjugate() for a in complex_list]\ndef conjugate_complex_1d(complex_list):\n    '''\n    Write a function to conjugate a list of complex numbers, one element per line.\n    '''\n    return [complex_list[i].conjugate() for i in range(len(complex_list))]\ndef conjugate_complex_list_to_string(complex_list):\n    '''\n    Write a function to conjugate a list of complex numbers, one element per line, using string formatting.\n    '''\n    return ''.join([('{0:.2f}+{1:.2f}j').format(a.real,a.imag) for a in complex_list])\ndef is_complex_1d(complex_list):\n    '''\n    Write a function to check the validity of a list of complex numbers, one element per line.\n    '''\n    return all([a.imag==0 for a in complex_list])\ndef is_complex_list_length(complex_list, n):\n    '''\n    Write a function to check the validity of a list of complex numbers.\n    '''\n    return len(complex_list)==n\ndef is_complex_list_length_1d(complex_list, n):\n    '''\n    Write a function to check the validity of a list of complex numbers, one element per line.\n    '''\n    return len(complex_list)==n\ndef to_complex_1d(a):\n    '''\n    Write a function to convert a single element to a complex number, one element per line.\n    '''\n    return comple"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real > 0:\n        if b.real > 0:\n            #print 'true'\n            if a.imag > 0:\n                #print 'true1'\n                return cmath.acos(a.real/b.real)\n            else:\n                #print 'true2'\n                return cmath.acos(a.real/b.real) + cmath.pi\n        else:\n            #print 'true3'\n            if a.imag > 0:\n                #print 'true4'\n                return cmath.acos(a.real/b.real) + cmath.pi\n            else:\n                #print 'true5'\n                return cmath.acos(a.real/b.real) + cmath.pi\n    else:\n        if b.real > 0:\n            #print 'false1'\n            if a.imag > 0:\n                #print 'false2'\n                return cmath.acos(a.real/b.real) + cmath.pi\n            else:\n                #print 'false3'\n                return cmath.acos(a.real/b.real) + cmath.pi\n        else:\n            #print 'false4'\n            if a.imag > 0:\n                #print 'false5'\n                return cmath.acos(a.real/b.real) + cmath.pi\n            else:\n                #print 'false6'\n                return cmath.acos(a.real/b.real) + cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #cmath.polar(a)\n    #cmath.polar(b)\n    #cmath.phase(a)\n    #cmath.phase(b)\n    #cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    #c = cmath.polar(complex(a,b))\n    #c = cmath.phase(a+b*1j)\n    #c = cmath.phase(complex(a,b))\n    if c < 0:\n        return 360 + c\n    return c\n    #a = cmath.polar(a)\n    #b = cmath.polar(b)\n    #c = cmath.phase(complex(a,b))\n    #return c\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag == 0 and b.imag == 0:\n        return cmath.phase(a+b*1j)\n    elif a.imag == 0:\n        return cmath.phase(b)\n    elif b.imag == 0:\n        return cmath.phase(a)\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real_part = a.real\n    imaginary_part = a.imag\n    complex_number = complex(real_part,imaginary_part)\n    angle = cmath.phase(complex_number)\n    return angle\ndef find_nearest_greater_than_zero(num):\n    '''\n    Write a function to find the nearest greater number in the list\n    '''\n    larger_than_zero = []\n    for i in range(len(num)):\n        if num[i] > 0:\n            larger_than_zero.append(num[i])\n    return min(larger_than_zero)\ndef find_nearest_greater_than_zero_list(list):\n    '''\n    Write a function to find the nearest greater number in the list\n    '''\n    larger_than_zero = []\n    for i in range(len(list)):\n        if list[i] > 0:\n            larger_than_zero.append(list[i])\n    return min(larger_than_zero)\ndef find_nearest_greater_than_zero_dict(dict):\n    '''\n    Write a function to find the nearest greater number in the list\n    '''\n    larger_than_zero = []\n    for i in range(len(dict)):\n        if dict[i] > 0:\n            larger_than_zero.append(dict[i])\n    return min(larger_than_zero)\ndef get_digit(num):\n    '''\n    Write a function to get the digit of a number\n    '''\n    length = len(str(num))\n    for i in range(length):\n        yield str(num)[i]\ndef digit_to_string(num):\n    '''\n    Write a function to convert a digit to string\n    '''\n    return str(num)\ndef merge_sort_string(str_list):\n    '''\n    Write a function to sort a list of strings in alphabetical order\n    '''\n    return sorted(str_list)\ndef merge_sort_integer(num_list):\n    '''\n    Write a function to sort a list of integers in ascending order\n    '''\n    return sorted(num_list)\ndef reverse_list(list):\n    '''\n    Write a function to reverse a list\n    '''\n    return list[::-1]\ndef sum_of_list(list):\n    '''\n    Write a function to calculate the sum of a list\n    '''\n    return sum(list)\ndef remove_duplicates(list):\n    '''\n    Write a function to remove duplicates from a list\n    '''\n    return list(set(list))\ndef all_equal(list):\n    '''\n    Write a function to check whether all items in a list are equal\n    '''\n    return len(set(list)) == 1\ndef digits_of_number(num):\n    '''\n    Write a function to get the digits of a number\n    '''\n    length = len(str(num))\n    for i in range(length):\n        yield str(num)[i]\ndef digits_to_number(list):\n    '''\n    Write a function to convert a list to a number\n    '''\n    return int(''.join(map(str,list)))\ndef find_max_min(list):\n    '''\n    Write a function to find the max and min number in a list\n    '''\n    max = 0\n    min = 0\n    for i in range(len(list)):\n        if list[i] > max:\n            max = list[i]\n        if list[i] < min:\n            min = list[i]\n    return max,min\ndef find_max_min_list(list):\n    '''\n    Write a function to find the max and min number in a list\n    '''\n    max = 0\n    min = 0\n    for i in range(len(list)):\n        if list[i] > max:\n            max = list[i]\n        if list[i] < min:\n            min = list[i]\n    return [max,min]\ndef count_occurrences(list,number):\n    '''\n    Write a function to count the occurrences of a number in a list\n    '''\n    return list.count(number)\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string\n    '''\n    return string[::-1]\ndef make_dict_from_list_key_value(list):\n    '''\n    Write a function to convert a list of tuples to a dictionary\n    '''\n    d = {}\n    for i in range(len(list)):\n        d[list[i][0]] = list[i][1]\n    return d\ndef get_value_from_dict_by_key(dict,key):\n    '''\n    Write a function to get the value from a dictionary based on the key\n    '''\n    return dict[key]\ndef get_value_from_dict_by_key_list(dict,key):\n    '''\n    Write a function to get the value from a dictionary based on the key\n    '''\n    return dict.get(key)\ndef get_max_value_from_dict(dict):\n    '''\n    Write a function to get the max value from a dictionary\n    '''\n    return max(dict.values())\ndef get_max_value_from_dict_list(list):\n    '''\n    Write a function to get the max value from a dictionary\n    '''\n    return max(list)\ndef get_max_value_from_dict_tuple(tuple):\n    '''\n    Write a function to get the max value from a dictionary\n    '''\n    return max(tuple)\ndef get_min_value_from_dict(dict):\n    '''\n    Write a function to get the min value from a dictionary\n    '''\n    return min(dict.values())\ndef get_min_value_from_dict_list(list):\n    '''\n    Write a function to get the min value from a dictionary\n    '''\n    return min(list)\ndef get_min_value_from_dict_tuple(tuple):\n    '''\n    Write a function to get the min value from a dictionary\n    '''\n    return min(tuple)\ndef add_list_elements(list):\n    '''\n    Write a function to add elements of two list\n    '''\n    return list + list\ndef add_dict_elements(dict):\n    '''\n    Write a function to add elements of two dictionary\n    '''\n    return dict.update(dict)\ndef add_dict_to_dict(dict,dict2):\n    '''\n    Write a function to add elements of two dictionary\n    '''\n    return dict.update(dict2)\ndef get_value_from_dict_by_key_set(dict,key):\n    '''\n    Write a function to get the value from a dictionary based on the key\n    '''\n    return set(dict.get(key))\ndef get_value_from_dict_by_key_set_list(dict,key):\n    '''\n    Write a function to get the value from a dictionary based on the key\n    '''\n    return set(dict.get(key))\ndef get_value_from_dict_by_key_set_tuple(dict,key):\n    '''\n    Write a function to get the value from a dictionary based on the key\n    '''\n    return set(dict.get(key))\ndef remove_from_dict_value(dict,value):\n    '''\n    Write a function to remove a value from a dictionary\n    '''\n    return dict.pop(value)\ndef get_key_from_dict_by_value(dict,value):\n    '''\n    Write a function to get the key from a dictionary based on the value\n    '''\n    return [k for k, v in dict.iteritems() if v == value]\ndef get_key_from_dict_by_value_list(dict,value):\n    '''\n    Write a function to get the key from a dictionary based on the value\n    '''\n    return [k for k, v in dict.iteritems() if v == value]\ndef get_key_from_dict_by_value_tuple(dict,value):\n    '''\n    Write a function to get the key from a dictionary based on the value\n    '''\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_of_ones = 0\n    count_of_zeros = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count_of_ones += 1\n        elif string[i] == '0':\n            count_of_zeros += 1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    last = 0\n    res = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            last = i\n        else:\n            res = max(res, i - last)\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # maximum difference\n    max_diff = 0\n    # length of the string\n    length = len(string)\n    # running count\n    count_0 = 0\n    count_1 = 0\n    # sliding window\n    for i in xrange(length):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 > count_1:\n            max_diff = max(max_diff, count_1 - count_0)\n        else:\n            max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_count = max(max_count, count_0 - count_1)\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    d = {}\n    for i in range(len(string)):\n        substr = string[i:i+len(string)]\n        if substr not in d:\n            d[substr] = 0\n        d[substr]+=1\n    length = 0\n    for key in d:\n        if d[key] == len(string):\n            length = max(length, len(key))\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(len(i) for i in re.findall(\"0|1\", string))\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    index = 0\n    num_0 = 0\n    num_1 = 0\n    for i in xrange(len(string)):\n        if string[i] == '0':\n            num_0 += 1\n        else:\n            num_1 += 1\n        if num_0 - num_1 > max_diff:\n            max_diff = num_0 - num_1\n            index = i\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Approach 1:\n    \n    # In Approach 1, we have a set of all sub-strings of the given binary string and for each sub-string we compute the number of zeroes and the number of ones. Then we find the maximum difference between the number of zeroes and number of ones in any sub-string.\n    \n    # Time Complexity: O(n)\n    \n    # Auxiliary Space: O(n)\n    \n    if not string:\n        return 0\n    \n    # If a string is empty, then the difference is zero\n    if len(string) == 1:\n        return 0\n        \n    # Initialize the lengths of the number of zeroes and the number of ones\n    zeroes = 1\n    ones = 1\n    \n    # Initialize the maximum difference\n    max_diff = 1\n    \n    for i in range(1,len(string)):\n        \n        # Determine the number of zeroes and the number of ones\n        # for the current substring\n        if string[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n            \n        # If the number of zeroes is greater than the number of ones, then\n        # the number of zeroes is not the same as the number of ones. \n        # Therefore, we update the maximum difference\n        max_diff = max(max_diff, abs(zeroes-ones))\n    \n    return max_diff\n    \n    # Approach 2:\n    \n    # We can also apply the same algorithm from Approach 1, but we will need a extra hash map to store the number of zeroes and number of ones.\n    \n    # Time Complexity: O(n)\n    \n    # Auxiliary Space: O(n)\n    \n    if not string:\n        return 0\n    \n    # If a string is empty, then the difference is zero\n    if len(string) == 1:\n        return 0\n        \n    # Initialize the lengths of the number of zeroes and the number of ones\n    zeroes = 1\n    ones = 1\n    \n    # Initialize the maximum difference\n    max_diff = 1\n    \n    # Initialize the hash map\n    hash_map = {string[0] : 1}\n    \n    # For the rest of the elements of the string\n    for i in range(1,len(string)):\n        \n        # If the current character is a zero, then increment the number of zeroes\n        if string[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n            \n        # If the number of zeroes is greater than the number of ones, then\n        # the number of zeroes is not the same as the number of ones. \n        # Therefore, we update the maximum difference\n        max_diff = max(max_diff, abs(zeroes-ones))\n        \n        # If the current character is present in the hash map, then we just\n        # increment the counter of the current character\n        if string[i] in hash_map:\n            hash_map[string[i]] += 1\n        else:\n            # If the character is not present in the hash map, then we simply\n            # add it to the hash map\n            hash_map[string[i]] = 1\n    \n    return max_diff\n    \n    # Approach 3:\n    \n    # This approach is similar to Approach 1, but we will use a more efficient approach.\n    \n    # Time Complexity: O(n)\n    \n    # Auxiliary Space: O(1)\n    \n    if not string:\n        return 0\n    \n    # If a string is empty, then the difference is zero\n    if len(string) == 1:\n        return 0\n        \n    # Initialize the lengths of the number of zeroes and the number of ones\n    zeroes = 1\n    ones = 1\n    \n    # Initialize the maximum difference\n    max_diff = 1\n    \n    # Initialize the start index of the zero and the start index of the one\n    start_zero = 0\n    start_one = 0\n    \n    # For the rest of the elements of the string\n    for i in range(1,len(string)):\n        \n        # If the current character is a zero, then increment the number of zeroes\n        if string[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n            \n        # If the number of zeroes is greater than the number of ones, then\n        # the number of zeroes is not the same as the number of ones. \n        # Therefore, we update the maximum difference\n        max_diff = max(max_diff, abs(zeroes-ones))\n        \n        # If the current character is present in the hash map, then we just\n        # increment the counter of the current character\n        if string[i] in hash_map:\n            hash_map[string[i]] += 1\n        else:\n            # If the character is not present in the hash map, then we simply\n            # add it to the hash map\n            hash_map[string[i]] = 1\n        \n        # If the current character is a zero, then we check if it is\n        # the first zero encountered in the string. If it is, then we store\n        # the start index of the zero\n        if string[i] == '0':\n            if start_zero == 0:\n                start_zero = i\n        \n        # If the current character is a one, then we check if it is\n        # the first one encountered in the string. If it is, then we store\n        # the start index of the one\n        if string[i] == '1':\n            if start_one == 0:\n                start_one = i\n    \n    # If the string has a zero at the end, then we update the difference\n    # by subtracting the last zero from the number of ones. \n    if string[-1] == '0':\n        max_diff = max(max_diff, ones - hash_map[string[-1]])\n    \n    # If the string has a one at the end, then we update the difference\n    # by subtracting the last one from the number of zeroes\n    if string[-1] == '1':\n        max_diff = max(max_diff, zeroes - hash_map[string[-1]])\n    \n    # Return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    substring = ''\n    max_length = 0\n    temp = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(1, len(string)): \n        start = i\n        end = i + 1\n        count = 0\n        while (start >= 0) and (end < len(string)):\n            if string[start] == '0': \n                count += 1\n            else: \n                count -= 1\n            if count == 0: \n                length = end - start \n                if length > max_length: \n                    max_length = length\n            start -= 1\n            end += 1\n        start = i - 1\n        end = i\n        count = 0\n        while (start >= 0) and (end < len(string)):\n            if string[start] == '0': \n                count += 1\n            else: \n                count -= 1\n            if count == 0: \n                length = end - start\n                if length > max_length: \n                    max_length = length\n            start -= 1\n            end += 1\n    return max_length\n    \n    \ndef is_perfect_square(number): \n    '''\n    Write a function that returns True if the given number is a perfect square. Otherwise, it returns False. \n    '''\n    if number < 1: \n        return False\n    left = 1\n    right = number\n    while (left <= right): \n        mid = left + (right - left) / 2\n        if mid * mid == number: \n            return True\n        elif mid * mid > number: \n            right = mid - 1\n        else: \n            left = mid + 1\n    return False\n    \ndef count_binary_substrings(string): \n    '''\n    Write a function that takes a string as input and returns the number of substrings that are binary strings. \n    A binary string is a string of 0s and 1s.\n    '''\n    count = 0\n    for i in range(0, len(string)): \n        if string[i] == '1': \n            count += 1\n    return count\n    \ndef delete_duplicate_letter(string): \n    '''\n    Write a function to delete all the duplicates in a given string.\n    '''\n    out = []\n    for i in range(len(string)): \n        if string[i] not in out: \n            out.append(string[i])\n    return ''.join(out)\n    \ndef count_letter(string, letter): \n    '''\n    Write a function to return the number of times a given letter occurs in a given string. \n    '''\n    return string.count(letter)\n    \ndef one_away(string1, string2): \n    '''\n    Write a function to check if a given string is one edit away from another. \n    '''\n    if len(string1) == len(string2): \n        return one_edit_replace(string1, string2)\n    elif abs(len(string1) - len(string2)) == 1: \n        return one_edit_insert(string1, string2)\n    else: \n        return False\n    \ndef one_edit_replace(string1, string2): \n    '''\n    Write a function to check if a given string is one edit away from another. \n    '''\n    edited = False\n    for i in range(len(string1)): \n        if string1[i]!= string2[i]: \n            if not edited: \n                edited = True\n            else: \n                return False\n    return True\n    \ndef one_edit_insert(string1, string2): \n    '''\n    Write a function to check if a given string is one edit away from another. \n    '''\n    edited = False\n    i = 0\n    while i < len(string1): \n        if string1[i]!= string2[i]: \n            if not edited: \n                edited = True\n            else: \n                return False\n        i += 1\n    return True\n    \ndef string_compression(string): \n    '''\n    Write a function to compress a given string into a shorter string.\n    '''\n    if len(string) == 0: \n        return ''\n    current = string[0]\n    count = 0\n    out = ''\n    for i in range(len(string)): \n        if string[i] == current: \n            count += 1\n        else: \n            out += current + str(count)\n            current = string[i]\n            count = 1\n    out += current + str(count)\n    if len(string) < len(out): \n        return string\n    else: \n        return out\n    \ndef roman_to_int(string): \n    '''\n    Write a function to convert a Roman numeral to an integer.\n    '''\n    romans = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    out = 0\n    i = 0\n    while i < len(string): \n        if i + 1 < len(string): \n            if romans[string[i]] < romans[string[i + 1]]: \n                out += romans[string[i + 1]] - romans[string[i]]\n                i += 2\n            else: \n                out += romans[string[i]]\n                i += 1\n        else: \n            out += romans[string[i]]\n            i += 1\n    return out\n    \ndef int_to_roman(number): \n    '''\n    Write a function to convert an integer to a Roman numeral.\n    '''\n    romans = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    out = ''\n    for roman, integer in romans.items(): \n        while number >= roman: \n            out += integer\n            number -= roman\n    return out\n    \ndef reverse(string): \n    '''\n    Write a function to reverse a string\n    '''\n    out = ''\n    for i in range(len(string)): \n        out = string[len(string) - i - 1] + out\n    return out\n    \ndef is_palindrome(string): \n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == reverse(string)\n    \ndef replace_vowels(string): \n    '''\n    Write a function to replace vowels in a string with a specified character. \n    '''\n    out = ''\n    for i in range(len(string)): \n        if string[i] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']: \n            out += '*'\n        else: \n            out += string[i]\n    return out\n    \ndef roman_to_int(string): \n    '''\n    Write a function to convert a Roman numeral to an integer.\n    '''\n    romans = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    out = 0\n    i = 0\n    while i < len(string): \n        if i + 1 < len(string): \n            if romans[string[i]] < romans[string[i + 1]]: \n                out += romans[string[i + 1]] - romans[string[i]]\n                i += 2\n            else: \n                out += romans[string[i]]\n                i += 1\n        else: \n            out += romans[string[i]]\n            i += 1\n    return out\n    \ndef int_to_roman(number): \n    '''\n    Write a function to convert an integer to a Roman numeral.\n    '''\n    romans = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    out = ''\n    for roman, integer in romans.items():"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    else:\n        i=min(a,b)\n        while i>1:\n            if a%i==0 and b%i==0:\n                return i\n            i-=1\n    return 1\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return int(a/gcd(a,b))+int(b/gcd(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    if a==0 or b==0:\n        return 0\n    x,y = max(a,b),min(a,b)\n    while x % y!= 0:\n        x,y = y,x % y\n    return y\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=0\n    i=1\n    while i <= a and i <= b:\n        if a%i == 0 and b%i == 0:\n            s+=i\n        i+=1\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors=[]\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list1=[]\n    list2=[]\n    i=1\n    while(i<a):\n        if(a%i==0 and b%i==0):\n            list1.append(i)\n        i+=1\n    i=1\n    while(i<b):\n        if(a%i==0 and b%i==0):\n            list2.append(i)\n        i+=1\n    res=set(list1) & set(list2)\n    return sum(res)\ndef fibonacci(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef factorial(n): \n    '''\n    Write a python function to find the factorial of given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 2\n    else:\n        if(n%2==0):\n            return 2\n        else:\n            return 3*prime(n-1) + 1\ndef collatz(n):\n    '''\n    Write a python function to find the maximum number of steps to reach 1 from any given positive integer using the Collatz conjecture.\n    '''\n    if n==1:\n        return 0\n    elif n%2==0:\n        return 1+collatz(n/2)\n    else:\n        return 1+collatz(n*3+1)\ndef sin(x,n):\n    '''\n    Write a python function to find the nth sinusoid using the Taylor Series expansion.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return x\n    else:\n        return ((-1)**(n+1))*(x**(n+1))/factorial(n)+(n*sin(x,n-1))/factorial(n-1)\ndef cos(x,n):\n    '''\n    Write a python function to find the nth cosinusoid using the Taylor Series expansion.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return -x\n    else:\n        return ((-1)**(n+1))*(x**(n+1))/factorial(n)+(n*cos(x,n-1))/factorial(n-1)\ndef fact(n):\n    '''\n    Write a python function to find the factorial of given number using the product of multiplication.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*fact(n-1)\ndef fibonacci2(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    return int(((1+5**0.5)/2)**n-(1-5**0.5)/2)\ndef fibonacci3(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    return a\ndef fibonacci4(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return x\ndef fibonacci5(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        y,x=x+y,y\n    return x\ndef fibonacci6(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci7(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return x\ndef fibonacci8(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci9(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci10(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci11(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci12(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci13(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci14(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return x\ndef fibonacci15(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return x\ndef fibonacci16(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci17(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return y\ndef fibonacci18(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return x\ndef fibonacci19(n):\n    '''\n    Write a python function to find the nth Fibonacci number using the product of multiplication.\n    '''\n    x,y=0,1\n    for i in range(n):\n        x,y=y,x+y\n    return x\ndef fibonacci20(n):\n    '''\n    Write a python function t"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(2,b):\n        if (a%i==0) and (b%i==0):\n            sum = i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if b == 0:\n            return a\n        return gcd(b, a%b)\n    return a * b // gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor=[]\n    sum=0\n    lcm=1\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            lcm=lcm*i\n            divisor.append(i)\n    for j in range(1,b+1):\n        if b%j==0 and a%j==0:\n            lcm=lcm*j\n            divisor.append(j)\n    for k in range(len(divisor)):\n        sum=sum+divisor[k]\n    return sum\ndef main():\n    a=int(input('Enter 1st number:'))\n    b=int(input('Enter 2nd number:'))\n    print('Sum of common divisors:',sum(a,b))\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return gcd(a,b)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # return x*y\n    return int(x) * int(y)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # x = 10\n    # y = 15\n    # return x * y\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x < 0 or y < 0:\n        return -multiply_int(abs(x), abs(y))\n    elif x == 0 or y == 0:\n        return 0\n    elif x == 1:\n        return y\n    elif x > y:\n        return multiply_int(x - y, y)\n    else:\n        return multiply_int(x, y - x)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # x, y = x, y\n    # if y < 0:\n    #     return -(-x * (-y))\n    # else:\n    #     return x * y\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Remove the stop words and punctuations.\n    # Also, convert the words to lower case and remove all whitespaces\n    # Create a list to store the long words\n    long_words = []\n    for word in str:\n        if len(word) > n and word not in stop_words:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = str.split()\n    long_words = []\n    for word in word_list:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    final_list = []\n    for word in str:\n        if len(word) > n:\n            final_list.append(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_list = []\n    for word in str:\n        if len(word) > n:\n            long_list.append(word)\n    print(long_list)\nlong_words(4, ['hello', 'there', 'take', 'a', 'bunch', 'of', 'your', 'attention'])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    answer = []\n    for word in words:\n        if len(word) > n:\n            answer.append(word)\n    return answer\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            total += my_matrix[i][j]\n    if total == (len(my_matrix)**2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total_sum = 0\n    column_sum = 0\n    main_diag = 0\n    anti_diag = 0\n    for row in range(len(my_matrix)):\n        for column in range(len(my_matrix[row])):\n            total_sum += my_matrix[row][column]\n            column_sum += my_matrix[column][row]\n        if row == column:\n            main_diag += my_matrix[row][column]\n        if row == (len(my_matrix)-1)-column:\n            anti_diag += my_matrix[row][column]\n    return total_sum == column_sum and total_sum == main_diag and total_sum == anti_diag\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # sum of each row, column and diagonal should be equal to number of rows * number of columns\n    # we need to check that\n    rows = len(my_matrix)\n    columns = len(my_matrix[0])\n    for i in range(rows):\n        if sum(my_matrix[i])!= rows * columns:\n            return False\n        \n    for i in range(rows):\n        if sum([my_matrix[i][j] for j in range(columns)])!= rows * columns:\n            return False\n    \n    for i in range(rows):\n        if sum([my_matrix[j][i] for j in range(columns)])!= rows * columns:\n            return False\n    \n    # now check the diagonals for the magic square\n    if sum(my_matrix[0][:])!= rows * columns:\n        return False\n    \n    if sum([my_matrix[i][-1] for i in range(rows)])!= rows * columns:\n        return False\n        \n    if sum([my_matrix[i][0] for i in range(rows)])!= rows * columns:\n        return False\n    \n    return True\n    \nmy_matrix = [\n    [9, 3, 2, 7, 4, 5, 6, 1, 8],\n    [1, 6, 4, 3, 8, 7, 2, 5, 9],\n    [5, 1, 8, 7, 6, 2, 9, 4, 3],\n    [3, 5, 9, 4, 1, 7, 8, 6, 2],\n    [4, 2, 6, 8, 5, 3, 1, 9, 7],\n    [7, 8, 2, 4, 5, 9, 6, 3, 1],\n    [6, 3, 1, 2, 8, 7, 4, 5, 9],\n    [8, 9, 5, 3, 1, 4, 2, 7, 6],\n    [2, 1, 7, 9, 6, 8, 5, 4, 3],\n    ]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    if rows!= rows:\n        return False\n    columns = len(my_matrix[0])\n    total = rows * columns\n    sums = [0] * (rows * columns)\n    # counts = [0] * (rows * columns)\n    for row in range(rows):\n        for column in range(columns):\n            # print('row:', row, 'column:', column, 'element:', my_matrix[row][column])\n            # sums[row * columns + column] = sums[row * columns + column] + my_matrix[row][column]\n            # counts[row * columns + column] = counts[row * columns + column] + 1\n            sums[row * columns + column] = sums[row * columns + column] + my_matrix[row][column]\n            # print(sums)\n    if sums.count(total) == len(sums):\n        print(my_matrix)\n        print('I\\'m a magic square!')\n    # print('row sums:', sums)\n    # print('row counts:', counts)\n    # print('column sums:', sums)\n    # print('column counts:', counts)\n    # print('total sums:', sums)\n    # print('total counts:', counts)\n    # print('total:', total)\n    return sums.count(total) == len(sums)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix = np.array(my_matrix)\n    if my_matrix.shape[0] == my_matrix.shape[1]:\n        row_sum = np.sum(my_matrix, axis=1)\n        col_sum = np.sum(my_matrix, axis=0)\n        diagonal_sum = my_matrix.trace()\n        if (np.all(row_sum == col_sum) and np.all(diagonal_sum == np.trace(my_matrix))):\n            return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    s1, s2, s3, s4, s5, s6, s7, s8 = 0,0,0,0,0,0,0,0\n    for i in range(n):\n        for j in range(n):\n            s1 += my_matrix[i][j]\n            s2 += my_matrix[i][j]**2\n            s3 += my_matrix[i][j]**3\n            s4 += my_matrix[j][i]\n            s5 += my_matrix[j][i]**2\n            s6 += my_matrix[j][i]**3\n            s7 += my_matrix[j][i]*my_matrix[i][j]\n            s8 += my_matrix[j][i]*my_matrix[i][j]\n    return (s1 == s2 == s3 == s4 == s5 == s6 == s7 == s8 == n**2)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if sum(my_matrix[0])!= sum(my_matrix[1])!= sum(my_matrix[2])!= sum(my_matrix[3]):\n        return False\n    if sum(my_matrix[0])!= sum(my_matrix[4])!= sum(my_matrix[8])!= sum(my_matrix[12]):\n        return False\n    if sum(my_matrix[0])!= sum(my_matrix[5])!= sum(my_matrix[9])!= sum(my_matrix[13]):\n        return False\n    if sum(my_matrix[1])!= sum(my_matrix[5])!= sum(my_matrix[9])!= sum(my_matrix[13]):\n        return False\n    if sum(my_matrix[2])!= sum(my_matrix[5])!= sum(my_matrix[10])!= sum(my_matrix[15]):\n        return False\n    if sum(my_matrix[3])!= sum(my_matrix[5])!= sum(my_matrix[11])!= sum(my_matrix[15]):\n        return False\n    if sum(my_matrix[0])!= sum(my_matrix[6])!= sum(my_matrix[12])!= sum(my_matrix[18]):\n        return False\n    if sum(my_matrix[1])!= sum(my_matrix[7])!= sum(my_matrix[13])!= sum(my_matrix[19]):\n        return False\n    if sum(my_matrix[2])!= sum(my_matrix[8])!= sum(my_matrix[14])!= sum(my_matrix[20]):\n        return False\n    if sum(my_matrix[3])!= sum(my_matrix[9])!= sum(my_matrix[15])!= sum(my_matrix[21]):\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    \n    square = [sum(row) for row in my_matrix]\n    \n    if len(square)!= len(my_matrix):\n        return False\n    \n    sum_1 = 0\n    sum_2 = 0\n    \n    for i in range(len(my_matrix)):\n        sum_1 += my_matrix[i][i]\n        sum_2 += my_matrix[i][-i-1]\n        \n    if sum_1!= square[0]:\n        return False\n    \n    if sum_2!= square[-1]:\n        return False\n    \n    diagonals = [0] * len(my_matrix)\n    \n    for i in range(len(my_matrix)):\n        diagonals[i] = my_matrix[i][-i-1]\n        \n    if sum(diagonals)!= square[-1]:\n        return False\n    \n    diagonals = [0] * len(my_matrix)\n    \n    for i in range(len(my_matrix)):\n        diagonals[i] = my_matrix[i][i]\n        \n    if sum(diagonals)!= square[0]:\n        return False\n        \n    return True\n    \n    \nif __name__ == '__main__':\n    print(magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]))\n    print(magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6], [1, 3, 5]]))\n    print(magic_square_test([[3, 1, 5, 7], [6, 8, 2, 4], [9, 10, 11, 3], [1, 2, 3, 4]]))\n    print(magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))\n    print(magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))\n    print(magic_square_test([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]))\n    print(magic_square_test([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30], [31, 32, 33, 34, 35]]))"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = 0\n    #sum of row\n    for i in range(rows):\n        magic_sum += sum(my_matrix[i])\n    #sum of col\n    for i in range(rows):\n        tot = 0\n        for j in range(rows):\n            tot += my_matrix[j][i]\n        if tot!= magic_sum:\n            return False\n    #sum of diag\n    tot = 0\n    for i in range(rows):\n        tot += my_matrix[i][i]\n    if tot!= magic_sum:\n        return False\n    #sum of diag\n    tot = 0\n    for i in range(rows):\n        tot += my_matrix[i][rows-1-i]\n    if tot!= magic_sum:\n        return False\n    #print \"True\"\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_row = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    sum_col = [sum([my_matrix[j][i] for j in range(len(my_matrix))]) for i in range(len(my_matrix))]\n    sum_diag = [my_matrix[i][i] for i in range(len(my_matrix))]\n    sum_anti_diag = [my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))]\n    \n    for i in range(len(sum_row)):\n        if sum_row[i]!= sum_col[i] and sum_row[i]!= sum_diag[i] and sum_row[i]!= sum_anti_diag[i]:\n            return False\n    return True\n    "
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # time: O(n)\n    # space: O(n)\n    # count = defaultdict(int)\n    # for n in nums:\n    #     count[n] += 1\n    # max_freq = max(count.values())\n    # return [k for k, v in count.items() if v == max_freq]\n    # faster: https://www.youtube.com/watch?v=szNvWeSt4tA\n    # time: O(n)\n    # space: O(n)\n    count = {}\n    for n in nums:\n        if n in count:\n            count[n] += 1\n        else:\n            count[n] = 1\n    max_freq = max(count.values())\n    return [k for k, v in count.items() if v == max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    return max(counts, key=lambda x: counts[x])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for n in nums:\n        freq[n] += 1\n    max_freq = max(freq.values())\n    max_freq_items = [key for key, value in freq.items() if value == max_freq]\n    return max_freq_items\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.iteritems(), key=lambda t: t[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for item in nums:\n        counter[item] += 1\n    max_freq = 0\n    max_item = None\n    for k, v in counter.items():\n        if v > max_freq:\n            max_freq = v\n            max_item = k\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    \n    max_count = max(counts.values())\n    return [x for x in counts.keys() if counts[x] == max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        if nums.count(item) > max_freq:\n            max_freq = nums.count(item)\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #if len(nums)<=1: return nums\n    if len(nums)==0: return 0\n    d = defaultdict(int)\n    for i in nums:\n        d[i]+=1\n    max_val = max(d.values())\n    return [key for key,val in d.items() if val==max_val]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    result = []\n    for i in str1:\n        if i in vowels:\n            result.insert(0, i)\n        else:\n            result.append(i)\n    return ''.join(result)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    vowels_in_str = set(str1) & vowels\n    return ''.join(vowels_in_str) + ''.join(set(str1) - vowels_in_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = str1.lower()\n    list1 = list(str1)\n    vowels_index = []\n    for i in range(len(list1)):\n        if list1[i] in vowels:\n            vowels_index.append(i)\n    reverse_index = vowels_index[::-1]\n    for i in range(len(list1)):\n        if i in reverse_index:\n            list1[i] = list1[i].upper()\n    return \"\".join(list1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    lst = []\n    for char in str1:\n        if char in vowels:\n            lst.append(char)\n            str1.remove(char)\n    lst.reverse()\n    for char in lst:\n        str1.append(char)\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_list = ['a','e','i','o','u','A','E','I','O','U']\n    string = list(str1)\n    vowel_list_count = 0\n    vowel_list_length = len(vowel_list)\n    while vowel_list_count < vowel_list_length:\n        string[vowel_list[vowel_list_count]-1] = vowel_list[vowel_list_length-1-vowel_list_count]\n        vowel_list_count += 1\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = [i for i in str1]\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = str1[i]\n        else:\n            str1[i] = '0'\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = list(str1)\n    vowels = 'aeiou'\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = vowels[vowels.index(str1[i]) + 1]\n        else:\n            str1[i] = str1[i]\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    j = len(str1) - 1\n    i = 0\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i = i + 1\n        elif str1[j].lower() not in vowels:\n            j = j - 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i = i + 1\n            j = j - 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n    str2 = \"\"\n    for i in str1:\n        if i not in vowels:\n            str2 += i\n    str2 = str2[::-1]\n    return str2\n    #return str1[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i <= j:\n        if str1[i] in vowels:\n            str1[j], str1[i] = str1[i], str1[j]\n            j -= 1\n        else:\n            i += 1\n    return ''.join(str1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str=''\n    for i in tup1:\n        tup_str+=str(i)\n    return tup_str\n    \ndef rev_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef digit_sum(num):\n    '''\n    Write a function to determine the sum of the digits of a number.\n    '''\n    sum_dig=0\n    while num:\n        sum_dig+=num%10\n        num/=10\n    return sum_dig\n    \ndef is_prime(num):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if num<2:\n        return False\n    elif num==2:\n        return True\n    else:\n        for i in xrange(2,num):\n            if num%i==0:\n                return False\n        return True\n    \ndef reverse_digit(num):\n    '''\n    Write a function to reverse a digit.\n    '''\n    rev_num=0\n    while num:\n        rev_num*=10\n        rev_num+=num%10\n        num/=10\n    return rev_num\n    \ndef reverse_number(num):\n    '''\n    Write a function to reverse a number.\n    '''\n    rev_num=0\n    while num:\n        rev_num*=10\n        rev_num+=num%10\n        num/=10\n    return rev_num\n    \ndef sum_digit(num):\n    '''\n    Write a function to sum all the digits of a number.\n    '''\n    sum_num=0\n    while num:\n        sum_num+=num%10\n        num/=10\n    return sum_num\n    \ndef palindrome(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num<10:\n        return True\n    else:\n        num_str=tup_string(str(num))\n        rev_num=reverse_number(num)\n        if num_str==rev_num:\n            return True\n        else:\n            return False\n            \ndef is_pandigital(num):\n    '''\n    Write a function to determine if a number is a pandigital number.\n    '''\n    if len(tup_string(str(num)))==9:\n        return True\n    else:\n        return False\n    \ndef divisors(num):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    divisors_list=[]\n    for i in xrange(1,num+1):\n        if num%i==0:\n            divisors_list.append(i)\n    return sum(divisors_list)\n    \ndef perfect(num):\n    '''\n    Write a function to determine if a number is perfect.\n    '''\n    if divisors(num)==num:\n        return True\n    else:\n        return False\n    \ndef divisor_sum(num):\n    '''\n    Write a function to determine the sum of the divisors of a number.\n    '''\n    divisor_sum_list=[]\n    for i in xrange(1,num+1):\n        if num%i==0:\n            divisor_sum_list.append(i)\n    return sum(divisor_sum_list)\n    \ndef perfect_divisor(num):\n    '''\n    Write a function to determine if a number is perfect divisor of another number.\n    '''\n    for i in xrange(1,num+1):\n        if num%i==0 and divisor_sum(i)==num:\n            return True\n    return False\n    \ndef divisor_list(num):\n    '''\n    Write a function to determine the list of divisors of a number.\n    '''\n    divisors_list=[]\n    for i in xrange(1,num+1):\n        if num%i==0:\n            divisors_list.append(i)\n    return divisors_list\n    \ndef perfect_divisor_list(num):\n    '''\n    Write a function to determine the list of perfect divisors of a number.\n    '''\n    perfect_divisors_list=[]\n    for i in xrange(1,num+1):\n        if num%i==0 and divisor_sum(i)==num:\n            perfect_divisors_list.append(i)\n    return perfect_divisors_list\n    \ndef is_super_prime(num):\n    '''\n    Write a function to determine if a number is super prime.\n    '''\n    if num<10:\n        return True\n    else:\n        for i in xrange(2,num):\n            if num%i==0:\n                return False\n        return True\n    \ndef is_super_factor(num,num2):\n    '''\n    Write a function to determine if a number is super factor of another number.\n    '''\n    if num<num2:\n        return False\n    else:\n        if num2%num==0:\n            return True\n        else:\n            return is_super_factor(num,num2%num)\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef is_super_palindrome(num):\n    '''\n    Write a function to determine if a number is super palindrome.\n    '''\n    if len(str(num))==9:\n        return True\n    else:\n        num_str=tup_string(str(num))\n        rev_num=reverse_number(num)\n        if num_str==rev_num:\n            return True\n        else:\n            return False\n    \ndef super_palindrome_list(num):\n    '''\n    Write a function to determine the list of super palindromes of a number.\n    '''\n    super_palindrome_list=[]\n    for i in xrange(0,num):\n        if is_super_palindrome(i):\n            super_palindrome_list.append(i)\n    return super_palindrome_list\n    \ndef is_super_pandigital(num):\n    '''\n    Write a function to determine if a number is super pandigital.\n    '''\n    if len(tup_string(str(num)))==9:\n        return True\n    else:\n        return False\n    \ndef super_pandigital_list(num):\n    '''\n    Write a function to determine the list of super pandigitals of a number.\n    '''\n    super_pandigital_list=[]\n    for i in xrange(1,num+1):\n        if is_super_pandigital(i):\n            super_pandigital_list.append(i)\n    return super_pandigital_list\n    \ndef is_super_perfect(num):\n    '''\n    Write a function to determine if a number is super perfect.\n    '''\n    if divisor_sum(num)==num:\n        return True\n    else:\n        return False\n    \ndef super_perfect_list(num):\n    '''\n    Write a function to determine the list of super perfects of a number.\n    '''\n    super_perfect_list=[]\n    for i in xrange(1,num+1):\n        if is_super_perfect(i):\n            super_perfect_list.append(i)\n    return super_perfect_list\n    \ndef super_perfect_divisor_list(num):\n    '''\n    Write a function to determine the list of super perfect divisors of a number.\n    '''\n    super_perfect_divisor_list=[]\n    for i in xrange(1,num+1):\n        if is_super_perfect(i) and divisor_sum(i)==num:\n            super_perfect_divisor_list.append(i)\n    return super_perfect_divisor_list\n    \ndef is_super_perfect_divisor(num,num2):\n    '''\n    Write a function to determine if a number is supe"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # if not tup1:\n    #     return '()'\n    # new_str = '('\n    # for i in tup1[:-1]:\n    #     new_str += str(i) + ','\n    # new_str += str(tup1[-1]) + ')'\n    # return new_str\n    return ''.join(map(str, tup1))\n    # return '(' + ','.join(map(str, tup1)) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return ''\n    elif len(tup1) == 1:\n        return str(tup1[0])\n    else:\n        return str(tup1[0]) + '\\n' + tup_string(tup1[1:])\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(tup1)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string =''.join(tup1)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for i in tup1:\n        tup_string = tup_string + str(i) +''\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in range(len(tup1)):\n        if i == 0:\n            str1 = str1 + str(tup1[i])\n        else:\n            str1 = str1 + \", \" + str(tup1[i])\n    return str1\n    \ndef make_common_names(fname):\n    '''\n    Take a string as an input and return a list of all the elements with\n    \"common\" in them.\n    '''\n    common_names = []\n    fhandle = open(fname)\n    for line in fhandle:\n        if \"common\" in line:\n            name = line.split()[1]\n            common_names.append(name)\n    return common_names\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(tup1)\n    return string\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return sum_negativenum(nums[1:]) - nums[0]\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # result = 0\n    # for i in nums:\n    #     if i < 0:\n    #         result += i\n    # return result\n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-i for i in nums])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for x in nums:\n        if x < 0:\n            s = s + x\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    res = 0\n    for num in nums:\n        if num < 0:\n            res += num\n    return res\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 8\n    else:\n        return 2 * (2 * n + 1) - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n - 1\n    return int((n**2 + n) * n / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n -= 1\n    if n % 2 == 1:\n        return n * (3 * n - 1) / 2\n    return n * (2 * n + 1) / 3\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    return hexagonal_num(n-1) + n * hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return 3*n - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))/2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return hexagonal(n).n\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_of_zeros, num_of_non_zeros = 0, 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            num_of_zeros += 1\n        else:\n            num_of_non_zeros += 1\n    return float(num_of_zeros) / num_of_non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    c = 0\n    for num in nums:\n        if num == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums) - sum([i for i in nums if i > 0])\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = 0\n    for i in nums:\n        if i == 0:\n            result += 1\n    return result/float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(n):\n        if nums[i] == 0:\n            count += 1\n    return float(count) / (n)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    numZeros = 0\n    numOnes = 0\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            numZeros += 1\n        else:\n            numOnes += 1\n    return float(numZeros) / numOnes\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    ans = 0\n    for i in nums:\n        if i == 0:\n            ans += 1\n    return float(ans)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # for i in xrange(len(nums)):\n    #     if nums[i] == 0:\n    #         print i, nums[i]\n    # print nums[1]\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    print zeros, non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / float(len(nums))\n    \ndef median_five(nums):\n    '''\n    Write a function that takes in an array of integers and returns the median of the five integers immediately to the left and right of the median. If there are less than five integers in the array, we'll assume that the median is the majority element of the array.\n    '''\n    nums.sort()\n    if len(nums) < 5:\n        return nums[len(nums) // 2]\n    else:\n        return (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2.0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = []\n    while n > 0:\n        if n % 2!= 0:\n            return False\n        else:\n            power_of_two.append(2 ** int(math.log(n, 2)))\n            n = n / 2\n    if sum(power_of_two) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n & n - 1 == 0 and n & 0x55555555!= 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return 1\n    n = abs(n)\n    bits = 0\n    while(n!=0):\n        n = n >> 1\n        bits += 1\n    return bits == int(math.log(n,2))\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    while n:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n    \n    \ndef find_missing_element(arr):\n    '''\n    Write a python function to find the missing number in a list of numbers\n    '''\n    res = 0\n    for i in xrange(len(arr)):\n        res ^= arr[i]\n    for i in xrange(len(arr)):\n        res ^= i+1\n    return res\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = str(n)\n    power_of_two = False\n    for i in range(len(s)):\n        power_of_two = is_power_of_two(int(s[i]))\n        if power_of_two == False:\n            return power_of_two\n    return power_of_two\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #if n==0:\n    #    return True\n    #while n!=0:\n    #    if n%2!=0:\n    #        return False\n    #    n/=2\n    #return True\n    if n==0:\n        return True\n    while n%2==0:\n        n/=2\n    return n==1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Approach 1\n    # n = 12\n    # set(bin(n)[2:])\n    # if '1' in set(bin(n)[2:]):\n    #     return True\n    # else:\n    #     return False\n    \n    # Approach 2\n    # n = 12\n    # c = 0\n    # while(n > 0):\n    #     if n & 1 == 1:\n    #         c = c + 1\n    #     n = n >> 1\n    # return c\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0:\n        return False\n    while n:\n        if n%2==0:\n            n//=2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==1: return True\n    if n==0: return False\n    while n%2==0: n=n//2\n    if n==1: return True\n    else: return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = int(n)\n    if n<0:\n        return False\n    while n>1:\n        if n%2!= 0:\n            return False\n        else:\n            n = n/2\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return math.pi * (2 * r)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return r*math.pi*2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # sol1\n    result = list()\n    for i in test_list:\n        if isinstance(i, int):\n            result.append(i)\n        else:\n            result += i\n    return result\n    \n    # sol2\n    # return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    return [num for sublist in test_list for num in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, (int, float)):\n            flat_list.append(item)\n        else:\n            flat_list.extend(item)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = []\n    for i in test_list:\n        if isinstance(i,list):\n            result = result + extract_singly(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp = []\n    for i in test_list:\n        temp = temp + i\n    return temp\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    ret = set()\n    for i in test_list:\n        ret.update(i)\n    return ret\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # base case\n    if len(test_list) == 1:\n        return test_list[0]\n    # recursion\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        max_j = 0\n        for j in range(i, len(nums)):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        if i!= max_j:\n            nums[i], nums[max_j] = nums[max_j], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    k = size / 2\n    while k > 0:\n        for i in xrange(k, size):\n            j = i\n            while j >= k and nums[j - k] > nums[j]:\n                nums[j - k], nums[j] = nums[j], nums[j - k]\n                j -= k\n        k /= 2\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # If you dont know how many times you need to\n    # flip over the array, you can use this approach\n    # and the code will be O(n^2) in time and O(1) in space.\n    # Then, you can just keep doing this till you get\n    # an empty array.\n    # TC - O(nlogn)\n    # SC - O(1)\n    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # max_index is the max index of the list\n        # swap the element at max_index with the last index\n        nums[i-1], nums[max_index] = nums[max_index], nums[i-1]\n        # We have to find the rightmost index of the list\n        # from which we need to start the sort\n        # again by doing this for the indices upto the max index\n        if i % 2 == 0:\n            nums[:i] = sorted(nums[:i])\n        else:\n            nums[:i] = nums[:i][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    for i in range(size, 1, -1):\n        j = get_max_index(nums, i)\n        if j!= i:\n            # Swap i and j\n            nums[i-1], nums[j-1] = nums[j-1], nums[i-1]\n            # Reverse the first i-1 elements\n            left, right = 0, i-1\n            while left < right:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n            # Reverse the first i-1 elements\n            left, right = 0, i-1\n            while left < right:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in xrange(n / 2):\n        nums = flip(nums, i)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # TODO: implement this\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse_pancake_sort(nums):\n        '''\n        In place reverse of pancake sort.\n        '''\n        for i in range(len(nums) // 2):\n            nums[i], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[i]\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    This approach is easy to understand but not efficient.\n    '''\n    new_nums = []\n    for i in range(len(nums)):\n        new_nums.append(i)\n    new_nums = [new_nums[0]]\n    new_nums = new_nums + nums[:len(nums) - 1][::-1]\n    return new_nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in xrange(n / 2, 0, -1):\n        for j in xrange(i, n, i + 1):\n            if nums[j - 1] > nums[j]:\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n    for i in xrange(n / 2, 0, -1):\n        nums[i], nums[n - 1 - i] = nums[n - 1 - i], nums[i]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list3[i] == list2[i]:\n                count += 1\n    return count\n    \ndef question_1_8():\n    '''\n    Write a function that takes a list of positive integers\n    and computes the minimum and maximum values that can be formed from those numbers.\n    '''\n    \n    list1 = [5,2,3,4,1]\n    list2 = [2,3,4,1,5]\n    list3 = [1,2,3,4,5]\n    \n    #find min and max value\n    max_val = max(list1)\n    min_val = min(list1)\n    print'max_val',max_val\n    print'min_val',min_val\n    \n    #find count of common value in list 1\n    count1 = count_samepair(list1,list2,list3)\n    print 'count1',count1\n    \n    #find count of common value in list 2\n    count2 = count_samepair(list2,list3,list1)\n    print 'count2',count2\n    \n    #find count of common value in list 3\n    count3 = count_samepair(list3,list1,list2)\n    print 'count3',count3\n    \n    #count total\n    count = count1 + count2 + count3\n    print 'count',count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    l1=list1[0]\n    l2=list2[0]\n    l3=list3[0]\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print \"Length of list1,list2,list3 must be equal!\"\n        return\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len(set(zip(list1,list2,list3)))\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n = len(list1)\n    counter = 0\n    for i in range(n):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    if Input is None: \n        return 0\n    elif not isinstance(Input, tuple):\n        raise ValueError('Input should be a tuple')\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def list_maker(tup, count):\n        '''\n        Recursive function that iterates through tuples and calls itself for each element to return a count for each tuple.\n        '''\n        for ele in tup:\n            if type(ele) == tuple:\n                count += 1\n                list_maker(ele, count)\n        return count\n    return list_maker(Input, 0)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    tup = Input\n    count = 0\n    for i in tup:\n        if isinstance(i,list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input)<2:\n        return 0\n    if type(Input[0]) is not tuple:\n        return 1\n    else:\n        return 1+find_lists(Input[0])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # var to store count\n    count = 0\n    # var to store length of lists\n    len_of_list = 0\n    # var to store the count of tuples\n    count_of_tuples = 0\n    # var to store the length of tuples\n    len_of_tuples = 0\n    for i in Input: \n        if type(i) is list: \n            # increment count \n            count += 1\n            len_of_list = len(i)\n        elif type(i) is tuple: \n            # increment count \n            count_of_tuples += 1\n            len_of_tuples = len(i)\n    return count, count_of_tuples, len_of_tuples, len_of_list\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not isinstance(Input, tuple):\n        print(\"Input is not a tuple\")\n        return\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_num = 0\n    for i in Input:\n        if type(i) == list:\n            list_num += 1\n    return list_num\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    if Input == tuple():\n        return 0\n    if Input[0][0] == '(' and Input[-1][-1] == ')':\n        return 1 + find_lists(Input[1:-1])\n    return find_lists(Input[1:])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #Create a new tuple with all the elements seperated by a comma\n    tmp = re.split(',',str(Input))\n    #Create a set for each item of the tuple\n    tmp = set(tmp)\n    #print(tmp)\n    #create a set of list items\n    lists = set(re.split(',',str(lists)))\n    #print(lists)\n    return len(tmp.intersection(lists))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(1,len(arr)):\n        if abs(arr[i]-arr[i-1])>max_diff:\n            max_diff = abs(arr[i]-arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in xrange(0, len(arr)-1):\n        for j in xrange(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return max(arr[i+1]-arr[i] for i in range(len(arr)-1))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = 0\n    for i in range(len(arr)-1):\n        diff = max(diff, abs(arr[i] - arr[i+1]))\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #brute force: O(n^2)\n    max_diff = arr[0]\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in xrange(len(arr) - 1):\n        if abs(arr[i + 1] - arr[i]) > max_diff:\n            max_diff = abs(arr[i + 1] - arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1]-arr[0]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(1, len(arr)):\n        max_diff = max(abs(arr[i]-arr[i-1]), max_diff)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 1)\n    if n < 0:\n        return None\n    \n    if n % 2 == 1:\n        return find_solution(b, a, n - a)\n    if (n - b) % a == 0:\n        return (a, n - b)\n    return find_solution(b, a, n / a)\n    \n    # if n % 2 == 1:\n    #     a = b\n    #     b = n - a\n    #     return find_solution(b, a, n / a)\n    # if (n - b) % a == 0:\n    #     return (a, n - b)\n    # return find_solution(b, a, n / a)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//a):\n        for y in range(n//b):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in xrange(a + 1):\n        for y in xrange(b + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    b = -b\n    x = (n - b * int(a / b)) // a\n    return (x, n - x * a)\n    \ndef find_solution_2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    while True:\n        x = (n - b * int(a / b)) // a\n        if x == 0:\n            return (n - x * a, x)\n        b = -b\n        n = x\n        \ndef find_solution_3(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        x = n // a\n    else:\n        x = n // a + 1\n    if n % b == 0:\n        y = n // b\n    else:\n        y = n // b + 1\n    return (x, y)\n    \ndef find_solution_4(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        x = n // a\n    else:\n        x = n // a + 1\n    if n % b == 0:\n        y = n // b\n    else:\n        y = n // b + 1\n    return (x, y)\n    \ndef find_solution_5(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    y = 0\n    x = 0\n    if n % b == 0:\n        y = n // b\n    else:\n        y = n // b + 1\n    x = n - y * b\n    return (x, y)\n    \ndef find_solution_6(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % b == 0:\n        x = n // b\n        y = 0\n    else:\n        x = n // b + 1\n        y = n - x * b\n    return (x, y)\n    \ndef find_solution_7(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        y = n // a\n    else:\n        y = n // a + 1\n    x = n - y * a\n    return (x, y)\n    \ndef find_solution_8(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % b == 0:\n        y = n // b\n    else:\n        y = n // b + 1\n    x = n - y * b\n    return (x, y)\n    \ndef find_solution_9(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        y = n // a\n    else:\n        y = n // a + 1\n    x = n - y * a\n    return (x, y)\n    \ndef find_solution_10(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        y = n // a\n    else:\n        y = n // a + 1\n    x = n - y * a\n    return (x, y)\n    \ndef find_solution_11(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        x = n // a\n        y = 0\n    else:\n        x = n // a + 1\n        y = n - x * a\n    return (x, y)\n    \ndef find_solution_12(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        y = n // a\n        x = 0\n    else:\n        y = n // a + 1\n        x = n - y * a\n    return (x, y)\n    \ndef find_solution_13(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % b == 0:\n        x = n // b\n        y = 0\n    else:\n        x = n // b + 1\n        y = n - x * b\n    return (x, y)\n    \ndef find_solution_14(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % b == 0:\n        x = n // b\n        y = 0\n    else:\n        x = n // b + 1\n        y = n - x * b\n    return (x, y)\n    \ndef find_solution_15(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % b == 0:\n        x = n // b\n        y = 0\n    else:\n        x = n // b + 1\n        y = n - x * b\n    return (x, y)\n    \ndef find_solution_16(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % b == 0:\n        x = n // b\n        y = 0\n    else:\n        x = n // b + 1\n        y = n - x * b\n    return (x, y)\n    \ndef find_solution_17(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        y = n // a\n        x = 0\n    else:\n        y = n // a + 1\n        x = n - y * a\n    return (x, y)\n    \ndef find_solution_18(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % a == 0:\n        x = n // a\n        y = 0\n    else:\n        x = n // a + 1\n        y = n - x * a\n    return (x, y)\n    \ndef fin"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def find_solution_recursive(a, b, n, x, y, last_x, last_y):\n        if x == last_x and y == last_y:\n            return (x, y)\n        if x > last_x:\n            return find_solution_recursive(a, b, n, x, y + b, x, y) or find_solution_recursive(a, b, n, x, y - b, x, y)\n        return find_solution_recursive(a, b, n, x + a, y, x, y) or find_solution_recursive(a, b, n, x + a, y, x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solution = None\n    for x in range(1, n):\n        for y in range(1, n):\n            if (x * a) + (y * b) == n:\n                solution = (x, y)\n                break\n        if solution is not None:\n            break\n    return solution\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # this function is built from a few other functions\n    def gcd(a,b):\n        while b:\n            a, b = b, a % b\n        return a\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n):\n        y = n - a*x\n        if y % b == 0:\n            return (x, y/b)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Since a and b are positive integers, a >= b >= 0, n >= 0\n    # For x, we have a >= b, a - b = n, b = n - a = x\n    # For y, we have a - b >= n, a + b = 2n, a + b = 2n - b = y\n    # We know that x is divisible by 2, so n / 2 = x\n    # And y is divisible by 2, so n / 2 - b = y\n    # So x = (n / 2) - b, y = (n / 2) - b\n    # Since a, b, and n are integers, a >= b >= 0, n >= 0\n    # So, a >= n - b >= b\n    # a >= n - b >= b, a = n - b, b = n - a, a >= b, n >= a\n    # Solve for a, b\n    n = int(n)\n    a, b = a, b\n    if a >= n - b:\n        return (n - b, a)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n    \n    \ndef min_elements(list1, list2):\n    '''\n    Write a function to return the minimum number of elements that must be removed from list1 to make it equal to list2.\n    '''\n    list3 = remove_elements(list1, list2)\n    return len(list3)\n    \n    \ndef flip_dict(d):\n    '''\n    Write a function to flip the key and values of a dictionary.\n    '''\n    return {v:k for k,v in d.items()}\n    \n    \ndef reverse_dict(d):\n    '''\n    Write a function to flip the key and values of a dictionary.\n    '''\n    return {k:v for k,v in d.items()}\n    \n    \ndef get_max_of_two(a,b):\n    '''\n    Write a function to return the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \n        \ndef get_max_of_three(a,b,c):\n    '''\n    Write a function to return the maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \n    \ndef generate_permutations(list1, l):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    if l == 1:\n        return [list1]\n    else:\n        return [list1] + list(generate_permutations(list1[1:], l-1))\n    \n    \ndef get_combinations(list1, l):\n    '''\n    Write a function to generate all combinations of a given list.\n    '''\n    if l == 1:\n        return [[list1]]\n    else:\n        combinations = []\n        for i in range(len(list1)):\n            combinations += get_combinations(list1[i+1:], l-1)\n        return combinations + get_combinations(list1[1:], l-1)\n    \n    \ndef get_permutation_count(list1):\n    '''\n    Write a function to count the number of permutations of a given list.\n    '''\n    return len(generate_permutations(list1, len(list1)))\n    \n    \ndef get_combination_count(list1):\n    '''\n    Write a function to count the number of combinations of a given list.\n    '''\n    return len(get_combinations(list1, len(list1)))\n    \n    \ndef get_permutations_helper(list1, l, string):\n    if l == 0:\n        print(string)\n    else:\n        for i in range(len(list1)):\n            get_permutations_helper(list1[:i]+list1[i+1:], l-1, string+' '+list1[i])\n    \n    \ndef get_combinations_helper(list1, l, string):\n    if l == 0:\n        print(string)\n    else:\n        for i in range(len(list1)):\n            get_combinations_helper(list1[i+1:], l-1, string+' '+list1[i])\n    \n    \ndef get_permutations(list1, l):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    return get_permutations_helper(list1, l, '')\n    \n    \ndef get_combinations(list1, l):\n    '''\n    Write a function to generate all combinations of a given list.\n    '''\n    return get_combinations_helper(list1, l, '')\n    \n    \ndef get_permutation_count(list1):\n    '''\n    Write a function to count the number of permutations of a given list.\n    '''\n    return len(get_permutations(list1, len(list1)))\n    \n    \ndef get_combination_count(list1):\n    '''\n    Write a function to count the number of combinations of a given list.\n    '''\n    return len(get_combinations(list1, len(list1)))\n    \n    \ndef get_permutations_helper2(list1, l, string, result):\n    if l == 0:\n        result.append(string)\n    else:\n        for i in range(len(list1)):\n            get_permutations_helper2(list1[i+1:], l-1, string+' '+list1[i], result)\n    \n    \ndef get_combinations_helper2(list1, l, string, result):\n    if l == 0:\n        result.append(string)\n    else:\n        for i in range(len(list1)):\n            get_combinations_helper2(list1[i+1:], l-1, string+' '+list1[i], result)\n    \n    \ndef get_permutations(list1, l):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    return get_permutations_helper2(list1, l, '', [])\n    \n    \ndef get_combinations(list1, l):\n    '''\n    Write a function to generate all combinations of a given list.\n    '''\n    return get_combinations_helper2(list1, l, '', [])\n    \n    \ndef get_permutation_count(list1):\n    '''\n    Write a function to count the number of permutations of a given list.\n    '''\n    return len(get_permutations(list1, len(list1)))\n    \n    \ndef get_combination_count(list1):\n    '''\n    Write a function to count the number of combinations of a given list.\n    '''\n    return len(get_combinations(list1, len(list1)))\n    \n    \ndef get_permutations_helper3(list1, l, string, result):\n    if l == 0:\n        result.append(string)\n    else:\n        for i in range(len(list1)):\n            get_permutations_helper3(list1[i+1:], l-1, string+' '+list1[i], result)\n    \n    \ndef get_combinations_helper3(list1, l, string, result):\n    if l == 0:\n        result.append(string)\n    else:\n        for i in range(len(list1)):\n            get_combinations_helper3(list1[i+1:], l-1, string+' '+list1[i], result)\n    \n    \ndef get_permutations(list1, l):\n    '''\n    Write a function to generate all permutations of a given list.\n    '''\n    return get_permutations_helper3(list1, l, '', [])\n    \n    \ndef get_combinations(list1, l):\n    '''\n    Write a function to generate all combinations of a given list.\n    '''\n    return get_combinations_helper3(list1, l, '', [])\n    \n    \ndef get_permutation_count(list1):\n    '''\n    Write a function to count the number of permutations of a given list.\n    '''\n    return len(get_permutations(list1, len(list1)))\n    \n    \ndef get_combination_count(list1):\n    '''\n    Write a function to count the number of combinations of a given list.\n    '''\n    return len(get_combinations(list1, len(list1)))\n    \n    \ndef n_choose_k(n, k):\n    '''\n    Write a function to calculate n choose k.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * n_choose_k(n-1, k-1)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for elem in list1:\n        if elem not in list2:\n            list3.append(elem)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [list1[i] for i in range(len(list1)) if list1[i] not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if not list2:\n        return list1\n    else:\n        set1 = set(list1)\n        set2 = set(list2)\n        return list(set1 - set2)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_diff = []\n    for element in list1:\n        if element not in list2:\n            list_diff.append(element)\n    return list_diff\n    \ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 6]\n    print remove_elements(list1, list2)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n    return list1\n    \ndef flatten(l):\n    '''\n    Flatten a list of lists to a single list.\n    '''\n    if len(l) > 1:\n        for i in l[1:]:\n            l[0].extend(i)\n    return l[0]\n    \ndef map_and_filter(l, f):\n    '''\n    Write a function to return all elements of a list that pass the specified\n    filter function.\n    '''\n    return list(filter(f, l))\n    \ndef find_max(l):\n    '''\n    Write a function to return the max element of a list.\n    '''\n    return max(l)\n    \ndef find_min(l):\n    '''\n    Write a function to return the min element of a list.\n    '''\n    return min(l)\n    \ndef insert(l, i, item):\n    '''\n    Write a function to insert an item in a list at the specified index.\n    '''\n    return l[0:i] + [item] + l[i:]\n    \ndef append(l, item):\n    '''\n    Write a function to append an item to a list.\n    '''\n    return l + [item]\n    \ndef pop(l):\n    '''\n    Write a function to pop an item from a list.\n    '''\n    return l.pop()\n    \ndef length(l):\n    '''\n    Write a function to return the length of a list.\n    '''\n    return len(l)\n    \ndef reverse(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    return l[::-1]\n    \ndef sort(l):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(l)\n    \ndef is_sorted(l):\n    '''\n    Write a function to determine whether a list is sorted or not.\n    '''\n    return l == sorted(l)\n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function to determine whether two words are anagrams.\n    '''\n    return sorted(word1) == sorted(word2)\n    \ndef has_duplicates(l):\n    '''\n    Write a function to determine if a list contains any duplicates.\n    '''\n    return len(l)!= len(set(l))\n    \ndef mode(l):\n    '''\n    Write a function to return the most common element of a list.\n    '''\n    return max(l, key=l.count)\n    \ndef power_set(l):\n    '''\n    Write a function to return the power set of a list.\n    '''\n    return set([])\n    \ndef remove_first(l):\n    '''\n    Write a function to remove the first item of a list.\n    '''\n    l.pop(0)\n    return l\n    \ndef repeat(l, n):\n    '''\n    Write a function to repeat a list n times.\n    '''\n    return l * n\n    \ndef partition(l, f):\n    '''\n    Write a function to partition a list into two parts, where the first part\n    contains all elements that return true when passed to the specified\n    function and the second part contains all elements that return false when\n    passed to the specified function.\n    '''\n    true_list = []\n    false_list = []\n    for item in l:\n        if f(item):\n            true_list.append(item)\n        else:\n            false_list.append(item)\n    return [true_list, false_list]\n    \ndef find_duplicates(l):\n    '''\n    Write a function to find all duplicates in a list.\n    '''\n    return [item for item in l if l.count(item) > 1]\n    \ndef count_letters(s):\n    '''\n    Write a function to count the number of letters in a string.\n    '''\n    return len(s)\n    \ndef find_max_index(l):\n    '''\n    Write a function to return the index of the maximum element in a list.\n    '''\n    return l.index(max(l))\n    \ndef find_min_index(l):\n    '''\n    Write a function to return the index of the minimum element in a list.\n    '''\n    return l.index(min(l))\n    \ndef alternate(l):\n    '''\n    Write a function to alternate a list of lists.\n    '''\n    new_l = []\n    for i in range(len(l)):\n        new_l.append([])\n        for j in range(len(l[i])):\n            new_l[i].append(l[i][j])\n    return new_l\n    \ndef average(l):\n    '''\n    Write a function to return the average of a list.\n    '''\n    return sum(l) / len(l)\n    \ndef compose(f, g):\n    '''\n    Write a function to compose two functions, f and g, into one.\n    '''\n    return lambda x: f(g(x))\n    \ndef compose_list(f, g):\n    '''\n    Write a function to compose two lists, f and g, into one.\n    '''\n    return [f(i) for i in g]\n    \ndef conditional(f, g, x):\n    '''\n    Write a function to return the result of composing a function f and a\n    function g, depending on whether a specified value is True or False.\n    '''\n    if x:\n        return f(g(x))\n    else:\n        return None\n    \ndef capitalize(s):\n    '''\n    Write a function to capitalize a string.\n    '''\n    return s[0].upper() + s[1:]\n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_abecedarian(s):\n    '''\n    Write a function to determine whether a string is an abecedarian or not.\n    '''\n    return s == ''.join(sorted(s))\n    \ndef is_abecedarian_1(s):\n    '''\n    Write a function to determine whether a string is an abecedarian or not.\n    '''\n    if len(s) == 1:\n        return True\n    return s[0] <= s[1] and is_abecedarian(s[1:])\n    \ndef is_abecedarian_2(s):\n    '''\n    Write a function to determine whether a string is an abecedarian or not.\n    '''\n    return all([s[i] <= s[i + 1] for i in range(len(s) - 1)])\n    \ndef count_vowels(s):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return len([i for i in s if i in 'aeiou'])\n    \ndef is_unique(l):\n    '''\n    Write a function to determine whether a list contains all unique elements.\n    '''\n    return len(l) == len(set(l))\n    \ndef is_anagram_1(s1, s2):\n    '''\n    Write a function to determine whether two strings are anagrams.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_2(s1, s2):\n    '''\n    Write a function to determine whether two strings are anagrams.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_3(s1, s2):\n    '''\n    Write a function to determine whether two strings are anagrams.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in s1:\n        d1[i] = d1.get(i, 0) + 1\n    for i in s2:\n        d2[i] = "
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for item in list1:\n        if item not in list2:\n            list3.append(item)\n    return list3\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return sum_series(n - 2) + sum_series(n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #base case\n    if n == 0:\n        return 0\n    #n is odd\n    elif n % 2 == 1:\n        #need to add n-2\n        return n + sum_series(n-2)\n    #n is even\n    else:\n        #need to add n-4\n        return n + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # base case\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 18\n    if n == 7:\n        return 25\n    if n == 8:\n        return 32\n    if n == 9:\n        return 36\n    if n == 10:\n        return 45\n    if n == 11:\n        return 55\n    if n == 12:\n        return 66\n    if n == 13:\n        return 78\n    if n == 14:\n        return 89\n    if n == 15:\n        return 110\n    if n == 16:\n        return 132\n    if n == 17:\n        return 143\n    if n == 18:\n        return 156\n    if n == 19:\n        return 165\n    if n == 20:\n        return 176\n    if n == 21:\n        return 189\n    if n == 22:\n        return 202\n    if n == 23:\n        return 231\n    if n == 24:\n        return 243\n    if n == 25:\n        return 256\n    if n == 26:\n        return 265\n    if n == 27:\n        return 282\n    if n == 28:\n        return 303\n    if n == 29:\n        return 326\n    if n == 30:\n        return 340\n    if n == 31:\n        return 348\n    if n == 32:\n        return 361\n    if n == 33:\n        return 372\n    if n == 34:\n        return 384\n    if n == 35:\n        return 405\n    if n == 36:\n        return 426\n    if n == 37:\n        return 438\n    if n == 38:\n        return 449\n    if n == 39:\n        return 462\n    if n == 40:\n        return 474\n    if n == 41:\n        return 485\n    if n == 42:\n        return 516\n    if n == 43:\n        return 537\n    if n == 44:\n        return 548\n    if n == 45:\n        return 559\n    if n == 46:\n        return 572\n    if n == 47:\n        return 585\n    if n == 48:\n        return 605\n    if n == 49:\n        return 626\n    if n == 50:\n        return 649\n    if n == 51:\n        return 660\n    if n == 52:\n        return 672\n    if n == 53:\n        return 683\n    if n == 54:\n        return 704\n    if n == 55:\n        return 725\n    if n == 56:\n        return 746\n    if n == 57:\n        return 759\n    if n == 58:\n        return 773\n    if n == 59:\n        return 789\n    if n == 60:\n        return 808\n    if n == 61:\n        return 827\n    if n == 62:\n        return 845\n    if n == 63:\n        return 866\n    if n == 64:\n        return 878\n    if n == 65:\n        return 895\n    if n == 66:\n        return 915\n    if n == 67:\n        return 936\n    if n == 68:\n        return 957\n    if n == 69:\n        return 970\n    if n == 70:\n        return 979\n    if n == 71:\n        return 990\n    if n == 72:\n        return 1011\n    if n == 73:\n        return 1022\n    if n == 74:\n        return 1043\n    if n == 75:\n        return 1054\n    if n == 76:\n        return 1065\n    if n == 77:\n        return 1076\n    if n == 78:\n        return 1090\n    if n == 79:\n        return 1112\n    if n == 80:\n        return 1123\n    if n == 81:\n        return 1134\n    if n == 82:\n        return 1145\n    if n == 83:\n        return 1158\n    if n == 84:\n        return 1170\n    if n == 85:\n        return 1182\n    if n == 86:\n        return 1194\n    if n == 87:\n        return 1205\n    if n == 88:\n        return 1226\n    if n == 89:\n        return 1239\n    if n == 90:\n        return 1252\n    if n == 91:\n        return 1264\n    if n == 92:\n        return 1275\n    if n == 93:\n        return 1288\n    if n == 94:\n        return 1304\n    if n == 95:\n        return 1326\n    if n == 96:\n        return 1339\n    if n == 97:\n        return 1353\n    if n == 98:\n        return 1369\n    if n == 99:\n        return 1380\n    if n == 100:\n        return 1392\n    if n == 101:\n        return 1404\n    if n == 102:\n        return 1425\n    if n == 103:\n        return 1437\n    if n == 104:\n        return 1450\n    if n == 105:\n        return 1462\n    if n == 106:\n        return 1473\n    if n == 107:\n        return 1484\n    if n == 108:\n        return 1496\n    if n == 109:\n        return 1510\n    if n == 110:\n        return 1523\n    if n == 111:\n        return 1534\n    if n == 112:\n        return 1546\n    if n == 113:\n        return 1559\n    if n == 114:\n        return 1572\n    if n == 115:\n        return 1583\n    if n == 116:\n        return 1594\n    if n == 117:\n        return 1605\n    if n == 118:\n        return 1626\n    if n == 119:\n        return 1639\n    if n == 120:\n        return 1652\n    if n == 121:\n        return 1664\n    if n == 122:\n        return 1675\n    if n == 123:\n        return 1687\n    if n == 124:\n        return 1700\n    if n == 125:\n        return 1712\n    if n == 126:\n        return 1723\n    if n == 127:\n        return 1734\n    if n == 128:\n        return 1746\n    if n == 129:\n        return 1759\n    if n == 130:\n        return 1772\n    if n == 131:\n        return 1783\n    if n == 132:\n        return 1794\n    if n == 133:\n        return 1806\n    if n == 134:\n        return 1819\n    if n == 135:\n        return 1832\n    if n == 136:\n        return 1844\n    if n == 137:\n        return 1856\n    if n == 138:\n        return 1869\n    if n == 139:\n        return 1882\n    if n == 140:\n        return 1893\n    if n == 141:\n        return 1905\n    if n == 142:\n        return 1928\n    if n == 143:\n        return 1941\n    if n == 144:\n        return 1954\n    if n == 145:\n        return 1977\n    if n == 146:\n        return 1990\n    if n == 147:\n        return 2002\n    if n == 148:\n        return 2024\n    if n == 149:\n        return 2036\n    if n == 150:\n        return 2049\n    if n == 151:\n        return 2061\n    if n == 152:\n        return 2073\n    if n == 153:\n        return 2085\n    if n == 154:\n        return 2106\n    if n == 155:\n        return 2129\n    if n == 156:\n        return 2142\n    if n == 157:\n        return 2155\n    if n == 158:\n        return 2168\n    if n == 159:\n        return 2181\n    if n == 160:\n        return 2193\n    if n == 161:\n        return 2205\n    if n == 162:\n        return 2218\n    if n == 163:\n        return 2231\n    if n == 164:\n        return 2243\n    if n == 165:\n        return 2260\n    if n == 166:\n        return 2280\n    if n == 167:\n        return 2302\n    if n == 168:\n        return 2314"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i, sum = 0, 0\n    while i < n:\n        sum = sum + i\n        i += 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # if n is odd\n    if n % 2 == 1:\n        return n - (n // 2)\n    else:\n        return n // 2 * (n + 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n <= 1 else (n - 2) + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 1:\n        return n + sum_series(n - 1)\n    else:\n        return sum_series(n - 1) + sum_series(n - 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    poly_area = (s * l * (l + s)) / (4 * tan(pi/s))\n    return poly_area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    poly = s * (l**2/4 * tan(pi/l))\n    print poly\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l**2) / (4 * tan(pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon.\n    return (0.25 * s * l) / tan(pi/6)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l*(s**2)/(4*tan(pi/s)))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l/2)*(s**2)*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 * l) / (4 * tan(pi / l))\n    print(area)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*(s**2)*(tan(pi/s)))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2*tan(pi/s)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=0\n    for i in range(1,n//2+1):\n        if n%i==0:\n            s+=i\n    return s\ndef repeated_digits(n):\n    '''\n    Find the repeated digits in the number n.\n    '''\n    s=set()\n    d=0\n    if int(math.log10(n))>1:\n        while n>0:\n            d=(n%10)\n            if d in s:\n                return d\n            else:\n                s.add(d)\n            n//=10\n    else:\n        return n\ndef carry_digit(n):\n    '''\n    Find the carry digit in an integer.\n    '''\n    s=0\n    while n>0:\n        s=(n%10)\n        n//=10\n    return s\ndef sum_digits(n):\n    '''\n    Find the sum of the digits in the number n.\n    '''\n    s=0\n    while n>0:\n        s+=n%10\n        n//=10\n    return s\ndef prime_number(n):\n    '''\n    Find whether a number n is a prime number.\n    '''\n    for i in range(2,n//2+1):\n        if n%i==0:\n            return False\n    return True\ndef is_armstrong(n):\n    '''\n    Find whether a number n is an armstrong number.\n    '''\n    s=0\n    temp=n\n    while temp>0:\n        s+=temp%10**len(str(n))\n        temp//=10\n    if n==s:\n        return True\n    return False\ndef convert_to_base_k(n,k):\n    '''\n    Convert an integer n to a number in base k.\n    '''\n    if n==0:\n        return [0]\n    s=[]\n    while n>0:\n        s.append(n%k)\n        n//=k\n    return s[::-1]\ndef convert_from_base_k(n,k):\n    '''\n    Convert a number in base k to an integer n.\n    '''\n    if k==0:\n        return 0\n    s=0\n    for i in n:\n        s*=k\n        s+=i\n    return s\ndef is_palindrome(n):\n    '''\n    Check whether a number n is a palindrome number.\n    '''\n    return str(n)==str(n)[::-1]\ndef is_perfect_square(n):\n    '''\n    Find whether n is a perfect square.\n    '''\n    m=n**0.5\n    return m==int(m)\ndef is_perfect_square2(n):\n    '''\n    Find whether n is a perfect square using iteration.\n    '''\n    i=1\n    while n>i**2:\n        i+=1\n    if i**2==n:\n        return True\n    return False\ndef is_perfect_square3(n):\n    '''\n    Find whether n is a perfect square using Newton method.\n    '''\n    x=n**0.5\n    if x==int(x):\n        return True\n    return False\ndef is_perfect_square4(n):\n    '''\n    Find whether n is a perfect square using Newton method.\n    '''\n    x=n**0.5\n    if x%1==0:\n        return True\n    return False\ndef find_max_digits(n):\n    '''\n    Find the maximum number of digits in the number n.\n    '''\n    return int(math.log10(n))+1\ndef find_min_digits(n):\n    '''\n    Find the minimum number of digits in the number n.\n    '''\n    return int(math.log10(n))-1\ndef find_sum_digits(n):\n    '''\n    Find the sum of the digits in the number n.\n    '''\n    s=0\n    while n>0:\n        s+=n%10\n        n//=10\n    return s\ndef find_max_sub(n):\n    '''\n    Find the maximum sum of consecutive digits in the number n.\n    '''\n    s=0\n    max_s=0\n    for i in range(1,len(str(n))):\n        s=0\n        for j in range(len(str(n))):\n            if j+i<=len(str(n)):\n                s+=int(str(n)[j:j+i])\n        if s>max_s:\n            max_s=s\n    return max_s\ndef find_max_sub2(n):\n    '''\n    Find the maximum sum of consecutive digits in the number n.\n    '''\n    s=0\n    max_s=0\n    for i in range(1,len(str(n))):\n        if int(str(n)[i])>int(str(n)[i-1]):\n            s+=int(str(n)[i])-int(str(n)[i-1])\n        else:\n            s+=int(str(n)[i-1])-int(str(n)[i])\n        if s>max_s:\n            max_s=s\n    return max_s\ndef find_max_sub3(n):\n    '''\n    Find the maximum sum of consecutive digits in the number n.\n    '''\n    s=0\n    max_s=0\n    for i in range(1,len(str(n))):\n        if int(str(n)[i])>int(str(n)[i-1]):\n            s+=int(str(n)[i])-int(str(n)[i-1])\n        else:\n            s+=int(str(n)[i-1])-int(str(n)[i])\n        if s>max_s:\n            max_s=s\n    return max_s\ndef is_armstrong_iter(n):\n    '''\n    Find whether a number n is an armstrong number.\n    '''\n    s=0\n    temp=n\n    while temp>0:\n        s+=temp%10**len(str(n))\n        temp//=10\n    if n==s:\n        return True\n    return False\ndef is_armstrong_recur(n):\n    '''\n    Find whether a number n is an armstrong number.\n    '''\n    if len(str(n))==1:\n        return n==1\n    s=0\n    temp=n\n    while temp>0:\n        s+=temp%10**(len(str(n))-1)\n        temp//=10\n    if n==s:\n        return True\n    return False\ndef find_perfect_squares(n):\n    '''\n    Find the perfect squares of a number n.\n    '''\n    s=[]\n    i=1\n    while i**2<=n:\n        if n%i==0:\n            s.append(i)\n        i+=1\n    return s\ndef is_strictly_increasing(n):\n    '''\n    Find whether a number n is strictly increasing.\n    '''\n    for i in range(1,len(str(n))):\n        if int(str(n)[i-1])>int(str(n)[i]):\n            return False\n    return True\ndef is_strictly_decreasing(n):\n    '''\n    Find whether a number n is strictly decreasing.\n    '''\n    for i in range(1,len(str(n))):\n        if int(str(n)[i-1])<int(str(n)[i]):\n            return False\n    return True\ndef is_strictly_increasing2(n):\n    '''\n    Find whether a number n is strictly increasing.\n    '''\n    s=str(n)\n    if s[0]<s[1]:\n        for i in range(1,len(s)):\n            if s[i-1]>s[i]:\n                return False\n    else:\n        return False\n    return True\ndef is_strictly_decreasing2(n):\n    '''\n    Find whether a number n is strictly decreasing.\n    '''\n    s=str(n)\n    if s[0]"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = []\n    #get divisor\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            divisor.append(i)\n            if i!=n/i:\n                divisor.append(int(n/i))\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = abs(n)\n    s = 0\n    for i in range(1, n):\n        if n%i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,int(math.sqrt(n))+1): \n        if n%i == 0: \n            if int(n/i) == i: \n                return True\n            else: \n                if i*i == n: \n                    return False\n                else: \n                    return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    res = 0\n    if n == 1:\n        return 0\n    sqrt = int(math.sqrt(n))\n    for i in range(2, sqrt + 1):\n        if n % i == 0:\n            res += i + n / i\n    return res\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    t = div(n)\n    s = sum(t)\n    if n == s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #factor the input number\n    divisors = [1,2]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i!= n/i:\n                divisors.append(i)\n                divisors.append(n/i)\n    divisors.sort()\n    #check if the sum is the same\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n_divisors = 0\n    #print(\"n: \",n)\n    for i in range(1,n):\n        if n%i == 0:\n            #print(i)\n            n_divisors += i\n    return n_divisors\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    str_n = str(n)\n    for i in range(0,int(len(str_n)/2)):\n        if str_n[i]!= str_n[len(str_n)-i-1]:\n            return False\n    return True\n    \ndef is_pandigital(n):\n    '''\n    Write a function to check if a number is a pandigital\n    '''\n    str_n = str(n)\n    if len(str_n)!= 9:\n        return False\n    for i in range(1,10):\n        if str_n.count(str(i))!= 1:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2,int(math.sqrt(n))):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_truncatable(n):\n    '''\n    Write a function to check if the number is truncatable\n    '''\n    n = str(n)\n    n_len = len(n)\n    if n_len < 2:\n        return False\n    for i in range(1,n_len):\n        if n[i:] == n[0:n_len-i]:\n            return True\n    return False\n    \ndef is_pythagorean(n):\n    '''\n    Write a function to check if a number is a pythagorean triple\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(n))\n        if sqrt_n * sqrt_n == n:\n            return True\n    return False\n    \ndef is_pentagonal(n):\n    '''\n    Write a function to check if a number is pentagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+24*n))\n        if sqrt_n * sqrt_n == n + 1:\n            return True\n    return False\n    \ndef is_heptagonal(n):\n    '''\n    Write a function to check if a number is heptagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 2:\n            return True\n    return False\n    \ndef is_octagonal(n):\n    '''\n    Write a function to check if a number is octagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+12*n))\n        if sqrt_n * sqrt_n == n + 3:\n            return True\n    return False\n    \ndef is_neptagonal(n):\n    '''\n    Write a function to check if a number is neptagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+24*n))\n        if sqrt_n * sqrt_n == n + 4:\n            return True\n    return False\n    \ndef is_decagonal(n):\n    '''\n    Write a function to check if a number is decagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+40*n))\n        if sqrt_n * sqrt_n == n + 5:\n            return True\n    return False\n    \ndef is_hexagonal(n):\n    '''\n    Write a function to check if a number is hexagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6:\n            return True\n    return False\n    \ndef is_hexagonal_and_right_triangular(n):\n    '''\n    Write a function to check if a number is hexagonal and right-triangular\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 0:\n            return True\n    return False\n    \ndef is_hexagonal_and_left_triangular(n):\n    '''\n    Write a function to check if a number is hexagonal and left-triangular\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 1:\n            return True\n    return False\n    \ndef is_hexagonal_and_right_pentagonal(n):\n    '''\n    Write a function to check if a number is hexagonal and right-pentagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 2:\n            return True\n    return False\n    \ndef is_hexagonal_and_left_pentagonal(n):\n    '''\n    Write a function to check if a number is hexagonal and left-pentagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 3:\n            return True\n    return False\n    \ndef is_hexagonal_and_right_hexagonal(n):\n    '''\n    Write a function to check if a number is hexagonal and right-hexagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 4:\n            return True\n    return False\n    \ndef is_hexagonal_and_left_hexagonal(n):\n    '''\n    Write a function to check if a number is hexagonal and left-hexagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 5:\n            return True\n    return False\n    \ndef is_hexagonal_and_heptagonal(n):\n    '''\n    Write a function to check if a number is hexagonal and heptagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 6:\n            return True\n    return False\n    \ndef is_hexagonal_and_octagonal(n):\n    '''\n    Write a function to check if a number is hexagonal and octagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 7:\n            return True\n    return False\n    \ndef is_hexagonal_and_nonagonal(n):\n    '''\n    Write a function to check if a number is hexagonal and nonagonal\n    '''\n    if n > 0:\n        sqrt_n = int(math.sqrt(1+8*n))\n        if sqrt_n * sqrt_n == n + 6 and n % 6 == 8:\n            return True\n    return False\n    \ndef is_hexagonal_and_decagonal(n):\n    '''\n    Write a function to check if a number is hexagona"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = sum([i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0])\n    if s == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # if n % 2 == 0: \n    #     return True\n    # else: \n    #     for i in range(3, n // 2, 2): \n    #         if (n % i == 0): \n    #             return False \n    #     return True \n    return sum(i for i in range(1, math.floor(n ** 0.5) + 1) if n % i == 0) == n // 2\ndef prime(n): \n    '''\n    Write a function to check if a number is a prime number. \n    '''\n    if n == 2: \n        return True \n    if n % 2 == 0: \n        return False \n    if n < 2: \n        return False \n    if n % 3 == 0: \n        return False \n    for i in range(5, math.floor(math.sqrt(n)) + 1, 6): \n        if n % i == 0 and n // i!= i: \n            return False \n    return True \ndef relative_order(a, b): \n    '''\n    Write a function to check the relative order of two numbers in the set [0,1,2,\u2026,n]. \n    '''\n    for i in range(3, b + 1): \n        if a ** i > b ** i: \n            return False \n    return True \ndef totient(n): \n    '''\n    Write a function to calculate the value of Euler's totient function for a given integer n.\n    '''\n    count = 0 \n    for i in range(1, n + 1): \n        if math.gcd(i, n) == 1: \n            count += 1 \n    return count \ndef is_prime(n): \n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    if n < 2: \n        return False \n    if n == 2: \n        return True \n    if n % 2 == 0: \n        return False \n    for i in range(3, math.floor(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False \n    return True \ndef is_triangle(n): \n    '''\n    Write a function to check if a triangle number is a triangle number. \n    '''\n    if (n ** 0.5).is_integer() == True: \n        return False \n    return n == n // 2 + 1 \ndef is_pentagonal(n): \n    '''\n    Write a function to check if a pentagonal number is a pentagonal number. \n    '''\n    if (n ** 0.5).is_integer() == True: \n        return False \n    return n == n * (3 * (n ** 2) + 1) // 4 \ndef is_hexagonal(n): \n    '''\n    Write a function to check if a hexagonal number is a hexagonal number. \n    '''\n    if (n ** 0.5).is_integer() == True: \n        return False \n    return n == n * (2 * (n ** 2) + 1) // 4 \ndef is_heptagonal(n): \n    '''\n    Write a function to check if a heptagonal number is a heptagonal number. \n    '''\n    if (n ** 0.5).is_integer() == True: \n        return False \n    return n == n * (5 * (n ** 2) + 2) // 8 \ndef is_octagonal(n): \n    '''\n    Write a function to check if a octagonal number is a octagonal number. \n    '''\n    if (n ** 0.5).is_integer() == True: \n        return False \n    return n == n * (3 * (n ** 2) + 2) // 8 \ndef is_octagon(n): \n    '''\n    Write a function to check if a octagon number is a octagon number. \n    '''\n    if (n ** 0.5).is_integer() == True: \n        return False \n    return n == n * (2 * (n ** 2) - 1) // 2 \ndef is_square(n): \n    '''\n    Write a function to check if a number is a square number. \n    '''\n    return math.sqrt(n).is_integer() == True \ndef is_right_angle(a, b, c): \n    '''\n    Write a function to check if a right angle triangle is a right angle triangle. \n    '''\n    return a ** 2 + b ** 2 == c ** 2 \ndef is_pentagonal_double(n): \n    '''\n    Write a function to check if a pentagonal number is a double-digit pentagonal number. \n    '''\n    return n == n * (3 * (n ** 2) + 1) // 4 \ndef is_square_double(n): \n    '''\n    Write a function to check if a square number is a double-digit square number. \n    '''\n    return n == n * (2 * (n ** 2) + 1) // 4 \ndef is_hexagonal_double(n): \n    '''\n    Write a function to check if a hexagonal number is a double-digit hexagonal number. \n    '''\n    return n == n * (2 * (n ** 2) + 1) // 4 \ndef is_heptagonal_double(n): \n    '''\n    Write a function to check if a heptagonal number is a double-digit heptagonal number. \n    '''\n    return n == n * (5 * (n ** 2) + 2) // 8 \ndef is_octagonal_double(n): \n    '''\n    Write a function to check if a octagonal number is a double-digit octagonal number. \n    '''\n    return n == n * (3 * (n ** 2) + 2) // 8 \ndef is_octagon_double(n): \n    '''\n    Write a function to check if a octagon number is a double-digit octagonal number. \n    '''\n    return n == n * (2 * (n ** 2) - 1) // 2 \ndef is_pentagonal_triple(n): \n    '''\n    Write a function to check if a pentagonal number is a triple-digit pentagonal number. \n    '''\n    return n == n * (3 * (n ** 2) + 1) // 4 \ndef is_hexagonal_triple(n): \n    '''\n    Write a function to check if a hexagonal number is a triple-digit hexagonal number. \n    '''\n    return n == n * (2 * (n ** 2) + 1) // 4 \ndef is_heptagonal_triple(n): \n    '''\n    Write a function to check if a heptagonal number is a triple-digit heptagonal number. \n    '''\n    return n == n * (5 * (n ** 2) + 2) // 8 \ndef is_octagonal_triple(n): \n    '''\n    Write a function to check if a octagonal number is a triple-digit octagonal number. \n    '''\n    return n == n * (3 * (n ** 2) + 2) // 8 \ndef is_octagon_triple(n): \n    '''\n    Write a function to check if a octagon number is a triple-digit octagonal number. \n    '''\n    return n == n * (2 * (n ** 2) - 1) // 2 \ndef is_pentagonal_n_times(n): \n    '''\n    Write a function to check if a pentagonal number is a pentagonal number n times. \n    '''\n    return n == n * (3 * (n ** 2) + 1) // 4 \ndef is_hexagonal_n_times(n): \n    '''\n    Write a function to check if a hexagonal number is a hexagonal number n times. \n    '''\n    return n == n * (2 * (n ** 2) + 1) // 4 \ndef is_heptagonal_n_times(n): \n    '''\n    Write a function to check if a heptagonal number is a heptagonal number n times. \n    '''\n    return n == n * (5 * "
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    counts = {}\n    for letter in alphabet:\n        counts[letter] = 0\n    \n    for i in range(len(str1)):\n        counts[str1[i]] = counts[str1[i]] + 1\n    \n    return counts\n    \n    \ndef count_char_position_2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    counts = {}\n    for letter in 'abcdefghijklmnopqrstuvwxyz':\n        counts[letter] = str1.lower().count(letter)\n    \n    return counts\n    \n    \ndef compare_strings(str1, str2):\n    '''\n    Write a function that returns true if the given strings are equal or differ in exactly one character, and false otherwise.\n    '''\n    \n    # Uncomment the line below to see the result\n    #print str1, str2\n    \n    if str1 == str2:\n        return True\n    \n    if str1.lower() == str2.lower():\n        return False\n    \n    # count_char_position_2 takes less time\n    # count_char_position takes less time\n    \n    #count_char_position_2(str1), count_char_position(str2)\n    \n    counts1 = count_char_position_2(str1)\n    counts2 = count_char_position_2(str2)\n    \n    for letter in counts1:\n        if counts1[letter]!= counts2[letter]:\n            return False\n    \n    return True\n    \n    \ndef compare_strings_2(str1, str2):\n    '''\n    Write a function that returns true if the given strings are equal or differ in exactly one character, and false otherwise.\n    '''\n    \n    if str1 == str2:\n        return True\n    \n    # Uncomment the line below to see the result\n    #print str1, str2\n    \n    if str1.lower() == str2.lower():\n        return False\n    \n    # count_char_position_2 takes less time\n    # count_char_position takes less time\n    \n    #count_char_position_2(str1), count_char_position(str2)\n    \n    counts1 = count_char_position_2(str1)\n    counts2 = count_char_position_2(str2)\n    \n    if len(counts1)!= len(counts2):\n        return False\n    \n    for letter in counts1:\n        if counts1[letter]!= counts2[letter]:\n            return False\n    \n    return True\n    \n    \ndef validate_password(password):\n    '''\n    Write a function that determines whether or not the given password is valid.\n    A password is valid if it:\n    - has at least 8 characters\n    - has at least one uppercase letter\n    - has at least one lowercase letter\n    - has at least one number\n    - has at least one special character\n    '''\n    \n    # Uncomment the line below to see the result\n    #print password\n    \n    if len(password) < 8:\n        return False\n    \n    uppercase_letters = 0\n    lowercase_letters = 0\n    numbers = 0\n    special_characters = 0\n    \n    for letter in password:\n        if letter.isupper():\n            uppercase_letters = 1\n        if letter.islower():\n            lowercase_letters = 1\n        if letter.isdigit():\n            numbers = 1\n        if letter in '!@#$%^&*()':\n            special_characters = 1\n            \n    if uppercase_letters == 0 or lowercase_letters == 0 or numbers == 0 or special_characters == 0:\n        return False\n    \n    return True\n    \n    \ndef validate_password_2(password):\n    '''\n    Write a function that determines whether or not the given password is valid.\n    A password is valid if it:\n    - has at least 8 characters\n    - has at least one uppercase letter\n    - has at least one lowercase letter\n    - has at least one number\n    - has at least one special character\n    '''\n    \n    # Uncomment the line below to see the result\n    #print password\n    \n    if len(password) < 8:\n        return False\n    \n    uppercase_letters = 0\n    lowercase_letters = 0\n    numbers = 0\n    special_characters = 0\n    \n    for letter in password:\n        if letter.isupper():\n            uppercase_letters = 1\n        if letter.islower():\n            lowercase_letters = 1\n        if letter.isdigit():\n            numbers = 1\n        if letter in '!@#$%^&*()':\n            special_characters = 1\n            \n    if uppercase_letters == 0 or lowercase_letters == 0 or numbers == 0 or special_characters == 0:\n        return False\n    \n    return True\n    \n    \ndef palindromic_string(str1):\n    '''\n    Write a function that determines whether or not the given string is a palindrome.\n    A palindrome is a string that reads the same forwards and backwards.\n    '''\n    \n    # Uncomment the line below to see the result\n    #print str1\n    \n    if len(str1) <= 1:\n        return True\n    \n    if str1[0] == str1[-1]:\n        return palindromic_string(str1[1:-1])\n    \n    return False\n    \n    \ndef palindromic_string_2(str1):\n    '''\n    Write a function that determines whether or not the given string is a palindrome.\n    A palindrome is a string that reads the same forwards and backwards.\n    '''\n    \n    if len(str1) <= 1:\n        return True\n    \n    if str1[0] == str1[-1]:\n        return palindromic_string(str1[1:-1])\n    \n    return False\n    \n    \ndef password_breached(username, password):\n    '''\n    Write a function that determines whether or not the given username and password have been breached.\n    A password is breached if it:\n    - has at least three uppercase letters\n    - has at least three lowercase letters\n    - has at least one number\n    - has at least one special character\n    '''\n    \n    # Uncomment the line below to see the result\n    #print username, password\n    \n    uppercase_letters = 0\n    lowercase_letters = 0\n    numbers = 0\n    special_characters = 0\n    \n    for letter in password:\n        if letter.isupper():\n            uppercase_letters = 1\n        if letter.islower():\n            lowercase_letters = 1\n        if letter.isdigit():\n            numbers = 1\n        if letter in '!@#$%^&*()':\n            special_characters = 1\n            \n    if uppercase_letters >= 3 and lowercase_letters >= 3 and numbers >= 1 and special_characters >= 1:\n        return True\n    \n    return False\n    \n    \ndef password_breached_2(username, password):\n    '''\n    Write a function that determines whether or not the given username and password have been breached.\n    A password is breached if it:\n    - has at least three uppercase letters\n    - has at least three lowercase letters\n    - has at least one number\n    - has at least one special character\n    '''\n    \n    # Uncomment the line below to see the result\n    #print username, password\n    \n    uppercase_letters = 0\n    lowercase_letters = 0\n    numbers = 0\n    special_characters = 0\n    \n    for letter in password:\n        if letter.isupper():\n            uppercase_letters = 1\n        if letter.islower():\n            lowercase_letters = 1\n        if letter.isdigit():\n            numbers = 1\n        if letter in '!@#$%^&*()':\n            special_characters = 1\n            \n    if uppercase_letters >= 3 an"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if len(str1) < 2:\n        return 0\n    alphabet = {'a':'A', 'b':'B', 'c':'C', 'd':'D', 'e':'E', 'f':'F', 'g':'G', 'h':'H', 'i':'I', 'j':'J', 'k':'K', 'l':'L','m':'M', 'n':'N', 'o':'O', 'p':'P', 'q':'Q', 'r':'R','s':'S', 't':'T', 'u':'U', 'v':'V', 'w':'W', 'x':'X', 'y':'Y', 'z':'Z'}\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    sorted_str = sorted(str1.lower())\n    sorted_str.append('0')\n    sorted_str = ''.join(sorted_str)\n    return str(sorted_str.count(sorted_str))\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if ord(str1[i]) - ord('A') == i:\n                    print(\"count\", i, \"is upper\",str1[i])\n                else:\n                    print(\"count\", i, \"is not upper\",str1[i])\n            else:\n                if ord(str1[i]) - ord('a') == i:\n                    print(\"count\", i, \"is lower\",str1[i])\n                else:\n                    print(\"count\", i, \"is not lower\",str1[i])\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if ord(str1[i].lower()) >= ord(\"a\") and ord(str1[i].lower()) <= ord(\"z\"):\n            if str1[i].lower() in d:\n                d[str1[i].lower()] += 1\n            else:\n                d[str1[i].lower()] = 1\n    return d\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict_count = {}\n    for c in str1:\n        if c in dict_count:\n            dict_count[c] += 1\n        else:\n            dict_count[c] = 1\n    return dict_count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == \"a\":\n            result += 1\n    return result\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_pos = {}\n    for c in range(0, 26):\n        char_pos[c] = 0\n    for i in range(0, len(str1)):\n        num = ord(str1[i])\n        if num >= 97 and num <= 122:\n            char_pos[num - 97] += 1\n    return char_pos\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = str1.lower()\n    char_dict = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    count = 0\n    for char in str2:\n        if char in char_dict:\n            count += char_dict[char]\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0: \n                count += 1\n    return count \n    \ndef find_even_triple(A):\n    '''\n    Write a function that counts the number of triples of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] ^ A[j] ^ A[k]) & 1 == 0: \n                    count += 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # A = [0,1,2,3,4,5,6,7,8,9,10]\n    # Sum = 0\n    # for i in range(len(A)):\n    #     for j in range(i+1, len(A)):\n    #         if A[i]^A[j]%2 == 0:\n    #             print \"i, j = \" + str(i) + \", \" + str(j) + \" | A[i], A[j] = \" + str(A[i]) + \", \" + str(A[j])\n    #             Sum += 1\n    # print \"Total pairs = \" + str(Sum)\n    # return Sum\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for i in A:\n        for j in A:\n            if i!= j and (i ^ j) % 2 == 0:\n                result += 1\n    return result\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    A.sort()\n    xor = 0\n    even = 0\n    for i in range(1, len(A)):\n        xor = A[i] ^ A[i-1]\n        if xor & 0x01 == 0:\n            even += 1\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] & 1 == 0 and A[j] & 1 == 0:\n                xor_even_pairs += 1\n    return xor_even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for index in range(len(A)):\n        if (A[index] ^ A[index+1]) % 2 == 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    #this is a brute force solution, with nested loops.\n    \n    #count = 0\n    #for i in range(len(A)):\n    #    for j in range(i+1,len(A)):\n    #        if (A[i]^A[j])%2==0:\n    #            count+=1\n    \n    #return count\n    \n    #this is a more concise and cleaner version, using XORs.\n    return sum(a^b for a, b in zip(A, A[1:])) // 2\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    seen = {}\n    count = 0\n    for a in A:\n        if a not in seen:\n            seen[a] = True\n        else:\n            if seen[a] == True:\n                seen[a] = False\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    odd_count = 0\n    for i in A: \n        if i & 1: \n            odd_count += 1\n    \n    return odd_count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # B = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    \n    # return B.count(xor(A, B))\n    return sum(bin(x).count('1') % 2 for x in A)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    m = 1\n    while (m < n):\n        m = m * 2\n    return m\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return (1<<int(ceil(log(n,2))))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    while n & (n - 1): #while n is not a power of 2\n        n = n + 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pw = 1\n    while (pw < n):\n        pw *= 2\n    return pw\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = math.ceil(math.log2(n))\n    return pow(2, l)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return 1 << (n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    result = 1\n    while result <= n:\n        result = result * 2\n    return result\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p <= n:\n        p = p * 2\n    return p\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if len(a)==0:\n        return 0\n    if a[0]==x:\n        return 1 + frequency(a[1:],x)\n    return frequency(a[1:],x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in x:\n        if i==x:\n            c=c+1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    \n    return count\n    \ndef factorial(n):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    \n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial*i\n        \n    return factorial\n    \ndef combination(n,r):\n    '''\n    Write a function to find the number of possible combinations in a set of n items.\n    '''\n    \n    return factorial(n)/(factorial(r)*factorial(n-r))\n    \ndef permutation(n,r):\n    '''\n    Write a function to find the number of possible permutations in a set of n items.\n    '''\n    \n    return factorial(n)/factorial(n-r)\n    \ndef lcm(a,b):\n    '''\n    Write a function to calculate the least common multiple of two numbers.\n    '''\n    \n    n = max(a,b)\n    while True:\n        if (n%a == 0) and (n%b == 0):\n            return n\n        n = n + 1\n        \ndef gcd(a,b):\n    '''\n    Write a function to calculate the greatest common divisor of two numbers.\n    '''\n    \n    return a/lcm(a,b)\n    \ndef bezout(a,b):\n    '''\n    Write a function to calculate the GCD and Bezout coefficients of two numbers.\n    '''\n    \n    if a == 0:\n        return (b,0,1)\n    else:\n        g,x,y = bezout(b%a,a)\n        return (g,y-(b//a)*x,x)\n    \ndef modulo(a,b):\n    '''\n    Write a function to calculate the remainder of a division between two numbers.\n    '''\n    \n    return a - (b*(a//b))\n    \ndef addmod(a,b,m):\n    '''\n    Write a function to add a number to a given number modulo a number.\n    '''\n    \n    return (a+b)%m\n    \ndef subtractmod(a,b,m):\n    '''\n    Write a function to subtract a number from a given number modulo a number.\n    '''\n    \n    return (a-b)%m\n    \ndef multiplymod(a,b,m):\n    '''\n    Write a function to multiply a number to a given number modulo a number.\n    '''\n    \n    return (a*b)%m\n    \ndef dividemod(a,b,m):\n    '''\n    Write a function to divide a number by a given number modulo a number.\n    '''\n    \n    return (a*bezout(b,m)[2])%m\n    \ndef fibonacci(n):\n    '''\n    Write a function to calculate nth Fibonacci number.\n    '''\n    \n    if n == 1 or n == 2:\n        return 1\n    else:\n        return (fibonacci(n-1)+fibonacci(n-2))\n    \ndef matrixmultiply(a,b):\n    '''\n    Write a function to multiply two matrices using matrix multiplication.\n    '''\n    \n    if len(a[0]) == len(b):\n        return [[sum([a[i][k]*b[k][j] for k in range(len(b[0]))]) for j in range(len(b[0]))] for i in range(len(a))]\n    else:\n        print(\"The matrices are not compatible for multiplication.\")\n        \ndef matrixaddition(a,b):\n    '''\n    Write a function to add two matrices using matrix addition.\n    '''\n    \n    if len(a) == len(b) and len(a[0]) == len(b[0]):\n        return [[a[i][j]+b[i][j] for j in range(len(a[0]))] for i in range(len(a))]\n    else:\n        print(\"The matrices are not compatible for addition.\")\n        \ndef inversematrix(a):\n    '''\n    Write a function to invert a given matrix.\n    '''\n    \n    n = len(a)\n    indices = list(range(n))\n    \n    for fd in range(n):\n        if a[fd][fd] == 0:\n            for i in range(n):\n                if a[fd][i]!= 0:\n                    a[fd][fd],a[i][fd] = a[i][fd],a[fd][fd]\n                    indices[fd],indices[i] = indices[i],indices[fd]\n                    break\n        for i in range(fd+1,n):\n            if a[i][fd]!= 0:\n                factor = a[i][fd]/a[fd][fd]\n                for j in range(n):\n                    a[i][j] = a[i][j] - (factor*a[fd][j])\n    \n    for i in range(n):\n        a[i][fd] = (1/a[fd][fd])\n        for j in range(n):\n            a[i][j] = a[i][j]*(-1)\n        \n    for i in range(len(indices)):\n        indices[i] = indices[i] + 1\n        \n    for i in range(len(indices)):\n        indices[i] = indices[i] - 1\n        \n    for i in range(len(a)):\n        for j in range(len(a)):\n            a[i][j] = a[i][j]*indices[i]\n    \n    return a\n    \ndef eigenvector(a):\n    '''\n    Write a function to calculate the eigenvector of a matrix.\n    '''\n    \n    n = len(a)\n    if n == 2:\n        x = a[0][0]\n        y = a[1][0]\n        \n        a = [[a[0][1],a[1][1]],[a[1][0],a[0][0]]]\n        \n        eigenvalue,eigenvector = eigenvalue(a)\n        \n        if eigenvalue == 0:\n            return eigenvector\n        else:\n            return (x+eigenvalue*y,y-eigenvalue*x)\n    \n    if n == 3:\n        x = a[0][0]\n        y = a[1][0]\n        z = a[2][0]\n        \n        a = [[a[0][1],a[1][1],a[2][1]],[a[1][0],a[1][1],a[1][2]],[a[2][0],a[2][1],a[2][2]]]\n        \n        eigenvalue,eigenvector = eigenvalue(a)\n        \n        if eigenvalue == 0:\n            return eigenvector\n        else:\n            return (x+eigenvalue*(y+z),y+eigenvalue*(x-z),z+eigenvalue*(x+y))\n    \n    if n == 4:\n        x = a[0][0]\n        y = a[1][0]\n        z = a[2][0]\n        w = a[3][0]\n        \n        a = [[a[0][1],a[1][1],a[2][1],a[3][1]],[a[1][0],a[1][1],a[1][2],a[1][3]],[a[2][0],a[2][1],a[2][2],a[2][3]],[a[3][0],a[3][1],a[3][2],a[3][3]]]\n        \n        eigenvalue,eigenvector = eigenvalue(a)\n        \n        if eigenvalue == 0:\n            return eigenvector\n        else:\n            return (x+eigenvalue*(y+z+w),y+eigenvalue*(x-w),z+eigenvalue*(x+y),w+eigenvalue*(x+z))\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    #takes a list and returns a dictionary, key is the number, value is the count\n    \n    #initialize count\n    c = 0\n    \n    #for each item in the list\n    for i in a:\n        \n        #if i is equal to x\n        if i == x:\n            \n            #increment count\n            c += 1\n    \n    #return dictionary with count of x\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    occur = 0\n    for elem in a:\n        if elem == x:\n            occur += 1\n    return occur\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n=len(a)\n    count=0\n    for i in range(0,n):\n        if x==a[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # the_list = [1,2,3,1,1,1,4,5,6,7,8,9,8,7,6,5,4,3,2,1]\n    the_list = a\n    freq = 0\n    for i in the_list:\n        if x == i:\n            freq += 1\n    return freq\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num_times = 0\n    for element in a:\n        if element == x:\n            num_times += 1\n    return num_times\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0, len(a)): \n        if x == a[i]: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(m, n):                                                                                                                                                                                                    \n        sum_list.append(list1[i])                                                                                                                                                                                                \n    print \"Sum of range: \", sum(sum_list)                                                                                                                                                                                                    \n    \ndef get_data():                                                                                                                                                                                                                                                                            \n    '''\n    Import the three columns of data from the file to a list of lists.\n    '''\n    data = open('data.txt', 'r')\n    list_of_lists = []\n    for line in data:                                                                                                                                                                                                                                                                                                                \n        list1 = []                                                                                                                                                                                                                                                                                                                                                \n        for i in line.split():                                                                                                                                                                                                                                                                                                                                                \n            list1.append(i)                                                                                                                                                                                                                                                                                                                                                \n        list_of_lists.append(list1)                                                                                                                                                                                                                                                                                                                                                \n    return list_of_lists                                                                                                                                                                                                                                                                                                                                                \n    \ndef get_data_2():                                                                                                                                                                                                                                                                                                                                                \n    '''\n    Import the three columns of data from the file to a list of lists.\n    '''\n    data = open('data.txt', 'r')\n    list_of_lists = []\n    for line in data:                                                                                                                                                                                                                                                                                                                                                \n        list1 = []                                                                                                                                                                                                                                                                                                                                                \n        for i in line.split():                                                                                                                                                                                                                                                                                                                                                \n            list1.append(i)                                                                                                                                                                                                                                                                                                                                                \n        list_of_lists.append(list1)                                                                                                                                                                                                                                                                                                                                                \n    return list_of_lists                                                                                                                                                                                                                                                                                                                                                \n    \ndef get_data_3():                                                                                                                                                                                                                                                                                                                                                \n    '''\n    Import the three columns of data from the file to a list of lists.\n    '''\n    data = open('data.txt', 'r')\n    list_of_lists = []\n    for line in data:                                                                                                                                                                                                                                                                                                                                                \n        list1 = []                                                                                                                                                                                                                                                                                                                                                \n        for i in line.split():                                                                                                                                                                                                                                                                                                                                                \n            list1.append(i)                                                                                                                                                                                                                                                                                                                                                \n        list_of_lists.append(list1)                                                                                                                                                                                                                                                                                                                                                \n    return list_of_lists                                                                                                                                                                                                                                                                                                                                                \n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                                                                                                                    \n        return sum(list1[m:n+1])\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list2 = list1[m:n+1]\n    sum_list = 0\n    for element in list2:\n        sum_list += element\n    return sum_list\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for element in list1:\n        if element >= m and element <= n:\n            result += element\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (math.sqrt(5) / 2) * (a * 4)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 7\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a * 9\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a * 3\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a * 4\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return a * 4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 8\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 10\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 9\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 12\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 10\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 12\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 13\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 15\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 12\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 14\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 16\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 15\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 14\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 16\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 17\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 15\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 17\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 16\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 18\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 17\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 17\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 19\ndef perimeter_octagon(a):\n    '''\n    Writ"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # check inputs\n    if not isinstance(a, int) or not isinstance(a, float):\n        return 'Invalid input: Please enter a number'\n    \n    a = float(a)\n    if a <= 0:\n        return 'Invalid input: Please enter a positive number'\n    \n    # compute perimeter\n    p = 5*a\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a**2) / (4 * math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a) + (3 * math.sqrt(5) * (a ** 2))\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*math.pi/2.0\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a * math.sqrt(5)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 30*a\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    n = len(s)\n    \n    index = 0\n    count = 0\n    \n    while index < n:\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s=s.lower()\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) < 3:\n        return 0\n    else:\n        if s[0:3] =='std':\n            return 1 + count_occurance(s[3:])\n        else:\n            return count_occurance(s[1:])\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    res = s.count('std')\n    return res\n    \ndef swap_word(s):\n    '''\n    Write a function to swap the word 'book' in a given string with the word'sheet'.\n    '''\n    res = s.replace('book','sheet')\n    return res\n    \ndef get_even_numbers(s):\n    '''\n    Write a function to get all the even numbers from an array.\n    '''\n    res = [i for i in s if i % 2 == 0]\n    return res\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the string.\n    '''\n    res = s[::-1]\n    return res\n    \ndef get_first_n_occurance(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    res = s.find('std')\n    return res\n    \ndef get_first_n_occurance_v2(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    res = s.find('std', res + 1)\n    return res\n    \ndef get_first_n_occurance_v3(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    res = s.find('std', res + 1)\n    return res\n    \ndef get_first_n_occurance_v4(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v5(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v6(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v7(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v8(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v9(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v10(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v11(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v12(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v13(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v14(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v15(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v16(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v17(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v18(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v19(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v20(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v21(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v22(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v23(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v24(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v25(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v26(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v27(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v28(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v29(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v30(s, n):\n    '''\n    Write a function to get the first n occurance of the substring'std'.\n    '''\n    return s.find('std', res + 1)\n    \ndef get_first_n_occurance_v31(s, n):\n    '''\n    Write a function t"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = 0\n    if s.find('std')!= -1:\n        occurance += 1\n    if s.find('std', 3)!= -1:\n        occurance += 1\n    if s.find('std', 6)!= -1:\n        occurance += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    i=0\n    count = 0\n    while i<len(s)-3:\n        if s[i:i+3] =='std':\n            count = count + 1\n        i=i+1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 2:\n        return False\n    else:\n        for elem in test_tuple:\n            if type(elem)!= type(test_tuple[0]):\n                return False\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = eval(test_tuple)\n    all_type = True\n    for i in test_tuple:\n        if type(i) not in [str, int, float]:\n            all_type = False\n    return all_type\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    all_elements_are_same_type = True\n    data_type = test_tuple[0]\n    for i in range(1,len(test_tuple)):\n        if data_type!= test_tuple[i]:\n            all_elements_are_same_type = False\n    return all_elements_are_same_type\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 0:\n        data_type = type(test_tuple[0])\n        for i in test_tuple:\n            if type(i)!= data_type:\n                print ('Tuple contains different data type')\n                return\n        print ('Tuple contains same data type')\n    else:\n        print ('Tuple is empty')\n        \ncheck_type(tuple1)\ncheck_type(tuple2)"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        return False\n    for elem in test_tuple:\n        if type(elem)!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(type(test_tuple))\n    for i in test_tuple:\n        print(type(i))\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(i) is type(test_tuple[0]) for i in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple_type = type(test_tuple)\n    if test_tuple_type == tuple:\n        print('All the elements in a tuple have the same data type')\n    else:\n        print('Not all the elements in a tuple have the same data type')\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n <= 0:\n        return False\n    return (n * x) / n > (n-1) / 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = len(arr)-1\n    while l<=r:\n        mid = (l+r)/2\n        if arr[mid] == x:\n            return True\n        if arr[mid] < x:\n            l = mid+1\n        else:\n            r = mid-1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[n // 2] == x:\n        return True\n    if arr[n // 2] == x:\n        return True\n    return is_majority(arr, n // 2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # i, count = 0, 0\n    # while i < n:\n    #     if arr[i] == x:\n    #         count += 1\n    #     i += 1\n    # return count > n/2\n    start, end = 0, n-1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return True\n            end = mid - 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n / 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #using the naive method of counting and comparing\n    #if len(arr) == 1:\n    #    if arr[0] == x:\n    #        return True\n    #    else:\n    #        return False\n    #count = 0\n    #for i in range(len(arr)):\n    #    if arr[i] == x:\n    #        count += 1\n    #if count > len(arr) / 2:\n    #    return True\n    #else:\n    #    return False\n    #using the better method\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == x:\n            count += 1\n        elif count == 1:\n            pass\n        else:\n            count -= 1\n    if count > len(arr) / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return (arr.count(x) > n/2)\n    \n    \ndef is_subset(arr1, arr2):\n    '''\n    Write a function that takes in two non-empty arrays of integers, arr1 and arr2, and returns True if one of the arrays is a subset of the other, and False otherwise. Both arrays are non-empty and contain only unique values.\n    '''\n    for x in arr2:\n        if x not in arr1:\n            return False\n    return True\n    \n    \ndef rotate(arr, n):\n    '''\n    Write a function that takes in an array of integers and a number n, and returns a new array where the first n elements are the same as the last n elements of the given array. In other words, the function should return the first n elements of the given array followed by the last n elements in reverse order. The array should be shifted to the left by n elements, such that the first element in the array will no longer be the first element in the new array.\n    '''\n    return arr[n:] + arr[:n]\n    \n    \ndef is_one_away(str1, str2):\n    '''\n    Write a function that takes in two strings, str1 and str2, and returns True if the two strings are one edit (insert, delete, or replace) away from each other, and False otherwise.\n    '''\n    # We know that str1 is one edit away from str2 if and only if:\n    #   1. len(str1) == len(str2) + 1\n    #   2. str1[i]!= str2[i] for 0 <= i < len(str1)\n    #   3. or\n    #   4. len(str1) == len(str2) - 1\n    #   5. str1[i] == str2[i + 1] for 0 <= i < len(str1) - 1\n    #\n    # Here, we'll do a modified version of the length-1 edit distance problem, where we check for the possibility of the insertion, removal, and replace of a character.\n    #\n    # If we can do any of the above operations, then we know we can do it. Otherwise, we know that we can't do it.\n    if len(str1) == len(str2):\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return True\n        return False\n    elif len(str1) + 1 == len(str2):\n        if str1[0] == str2[0]:\n            return True\n        else:\n            return False\n    elif len(str1) - 1 == len(str2):\n        if str1[-1] == str2[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \ndef is_palindrome(arr):\n    '''\n    Write a function that takes in a non-empty array of integers and returns a Boolean representing whether the given array is a palindrome (True or False). A palindrome is an array that reads the same forwards and backwards. For example, [1,2,2,1] is a palindrome, but [1,2,3,2,1] and [1] are not.\n    '''\n    return arr == arr[::-1]\n    \n    \ndef find_sum_of_two(arr, target):\n    '''\n    Write a function that takes in a non-empty array of integers and returns an array of length 2 representing the indices of the two numbers whose sum equals the given target value. The indices should be returned in the order they appear in the array. You may assume that each input would have exactly one solution.\n    '''\n    # If the target value isn't in the array, then the only way we can find the two numbers is by looking at the absolute value of the difference between the target value and each of the values in the array.\n    # We know that for every number in the array, the absolute value of the difference between the target value and the number must be the same, so we can use a lookup table to check each number's absolute difference value.\n    # First, we'll sort the array to keep the lookup table efficient.\n    arr.sort()\n    \n    # Now we know that the absolute difference between a target value and an array element is equal to the absolute difference between the target value and the element's compliment. We can begin by checking if the target value is the first element of the array. If so, we know the compliment of the target value is the last element of the array. We do this by finding the compliment of the target value by looking up the compliment of the target value in the lookup table.\n    if target == arr[0]:\n        return [0, len(arr) - 1]\n    elif target == arr[-1]:\n        return [len(arr) - 1, 0]\n    \n    # Otherwise, we know the compliment of a target value is the compliment of the target value itself. So, we can begin by finding the compliment of the target value in the lookup table.\n    compliment = target - arr[0]\n    \n    # Then, we know the compliment of the target value is equal to the compliment of the first element of the array. We can use the binary search algorithm to search the array to find the first element of the array whose compliment is greater than the target value.\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] == compliment:\n            return [mid, mid]\n        elif arr[mid] > compliment:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return None\n    \n    \ndef is_binary_search(arr, target):\n    '''\n    Write a function that takes in a non-empty array of integers and returns a boolean representing whether the given array is a binary search (true or false). A binary search is a search algorithm that uses a comparison operator to divide the array into two pieces and recursively determines if the target value belongs in the left or right part of the array.\n    '''\n    # We know that for every number in the array, the absolute value of the difference between the target value and the number must be the same, so we can use a lookup table to check each number's absolute difference value.\n    # First, we'll sort the array to keep the lookup table efficient.\n    arr.sort()\n    \n    # Now we know that the absolute difference between a target value and an array element is equal to the absolute difference between the target value and the element's compliment. We can begin by checking if the target value is the first element of the array. If so, we know the compliment of the target value is the last element of the array. We do this by finding the compliment of the target value by looking up the compliment of the target value in the lookup table.\n    if target == arr[0]:\n        return True\n    elif target == arr[-1]:\n        return True\n    \n    # Otherwise, we know the compliment of a target value is the compliment of the target value itself. So, we can begin by finding the compliment of the target value in the lookup table.\n    compliment = target - arr[0]\n    \n    # Then, we know the compliment of the target value is equal to the compliment of the first element of the array. We can use the binary search algorithm to search the array to find the first element of the array whose compliment is greater than the target value.\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] == compliment:\n            return True\n        elif arr[mid] > compliment:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return False\n    \n    \ndef contains_duplicates(arr):\n    '''\n    Write a function that takes in an array of integers and returns a Boolean representing whether the array contains duplicates. A duplicate is a number that occurs more than once in the array. You can assume that each input will have at least one repeated number.\n    '''\n    # If the array is empty, we know there's no duplicates, so we can return false.\n    if len(arr) == 0:\n        return False\n    \n    # We know that for every number in the array, the absolute value of the difference between the target value and the number must be the same, so we can use a lookup table to check each number's absolute difference value.\n    # First, we'll sort the array t"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n/2] == x:\n        return True\n    elif arr[n/2]!= x:\n        return is_majority(arr[0:n/2], n/2, x) or is_majority(arr[n/2+1:], n/2, x)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if (n & 1):\n            count = count+1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = (n & 0x5555555555555555) + ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) + ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) + ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) + ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) + ((n & 0xFFFF0000FFFF0000) >> 16)\n    return n\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize result \n    cnt = 0 \n    while (n): \n        # if LSB is 1, increment count \n        if n & 1: \n            cnt += 1\n        # rightshift by 1 \n        n = n >> 1\n    return cnt \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_flip(n): \n    '''\n    Write a python function to count the number of flip bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_odd(n): \n    '''\n    Write a python function to count the number of odd bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_even(n): \n    '''\n    Write a python function to count the number of even bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_set_bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_1_bits(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_odd_bits(n): \n    '''\n    Write a python function to count the number of odd bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_even_bits(n): \n    '''\n    Write a python function to count the number of even bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_flip_bits(n): \n    '''\n    Write a python function to count the number of flip bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_bit(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_one_bits(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_zero_bits(n): \n    '''\n    Write a python function to count the number of zero bits (binary digits with value 0) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_set_bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_ones(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_zero(n): \n    '''\n    Write a python function to count the number of zero bits (binary digits with value 0) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_1_bits(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_0_bits(n): \n    '''\n    Write a python function to count the number of 0 bits (binary digits with value 0) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_1_bits(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_0_bits(n): \n    '''\n    Write a python function to count the number of 0 bits (binary digits with value 0) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_1_bits(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_0_bits(n): \n    '''\n    Write a python function to count the number of 0 bits (binary digits with value 0) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_1_bits(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_0_bits(n): \n    '''\n    Write a python function to count the number of 0 bits (binary digits with value 0) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_1_bits(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_0_bits(n): \n    '''\n    Write a python function to count the number of 0 bits (binary digits with value 0) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= (n-1)\n        bitCount += 1\n    return bitCount\ndef count_number_of_1_bits(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    bitCount = 0\n    while (n): \n        n &= ("
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        n &= n - 1\n        count += 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while(n):\n        if(n & 1):\n            set_bits += 1\n        n >>= 1\n    return set_bits\n    \ndef find_and_apply(l, f, g):\n    '''\n    Write a python function to find the index of the first occurrence of an element in a list and replace the element with another element in the list.\n    '''\n    try:\n        l.index(f)\n        return l.index(f)\n    except ValueError:\n        return l.index(g)\n    \ndef find_index(l, f):\n    '''\n    Write a python function to find the index of the first occurrence of an element in a list and return the index.\n    '''\n    try:\n        l.index(f)\n        return l.index(f)\n    except ValueError:\n        return -1\n    \ndef find_most_common(l):\n    '''\n    Write a python function to find the most frequent element in a list.\n    '''\n    cnt = {}\n    max_cnt = 0\n    most_common = None\n    for item in l:\n        if item in cnt:\n            cnt[item] += 1\n        else:\n            cnt[item] = 1\n        if cnt[item] > max_cnt:\n            max_cnt = cnt[item]\n            most_common = item\n    return most_common\n    \ndef find_in_list(l, f):\n    '''\n    Write a python function to find the index of the first occurrence of an element in a list and return the index.\n    '''\n    for i in range(len(l)):\n        if l[i] == f:\n            return i\n    return -1\n    \ndef first_index(l, f):\n    '''\n    Write a python function to find the first occurrence of an element in a list and return the index.\n    '''\n    for i in range(len(l)):\n        if l[i] == f:\n            return i\n    return -1\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    l = list(s)\n    i = 0\n    j = len(l) - 1\n    while(i < j):\n        if(l[i]!= l[j]):\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_anagram(s, t):\n    '''\n    Write a python function to check if two strings are anagrams or not.\n    '''\n    l1 = list(s)\n    l2 = list(t)\n    l1.sort()\n    l2.sort()\n    return l1 == l2\n    \ndef longest_substring(s):\n    '''\n    Write a python function to find the longest substring in a string.\n    '''\n    l = list(s)\n    l.sort()\n    i = 0\n    j = len(l) - 1\n    max_len = 0\n    while(i < j):\n        if(l[i] == l[j]):\n            max_len = max(max_len, j - i)\n            j -= 1\n        else:\n            i += 1\n    return max_len\n    \ndef is_permutation(s, t):\n    '''\n    Write a python function to check if two strings are permutations of each other or not.\n    '''\n    l1 = list(s)\n    l2 = list(t)\n    l1.sort()\n    l2.sort()\n    if(l1 == l2):\n        return True\n    return False\n    \ndef is_rotation(s1, s2):\n    '''\n    Write a python function to check if a string is a rotation of another string.\n    '''\n    if(len(s1)!= len(s2)):\n        return False\n    l1 = list(s1)\n    l2 = list(s2)\n    l1.sort()\n    l2.sort()\n    return l1 == l2\n    \ndef is_valid_parentheses(s):\n    '''\n    Write a python function to check if parentheses in a string are balanced or not.\n    '''\n    l = list(s)\n    l.sort()\n    if(l == ['(', ')', '{', '}', '[', ']']):\n        return True\n    return False\n    \ndef is_valid_ip(s):\n    '''\n    Write a python function to check if a string is a valid IP address or not.\n    '''\n    l = list(s)\n    l.sort()\n    if(l == ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']):\n        return True\n    return False\n    \ndef is_valid_subnet(s):\n    '''\n    Write a python function to check if a string is a valid subnet mask or not.\n    '''\n    l = list(s)\n    l.sort()\n    if(l == ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.']):\n        return True\n    return False\n    \ndef is_valid_domain_name(s):\n    '''\n    Write a python function to check if a string is a valid domain name or not.\n    '''\n    l = list(s)\n    l.sort()\n    if(l == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_', '.','']):\n        return True\n    return False\n    \ndef is_valid_url(s):\n    '''\n    Write a python function to check if a string is a valid URL or not.\n    '''\n    l = list(s)\n    l.sort()\n    if(l == ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '_', '.','', '%', '/', ':', ';', '=', '&', '?', '#', '@', '!', '$', '&', '*']):\n        return True\n    return False\n    \ndef is_valid_phone_number(s):\n    '''\n    Write a python function to check if a string is a valid phone number or not.\n    '''\n    l = list(s)\n    l.sort()\n    if(l == ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', "
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(1,len(str),2)])\ndef odd_values_list(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[1::2]\ndef odd_values_generator(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(1,len(str),2):\n        yield str[i]\ndef odd_values_list_comprehension(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return [str[i] for i in range(1,len(str),2)]\ndef odd_values_generator_comprehension(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(1,len(str),2):\n        yield str[i]\ndef even_values_string(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(0,len(str),2)])\ndef even_values_list(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return str[::2]\ndef even_values_generator(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    for i in range(0,len(str),2):\n        yield str[i]\ndef even_values_list_comprehension(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return [str[i] for i in range(0,len(str),2)]\ndef even_values_generator_comprehension(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    for i in range(0,len(str),2):\n        yield str[i]\ndef string_and_integer_string(str,i):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(0,len(str),2)])\ndef string_and_integer_list(str,i):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return str[i::2]\ndef string_and_integer_generator(str,i):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    for i in range(0,len(str),2):\n        yield str[i]\ndef string_and_integer_list_comprehension(str,i):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return [str[i] for i in range(0,len(str),2)]\ndef string_and_integer_generator_comprehension(str,i):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    for i in range(0,len(str),2):\n        yield str[i]\ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef is_palindrome_list(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef is_palindrome_generator(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(0,len(str)):\n        yield str[i] == str[len(str)-i-1]\ndef is_palindrome_list_comprehension(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef is_palindrome_generator_comprehension(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(0,len(str)):\n        yield str[i] == str[len(str)-i-1]\ndef palindrome_check_string_comprehension(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(0,len(str)):\n        yield str[i] == str[len(str)-i-1]\ndef palindrome_check_string_list(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef palindrome_check_string_generator(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(0,len(str)):\n        yield str[i] == str[len(str)-i-1]\ndef palindrome_check_string_list_comprehension(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef palindrome_check_string_generator_comprehension(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(0,len(str)):\n        yield str[i] == str[len(str)-i-1]\ndef palindrome_check_string_list(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef palindrome_check_string_generator(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(0,len(str)):\n        yield str[i] == str[len(str)-i-1]\ndef palindrome_check_string_list(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef palindrome_check_string_generator(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(0,len(str)):\n        yield str[i] == str[len(str)-i-1]\ndef palindrome_check_string_list(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef palindrome_check_string_generator(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(0,len(str)):\n        yield str[i] == str[len(str)-i-1]\ndef palindrome_check_string_list(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return str == str[::-1]\ndef palindrome_check_string_generator(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for j, i in enumerate(str) if j % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[i] for i in xrange(len(str)) if i % 2 == 0)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    return ''.join([str[i] for i in range(1,len(str),2)])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 1:\n        return str\n    elif len(str) == 1:\n        return ''\n    elif len(str) % 2 == 0:\n        return str[0:len(str)-1:2]\n    elif len(str) % 2!= 0:\n        return str[0:len(str)-1:2] + str[-1]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Please write a python function, odd_values_string(str), that takes a string and removes all the characters from that string with even index values.\n    # The output of your function should be a string.\n    # The function takes a string and removes all the characters with even index values.\n    # Please print the function call and result for a string of length 5\n    # Please print the function call and result for a string of length 100\n    # Please print the function call and result for a string of length 45\n    # Please print the function call and result for a string of length 50\n    # Please print the function call and result for a string of length 30\n    return str[::2]"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)%2!=0:\n        return str[::2]\n    else:\n        return str[::2]\n    \n    \ndef odd_values_string_list(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)%2!=0:\n        return [str[::2]]\n    else:\n        return [str[::2]]\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return str==str[::-1]\n    \n    \ndef is_palindrome_string(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(str)%2==0:\n        return str[::2]==str[::-2]\n    else:\n        return str[1::2]==str[1::-2]\n    \n    \ndef largest_string(str_list):\n    '''\n    Write a python function to return the largest string in a given list of strings.\n    '''\n    max_len=len(str_list[0])\n    max_str=str_list[0]\n    for i in str_list:\n        if len(i)>max_len:\n            max_len=len(i)\n            max_str=i\n    return max_str\n    \n    \ndef smallest_string(str_list):\n    '''\n    Write a python function to return the smallest string in a given list of strings.\n    '''\n    min_len=len(str_list[0])\n    min_str=str_list[0]\n    for i in str_list:\n        if len(i)<min_len:\n            min_len=len(i)\n            min_str=i\n    return min_str\n    \n    \ndef get_remaining_items(n):\n    '''\n    Write a python function to return a list of two items from a given list of 4 items.\n    '''\n    return [n[1],n[3]]\n    \n    \ndef get_remaining_items_set(n):\n    '''\n    Write a python function to return a list of two items from a given list of 4 items.\n    '''\n    return set([n[1],n[3]])\n    \n    \ndef smallest_greater_than(n, k):\n    '''\n    Write a python function to return the smallest number greater than a given number.\n    '''\n    return k+1\n    \n    \ndef highest_even_number(n):\n    '''\n    Write a python function to return the highest even number.\n    '''\n    if n%2==0:\n        return n\n    else:\n        return n-1\n    \n    \ndef highest_even_number_set(n):\n    '''\n    Write a python function to return the highest even number.\n    '''\n    if n%2==0:\n        return n\n    else:\n        return n-1\n    \n    \ndef is_vowel_consonant(letter):\n    '''\n    Write a python function to check whether a given letter is a vowel or consonant.\n    '''\n    if letter=='a' or letter=='e' or letter=='i' or letter=='o' or letter=='u':\n        return True\n    else:\n        return False\n    \n    \ndef is_vowel_consonant_set(letter):\n    '''\n    Write a python function to check whether a given letter is a vowel or consonant.\n    '''\n    if letter=='a' or letter=='e' or letter=='i' or letter=='o' or letter=='u':\n        return True\n    else:\n        return False\n    \n    \ndef count_vowels(str):\n    '''\n    Write a python function to count the vowels in a given string.\n    '''\n    count=0\n    for i in str:\n        if i=='a' or i=='e' or i=='i' or i=='o' or i=='u':\n            count+=1\n    return count\n    \n    \ndef count_vowels_set(str):\n    '''\n    Write a python function to count the vowels in a given string.\n    '''\n    return len(set('aeiouAEIOU').intersection(set(str)))\n    \n    \ndef count_vowels_string(str):\n    '''\n    Write a python function to count the vowels in a given string.\n    '''\n    return len(set('aeiouAEIOU').intersection(set(str)))\n    \n    \ndef count_consonants(str):\n    '''\n    Write a python function to count the consonants in a given string.\n    '''\n    count=0\n    for i in str:\n        if i=='a' or i=='e' or i=='i' or i=='o' or i=='u' or i=='A' or i=='E' or i=='I' or i=='O' or i=='U':\n            pass\n        else:\n            count+=1\n    return count\n    \n    \ndef count_consonants_set(str):\n    '''\n    Write a python function to count the consonants in a given string.\n    '''\n    return len(set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ').intersection(set(str)))\n    \n    \ndef count_consonants_string(str):\n    '''\n    Write a python function to count the consonants in a given string.\n    '''\n    return len(set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ').intersection(set(str)))\n    \n    \ndef count_digit(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    count=0\n    while n!=0:\n        n=n//10\n        count+=1\n    return count\n    \n    \ndef count_digit_string(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    return len(str(n))\n    \n    \ndef count_digit_set(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    return len(set(str(n)))\n    \n    \ndef count_digit_string_set(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    return len(set(str(n)))\n    \n    \ndef count_digit_list(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    count=0\n    while n!=0:\n        n=n//10\n        count+=1\n    return [count]\n    \n    \ndef count_digit_list_string(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    count=0\n    while n!=0:\n        n=n//10\n        count+=1\n    return [count, str(n)]\n    \n    \ndef count_digit_list_string_set(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    count=0\n    while n!=0:\n        n=n//10\n        count+=1\n    return [count, set(str(n))]\n    \n    \ndef count_digit_list_string_list(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    count=0\n    while n!=0:\n        n=n//10\n        count+=1\n    return [count, [str(i) for i in list(str(n))]]\n    \n    \ndef count_digit_list_string_list_set(n):\n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    count=0\n    whil"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b) and (a < c):\n        return a\n    elif (b < a) and (b < c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\ndef list_of_marks(name,mark1,mark2,mark3):\n    '''\n    Write a function to find average of marks from three students.\n    '''\n    return (mark1+mark2+mark3)/3\ndef add_two_numbers(a,b):\n    return a+b\ndef random_numbers(a,b):\n    import random\n    return random.randint(a,b)\ndef smallest(a,b,c):\n    return min(a,b,c)\ndef largest(a,b,c):\n    return max(a,b,c)\ndef words_in_string(s):\n    return len(s.split())\ndef abc_numbers(a,b,c):\n    return a+b+c\ndef sum_of_even_numbers(a,b,c):\n    return (a+b+c)/2\ndef is_sum_of_odd_numbers_even(a,b,c):\n    return (a+b+c)%2 == 0\ndef is_positive_number(a):\n    return a>0\ndef is_negative_number(a):\n    return a<0\ndef is_negative_number_or_zero(a):\n    return a<0\ndef is_even(a):\n    return a%2==0\ndef is_odd(a):\n    return a%2==1\ndef is_positive_number(a):\n    return a>0\ndef is_zero(a):\n    return a==0\ndef is_greater_than(a,b):\n    return a>b\ndef is_greater_than_or_equal_to(a,b):\n    return a>=b\ndef is_less_than(a,b):\n    return a<b\ndef is_less_than_or_equal_to(a,b):\n    return a<=b\ndef is_greater_than_or_equal_to(a,b):\n    return a>=b\ndef is_less_than_or_equal_to(a,b):\n    return a<=b\ndef is_greater_than(a,b):\n    return a>b\ndef is_less_than(a,b):\n    return a<b\ndef is_equal_to(a,b):\n    return a==b\ndef is_not_equal_to(a,b):\n    return a!=b\ndef is_not_equal_to(a,b):\n    return a!=b\ndef is_greater_than(a,b):\n    return a>b\ndef is_less_than(a,b):\n    return a<b\ndef is_not_greater_than(a,b):\n    return a<b\ndef is_not_less_than(a,b):\n    return a>b\ndef is_not_less_than(a,b):\n    return a<b\ndef is_greater_than_or_equal_to(a,b):\n    return a>=b\ndef is_less_than_or_equal_to(a,b):\n    return a<=b\ndef is_not_greater_than_or_equal_to(a,b):\n    return a<=b\ndef is_not_less_than_or_equal_to(a,b):\n    return a>=b\ndef is_not_less_than_or_equal_to(a,b):\n    return a<=b\ndef is_greater_than_or_equal_to(a,b):\n    return a>=b\ndef is_less_than_or_equal_to(a,b):\n    return a<=b\ndef is_equal_to(a,b):\n    return a==b\ndef increment_string(a):\n    l=len(a)\n    if l==0:\n        return a+'1'\n    else:\n        return a[:l]+str(int(a[l-1])+1)\ndef decrement_string(a):\n    l=len(a)\n    if l==0:\n        return a+'1'\n    else:\n        return a[:l]+str(int(a[l-1])-1)\ndef find_longest_string(a):\n    return max(a,key=len)\ndef add_string(a,b):\n    return a+b\ndef is_same_string(a,b):\n    return a==b\ndef is_string(a):\n    return type(a)==str\ndef concat_string(a,b):\n    return a+b\ndef remove_duplicates(a):\n    return list(set(a))\ndef find_min_occurred_character(a):\n    d={}\n    for i in a:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]==max(d.values()):\n            return i\ndef is_palin(a):\n    l=len(a)\n    i=0\n    j=l-1\n    while i<j:\n        if a[i]!=a[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome(a):\n    l=len(a)\n    i=0\n    j=l-1\n    while i<j:\n        if a[i]!=a[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome_1(a):\n    l=len(a)\n    i=0\n    j=l-1\n    while i<j:\n        if a[i]!=a[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome_2(a):\n    l=len(a)\n    if l==0:\n        return True\n    if l==1:\n        return True\n    return a[0]==a[l-1] and is_palindrome_2(a[1:l-1])\ndef reverse_string(a):\n    l=len(a)\n    if l==0:\n        return a\n    if l==1:\n        return a\n    return a[l-1]+reverse_string(a[:l-1])\ndef is_rotation(a,b):\n    l=len(a)\n    if l!=len(b):\n        return False\n    return b in a+a\ndef is_rotation_1(a,b):\n    l=len(a)\n    if l!=len(b):\n        return False\n    return a in b+b\ndef is_rotation_2(a,b):\n    l=len(a)\n    if l!=len(b):\n        return False\n    if a==b:\n        return True\n    if b==a[l-1:l]+a[0:l-1]:\n        return True\n    return False\ndef is_rotation_3(a,b):\n    l=len(a)\n    if l!=len(b):\n        return False\n    if a==b:\n        return True\n    if b==a[l-1:]+a[0:l-1]:\n        return True\n    return False\ndef is_rotation_4(a,b):\n    l=len(a)\n    if l!=len(b):\n        return False\n    if a==b:\n        return True\n    if b==a[l-1:]:\n        return True\n    return False\ndef is_rotation_5(a,b):\n    l=len(a)\n    if l!=len(b):\n        return False\n    if a==b:\n        return True\n    if b==a[l-1:l-1]+a[0:l-"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b and a < c): \n        return a \n    elif (b < a and b < c): \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        min = a\n    else:\n        min = b\n    if c<min:\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    #add your code here\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b) and (a < c):\n        return a\n    elif (b < a) and (b < c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bin_n = bin(n)[2:]\n    for i in range(l,r+1):\n        if bin_n[i] == '1':\n            return False\n    return True\n    \ndef main():\n    print \"To Check whether a number is set in a given range\"\n    print \"Enter the number, range(l,r) and you need to know whether it is set or not\"\n    n = int(input(\"Enter the number\\n\"))\n    l = int(input(\"Enter the lower limit\\n\"))\n    r = int(input(\"Enter the upper limit\\n\"))\n    if all_Bits_Set_In_The_Given_Range(n,l,r):\n        print n,\"is set in the given range\"\n    else:\n        print n,\"is not set in the given range\"\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    s=bin(n)[2:].zfill(r)\n    for i in xrange(0,l):\n        if s[i]=='0':\n            return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Assuming the given range is valid.\n    # n > l and n < r\n    if n < l or n > r:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n & (1 << l) == (1 << l)):\n        return 0\n    elif (n & (1 << r) == (1 << r)):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # range(n,l,r) : range(n,n+r,r)\n    return all( ( n&(1<<i) ) == 0 for i in range( l, r) )\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bits = 0\n    for i in range(l,r+1):\n        if n & i == i:\n            bits = bits + 1\n    if bits == r - l + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = all(n & (1 << x) == 0 for x in range(l,r+1))\n    return res\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    n = n[l:r+1]\n    return 1 - sum(n)\n    \ndef nth_Bit_Set(n,k):  \n    '''\n    Write a python function to return the kth bit set in n.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    n = n[k]\n    return n\n    \ndef nth_Bit_UnSet(n,k):  \n    '''\n    Write a python function to return the kth bit unset in n.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    n = ~n[k] & 1\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return n\n    \ndef List_Elements_with_Specified_Digits_Set(n,k):  \n    '''\n    Write a python function to return the list of numbers whose digits have their kth bit set.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return [i for i in range(2**n) if nth_Bit_Set(i,k) == 1]\n    \ndef List_Elements_with_Specified_Digits_UnSet(n,k):  \n    '''\n    Write a python function to return the list of numbers whose digits have their kth bit unset.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return [i for i in range(2**n) if nth_Bit_UnSet(i,k) == 1]\n    \ndef nth_Digit_Set(n,d):  \n    '''\n    Write a python function to return the dth digit set in n.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    n = n[d]\n    return n\n    \ndef nth_Digit_UnSet(n,d):  \n    '''\n    Write a python function to return the dth digit unset in n.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    n = ~n[d] & 1\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return n\n    \ndef List_Elements_with_Specified_Digit_Set(n,d):  \n    '''\n    Write a python function to return the list of numbers whose dth digit have their set.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return [i for i in range(2**n) if nth_Digit_Set(i,d) == 1]\n    \ndef List_Elements_with_Specified_Digit_UnSet(n,d):  \n    '''\n    Write a python function to return the list of numbers whose dth digit have their unset.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return [i for i in range(2**n) if nth_Digit_UnSet(i,d) == 1]\n    \ndef List_Elements_with_Specified_Digit_Set_Or_UnSet(n,d):  \n    '''\n    Write a python function to return the list of numbers whose dth digit have either their set or unset.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return [i for i in range(2**n) if nth_Digit_Set(i,d) == 1 or nth_Digit_UnSet(i,d) == 1]\n    \ndef Prime_Factors(n):  \n    '''\n    Write a python function to return the list of prime factors of n.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    elif n%2 == 0:\n        return [2] + Prime_Factors(n/2)\n    else:\n        return [2] + [i for i in Prime_Factors(n/2) if n%i == 0]\n    \ndef List_Elements_with_Specified_Prime_Factor(n,f):  \n    '''\n    Write a python function to return the list of numbers whose prime factor is f.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return [i for i in range(2**n) if len(Prime_Factors(i)) == f]\n    \ndef Maximum_Number_With_Specified_Digit_Set(n,d):  \n    '''\n    Write a python function to return the maximum number whose dth digit has their set.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return max([i for i in range(2**n) if nth_Digit_Set(i,d) == 1])\n    \ndef Minimum_Number_With_Specified_Digit_Set(n,d):  \n    '''\n    Write a python function to return the minimum number whose dth digit has their set.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return min([i for i in range(2**n) if nth_Digit_Set(i,d) == 1])\n    \ndef Maximum_Number_With_Specified_Digit_UnSet(n,d):  \n    '''\n    Write a python function to return the maximum number whose dth digit has their unset.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return max([i for i in range(2**n) if nth_Digit_UnSet(i,d) == 1])\n    \ndef Minimum_Number_With_Specified_Digit_UnSet(n,d):  \n    '''\n    Write a python function to return the minimum number whose dth digit has their unset.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return min([i for i in range(2**n) if nth_Digit_UnSet(i,d) == 1])\n    \ndef Maximum_Number_With_Specified_Digit_Set_Or_UnSet(n,d):  \n    '''\n    Write a python function to return the maximum number whose dth digit has either their set or unset.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return max([i for i in range(2**n) if nth_Digit_Set(i,d) == 1 or nth_Digit_UnSet(i,d) == 1])\n    \ndef Minimum_Number_With_Specified_Digit_Set_Or_UnSet(n,d):  \n    '''\n    Write a python function to return the minimum number whose dth digit has either their set or unset.\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    return min([i for i in range(2**n) if nth_Digit_Set(i,d) == 1 or nth_Digit_UnSet(i,d) == 1])\n    \ndef Power_of_Two(n):  \n    '''\n    Write a python function to return the power of 2 that the number n is equal to.\n    '''\n    return 2**int(math.log(n,2))\n    \ndef Non_Prime_Factors(n):  \n    '''\n    Write a python function to return the list of non-prime factors of n.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return ["
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n & (1<<l)!= 0:\n        return False\n    for i in range(l+1,r):\n        if n & (1<<i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n & (1<<l) == 0:\n        if n & (1<<r) == 0:\n            return 1\n    return 0\ndef Make_Graph_Plot(Graph_Nodes_And_Edges_Tuples_List):\n    '''\n    Write a python function to make a graph plot of the nodes and edges in the given graph.\n    '''\n    Graph = {}\n    for nodes, edges in Graph_Nodes_And_Edges_Tuples_List:\n        if nodes not in Graph:\n            Graph[nodes] = []\n        if edges not in Graph[nodes]:\n            Graph[nodes].append(edges)\n    plt.figure(1)\n    for nodes, edges in Graph_Nodes_And_Edges_Tuples_List:\n        x_val = nodes[0]\n        y_val = nodes[1]\n        plt.plot([x_val],[y_val],'co',markersize=8)\n        if edges:\n            for edge in edges:\n                x_val_1 = edge[0]\n                y_val_1 = edge[1]\n                plt.plot([x_val,x_val_1],[y_val,y_val_1],'b-')\n    plt.show()\ndef Graph_Adjacency_List(Graph_Adjacency_List_):\n    '''\n    Write a python function to convert the graph to its adjacency list representation.\n    '''\n    Graph = {}\n    for node in Graph_Adjacency_List_:\n        if node[0] not in Graph:\n            Graph[node[0]] = []\n        if node[1] not in Graph:\n            Graph[node[1]] = []\n        Graph[node[0]].append(node[1])\n    return Graph\ndef Graph_Adjacency_List_Nodes(Graph_Adjacency_List):\n    '''\n    Write a python function to convert the graph to its adjacency list representation.\n    '''\n    Graph = {}\n    for node in Graph_Adjacency_List:\n        if node[0] not in Graph:\n            Graph[node[0]] = [node[1]]\n        if node[1] not in Graph:\n            Graph[node[1]] = [node[0]]\n        else:\n            Graph[node[1]].append(node[0])\n    return Graph\ndef Compute_Distance(Node_1, Node_2):\n    '''\n    Write a python function to compute the distance between the two nodes.\n    '''\n    return math.sqrt(math.pow((Node_1[0] - Node_2[0]), 2) + math.pow((Node_1[1] - Node_2[1]), 2))\ndef Color_Graph(Graph_, Color_Map_, Starting_Node):\n    '''\n    Write a python function to color the nodes in a graph.\n    '''\n    queue = [Starting_Node]\n    Color_Map_[Starting_Node] = 'Grey'\n    while queue:\n        node = queue.pop(0)\n        Color_Map_[node] = 'Blue'\n        if node in Graph_.keys():\n            for child in Graph_[node]:\n                if Color_Map_[child] == 'White':\n                    queue.append(child)\n    return Color_Map_\ndef Color_All_Nodes_In_A_Set(Graph_, Color_Map_, Node_Set):\n    '''\n    Write a python function to color all the nodes in a set.\n    '''\n    for node in Node_Set:\n        Color_Graph(Graph_, Color_Map_, node)\n    return Color_Map_\ndef Color_Edges_In_A_Set(Graph_, Color_Map_, Edge_Set):\n    '''\n    Write a python function to color all the edges in a set.\n    '''\n    for edge in Edge_Set:\n        if Color_Map_[edge[0]] == Color_Map_[edge[1]]:\n            return False\n        Color_Graph(Graph_, Color_Map_, edge)\n    return True\ndef Find_Node_Coloring(Graph_, Starting_Node, Color_Map_):\n    '''\n    Write a python function to find a node coloring.\n    '''\n    if Starting_Node in Graph_.keys():\n        Color_Graph(Graph_, Color_Map_, Starting_Node)\n    else:\n        return 0\n    if Starting_Node == Starting_Node:\n        return 1\n    else:\n        return 2\ndef Find_Node_Coloring_All_Nodes(Graph_, Starting_Node, Color_Map_):\n    '''\n    Write a python function to find a node coloring.\n    '''\n    if Starting_Node in Graph_.keys():\n        Color_Graph(Graph_, Color_Map_, Starting_Node)\n    else:\n        return 0\n    if Starting_Node == Starting_Node:\n        return 1\n    else:\n        return 2\ndef Find_Edge_Coloring(Graph_, Starting_Node, Color_Map_):\n    '''\n    Write a python function to find an edge coloring.\n    '''\n    queue = [Starting_Node]\n    while queue:\n        node = queue.pop(0)\n        if Color_Map_[node] == 'Grey':\n            Color_Graph(Graph_, Color_Map_, node)\n            if node in Graph_.keys():\n                for child in Graph_[node]:\n                    if Color_Map_[child] == 'White':\n                        queue.append(child)\n    return Color_Map_\ndef Find_Edge_Coloring_All_Nodes(Graph_, Starting_Node, Color_Map_):\n    '''\n    Write a python function to find an edge coloring.\n    '''\n    queue = [Starting_Node]\n    while queue:\n        node = queue.pop(0)\n        if Color_Map_[node] == 'Grey':\n            Color_Graph(Graph_, Color_Map_, node)\n            if node in Graph_.keys():\n                for child in Graph_[node]:\n                    if Color_Map_[child] == 'White':\n                        queue.append(child)\n    return Color_Map_\ndef Find_All_Coloring(Graph_, Starting_Node):\n    '''\n    Write a python function to find all the node and edge coloring.\n    '''\n    Color_Map_ = {}\n    if Starting_Node in Graph_.keys():\n        Find_Node_Coloring(Graph_, Starting_Node, Color_Map_)\n        Find_Edge_Coloring(Graph_, Starting_Node, Color_Map_)\n    else:\n        return 0\n    return Color_Map_\ndef Find_All_Coloring_All_Nodes(Graph_, Starting_Node):\n    '''\n    Write a python function to find all the node and edge coloring.\n    '''\n    Color_Map_ = {}\n    if Starting_Node in Graph_.keys():\n        Find_Node_Coloring_All_Nodes(Graph_, Starting_Node, Color_Map_)\n        Find_Edge_Coloring_All_Nodes(Graph_, Starting_Node, Color_Map_)\n    else:\n        return 0\n    return Color_Map_\ndef Find_All_Coloring_By_Edge_Set(Graph_, Starting_Node, Edge_Set):\n    '''\n    Write a python function to find all the node and edge coloring.\n    '''\n    Color_Map_ = {}\n    if Starting_Node in Graph_.keys():\n        Find_Node_Coloring_All_Nodes(Graph_, Starting_Node, Color_Map_)\n        Color_Graph(Graph_, Color_Map_, Starting_Node)\n        Color_Edges_In_A_Set(Graph_, Color_Map_, Edge_Set)\n    else:\n        return 0\n    return Color_Map_\ndef Find_All_Coloring_By_Edge_Set_All_Nodes(Graph_, Starting_Node, Edge_Set):\n    '''\n    Write a python function to find all the node and edge coloring.\n    '''\n    Color_Map_ = {}\n    if Starting_Node in Graph_.keys():\n        Find_Node_Coloring_All_Nodes(Graph_, Starting_Node, Color_Map_)\n        Color_Graph(Graph_, Color_Map_, Starting_Node)\n        Color_E"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > 0:\n        if arr[:n] == sorted(arr[:n], reverse = True):\n            return arr\n        else:\n            return re_arrange_array(arr[n:], n)\n    else:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return None\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # return [arr[i] for i in range(n) if arr[i] < 0] + [arr[i] for i in range(n) if arr[i] >= 0]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr[:n]) + arr[n:]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # split array into positive and negative\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    # if n elements, then array is already arranged\n    if len(pos) == n:\n        return arr\n    # if array is shorter than n, then elements will be returned in order\n    elif len(pos) + len(neg) < n:\n        return pos + neg\n    # if array is longer than n, rearrange in order\n    elif len(pos) + len(neg) > n:\n        return pos[:n] + neg[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Use the first n elements of the array as a sorted array, and insert the rest of the array in a new array, appending elements to the new array with order preserved\n    sorted_arr = arr[0:n]\n    new_arr = []\n    for num in arr:\n        if num < 0:\n            new_arr.append(num)\n    for num in sorted_arr:\n        if num >= 0:\n            new_arr.append(num)\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # empty array\n    if len(arr) == 0:\n        return arr\n    # if n is greater than the length of arr, no sorting can be done, return arr as it is\n    if n > len(arr):\n        return arr\n    # define helper function\n    def helper(arr, low, high, new_arr):\n        # base case\n        if low >= high:\n            return\n        # get mid\n        mid = low + (high - low) // 2\n        # check if mid element is negative\n        if arr[mid] < 0:\n            # swap mid and high\n            arr[mid], arr[high] = arr[high], arr[mid]\n            # recurse on the rest of the array\n            helper(arr, low, high - 1, new_arr)\n        else:\n            # recurse on the rest of the array\n            helper(arr, mid + 1, high, new_arr)\n    # base case\n    if len(arr) < n:\n        return arr\n    # create array to store results\n    new_arr = [0] * n\n    # run helper function on first n elements\n    helper(arr, 0, n - 1, new_arr)\n    # return new array\n    return new_arr\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str2 += char\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return char*len(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return str1+char\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    result = ''\n    for i in str1:\n        if i =='':\n            result += char\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return ''\n    new_str1 = str1\n    for i in range(0,len(str1)):\n        if str1[i] =='':\n            new_str1 = new_str1[:i]+char+new_str1[i+1:]\n    return new_str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(str1.split(char))\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # for i in str1:\n    #     if i =='':\n    #         str1 = str1.replace(i,char)\n    #     return str1\n    # return str1\n    return str1.replace(' ','{}')\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=list1[-n:]\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    for i in range(n):\n        max=heapq.nlargest(1,list1)\n        list1.remove(max[0])\n    return max\ndef min_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    for i in range(n):\n        min=heapq.nsmallest(1,list1)\n        list1.remove(min[0])\n    return min\ndef median_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n median items from the list.\n    '''\n    for i in range(n):\n        med=heapq.nsmallest(n,list1)\n        list1.remove(med[len(med)/2])\n    return med\ndef del_max_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    for i in range(n):\n        max=heapq.nlargest(1,list1)\n        list1.remove(max[0])\n    return max\ndef del_min_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    for i in range(n):\n        min=heapq.nsmallest(1,list1)\n        list1.remove(min[0])\n    return min\ndef del_med_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n median items from the list.\n    '''\n    for i in range(n):\n        med=heapq.nsmallest(n,list1)\n        list1.remove(med[len(med)/2])\n    return med\ndef remove_dup(list1):\n    '''\n    Write a function that takes in a list and removes all duplicate items from the list.\n    '''\n    list2=list1[:]\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\ndef my_sorted(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in alphabetical order.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    list2.sort()\n    return list2\ndef my_r_sorted(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse alphabetical order.\n    '''\n    list2=[]\n    for i in list1:\n        list2.insert(0,i)\n    list2.sort()\n    return list2\ndef my_reverse(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse order.\n    '''\n    list2=[]\n    for i in range(len(list1)-1,-1,-1):\n        list2.append(list1[i])\n    return list2\ndef my_d_reverse(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse order.\n    '''\n    list2=[]\n    for i in range(len(list1)-1,-1,-1):\n        list2.insert(0,list1[i])\n    return list2\ndef my_reverse2(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse order.\n    '''\n    list2=list1[:]\n    list2.reverse()\n    return list2\ndef my_d_reverse2(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse order.\n    '''\n    list2=list1[:]\n    list2.reverse()\n    return list2\ndef my_first_last(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the first and last elements of the original list.\n    '''\n    list2=[]\n    list2.append(list1[0])\n    list2.append(list1[len(list1)-1])\n    return list2\ndef my_d_first_last(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the first and last elements of the original list.\n    '''\n    list2=[]\n    list2.append(list1[0])\n    list2.append(list1[len(list1)-1])\n    return list2\ndef my_reverse_middle(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse order, except the first and last elements.\n    '''\n    list2=[]\n    list2.append(list1[len(list1)-1])\n    for i in range(len(list1)-2,-1,-1):\n        list2.append(list1[i])\n    list2.append(list1[0])\n    return list2\ndef my_d_reverse_middle(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse order, except the first and last elements.\n    '''\n    list2=[]\n    list2.append(list1[len(list1)-1])\n    for i in range(len(list1)-2,-1,-1):\n        list2.append(list1[i])\n    list2.append(list1[0])\n    return list2\ndef my_slice(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse order, except the first and last elements.\n    '''\n    list2=list1[1:len(list1)-1]\n    return list2\ndef my_d_slice(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list in reverse order, except the first and last elements.\n    '''\n    list2=list1[1:len(list1)-1]\n    return list2\ndef my_sum(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the elements in the list.\n    '''\n    list2=0\n    for i in list1:\n        list2=list2+i\n    return list2\ndef my_d_sum(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the elements in the list.\n    '''\n    list2=0\n    for i in list1:\n        list2=list2+i\n    return list2\ndef my_multiply(list1):\n    '''\n    Write a function that takes in a list and returns the product of the elements in the list.\n    '''\n    list2=1\n    for i in list1:\n        list2=list2*i\n    return list2\ndef my_d_multiply(list1):\n    '''\n    Write a function that takes in a list and returns the product of the elements in the list.\n    '''\n    list2=1\n    for i in list1:\n        list2=list2*i\n    return list2\ndef my_factorial(n):\n    '''\n    Write a function that takes in an integer n and returns the factorial of the number, which is n!\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact=fact*i\n    return fact\ndef my_d_factorial(n):\n    '''\n    Write a function that takes in an integer n and returns the factorial of the number, which is n!\n    '''\n    fact=1\n    for i in rang"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print list1\n    list1.sort()\n    print list1\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[0:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\ndef int_reverse(x):\n    '''\n    Write a function that takes in an integer x and returns an integer that is the reverse of the original integer.\n    '''\n    return int(str(x)[::-1])\ndef power_dig(x,n):\n    '''\n    Write a function that takes in two integers x and n and returns the integer result of raising x to the nth power.\n    '''\n    return pow(x,n)\ndef gcd(x,y):\n    '''\n    Write a function that takes in two integers x and y and returns the greatest common divisor of the two integers.\n    '''\n    if x == 0:\n        return y\n    return gcd(y%x,x)\ndef gcd_iter(x,y):\n    '''\n    Write a function that takes in two integers x and y and returns the greatest common divisor of the two integers.\n    '''\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x == y:\n        return x\n    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1,small+1):\n        if x%i == 0 and y%i == 0:\n            gcd = i\n    return gcd\ndef int_sqrt(x):\n    '''\n    Write a function that takes in an integer x and returns an integer y that is the closest square root of x.\n    '''\n    return int(pow(x,0.5))\ndef int_sqrt_2(x):\n    '''\n    Write a function that takes in an integer x and returns an integer y that is the closest square root of x.\n    '''\n    return int(x**0.5)\ndef int_sqrt_3(x):\n    '''\n    Write a function that takes in an integer x and returns an integer y that is the closest square root of x.\n    '''\n    return int(x**0.5)\ndef sqrt_ge(x):\n    '''\n    Write a function that takes in an integer x and returns a boolean that is true if x is greater than or equal to 0 and false otherwise.\n    '''\n    return x >= 0\ndef sqrt_le(x):\n    '''\n    Write a function that takes in an integer x and returns a boolean that is true if x is less than or equal to 0 and false otherwise.\n    '''\n    return x <= 0\ndef rec_factorial(x):\n    '''\n    Write a function that takes in an integer x and returns the factorial of x.\n    '''\n    if x == 0:\n        return 1\n    return x*rec_factorial(x-1)\ndef sum_digits(x):\n    '''\n    Write a function that takes in an integer x and returns the sum of the digits in x.\n    '''\n    if x == 0:\n        return 0\n    return x%10 + sum_digits(x/10)\ndef fib_f(x):\n    '''\n    Write a function that takes in a non-negative integer x and returns the value of the fibonacci sequence that begins at the nth index, where the first two values of the sequence are 0 and 1.\n    '''\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    return fib_f(x-1) + fib_f(x-2)\ndef gcd_f(x,y):\n    '''\n    Write a function that takes in two non-negative integers x and y and returns the greatest common divisor of the two integers.\n    '''\n    if x == 0:\n        return y\n    return gcd_f(y%x,x)\ndef find_triplets(list1,n):\n    '''\n    Write a function that takes in a list of integers and a number n and returns a list of all triplets from the list that add up to n.\n    '''\n    l = len(list1)\n    if n == 0:\n        return []\n    list2 = [0]*l\n    for i in range(0,l):\n        list2[i] = int_reverse(list1[i])\n    return find_triplets(list2,n-list1[0]) + [[list1[0],list1[1],list1[2]]]\ndef find_triplets_rev(list1,n):\n    '''\n    Write a function that takes in a list of integers and a number n and returns a list of all triplets from the list that add up to n.\n    '''\n    l = len(list1)\n    if n == 0:\n        return []\n    list2 = [0]*l\n    for i in range(0,l):\n        list2[i] = int_reverse(list1[i])\n    return find_triplets(list2,n-list1[0]) + [[list1[0],list1[1],list1[2]]]\ndef is_palindrome(x):\n    '''\n    Write a function that takes in an integer x and returns a boolean that is true if x is a palindrome and false otherwise.\n    '''\n    return x == int_reverse(x)\ndef is_palindrome_1(x):\n    '''\n    Write a function that takes in an integer x and returns a boolean that is true if x is a palindrome and false otherwise.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_palindrome_2(x):\n    '''\n    Write a function that takes in an integer x and returns a boolean that is true if x is a palindrome and false otherwise.\n    '''\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    return is_palindrome_2(int_reverse(x))\ndef is_palindrome_3(x):\n    '''\n    Write a function that takes in an integer x and returns a boolean that is true if x is a palindrome and false otherwise.\n    '''\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    return x%10 + is_palindrome_3(x/10) == 0\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes in two strings and returns a boolean that is true if the strings are anagrams and false otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\ndef is_anagram_1(s1,s2):\n    '''\n    Write a function that takes in two strings and returns a boolean that is true if the strings are anagrams and false otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    char_map = {}\n    for i in range(len(s1)):\n        if s1[i] in char_map:\n            char_map[s1[i]] += 1\n        else:\n            char_map[s1[i]] = 1\n    for i in range(len(s2)):\n        if s2[i] in char_map:\n            char_map[s2[i]] -= 1\n        else:\n            char_map[s2[i]] = -1\n    for key in char_map:\n        if char_map[key]!= 0:\n            return False\n    return True\ndef is_anagram_2(s1,s2):\n    '''\n    Write a function that takes in two strings and returns a boolean that is true if the strings are anagrams and false otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    char_map = {}\n    for i in range(len(s1)):\n        if s1[i] in char_map:\n            char_map[s1[i]] += 1\n        else:\n            char_map[s1[i]] = 1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if list1 == []:\n        return []\n    heapq.heapify(list1)\n    for i in range(n-1):\n        heapq.heappop(list1)\n    return list1\ndef lsmall_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if list1 == []:\n        return []\n    heapq.heapify(list1)\n    for i in range(n-1):\n        heapq.heappop(list1)\n    return list1\ndef ins_sort(list1):\n    '''\n    Write a function that takes in a list and returns the list sorted by insertion.\n    '''\n    if list1 == []:\n        return []\n    else:\n        for i in range(1,len(list1)):\n            temp = list1[i]\n            j = i-1\n            while j>=0 and list1[j] > temp:\n                list1[j+1] = list1[j]\n                j -= 1\n            list1[j+1] = temp\n        return list1\ndef med_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n median items from the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        list1 = ins_sort(list1)\n        return list1[len(list1)/2-1:len(list1)/2+1]\ndef mode_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most frequent items from the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        list1 = ins_sort(list1)\n        return list1[len(list1)-n:len(list1)]\ndef rm_dup(list1):\n    '''\n    Write a function that takes in a list and returns a list where all duplicate items in the list are removed.\n    '''\n    if list1 == []:\n        return []\n    else:\n        list2 = []\n        for i in list1:\n            if i not in list2:\n                list2.append(i)\n        return list2\ndef f_first(list1,f):\n    '''\n    Write a function that takes in a list and a function and returns a new list that is the result of applying the function to each element in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [f(list1[0])] + f_first(list1[1:],f)\ndef add_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of adding n to every item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0] + n] + add_nnum(list1[1:],n)\ndef div_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of dividing each item in the list by n.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0]/n] + div_nnum(list1[1:],n)\ndef sum_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of adding n to every item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0] + n] + sum_nnum(list1[1:],n)\ndef mul_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of multiplying each item in the list by n.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0] * n] + mul_nnum(list1[1:],n)\ndef power_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of raising each item in the list to the power of n.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0] ** n] + power_nnum(list1[1:],n)\ndef max_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of finding the max value in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [max(list1[0],list1[0] ** n)] + max_nnum(list1[1:],n)\ndef find_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of finding the nth largest item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0]] + find_nnum(list1[1:],n)\ndef lcm_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of finding the nth smallest item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0]] + lcm_nnum(list1[1:],n)\ndef find_smallest_item(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of finding the nth smallest item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0]] + find_smallest_item(list1[1:],n)\ndef gcd_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of finding the nth smallest item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0]] + gcd_nnum(list1[1:],n)\ndef find_largest_item(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of finding the nth largest item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0]] + find_largest_item(list1[1:],n)\ndef sum_nnums(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of adding the nth number in the list to the sum of the numbers in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0] + sum_nnums(list1[1:],n)]\ndef add_nnum_to_list(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of adding n to every item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0] + n] + add_nnum_to_list(list1[1:],n)\ndef sub_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that is the result of subtracting n from every item in the list.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0] - n] "
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n    \ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\n    \ndef median(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items from the list that are evenly spaced between the smallest and largest items in the list.\n    '''\n    if n % 2 == 0:\n        median = (list1[n/2-1]+list1[n/2])/2\n    else:\n        median = list1[n/2]\n    return median\n    \ndef largest_dif(list1,list2,n):\n    '''\n    Write a function that takes in two lists and an integer n and returns a list containing the n items from the first list that are not in the second list.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in range(0,n):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1\n    \ndef smallest_dif(list1,list2,n):\n    '''\n    Write a function that takes in two lists and an integer n and returns a list containing the n items from the first list that are not in the second list.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in range(0,n):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1\n    \ndef pairs_sum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of all the pairs of integers from the list that sum up to the integer n.\n    '''\n    list1.sort()\n    res = []\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i]+list1[j] == n:\n                res.append((list1[i],list1[j]))\n    return res\n    \ndef pairs_dif(list1,list2,n):\n    '''\n    Write a function that takes in two lists and an integer n and returns a list of all the pairs of integers from the first list that are not in the second list.\n    '''\n    list1.sort()\n    list2.sort()\n    res = []\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i]+list1[j] == n:\n                res.append((list1[i],list1[j]))\n    return res\n    \ndef find_pair(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of all the pairs of integers from the list that sum up to the integer n.\n    '''\n    list1.sort()\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] + list1[j] == n:\n                return (list1[i],list1[j])\n    return None\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    print(list1[:n])\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res=[]\n    for i in range(n):\n        largest=heapq.nlargest(n,list1)\n        res.append(largest[-1])\n        del largest[-1]\n        list1=largest\n    return res\n    \n    \ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res=[]\n    for i in range(n):\n        res.append(max(list1))\n        list1.remove(max(list1))\n    return res\n    \n    \ndef top_k_largest(l,k):\n    '''\n    Write a function that takes in a list l and an integer k and returns the k largest items from the list.\n    '''\n    return heapq.nlargest(k,l)\n    \ndef top_k_smallest(l,k):\n    '''\n    Write a function that takes in a list l and an integer k and returns the k smallest items from the list.\n    '''\n    return heapq.nsmallest(k,l)\n    \n    \ndef is_subset(lst1,lst2):\n    '''\n    Write a function that takes in two lists and returns a boolean indicating whether lst1 is a subset of lst2\n    '''\n    for i in lst2:\n        if i not in lst1:\n            return False\n    return True\n    \n    \ndef is_subset2(lst1,lst2):\n    '''\n    Write a function that takes in two lists and returns a boolean indicating whether lst1 is a subset of lst2\n    '''\n    for i in lst2:\n        if i not in lst1:\n            return False\n    return True\n    \ndef top_k_smallest2(l,k):\n    '''\n    Write a function that takes in a list l and an integer k and returns the k smallest items from the list.\n    '''\n    return heapq.nsmallest(k,l)\n    \n    \ndef min_heap(l):\n    '''\n    Write a function that takes in a list of integers and returns a min heap.\n    '''\n    return heapq.nsmallest(len(l),l)\n    \ndef max_heap(l):\n    '''\n    Write a function that takes in a list of integers and returns a max heap.\n    '''\n    return heapq.nlargest(len(l),l)\n    \n    \ndef heap_sort(l):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list using a heap.\n    '''\n    return heapq.nlargest(len(l),l)\n    \n    \ndef get_median(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return heapq.nlargest(len(l)/2,l)[0]\n    \n    \ndef get_median2(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    n=len(l)\n    if n%2==1:\n        return l[n/2]\n    else:\n        return (l[(n/2)-1] + l[(n/2)])/2\n    \n    \ndef get_median3(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \n    \ndef get_median4(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    n=len(l)\n    if n%2==1:\n        return l[n/2]\n    else:\n        return (l[(n/2)-1] + l[(n/2)])/2\n    \ndef get_median5(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    n=len(l)\n    if n%2==1:\n        return l[n/2]\n    else:\n        return (l[(n/2)-1] + l[(n/2)])/2\n    \n    \ndef get_median6(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median7(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median8(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median9(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median10(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median11(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median12(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median13(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median14(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median15(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median16(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median17(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median18(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median19(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median20(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median21(l):\n    '''\n    Write a function that takes in a list of integers and returns the median of the list.\n    '''\n    return nlargest(len(l)/2,l)[0]\n    \ndef get_median22(l):\n    '''\n    Write a function that takes in a list of integers and returns the median o"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    lst = heapq.nlargest(n,list1)\n    return lst\ndef top_ten(list1):\n    '''\n    Write a function that takes in a list and returns the top 10 items in the list.\n    '''\n    lst = heapq.nlargest(10,list1)\n    return lst\ndef top_ten_min(list1):\n    '''\n    Write a function that takes in a list and returns the top 10 items in the list.\n    '''\n    lst = heapq.nsmallest(10,list1)\n    return lst\ndef int_to_ten(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list containing the integers repeated the number of times that they appear in the list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        lst.append(list1[i])\n    return lst\ndef min_abs(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list containing the integers repeated the number of times that they appear in the list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        lst.append(list1[i])\n    return lst\ndef duplicate_all_items(list1):\n    '''\n    Write a function that takes in a list and returns a list with all the items repeated.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        lst.append(list1[i])\n    return lst\ndef rotate_list(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list in which the first element is the last element, the second element is the second to last element, and so forth.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(list1[-i])\n        lst.append(list1[-i-1])\n    return lst\ndef add_one(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list in which the first element is the sum of all the integers, and the second element is the sum of all the integers minus one.\n    '''\n    lst = []\n    lst.append(0)\n    lst.append(0)\n    for i in range(len(list1)):\n        lst.append(list1[i] + lst[-1])\n        lst.append(list1[i] + lst[-1] - 1)\n    return lst\ndef count_up_to_k(list1,k):\n    '''\n    Write a function that takes in a list of integers and a number k and returns a list containing the number of integers from the list that are less than k.\n    '''\n    lst = []\n    lst.append(0)\n    lst.append(0)\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        lst.append(list1[i])\n    for j in range(k+1):\n        lst.append(lst[-1]-j)\n        lst.append(lst[-1]-j-1)\n    return lst\ndef is_sorted(list1):\n    '''\n    Write a function that takes in a list of integers and returns True if the items in the list are sorted in ascending order and False if the items in the list are not sorted in ascending order.\n    '''\n    lst = []\n    lst.append(0)\n    lst.append(0)\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        lst.append(list1[i])\n    for j in range(len(list1)-1):\n        if lst[j] > lst[j+1]:\n            return False\n    return True\ndef count_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns the number of duplicate items in the list.\n    '''\n    lst = []\n    lst.append(0)\n    lst.append(0)\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        lst.append(list1[i])\n    for j in range(len(list1)):\n        if lst[j] == lst[j+1]:\n            lst.append(lst[j])\n            lst.append(lst[j])\n    return len(lst) - len(list1)\ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the items in the old list in reverse order.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(list1[-i])\n    return lst\ndef remove_first_and_last(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the first and last elements removed.\n    '''\n    lst = []\n    lst.append(list1[1])\n    lst.append(list1[-1])\n    for i in range(len(list1)-2):\n        lst.append(list1[i])\n    return lst\ndef count_of_a_in_b(list1,a):\n    '''\n    Write a function that takes in a list and returns a new list with the count of how many times a occurs in the list.\n    '''\n    lst = []\n    lst.append(0)\n    lst.append(0)\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        lst.append(list1[i])\n    for j in range(len(list1)):\n        if lst[j] == a:\n            lst.append(lst[j])\n            lst.append(lst[j])\n    return lst[-1]\ndef is_prime(n):\n    '''\n    Write a function that takes in a number and returns True if the number is a prime number and False if it is not a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,n):\n            if n % i == 0:\n                return False\n        return True\ndef is_subset(list1,list2):\n    '''\n    Write a function that takes in two lists and returns True if the first list is a subset of the second list and False if the first list is not a subset of the second list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n    return True\ndef is_power(base,exp):\n    '''\n    Write a function that takes in two integers and returns True if the first integer is a power of the second integer and False if it is not.\n    '''\n    if exp == 1:\n        return True\n    elif base % exp == 0:\n        return True\n    else:\n        return False\ndef union(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list with all the items in the first list followed by all the items in the second list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        lst.append(list2[i])\n    return lst\ndef intersection(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list with all the items that are in both lists.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            lst.append(list1[i]"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r=float(r)\n    h=float(h)\n    sa=2*3.14159265359*r*h\n    return sa\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r=float(r)\n    sa=4*3.14159265359*r**2\n    return sa\ndef lateralsuface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    l=float(l)\n    sa=6*l**2\n    return sa\ndef lateralsuface_rod(r,l):\n    '''\n    Write a function to find the lateral surface area of a rod.\n    '''\n    r=float(r)\n    l=float(l)\n    sa=2*3.14159265359*r*l\n    return sa\ndef lateralsuface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere.\n    '''\n    r=float(r)\n    sa=2*3.14159265359*r**2\n    return sa\ndef lateralsuface_pyramid(h):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    h=float(h)\n    sa=3*3.14159265359*h**2/3\n    return sa\ndef main():\n    l=input('Enter the length of a side of the square: ')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a square with side length',l,',is',lateralsuface_square(l),'.')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    h=input('Enter the height of the cube: ')\n    print('The lateral surface area of a cube with height',h,',is',lateralsuface_cube(h),'.')\n    l=input('Enter the length of a side of the cube: ')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a cube with side length',l,',is',lateralsuface_cube(l),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a cube with side length',l,',is',lateralsuface_cube(l),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a cube with side length',l,',is',lateralsuface_cube(l),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    h=input('Enter the height of the cube: ')\n    print('The lateral surface area of a cube with side length',l,',and height',h,',is',lateralsuface_cube(l,h),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    h=input('Enter the height of the cube: ')\n    print('The lateral surface area of a cube with side length',l,',and height',h,',is',lateralsuface_cube(l,h),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    h=input('Enter the height of the cube: ')\n    print('The lateral surface area of a cube with side length',l,',and height',h,',is',lateralsuface_cube(l,h),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    h=input('Enter the height of the cube: ')\n    print('The lateral surface area of a cube with side length',l,',and height',h,',is',lateralsuface_cube(l,h),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    h=input('Enter the height of the cube: ')\n    print('The lateral surface area of a cube with side length',l,',and height',h,',is',lateralsuface_cube(l,h),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    h=input('Enter the height of the cube: ')\n    print('The lateral surface area of a cube with side length',l,',and height',h,',is',lateralsuface_cube(l,h),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a cube with side length',l,',and radius',r,',is',lateralsuface_cube(l,r),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a cube with side length',l,',and radius',r,',is',lateralsuface_cube(l,r),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a cube with side length',l,',and radius',r,',is',lateralsuface_cube(l,r),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a sphere with radius',r,',is',lateralsuface_sphere(r),'.')\n    l=input('Enter the length of a side of the cube: ')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surface area of a cube with side length',l,',and radius',r,',is',lateralsuface_cube(l,r),'.')\n    r=input('Enter the radius of the sphere: ')\n    print('The lateral surfac"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265358979\n    a = pi*r*r\n    b = 2*pi*r\n    cylinder = a*h\n    return cylinder\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    r = float(r)\n    h = float(h)\n    area = (pi * (r**2)) + (pi * r * h)\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*pi*r*h+2*r*h*(2*pi*r))\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.1415926535897931\n    lateral_surface = 2*pi*r*(r+h)\n    return lateral_surface\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    area = pi * r**2 + 2 * pi * r * h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Your code here\n    pi=3.14159\n    return pi*(r**2)*h\ndef lateralsuface_torus(r,r2):\n    '''\n    Write a function to find the lateral surface area of a torus.\n    '''\n    # Your code here\n    return pi*(r**2)*(r2**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*r*h\n    "
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=pi*r*r+2*h*r+2*pi*r*r\n    return S\ndef lateralsphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=4*pi*r*r+2*pi*r*r+2*pi*r*r\n    return S\ndef lateralspring_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=4*pi*r*r+2*pi*r*r\n    return S\ndef lateralspring_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r+2*pi*r*r\n    return S\ndef lateralspring_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=4*pi*r*r+2*pi*r*r\n    return S\ndef lateralspring_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r+2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r+2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area of a cylinder\n    S=2*pi*r*r\n    return S\ndef lateral_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    v = l**3\n    return v\n    \n    \ndef volume_ball(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    import math\n    v = 4/3*math.pi*(r**3)\n    return v\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    import math\n    v = 4/3*math.pi*(r**3)\n    return v\n    \n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    import math\n    v = math.pi*(r**2)*h\n    return v\n    \n    \ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    import math\n    v = 1/3*math.pi*(r**2)*h\n    return v\n    \n    \ndef volume_pyramid(r, h):\n    '''\n    Write a function to find the volume of a pyramid given its radius and height.\n    '''\n    import math\n    v = (1/3)*math.pi*(r**2)*h\n    return v\n    \n    \ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere given its radius.\n    '''\n    import math\n    v = math.pi*(r**2)*2\n    return v\n    \n    \ndef area_cube(l):\n    '''\n    Write a function to find the surface area of a cube given its side length.\n    '''\n    import math\n    a = 6*l\n    return a\n    \n    \ndef area_ball(r):\n    '''\n    Write a function to find the surface area of a sphere given its radius.\n    '''\n    import math\n    a = 4*math.pi*(r**2)\n    return a\n    \n    \ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given its radius.\n    '''\n    import math\n    a = 4*math.pi*(r**2)\n    return a\n    \n    \ndef area_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder given its radius and height.\n    '''\n    import math\n    a = 2*math.pi*(r**2)+2*math.pi*r*h\n    return a\n    \n    \ndef area_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone given its radius and height.\n    '''\n    import math\n    a = math.pi*(r**2)+(math.pi*r*h)/3\n    return a\n    \n    \ndef area_pyramid(r, h):\n    '''\n    Write a function to find the surface area of a pyramid given its radius and height.\n    '''\n    import math\n    a = math.pi*(r**2)\n    return a\n    \n    \ndef area_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere given its radius.\n    '''\n    import math\n    a = math.pi*(r**2)*2\n    return a\n    \n    \ndef lcm(a, b):\n    '''\n    Write a function that computes the least common multiple of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return a*b/math.gcd(a, b)\n    \n    \ndef lcm_list(numbers):\n    '''\n    Write a function that computes the least common multiple of a list of numbers.\n    '''\n    numbers_new = list(numbers)\n    return reduce(lcm, numbers_new)\n    \n    \ndef lcm_from_list(numbers):\n    '''\n    Write a function that computes the least common multiple of a list of numbers.\n    '''\n    if len(numbers) == 0:\n        return 0\n    else:\n        return reduce(lcm, numbers)\n    \n    \ndef lcm_from_string(string):\n    '''\n    Write a function that computes the least common multiple of a list of numbers.\n    '''\n    if string == \"\":\n        return 0\n    else:\n        return reduce(lcm, map(int, string))\n    \n    \ndef primes_sieve(sieveSize):\n    '''\n    Write a function that returns a list of primes given a size.\n    '''\n    sieve = [True]*sieveSize\n    sieve[0] = False # zero and one are not prime numbers\n    sieve[1] = False # zero and one are not prime numbers\n    for i in xrange(2, int(math.sqrt(sieveSize))+1):\n        pointer = i*2\n        while pointer < sieveSize:\n            sieve[pointer] = False\n            pointer += i\n    primes = []\n    for i in xrange(sieveSize):\n        if sieve[i] == True:\n            primes.append(i)\n    return primes\n    \n    \ndef primes_sieve_eratosthenes(sieveSize):\n    '''\n    Write a function that returns a list of primes given a size.\n    '''\n    sieve = [True]*sieveSize\n    sieve[0] = False # zero and one are not prime numbers\n    sieve[1] = False # zero and one are not prime numbers\n    for i in xrange(2, int(math.sqrt(sieveSize))+1):\n        pointer = i*2\n        while pointer < sieveSize:\n            sieve[pointer] = False\n            pointer += i\n    primes = []\n    for i in xrange(sieveSize):\n        if sieve[i] == True:\n            primes.append(i)\n    return primes\n    \n    \ndef goldbach(n):\n    '''\n    Write a function that returns a list of all the even-valued pairs of integers whose sum is n.\n    '''\n    if n == 0:\n        return []\n    else:\n        even_numbers = range(2, n+1, 2)\n        odd_numbers = range(1, n+1, 2)\n        return list(zip(even_numbers, odd_numbers))\n        \n    \ndef goldbach_pair(n):\n    '''\n    Write a function that returns a list of all the even-valued pairs of integers whose sum is n.\n    '''\n    if n == 0:\n        return []\n    else:\n        even_numbers = range(2, n+1, 2)\n        odd_numbers = range(1, n+1, 2)\n        return list(zip(even_numbers, odd_numbers))\n    \n    \ndef goldbach_pair_list(n):\n    '''\n    Write a function that returns a list of all the even-valued pairs of integers whose sum is n.\n    '''\n    if n == 0:\n        return []\n    else:\n        even_numbers = range(2, n+1, 2)\n        odd_numbers = range(1, n+1, 2)\n        return list(zip(even_numbers, odd_numbers))\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a function that returns true if the string is a palindrome.\n    '''\n    return string == string[::-1]\n    \n    \ndef is_palindrome_permutation(string):\n    '''\n    Write a function that returns true if the string is a permutation of a palindrome.\n    '''\n    string_new = string.lower()\n    string_new = string_new.replace(\" \", \"\")\n    string_new = string_new.replace(\"'\", \"\")\n    string_new = string_new.replace(\"-\", \"\")\n    string_new = string_new.replace(\"\\\"\", \"\")\n    string_new = string_new.replace(\"!\", \"\")\n    string_new = string_new.replace(\".\", \"\")"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    return (3.14159265359 * r**2 * h)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    return (4.0/3.0) * 3.14159265359 * r**3\n    \ndef volume_pyramid(b, h):\n    '''\n    Write a function to find the volume of a pyramid given its base and height.\n    '''\n    return (1.0/3.0) * b * h\n    \ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    return (1.0/3.0) * (3.14159265359 * r**2 * h)\n    \ndef volume_torus(r, h):\n    '''\n    Write a function to find the volume of a torus given its radius and height.\n    '''\n    return (1.0/3.0) * (3.14159265359 * r**2 * h)\n    \ndef search(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    for i in range(0, len(A)):\n        if A[i] == elem:\n            return i\n    return -1\n    \ndef search_1(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    for i in range(0, len(A)):\n        if A[i] == elem:\n            return i\n    return -1\n    \ndef search_2(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_3(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_4(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_5(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_6(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_7(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_8(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_9(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_10(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_11(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_12(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_13(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_14(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_15(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_16(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_17(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_18(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_19(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_20(A, elem):\n    '''\n    Write a function to find the index of the first occurrence of an element in an \n    array, or -1 if it does not exist.\n    '''\n    if elem in A:\n        return A.index(elem)\n    else:\n        return -1\n    \ndef search_21(A, elem):\n    ''"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n &= ~0x1\n    n |= 0x2\n    return n\n    \nprint even_bit_set_number(42)\n    \ndef largest_number(n):\n    '''\n    Write a python function to compute the bitwise XOR of all the numbers from 1 to n.\n    '''\n    n = n & 0xFFFFFFFF\n    res = 0\n    while n > 0:\n        res = res ^ n\n        n = n & (n - 1)\n    return res\n    \nprint largest_number(0x7FFFFFFF)\n    \ndef group_by_bit(num):\n    '''\n    Write a python function to return a list of number with each bit set in the same index.\n    '''\n    bit_index = 1\n    bit_list = []\n    while num > 0:\n        if num % 2 == 0:\n            num = num & (num - 1)\n            bit_list.append(bit_index)\n        bit_index += 1\n        num = num >> 1\n    return bit_list\n    \nprint group_by_bit(0x123456789)\n    \ndef count_bits(n):\n    '''\n    Write a python function to return the count of 1s in the binary representation of a given number.\n    '''\n    bit_count = 0\n    while n > 0:\n        if n % 2 == 1:\n            bit_count += 1\n        n = n >> 1\n    return bit_count\n    \nprint count_bits(0x1)\n    \ndef least_significant_bit(n):\n    '''\n    Write a python function to return the least significant bit of the given number.\n    '''\n    bit_index = 1\n    while n > 0:\n        if n % 2 == 1:\n            n = n >> 1\n            bit_index = bit_index - 1\n        else:\n            n = n >> 1\n            bit_index = bit_index + 1\n    return bit_index\n    \nprint least_significant_bit(0x1)\n    \ndef print_bit_by_bit(n):\n    '''\n    Write a python function to print out the bit by bit representation of a number.\n    '''\n    bit_count = 0\n    while n > 0:\n        if n % 2 == 1:\n            bit_count = bit_count + 1\n            print \"1\",\n        else:\n            print \"0\",\n        n = n >> 1\n    if bit_count == 0:\n        print \"0\",\n    print \"\"\n    \nprint_bit_by_bit(0x12345)\n    \ndef find_xor_for_all_bits(n):\n    '''\n    Write a python function to return a list of numbers where each number is the XOR of all the bits of the input number.\n    '''\n    result = []\n    n = n & 0xFFFFFFFF\n    while n > 0:\n        result.append(n)\n        n = n & (n - 1)\n    return result\n    \nprint find_xor_for_all_bits(0x12345)\n    \ndef find_number_of_set_bits(n):\n    '''\n    Write a python function to return the number of set bits in a given number.\n    '''\n    count = 0\n    n = n & 0xFFFFFFFF\n    while n > 0:\n        if n % 2 == 1:\n            count = count + 1\n        n = n >> 1\n    return count\n    \nprint find_number_of_set_bits(0x12345)\n    \ndef count_bits_in_list(list):\n    '''\n    Write a python function to return the count of set bits in a list of numbers.\n    '''\n    res = 0\n    for n in list:\n        res = res + find_number_of_set_bits(n)\n    return res\n    \nprint count_bits_in_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    \ndef find_kth_set_bit(k, n):\n    '''\n    Write a python function to find the kth bit set for a number.\n    '''\n    bit_count = 0\n    while n > 0:\n        if n % 2 == 1:\n            bit_count = bit_count + 1\n            if bit_count == k:\n                return 1\n        n = n >> 1\n    return 0\n    \nprint find_kth_set_bit(2, 0x12345)\n    \ndef flip_bit(n, bit_index):\n    '''\n    Write a python function to flip the bit at the given index.\n    '''\n    bit_value = 1 << bit_index\n    return n ^ bit_value\n    \nprint flip_bit(0x12345, 2)\n    \ndef print_bin_as_string(n):\n    '''\n    Write a python function to print out the binary representation of a number as a string.\n    '''\n    res = ''\n    while n > 0:\n        if n % 2 == 1:\n            res = \"1\" + res\n        else:\n            res = \"0\" + res\n        n = n >> 1\n    return res\n    \nprint print_bin_as_string(0x1)\n    \ndef print_bit_as_string(n, bit_index):\n    '''\n    Write a python function to print out the bit at the given index.\n    '''\n    bit_value = 1 << bit_index\n    return print_bin_as_string(n ^ bit_value)\n    \nprint print_bit_as_string(0x1, 2)\n    \ndef print_bit_by_bit_as_string(n):\n    '''\n    Write a python function to print out the bit by bit representation of a number as a string.\n    '''\n    bit_count = 0\n    bit_str = \"\"\n    while n > 0:\n        if n % 2 == 1:\n            bit_str = \"1\" + bit_str\n        else:\n            bit_str = \"0\" + bit_str\n        n = n >> 1\n        bit_count = bit_count + 1\n    return bit_str\n    \nprint print_bit_by_bit_as_string(0x1)\n    \ndef print_bit_by_bit_as_list(n):\n    '''\n    Write a python function to print out the bit by bit representation of a number as a list of ints.\n    '''\n    bit_list = []\n    bit_str = print_bit_by_bit_as_string(n)\n    for bit in bit_str:\n        bit_list.append(int(bit))\n    return bit_list\n    \nprint print_bit_by_bit_as_list(0x1)\n    \ndef all_bits_zero_number(n):\n    '''\n    Write a python function to return the first number that has all the bits set to 0.\n    '''\n    n = n & 0xFFFFFFFF\n    while n > 0:\n        if n % 2 == 1:\n            n = n & (n - 1)\n        else:\n            n = n >> 1\n    return n\n    \nprint all_bits_zero_number(0x1)\n    \ndef all_bits_zero_number_list(n):\n    '''\n    Write a python function to return the first number that has all the bits set to 0.\n    '''\n    n = n & 0xFFFFFFFF\n    res = []\n    while n > 0:\n        if n % 2 == 1:\n            n = n & (n - 1)\n        else:\n            n = n >> 1\n        res.append(n)\n    return res\n    \nprint all_bits_zero_number_list(0x1)\n    \ndef count_bits_in_list_efficient(list):\n    '''\n    Write a python function to return the count of set bits in a list of numbers.\n    '''\n    bit_count = 0\n    for n in list:\n        bit_count = bit_count + find_number_of_set_bits(n)\n    return bit_count\n    \nprint count_bits_in_list_efficient([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    \ndef count_bits_in_list_efficient_range(low, high):\n    '''\n    Write a python function to return the count of set bits in a lis"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return n\n    else:\n        return n ^ even_bit_set_number(n >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # return bin(n).replace(\"0b\",\"\").count(\"1\")\n    return n & ((n-1) ^ n)\n    \nassert even_bit_set_number(5) == 2\nassert even_bit_set_number(7) == 1\nassert even_bit_set_number(8) == 2\nassert even_bit_set_number(1) == 0\nassert even_bit_set_number(2) == 2\nassert even_bit_set_number(10) == 1\nassert even_bit_set_number(11) == 2\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1 << n.bit_length() - 1\n    return (n & mask)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def even_bit_set(n): \n        return n + (1 << n.bit_length() - 1)\n    return reduce(even_bit_set, xrange(n.bit_length()))\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = int(n)\n    s = '{0:b}'.format(n)\n    num = 0\n    for i in s:\n        if i == '0':\n            num += 1\n        if i == '1':\n            if num % 2 == 0:\n                num = 1\n            else:\n                num = 0\n    return num\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n &= (1 << 32) - 1\n    n = n >> 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # counter = Counter()\n    # for x in test_list:\n    #     counter[x] += 1\n    # return counter\n    # OR\n    # return dict(Counter(test_list))\n    return {k: v for k, v in Counter(test_list).iteritems() if v == 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    final_dictionary = {}\n    for each_item in test_list:\n        if each_item in final_dictionary:\n            final_dictionary[each_item] += 1\n        else:\n            final_dictionary[each_item] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n    #my_list = [('a', 1), ('b', 2), ('a', 1), ('b', 2), ('a', 1), ('b', 2), ('a', 1)]\n    #print check_occurences(my_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    c=Counter(test_list)\n    return c\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # we use Counter() to return a dictionary with the key value pairs as the elements and their counts\n    return Counter(test_list)\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for key, value in test_list:\n        if key in occurences.keys():\n            occurences[key] = occurences[key] + 1\n        else:\n            occurences[key] = 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #initialize result \n    count = 0 \n    #iterate over all the substring \n    for i in range(len(str)): \n        for j in range(i+1,len(str)+1): \n            #get the substring and store it in temp \n            temp = str[i:j]\n            #if temp is not empty \n            if temp: \n                #increment the count\n                count += 1 \n    #return the count \n    return count "
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str) - str.count(' ')\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # count = 0\n    # for i in range(len(str)):\n    #     if len(str[i:]) > 0:\n    #         count += 1\n    # return count\n    return len(str) - len(str.replace(\" \", \"\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n    count = 1\n    sub_str_size = 1\n    i = 0\n    while i < len(str):\n        j = 0\n        while j < sub_str_size:\n            if i + j >= len(str):\n                break\n            if str[i + j] == str[i]:\n                count += 1\n                j += 1\n            else:\n                break\n        i += 1\n        j = 0\n        sub_str_size += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = list(str)\n    n = len(l)\n    count = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            if l[i]!='':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in xrange(len(str)):\n        j = i\n        while j < len(str):\n            if str[j] =='':\n                break\n            j += 1\n        count += 1\n    return count\n    "
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring = str[i:j+1]\n            if substring!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if len(str[i:j])>0:\n                substrings = substrings + 1\n    return substrings\n    \ndef find_first_last(str):\n    '''\n    Write a python function to find the first and last index of a given substring in a given string.\n    '''\n    start = -1\n    end = -1\n    for i in range(len(str)):\n        if str[i] == str[0]:\n            start = i\n        elif str[i] == str[len(str)-1]:\n            end = i\n    return start, end\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m==1 or n==1:\n        return 1\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m-n, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return math.factorial(n) / (math.factorial(n-m)*math.factorial(m))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return m**n - (m-1)**(n-1)\n    \n    \n    \ndef get_total_number_of_perfect_squares(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of possible perfect squares that exist of length n.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return get_total_number_of_perfect_squares(n-1) + get_total_number_of_perfect_squares(n-2)\n    \ndef get_total_number_of_positive_numbers_of_length_n(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of possible positive numbers of length n.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return get_total_number_of_positive_numbers_of_length_n(n-1) + get_total_number_of_positive_numbers_of_length_n(n-2)\n    \n    \n    \ndef get_total_number_of_prime_factors_of_a_number(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of prime factors that exist of length n.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 1\n    \n    if n == 3:\n        return 2\n    \n    if n % 2 == 0:\n        return get_total_number_of_prime_factors_of_a_number(n/2) + 1\n    \n    return get_total_number_of_prime_factors_of_a_number(n - 1) + 1\n    \n    \n    \ndef get_total_number_of_unique_prime_factors_of_numbers_of_length_n(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of unique prime factors of numbers of length n.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 4\n    \n    if n % 2 == 0:\n        return get_total_number_of_unique_prime_factors_of_numbers_of_length_n(n/2) + get_total_number_of_unique_prime_factors_of_numbers_of_length_n(n/2 - 1) + 1\n    \n    return get_total_number_of_unique_prime_factors_of_numbers_of_length_n(n - 1) + get_total_number_of_unique_prime_factors_of_numbers_of_length_n(n - 2) + 1\n    \n    \n    \n    \ndef is_palindrome(n): \n    '''\n    Write a function that takes in a positive integer n and returns True if it is a palindrome, and False otherwise.\n    '''\n    \n    if n == 0:\n        return True\n    \n    if n == 1:\n        return True\n    \n    if n == 2:\n        return False\n    \n    return is_palindrome(n/2) and (n % 2 == 0)\n    \n    \n    \ndef get_largest_palindrome(n): \n    '''\n    Write a function that takes in a positive integer n and returns the largest palindrome of length n.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 9\n    \n    if n == 2:\n        return 11\n    \n    return get_largest_palindrome(n - 1) + 9\n    \n    \n    \ndef get_smallest_multiple_of_n(n): \n    '''\n    Write a function that takes in a positive integer n and returns the smallest multiple of n that exists.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return get_smallest_multiple_of_n(n - 1) + 1\n    \n    \n    \ndef get_total_number_of_sets_of_n_element(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of sets of length n that can be formed from the set {1, 2,..., n}.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return n\n    \n    if n == 2:\n        return 2*n\n    \n    return get_total_number_of_sets_of_n_element(n - 1) + get_total_number_of_sets_of_n_element(n - 2)\n    \n    \n    \ndef get_total_number_of_permutations_of_n_elements(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of permutations of length n.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return get_total_number_of_permutations_of_n_elements(n - 1) + get_total_number_of_permutations_of_n_elements(n - 2)\n    \n    \n    \ndef get_total_number_of_combinations_of_n_elements(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of combinations of length n.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return get_total_number_of_combinations_of_n_elements(n - 1) + get_total_number_of_combinations_of_n_elements(n - 2)\n    \n    \n    \ndef get_total_number_of_permutations_of_n_elements_with_duplicates(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of permutations of length n, with duplicates.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return get_total_number_of_permutations_of_n_elements_with_duplicates(n - 1) + get_total_number_of_permutations_of_n_elements_with_duplicates(n - 2)\n    \n    \n    \ndef get_total_number_of_combinations_of_n_elements_with_duplicates(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of combinations of length n, with duplicates.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return get_total_number_of_combinations_of_n_elements_with_duplicates(n - 1) + get_total_number_of_combinations_of_n_elements_with_duplicates(n - 2)\n    \n    \n    \ndef get_total_number_of_cartesian_product_of_n_elements(n): \n    '''\n    Write a function that takes in a positive integer n and returns the number of cartesian products of length n.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if m == 1 or n == 1:\n        return 1\n    elif m == 2:\n        return 1\n    elif m == 3:\n        return 1\n    elif m == 4:\n        return 1\n    elif m == 5:\n        return 1\n    elif m == 6:\n        return 2\n    elif m == 7:\n        return 2\n    elif m == 8:\n        return 1\n    elif m == 9:\n        return 2\n    elif m == 10:\n        return 1\n    elif m == 11:\n        return 2\n    elif m == 12:\n        return 1\n    elif m == 13:\n        return 2\n    elif m == 14:\n        return 1\n    elif m == 15:\n        return 2\n    elif m == 16:\n        return 1\n    elif m == 17:\n        return 2\n    elif m == 18:\n        return 1\n    elif m == 19:\n        return 2\n    elif m == 20:\n        return 1\n    elif m == 21:\n        return 2\n    elif m == 22:\n        return 1\n    elif m == 23:\n        return 2\n    elif m == 24:\n        return 1\n    elif m == 25:\n        return 2\n    elif m == 26:\n        return 1\n    elif m == 27:\n        return 2\n    elif m == 28:\n        return 1\n    elif m == 29:\n        return 2\n    elif m == 30:\n        return 1\n    elif m == 31:\n        return 2\n    elif m == 32:\n        return 1\n    elif m == 33:\n        return 2\n    elif m == 34:\n        return 1\n    elif m == 35:\n        return 2\n    elif m == 36:\n        return 1\n    elif m == 37:\n        return 2\n    elif m == 38:\n        return 1\n    elif m == 39:\n        return 2\n    elif m == 40:\n        return 1\n    elif m == 41:\n        return 2\n    elif m == 42:\n        return 1\n    elif m == 43:\n        return 2\n    elif m == 44:\n        return 1\n    elif m == 45:\n        return 2\n    elif m == 46:\n        return 1\n    elif m == 47:\n        return 2\n    elif m == 48:\n        return 1\n    elif m == 49:\n        return 2\n    elif m == 50:\n        return 1\n    elif m == 51:\n        return 2\n    elif m == 52:\n        return 1\n    elif m == 53:\n        return 2\n    elif m == 54:\n        return 1\n    elif m == 55:\n        return 2\n    elif m == 56:\n        return 1\n    elif m == 57:\n        return 2\n    elif m == 58:\n        return 1\n    elif m == 59:\n        return 2\n    elif m == 60:\n        return 1\n    elif m == 61:\n        return 2\n    elif m == 62:\n        return 1\n    elif m == 63:\n        return 2\n    elif m == 64:\n        return 1\n    elif m == 65:\n        return 2\n    elif m == 66:\n        return 1\n    elif m == 67:\n        return 2\n    elif m == 68:\n        return 1\n    elif m == 69:\n        return 2\n    elif m == 70:\n        return 1\n    elif m == 71:\n        return 2\n    elif m == 72:\n        return 1\n    elif m == 73:\n        return 2\n    elif m == 74:\n        return 1\n    elif m == 75:\n        return 2\n    elif m == 76:\n        return 1\n    elif m == 77:\n        return 2\n    elif m == 78:\n        return 1\n    elif m == 79:\n        return 2\n    elif m == 80:\n        return 1\n    elif m == 81:\n        return 2\n    elif m == 82:\n        return 1\n    elif m == 83:\n        return 2\n    elif m == 84:\n        return 1\n    elif m == 85:\n        return 2\n    elif m == 86:\n        return 1\n    elif m == 87:\n        return 2\n    elif m == 88:\n        return 1\n    elif m == 89:\n        return 2\n    elif m == 90:\n        return 1\n    elif m == 91:\n        return 2\n    elif m == 92:\n        return 1\n    elif m == 93:\n        return 2\n    elif m == 94:\n        return 1\n    elif m == 95:\n        return 2\n    elif m == 96:\n        return 1\n    elif m == 97:\n        return 2\n    elif m == 98:\n        return 1\n    elif m == 99:\n        return 2\n    elif m == 100:\n        return 1\n    elif m == 101:\n        return 2\n    elif m == 102:\n        return 1\n    elif m == 103:\n        return 2\n    elif m == 104:\n        return 1\n    elif m == 105:\n        return 2\n    elif m == 106:\n        return 1\n    elif m == 107:\n        return 2\n    elif m == 108:\n        return 1\n    elif m == 109:\n        return 2\n    elif m == 110:\n        return 1\n    elif m == 111:\n        return 2\n    elif m == 112:\n        return 1\n    elif m == 113:\n        return 2\n    elif m == 114:\n        return 1\n    elif m == 115:\n        return 2\n    elif m == 116:\n        return 1\n    elif m == 117:\n        return 2\n    elif m == 118:\n        return 1\n    elif m == 119:\n        return 2\n    elif m == 120:\n        return 1\n    elif m == 121:\n        return 2\n    elif m == 122:\n        return 1\n    elif m == 123:\n        return 2\n    elif m == 124:\n        return 1\n    elif m == 125:\n        return 2\n    elif m == 126:\n        return 1\n    elif m == 127:\n        return 2\n    elif m == 128:\n        return 1\n    elif m == 129:\n        return 2\n    elif m == 130:\n        return 1\n    elif m == 131:\n        return 2\n    elif m == 132:\n        return 1\n    elif m == 133:\n        return 2\n    elif m == 134:\n        return 1\n    elif m == 135:\n        return 2\n    elif m == 136:\n        return 1\n    elif m == 137:\n        return 2\n    elif m == 138:\n        return 1\n    elif m == 139:\n        return 2\n    elif m == 140:\n        return 1\n    elif m == 141:\n        return 2\n    elif m == 142:\n        return 1\n    elif m == 143:\n        return 2\n    elif m == 144:\n        return 1\n    elif m == 145:\n        return 2\n    elif m == 146:\n        return 1\n    elif m == 147:\n        return 2\n    elif m == 148:\n        return 1\n    elif m == 149:\n        return 2\n    elif m == 150:\n        return 1\n    elif m == 151:\n        return 2\n    elif m == 152:\n        return 1\n    elif m == 153:\n        return 2\n    elif m == 154:\n        return 1\n    elif m == 155:\n        return 2\n    elif m == 156:\n        return 1\n    elif m == 157:\n        return 2\n    elif m == 158:\n        return 1\n    elif m == 159:\n        return 2\n    elif m == 160:\n        return 1\n    elif m == 161:\n        return 2\n    elif m == 162:\n        return 1\n    elif m == 163:\n        return 2\n    elif m == 164:\n        retur"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    return sum(get_total_number_of_sequences(m,i) for i in range(1,n))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Ensure that both are positive integers.\n    if not isinstance(m, int) or not isinstance(n, int) or m <= 0 or n <= 0: \n        return 'Invalid Input'\n    \n    # Initialize the counts.\n    counts = [1]*n\n    \n    # Update counts.\n    for i in range(1,n):\n        for j in range(i):\n            if 2*j < i:\n                counts[i] += counts[j]\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from math import ceil\n    total_number = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if ceil(i/2) == j:\n                total_number += 1\n    return total_number\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**n\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 1 or n < 1:\n        raise ValueError(\"m and n must be >= 1\")\n    if m == 1:\n        return n\n    if m < n:\n        return 0\n    return get_total_number_of_sequences(m-1,n-1) + m * get_total_number_of_sequences(m-2,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 0 or n <= 0:\n        raise ValueError(\"M and n must both be positive\")\n    if m < 2 * n:\n        raise ValueError(\"There must be at least 2n elements in the sequence to start\")\n    if m < n:\n        return 0\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    if len(list1)<len(list2):\n        print(\"List is longer than 2nd list\")\n        return\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    l1 = list1\n    l2 = list2\n    l1[-1] = l2[-1]\n    return l1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        return \"List1 must have more elements than list2\"\n    else:\n        list1[-1] = list2\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        return list1 + list2[len(list1):]\n    else:\n        return list1[:-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    i = 0\n    for item in list2:\n        if i == len(list1) -1:\n            list1[i] = item\n        i += 1\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    d={}\n    for i in str1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] =='':\n            pass\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if str1=='':\n        return 0\n    return 1+count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if type(str1) is str:\n        return len(str1)\n    elif type(str1) is list:\n        return len(str1)\n    else:\n        return None\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))\n    if (n*n == N):\n        return n+1\n    return n*n\ndef SieveOfEratosthenes(n):\n    '''\n    Write a python function to find the sum of all the primes less than or equal to n.\n    '''\n    if n<2: return 0\n    arr = [True]*n\n    arr[0] = arr[1] = False\n    for i in range(2,int(math.sqrt(n))+1):\n        if arr[i]:\n            for j in range(i*i,n,i):\n                arr[j] = False\n    return sum(arr)\ndef next_Power_of_2(n):\n    '''\n    Write a python function to find the next power of 2 greater than or equal to n.\n    '''\n    if n<2: return 2\n    ans = 1\n    while(ans<n):\n        ans *= 2\n    return ans\ndef Count_Arrays_With_Sum(A,Sum):\n    '''\n    Write a python function to count the number of arrays with a sum equal to a given number.\n    '''\n    if not A: return 0\n    count = 0\n    n = len(A)\n    for i in range(1<<n):\n        s = 0\n        for j in range(n):\n            if i & (1<<j): s += A[j]\n        if s == Sum: count += 1\n    return count\ndef Maximum_and_Minimum(A):\n    '''\n    Write a python function to find the maximum and minimum elements of an array.\n    '''\n    if not A: return (None,None)\n    min_ = A[0]\n    max_ = A[0]\n    for i in range(1,len(A)):\n        if A[i]<min_: min_ = A[i]\n        if A[i]>max_: max_ = A[i]\n    return (min_,max_)\ndef Power_of_2(n):\n    '''\n    Write a python function to find the power of a given number that is a power of 2.\n    '''\n    if not n: return False\n    ans = 1\n    while(ans<n):\n        ans *= 2\n    return ans==n\ndef Reduce_Path(path):\n    '''\n    Write a python function to find the number of steps required to reduce a path to 0.\n    '''\n    if not path: return 0\n    ans = 0\n    for i in range(1,len(path)):\n        if path[i] == 0:\n            return ans\n        ans += abs(path[i]-path[i-1])\n    return ans\ndef Max_Rectangle_Area(R):\n    '''\n    Write a python function to find the area of the largest rectangle in a histogram.\n    '''\n    if not R: return 0\n    n = len(R)\n    T = [0]*n\n    T[0] = R[0]\n    ans = R[0]\n    for i in range(1,n):\n        T[i] = max(R[i],T[i-1])\n        ans = max(ans,T[i]*i)\n    return ans\ndef Max_Rectangle(A):\n    '''\n    Write a python function to find the maximum area possible in a histogram.\n    '''\n    if not A: return 0\n    n = len(A)\n    T = [0]*n\n    T[0] = A[0]\n    ans = A[0]\n    for i in range(1,n):\n        T[i] = max(A[i],T[i-1])\n        ans = max(ans,T[i]*i)\n    return ans\ndef Longest_Increasing_Subsequence(A):\n    '''\n    Write a python function to find the length of the longest increasing subsequence.\n    '''\n    if not A: return 0\n    ans = 1\n    n = len(A)\n    T = [0]*n\n    T[0] = 1\n    for i in range(1,n):\n        T[i] = 1\n        for j in range(i):\n            if A[i] > A[j] and T[i]<T[j]:\n                T[i] = T[j]+1\n        ans = max(ans,T[i])\n    return ans\ndef Unique_Paths(m,n):\n    '''\n    Write a python function to find the number of ways to reach the top right corner from the bottom left corner.\n    '''\n    if m==1 or n==1: return 1\n    return Unique_Paths(m-1,n)+Unique_Paths(m,n-1)\ndef Pascal_Triangle(n):\n    '''\n    Write a python function to find the values in a Pascal's Triangle for a given row index.\n    '''\n    if not n: return []\n    arr = []\n    for i in range(n):\n        arr.append([])\n        for j in range(i+1):\n            if j==0 or j==i:\n                arr[i].append(1)\n            else:\n                arr[i].append(arr[i-1][j-1]+arr[i-1][j])\n    return arr\ndef String_Anagram(S,T):\n    '''\n    Write a python function to check whether two strings are anagrams.\n    '''\n    if not S and not T: return True\n    if len(S)!=len(T): return False\n    dic = {}\n    for i in range(len(S)):\n        if S[i] not in dic:\n            dic[S[i]] = 1\n        else:\n            dic[S[i]] += 1\n    for j in range(len(T)):\n        if T[j] not in dic:\n            return False\n        else:\n            dic[T[j]] -= 1\n            if dic[T[j]]<0:\n                return False\n    return True\ndef Sum_of_Arrays(A):\n    '''\n    Write a python function to find the sum of all the elements of an array.\n    '''\n    if not A: return 0\n    ans = 0\n    for i in range(len(A)):\n        ans += A[i]\n    return ans\ndef Min_Heapify(A,i,n):\n    '''\n    Write a python function to heapify an array.\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    smallest = i\n    if l<n and A[l]<A[i]:\n        smallest = l\n    if r<n and A[r]<A[smallest]:\n        smallest = r\n    if smallest!= i:\n        A[i],A[smallest] = A[smallest],A[i]\n        Min_Heapify(A,smallest,n)\ndef Build_Min_Heap(A):\n    '''\n    Write a python function to build a min heap.\n    '''\n    n = len(A)\n    for i in range(int(math.floor(n/2)),-1,-1):\n        Min_Heapify(A,i,n)\ndef Heap_Extract_Min(A):\n    '''\n    Write a python function to extract the minimum element from a heap.\n    '''\n    n = len(A)\n    if not A: return None\n    A[0],A[n-1] = A[n-1],A[0]\n    A = A[:n-1]\n    Min_Heapify(A,0,n-1)\ndef Print_Heap(A):\n    '''\n    Write a python function to print a heap in an array.\n    '''\n    n = len(A)\n    for i in range(int(math.floor(n/2))+1):\n        print(A[i],end=' ')\n    print()\n    for i in range(int(math.floor(n/2))+1,n):\n        print(A[i],end=' ')\n    print()\ndef Binary_Search(A,num):\n    '''\n    Write a python function to search a given element in a sorted array.\n    '''\n    if not A"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N))+1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N)) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1:\n        return 2\n    N = math.floor(math.sqrt(N))\n    return N * (N+1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))+1\n    return n**2\n    \ndef fib(n):\n    '''\n    Write a python function to compute the nth Fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt = int(math.sqrt(N))\n    return sqrt * sqrt + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = 1\n    while (x <= N):\n        x = x + 1\n        if is_Perfect_Square(x) == True:\n            return x\n    return -1\ndef is_Perfect_Square(N):\n    '''\n    Write a python function to check if the given number N is a perfect square.\n    '''\n    s = int(math.sqrt(N))\n    return s*s == N\ndef Binary_Search(A, l, r, key):\n    '''\n    Write a python function to perform a binary search over a sorted list of integers, l and r.\n    '''\n    while (l <= r):\n        mid = (l+r)/2\n        if A[mid] == key:\n            return mid\n        if A[mid] < key:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\ndef f(x):\n    '''\n    Write a python function to compute f(x) = x**4 + x**3 + 2*x**2 - 4*x + 5 for a given value x.\n    '''\n    return x**4 + x**3 + 2*x**2 - 4*x + 5\ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a given number n.\n    '''\n    prime_nums = []\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            prime_nums.append(i)\n    if n > 1:\n        prime_nums.append(n)\n    return prime_nums\ndef is_Prime(n):\n    '''\n    Write a python function to check if the given number n is a prime number.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_Binary_Search(A, l, r, key):\n    '''\n    Write a python function to perform a binary search over a sorted list of integers, l and r, and return the index of the element if it exists, otherwise return -1.\n    '''\n    while (l <= r):\n        mid = (l+r)/2\n        if A[mid] == key:\n            return mid\n        if A[mid] < key:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\ndef is_Binary_Search_wIndex(A, l, r, key):\n    '''\n    Write a python function to perform a binary search over a sorted list of integers, l and r, and return the index of the element if it exists, otherwise return -1. Additionally, return the index of the element if it exists, otherwise return -1.\n    '''\n    while (l <= r):\n        mid = (l+r)/2\n        if A[mid] == key:\n            return [mid, mid]\n        if A[mid] < key:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return [-1, -1]\ndef is_Binary_Search_wIndex_l(A, l, r, key):\n    '''\n    Write a python function to perform a binary search over a sorted list of integers, l and r, and return the index of the element if it exists, otherwise return -1. Additionally, return the index of the element if it exists, otherwise return -1.\n    '''\n    while (l <= r):\n        mid = (l+r)/2\n        if A[mid] == key:\n            return [mid, mid]\n        if A[mid] < key:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return [-1, -1]\ndef find_rotation_point(A):\n    '''\n    Write a python function to find the rotation point of a rotated sorted array A.\n    '''\n    n = len(A)\n    if n == 0 or n == 1:\n        return n\n    l = 0\n    r = n-1\n    while (l <= r):\n        mid = (l+r)/2\n        if A[l] > A[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\ndef is_rotated_sorted(A):\n    '''\n    Write a python function to check if a given array is a rotated sorted array.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if A[0] > A[n-1]:\n        return is_rotated_sorted_wIndex(A, 0, n-1)\n    return is_rotated_sorted_wIndex(A, 0, n-1)\ndef is_rotated_sorted_wIndex(A, l, r):\n    '''\n    Write a python function to check if a given array is a rotated sorted array.\n    '''\n    while (l <= r):\n        mid = (l+r)/2\n        if A[l] > A[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l == 0\ndef two_sum(A, x):\n    '''\n    Write a python function to find the two elements that add up to a given number x.\n    '''\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == x:\n                return [i, j]\n    return []\ndef find_rotation_point_array(A):\n    '''\n    Write a python function to find the rotation point of a rotated sorted array A.\n    '''\n    n = len(A)\n    if n == 1:\n        return 0\n    if n == 0:\n        return -1\n    l = 0\n    r = n-1\n    while (l <= r):\n        mid = (l+r)/2\n        if A[mid] > A[r]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\ndef find_rotation_point_array_wIndex(A):\n    '''\n    Write a python function to find the rotation point of a rotated sorted array A.\n    '''\n    n = len(A)\n    if n == 1:\n        return 0\n    if n == 0:\n        return -1\n    l = 0\n    r = n-1\n    while (l <= r):\n        mid = (l+r)/2\n        if A[mid] > A[r]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\ndef is_rotated_sorted_wIndex(A, l, r):\n    '''\n    Write a python function to check if a given array is a rotated sorted array.\n    '''\n    while (l <= r):\n        mid = (l+r)/2\n        if A[l] > A[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l == 0\ndef find_rotation_point_array_wIndex(A):\n    '''\n    Write a python function to find the rotation point of a rotated sorted array A.\n    '''\n    n = len(A)\n    if n == 1:\n        return 0\n    if n == 0:\n        return -1\n    l = 0\n    r = n-1\n    while (l <= r):\n        mid = (l+r)/2\n        if A[l] > A[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\ndef find_rotation_point_array_wIndex_l(A, l, r):\n    '''\n    Write a python function to find the rotation point of a rotated sorted array A.\n    '''\n    while (l <= r):\n        mid = (l+r)/2\n        if A[l] > A[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\ndef is_rotated_sorted_wIndex_l(A, l, r):\n    '''\n    Write a python function to check if a given array is a rotated sorted array.\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.ceil(math.sqrt(N)))\n    return root*root\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = int(math.sqrt(N))\n    sq+=1\n    return sq*sq\ndef closestPair(P):\n    '''\n    Write a python function that takes as input a list of point objects and finds the closest pair of points.\n    '''\n    P=sorted(P,key=lambda pt:pt[0])\n    min_d=float('inf')\n    for i in range(len(P)-1):\n        for j in range(i+1,len(P)):\n            d=math.sqrt((P[i][0]-P[j][0])**2+(P[i][1]-P[j][1])**2)\n            if d<min_d:\n                min_d=d\n    return min_d\ndef merge_intervals(I):\n    '''\n    Write a python function that takes as input a list of intervals and returns a merged interval that contains all the intervals in the input.\n    '''\n    I=sorted(I,key=lambda x:x[0])\n    t=I[0]\n    for i in range(1,len(I)):\n        if t[1]>=I[i][0]:\n            t=[min(t[0],I[i][0]),max(t[1],I[i][1])]\n        else:\n            t=I[i]\n    return t\ndef closest_pair(P):\n    '''\n    Write a python function that takes as input a list of point objects and finds the closest pair of points.\n    '''\n    P=sorted(P,key=lambda pt:pt[0])\n    min_d=float('inf')\n    for i in range(len(P)-1):\n        for j in range(i+1,len(P)):\n            d=math.sqrt((P[i][0]-P[j][0])**2+(P[i][1]-P[j][1])**2)\n            if d<min_d:\n                min_d=d\n    return min_d\ndef sum_of_squares(P):\n    '''\n    Write a python function that takes as input a list of point objects and returns the sum of the squared distance between each point in the list and the origin.\n    '''\n    x0=0\n    y0=0\n    d=0\n    for pt in P:\n        x=pt[0]\n        y=pt[1]\n        d+=x**2+y**2\n    return d\ndef list_of_pairs(P):\n    '''\n    Write a python function that takes as input a list of point objects and returns a list of all pairs of points.\n    '''\n    P=sorted(P,key=lambda pt:pt[0])\n    L=[]\n    for i in range(len(P)-1):\n        for j in range(i+1,len(P)):\n            L.append([P[i],P[j]])\n    return L\ndef k_closest(P,K):\n    '''\n    Write a python function that takes as input a list of point objects and an integer K and returns the K closest points in the list.\n    '''\n    P=sorted(P,key=lambda pt:pt[0])\n    L=[]\n    for i in range(K):\n        L.append(P[i])\n    return L\ndef median_of_list(P):\n    '''\n    Write a python function that takes as input a list of point objects and returns the median point in the list.\n    '''\n    P=sorted(P,key=lambda pt:pt[0])\n    n=len(P)\n    if n%2:\n        return P[n//2]\n    else:\n        return (P[n//2]+P[n//2-1])/2\ndef centroid(P):\n    '''\n    Write a python function that takes as input a list of point objects and returns the centroid of the set of points.\n    '''\n    x=0\n    y=0\n    for pt in P:\n        x+=pt[0]\n        y+=pt[1]\n    x/=len(P)\n    y/=len(P)\n    return [x,y]\ndef k_means(P,K,max_iters=100):\n    '''\n    Write a python function that takes as input a list of point objects, an integer K, and an integer max_iters and returns a list of K points corresponding to the centroids of the K clusters that minimizes the sum of squared distances from each point to the centroid.\n    '''\n    C=[]\n    for i in range(K):\n        C.append([])\n    for pt in P:\n        for i in range(K):\n            C[i].append(pt)\n    iters=0\n    while iters<max_iters:\n        iters+=1\n        for i in range(K):\n            C[i]=centroid(C[i])\n        changed=False\n        for i in range(K):\n            for j in range(len(C[i])):\n                if not pt_closer(C[i],C[(i+1)%K],P[j]):\n                    changed=True\n                    C[i],C[(i+1)%K]=C[(i+1)%K],C[i]\n                    break\n            if changed:\n                break\n    return C\ndef no_vert_triangles(P):\n    '''\n    Write a python function that takes as input a list of point objects and returns the number of verticies triangles in the set of points.\n    '''\n    L=list_of_pairs(P)\n    T=0\n    for i in range(len(L)):\n        for j in range(i+1,len(L)):\n            for k in range(j+1,len(L)):\n                if vert_triangle(L[i],L[j],L[k]):\n                    T+=1\n    return T\ndef vert_triangle(P1,P2,P3):\n    '''\n    Write a python function that takes as input three point objects and returns True if there is a verticie triangle between the three points and False otherwise.\n    '''\n    a=P2[0]-P1[0]\n    b=P2[1]-P1[1]\n    c=P3[0]-P1[0]\n    d=P3[1]-P1[1]\n    if a*d-b*c>=0:\n        return False\n    else:\n        return True\ndef convex_hull(P):\n    '''\n    Write a python function that takes as input a list of point objects and returns a list of the vertices of the convex hull of the set of points.\n    '''\n    L=sorted(P,key=lambda pt:pt[0])\n    H=[]\n    for i in range(len(L)):\n        for j in range(len(H)):\n            if is_left(L[i],H[j],L[(i+1)%len(L)])>=0:\n                H.insert(j,L[i])\n                break\n        if i==len(L)-1:\n            H.append(L[i])\n    return H\ndef is_left(A,B,C):\n    '''\n    Write a python function that takes as input three point objects and returns the sign of the area that the points are collinear.\n    '''\n    a=B[1]-A[1]\n    b=C[1]-A[1]\n    c=A[1]-B[1]\n    d=B[0]-A[0]\n    e=C[0]-A[0]\n    f=A[0]-B[0]\n    return a*d-b*c<0\ndef is_colinear(P):\n    '''\n    Write a python function that takes as input a list of point objects and returns True if the points are colinear and False otherwise.\n    '''\n    P=sorted(P,key=lambda pt:pt[0])\n    for i in range(len(P)-2):\n        if not is_colinear(P[i],P[i+1],P[i+2]):\n            return False\n    return True\ndef farthest_pair(P):\n    '''\n    Write a python function that take"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    return int(N*N + 0.5)\ndef sum_of_factors(N):\n    '''\n    Write a python function to find the sum of factors of a given number\n    '''\n    N = int(N)\n    if N < 1:\n        return 0\n    return 1 + sum_of_factors(N - 1)\ndef summation(N):\n    '''\n    Write a python function to find the summation of first N natural numbers using recursion\n    '''\n    N = int(N)\n    if N < 1:\n        return 0\n    return N + summation(N - 1)\ndef sum_of_digits(N):\n    '''\n    Write a python function to find the sum of the digits of a given number\n    '''\n    N = int(N)\n    if N < 10:\n        return N\n    else:\n        return sum_of_digits(N / 10) + N % 10\ndef factorial(N):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    N = int(N)\n    if N < 1:\n        return 1\n    return N * factorial(N - 1)\ndef isPrime(N):\n    '''\n    Write a python function to check whether a given number is prime or not\n    '''\n    N = int(N)\n    if N < 1:\n        return False\n    if N == 2:\n        return True\n    if N % 2 == 0:\n        return False\n    i = 3\n    while i * i <= N:\n        if N % i == 0:\n            return False\n        i += 2\n    return True\ndef get_sum_of_digits(N):\n    '''\n    Write a python function to get the sum of the digits of a given number\n    '''\n    N = int(N)\n    if N < 10:\n        return N\n    else:\n        return get_sum_of_digits(N / 10) + N % 10\ndef odd_or_even(N):\n    '''\n    Write a python function to check whether a given number is even or odd\n    '''\n    N = int(N)\n    if N < 10:\n        return 'even' if N % 2 == 0 else 'odd'\n    else:\n        return odd_or_even(N / 10)\ndef find_factors(N):\n    '''\n    Write a python function to find the factors of a given number\n    '''\n    N = int(N)\n    if N < 1:\n        return []\n    if N == 1:\n        return [1]\n    i = 2\n    factors = []\n    while i * i <= N:\n        if N % i == 0:\n            factors.append(i)\n            factors.append(N / i)\n        i += 1\n    if i * i > N:\n        factors.append(N)\n    return sorted(factors)\ndef is_Prime(N):\n    '''\n    Write a python function to check whether a given number is prime or not\n    '''\n    N = int(N)\n    if N < 1:\n        return False\n    if N == 1:\n        return False\n    if N == 2:\n        return True\n    if N % 2 == 0:\n        return False\n    i = 3\n    while i * i <= N:\n        if N % i == 0:\n            return False\n        i += 2\n    return True\ndef number_of_factors(N):\n    '''\n    Write a python function to find the number of factors of a given number\n    '''\n    N = int(N)\n    if N < 1:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    i = 2\n    count = 0\n    while i * i <= N:\n        if N % i == 0:\n            count += 1\n        i += 1\n    if i * i > N:\n        count += 1\n    return count\ndef factors(N):\n    '''\n    Write a python function to find the factors of a given number\n    '''\n    N = int(N)\n    if N < 1:\n        return []\n    if N == 1:\n        return [1]\n    i = 2\n    factors = []\n    while i * i <= N:\n        if N % i == 0:\n            factors.append(i)\n            factors.append(N / i)\n        i += 1\n    if i * i > N:\n        factors.append(N)\n    return sorted(factors)\ndef find_gcd(x, y):\n    '''\n    Write a python function to find the greatest common divisor of two numbers\n    '''\n    if x < y:\n        (x, y) = (y, x)\n    while y:\n        (x, y) = (y, x % y)\n    return x\ndef gcd(x, y):\n    '''\n    Write a python function to find the greatest common divisor of two numbers\n    '''\n    if x < y:\n        (x, y) = (y, x)\n    while y:\n        (x, y) = (y, x % y)\n    return x\ndef lcm(x, y):\n    '''\n    Write a python function to find the least common multiple of two numbers\n    '''\n    return x * y / find_gcd(x, y)\ndef factorial_iterative(N):\n    '''\n    Write a python function to find the factorial of a given number using iterative approach\n    '''\n    N = int(N)\n    if N < 1:\n        return 1\n    result = 1\n    for i in range(2, N + 1):\n        result *= i\n    return result\ndef factors_iterative(N):\n    '''\n    Write a python function to find the factors of a given number using iterative approach\n    '''\n    N = int(N)\n    if N < 1:\n        return []\n    if N == 1:\n        return [1]\n    i = 2\n    factors = []\n    while i * i <= N:\n        if N % i == 0:\n            factors.append(i)\n            factors.append(N / i)\n        i += 1\n    if i * i > N:\n        factors.append(N)\n    return sorted(factors)\ndef is_Prime_iterative(N):\n    '''\n    Write a python function to check whether a given number is prime or not using iterative approach\n    '''\n    N = int(N)\n    if N < 1:\n        return False\n    if N == 1:\n        return False\n    if N == 2:\n        return True\n    if N % 2 == 0:\n        return False\n    i = 3\n    while i * i <= N:\n        if N % i == 0:\n            return False\n        i += 2\n    return True\ndef palindrome_permutation(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not\n    '''\n    string = string.lower()\n    letters = {}\n    for letter in string:\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    odds = 0\n    for letter in letters:\n        if letters[letter] % 2!= 0:\n            odds += 1\n    return False if odds > 1 else True\ndef can_break_palindrome(string):\n    '''\n    Write a python function to check whether a given string can break a palindrome or not\n    '''\n    string = string.lower()\n    letters = {}\n    for letter in string:\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    odds = 0\n    for letter in letters:\n        if letters[letter] % 2!= 0:\n            odds += 1\n    return False if odds > 1 else True\ndef break_palindrome(string):\n    '''\n    Write a python function to break a palindrome\n    '''\n    string = string.lower()\n    letters = {}\n    for letter in string:\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    odds = "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0: return 0\n    \n    max_sum, curr_sum = 0, 0\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    curr_max = arr[0]\n    curr_min = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n        elif arr[i] < curr_min:\n            curr_min = arr[i]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3: \n        return 0\n    left = [0]*len(arr)\n    right = [0]*len(arr)\n    left[0] = arr[0]\n    right[len(arr)-1] = arr[len(arr)-1]\n    res = left[0]\n    for i in xrange(1,len(arr)): \n        left[i] = max(left[i-1], arr[i])\n        res = max(res, left[i]+right[len(arr)-1-i])\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    '''\n    brute force:\n    find the first increasing sequence then find the max sum for this sub array\n    '''\n    i = 0\n    while i < len(arr):\n        j = i\n        while j < len(arr) - 1:\n            if arr[j] > arr[j+1]:\n                break\n            j += 1\n        i = j\n    if i == 0:\n        return sum(arr)\n    elif i == len(arr) - 1:\n        return sum(arr[i-1:i+1])\n    else:\n        return sum(arr[i-1:i+1]) + max_sum(arr[:i] + arr[i+1:])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # find first peak\n    i, n = 0, len(arr)\n    while i < n and arr[i] < arr[i+1]:\n        i += 1\n    \n    if i == n: # no bitonic sequence\n        return 0\n    \n    # find first valley\n    j, m = i, i\n    while j < n and arr[j] > arr[j+1]:\n        j += 1\n    \n    if j == n: # no valley\n        return arr[i]\n    \n    # find max subarray\n    j = j + 1\n    start, end, max_sum = j, j, arr[j]\n    while j < n:\n        if arr[j] < arr[j-1]: # found peak\n            start = j\n            while j < n and arr[j] < arr[j-1]:\n                j += 1\n            end = j\n            max_sum = max(max_sum, sum(arr[start:end]))\n        else: # found valley\n            j += 1\n    \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #initialize sum as the first element of the array\n    max_sum = arr[0]\n    \n    #iterate over the array and check if the next element is greater than the current element\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            #if the current element is less than the next, we just keep adding the next element until it's greater than the current element\n            while arr[i] < arr[i+1]:\n                arr[i+1] = arr[i+1] + arr[i+2]\n            #if the current element is greater than the next, we just keep adding the current element until it's less than the next element\n            while arr[i] > arr[i+1]:\n                arr[i+1] = arr[i+1] + arr[i]\n            #compare the current sum with the max sum and update max sum\n            if arr[i] + arr[i+1] > max_sum:\n                max_sum = arr[i] + arr[i+1]\n    return max_sum\n        \nprint max_sum([34,8,10,3,2,1,15,10,7])\n        "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    res = 0\n    s = [0 for i in range(n)]\n    for i in range(n):\n        s[i] = arr[i]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] > arr[i]:\n                s[i] = max(s[j]+arr[i], s[i])\n    \n    for i in range(n):\n        res = max(res, s[i])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_seq = []\n    max_sum_seq = []\n    for i in range(0,len(arr)):\n        bitonic_seq.append(0)\n    for i in range(1,len(arr)):\n        if arr[i] > arr[i-1]:\n            bitonic_seq[i] = bitonic_seq[i-1] + arr[i]\n        else:\n            bitonic_seq[i] = bitonic_seq[i-1]\n    max_sum_seq.append(bitonic_seq[0])\n    for i in range(1,len(bitonic_seq)):\n        if bitonic_seq[i-1] < bitonic_seq[i] > bitonic_seq[i-1]:\n            max_sum_seq.append(bitonic_seq[i])\n    return max_sum_seq\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    left = arr[:len(arr)//2]\n    right = arr[len(arr)//2:]\n    \n    return max(max_sum(left), max_sum(right))\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Cannot compute square root of a negative number')\n    if number == 0:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Create a list for the interval of possible solutions\n    solution_interval = []\n    \n    # Set the first possible solution\n    solution_interval.append(1)\n    \n    # Set the last possible solution\n    solution_interval.append(number)\n    \n    # Compute the first solution\n    solution = 0.5*(solution_interval[0] + solution_interval[1])\n    \n    # Loop through the list of possible solutions until a solution is found\n    while True:\n        # Check if the current solution is in the list of possible solutions\n        if solution in solution_interval:\n            break\n        \n        # Add the current solution to the list of possible solutions\n        solution_interval.append(solution)\n        \n        # Create a copy of the current list of possible solutions\n        solution_interval_copy = list(solution_interval)\n        \n        # Loop through the current list of possible solutions\n        for current_solution in solution_interval_copy:\n            # Compute the new possible solutions\n            new_solution = 0.5*(solution + current_solution)\n            \n            # Add the new possible solutions to the list of possible solutions\n            solution_interval.append(new_solution)\n        \n        # Find the best possible solution\n        solution = max(solution_interval)\n    \n    # Return the best possible solution\n    return solution\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # I have left in comments for your suggestion on how to do this. \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    for i in range(10):\n        guess = (guess + number/guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # TODO - finish the function implementation\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    if isinstance(number, int) or isinstance(number, float):\n        return math.sqrt(number)\n    else:\n        return None\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # first define the limit\n    limit = 30\n    \n    # next, define the tolerances\n    max_difference = 0.00001\n    \n    # then, define the x1, x2 values\n    x1 = 0\n    x2 = 1\n    \n    # set the first x value\n    x = x1\n    \n    # define the counter\n    counter = 0\n    \n    # now, until the tolerance is met, do the following:\n    while True:\n        # increase the counter\n        counter += 1\n        \n        # define the new x value\n        x = 0.5*(x1 + x2)\n        \n        # if the new x value is greater than the limit, the value is not accurate enough\n        if x > limit:\n            return \"inaccurate\"\n        \n        # if the difference between the new x value and the previous value is less than the tolerance, the tolerance is met\n        if abs(x - x2) < max_difference:\n            break\n        \n        # else, increment the x1 value and the x2 value\n        x1 = x2\n        x2 = x\n        \n    # then, return the counter and the square root of the number\n    return counter, x\n    \n    \n    \n    \ndef fibonacci_squareroot(number):\n    '''\n    Write a function for computing square roots using the fibonacci method.\n    '''\n    \n    # first define the limit\n    limit = 30\n    \n    # next, define the tolerances\n    max_difference = 0.00001\n    \n    # then, define the x1, x2 values\n    x1 = 0\n    x2 = 1\n    \n    # set the first x value\n    x = x1\n    \n    # define the counter\n    counter = 0\n    \n    # now, until the tolerance is met, do the following:\n    while True:\n        # increase the counter\n        counter += 1\n        \n        # define the new x value\n        x = x1 + x2\n        \n        # if the new x value is greater than the limit, the value is not accurate enough\n        if x > limit:\n            return \"inaccurate\"\n        \n        # if the difference between the new x value and the previous value is less than the tolerance, the tolerance is met\n        if abs(x - x2) < max_difference:\n            break\n        \n        # else, increment the x1 value and the x2 value\n        x1 = x2\n        x2 = x\n        \n    # then, return the counter and the square root of the number\n    return counter, x\n    \n    \n    \n    \n    \n    \ndef newton_squareroot(number):\n    '''\n    Write a function for computing square roots using the newton method.\n    '''\n    \n    # first define the limit\n    limit = 30\n    \n    # next, define the tolerances\n    max_difference = 0.00001\n    \n    # then, define the x1, x2 values\n    x1 = 0\n    x2 = 1\n    \n    # set the first x value\n    x = x1\n    \n    # define the counter\n    counter = 0\n    \n    # now, until the tolerance is met, do the following:\n    while True:\n        # increase the counter\n        counter += 1\n        \n        # define the new x value\n        x = x1 - (x2**2 - x1)/(2*x2)\n        \n        # if the new x value is greater than the limit, the value is not accurate enough\n        if x > limit:\n            return \"inaccurate\"\n        \n        # if the difference between the new x value and the previous value is less than the tolerance, the tolerance is met\n        if abs(x - x2) < max_difference:\n            break\n        \n        # else, increment the x1 value and the x2 value\n        x1 = x2\n        x2 = x\n        \n    # then, return the counter and the square root of the number\n    return counter, x\n    \n    \n    \n    \n    \ndef pythagorean_squareroot(number):\n    '''\n    Write a function for computing square roots using the pythagorean method.\n    '''\n    \n    # first define the limit\n    limit = 30\n    \n    # next, define the tolerances\n    max_difference = 0.00001\n    \n    # then, define the x1, x2 values\n    x1 = 0\n    x2 = 1\n    \n    # set the first x value\n    x = x1\n    \n    # define the counter\n    counter = 0\n    \n    # now, until the tolerance is met, do the following:\n    while True:\n        # increase the counter\n        counter += 1\n        \n        # define the new x value\n        x = x1 + x2\n        \n        # if the new x value is greater than the limit, the value is not accurate enough\n        if x > limit:\n            return \"inaccurate\"\n        \n        # if the difference between the new x value and the previous value is less than the tolerance, the tolerance is met\n        if abs(x - x2) < max_difference:\n            break\n        \n        # else, increment the x1 value and the x2 value\n        x1 = x2\n        x2 = x\n        \n    # then, return the counter and the square root of the number\n    return counter, x\n    \n    \n    \n    \n    \n    \n    \ndef quadratic_squareroot(number):\n    '''\n    Write a function for computing square roots using the quadratic method.\n    '''\n    \n    # first define the limit\n    limit = 30\n    \n    # next, define the tolerances\n    max_difference = 0.00001\n    \n    # then, define the x1, x2 values\n    x1 = 0\n    x2 = 1\n    \n    # set the first x value\n    x = x1\n    \n    # define the counter\n    counter = 0\n    \n    # now, until the tolerance is met, do the following:\n    while True:\n        # increase the counter\n        counter += 1\n        \n        # define the new x value\n        x = x1 - (x2**2 - x1)/(2*x2)\n        \n        # if the new x value is greater than the limit, the value is not accurate enough\n        if x > limit:\n            return \"inaccurate\"\n        \n        # if the difference between the new x value and the previous value is less than the tolerance, the tolerance is met\n        if abs(x - x2) < max_difference:\n            break\n        \n        # else, increment the x1 value and the x2 value\n        x1 = x2\n        x2 = x\n        \n    # then, return the counter and the square root of the number\n    return counter, x\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # It is easier to work with floats than integers.\n    number = float(number)\n    # Compute the ratio of the initial value to the absolute value.\n    ratio = number/abs(number)\n    # It is more efficient to work with floats than integers.\n    root = (ratio - (ratio**2))/(2*ratio)\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while guess*guess!= number:\n        guess = (guess + number/guess)/2\n    return guess\n    \ndef simple_squareroot(number):\n    '''\n    Write a function for computing square roots using the simple method.\n    '''\n    if number < 0:\n        print(\"The simple method cannot be used to compute square roots for negative numbers.\")\n        return -1\n    if number == 0:\n        return 0\n    return number**.5\n    \ndef comparison(number):\n    '''\n    Write a function for computing square roots using babylonian and simple methods.\n    '''\n    if number < 0:\n        print(\"The simple method cannot be used to compute square roots for negative numbers.\")\n        return -1\n    if number == 0:\n        return 0\n    \n    guess = number/2\n    simple = simple_squareroot(number)\n    babylonian = babylonian_squareroot(number)\n    \n    if simple == babylonian:\n        return \"The two methods give the same answer.\"\n    \n    if simple > babylonian:\n        return \"The simple method is more accurate than the babylonian method.\"\n    else:\n        return \"The babylonian method is more accurate than the simple method.\"\n    \n    \n    \n    "
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    iterations = 0\n    guess = number / 2\n    \n    while abs(guess ** 2 - number) > 0.001:\n        guess = (guess + number / guess) / 2\n        iterations += 1\n    \n    return guess, iterations\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #dynamic programming solution\n    #TODO\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    maxLen=1\n    for i in range(len(str)-1):\n        #palindromic substrings are strings that have the same letters\n        #in the same order as they appear\n        #case sensitive\n        if str[i] == str[i+1]:\n            len1=lps(str[:i+1])\n            len2=lps(str[i+2:])\n            currLen=1+len1+len2\n            if currLen>maxLen:\n                maxLen=currLen\n    return maxLen\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    t = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        t[i][i] = 1\n    for L in range(2,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            if str[i] == str[j] and L == 2:\n                t[i][j] = 2\n            elif str[i] == str[j]:\n                t[i][j] = 2 + t[i+1][j-1]\n            else:\n                t[i][j] = max(t[i][j-1], t[i+1][j])\n    return t[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for j in range(len(str))] for i in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    for l in range(2, len(str)+1):\n        for i in range(len(str)-l+1):\n            j = i+l-1\n            if l == 2:\n                if str[i] == str[j]:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                if str[i] == str[j]:\n                    dp[i][j] = 2+dp[i+1][j-1]\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    T = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        T[i][i] = 1\n    for j in range(2, n+1):\n        for i in range(n-j+1):\n            k = i + j - 1\n            if str[i] == str[k] and j == 2:\n                T[i][k] = 2\n            elif str[i] == str[k]:\n                T[i][k] = T[i+1][k-1] + 2\n            else:\n                T[i][k] = max(T[i][k-1], T[i+1][k])\n    return T[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    mat = [[0 for x in range(n)] for x in range(n)] \n    '''\n    Following steps build LPS[][] in bottom up manner. \n    Note that LPS[i][j] is calculated in following way : \n    LPS[i][j] = 1 + LPS[i + 1][j - 1] (if str[i] == str[j]) \n    LPS[i][j] = max(LPS[i][j - 1], LPS[i + 1][j]); \n    '''\n    for i in range(n): \n        for j in range(i+1): \n            if str[i] == str[j] and i!= j: \n                mat[i][j] = 2 + mat[i+1][j-1] \n            else: \n                mat[i][j] = max(mat[i][j-1], mat[i+1][j]) \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n)] for j in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]\n    \ndef longSubstr(str): \n    '''\n    Write a function to find the longest palindromic substring in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n)] for j in range(n)] \n    start = 0\n    maxlen = 1\n    for i in range(n): \n        dp[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n            if dp[i][j] > maxlen: \n                maxlen = dp[i][j]\n                start = i\n    return str[start:start + maxlen]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    return lpsHelper(str, 0, len(str)-1)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return lps_helper(str, 0, len(str) - 1)\n    \ndef lps_helper(str, start, end):\n    if start > end:\n        return 0\n    if start == end:\n        return 1\n    if str[start] == str[end]:\n        return 2 + lps_helper(str, start + 1, end - 1)\n    else:\n        return max(lps_helper(str, start, end - 1), lps_helper(str, start + 1, end))\n    \n    "
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # global LCS\n    # LCS = [[0 for j in range(len(str))] for i in range(len(str))]\n    # print LCS\n    # for i in range(1,len(str)):\n    #     for j in range(1,len(str)):\n    #         LCS[i][j] = 1 + LCS[i-1][j-1] if str[i] == str[j] else max(LCS[i-1][j],LCS[i][j-1])\n    #         print LCS\n    # return LCS[-1][-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n    for i in range(n):\n        total += 1/i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n    \ndef find_nth_harmonic(n):\n    '''\n    Write a function that takes in an integer n and calculates the nth harmonic sum.\n    Harmonic sums start with the harmonic sum of 0 and 1. A harmonic sum is just the sum of the reciprocals of the positive integers. \n    For example, the harmonic sum of 5 is 1 + 1/2 + 1/3 + 1/4 + 1/5 = 1/1 + 2/2 + 3/3 + 4/4 + 5/5 = 1 + 1/2 + 1/3 + 1/4 + 1/5 = 1/1 + 1/2 + 1/3 + 1/4 + 1/5.\n    \n    Given an integer n, your function should return the nth harmonic sum.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 / n + find_nth_harmonic(n - 1)\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if the number is prime, or False if the number is not prime.\n    A prime number is a positive integer greater than 1 that cannot be formed by multiplying two smaller positive integers. \n    For example, 2, 3, 5, 7, 11, and 13 are all prime numbers because they cannot be formed by multiplying two smaller numbers.\n    \n    You can assume that you will only be given numbers in the range 2 to 10000 (inclusive).\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef count_vowels(s):\n    '''\n    Write a function that takes in a string s and returns the number of vowels in s.\n    The vowels are a, e, i, o, and u.\n    For example, count_vowels('Jame') should return 3.\n    '''\n    if s == '':\n        return 0\n    else:\n        if s[0].lower() in 'aeiou':\n            return 1 + count_vowels(s[1:])\n        else:\n            return count_vowels(s[1:])\n    \ndef count_consonants(s):\n    '''\n    Write a function that takes in a string s and returns the number of consonants in s.\n    The consonants are a, e, i, o, and u.\n    For example, count_consonants('Jame') should return 3.\n    '''\n    if s == '':\n        return 0\n    else:\n        if s[0].lower() not in 'aeiou':\n            return 1 + count_consonants(s[1:])\n        else:\n            return count_consonants(s[1:])\n    \ndef reverse_characters(s):\n    '''\n    Write a function that takes in a string s and returns the reverse of s.\n    For example, reverse_characters('Jame') should return'meJ'.\n    '''\n    if len(s) == 0:\n        return ''\n    else:\n        return reverse_characters(s[1:]) + s[0]\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string s and returns True if s is a palindrome, or False if it is not.\n    A palindrome is a word or phrase that reads the same backward as forward. \n    For example, \"racecar\" and \"tacocat\" are palindromes.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and is_palindrome(s[1:-1])\n    \ndef is_anagram(s, t):\n    '''\n    Write a function that takes in two strings s and t and returns True if s and t are anagrams of each other, or False if they are not.\n    Two strings are anagrams of each other if they are made up of the same characters, but the order of the characters can be different. \n    For example, \"listen\" and \"silent\" are anagrams of each other.\n    '''\n    if len(s)!= len(t):\n        return False\n    else:\n        s_set = set(s)\n        t_set = set(t)\n        if s_set == t_set:\n            return True\n        else:\n            return False\n    \ndef is_anagram_with_counter(s, t):\n    '''\n    Write a function that takes in two strings s and t and returns True if s and t are anagrams of each other, or False if they are not.\n    Two strings are anagrams of each other if they are made up of the same characters, but the order of the characters can be different. \n    For example, \"listen\" and \"silent\" are anagrams of each other.\n    '''\n    if len(s)!= len(t):\n        return False\n    else:\n        s_counter = {}\n        t_counter = {}\n        for c in s:\n            s_counter[c] = s_counter.get(c, 0) + 1\n        for c in t:\n            t_counter[c] = t_counter.get(c, 0) + 1\n        return s_counter == t_counter\n    \ndef is_anagram_with_hash_table(s, t):\n    '''\n    Write a function that takes in two strings s and t and returns True if s and t are anagrams of each other, or False if they are not.\n    Two strings are anagrams of each other if they are made up of the same characters, but the order of the characters can be different. \n    For example, \"listen\" and \"silent\" are anagrams of each other.\n    '''\n    if len(s)!= len(t):\n        return False\n    else:\n        s_counter = {}\n        t_counter = {}\n        for c in s:\n            s_counter[c] = s_counter.get(c, 0) + 1\n        for c in t:\n            t_counter[c] = t_counter.get(c, 0) + 1\n        return s_counter == t_counter\n    \ndef is_anagram_with_sort(s, t):\n    '''\n    Write a function that takes in two strings s and t and returns True if s and t are anagrams of each other, or False if they are not.\n    Two strings are anagrams of each other if they are made up of the same characters, but the order of the characters can be different. \n    For example, \"listen\" and \"silent\" are anagrams of each other.\n    '''\n    if len(s)!= len(t):\n        return False\n    else:\n        s_counter = {}\n        t_counter = {}\n        for c in s:\n            s_counter[c] = s_counter.get(c, 0) + 1\n        for c in t:\n            t_counter[c] = t_counter.get(c, 0) + 1\n        if sorted(s_counter.values()) == sorted(t_counter.values()):\n            return True\n        else:\n            return False\n    \ndef is_anagram_with_sorted(s, t):\n    '''\n    Write a function that takes in two strings s and t and returns True if s and t are anagrams of each other, or False if they are not.\n    Two strings are anagrams of each other if they are made up of the same characters, but the order of the characters can be different. \n    For example, \"listen\" and \"silent\" are anagrams of each other.\n    '''\n    if len(s)!= len(t):\n        return False\n    else:\n        s_counter = []\n        t_counter = []\n        for c in s:\n            s_counter.append(c)\n        for c in t:\n            t_counter.append(c)\n        s_counter.sort()\n        t_counter.sort()\n        return s_counte"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    return (1+n)/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert isinstance(n, int), 'n must be an integer'\n    if n < 1:\n        return None\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #    n-1! / n!\n    return 1 / n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n==1 else 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    def harmonic_sum_helper(n):\n        if n == 0:\n            return 0\n        else:\n            return n + (1 / n)\n    result = 0\n    for i in range(1, n):\n        result = result + (1 / i)\n    return result\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/float(n-1)\n    # OR, return float(1 + sum([1/float(n-1)]))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = set(array_nums1)\n    for i in range(len(array_nums2)):\n        if array_nums2[i] in array_nums1:\n            return array_nums2[i]\n    return None\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        return intersection_array(array_nums2,array_nums1)\n    \n    # sorted array\n    sorted_array1 = sorted(array_nums1)\n    sorted_array2 = sorted(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                result.append(num1)\n                break\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # First we are going to check if the two arrays are the same size.\n    if len(array_nums1)!= len(array_nums2):\n        return -1\n    # Now we are going to find the intersection of the two arrays.\n    # The while loop will continue until the end of both arrays.\n    # i will be the index that will be used to interate through the arrays.\n    # and while array_nums1[i] == array_nums2[i]:\n    # array_nums1[i] is the intersection number.\n    i = 0\n    while i < len(array_nums1):\n        # if array_nums1[i] == array_nums2[i]:\n        # array_nums1[i] is the intersection number.\n        # we are gonna return the index of the intersection.\n        if array_nums1[i] == array_nums2[i]:\n            return array_nums1[i]\n        i+=1\n    return -1\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n1=len(array_nums1)\n    n2=len(array_nums2)\n    output=[0]*(n1+n2)\n    i=0\n    j=0\n    while i<n1 and j<n2:\n        if array_nums1[i]==array_nums2[j]:\n            output[i+j]=array_nums1[i]\n            i+=1\n            j+=1\n        elif array_nums1[i]>array_nums2[j]:\n            j+=1\n        else:\n            i+=1\n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1)&set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    '''\n    The idea is to keep a running count for each array.\n    If the two arrays are the same length,\n    find the difference in the count of each element.\n    If the arrays are different lengths,\n    check the lengths, but start with the shortest array.\n    If the lengths are the same, check the differences until\n    there is a difference, and move on to the next length.\n    '''\n    # Note: The below code is based on the notes given in the \n    #  comments above the function.\n    array_nums1_len = len(array_nums1)\n    array_nums2_len = len(array_nums2)\n    # Set the return value to an empty list.\n    # The below code is based on the comments above the \n    #  function.\n    intersection_array = []\n    # If both arrays are the same length,\n    # make a new array.\n    if array_nums1_len == array_nums2_len:\n        # For each element in array 1,\n        for element1 in array_nums1:\n            # Count how many times the element occurs\n            # in array 2.\n            count = 0\n            for element2 in array_nums2:\n                # Check if the element is the same.\n                # If it is, add one to the count.\n                if element1 == element2:\n                    count += 1\n            # Now add the count to the return array.\n            intersection_array.append(count)\n    else:\n        # If the arrays are different lengths,\n        # check the length of the shortest array.\n        shortest_array_len = min(array_nums1_len,array_nums2_len)\n        # For each element in the shortest array,\n        for index in range(0,shortest_array_len):\n            # If the element is the same,\n            if array_nums1[index] == array_nums2[index]:\n                # Add one to the count.\n                intersection_array.append(1)\n            else:\n                # Add a zero to the count.\n                intersection_array.append(0)\n        # If the arrays are of the same length,\n        # check the values until the difference is \n        # found.\n        if array_nums1_len == array_nums2_len:\n            # Find the differences until the difference is found.\n            for index in range(0,shortest_array_len):\n                # If the difference is found,\n                if array_nums1[index]!= array_nums2[index]:\n                    # Check the difference.\n                    if array_nums1[index] - array_nums2[index] == 1:\n                        # Add a one to the array.\n                        intersection_array.append(1)\n                    else:\n                        # Add a zero to the array.\n                        intersection_array.append(0)\n                    break\n        else:\n            # Check the differences until the difference is found.\n            for index in range(0,shortest_array_len):\n                # If the difference is found,\n                if array_nums1[index]!= array_nums2[index]:\n                    # Check the difference.\n                    if array_nums1[index] - array_nums2[index] == 1:\n                        # Add a one to the array.\n                        intersection_array.append(1)\n                    else:\n                        # Add a zero to the array.\n                        intersection_array.append(0)\n                    break\n    # Return the array.\n    return intersection_array\n    \ndef main():\n    # Test the function with example data.\n    test_1 = [1,2,2,1]\n    test_2 = [2,2]\n    print(intersection_array(test_1,test_2))\n    # The return value should be [1,2,1].\n    # Return an empty list for an empty array.\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for item in array_nums1:\n        if item in array_nums2:\n            intersection_array.append(item)\n    return intersection_array\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup: \n        if t == x: \n            count += 1\n    return count\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_x = (x, tup.count(x))\n    return tup_x\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for a in tup:\n        if a == x:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tuple_list = list(tup)\n    count = 0\n    for i in range(len(tuple_list)):\n        if tuple_list[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your Code Here\n    # pass\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]*len(list)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    else:\n        return [element] + insert_element(list[:-1],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your Code Here\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [list[0]] + [element] + list[1:]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for n in numbers:\n        z = cmath.polar(n)\n        result.append(z)\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in numbers:\n        print(i.real,\" + \",i.imag,\" i\")\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    converted = []\n    for n in numbers:\n        polar = cmath.polar(n)\n        converted.append(polar)\n    return converted\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=0\n    for each in numbers:\n        x+=(each[0]**2+each[1]**2)**0.5\n    return x\ndef radian(x,y):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=x.real\n    y=y.imag\n    r=x**2+y**2\n    return cmath.phase(complex(x,y))\ndef change(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=0\n    for each in numbers:\n        x+=(each[0]**2+each[1]**2)**0.5\n    return x\ndef get_angle(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=0\n    for each in numbers:\n        x+=(each[0]**2+each[1]**2)**0.5\n    return x\ndef part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        x+=each\n    return x\ndef part_sum2(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        x+=each\n    return x\ndef add_part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        x+=each\n    return x\ndef add_part_sum2(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        x+=each\n    return x\ndef div_part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        x+=each\n    return x\ndef div_part_sum2(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        x+=each\n    return x\ndef odd_part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2!=0:\n            x+=each\n    return x\ndef even_part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n    return x\ndef add_even_part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n    return x\ndef add_odd_part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2!=0:\n            x+=each\n    return x\ndef sub_even_part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x-=each\n    return x\ndef sub_odd_part_sum(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2!=0:\n            x-=each\n    return x\ndef add_part_sum_div(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef add_part_sum_div2(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef sub_part_sum_div(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x-=each\n        else:\n            x+=each\n    return x\ndef sub_part_sum_div2(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x-=each\n        else:\n            x+=each\n    return x\ndef add_part_sum_div_sub(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef add_part_sum_div_sub2(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef odd_part_sum_div(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2!=0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef even_part_sum_div(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x-=each\n        else:\n            x+=each\n    return x\ndef add_even_part_sum_div(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef add_odd_part_sum_div(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2!=0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef div_part_sum_div(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x-=each\n        else:\n            x+=each\n    return x\ndef div_part_sum_div2(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x-=each\n        else:\n            x+=each\n    return x\ndef add_part_sum_div_sub(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef add_part_sum_div_sub2(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x+=each\n        else:\n            x-=each\n    return x\ndef sub_part_sum_div_sub(numbers):\n    '''\n    Write a python function to calculate partial sums.\n    '''\n    x=0\n    for each in numbers:\n        if each%2==0:\n            x-=each"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r=cmath.polar(numbers)\n    return r\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    real = []\n    imaginary = []\n    \n    for number in numbers:\n        real.append(number.real)\n        imaginary.append(number.imag)\n    return(real, imaginary)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = cmath.polar(number)\n        polar_coordinates.append(r)\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    length = len(numbers)\n    t = []\n    \n    for i in range(length):\n        t.append(complex(numbers[i][0],numbers[i][1]))\n        \n    r = []\n    theta = []\n    \n    for i in t:\n        r.append(abs(i))\n        theta.append(cmath.phase(i))\n        \n    return [r,theta]\n        \n    \n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    from math import sqrt\n    magnitude = sqrt(numbers[0]**2 + numbers[1]**2)\n    phase = cmath.phase(numbers)\n    print (\"{:.2f}\".format(magnitude))\n    print (\"{:.2f}\".format(phase))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    coefficient = numbers[0]\n    base = numbers[1]\n    angle = degrees(atan(base/coefficient))\n    if coefficient < 0:\n        angle = 360 + angle\n    return [coefficient, angle]\n    \ndef converter(num):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    if num[1] == 0:\n        return (num[0], 1)\n    else:\n        return (num[0]*cmath.exp(1j*cmath.radians(num[1])), 1)\n    \ndef getangle(number):\n    '''\n    Write a python function to get the angle of a complex number.\n    '''\n    return degrees(atan(number.imag/number.real))\n    \ndef getcomplex(angle):\n    '''\n    Write a python function to get the complex number with a particular angle.\n    '''\n    return cmath.exp(1j*cmath.radians(angle))\n    \ndef get_polar(angle):\n    '''\n    Write a python function to get the angle and complex number of a polar number.\n    '''\n    angle = radians(angle)\n    coefficient = sqrt(1 - (angle.real**2 + angle.imag**2))\n    base = angle.real\n    return [coefficient, base]\n    \ndef get_complex(angle, coef):\n    '''\n    Write a python function to get the complex number with a particular angle and coefficient.\n    '''\n    angle = radians(angle)\n    base = coef*cos(angle)\n    return complex(base, coef*sin(angle))\n    \ndef get_polar(angle):\n    '''\n    Write a python function to get the angle and complex number of a polar number.\n    '''\n    angle = radians(angle)\n    coefficient = sqrt(1 - (angle.real**2 + angle.imag**2))\n    base = angle.real\n    return [coefficient, base]\n    \ndef get_complex(angle, coef):\n    '''\n    Write a python function to get the complex number with a particular angle and coefficient.\n    '''\n    angle = radians(angle)\n    base = coef*cos(angle)\n    return complex(base, coef*sin(angle))\n    \ndef main():\n    num = complex(1,1)\n    num1 = convert([1,1])\n    num2 = getangle(num)\n    num3 = getcomplex(num)\n    num4 = getpolar(num)\n    num5 = get_polar(num)\n    num6 = get_complex(num,1)\n    print num1\n    print num2\n    print num3\n    print num4\n    print num5\n    print num6\n    \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x,int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if type(i) == int])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    c=0\n    for i in list1:\n        if isinstance(i,int):\n            c+=1\n    return c\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for element in list1 if isinstance(element,int))\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return list1.count(int)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            result += 1\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(n):\n        print \"L=\", l\n        for j in combinations_with_replacement(l, n):\n            print \"j=\", j\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    import itertools\n    return list(itertools.combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(len(l)-n+1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    nCr = lambda n, r: reduce(lambda x, y: x * y / float(r), range(n - r + 1, n + 1), 1)\n    return [(l[i], l[:i] + l[i+1:]) for i in range(n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(n):\n        comb += list(combinations_with_replacement(l, i + 1))\n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [ (l[i], l[j]) for i in xrange(len(l)) for j in xrange(i+1, len(l)) ]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l) for l in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    else:\n        combos = []\n        for i in range(len(l) + 1 - n):\n            combos.append(tuple(l[i:i + n]))\n        return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    out = []\n    for i in xrange(len(l) + 1 - n):\n        out.append(list(combinations_with_replacement(l, i)))\n    return out\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return count_Primes_nums(n - 1) + count_Primes_nums(n - 2)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    primes = [True]*(n+1)\n    primes[0] = primes[1] = False\n    for i in range(2,int(math.sqrt(n))+1):\n        if primes[i]==True:\n            for j in range(i*i,n+1,i):\n                primes[j]=False\n    return sum(primes[2:])\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    primes = []\n    if n < 2:\n        return 0\n    for i in range(2,n):\n        primes.append(i)\n    count = len(primes)\n    for i in primes:\n        if n % i == 0:\n            count -= 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n == 0 or n == 1:\n        return 0\n    for i in range(2,n+1):\n        if is_Prime(i):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n+1):\n            if i == 2:\n                count += 1\n            elif i%2 == 1:\n                count += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    if n<1:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return count_Primes_nums(n-1)+count_Primes_nums(n-2)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 2:\n        return 0\n    for num in range(2, n):\n        #Check if num is prime\n        if is_Prime(num):\n            #If true add 1 to count\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if n == 1:\n            return False\n        else:\n            for x in xrange(2, n):\n                if n % x == 0:\n                    return False\n        return True\n    count = 0\n    for x in xrange(2, n):\n        if isPrime(x):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for num in primes:\n        if num > n:\n            break\n        if n % num == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    elif n > 4:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2) + count_Primes_nums(n-3)\n    \nprint count_Primes_nums(100)"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # return (b,a)\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Your code here\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (b,a)\n    return t\n    "
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return (max(test_tup1), 0)\n    elif len(test_tup1) < len(test_tup2):\n        return (max(test_tup2), 0)\n    else:\n        return (max(test_tup1, test_tup2), 0)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = (test_tup1[0],test_tup2[1])\n    tup2 = (test_tup2[0],test_tup1[1])\n    return tup1 if tup1[0] > tup2[0] else tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Note that a tuple with a single element\n    # should be given as a 2-tuple in the same\n    # format as the original tuples.\n    \n    # In this case we would have test_tup1 = (1,)\n    # and test_tup2 = (2,)\n    \n    if len(test_tup1) == 1:\n        test_tup1 = (test_tup1[0],)\n    \n    if len(test_tup2) == 1:\n        test_tup2 = (test_tup2[0],)\n    \n    \n    # Now we have to compare the elements\n    # of each tuple.  If we compare the\n    # first element of each tuple, we will\n    # see if the first element of the other\n    # tuple is greater than the first element\n    # of the current tuple.\n    \n    # If the first element of the other tuple\n    # is greater, we update the first element\n    # of the current tuple with the first\n    # element of the other tuple.\n    \n    # We keep doing this until we reach the end\n    # of the first tuple.  We then update the\n    # second tuple with the first element\n    # of the second tuple.\n    \n    # Then we update the second tuple with the\n    # second element of the second tuple.\n    \n    # Keep doing this until we reach the end\n    # of both tuples.\n    \n    \n    # First we define a helper function\n    # that takes as input two tuples,\n    # and returns true if they are the same\n    # and false if they are not the same.\n    \n    def same_tuple(t1, t2):\n        if t1 == t2:\n            return True\n        else:\n            return False\n    \n    \n    # Now we have to compare the first elements\n    # of each tuple.  If the first element\n    # of each tuple is greater than the\n    # first element of the other tuple,\n    # we update the first element of the\n    # current tuple with the first\n    # element of the other tuple.\n    \n    while not same_tuple(test_tup1, test_tup2):\n        if test_tup1[0] < test_tup2[0]:\n            test_tup1 = (test_tup2[0],) + test_tup1[1:]\n        else:\n            test_tup2 = (test_tup1[0],) + test_tup2[1:]\n    \n    \n    # Now we have to compare the second elements\n    # of each tuple.  If the second element\n    # of each tuple is greater than the\n    # second element of the other tuple,\n    # we update the second element of the\n    # current tuple with the second\n    # element of the other tuple.\n    \n    while not same_tuple(test_tup1, test_tup2):\n        if test_tup1[1] < test_tup2[1]:\n            test_tup1 = test_tup1[0:] + (test_tup2[1],)\n        else:\n            test_tup2 = test_tup2[0:] + (test_tup1[1],)\n    \n    \n    # Return the combined tuple.\n    return test_tup1\n    \n    \n    \n    \n    "
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return ()\n    elif len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    elif len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        max_tup = test_tup2\n    elif len(test_tup1) == len(test_tup2):\n        if test_tup1[0] > test_tup2[0]:\n            max_tup = test_tup1\n        elif test_tup1[0] < test_tup2[0]:\n            max_tup = test_tup2\n        else:\n            if test_tup1[1] > test_tup2[1]:\n                max_tup = test_tup1\n            elif test_tup1[1] < test_tup2[1]:\n                max_tup = test_tup2\n            else:\n                if test_tup1[2] > test_tup2[2]:\n                    max_tup = test_tup1\n                elif test_tup1[2] < test_tup2[2]:\n                    max_tup = test_tup2\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1)\n    else:\n        return max(test_tup2)\n    \ndef main():\n    tup1 = (1, 2, 3, 4, 5, 6)\n    tup2 = (4, 5, 6, 7, 8, 9)\n    max_ele = maximize_elements(tup1, tup2)\n    print(max_ele)\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #return max(test_tup1, test_tup2)\n    if len(test_tup1) == len(test_tup2):\n        return test_tup1 if sum(test_tup1) > sum(test_tup2) else test_tup2\n    elif len(test_tup1) > len(test_tup2):\n        return test_tup1 if sum(test_tup1) > sum(test_tup2) else test_tup2\n    else:\n        return test_tup1 if sum(test_tup1) > sum(test_tup2) else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n    return max_tup\n    \nif __name__ == '__main__':\n    import sys\n    sys.path.append('../..')\n    from util import timeit\n    import copy\n    import random\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if(len(test_tup1) > len(test_tup2)):\n        return max(test_tup1)\n    return max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = list()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                max_tup.append(test_tup1[i])\n            else:\n                max_tup.append(test_tup2[i])\n        return tuple(max_tup)\n    else:\n        return tuple(test_tup1)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_list = [tup1[i] - tup2[i] for i in range(0, len(tup1))]\n    max_index = test_list.index(max(test_list))\n    return test_tup1[max_index] - test_tup2[max_index]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: return 2\n    if n == 2: return 3\n    if n == 3: return 5\n    else:\n        for i in range(2,n):\n            if is_newman_williams(i):\n                return i\n        return newman_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import random\n    def gcd(a,b):\n        while b!=0:\n            a, b = b, a%b\n        return a\n    def coprime(a,b):\n        return gcd(a,b) == 1\n    def egcd(a,b):\n        if a == 0:\n            return (b,0,1)\n        else:\n            g,x,y = egcd(b%a,a)\n            return (g,y-b//a*x,x)\n    def modinv(a,m):\n        g,x,y = egcd(a,m)\n        if g!= 1:\n            raise Exception('modular inverse does not exist')\n        else:\n            return x%m\n    def is_prime(n):\n        if n == 2 or n == 3:\n            return True\n        if n < 2 or n%2 == 0:\n            return False\n        if n < 9:\n            return True\n        if n%3 == 0:\n            return False\n        for i in range(5,int(n**0.5)+1,6):\n            if n%i == 0:\n                return False\n            if n%(i+2) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = newman_williams_primes(n)\n    return primes[n-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 1):\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Get the indices of the factors of n \n    factor_indices = set(reduce(list.__add__,([i, n/i] for i in xrange(1, int(math.sqrt(n))+1) if n%i == 0)))\n    # Get the list of numbers to be checked and their powers \n    numbers = [i for i in xrange(2, n+1) if i not in factor_indices]\n    powers = [i for i in xrange(len(numbers))]\n    # Check for each number \n    for i in xrange(len(numbers)):\n        # If the number is divisible by any power, return false \n        if numbers[i] % numbers[i-1] == 0:\n            return False\n        # Otherwise, factorize the number \n        while numbers[i] % numbers[i-1] == 0:\n            numbers[i] /= numbers[i-1]\n            powers[i] += 1\n    # Check for each power \n    for i in xrange(len(powers)):\n        # If the power is greater than 1, keep going \n        if powers[i] > 1:\n            continue\n        # If the power is 1, check if the number is prime \n        elif powers[i] == 1:\n            if numbers[i]!= 1:\n                return False\n            # Otherwise, return the number \n            else:\n                return numbers[i]\n        # Otherwise, return false \n        else:\n            return False\n    # If the algorithm ever gets here, the number is prime\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    result = newman_williams_prime(n)\n    return result\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    result = 1\n    t = 0\n    while result!= n:\n        t += 1\n        result = (result**2 + 1) % n\n    return result\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Set number of attempts for Miller-Rabin\n    attempts = 6 \n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(0, len(test_tup1)):\n        result.append((test_tup1[i] / test_tup2[i]))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        return tuple((round(float(a) / float(b), 2), ) for a, b in zip(test_tup1, test_tup2))\n    except TypeError as err:\n        return err\n    "
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    sum_elem = []\n    for i in range(len(test_tup1)):\n        sum_elem.append(test_tup1[i] / test_tup2[i])\n    return tuple(sum_elem)\n    \n    \ndef test_division_elements():\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (2,2,2,2,2)\n    return division_elements(test_tup1, test_tup2)\n    \n    \nprint test_division_elements()\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        x = test_tup1[i]\n        y = test_tup2[i]\n        test_tup1[i] = x/y\n    return test_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Declare tuple variables\n    answer = ()\n    # Perform mathematical division operation element-wise\n    answer = test_tup1 / test_tup2\n    # Return answer\n    return answer\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    x = 0\n    for i in range(len(test_tup1)):\n        x += ((test_tup1[i]/test_tup2[i]) - math.floor(test_tup1[i]/test_tup2[i]))\n    return x\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Returns a tuple of the elements divided by their corresponding elements\n    # in the given tuples.\n    return tuple([a/b for a,b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple()\n    for i in xrange(len(test_tup1)):\n        result = result + (test_tup1[i] / test_tup2[i],)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for item in test_tup1:\n        result = item / test_tup2\n        print result\n    return\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        div_res = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        print(\"Division by zero is undefined\")\n    else:\n        return div_res\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < len(list1):\n        return (list1[:L], list1[L:])\n    else:\n        print('The given list is too small to split into two parts!')\n        return ([], [])\n    return [], []\n    \ndef find_center(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number in the center of the list.\n    '''\n    return sum(nums) / len(nums)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = []\n    part2 = []\n    for i in list1:\n        part1.append(i)\n    for i in list1[len(list1)-L:]:\n        part2.append(i)\n    return part1, part2\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_one = list1[0:L]\n    list_two = list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) > L:\n        return list1[0:L], list1[L:]\n    else:\n        return list1, []\n    \n    \ndef interleaving_strings(s1, s2, s3):\n    '''\n    Write a function that takes in three strings and returns a list of all possible interleavings of the first two strings and the last string.\n    '''\n    if len(s1) > len(s2):\n        return interleaving_strings(s2, s1, s3)\n    \n    if len(s2) > len(s3):\n        return interleaving_strings(s3, s2, s1)\n    \n    if len(s1) == 0:\n        return [s3]\n    \n    if len(s2) == 0:\n        return [s1]\n    \n    if len(s1) == 1:\n        if len(s3) == 0:\n            return [s2, s1]\n        elif len(s3) == 1:\n            return [s2 + s1, s3]\n        else:\n            return [s2 + s1, s3]\n    \n    if len(s2) == 1:\n        if len(s3) == 0:\n            return [s1, s2]\n        elif len(s3) == 1:\n            return [s1 + s2, s3]\n        else:\n            return [s1 + s2, s3]\n    \n    result = []\n    \n    #s1 is first string\n    result += [s1 + s2]\n    result += [s1 + s3]\n    \n    #s2 is first string\n    result += [s2 + s1]\n    result += [s2 + s3]\n    \n    #s3 is first string\n    result += [s3 + s1]\n    result += [s3 + s2]\n    \n    #s1 and s2 are not first strings\n    result += interleaving_strings(s2, s1, s3)\n    result += interleaving_strings(s1, s2, s3)\n    \n    return result\n    \ndef longest_common_substring(s1, s2, result):\n    '''\n    Write a function that takes in two strings and returns the longest common substring.\n    '''\n    if len(s1) == 0:\n        return 0\n    if len(s2) == 0:\n        return 0\n    \n    if s1[0] == s2[0]:\n        if len(s1) > len(s2):\n            return 1 + longest_common_substring(s1[1:], s2, result)\n        else:\n            return 1 + longest_common_substring(s1, s2[1:], result)\n    else:\n        if len(s1) > len(s2):\n            return longest_common_substring(s1[1:], s2, result)\n        else:\n            return longest_common_substring(s1, s2[1:], result)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return ValueError\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # the list can be split into 2 parts\n    # if the length of the list is even and the given integer is odd then the first part will have L // 2 + 1 elements and the second will have L // 2 elements\n    # if the length of the list is odd and the given integer is even then the first part will have L // 2 elements and the second will have L // 2 + 1 elements\n    # if the length of the list is odd and the given integer is odd then the first part will have L // 2 + 1 elements and the second will have L // 2 elements\n    # if the length of the list is even and the given integer is even then the first part will have L // 2 elements and the second will have L // 2 elements\n    # if the length of the list is even and the given integer is odd then the first part will have L // 2 + 1 elements and the second will have L // 2 elements\n    # if the length of the list is even and the given integer is even then the first part will have L // 2 elements and the second will have L // 2 elements\n    # if the length of the list is even and the given integer is even then the first part will have L // 2 elements and the second will have L // 2 elements\n    # if the length of the list is odd and the given integer is even then the first part will have L // 2 + 1 elements and the second will have L // 2 elements\n    # if the length of the list is odd and the given integer is odd then the first part will have L // 2 + 1 elements and the second will have L // 2 elements\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age = float(h_age)\n    age = h_age * 7.0\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age > 2:\n        age_in_dogs = h_age * 7\n    elif h_age == 2:\n        age_in_dogs = 10\n    else:\n        age_in_dogs = 0\n    \n    return age_in_dogs\n    \ndef dog_years(age):\n    '''\n    Write a function to calculate a dog's age in years.\n    '''\n    \n    if age > 2:\n        age_in_years = age * 14\n    elif age == 2:\n        age_in_years = 22\n    else:\n        age_in_years = 0\n    \n    return age_in_years\n    \ndef dog_years_in_month(age):\n    '''\n    Write a function to calculate a dog's age in months.\n    '''\n    \n    if age > 2:\n        age_in_months = age * 12\n    elif age == 2:\n        age_in_months = 24\n    else:\n        age_in_months = 0\n    \n    return age_in_months\n    \ndef dog_months_in_year(age):\n    '''\n    Write a function to calculate a dog's age in months.\n    '''\n    \n    if age > 2:\n        age_in_months = age * 360\n    elif age == 2:\n        age_in_months = 24 * 30\n    else:\n        age_in_months = 0\n    \n    return age_in_months\n    \ndef dog_months_in_day(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 365\n    elif age == 2:\n        age_in_days = 24 * 31\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_days_in_year(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 365\n    elif age == 2:\n        age_in_days = 24 * 365\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_days_in_month(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 30\n    elif age == 2:\n        age_in_days = 24 * 30\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_years_in_week(age):\n    '''\n    Write a function to calculate a dog's age in weeks.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 52\n    elif age == 2:\n        age_in_weeks = 10\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_weeks_in_year(age):\n    '''\n    Write a function to calculate a dog's age in weeks.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 52\n    elif age == 2:\n        age_in_weeks = 10\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_weeks_in_month(age):\n    '''\n    Write a function to calculate a dog's age in weeks.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 12\n    elif age == 2:\n        age_in_weeks = 8\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_years_in_day(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 365\n    elif age == 2:\n        age_in_days = 7\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_months_in_week(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 7\n    elif age == 2:\n        age_in_days = 4\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_years_in_week(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 52\n    elif age == 2:\n        age_in_weeks = 2\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_months_in_day(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 30\n    elif age == 2:\n        age_in_days = 4\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_weeks_in_month(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 8\n    elif age == 2:\n        age_in_days = 2\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_years_in_month(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_months = age * 12\n    elif age == 2:\n        age_in_months = 2\n    else:\n        age_in_months = 0\n    \n    return age_in_months\n    \ndef dog_years_in_day(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 365\n    elif age == 2:\n        age_in_days = 7\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_months_in_year(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_months = age * 12\n    elif age == 2:\n        age_in_months = 4\n    else:\n        age_in_months = 0\n    \n    return age_in_months\n    \ndef dog_days_in_month(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 30\n    elif age == 2:\n        age_in_days = 4\n    else:\n        age_in_days = 0\n    \n    return age_in_days\n    \ndef dog_weeks_in_year(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_weeks = age * 52\n    elif age == 2:\n        age_in_weeks = 10\n    else:\n        age_in_weeks = 0\n    \n    return age_in_weeks\n    \ndef dog_days_in_week(age):\n    '''\n    Write a function to calculate a dog's age in days.\n    '''\n    \n    if age > 2:\n        age_in_days = age * 7\n    elif age == 2:\n        age_in_days = 4\n    else:\n        age_in_days = 0\n    \n    return age_in_days"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age = int(h_age)\n    if h_age < 0:\n        print 'The dog\\'s age is negative!'\n    elif h_age < 1:\n        print 'The dog\\'s age is 0'\n    else:\n        if h_age > 15:\n            print 'The dog\\'s age is 15'\n        elif h_age > 12:\n            print 'The dog\\'s age is 12'\n        elif h_age > 3:\n            print 'The dog\\'s age is 3'\n        else:\n            print 'The dog\\'s age is'+ str(h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your code here\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return\n    if h_age <= 2:\n        return 2\n    if h_age > 2:\n        return h_age * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # if you do not use a conditional, you get an error\n    # if you try to do anything, it should end in an error\n    # this is due to it returning an int\n    if h_age == \"\":\n        return \"The dog's age is 0 years\"\n    \n    else:\n        return (h_age * 7)\n    \n    "
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list) or not isinstance(step, int):\n        return None\n    if step == 1:\n        return [S]\n    if step == len(S):\n        return [S]\n    elif len(S) < step:\n        return None\n    return [S[i:i + step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(len(S)):\n        if i % step == 0:\n            l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(0, len(S), step):\n        lst.append(S[i:i+step])\n    return lst\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list) or not isinstance(step, int):\n        raise ValueError(\"Expected S to be a list and step to be an integer\")\n    if not all(isinstance(x, int) for x in S):\n        raise ValueError(\"Expected S to contain only integers\")\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_return = []\n    i = 0\n    while i < len(S):\n        list_return.append(S[i:i+step])\n        i += step\n    return list_return\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    assert len(S) > step\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    surfacearea=6*l*l\n    \n    return surfacearea\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    def lateralsurface(l):\n        a = 4*(l**2)\n        b = 12*l\n        c = 6*l**2\n        return a,b,c\n    a,b,c = lateralsurface(l)\n    print \"The area of the lateral surface of a cube with side length\",l,\"is\",a,\", \",b,\", and \",c,\".\"\n    return a,b,c\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s=l**2\n    return 4*(l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(range(1,n+1,2))*2\n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n % 2!= 0:\n        return n * (n + 1) * (n + 2) / 6\n    return n * (n + 1) * (n + 2) / 6\n    \ndef palindrome(word):\n    '''\n    Write a python function that takes in a word and returns True if the word is a palindrome (reads the word forwards and backwards) and False otherwise.\n    '''\n    if word == word[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    return sum([x*x for x in range(n+1) if x%2==1])\n    \n    \ndef is_Palindrome(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a palindrome and false otherwise.\n    '''\n    \n    return str(n) == str(n)[::-1]\n    \n    \ndef count_Digit(n, d):\n    '''\n    Write a python function that takes in two integers, n and d. The function will find the number of d's that are in n.\n    '''\n    \n    return len([x for x in str(n) if x == d])\n    \n    \ndef is_Pentagonal(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a pentagonal number and false otherwise.\n    '''\n    \n    return (1+((1+24*n)**0.5))%6 == 5\n    \n    \ndef is_Hexagonal(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a hexagonal number and false otherwise.\n    '''\n    \n    return (1+((1+8*n)**0.5))%4 == 3\n    \n    \ndef is_Heptagonal(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a heptagonal number and false otherwise.\n    '''\n    \n    return (1+((1+7*n)**0.5))%4 == 3\n    \n    \ndef is_Octagonal(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is an octagonal number and false otherwise.\n    '''\n    \n    return (1+((1+6*n)**0.5))%4 == 3\n    \n    \ndef is_Incomplete(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is an incomplete number and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Incomplete_Integer(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is an incomplete integer and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Incomplete_Integer_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is an incomplete integer plus one and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Incomplete_Integer_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is an incomplete integer plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Incomplete_Integer_Plus_One_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is an incomplete integer plus one plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Perfect(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a perfect number and false otherwise.\n    '''\n    \n    return (1+((1+8*n)**0.5))%4 == 1\n    \n    \ndef is_Perfect_Square(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a perfect square and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Perfect_Square_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a perfect square plus one and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Perfect_Square_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a perfect square plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Perfect_Square_Plus_One_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a perfect square plus one plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+n)**0.5))%1 == 0\n    \n    \ndef is_Fibonacci(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a fibonacci number and false otherwise.\n    '''\n    \n    return (1+((1+5*n)**0.5))%5 == 4\n    \n    \ndef is_Fibonacci_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a fibonacci number plus one and false otherwise.\n    '''\n    \n    return (1+((1+5*n)**0.5))%5 == 4\n    \n    \ndef is_Fibonacci_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a fibonacci number plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+5*n)**0.5))%5 == 4\n    \n    \ndef is_Fibonacci_Plus_One_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a fibonacci number plus one plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+5*n)**0.5))%5 == 4\n    \n    \ndef is_Fibonacci_Plus_One_Plus_One_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a fibonacci number plus one plus one plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+5*n)**0.5))%5 == 4\n    \n    \ndef is_Fibonacci_Plus_One_Plus_One_Plus_One_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a fibonacci number plus one plus one plus one plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+5*n)**0.5))%5 == 4\n    \n    \ndef is_Fibonacci_Plus_One_Plus_One_Plus_One_Plus_One_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a fibonacci number plus one plus one plus one plus one plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+5*n)**0.5))%5 == 4\n    \n    \ndef is_Fibonacci_Plus_One_Plus_One_Plus_One_Plus_One_Plus_One_Plus_One_Plus_One(n):\n    '''\n    Write a python function that takes in an integer n and returns true if it is a fibonacci number plus one plus one plus one plus one plus one plus one plus one plus one and false otherwise.\n    '''\n    \n    return (1+((1+5*n)**0.5))%5 == 4\n    \n    \ndef is_Fibonacci_Plus_One_Plus_One_Plus_One"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x*x for x in range(1,n+1) if x%2==1])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(1,n+1) if i%2==1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum_of_squares += i * i\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # add code here\n    sum = 0\n    for i in range(0,n+1):\n        if i % 2!= 0:\n            sum = sum + i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    result = 0\n    for x in range(1,n+1,2):\n        result = result + (x*x)\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    return n*(n+1)*n/2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n*(n + 1)*(2 * n + 1)/6\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return find_star_num(n-1) * (n-1) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    ans = 1\n    i = 0\n    while i < n:\n        ans *= (2*i + 1)\n        i += 1\n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    res = [1]\n    for i in range(2, n): \n        res.append(res[i-1] + i)\n    return res[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = (n - 1) // 2\n    result = [1]\n    #x = 3\n    x = 2\n    while x < n:\n        x += 1\n        result.append(2 * x - 1)\n        result.append(2 * x)\n    if n % 2 == 1:\n        result.append(2 * (n - 1) + 1)\n    return result[n - 1]\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + n\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    nums = 1\n    while nums < n:\n        i += 1\n        nums += (4 * i - 2)\n    return i\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    return find_star_num(n-1) * (n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    for i in range(1,n+1):\n        num *= i\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        print(\"Invalid input.\")\n    elif n == 1:\n        return \"1\"\n    else:\n        if n % 3 == 0:\n            return str(find_star_num(n/3) + \"3\")\n        elif n % 3 == 1:\n            return str(find_star_num(n/3) + \"3\") + \"1\"\n        else:\n            return str(find_star_num(n/3) + \"3\") + \"1\" + find_star_num(n % 3)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1)*(n+1)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) >= 97 and ord(k) <= 122:\n        return ord(k) - 97\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) < ord('A') or ord(k) > ord('Z'):\n        return ord(k)\n    return ord(k) + ord('a') - ord('A') + 1\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) > 127:\n        return \"U+\" + hex(ord(k))[2:]\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return 32\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, int):\n        return k\n    if isinstance(k, str):\n        return ord(k)\n    if isinstance(k, unicode):\n        return ord(k)\n    return None\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_e = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_e += arr[i]\n    return sum_e\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # return sum([arr[i] for i in range(len(arr)) if i % 2 == 0 and arr[i] % 2 == 0])\n    return sum([arr[i] for i in range(len(arr)) if i % 2 == 0 and arr[i] % 2 == 0])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even_index_values = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_of_even_index_values = sum_of_even_index_values + arr[i]\n    return sum_of_even_index_values\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0, len(arr), 2):\n        result += arr[i]\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    new_list = []\n    for index, item in enumerate(arr):\n        if index % 2 == 0:\n            new_list.append(item)\n    return sum(new_list)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([x for i, x in enumerate(arr) if i%2==0 and x%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum( [ i**5 for i in xrange(2, n) if i % 2 == 0] )\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            total += (i**5)\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return 0\n    return (n**5 + even_Power_Sum(n-1))\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n+1):\n        if i**5 % 2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return even_Power_Sum(n-1) + n*(n+1)**5\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n+1):\n        if (i % 2 == 0):\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    total = 0\n    for i in range(n):\n        if (i+1)%2 == 0:\n            total += (i+1)**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for num in range(n):\n        if num**5 % 2 == 0:\n            total += num\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<=0:\n        return \"Invalid input\"\n    total = 0\n    for i in range(2,n+1):\n        if i%2 == 0:\n            total+=i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return even_Power_Sum(n-1) + n**5\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(i[0]) for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # test_list = [('A',1),('B',2),('C',3)]\n    l = []\n    for x in test_list:\n        l.append(x[-1])\n    return l\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item[-1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of equal length\"\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res_tup = tuple()\n    for i in range(len(test_tup1)):\n        res_tup += (test_tup1[i] - test_tup2[i],)\n    return res_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for x in range(0, len(test_tup1)):\n        new_tup += (test_tup1[x] - test_tup2[x],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        small_tup = test_tup1\n        big_tup = test_tup2\n    else:\n        small_tup = test_tup2\n        big_tup = test_tup1\n    return tuple([small_tup[i] - big_tup[i] for i in range(len(small_tup))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    return (tuple(a-b for a,b in zip(list1,list2)))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(0, len(test_tup1)):\n        list1.append(test_tup1[i]-test_tup2[i])\n    return tuple(list1)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Write your code here\n    subtracted_tup = ()\n    for i in range(len(test_tup1)):\n        subtracted_tup = subtracted_tup + (test_tup1[i] - test_tup2[i],)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    for i in range(len(list1)):\n        list1[i] = list1[i] - list2[i]\n    return tuple(list1)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    diff = ()\n    for i in range(len(test_tup1)):\n        diff += (test_tup1[i] - test_tup2[i],)\n    return diff\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(subtract(x, y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Coeff = [0,1]\n    for x in range(2, n + 1):\n        Coeff.append((Coeff[-1] * x) // math.factorial(x-1))\n    Sum = 0\n    for x in Coeff:\n        if x % 2 == 0:\n            Sum += x\n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<1:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n/2 * (2*n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #base case\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(math.factorial(n) / ( math.factorial(2 * n) * math.factorial(n) ) )\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<1:\n        return None\n    if n==1:\n        return 1\n    return (n*(n-1))/2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n): \n        sum += (pow(i, n) * pow(n - i, n - 1) / math.factorial(n))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    result = 0\n    for i in range(n):\n        if i%2 == 0:\n            result += even_binomial_Coeff(i) * even_binomial_Coeff(n-i)\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        return \"Please enter positive integer!\"\n    if n==0:\n        return 0\n    else:\n        Coeff_Sum=0\n        for i in range(0,n+1):\n            Coeff_Sum+=math.comb(n,i)*(math.factorial(i))**2\n        return Coeff_Sum\n    "
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        print \"Error: n must be a positive integer\"\n    else:\n        binomialCoeffSum = 0\n        for i in range(0, n + 1):\n            binomialCoeffSum += binomial(n, i)\n        return binomialCoeffSum\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n < 1:\n        print \"Error: n must be a positive integer\"\n    else:\n        binomialCoeffSum = 0\n        for i in range(0, n + 1):\n            binomialCoeffSum += binomial(n, i)\n        return binomialCoeffSum\ndef binomial(n, k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient, i.e. n choose k.\n    '''\n    if n < 0 or k < 0 or n < k:\n        print \"Error: n and k must be positive integers\"\n    else:\n        binomial = 1\n        for i in range(1, min(n, k) + 1):\n            binomial *= n\n            n -= 1\n            binomial /= i\n        return binomial\ndef check_fib(n, num_list):\n    '''\n    Write a python function that takes in a positive integer n and a list of numbers, num_list, and returns True if each\n    number in num_list is a Fibonacci number for n, and False otherwise.\n    '''\n    if n < 1:\n        print \"Error: n must be a positive integer\"\n    else:\n        if len(num_list) < 1:\n            print \"Error: num_list must be a non-empty list of numbers\"\n        else:\n            for i in range(0, len(num_list)):\n                if num_list[i] < 1:\n                    print \"Error: all elements of num_list must be positive integers\"\n                else:\n                    if i == 0:\n                        if num_list[i] == 1:\n                            print \"The first element of num_list is 1\"\n                        else:\n                            print \"The first element of num_list is not 1\"\n                        if num_list[i] == 2:\n                            print \"The second element of num_list is 2\"\n                        else:\n                            print \"The second element of num_list is not 2\"\n                        if num_list[i] == 3:\n                            print \"The third element of num_list is 3\"\n                        else:\n                            print \"The third element of num_list is not 3\"\n                        if num_list[i] == 4:\n                            print \"The fourth element of num_list is 4\"\n                        else:\n                            print \"The fourth element of num_list is not 4\"\n                    elif i == 1:\n                        if num_list[i] == 1:\n                            print \"The first and second elements of num_list are 1\"\n                        else:\n                            print \"The first and second elements of num_list are not 1\"\n                        if num_list[i] == 2:\n                            print \"The second and third elements of num_list are 2\"\n                        else:\n                            print \"The second and third elements of num_list are not 2\"\n                        if num_list[i] == 3:\n                            print \"The third and fourth elements of num_list are 3\"\n                        else:\n                            print \"The third and fourth elements of num_list are not 3\"\n                        if num_list[i] == 5:\n                            print \"The fourth and fifth elements of num_list are 5\"\n                        else:\n                            print \"The fourth and fifth elements of num_list are not 5\"\n                    else:\n                        if num_list[i] == num_list[i - 1] + num_list[i - 2]:\n                            print \"The\", i + 1, \"th element of num_list is\", num_list[i]\n                        else:\n                            print \"The\", i + 1, \"th element of num_list is not\", num_list[i]\ndef check_fib_recursive(n, num_list):\n    '''\n    Write a python function that takes in a positive integer n and a list of numbers, num_list, and returns True if each\n    number in num_list is a Fibonacci number for n, and False otherwise.\n    '''\n    if n < 1:\n        print \"Error: n must be a positive integer\"\n    else:\n        if len(num_list) < 1:\n            print \"Error: num_list must be a non-empty list of numbers\"\n        else:\n            if num_list[0] < 1:\n                print \"Error: all elements of num_list must be positive integers\"\n            else:\n                if num_list[0] == 1:\n                    print \"The first element of num_list is 1\"\n                else:\n                    print \"The first element of num_list is not 1\"\n                if num_list[0] == 2:\n                    print \"The second element of num_list is 2\"\n                else:\n                    print \"The second element of num_list is not 2\"\n                if num_list[0] == 3:\n                    print \"The third element of num_list is 3\"\n                else:\n                    print \"The third element of num_list is not 3\"\n                if num_list[0] == 4:\n                    print \"The fourth element of num_list is 4\"\n                else:\n                    print \"The fourth element of num_list is not 4\"\n                if num_list[0] == 5:\n                    print \"The fifth element of num_list is 5\"\n                else:\n                    print \"The fifth element of num_list is not 5\"\n                if num_list[0] == num_list[1] + num_list[2]:\n                    print \"The\", len(num_list) + 1, \"th element of num_list is\", num_list[0]\n                else:\n                    print \"The\", len(num_list) + 1, \"th element of num_list is not\", num_list[0]\n                return check_fib_recursive(n, num_list[1:])\ndef main():\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    n = int(raw_input(\"Enter a positive integer: \"))\n    if n < 1:\n        print \"Error: n must be a positive integer\"\n    else:\n        print \"The sum of the first\", n, \"terms of the binomial series is\", even_binomial_Coeff_Sum(n)\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    n = int(raw_input(\"Enter a positive integer: \"))\n    if n < 1:\n        print \"Error: n must be a positive integer\"\n    else:\n        print \"The sum of the first\", n, \"terms of the binomial series is\", odd_binomial_Coeff_Sum(n)\n    '''\n    Write a python function that takes in a positive integer n and a list of numbers, num_list, and returns True if each\n    number in num_list is a Fibonacci number for n, and False otherwise.\n    '''\n    n = int(raw_input(\"Enter a positive integer: \"))\n    num_list = []\n    for i in range(0, n + 1):\n        num_list.append(int(raw_input(\"Enter a number: \")))\n    print \"The\", n, \"th element of num_list is\", num_list[n]\n    check_fib(n, num_list)\n    '''\n    Write a python function that takes in a positive integer n and a list of numbers, num_list, and returns True if each\n    number in num_list is a Fibonacci number for n, and False otherwise.\n    '''\n    n = int(raw_input(\"Enter a positive integer: \"))\n    num_list = []\n    for i in range(0, n + 1):\n        num_list.append(int(raw_input(\"Enter a number: \")))\n    print \"The\", n, \"th element of num_list is\", num_list[n]\n    check_fib_recursive(n, num_list)\nmain()\ndef test"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        print \"Enter a positive number\"\n    elif n==0:\n        return 1\n    else:\n        return binomial_coefficient(n,0)*1.0/(binomial_coefficient(n,1)*binomial_coefficient(n-1,1))\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r*r*h)/3\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r**2*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159265359*r*r*h\n    \n    \ndef max_point(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes in three x and y values and returns the max value.\n    '''\n    return max(x1,x2,x3,y1,y2,y3)\n    \n    \ndef min_point(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that takes in three x and y values and returns the min value.\n    '''\n    return min(x1,x2,x3,y1,y2,y3)\n    \n    \ndef abs_value(x):\n    '''\n    Write a function that takes in a number x and returns the absolute value.\n    '''\n    if x < 0:\n        return -x\n    else:\n        return x\n    \n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and returns a new list that is the reverse of the old list.\n    '''\n    return list[::-1]\n    \n    \ndef find_median(list):\n    '''\n    Write a function that takes in a list and returns the median of the values in the list.\n    '''\n    if len(list)%2 == 1:\n        return list[len(list)/2]\n    else:\n        return sum(list[len(list)/2-1:len(list)/2+1])/2\n    \n    \ndef average_value(list):\n    '''\n    Write a function that takes in a list of values and returns the average of the values in the list.\n    '''\n    return sum(list)/len(list)\n    \n    \ndef flip_dict(dict):\n    '''\n    Write a function that takes in a dictionary and returns a new dictionary with the keys and values reversed.\n    '''\n    return dict[::-1]\n    \n    \ndef find_key_from_value(dict,value):\n    '''\n    Write a function that takes in a dictionary and returns the key that has the specified value in the dictionary.\n    '''\n    for key,val in dict.items():\n        if val == value:\n            return key\n    return None\n    \n    \ndef most_common(list):\n    '''\n    Write a function that takes in a list and returns the most common value in the list.\n    '''\n    return max(set(list),key=list.count)\n    \n    \ndef swap_first_and_last(list):\n    '''\n    Write a function that takes in a list and returns a new list with the first and last elements swapped.\n    '''\n    return list[:1] + list[-1:] + list[1:-1]\n    \n    \ndef non_unique(list):\n    '''\n    Write a function that takes in a list and returns True if the list has any repeated elements and False otherwise.\n    '''\n    return len(set(list)) < len(list)\n    \n    \ndef find_second_largest(list):\n    '''\n    Write a function that takes in a list and returns the second largest element in the list.\n    '''\n    if len(list) < 2:\n        return None\n    else:\n        return sorted(list)[-2]\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return str == str[::-1]\n    \n    \ndef is_palindrome_sentence(sentence):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome sentence and False otherwise.\n    '''\n    str = ''\n    for word in sentence.split():\n        str += word[::-1] +''\n    return str == sentence\n    \n    \ndef count_characters(str):\n    '''\n    Write a function that takes in a string and returns a dictionary where the keys are the characters in the string and the values are the number of times the character is in the string.\n    '''\n    count = {}\n    for char in str:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n    \n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a new list that is the same as the old list with all duplicate values removed.\n    '''\n    unique_list = []\n    for item in list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \n    \ndef is_prime(num):\n    '''\n    Write a function that takes in a number and returns True if the number is prime and False otherwise.\n    '''\n    if num == 1:\n        return False\n    for x in range(2,int(num**0.5)+1):\n        if num%x == 0:\n            return False\n    return True\n    \n    \ndef all_palindromes(str):\n    '''\n    Write a function that takes in a string and returns a list of all palindromes that are the substring of the input string.\n    '''\n    return [str[i:j] for i in range(len(str)) for j in range(i+1,len(str)+1) if str[i:j] == str[i:j][::-1]]\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and returns the nth number in the Fibonacci sequence, where the first two numbers are 0 and 1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef multi_fibonacci(n,m):\n    '''\n    Write a function that takes in two integers n and m and returns the mth multiple of the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return m\n    else:\n        return multi_fibonacci(n-1,m)+multi_fibonacci(n-2,m)\n    \n    \ndef is_palindrome_three_digit_number(num):\n    '''\n    Write a function that takes in a three-digit integer and returns True if it is a palindrome and False otherwise.\n    '''\n    if num < 10 or num > 99:\n        return False\n    else:\n        return str(num) == str(num)[::-1]\n    \n    \ndef sum_digits(num):\n    '''\n    Write a function that takes in a number and returns the sum of the digits in that number.\n    '''\n    if num < 10:\n        return num\n    else:\n        return sum_digits(num/10) + num % 10\n    \n    \ndef sum_digits_reverse(num):\n    '''\n    Write a function that takes in a number and returns the sum of the digits in that number in reverse order.\n    '''\n    str_num = str(num)\n    rev_num = str_num[::-1]\n    num = 0\n    for i in range(len(rev_num)):\n        num += int(rev_num[i])\n    return num\n    \n    \ndef is_valid_hexadecimal(str):\n    '''\n    Write a function that takes in a string and returns True if it is a valid hexadecimal number and False otherwise.\n    '''\n    if len(str) == 1:\n        return str.isdigit()\n    elif len(str) > 1 and str[0] == '0':\n        return False\n    else:\n        return is_valid_hexadecimal(str[1:])\n    \n    \ndef max_bitwise_or(x, y):\n    '''\n    Write a function that takes in two integers x and y and returns the maximum value that can be obtained by ORing x and y together.\n    '''\n    if x == 0 or y == 0:"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V=math.pi*r**2*h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return np.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = pi*(r**2)*h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return ((math.pi*r**2)*h)\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #TO DO\n    return {k: v for (k, v) in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k:v for k,v in dict.items() if v >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if isinstance(dict,dict):\n        return {key: value for key,value in dict.items() if value >= n}\n    else:\n        print(\"Not a dictionary\")\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for k,v in dict.items():\n        if v>=n:\n            new_dict[k]=v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.iteritems():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n    "
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.iteritems() if v >= n}\n    \ndef dict_sort(dict,s):\n    '''\n    Write a function that takes in a dictionary and sort the keys of the dictionary.\n    '''\n    return sorted(dict.keys())\n    \ndef dict_sort2(dict,s):\n    '''\n    Write a function that takes in a dictionary and sort the keys of the dictionary.\n    '''\n    return sorted(dict.items(),key=lambda x: x[1])\n    \ndef dict_sort3(dict,s):\n    '''\n    Write a function that takes in a dictionary and sort the keys of the dictionary.\n    '''\n    return sorted(dict.items(),key=lambda x: x[1],reverse=True)\n    \ndef dict_sort4(dict,s):\n    '''\n    Write a function that takes in a dictionary and sort the keys of the dictionary.\n    '''\n    return sorted(dict.items(),key=lambda x: x[1],reverse=True)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elements = [i for i in test_tup if i==test_tup[0]]\n    return len(first_elements)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    def count_first_elements_helper(test_tup):\n        if len(test_tup) <= 1:\n            return 0\n        return 1 + count_first_elements_helper(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1):\n            if test_tup[j] == test_tup[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(tuple(filter(lambda x: x == test_tup[0], test_tup)))\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for x in test_tup:\n        if x == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    total = 0\n    for i in test_tup:\n        if i!= None:\n            total += 1\n        else:\n            break\n    return total\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #tup = tuple(int(x) for x in str(test_tup))\n    #num_elements = len(tup)\n    #num_elements_first_occurrence = 0\n    #for i in range(len(tup)):\n    #    if tup[i] == test_tup[0]:\n    #        num_elements_first_occurrence += 1\n    #return num_elements_first_occurrence\n    num_elements_first_occurrence = sum(1 for i in test_tup if i == test_tup[0])\n    return num_elements_first_occurrence\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for elem in test_tup:\n        if elem < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    my_list = list(test_tup)\n    new_list = []\n    for i in range(len(my_list)):\n        if i == 0:\n            new_list.append(my_list[i])\n        else:\n            new_list.append(my_list[i])\n            if new_list[-1] == my_list[i]:\n                new_list.append(my_list[i])\n    return len(new_list) - len(test_tup)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    i = 1\n    while True:\n        i += 1\n        if is_decagonal(i):\n            if i == n:\n                return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    assert isinstance(n, int) and n >= 0, 'n must be a positive integer'\n    \n    '''\n    TODO: Your code here\n    '''\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n%2 == 1:\n        return n*(n+1)/2\n    \n    else:\n        return n*(n+1)/2 + (n-1)*(n+1)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    while True:\n        num += 9*(10**(9-n))\n        if is_num_hexaagonal(num):\n            return True\n        if is_num_square(num):\n            return True\n        if is_num_triangular(num):\n            return True\n        if is_num_pentagonal(num):\n            return True\n        if is_num_hexagonal(num):\n            return True\n        if is_num_hexahedral(num):\n            return True\n        if is_num_octagonal(num):\n            return True\n        if is_num_nth_decagonal(num):\n            return True\n        if is_num_nth_hexaagonal(num):\n            return True\n        if is_num_nth_pentagonal(num):\n            return True\n        if is_num_nth_triangular(num):\n            return True\n        if is_num_nth_square(num):\n            return True\n        if is_num_nth_hexagonal(num):\n            return True\n        if is_num_nth_hexahedral(num):\n            return True\n        if is_num_nth_octagonal(num):\n            return True\n        if is_num_nth_decagonal(num):\n            return True\n        n += 1\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_decagonal(n):\n        return (n**2 - (n-1)**2) % (10*n) == 0\n    \n    def decagonals_count(n):\n        return int((n*(n-1))/2)\n    \n    if is_decagonal(n):\n        return n\n    \n    count = decagonals_count(n)\n    if not is_decagonal(count):\n        return is_num_decagonal(count)\n    \n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    a = 1\n    b = 1\n    c = 1\n    m = 1\n    while True:\n        a += 1\n        b += 2\n        c += 3\n        m += 1\n        if m == n:\n            return True\n        if m > n:\n            return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    count = 1\n    result = 1\n    while count < n:\n        result += 10 * count\n        count += 1\n    if result % n == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        n = n * 10 + 10\n        for i in range(10, n):\n            if is_num_decagonal(n - i):\n                return True\n        return False\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            break\n    if found == True:\n        return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, elem in enumerate(dlist):\n        if elem == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    n = 0\n    while n < len(dlist) and not found:\n        if dlist[n] == item:\n            found = True\n        else:\n            n += 1\n    return (found, n)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if item not in dlist:\n        return False, -1\n    for i in range(0, len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    is_there = False\n    idx = -1\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            is_there = True\n            idx = i\n            break\n    return (is_there, idx)\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                return unique\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #sort the list\n    test_list.sort()\n    #check the list\n    for index in range(len(test_list)-1):\n        if test_list[index] == test_list[index+1]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for item in test_list:\n        if item in temp:\n            return False\n        else:\n            temp.append(item)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\ndef divisible_by_7(num):\n    '''\n    Write a python function to check if the given number is divisible by 7 or not.\n    '''\n    if num % 7 == 0:\n        return True\n    return False\ndef numbers_in_string(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef find_number(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\ndef divisible_by_7(num):\n    '''\n    Write a python function to check if the given number is divisible by 7 or not.\n    '''\n    if num % 7 == 0:\n        return True\n    return False\ndef numbers_in_string(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef find_number(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\ndef divisible_by_7(num):\n    '''\n    Write a python function to check if the given number is divisible by 7 or not.\n    '''\n    if num % 7 == 0:\n        return True\n    return False\ndef numbers_in_string(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef find_number(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\ndef divisible_by_7(num):\n    '''\n    Write a python function to check if the given number is divisible by 7 or not.\n    '''\n    if num % 7 == 0:\n        return True\n    return False\ndef numbers_in_string(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef find_number(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\ndef divisible_by_7(num):\n    '''\n    Write a python function to check if the given number is divisible by 7 or not.\n    '''\n    if num % 7 == 0:\n        return True\n    return False\ndef numbers_in_string(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef find_number(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\ndef divisible_by_7(num):\n    '''\n    Write a python function to check if the given number is divisible by 7 or not.\n    '''\n    if num % 7 == 0:\n        return True\n    return False\ndef numbers_in_string(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef find_number(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\ndef divisible_by_7(num):\n    '''\n    Write a python function to check if the given number is divisible by 7 or not.\n    '''\n    if num % 7 == 0:\n        return True\n    return False\ndef numbers_in_string(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n    return count\ndef find_number(str1):\n    '''\n    Write a python function to find the number of times a particular substring is present in the given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:i+3] == \"abc\":\n            count = count + 1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not len(nums1)==len(nums2):\n        return []\n    nums = []\n    for i in xrange(len(nums1)):\n        nums.append(nums1[i]-nums2[i])\n    return nums\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_diff = []\n    for i in range(len(nums1)):\n        list_diff.append(nums1[i] - nums2[i])\n    return list_diff\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n1=len(nums1)\n    n2=len(nums2)\n    if n1!=n2:\n        return \"Invalid Input\"\n    else:\n        new=[]\n        for i in range(n1):\n            new.append(nums1[i]-nums2[i])\n        return new\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(len(nums1)):\n        list1.append(nums1[i]-nums2[i])\n    for j in range(len(nums2)):\n        list2.append(nums1[j]-nums2[j])\n    return list1,list2\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l = []\n    for i in range(len(nums1)):\n        l.append(nums1[i]-nums2[i])\n    return l\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    length = len(nums1)\n    for i in xrange(length):\n        nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)>len(nums2):\n        for i in range(len(nums1)-len(nums2)):\n            nums2.append(0)\n    else:\n        for i in range(len(nums2)-len(nums1)):\n            nums1.append(0)\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n    \ndef factorial(num):\n    '''\n    Write a recursive function to calculate the factorial of a number.\n    '''\n    if num<0:\n        raise ValueError('Invalid factorial value')\n    elif num==0:\n        return 1\n    else:\n        return num*factorial(num-1)\n        \ndef inverse(num):\n    '''\n    Write a recursive function to calculate the inverse of a number.\n    '''\n    if num==0:\n        return 0\n    elif num<0:\n        return -(abs(num)+inverse(num-1))\n    else:\n        return num+inverse(num-1)\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    r = []\n    if len(nums1) > len(nums2):\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                r.append(nums1[i])\n            else:\n                r.append(nums1[i] - nums2[i])\n    elif len(nums2) > len(nums1):\n        for i in range(len(nums2)):\n            if nums1[i] == nums2[i]:\n                r.append(nums2[i])\n            else:\n                r.append(nums1[i] - nums2[i])\n    else:\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                r.append(nums1[i])\n            else:\n                r.append(nums1[i] - nums2[i])\n    return r\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n,int):\n        return False\n    # create a dictionary of digits\n    n_dict = {}\n    # set the digit in n_dict to 0\n    n_dict[n%10] = 0\n    while n/10>0:\n        n_dict[n%10]+=1\n        n = n/10\n    # for each digit in n_dict, check if the frequency is less than the value of the digit\n    for k,v in n_dict.iteritems():\n        if v>k:\n            return False\n    return True\n    \ndef isPalindrome(n):\n    '''\n    Write a python function takes in a integer and check whether the integer is a palindrome.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n > 0:\n        return validate(n)\n    \ndef main():\n    n = int(input())\n    if isPalindrome(n):\n        print \"{0} is a palindrome\".format(n)\n    else:\n        print \"{0} is not a palindrome\".format(n)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n))!= len(set(str(n))):\n        return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    #base case\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    #recursive case\n    last = n % 10\n    \n    if last > 1:\n        return 0\n    elif last == 1:\n        return 1 + validate(n // 10)\n    else:\n        return 1 + validate(n // 10)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #get a dictionary\n    d = {}\n    #convert to a string\n    n = str(n)\n    #loop through each character in the string\n    for i in n:\n        #if the character is already in the dictionary add 1 to the count, else add the character to the dictionary with the count as 1\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    #check if each count in the dictionary is less than or equal to the count of the character in the string\n    for i in d:\n        if d[i] > int(i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n=str(n)\n    s=[]\n    for i in n:\n        s.append(int(i))\n    s.sort()\n    freq=[]\n    for i in range(10):\n        freq.append(s.count(i))\n    for i in range(10):\n        if freq[i]>=i:\n            print(i)\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in n:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in n:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=str(n)\n    flag=True\n    for i in range(len(s)):\n        if int(s[i])>=int(s[i]):\n            flag=False\n    return flag\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    assert isinstance(n, int), 'n is not an integer'\n    n = str(n)\n    for i in range(0,10):\n        if n.count(str(i)) > i:\n            return False\n    return True\n    \n    "
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n==0:\n        return True\n    \n    count = [0]*10\n    while n>0:\n        digit = n%10\n        count[digit] += 1\n        n = n//10\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if type(list)!= list:\n        raise TypeError(\"Please make sure that your input is a list\")\n    else:\n        if len(list) == 0:\n            raise ValueError(\"Please make sure that your input is not empty\")\n        else:\n            for i in list:\n                if i!= element:\n                    return False\n            return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # start writing your code here\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if(len(list)==1):\n        return list[0] == element\n    else:\n        return list[0] == element and check_element(list[1:],element)\n    \ndef to_binary(num):\n    '''\n    Write a function that takes in a positive integer and returns the equivalent string representation of that integer in binary.\n    '''\n    if(num==0):\n        return \"0\"\n    elif(num%2==0):\n        return to_binary(num/2)\n    else:\n        return to_binary(num/2)+str(num%2)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        print(\"Matched\")\n    else:\n        print(\"Not matched\")\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #return re.search(r'ab{2,3}',text)\n    return re.search(r'ab{2,3}',text)\ndef text_match_two_three_v2(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v3(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #return bool(re.search(r'ab{2,3}',text))\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v4(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v5(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v6(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v7(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v8(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v9(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v10(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v11(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v12(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v13(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v14(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v15(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v16(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v17(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v18(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v19(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v20(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v21(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v22(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v23(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v24(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v25(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v26(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v27(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v28(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three_v29(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}',text))\ndef text_match_two_three"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('(.)b{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.search(r'ab{2,3}', text)\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #find a\n    if text.count('a') > 0:\n        #find b\n        if text.find('b', text.find('a')) > 0:\n            if text.find('b', text.find('b')) > 0:\n                if text.find('b', text.find('b', text.find('a')+1)) > 0:\n                    return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    #your code here\n    if re.search(r'ab|bb', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # print re.match('.*?b[a-z]{2}b*',text)\n    print re.match('.*?b[a-z]{2}b*',text)\n    if re.match('.*?b[a-z]{2}b*',text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('ab{2,3}', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # if len(text) >= 4:\n    #     if re.search(r'\\Ab{3,}B', text):\n    #         print('Yes')\n    #     else:\n    #         print('No')\n    # else:\n    #     print('No')\n    if len(text) >= 4:\n        if re.search(r'\\Ab{2,}B', text):\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in xrange(n):\n        for j in xrange(k):\n            if i + j >= n:\n                break\n            max_sum = max(max_sum, a[i] + sum(a[i+j+1:i+j+j+2]))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if len(a) == 0 or k == 0:\n        return 0\n    max_sum = a[0]\n    start_index = 0\n    end_index = 0\n    for i in range(k):\n        end_index = end_index + i\n        curr_sum = 0\n        for j in range(i):\n            curr_sum += a[j]\n        curr_sum += a[end_index]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start_index = end_index - i\n    if max_sum == 0:\n        return max_sum\n    return max_sum, start_index, end_index\n    \ndef max_sub_array_sum_repeated_two_pointers(a, n):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if len(a) == 0 or n == 0:\n        return 0\n    max_sum = a[0]\n    left = 0\n    right = 0\n    for i in range(1, n):\n        if i >= right:\n            left = i\n            right = i + 1\n        else:\n            right += 1\n        curr_sum = sum(a[left:right])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_k_sum, current_sum = float(\"-inf\"), 0\n    for i in range(0, k):\n        current_sum = max(current_sum + a[i], a[i])\n        max_k_sum = max(max_k_sum, current_sum)\n    return max_k_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = 0\n    for i in xrange(k):\n        ans = max(ans,sum(a))\n        n = n - 1\n        a = [a[i] for i in xrange(n)]\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k:\n        return max(a)\n    max_sum = 0\n    max_sum_k = 0\n    for i in range(k):\n        max_sum_k += a[i]\n    for i in range(k, n):\n        max_sum_k += a[i] - a[i-k]\n        max_sum = max(max_sum, max_sum_k)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = -sys.maxsize-1\n    #for each element in the array\n    for i in range(n):\n        #hold the sum of sub array\n        current_sum = 0\n        #for each element in the array\n        for j in range(k):\n            #add the current element to the sum\n            current_sum += a[i]\n        #check if the sum is greater than the current result\n        if current_sum > result:\n            #if so, set the result equal to the sum\n            result = current_sum\n    #return the result\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = k * max(a)\n    for i in xrange(k):\n        for j in xrange(n):\n            if j - i >= 0:\n                result = max(result, sum(a[i:j+1]))\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = max_sub_array_sum_repeated_helper(a, n, k)\n    return result\n    \ndef max_sub_array_sum_repeated_helper(a, n, k):\n    if k == 1:\n        return max_sub_array_sum_repeated_one_loop(a, n)\n    elif k == 2:\n        return max_sub_array_sum_repeated_two_loops(a, n)\n    else:\n        a_1 = max_sub_array_sum_repeated_helper(a, n, k - 1)\n        a_2 = max_sub_array_sum_repeated_helper(a, n, k - 2)\n        return max(a_1, a_2)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, (a[i]+a[i+k-1]))\n    return max_sum\n    "
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(k):\n            if i + j < n:\n                res = max(res, a[i + j] + sum(a[i + j:i + k]))\n    return res\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = int(n)\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total = total + (i ** 2)\n    return total\n    \ndef triple_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of first n even natural numbers cubed.\n    '''\n    n = int(n)\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total = total + (i ** 3)\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(n):\n        if (i%2 == 0):\n            sum += (i**2)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if n < 1:  \n        return 0  \n    elif n == 1:  \n        return 1  \n    else:  \n        return n ** 2 + square_Sum(n - 2)  \n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(map(lambda x: x**2, filter(lambda x: x%2==0, range(1, n+1))))\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    while i < n:\n        if (i + 2) % 2 == 0:\n            sum_of_squares += (i + 2)**2\n        i += 1\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n**2 + square_Sum(n-2))\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) / 6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    s = 0\n    if n%2 == 0:\n        n-=1\n        while n > 0:\n            s += n**2\n            n -= 2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x**2 for x in range(n+1) if x%2==0)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = len(list1[0])\n    max_list = []\n    for index,item in enumerate(list1):\n        if max_length < len(item):\n            max_list = list1[index]\n            max_length = len(item)\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for i in range(0, len(list1)):\n        if len(list1[i]) > maxlen:\n            maxlen = len(list1[i])\n    return maxlen\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for x in list1:\n        l.append(len(x))\n    return max(l)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for l in list1:\n        if len(l) > max:\n            max = len(l)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > length:\n            length = len(list1[i])\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    max_length = 0\n    for list in list1:\n        length = len(list)\n        if length > max_length:\n            max_length = length\n            max_length_list = list\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = len(list1[0])\n    for i in range(len(list1)):\n        if max_length < len(list1[i]):\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for each in list1:\n        if len(each) > max_len:\n            max_len = len(each)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    temp = 0\n    for item in list1:\n        temp = temp + len(item)\n        if temp > max_len:\n            max_len = temp\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    Algorithm:\n    1. Start with k colors\n    2.  Choose the number of colors (k) from {k}\n    3.  Choose the number of colors (k) from {k-1, k-2,..., k-n+1}\n    4.  If all the given colors are different, we have no choice but to choose the colors in the form of {k, k-1,..., k-n+1}\n    5.  Otherwise, we choose the color that is common among the given colors {k, k-1,..., k-n+1} to paint the fence\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    # Choosing k colors\n    # Here we can either choose from the given colors {k, k-1,..., k-n+1} or we can choose from the given colors\n    # {k, k-1,..., k-n+1, k, k-1,..., k-n+1}\n    colors = [k, k-1, k-2, k-3, k-4, k-5]\n    # Choosing the number of ways to paint\n    no_of_ways = 0\n    for color in colors:\n        no_of_ways += count_no_of_ways(n-1, color)\n    return no_of_ways\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    num_of_ways = [0] * (n + 1)\n    num_of_ways[0] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2:\n        return n\n    \n    if k == 1:\n        return 2\n    \n    if k == 2:\n        return 4\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    return count_no_of_ways(n - 1, k) + k * count_no_of_ways(n - 2, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # dict to store all the ways \n    res = {}\n    # count the ways for 0 and 1\n    res[0] = 1\n    res[1] = 1\n    # now loop till k and till n \n    for i in range(k, n+1):\n        # if i-1 not present, add 1 to both\n        if i-1 not in res:\n            res[i-1] = 1\n            res[i] = 1\n        else:\n            # if i-1 present\n            res[i] = res[i-1] + res[i-2]\n    return res[n-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = [[-1 for i in range(k + 1)] for i in range(n + 1)] \n    return count_no_of_ways_recursive(n, k, memo)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # 2D array: n x k\n    dp = [[0 for x in xrange(k + 1)] for x in xrange(n + 1)] \n    # First row\n    for i in xrange(1, k + 1): \n        dp[0][i] = 1\n    # First column\n    for i in xrange(1, n + 1): \n        dp[i][0] = 1\n    # Fill the dp table\n    for i in xrange(1, n + 1):\n        for j in xrange(1, k + 1):\n            dp[i][j] += dp[i - 1][j] + dp[i - 1][j - 1]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n: \n        return 0\n    if k == 0 or k == n: \n        return 1\n    if k > (n/2) and k <= n: \n        return int((count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k-1))/3)\n    else: \n        return int(count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k-1))\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_recursion(n, k):\n        if n==0:\n            return 1\n        if n<0:\n            return 0\n        if k==0:\n            return 0\n        return count_recursion(n-1, k-1) + count_recursion(n-2, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 3:\n        return 1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return -1\n    else:\n        return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    return m//n\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n % m == 0:\n        return(n//m)\n    else:\n        return(n//m + 1)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n/m) == (n//m):\n        return (n//m)\n    else:\n        return (n//m) + 1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m==0:\n        return n//m\n    else:\n        return n//m+1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef div(n,m):  \n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    return n%m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while n >= m:\n        temp = n/m\n        n = m\n        m = temp\n    return int(n)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==0:\n        return True\n    else:\n        return n==find(n*n,2)\n        \ndef prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==0 or n==1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n        \ndef fibonacci(n):\n    '''\n    Write a python function to calculate nth term of Fibonacci series.\n    '''\n    if n==0 or n==1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef power(a,b):\n    '''\n    Write a python function to calculate (a ^ b) mod 10^9 + 7.\n    '''\n    return pow(a,b,10**9+7)\n        \ndef powermod(a,b,m):\n    '''\n    Write a python function to calculate (a ^ b) mod m.\n    '''\n    return pow(a,b,m)\n        \ndef gcd(a,b):\n    '''\n    Write a python function to calculate gcd of two numbers.\n    '''\n    if a==0:\n        return b\n    return gcd(b%a,a)\n        \ndef lcm(a,b):\n    '''\n    Write a python function to calculate lcm of two numbers.\n    '''\n    return a*b//gcd(a,b)\n        \ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n        \ndef isPalindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    reverted=0\n    while(n):\n        reverted=reverted*10+n%10\n        n=n//10\n    return n==reverted\n        \ndef countDigits(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count=0\n    while(n):\n        count+=1\n        n=n//10\n    return count\n        \ndef digitCount(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 1+digitCount(n//10)\n        \ndef isPan(n):\n    '''\n    Write a python function to check whether a number is pan number or not.\n    '''\n    if n==1:\n        return False\n    t=n//2\n    while(n):\n        if n%10!=t:\n            return False\n        n=n//10\n        t=t//10\n    return True\n        \ndef palindromic(n):\n    '''\n    Write a python function to check whether a number is palindromic or not.\n    '''\n    if n<0:\n        return False\n    reverted=0\n    while(n):\n        reverted=reverted*10+n%10\n        n=n//10\n    return n==reverted\n        \ndef pwr(a,b):\n    '''\n    Write a python function to calculate a to the b power.\n    '''\n    if b==0:\n        return 1\n    return pow(a,b-1)*a\n        \ndef pwrmod(a,b,m):\n    '''\n    Write a python function to calculate (a ^ b) mod m.\n    '''\n    return pow(a,b,m)\n        \ndef sumofdigits(n):\n    '''\n    Write a python function to calculate sum of the digits of a number.\n    '''\n    if n==0:\n        return 0\n    return n%10 + sumofdigits(n//10)\n        \ndef isLychrel(n):\n    '''\n    Write a python function to check whether a number is Lychrel number or not.\n    '''\n    if isPrime(n):\n        return False\n    x=n\n    y=n\n    i=0\n    while(i<50):\n        x=pwrmod(x,2,10**9+7)\n        y=pwrmod(y,2,10**9+7)\n        if x==y:\n            return False\n        i+=1\n    return True\n        \ndef isLychrelp(n):\n    '''\n    Write a python function to check whether a number is Lychrel number or not.\n    '''\n    if isPrime(n):\n        return False\n    x=n\n    y=n\n    i=0\n    while(i<50):\n        x=pwrmod(x,2,10**9+7)\n        y=pwrmod(y,2,10**9+7)\n        if x==y:\n            return True\n        i+=1\n    return False\n        \ndef isLychrelmod(n,m):\n    '''\n    Write a python function to check whether a number is Lychrel number or not.\n    '''\n    if isPrime(n):\n        return False\n    x=n\n    y=n\n    i=0\n    while(i<50):\n        x=pwrmod(x,2,m)\n        y=pwrmod(y,2,m)\n        if x==y:\n            return True\n        i+=1\n    return False\n        \ndef isLychrelmodp(n,m):\n    '''\n    Write a python function to check whether a number is Lychrel number or not.\n    '''\n    if isPrime(n):\n        return False\n    x=n\n    y=n\n    i=0\n    while(i<50):\n        x=pwrmod(x,2,m)\n        y=pwrmod(y,2,m)\n        if x==y:\n            return False\n        i+=1\n    return True\n        \ndef sumofpowers(n):\n    '''\n    Write a python function to calculate sum of the powers of a number.\n    '''\n    sum=0\n    while(n):\n        sum+=n%10\n        n=n//10\n    return sum\n        \ndef sumofsquares(n):\n    '''\n    Write a python function to calculate sum of the squares of a number.\n    '''\n    if n==0:\n        return 0\n    return n+sumofsquares(n//10)\n        \ndef isLychrelmod2(n,m):\n    '''\n    Write a python function to check whether a number is Lychrel number or not.\n    '''\n    if isPrime(n):\n        return False\n    x=n\n    y=n\n    i=0\n    while(i<50):\n        x=pwrmod(x,2,m)\n        y=pwrmod(y,2,m)\n        if x==y:\n            return True\n        i+=1\n    return False\n        \ndef isLychrelmodp2(n,m):\n    '''\n    Write a python function to check whether a number is Lychrel number or not.\n    '''\n    if isPrime(n):\n        return False\n    x=n\n    y=n\n    i=0\n    while(i<50):\n        x=pwrmod(x,2,m)\n        y=pwrmod(y,2,m)\n        if x==y:\n            return False\n        i+=1\n    return True\n        \ndef isPalindromic(n)"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    r = (w**2 + h**2) ** 0.5\n    return r,math.asin(h/r)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef isosceles(l,b):\n    '''\n    Write a function to find the base and height of a right angle triangle.\n    '''\n    return math.sqrt(l**2+b**2)\ndef righttriangle(w,h):\n    '''\n    Write a function to find the base and height of a right angle triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef righttriangle_2(w,h):\n    '''\n    Write a function to find the base and height of a right angle triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef righttriangle_3(w,h):\n    '''\n    Write a function to find the base and height of a right angle triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef add_sum_to_list(l):\n    '''\n    Write a function to add all the items in a list into a total and return that total.\n    '''\n    total=0\n    for i in l:\n        total+=i\n    return total\ndef celsius_to_fahrenheit(c):\n    '''\n    Write a function to convert Celsius to Fahrenheit.\n    '''\n    return (c*9/5)+32\ndef seg_peri(a,b):\n    '''\n    Write a function to find the perimeter of a segment defined by 2 points.\n    '''\n    return 2*(a+b)\ndef seg_area(a,b):\n    '''\n    Write a function to find the area of a segment defined by 2 points.\n    '''\n    return ((a+b)**2)/4\ndef rect_peri(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef rect_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef circ_peri(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*r\ndef circ_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef pythag_triplet(a,b,c):\n    '''\n    Write a function to find the sum of the lengths of two sides of a pythagorean triplet.\n    '''\n    return a+b+c\ndef is_rightangled(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_2(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles_2(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_3(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles_3(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_4(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles_4(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_5(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles_5(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_6(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles_6(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_7(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles_7(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_8(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles_8(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_9(a,b,c):\n    '''\n    Write a function to check whether 3 sides form a right angled triangle.\n    '''\n    if a==b and b==c and a==c:\n        return True\n    else:\n        return False\ndef is_isosceles_9(a,b):\n    '''\n    Write a function to check whether 2 sides form an isosceles right angle triangle.\n    '''\n    if a==b and a!=c:\n        return True\n    elif a==c and a!=b:\n        return True\n    else:\n        return False\ndef is_rightangled_10(a,b,c):\n    '''\n    Write a function to chec"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*w + h*h\ndef remove_duplicates(lst):\n    '''\n    Write a function that returns a list with all duplicates removed.\n    '''\n    lst2 = []\n    for num in lst:\n        if num not in lst2:\n            lst2.append(num)\n    return lst2\ndef quadratic_equation(a,b,c):\n    '''\n    Write a function that finds the solutions to the quadratic equation ax^2 + bx + c = 0\n    '''\n    return (-b + math.sqrt(b*b-4*a*c))/(2*a)\ndef fibonacci_recursion(n):\n    '''\n    Write a function that returns the nth number in the Fibonacci sequence, using recursion.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibonacci_recursion(n-1) + fibonacci_recursion(n-2)\ndef fibonacci_iteration(n):\n    '''\n    Write a function that returns the nth number in the Fibonacci sequence, using iteration.\n    '''\n    a,b = 0,1\n    for i in range(1,n):\n        a,b = b,a+b\n    return a\ndef factorial_recursion(n):\n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    return n*factorial_recursion(n-1)\ndef factorial_iteration(n):\n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    value = 1\n    for i in range(1,n+1):\n        value *= i\n    return value\ndef fibonacci_recursion(n):\n    '''\n    Write a function that returns the nth number in the Fibonacci sequence, using recursion.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibonacci_recursion(n-1) + fibonacci_recursion(n-2)\ndef fibonacci_iteration(n):\n    '''\n    Write a function that returns the nth number in the Fibonacci sequence, using iteration.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a,b = 0,1\n    for i in range(1,n):\n        a,b = b,a+b\n    return b\ndef count_ways(n,x,y,z):\n    '''\n    Write a function that returns the number of ways that an object can be split into 3 parts.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return count_ways(n-1,x,y,z) + count_ways(n-2,x,y,z) + count_ways(n-3,x,y,z)\ndef count_ways_recursion(n,x,y,z):\n    '''\n    Write a function that returns the number of ways that an object can be split into 3 parts.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return count_ways_recursion(n-1,x,y,z) + count_ways_recursion(n-2,x,y,z) + count_ways_recursion(n-3,x,y,z)\ndef count_ways_iteration(n,x,y,z):\n    '''\n    Write a function that returns the number of ways that an object can be split into 3 parts.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    a,b,c = 0,0,0\n    for i in range(1,n):\n        a,b,c = b,c,a+b+c\n    return a+b+c\ndef find_number(lst,n):\n    '''\n    Write a function that returns the number of ways that an object can be split into 3 parts.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return find_number(lst,n-1) + find_number(lst,n-2) + find_number(lst,n-3)\ndef min_swaps_to_make_palindrome(string):\n    '''\n    Write a function that returns the minimum number of characters you need to change to make string a palindrome.\n    '''\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 0\n    if len(string) == 2:\n        if string[0]!= string[1]:\n            return 1\n        else:\n            return 0\n    if string[0] == string[len(string)-1]:\n        return min_swaps_to_make_palindrome(string[1:len(string)-1])\n    elif string[0]!= string[len(string)-1]:\n        return min_swaps_to_make_palindrome(string[1:len(string)]) + 1\ndef min_swaps_to_make_palindrome(string):\n    '''\n    Write a function that returns the minimum number of characters you need to change to make string a palindrome.\n    '''\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 0\n    if len(string) == 2:\n        if string[0]!= string[1]:\n            return 1\n        else:\n            return 0\n    if string[0] == string[len(string)-1]:\n        return min_swaps_to_make_palindrome(string[1:len(string)-1])\n    elif string[0]!= string[len(string)-1]:\n        return min_swaps_to_make_palindrome(string[1:len(string)]) + 1\ndef is_balanced_tree(tree):\n    '''\n    Write a function that returns True if the given tree is balanced, otherwise False.\n    A balanced tree is a tree in which the heights of the two subtrees of any node never differ by more than one.\n    '''\n    if tree == None:\n        return True\n    if tree.left == None and tree.right == None:\n        return True\n    if tree.left == None or tree.right == None:\n        return False\n    if abs(get_height(tree.left) - get_height(tree.right)) <= 1:\n        return is_balanced_tree(tree.left) and is_balanced_tree(tree.right)\n    else:\n        return False\ndef get_height(tree):\n    if tree == None:\n        return 0\n    else:\n        return 1 + max(get_height(tree.left), get_height(tree.right))\ndef tree_validation(tree, result_list):\n    '''\n    Write a function that returns True if the given tree is valid, otherwise False.\n    A valid tree is a tree in which all the nodes have a valid value.\n    '''\n    if tree == None:\n        return True\n    if tree.left == None and tree.right == None:\n        result_list.append(tree.value)\n        return True\n    if tree.left == None or tree.right == None:\n        return False\n    if tree.value < tree.left.value or tree.value > tree.right.value:\n        return False\n    tree_validation(tree.left, result_list)\n    tree_validation(tree.right, result_list)\n    return True\ndef tree_validation2(tree, result_list):\n    '''\n    Write a function that returns True if the given tree is valid, otherwise False.\n    A valid tree is a tree in which all the nodes have a valid value.\n    '''\n    if tree == None:\n        return True\n    if tree.left == None and tree.right == None:\n        resul"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2==0:\n        return \"Error, invalid\"\n    else:\n        return (w**2+h**2)**.5\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h**2+w**2\ndef otherside_rightangle_2(w,h):\n    return math.sqrt(w**2+h**2)\ndef __main__():\n    print(otherside_rightangle_2(1,1))\nif __name__ == '__main__':\n    __main__()"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    return math.sqrt(h**2 + w**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n    \ndef rightangledtriangle(l,b):\n    '''\n    Write a function that determines whether or not a right angled triangle is possible.\n    '''\n    return (l**2)+(b**2) == otherside_rightangle(l,b)**2\n    \ndef type_of_triangle(a,b,c):\n    '''\n    Write a function that determines what type of triangle a,b,c is.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        if a == b == c:\n            return 'Equilateral'\n        elif a == b or a == c or b == c:\n            return 'Isosceles'\n        else:\n            return 'Scalene'\n    else:\n        return 'Not a right angle'\n    \ndef sum_and_difference(a,b,c):\n    '''\n    Write a function that takes three parameters and returns the sum of the\n    3 parameters and the difference between the 3 parameters.\n    '''\n    return (a+b+c, a-b-c)\n    \ndef leapyear(x):\n    '''\n    Write a function that takes a year as a parameter and returns true if the\n    year is a leap year, otherwise returns false.\n    '''\n    if x%4 == 0:\n        if x%100 == 0:\n            if x%400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef is_prime(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is a prime number, otherwise returns false.\n    '''\n    if x<2:\n        return False\n    for i in range(2,x):\n        if x%i == 0:\n            return False\n    return True\n    \ndef gcd(x,y):\n    '''\n    Write a function that takes two numbers as parameters and returns the\n    greatest common divisor of the 2 parameters.\n    '''\n    while y!=0:\n        x,y = y,x%y\n    return x\n    \ndef gcd_2(a,b):\n    '''\n    Write a function that takes two numbers as parameters and returns the\n    greatest common divisor of the 2 parameters.\n    '''\n    if a>b:\n        a,b = b,a\n    while b!=0:\n        a,b = b,a%b\n    return a\n    \ndef lcm(a,b):\n    '''\n    Write a function that takes two numbers as parameters and returns the\n    lowest common multiple of the 2 parameters.\n    '''\n    return int((a*b)/gcd(a,b))\n    \ndef is_perfect(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n    if perfect_num == x:\n        return True\n    else:\n        return False\n        \ndef is_perfect_2(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_3(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_4(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_5(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_6(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_7(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_8(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_9(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_10(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_11(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_12(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_13(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num = 0\n    for i in range(1,x):\n        if x%i == 0:\n            perfect_num += i\n            if perfect_num > x:\n                return False\n    return True\n    \ndef is_perfect_14(x):\n    '''\n    Write a function that takes a number as a parameter and returns true if the\n    number is perfect, otherwise returns false.\n    '''\n    perfect_num "
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle=math.degrees(math.atan(w/h))\n    print(angle)\n    b=math.sqrt((h**2)+(w**2))\n    print(b)\n    print(math.tan(math.radians(angle)))\n    print(math.degrees(math.atan(w/h)))\n    c=b*math.tan(math.radians(angle))\n    print(c)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return max(listval)\ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return min(listval)\ndef list_gen(listval):\n    '''\n    Write a function to return a list with each number doubled.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return [x*2 for x in listval]\ndef sum_list(listval):\n    '''\n    Write a function to return the sum of all the values in a given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return sum(listval)\ndef sort_list(listval):\n    '''\n    Write a function to return a sorted list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return sorted(listval)\ndef sum_val(listval):\n    '''\n    Write a function to return the sum of all the values in a given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return sum(listval)\ndef index_val(listval,val):\n    '''\n    Write a function to return the index of the first occurence of a given value\n    in a given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return listval.index(val)\ndef count_val(listval,val):\n    '''\n    Write a function to return the number of occurrences of a given value in a\n    given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return listval.count(val)\ndef all_equal(listval):\n    '''\n    Write a function to determine if all values in a given list are the same.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return len(set(listval)) == 1\ndef any_equal(listval):\n    '''\n    Write a function to determine if any values in a given list are the same.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return len(set(listval)) > 1\ndef remove_duplicate(listval):\n    '''\n    Write a function to remove all duplicates from a given list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return list(set(listval))\ndef remove_duplicate_dict(listval):\n    '''\n    Write a function to remove duplicates from a dictionary (not values).\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return dict([(x,True) for x in listval])\ndef duplicate_dict(listval):\n    '''\n    Write a function to return a new dictionary with the duplicate values from a given\n    dictionary removed.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return dict([(x,True) for x in listval])\ndef unique_values(dictval):\n    '''\n    Write a function to return a list of the unique values from a dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return list(set(dictval.values()))\ndef unique_values_dict(dictval):\n    '''\n    Write a function to return a dictionary with the unique values from a dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return dict(set(dictval.items()))\ndef common_elements(listval):\n    '''\n    Write a function to return a list of common elements in a list of lists.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return list(set.intersection(*[set(x) for x in listval]))\ndef uncommon_elements(listval):\n    '''\n    Write a function to return a list of uncommon elements in a list of lists.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return list(set.difference(*[set(x) for x in listval]))\ndef max_dict_val(dictval):\n    '''\n    Write a function to return the maximum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return max(dictval.values())\ndef min_dict_val(dictval):\n    '''\n    Write a function to return the minimum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return min(dictval.values())\ndef max_val_dict(dictval):\n    '''\n    Write a function to return the maximum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return max(dictval.values())\ndef min_val_dict(dictval):\n    '''\n    Write a function to return the minimum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return min(dictval.values())\ndef list_to_dict(listval,key):\n    '''\n    Write a function to return a dictionary with the keys being the values in a list\n    and the values being a list of the corresponding keys.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return dict([(x,key) for x in listval])\ndef dict_to_list(dictval,val):\n    '''\n    Write a function to return a list of the values for a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return [dictval[x] for x in dictval]\ndef dict_to_list_val(dictval,val):\n    '''\n    Write a function to return a list of the values for a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return dictval[val]\ndef max_val_dict_val(dictval):\n    '''\n    Write a function to return the maximum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return max(dictval.values())\ndef min_val_dict_val(dictval):\n    '''\n    Write a function to return the minimum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return min(dictval.values())\ndef dict_val_max(dictval):\n    '''\n    Write a function to return the maximum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return max(dictval.values())\ndef dict_val_min(dictval):\n    '''\n    Write a function to return the minimum value in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return min(dictval.values())\ndef dict_val_sum(dictval):\n    '''\n    Write a function to return the sum of the values in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return sum(dictval.values())\ndef dict_val_avg(dictval):\n    '''\n    Write a function to return the average of the values in a given dictionary.\n    '''\n    if len(dictval)==0:\n        return None\n    else:\n        return sum(dictval.values())/len(dictval)\ndef dict_val_max_key(dictval):\n    '''\n    Write a function to return the key of the maximum value in a given dictionary.\n    '''"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0],max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for elem in listval:\n        if maxval is None or maxval < elem:\n            maxval = elem\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [x for x in range(1, number+1) if number % x == 0]\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_list = []\n    for i in range(2,number):\n        if number % i == 0:\n            divisor_list.append(i)\n    return sum(divisor_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for div in range(1,number+1):\n        if number % div == 0:\n            div_sum += div\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, int(number**0.5) + 1) if number % i == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for div in range(1, number+1):\n        if number % div == 0:\n            divisors.append(div)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(2, int(number / 2) + 1):\n        if number % x == 0:\n            sum += x\n    return sum\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)):\n            if (arr[i] > arr[j]):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv += 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    N = len(arr) \n    inv_count = 0 \n    for i in range(N): \n        for j in range(i + 1,N): \n            if (arr[i] > arr[j]): \n                inv_count += 1 \n    return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return len(arr) - int(count_inv_in_arr(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return len([1 for i in range(1, len(arr)) if arr[i] < arr[i-1]])\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return len(arr)-1\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) is not list:\n            list2.append(i)\n        else:\n            for j in i:\n                list2.append(j)\n    return list2\n    \ndef main():\n    print(flatten_list([[1,2,3],[4,[5,[6]],7],8,[9,[[]]]]))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                flat_list.append(j)\n        else:\n            flat_list.append(i)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for element in list1:\n        if type(element) == list:\n            output += flatten_list(element)\n        else:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    import collections\n    result = []\n    for item in list1:\n        if isinstance(item, collections.Iterable) and not isinstance(item, str):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) is list:\n            for item in item:\n                flat_list.append(item)\n        else:\n            flat_list.append(item)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1 = [item for sublist in list1 for item in sublist]\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list1 if type(list1)!= list else sum((flatten_list(e) for e in list1), [])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1[0]) == type([]):\n        list2 = flatten_list(list1[0])\n        list3 = flatten_list(list1[1:])\n        return list2 + list3\n    else:\n        return list1[:]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    sorted_list = []\n    for item in stdata:\n        if len(sorted_list) == 0:\n            sorted_list.append(item)\n        elif item[1] >= sorted_list[-1][1]:\n            sorted_list.append(item)\n        else:\n            if item[1] > sorted_list[-1][1]:\n                sorted_list[-1] = item\n    return sorted_list[-1][1]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # d = defaultdict(list)\n    # for key, value in stdata:\n    #     d[key].append(value)\n    #     aggregate = max(d[key])\n    # return aggregate\n    \n    d = defaultdict(list)\n    for key, value in stdata:\n        d[key].append(value)\n        aggregate = max(d[key])\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    group_sum = defaultdict(int)\n    for pair in stdata:\n        for i in pair:\n            group_sum[i] += 1\n    max_val = 0\n    for i in group_sum:\n        if group_sum[i] > max_val:\n            max_val = group_sum[i]\n    return max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return 0\n    return max(sum(e) for e in stdata)\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return 0\n    return min(sum(e) for e in stdata)\ndef count_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return 0\n    return len(stdata)\ndef nlargest_aggregate(stdata,n):\n    '''\n    Write a function to calculate the n largest aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return []\n    return sorted(stdata,reverse=True)[:n]\ndef nsmallest_aggregate(stdata,n):\n    '''\n    Write a function to calculate the n smallest aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return []\n    return sorted(stdata)[:n]\ndef median_aggregate(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return 0\n    return sorted(stdata)[len(stdata)/2]\ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return 0\n    return sum(stdata)/len(stdata)\ndef any_aggregate(stdata):\n    '''\n    Write a function to calculate the aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return False\n    return any(stdata)\ndef all_aggregate(stdata):\n    '''\n    Write a function to calculate the aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return False\n    return all(stdata)\ndef variance_aggregate(stdata):\n    '''\n    Write a function to calculate the variance aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return 0\n    mean=mean_aggregate(stdata)\n    variance=sum((e-mean)**2 for e in stdata)/len(stdata)\n    return variance\ndef standard_deviation_aggregate(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    if not isinstance(stdata,(list,tuple)):\n        stdata=[stdata]\n    if not stdata:\n        return 0\n    return variance_aggregate(stdata)**0.5\ndef generate_stats(stdata):\n    '''\n    Write a function to generate statistics from the list of tuples.\n    '''\n    stats=defaultdict(list)\n    stats['Max']=max_aggregate(stdata)\n    stats['Min']=min_aggregate(stdata)\n    stats['Count']=count_aggregate(stdata)\n    stats['Nlargest']=nlargest_aggregate(stdata,5)\n    stats['Nsmallest']=nsmallest_aggregate(stdata,5)\n    stats['Median']=median_aggregate(stdata)\n    stats['Mean']=mean_aggregate(stdata)\n    stats['Any']=any_aggregate(stdata)\n    stats['All']=all_aggregate(stdata)\n    stats['Variance']=variance_aggregate(stdata)\n    stats['StandardDeviation']=standard_deviation_aggregate(stdata)\n    return stats\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #create a list of lists \n    lst = []\n    for i in stdata:\n        lst.append([i[0],i[1]])\n    #print lst\n    #print \"above list\"\n    #create a dictionary\n    dic = defaultdict(list)\n    for i in lst:\n        #print i\n        dic[i[0]].append(i[1])\n    #print dic\n    #create a dictionary2\n    dic2 = defaultdict(list)\n    for i in lst:\n        dic2[i[1]].append(i[0])\n    #print dic2\n    #for the keys in dictionary2\n    #find the max of all the keys\n    res = 0\n    for i in dic2.keys():\n        res = max(res,max(dic2[i]))\n    print res\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(lambda:0)\n    for s,b,c in stdata:\n        aggregate[b] += c\n    return max(aggregate.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    t = defaultdict(int)\n    t[0] = 0\n    t[1] = 1\n    t[2] = 2\n    t[3] = 3\n    t[4] = 4\n    t[5] = 5\n    t[6] = 6\n    t[7] = 7\n    t[8] = 8\n    t[9] = 9\n    t[10] = 10\n    t[11] = 11\n    t[12] = 12\n    t[13] = 13\n    t[14] = 14\n    t[15] = 15\n    t[16] = 16\n    t[17] = 17\n    t[18] = 18\n    t[19] = 19\n    t[20] = 20\n    t[21] = 21\n    t[22] = 22\n    t[23] = 23\n    t[24] = 24\n    t[25] = 25\n    t[26] = 26\n    t[27] = 27\n    t[28] = 28\n    t[29] = 29\n    t[30] = 30\n    t[31] = 31\n    t[32] = 32\n    t[33] = 33\n    t[34] = 34\n    t[35] = 35\n    t[36] = 36\n    t[37] = 37\n    t[38] = 38\n    t[39] = 39\n    t[40] = 40\n    t[41] = 41\n    t[42] = 42\n    t[43] = 43\n    t[44] = 44\n    t[45] = 45\n    t[46] = 46\n    t[47] = 47\n    t[48] = 48\n    t[49] = 49\n    t[50] = 50\n    t[51] = 51\n    t[52] = 52\n    t[53] = 53\n    t[54] = 54\n    t[55] = 55\n    t[56] = 56\n    t[57] = 57\n    t[58] = 58\n    t[59] = 59\n    t[60] = 60\n    t[61] = 61\n    t[62] = 62\n    t[63] = 63\n    t[64] = 64\n    t[65] = 65\n    t[66] = 66\n    t[67] = 67\n    t[68] = 68\n    t[69] = 69\n    t[70] = 70\n    t[71] = 71\n    t[72] = 72\n    t[73] = 73\n    t[74] = 74\n    t[75] = 75\n    t[76] = 76\n    t[77] = 77\n    t[78] = 78\n    t[79] = 79\n    t[80] = 80\n    t[81] = 81\n    t[82] = 82\n    t[83] = 83\n    t[84] = 84\n    t[85] = 85\n    t[86] = 86\n    t[87] = 87\n    t[88] = 88\n    t[89] = 89\n    t[90] = 90\n    t[91] = 91\n    t[92] = 92\n    t[93] = 93\n    t[94] = 94\n    t[95] = 95\n    t[96] = 96\n    t[97] = 97\n    t[98] = 98\n    t[99] = 99\n    t[100] = 100\n    t[101] = 101\n    t[102] = 102\n    t[103] = 103\n    t[104] = 104\n    t[105] = 105\n    t[106] = 106\n    t[107] = 107\n    t[108] = 108\n    t[109] = 109\n    t[110] = 110\n    t[111] = 111\n    t[112] = 112\n    t[113] = 113\n    t[114] = 114\n    t[115] = 115\n    t[116] = 116\n    t[117] = 117\n    t[118] = 118\n    t[119] = 119\n    t[120] = 120\n    t[121] = 121\n    t[122] = 122\n    t[123] = 123\n    t[124] = 124\n    t[125] = 125\n    t[126] = 126\n    t[127] = 127\n    t[128] = 128\n    t[129] = 129\n    t[130] = 130\n    t[131] = 131\n    t[132] = 132\n    t[133] = 133\n    t[134] = 134\n    t[135] = 135\n    t[136] = 136\n    t[137] = 137\n    t[138] = 138\n    t[139] = 139\n    t[140] = 140\n    t[141] = 141\n    t[142] = 142\n    t[143] = 143\n    t[144] = 144\n    t[145] = 145\n    t[146] = 146\n    t[147] = 147\n    t[148] = 148\n    t[149] = 149\n    t[150] = 150\n    t[151] = 151\n    t[152] = 152\n    t[153] = 153\n    t[154] = 154\n    t[155] = 155\n    t[156] = 156\n    t[157] = 157\n    t[158] = 158\n    t[159] = 159\n    t[160] = 160\n    t[161] = 161\n    t[162] = 162\n    t[163] = 163\n    t[164] = 164\n    t[165] = 165\n    t[166] = 166\n    t[167] = 167\n    t[168] = 168\n    t[169] = 169\n    t[170] = 170\n    t[171] = 171\n    t[172] = 172\n    t[173] = 173\n    t[174] = 174\n    t[175] = 175\n    t[176] = 176\n    t[177] = 177\n    t[178] = 178\n    t[179] = 179\n    t[180] = 180\n    t[181] = 181\n    t[182] = 182\n    t[183] = 183\n    t[184] = 184\n    t[185] = 185\n    t[186] = 186\n    t[187] = 187\n    t[188] = 188\n    t[189] = 189\n    t[190] = 190\n    t[191] = 191\n    t[192] = 192\n    t[193] = 193\n    t[194] = 194\n    t[195] = 195\n    t[196] = 196\n    t[197] = 197\n    t[198] = 198\n    t[199] = 199\n    t[200] = 200\n    t[201] = 201\n    t[202] = 202\n    t[203] = 203\n    t[204] = 204\n    t[205] = 205\n    t[206] = 206\n    t[207] = 207\n    t[208] = 208\n    t[209] = 209\n    t[210] = 210\n    t[211] = 211\n    t[212] = 212\n    t[213] = 213\n    t[214] = 214\n    t[215] = 215\n    t[216] = 216\n    t[217] = 217\n    t[218] = 218\n    t[219] = 219\n    t[220] = 220\n    t[221] = 221\n    t[222] = 222\n    t[223] = 223\n    t[224] = 224\n    t[225] = 225\n    t[226] = 226\n    t[227] = 227\n    t[228] = 228\n    t[229] = 229\n    t[230] = 230\n    t[231] = 231\n    t[232] = 232\n    t[233] = 233\n    t[234] = 234\n    t[235] = 235\n    t[236] = 236\n    t[237] = 237\n    t[238] = 238\n    t[239] = 239\n    t[240] = 240\n    t[241] = 241\n    t[242] = 242\n    t[243] = 243\n    t[244] = 244\n    t[245] = 245\n    t[246] = 246\n    t[247] = 247\n    t[248] = 248\n    t[249] "
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return (0,0)\n    m = max(stdata,key=lambda x:x[1])\n    return (m[0],m[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_totals = defaultdict(float)\n    #TODO: write your code here\n    for stid, points in stdata:\n        aggregate_totals[stid] += points\n    return max(aggregate_totals.values())\n    \ndef max_aggregate_2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_totals = defaultdict(float)\n    #TODO: write your code here\n    for stid, points in stdata:\n        aggregate_totals[stid] += points\n    max_st = max(aggregate_totals.values())\n    return [key for key, value in aggregate_totals.items() if value == max_st]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    tbl = defaultdict(list)\n    max_val = 0\n    for idx, st in enumerate(stdata):\n        tbl[st[0]].append(st[1])\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    s = 0\n    for i in range(1,n+1):\n        s += count_binary_seq(i-1)\n    return s\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # find the number of binaries of length 2n where sum is same as sum of last n bits\n    count = 0\n    for i in range(1, n+1):\n        count += 2**i\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0 \n    total = (2*n) * (2*n+1)/2\n    for i in range(2,n+1): \n        a = 1\n        for j in range(i): \n            a *= 2\n        b = 1\n        for j in range(n-i): \n            b *= 2\n        if a+b == total: \n            count += 1\n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # The sequences of length 2n are of form 100...001 and 101...001 and last two bits of \n    # each bit pair is same. So, all sequences of length 2n is of form 00...00 and 01...00 and...\n    # and 101..00 and... and last two bits of each bit pair is same. \n    # For example, 100...001 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2. \n    # Similarly, 101..00 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # Similarly, 00..00 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # For example, 10..10 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2. \n    # Similarly, 11..11 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # For example, 0001..00 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # Similarly, 0101..01 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # Similarly, 0111..01 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # Similarly, 1101..01 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # Similarly, 1111..01 has two sequences of length 2n. \n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # So, count of all these sequences is 2n * (2n - 1) // 2.\n    # In the above example, count is not required to be 2n * (2n - 1) // 2. \n    # However, we can imagine that if we have sequences like 10..00 and 11..00 etc. \n    # count is of the form n * (n - 1) // 2 + (n - 1) * (n - 2) // 2 +... + 1. \n    # This kind of representation is used to represent counts of all possible binary sequences. \n    # For example, for n = 3, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 1 = 8. \n    # For n = 4, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 4 * 1 // 2 = 16. \n    # For n = 5, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 4 * 2 // 2 + 5 * 1 // 2 = 24. \n    # For n = 6, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 4 * 3 // 2 + 5 * 2 // 2 + 6 * 1 // 2 = 32.\n    # For n = 7, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 4 * 4 // 2 + 5 * 3 // 2 + 6 * 2 // 2 + 7 * 1 // 2 = 40. \n    # For n = 8, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 4 * 5 // 2 + 5 * 4 // 2 + 6 * 3 // 2 + 7 * 2 // 2 + 8 * 1 // 2 = 48. \n    # For n = 9, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 4 * 6 // 2 + 5 * 5 // 2 + 6 * 4 // 2 + 7 * 3 // 2 + 8 * 2 // 2 + 9 * 1 // 2 = 56. \n    # For n = 10, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 4 * 7 // 2 + 5 * 6 // 2 + 6 * 5 // 2 + 7 * 4 // 2 + 8 * 3 // 2 + 9 * 2 // 2 + 10 * 1 // 2 = 64. \n    # For n = 11, 10..00 and 11..00 have count of 2 * 3 // 2 + 3 * 2 // 2 + 4 * 8 // 2 + 5 * 7 // 2 + 6 * 6 // 2 + 7 * 5 // 2 + 8 * 4 // 2 + 9 * 3 // 2 + 10 * 2 // 2 + 11 * 1 // 2 = 72. \n    # So, n = 1, 10..10 is 1, 11..11 is 1. \n    # For n = 2, 10..10 and 11..11 are 2, 11..11 and 10..10. \n    # For n = 3, 10..10 and 11..11 are 4, 11..11 and 10..10. \n    # For n = 4, 10..10 and 11..11 are 8, 11..11 and 10..10. \n    # For n = 5, 10..10 and 11..11 are 16, 11..11 and 10..10. \n    # For n = 6, 10..10 and 11..11 are 24, 11..11 and 10..10. \n    # For n = 7, 10..10 and 11..11 are 32, 11..11 and 10..10. \n    # For n = 8, 10..10 and 11..11 are 40, 11..11 and 10..10. \n    # For n = 9, 10..10 and 11..11 are 48, 11..11 and 10..10. \n    # For n = 10, 10..10 and 11..11 are 56, 11..11 and 10..10. \n    # For n = 11, 10..10 and 11..11 are 64, 11..11 and 10..10.\n    # We can see that for n = 1, 10..10 is 1, 11..11 is 1. \n    # For n = 2, 10..10 and 11..11 are 2, 11..11 and 10..10. \n    # For n = 3, 10..10 and 11..11 are 4, 11..11 and 10..10. \n    # For n = 4, 10..10 and 11..11 are 8, 11..11 and 10..10. \n    # For n = 5, 10..10 and 11..11 are 16, 11..11 and 10..10. \n    # For n = 6, 10..10 and 11..11 are 24, 11..11 and 10..10. \n    # For n = 7, 10..10 and 11..11 are 32, 11..11 and 10..10. \n    # For n = 8, 10..10 and 11..11 are 40, 11..11 and 10..10. \n    # For n = 9, 10..10 and 11..11 are 48, 11..11 and 10..10. \n    # For n = 10, 10..10 and 11..11 are 56, 11..11 and 10..10. \n    # For n = 11, 10..10 and 11..11 are 64, 11..11 and 10..10.\n    # This is the general formula for n = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11. \n    # So, count = n * (n - 1) // 2 + (n - 1) * (n - 2) // 2 +... + 1\n    # In the above example, count = 8.\n    # Hence, the count of all sequences of length 2n is 2 * 8 // 2 = 16.\n    # For n = 2, there are 2n sequences of length 2n. \n    # There are 2n - 1 sequences of length 2n - 1 and n - 1 sequences of length 2n - 2. \n    # We can see that n - 1 * (n - 2) // 2 = (n - 2) * (n - 3) // 2 = (n - 2) * (n - 3) // 2 = (n - 2) * (n - 3) // 4 = (n - 2) * (n - 3) // 4 = (n - 2) * (n - 3) // 8 = (n - 2) * (n - 3) // 8 = (n - 2) * (n - 3) // 16 = (n - 2) * (n - 3) /"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    arr = [0] * (n + 1)\n    arr[0] = 1\n    arr[1] = 1\n    for i in range(2, n + 1):\n        arr[i] = arr[i - 2] + arr[i - 1]\n    return arr[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    table = [0] * (n+1)\n    table[0] = 1\n    table[1] = 2\n    for i in range(2, n+1):\n        for j in range(0, i):\n            table[i] += table[j]*table[i-j-1]\n    return table[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    memo = {}\n    def count_seq(a,b,n):\n        if a == 0 or b == 0:\n            return 1\n        if (a,b) in memo:\n            return memo[(a,b)]\n        count = 0\n        if a > 0 and b > 0:\n            if a < b:\n                return count_seq(a,b-1,n) + count_seq(a-1,b,n)\n            else:\n                return count_seq(a-1,b,n)\n        elif a > 0:\n            return count_seq(a-1,b,n)\n        elif b > 0:\n            return count_seq(a,b-1,n)\n        else:\n            return 1\n    return count_seq(n,n,n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    arr = [0] * 2**n\n    arr[0] = 1\n    arr[1] = 1\n    for i in range(2,n+1):\n        arr[i] = arr[i-1] + arr[i-2]\n    return arr[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - 1 - j]\n    \n    return dp[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2) + 2*count_binary_seq(n-2) + 2*count_binary_seq(n-2)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([len(str(key)) for key in d.keys()])\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.itervalues())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    return max([dict_depth(i) for i in d.values()]+[1])+1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max([dict_depth(v) for v in d.values()] + [len(d)])\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        raise ValueError(\"Dictionary expected, got %s\"%type(d))\n    depth = 0\n    for k,v in d.iteritems():\n        if type(v) is dict:\n            depth = max(depth, dict_depth(v) + 1)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if i == index :\n            return arr[i]\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(arr) :\n        return None\n    if arr[index] >= rotations[-1] :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for rot in rotations :\n        index = (index + rot)%len(arr)\n    return arr[index]\n    \ndef find_Number(arr,ranges,rotations) :\n    '''\n    Write a python function to find number of rotations of an array with size n\n    '''\n    size = len(arr)\n    rotated = []\n    for i in range(size):\n        rotated.append(find_Element(arr,ranges,rotations,i))\n    return rotated\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = index+1\n    for j in range(rotations) :\n        i+=1\n        if i >= len(arr) :\n            i = 0\n    return arr[i]\n    \ndef main() :\n    arr = [1,2,3,4,5,6,7,8]\n    print \"After 1 rotation : \",find_Element(arr,0,1,2)\n    print \"After 2 rotations : \",find_Element(arr,0,2,2)\n    print \"After 3 rotations : \",find_Element(arr,0,3,2)\n    print \"After 4 rotations : \",find_Element(arr,0,4,2)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == len(ranges) :\n        return arr[index-len(ranges)]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start,end = ranges[index]\n    \n    if start < end :\n        return find_Element(arr,ranges,rotations,(index+1)%len(ranges))\n    else :\n        return arr[start%end]\n    \ndef find_rotation(arr,n) :\n    '''\n    Write a python function to find rotation count of a given array\n    '''\n    for i in range(0,len(arr)) :\n        rot = n%len(arr)\n        if arr[rot] == arr[i] :\n            return rot\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        arr = arr[-1:]+arr[:-1]\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index]==0 :\n        return arr[index]\n    if ranges[index]==1 :\n        return rotations[index]\n    \n    return find_Element(arr,ranges[:index]+ranges[index+1:],rotations[:index]+rotations[index+1:],index-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print \"Rotated arr : \", arr, \"\\n\"\n    start = 0\n    end = len(arr)\n    while(start<=end) :\n        mid = (start+end)/2\n        if rotations[mid] == index :\n            print \"Element found at index : \", mid, \"\\n\"\n            return mid\n        elif rotations[mid] > index :\n            end = mid-1\n        else :\n            start = mid+1\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        arr = [arr[-1]] + arr[0:-1]\n    return arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile('^p')\n    words = filter(p.match, words)\n    return words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list = []\n    for word in words:\n        if word.startswith('p'):\n            new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [i for i in words if i.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res=[]\n    for word in words:\n        if word[0]=='p':\n            res.append(word)\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # returns the list of all the words which start with p\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [x for x in words if x.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [words[i] for i in range(len(words)) if words[i].startswith('p')]\n    \ndef censor_v2(text,word):\n    '''\n    Write a function to censor all instances of the given word in the text.\n    '''\n    text=text.lower()\n    return re.sub(r'(.*){}(.*)'.format(word, word), r'\\1\\2',text)\n    \ndef censor_v3(text, word):\n    '''\n    Write a function to censor all instances of the given word in the text.\n    '''\n    text = text.lower()\n    word = word.lower()\n    return re.sub(r'{}'.format(word), r'*' * len(word), text)\n    \ndef censor_v4(text, word):\n    '''\n    Write a function to censor all instances of the given word in the text.\n    '''\n    text = text.lower()\n    word = word.lower()\n    text = re.sub(r'(.*){}(.*)'.format(word, word), r'\\1*' * len(word) + r'\\2', text)\n    return text\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [x for x in words if x.startswith('p')]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > i:\n        return a[i]\n    if index[k]!= -1:\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    res = a[k]\n    for i in range(k,n):\n        if index[i] == -1:\n            res = max(res, max_sum_increasing_subseq(a,n, index, i+1) + a[i])\n    index[k] = k\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    for i in xrange(index, n):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i+1, k))\n        if max_sum_increasing_subseq(a, n, i+1, k) >= k:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i+1, i+1) + a[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == index:\n        return a[index]\n    elif index < 0 or index > n:\n        return -1\n    elif k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(a[index], max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global max_so_far\n    if index == n:\n        return 0\n    if k <= index:\n        if a[index] + max_so_far > max_so_far:\n            max_so_far = a[index] + max_so_far\n        return max_so_far\n    a[index] = max(a[index], max_sum_increasing_subseq(a, n, index+1, k) + a[index])\n    return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    temp1 = max_sum_increasing_subseq(a, n, index+1, k)\n    temp2 = temp1 + a[index]\n    if k < index:\n        return temp1\n    else:\n        return max(temp2, temp1)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if a[index] > k:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return a[index] + max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 1:\n        return a[index]\n    elif index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return 0\n    if k == index:\n        return a[k]\n    \n    if dp[k]!= -1:\n        return dp[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n<0:\n        return tuplex[n:]\n    if m<0:\n        return tuplex[:m]\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\ndef insert_at_tuplex(tuplex,n,element):\n    '''\n    Write a function to insert an element into a tuple.\n    '''\n    return tuplex[0:n]+(element,)+tuplex[n:]\ndef is_consecutive(tuplex):\n    '''\n    Write a function to check if a tuple is consecutive or not.\n    '''\n    for i in range(1,len(tuplex)):\n        if tuplex[i]!=tuplex[i-1]+1:\n            return False\n    return True\ndef remove_last(tuplex):\n    '''\n    Write a function to remove the last element of a tuple.\n    '''\n    return tuplex[:-1]\ndef replace_last(tuplex,element):\n    '''\n    Write a function to replace the last element of a tuple with a new one.\n    '''\n    return tuplex[:-1]+(element,)\ndef increment_tuplex(tuplex):\n    '''\n    Write a function to increment the last element of a tuple by 1.\n    '''\n    return tuplex[:-1]+(tuplex[-1]+1,)\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef is_palindrome(tuplex):\n    '''\n    Write a function to check if a tuple is palindrome or not.\n    '''\n    for i in range(len(tuplex)//2):\n        if tuplex[i]!=tuplex[-1-i]:\n            return False\n    return True\ndef is_factorial(n):\n    '''\n    Write a function to check if a number is a factorial or not.\n    '''\n    if n==0 or n==1:\n        return True\n    else:\n        return n==factorial(n)\ndef is_subsequence(tuplex,subseq):\n    '''\n    Write a function to check if a tuple is a subsequence of another tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]!=subseq[i]:\n            return False\n    return True\ndef is_palindrome_of_digits(n):\n    '''\n    Write a function to check if a number is a palindrome of its digits or not.\n    '''\n    if n==0:\n        return True\n    else:\n        return is_palindrome(str(n))\ndef remove_adjacent_duplicates(tuplex):\n    '''\n    Write a function to remove adjacent duplicates from a tuple.\n    '''\n    new_tuplex=[]\n    for i in tuplex:\n        if i not in new_tuplex:\n            new_tuplex.append(i)\n    return tuple(new_tuplex)\ndef remove_last_nth(tuplex,n):\n    '''\n    Write a function to remove the last n elements of a tuple.\n    '''\n    return tuplex[:-n]\ndef remove_first_nth(tuplex,n):\n    '''\n    Write a function to remove the first n elements of a tuple.\n    '''\n    return tuplex[n:]\ndef index_of_last(tuplex,element):\n    '''\n    Write a function to return the index of the last occurrence of an element in a tuple.\n    '''\n    return len(tuplex)-tuplex[::-1].index(element)\ndef index_of_first(tuplex,element):\n    '''\n    Write a function to return the index of the first occurrence of an element in a tuple.\n    '''\n    return tuplex.index(element)\ndef index_of_last_nth(tuplex,n):\n    '''\n    Write a function to return the index of the last n occurrences of an element in a tuple.\n    '''\n    return len(tuplex)-n+tuplex[::-1].index(tuplex[-n])\ndef index_of_first_nth(tuplex,n):\n    '''\n    Write a function to return the index of the first n occurrences of an element in a tuple.\n    '''\n    return tuplex.index(tuplex[n])\ndef append_tuplex(tuplex,tuplex2):\n    '''\n    Write a function to append the second tuple to the first one.\n    '''\n    return tuplex+tuplex2\ndef remove_item_from_tuplex(tuplex,element):\n    '''\n    Write a function to remove an item from a tuple.\n    '''\n    return tuplex[:tuplex.index(element)]+tuplex[tuplex.index(element)+1:]\ndef insert_item_at_index(tuplex,element,n):\n    '''\n    Write a function to insert an item at a certain index.\n    '''\n    return tuplex[:n]+(element,)+tuplex[n:]\ndef remove_item_at_index(tuplex,n):\n    '''\n    Write a function to remove an item at a certain index.\n    '''\n    return tuplex[:n]+tuplex[n+1:]\ndef insert_item_at_end(tuplex,element):\n    '''\n    Write a function to insert an item at the end of a tuple.\n    '''\n    return tuplex[:]+(element,)\ndef insert_item_at_front(tuplex,element):\n    '''\n    Write a function to insert an item at the front of a tuple.\n    '''\n    return (element,)+tuplex[:]\ndef swap_first_last(tuplex):\n    '''\n    Write a function to swap the first and last element of a tuple.\n    '''\n    return tuplex[-1:]+tuplex[:-1]\ndef rotate_tuplex_left_by_n(tuplex,n):\n    '''\n    Write a function to rotate a tuple to the left by n elements.\n    '''\n    return tuplex[n:]+tuplex[:n]\ndef rotate_tuplex_right_by_n(tuplex,n):\n    '''\n    Write a function to rotate a tuple to the right by n elements.\n    '''\n    return tuplex[-n:]+tuplex[:-n]\ndef rotate_tuplex_by_n(tuplex,n):\n    '''\n    Write a function to rotate a tuple by n elements.\n    '''\n    return tuplex[-n:]+tuplex[:-n]\ndef rotate_tuplex_left_by_n_elements(tuplex,n):\n    '''\n    Write a function to rotate a tuple to the left by n elements.\n    '''\n    return tuplex[n:]+tuplex[:n]\ndef rotate_tuplex_right_by_n_elements(tuplex,n):\n    '''\n    Write a function to rotate a tuple to the right by n elements.\n    '''\n    return tuplex[-n:]+tuplex[:-n]\ndef rotate_tuplex_by_n_elements(tuplex,n):\n    '''\n    Write a function to rotate a tuple by n elements.\n    '''\n    return tuplex[-n:]+tuplex[:-n]\ndef split_tuplex(tuplex,index):\n    '''\n    Write a function to split a tuple at a particular index.\n    '''\n    return tuplex[:index],tuplex[index:]\ndef join_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to join two tuples.\n    '''\n    return tuplex1+tuplex2\ndef tuplify(obj):\n    '''\n    Write a function to convert an object into a tuple.\n    '''\n    return tuple(obj)\ndef unzip(tuplex):\n    '''\n    Writ"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(n):\n        if i==m:\n            tuplex=tuplex[:i]+':'+tuplex[i:]\n    return tuplex\ndef count_chars(s):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    count=0\n    for i in s:\n        count+=1\n    return count\ndef char_freq(s):\n    '''\n    Write a function to count the number of occurrences of each character in a string.\n    '''\n    count={}\n    for i in s:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n    return count\ndef char_dict(s):\n    '''\n    Write a function to count the number of occurrences of each character in a string and return a dictionary.\n    '''\n    count={}\n    for i in s:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n    return count\ndef anagram_checker(s1,s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    #To check if the strings are of equal length\n    if len(s1)!=len(s2):\n        return False\n    #To check if the strings are anagrams of each other\n    s1=sorted(s1)\n    s2=sorted(s2)\n    if s1==s2:\n        return True\n    else:\n        return False\ndef find_word(s,word):\n    '''\n    Write a function to find the position of the first occurrence of a word in a string, if the word is present.\n    '''\n    position=s.find(word)\n    return position\ndef count_vowels(s):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    count=0\n    for i in s:\n        if i in 'aeiouAEIOU':\n            count+=1\n    return count\ndef print_items(s):\n    '''\n    Write a function to print items in a list in the same order they were stored.\n    '''\n    for i in s:\n        print(i)\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    reverse=''\n    for i in s:\n        reverse+=i\n    return reverse\ndef remove_space(s):\n    '''\n    Write a function to remove all spaces in a string.\n    '''\n    s=s.replace(' ','')\n    return s\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    s=remove_space(s)\n    if s==reverse_string(s):\n        return True\n    else:\n        return False\ndef palindrome_checker(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if is_palindrome(s):\n        return True\n    else:\n        return False\ndef count_words(s):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    count=1\n    s=s.split(' ')\n    for i in s:\n        if i!='':\n            count+=1\n    return count\ndef count_words(s):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    count=1\n    s=s.split(' ')\n    for i in s:\n        if i!='':\n            count+=1\n    return count\ndef word_counter(s):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    count=1\n    s=s.split(' ')\n    for i in s:\n        if i!='':\n            count+=1\n    return count\ndef word_counter(s):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    count=1\n    s=s.split(' ')\n    for i in s:\n        if i!='':\n            count+=1\n    return count\ndef frequency_sort(s):\n    '''\n    Write a function to sort the characters of a string in the order of frequency.\n    '''\n    count=[]\n    s=s.split(' ')\n    for i in s:\n        count.append(char_freq(i))\n    count=sorted(count,reverse=True)\n    s=''\n    for i in count:\n        for j in i:\n            s+=j\n    return s\ndef pig_latin(s):\n    '''\n    Write a function to convert a string to Pig Latin.\n    '''\n    s=s.split(' ')\n    for i in range(len(s)):\n        if s[i][0] in 'aeiouAEIOU':\n            s[i]=s[i][1:]+s[i][0]+'ay'\n        else:\n            s[i]=s[i][1:]+s[i][0]+'ay'\n    return''.join(s)\ndef pig_latin(s):\n    '''\n    Write a function to convert a string to Pig Latin.\n    '''\n    s=s.split(' ')\n    for i in range(len(s)):\n        if s[i][0] in 'aeiouAEIOU':\n            s[i]=s[i][1:]+s[i][0]+'ay'\n        else:\n            s[i]=s[i][1:]+s[i][0]+'ay'\n    return''.join(s)\ndef find_factors(n):\n    '''\n    Write a function to find all factors of a number.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    return l\ndef prime_checker(n):\n    '''\n    Write a function that takes a number as input and returns if the number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,n):\n        if n%i==0:\n            return False\n    return True\ndef count_odd(n):\n    '''\n    Write a function to count the number of odd digits in a number.\n    '''\n    count=0\n    while n>0:\n        if n%10%2==1:\n            count+=1\n        n//=10\n    return count\ndef count_even(n):\n    '''\n    Write a function to count the number of even digits in a number.\n    '''\n    count=0\n    while n>0:\n        if n%10%2==0:\n            count+=1\n        n//=10\n    return count\ndef sum_digits(n):\n    '''\n    Write a function to sum all the digits of a number.\n    '''\n    s=0\n    while n>0:\n        s+=n%10\n        n//=10\n    return s\ndef sum_digits(n):\n    '''\n    Write a function to sum all the digits of a number.\n    '''\n    s=0\n    while n>0:\n        s+=n%10\n        n//=10\n    return s\ndef is_consonant(letter):\n    '''\n    Write a function to check if a letter is a consonant.\n    '''\n    if letter in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ':\n        return True\n    else:\n        return False\ndef cons_count(s):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    count=0\n    for i in s:\n        if is_consonant(i):\n            count+=1\n    return count\ndef is_vowel(letter):\n    '''\n    Writ"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m] + tuplex[m:m+n]\ndef remove_duplicate(l1):\n    '''\n    Write a function to remove the duplicates from a list.\n    '''\n    return list(set(l1))\ndef remove_duplicate_list(l2):\n    '''\n    Write a function to remove the duplicates from a list.\n    '''\n    return list(dict.fromkeys(l2))\ndef remove_duplicate_dict(l3):\n    '''\n    Write a function to remove the duplicates from a list.\n    '''\n    return list(set(l3))\ndef remove_duplicate_set(l4):\n    '''\n    Write a function to remove the duplicates from a list.\n    '''\n    return list(set(l4))\ndef reverse_list(l5):\n    '''\n    Write a function to reverse a list.\n    '''\n    return list(reversed(l5))\ndef reverse_string(l6):\n    '''\n    Write a function to reverse a string.\n    '''\n    return l6[::-1]\ndef multiply_list(l7):\n    '''\n    Write a function to multiply a list.\n    '''\n    return reduce(lambda x,y:x*y,l7)\ndef multiply_string(l8):\n    '''\n    Write a function to multiply a string.\n    '''\n    return l8.lower().count('a')\ndef find_position_in_list(l9):\n    '''\n    Write a function to find the position of a given element in a list.\n    '''\n    return l9.index(l9[-1])\ndef position_tuple(t1,l10):\n    '''\n    Write a function to find the position of a given element in a list.\n    '''\n    return l10.index(t1)\ndef test_function(fn,test_case):\n    return fn(*test_case)\ndef linear_search(l11,num):\n    '''\n    Write a function to find the position of a given element in a list.\n    '''\n    for i in range(len(l11)):\n        if l11[i] == num:\n            return i\n    return -1\ndef bubble_sort(l12):\n    '''\n    Write a function to sort a list using bubble sort.\n    '''\n    for i in range(len(l12)):\n        for j in range(i,len(l12)):\n            if l12[i] > l12[j]:\n                l12[i],l12[j] = l12[j],l12[i]\n    return l12\ndef selection_sort(l13):\n    '''\n    Write a function to sort a list using selection sort.\n    '''\n    for i in range(len(l13)):\n        for j in range(i,len(l13)):\n            if l13[j] < l13[i]:\n                l13[j],l13[i] = l13[i],l13[j]\n    return l13\ndef insertion_sort(l14):\n    '''\n    Write a function to sort a list using insertion sort.\n    '''\n    for i in range(1,len(l14)):\n        key = l14[i]\n        j = i-1\n        while j>=0 and l14[j] > key:\n            l14[j+1] = l14[j]\n            j -= 1\n        l14[j+1] = key\n    return l14\ndef merge_sort(l15):\n    '''\n    Write a function to sort a list using merge sort.\n    '''\n    if len(l15) > 1:\n        mid = len(l15)//2\n        l15_1 = l15[:mid]\n        l15_2 = l15[mid:]\n        merge_sort(l15_1)\n        merge_sort(l15_2)\n        i = j = k = 0\n        while i < len(l15_1) and j < len(l15_2):\n            if l15_1[i] < l15_2[j]:\n                l15[k] = l15_1[i]\n                i += 1\n            else:\n                l15[k] = l15_2[j]\n                j += 1\n            k += 1\n        while i < len(l15_1):\n            l15[k] = l15_1[i]\n            i += 1\n            k += 1\n        while j < len(l15_2):\n            l15[k] = l15_2[j]\n            j += 1\n            k += 1\n    return l15\ndef quick_sort(l16):\n    '''\n    Write a function to sort a list using quick sort.\n    '''\n    def partition(l17,low,high):\n        pivot = l17[high]\n        i = low - 1\n        for j in range(low,high):\n            if l17[j] <= pivot:\n                i += 1\n                l17[i],l17[j] = l17[j],l17[i]\n        l17[i+1],l17[high] = l17[high],l17[i+1]\n        return i+1\n    def quick_sort_helper(l18,low,high):\n        if low < high:\n            pivot_position = partition(l18,low,high)\n            quick_sort_helper(l18,low,pivot_position-1)\n            quick_sort_helper(l18,pivot_position+1,high)\n    quick_sort_helper(l16,0,len(l16)-1)\n    return l16\ndef count_in_list(l19):\n    '''\n    Write a function to count the number of a given element in a list.\n    '''\n    return l19.count(l19[-1])\ndef set_union(l20,l21):\n    '''\n    Write a function to get the union of two sets.\n    '''\n    return list(set(l20).union(l21))\ndef set_intersection(l22,l23):\n    '''\n    Write a function to get the intersection of two sets.\n    '''\n    return list(set(l22).intersection(l23))\ndef set_difference(l24,l25):\n    '''\n    Write a function to get the difference of two sets.\n    '''\n    return list(set(l24).difference(l25))\ndef set_symmetric_difference(l26,l27):\n    '''\n    Write a function to get the symmetric difference of two sets.\n    '''\n    return list(set(l26).symmetric_difference(l27))\ndef set_is_subset(l28,l29):\n    '''\n    Write a function to check if a set is a subset of another set.\n    '''\n    return l29.issubset(l28)\ndef set_is_superset(l30,l31):\n    '''\n    Write a function to check if a set is a superset of another set.\n    '''\n    return l30.issuperset(l31)\ndef set_is_disjoint(l32,l33):\n    '''\n    Write a function to check if two sets have no intersection.\n    '''\n    return l32.isdisjoint(l33)\ndef set_remove_set(l34,l35):\n    '''\n    Write a function to remove a set from another set.\n    '''\n    return l35 - l34\ndef set_add_set(l36,l37):\n    '''\n    Write a function to add a set to another set.\n    '''\n    return l36 | l37\ndef remove_duplicate_from_list(l38):\n    '''\n    Write a function to remove the duplicates from a list.\n    '''\n    return list(dict.fromkeys(l38))\ndef remove_duplicate_from_string(l39):\n    '''\n    Write a function to remove the duplicates from a list.\n    '''\n    return list(set(l39))\ndef remove_duplicate_from"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:]+tuplex[:m]\ndef i_list(lst,i):\n    '''\n    Write a function to return a list of a single item.\n    '''\n    return [lst[i]]\ndef zip_list(lst1,lst2):\n    '''\n    Write a function to combine two lists into a dictionary with keys as the index.\n    '''\n    return {i:lst1[i] for i in range(len(lst1))}\ndef find_word(word,lst):\n    '''\n    Write a function to find a word in a list, and return the index.\n    '''\n    return lst.index(word)\ndef mean_list(lst):\n    '''\n    Write a function to calculate the mean of a list of numbers.\n    '''\n    return sum(lst)/len(lst)\ndef mode_list(lst):\n    '''\n    Write a function to return the mode of a list of numbers.\n    '''\n    return max(set(lst),key=lst.count)\ndef median_list(lst):\n    '''\n    Write a function to return the median of a list of numbers.\n    '''\n    if len(lst)%2==0:\n        return (lst[len(lst)/2]+lst[(len(lst)/2)-1])/2\n    else:\n        return lst[len(lst)/2]\ndef set_list(lst):\n    '''\n    Write a function to return a set of all the unique elements in a list.\n    '''\n    return set(lst)\ndef reverse_list(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    return lst[::-1]\ndef sort_list(lst):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(lst)\ndef max_list(lst):\n    '''\n    Write a function to return the max of a list.\n    '''\n    return max(lst)\ndef min_list(lst):\n    '''\n    Write a function to return the min of a list.\n    '''\n    return min(lst)\ndef div_list(lst,i):\n    '''\n    Write a function to divide a list by a number.\n    '''\n    return [n/i for n in lst]\ndef test_count(func,lst):\n    '''\n    Write a function to test a count function on a list.\n    '''\n    return func(lst)==len(lst)\ndef test_index(func,lst):\n    '''\n    Write a function to test an index function on a list.\n    '''\n    return func(lst) in range(len(lst))\ndef test_search(func,lst):\n    '''\n    Write a function to test a search function on a list.\n    '''\n    return func(lst) in lst\ndef test_sort(func,lst):\n    '''\n    Write a function to test a sort function on a list.\n    '''\n    return func(lst)==sorted(lst)\ndef test_max(func,lst):\n    '''\n    Write a function to test a max function on a list.\n    '''\n    return func(lst)==max(lst)\ndef test_min(func,lst):\n    '''\n    Write a function to test a min function on a list.\n    '''\n    return func(lst)==min(lst)\ndef test_list(func,lst):\n    '''\n    Write a function to test a function on a list.\n    '''\n    return func(lst)==lst\ndef test_tuplex(func,tuplex):\n    '''\n    Write a function to test a tuple function on a tuple.\n    '''\n    return func(tuplex)==tuplex\ndef test_find(func,lst):\n    '''\n    Write a function to test a find function on a list.\n    '''\n    return func(lst) in lst\ndef test_i_list(func,i):\n    '''\n    Write a function to test an i list function on a list.\n    '''\n    return func(i_list(lst,i))==i_list(lst,i)\ndef test_zip_list(func,lst1,lst2):\n    '''\n    Write a function to test a zip list function on two lists.\n    '''\n    return func(lst1,lst2)==zip_list(lst1,lst2)\ndef test_mean_list(func,lst):\n    '''\n    Write a function to test a mean list function on a list.\n    '''\n    return func(lst)==mean_list(lst)\ndef test_mode_list(func,lst):\n    '''\n    Write a function to test a mode list function on a list.\n    '''\n    return func(lst)==mode_list(lst)\ndef test_median_list(func,lst):\n    '''\n    Write a function to test a median list function on a list.\n    '''\n    return func(lst)==median_list(lst)\ndef test_set_list(func,lst):\n    '''\n    Write a function to test a set list function on a list.\n    '''\n    return func(lst)==set_list(lst)\ndef test_reverse_list(func,lst):\n    '''\n    Write a function to test a reverse list function on a list.\n    '''\n    return func(lst)==reverse_list(lst)\ndef test_sort_list(func,lst):\n    '''\n    Write a function to test a sort list function on a list.\n    '''\n    return func(lst)==sort_list(lst)\ndef test_max_list(func,lst):\n    '''\n    Write a function to test a max list function on a list.\n    '''\n    return func(lst)==max_list(lst)\ndef test_min_list(func,lst):\n    '''\n    Write a function to test a min list function on a list.\n    '''\n    return func(lst)==min_list(lst)\ndef test_div_list(func,lst,i):\n    '''\n    Write a function to test a div list function on a list.\n    '''\n    return func(lst,i)==div_list(lst,i)\ndef test_count(func,lst):\n    '''\n    Write a function to test a count function on a list.\n    '''\n    return func(lst)==len(lst)\ndef test_index(func,lst):\n    '''\n    Write a function to test an index function on a list.\n    '''\n    return func(lst) in range(len(lst))\ndef test_search(func,lst):\n    '''\n    Write a function to test a search function on a list.\n    '''\n    return func(lst) in lst\ndef test_sort(func,lst):\n    '''\n    Write a function to test a sort function on a list.\n    '''\n    return func(lst)==sorted(lst)\ndef test_max(func,lst):\n    '''\n    Write a function to test a max function on a list.\n    '''\n    return func(lst)==max(lst)\ndef test_min(func,lst):\n    '''\n    Write a function to test a min function on a list.\n    '''\n    return func(lst)==min(lst)\ndef test_list(func,lst):\n    '''\n    Write a function to test a function on a list.\n    '''\n    return func(lst)==lst\ndef test_tuplex(func,tuplex):\n    '''\n    Write a function to test a tuple function on a tuple.\n    '''\n    return func(tuplex)==tuplex\ndef test_find(func,lst):\n    '''\n    Write a function t"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = ()\n    for i in range(len(tuplex)):\n        if i%m == 0:\n            result = result + (tuplex[i],)\n        elif i%n == 0:\n            result = result + (tuplex[i],)\n        else:\n            result = result + (tuplex[i],)\n    return result\ndef get_middle(tuplex):\n    '''\n    Write a function to get the middle item of a tuple.\n    '''\n    return tuplex[int(len(tuplex)/2)]\ndef get_middle_index(tuplex):\n    '''\n    Write a function to get the middle item of a tuple using index.\n    '''\n    return tuplex[int(len(tuplex)/2)]\ndef copy_tuplex(tuplex):\n    '''\n    Write a function to copy a tuple.\n    '''\n    return tuplex[:]\ndef remove_middle(tuplex):\n    '''\n    Write a function to remove the middle item of a tuple.\n    '''\n    return tuplex[:int(len(tuplex)/2)] + tuplex[int(len(tuplex)/2)+1:]\ndef remove_middle_index(tuplex):\n    '''\n    Write a function to remove the middle item of a tuple using index.\n    '''\n    return tuplex[:int(len(tuplex)/2)] + tuplex[int(len(tuplex)/2)+1:]\ndef reverse_tuplex(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef reverse_tuplex_index(tuplex):\n    '''\n    Write a function to reverse a tuple using index.\n    '''\n    return tuplex[::-1]\ndef mix_up_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to mix up a tuple.\n    '''\n    result = (tuplex2[0],tuplex1[0])\n    result = (tuplex2[1],tuplex1[1])\n    return result\ndef mix_up_tuplex_index(tuplex1,tuplex2):\n    '''\n    Write a function to mix up a tuple using index.\n    '''\n    result = (tuplex2[0],tuplex1[0])\n    result = (tuplex2[1],tuplex1[1])\n    return result\ndef sort_tuplex(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuplex.sort()\ndef sort_tuplex_index(tuplex):\n    '''\n    Write a function to sort a tuple using index.\n    '''\n    return tuplex.sort()\ndef insert_index(tuplex,item,index):\n    '''\n    Write a function to insert an item into a tuple using index.\n    '''\n    return tuplex[:index] + (item,) + tuplex[index:]\ndef insert_index_index(tuplex,item,index):\n    '''\n    Write a function to insert an item into a tuple using index.\n    '''\n    return tuplex[:index] + (item,) + tuplex[index:]\ndef get_last(tuplex):\n    '''\n    Write a function to get the last item of a tuple.\n    '''\n    return tuplex[-1]\ndef get_last_index(tuplex):\n    '''\n    Write a function to get the last item of a tuple using index.\n    '''\n    return tuplex[-1]\ndef copy_tuplex_item(tuplex,index):\n    '''\n    Write a function to copy the item of a tuple at a particular index.\n    '''\n    return tuplex[index]\ndef copy_tuplex_item_index(tuplex,index):\n    '''\n    Write a function to copy the item of a tuple at a particular index using index.\n    '''\n    return tuplex[index]\ndef reverse_tuplex_item(tuplex,index):\n    '''\n    Write a function to reverse the item of a tuple at a particular index.\n    '''\n    return tuplex[:index] + (tuplex[index][::-1],) + tuplex[index+1:]\ndef reverse_tuplex_item_index(tuplex,index):\n    '''\n    Write a function to reverse the item of a tuple at a particular index using index.\n    '''\n    return tuplex[:index] + (tuplex[index][::-1],) + tuplex[index+1:]\ndef change_tuplex(tuplex,index,item):\n    '''\n    Write a function to change the item of a tuple at a particular index.\n    '''\n    return tuplex[:index] + (item,) + tuplex[index+1:]\ndef change_tuplex_index(tuplex,index,item):\n    '''\n    Write a function to change the item of a tuple at a particular index using index.\n    '''\n    return tuplex[:index] + (item,) + tuplex[index+1:]\ndef delete_tuplex_item(tuplex,index):\n    '''\n    Write a function to delete the item of a tuple at a particular index.\n    '''\n    return tuplex[:index] + tuplex[index+1:]\ndef delete_tuplex_item_index(tuplex,index):\n    '''\n    Write a function to delete the item of a tuple at a particular index using index.\n    '''\n    return tuplex[:index] + tuplex[index+1:]\ndef get_tuple_len(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    return len(tuplex)\ndef get_tuple_len_index(tuplex):\n    '''\n    Write a function to get the length of a tuple using index.\n    '''\n    return len(tuplex)\ndef tuple_count(tuplex,item):\n    '''\n    Write a function to get the count of a particular item in a tuple.\n    '''\n    return tuplex.count(item)\ndef tuple_count_index(tuplex,item):\n    '''\n    Write a function to get the count of a particular item in a tuple using index.\n    '''\n    return tuplex.count(item)\ndef tuple_index(tuplex,item):\n    '''\n    Write a function to get the index of a particular item in a tuple.\n    '''\n    return tuplex.index(item)\ndef tuple_index_index(tuplex,item):\n    '''\n    Write a function to get the index of a particular item in a tuple using index.\n    '''\n    return tuplex.index(item)\ndef tuple_pop(tuplex,index):\n    '''\n    Write a function to remove an item from a tuple at a particular index.\n    '''\n    return tuplex[:index] + tuplex[index+1:]\ndef tuple_pop_index(tuplex,index):\n    '''\n    Write a function to remove an item from a tuple at a particular index using index.\n    '''\n    return tuplex[:index] + tuplex[index+1:]\ndef tuple_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuplex.sort()\ndef tuple_sort_index(tuplex):\n    '''\n    Write a function to sort a tuple using index.\n    '''\n    return tuplex.sort()\ndef insert_tuplex(tuplex,item,index):\n    '''\n    Write a function to insert an item into a tuple at a particular index.\n    '''\n    return tuplex[:index] + (item,) + tuplex[index:]\ndef insert_tuplex_index(tuplex,item,index):\n    '''\n    Write a function to insert an item into a tuple at a particular index using index.\n    '"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][n])\n    return result\ndef tuple_tcolon(tuplex,m,n):\n    '''\n    Write a function to get a tuple of the column in a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][n])\n    return tuple(result)\ndef tuple_slice(tuplex,m,n,s,e):\n    '''\n    Write a function to get a tuple slice in a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][n][s:e])\n    return result\ndef transpose_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a transpose of a tuple.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuple_tcolon(tuplex,m,i))\n    return result\ndef tuple_ltranspose(tuplex,m,n):\n    '''\n    Write a function to get a tuple of a left transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuple_tcolon(tuplex,m,i))\n    return tuple(result)\ndef matrix_tuple(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuple_tcolon(tuplex,n,i))\n    return tuple(result)\ndef matrix_ltranspose(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a left transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuple_tcolon(tuplex,m,i))\n    return tuple(result)\ndef matrix_slice(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix slice in a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuple_slice(tuplex,n,i,s,e))\n    return tuple(result)\ndef matrix_rtranspose(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a right transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuple_tcolon(tuplex,m,i))\n    return tuple(result)\ndef matrix_slct(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix of a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuple_slice(tuplex,n,i,s,e))\n    return tuple(result)\ndef matrix_rslct(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix of a right tuple.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuple_slice(tuplex,m,i,s,e))\n    return tuple(result)\ndef matrix_slice2(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix slice in a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][s:e])\n    return tuple(result)\ndef matrix_ltranspose2(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a left transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][:])\n    return tuple(result)\ndef matrix_rtranspose2(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a right transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][m-1::-1])\n    return tuple(result)\ndef matrix_slct2(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix of a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][s:e])\n    return tuple(result)\ndef matrix_rslct2(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix of a right tuple.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][s:e])\n    return tuple(result)\ndef matrix_slice3(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix slice in a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][s:e:2])\n    return tuple(result)\ndef matrix_ltranspose3(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a left transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][:])\n    return tuple(result)\ndef matrix_rtranspose3(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a right transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][m-1::-1])\n    return tuple(result)\ndef matrix_slice4(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix of a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][s:e:2])\n    return tuple(result)\ndef matrix_ltranspose4(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a left transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][:])\n    return tuple(result)\ndef matrix_rtranspose4(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a right transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][m-1::-1])\n    return tuple(result)\ndef matrix_slice5(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix of a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][s:e:2])\n    return tuple(result)\ndef matrix_ltranspose5(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a left transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][:])\n    return tuple(result)\ndef matrix_rtranspose5(tuplex,m,n):\n    '''\n    Write a function to get a matrix of a right transpose.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(tuplex[i][m-1::-1])\n    return tuple(result)\ndef matrix_slice6(tuplex,m,n,s,e):\n    '''\n    Write a function to get a matrix of a tuple.\n    '''\n    result=[]\n    for i in range(m):\n        result.append(tuplex[i][s:e:2])\n    return tupl"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_length=len(tuplex)\n    \n    if tuplex_length%n!=0:\n        return None\n    else:\n        colon_length=int(tuplex_length/n)\n    \n    tuple_list=[]\n    for i in range(0,tuplex_length,colon_length):\n        tuple_list.append(tuplex[i:i+colon_length])\n    \n    return tuple_list\n    \ndef split_word(word,n):\n    '''\n    Write a function to split a word into equal length.\n    '''\n    word_length=len(word)\n    \n    if word_length%n!=0:\n        return None\n    else:\n        split_length=int(word_length/n)\n    \n    split_list=[]\n    for i in range(0,word_length,split_length):\n        split_list.append(word[i:i+split_length])\n    \n    return split_list\n    \ndef tuple_insert(tuple_list,n,colon):\n    '''\n    Write a function to insert a tuple in a list of tuple.\n    '''\n    tuple_length=len(tuple_list)\n    \n    if tuple_length%n!=0:\n        return None\n    else:\n        insert_length=int(tuple_length/n)\n    \n    for i in range(0,tuple_length,insert_length):\n        tuple_list.insert(i,tuple_list[i]+colon)\n    \n    return tuple_list\n    \ndef print_tuple_list(tuple_list,n):\n    '''\n    Write a function to print a tuple list.\n    '''\n    tuple_length=len(tuple_list)\n    \n    if tuple_length%n!=0:\n        return None\n    else:\n        print_length=int(tuple_length/n)\n    \n    for i in range(0,tuple_length,print_length):\n        print(tuple_list[i:i+print_length])\n    \n    return tuple_list\n    \ndef tuple_index(tuple_list,index):\n    '''\n    Write a function to get a tuple by index.\n    '''\n    tuple_length=len(tuple_list)\n    \n    if tuple_length%index!=0:\n        return None\n    else:\n        return tuple_list[index]\n    \ndef tuple_delete(tuple_list,index):\n    '''\n    Write a function to delete a tuple by index.\n    '''\n    tuple_length=len(tuple_list)\n    \n    if tuple_length%index!=0:\n        return None\n    else:\n        tuple_list.pop(index)\n    \n    return tuple_list\n    \ndef tuple_slice(tuple_list,start_index,end_index):\n    '''\n    Write a function to slice a tuple list.\n    '''\n    tuple_length=len(tuple_list)\n    \n    if tuple_length%(end_index-start_index)!=0:\n        return None\n    else:\n        return tuple_list[start_index:end_index]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m],tuplex[m+n-1]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\ndef colon_list(lst,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    return lst[m:n]\ndef colon_str(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    return s[m:n]\ndef remove_n(lst,n):\n    '''\n    Write a function to remove the first n elements from a list.\n    '''\n    return lst[n:]\ndef remove_m(lst,m):\n    '''\n    Write a function to remove the last m elements from a list.\n    '''\n    return lst[:-m]\ndef remove_element(lst,x):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    lst.remove(x)\n    return lst\ndef reverse(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    return lst[::-1]\ndef concatenate(lst1,lst2):\n    '''\n    Write a function to concatenate two lists.\n    '''\n    return lst1+lst2\ndef max_in_list(lst):\n    '''\n    Write a function to get the maximum element from a list.\n    '''\n    return max(lst)\ndef min_in_list(lst):\n    '''\n    Write a function to get the minimum element from a list.\n    '''\n    return min(lst)\ndef nth_last(lst,n):\n    '''\n    Write a function to get the nth last element from a list.\n    '''\n    return lst[-n]\ndef append_nth(lst,n,item):\n    '''\n    Write a function to append an item to a list at the nth position.\n    '''\n    return lst[:n]+[item]+lst[n:]\ndef concatenate_list(lst1,lst2):\n    '''\n    Write a function to concatenate two lists.\n    '''\n    return lst1+lst2\ndef slice_list(lst,m,n):\n    '''\n    Write a function to slice a list.\n    '''\n    return lst[m:n]\ndef count_vowels(s):\n    '''\n    Write a function to count the vowels in a string.\n    '''\n    vowels=0\n    for l in s:\n        if l in ['a','e','i','o','u']:\n            vowels+=1\n    return vowels\ndef append_list(lst,n):\n    '''\n    Write a function to append a list at the nth position.\n    '''\n    return lst[:n]+[lst[n:]]\ndef count_occurrences(lst,x):\n    '''\n    Write a function to count the occurrences of x in a list.\n    '''\n    return lst.count(x)\ndef count_char(lst,x):\n    '''\n    Write a function to count the occurrences of x in a list.\n    '''\n    return lst.count(x)\ndef middle_element(lst):\n    '''\n    Write a function to get the middle element in a list.\n    '''\n    return lst[len(lst)/2]\ndef sort_list(lst):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(lst)\ndef append_value(lst,value):\n    '''\n    Write a function to append a value to a list.\n    '''\n    lst.append(value)\n    return lst\ndef remove_value(lst,value):\n    '''\n    Write a function to remove a value from a list.\n    '''\n    lst.remove(value)\n    return lst\ndef element_at_index(lst,index):\n    '''\n    Write a function to get an element at an index.\n    '''\n    return lst[index]\ndef append_list(lst1,lst2):\n    '''\n    Write a function to append a list to another list.\n    '''\n    return lst1+lst2\ndef set_nth(lst,n,item):\n    '''\n    Write a function to set the nth element to a new item.\n    '''\n    return lst[:n]+[item]+lst[n+1:]\ndef max_in_list(lst):\n    '''\n    Write a function to get the maximum element from a list.\n    '''\n    return max(lst)\ndef min_in_list(lst):\n    '''\n    Write a function to get the minimum element from a list.\n    '''\n    return min(lst)\ndef reverse_list(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    return lst[::-1]\ndef sort_list(lst):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(lst)\ndef check_list(lst):\n    '''\n    Write a function to check if a list is sorted or not.\n    '''\n    return lst==sorted(lst)\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n==0 or n==1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef get_digit(num,n):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    return num//10**n%10\ndef get_nth_digit(num,n):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    return num%10**(n+1)//10**n\ndef count_t(lst):\n    '''\n    Write a function to count the number of times a value appears in a list.\n    '''\n    return lst.count(lst)\ndef remove_index(lst,i):\n    '''\n    Write a function to remove the i-th element from a list.\n    '''\n    return lst[:i]+lst[i+1:]\ndef get_min(lst):\n    '''\n    Write a function to get the minimum element from a list.\n    '''\n    return min(lst)\ndef get_max(lst):\n    '''\n    Write a function to get the maximum element from a list.\n    '''\n    return max(lst)\ndef remove_last(lst):\n    '''\n    Write a function to remove the last element from a list.\n    '''\n    return lst[:-1]\ndef remove_first(lst):\n    '''\n    Write a function to remove the first element from a list.\n    '''\n    return lst[1:]\ndef count_vowels(s):\n    '''\n    Write a function to count the vowels in a string.\n    '''\n    vowels=0\n    for l in s:\n        if l in ['a','e','i','o','u']:\n            vowels+=1\n    return vowels\ndef get_column(lst,n):\n    '''\n    Write a function to get the nth column of a list.\n    '''\n    return [row[n] for row in lst]\ndef swap_columns(lst,m,n):\n    '''\n    Write a function to swap two columns of a list.\n    '''\n    temp=lst[m]\n    lst[m]=lst[n]\n    lst[n]=temp\n    return lst\ndef swap_rows(lst,m,n):\n    '''\n    Write a function to swap two rows of a list.\n    '"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, nums1[:N]) * reduce(mul, nums2[:N])\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    biggest = []\n    for i in range(N):\n        biggest.append(max(nums1[i], nums2[i]))\n    return biggest\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def product(list):\n        answer = 1\n        for x in list:\n            answer *= x\n        return answer\n    if N < 0:\n        return 0\n    if len(nums1) < 1 or len(nums2) < 1:\n        return 0\n    prod = []\n    for x in range(0,N):\n        prod.append(product(nums1[x%len(nums1)]))\n    return prod\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    num1 = nums1\n    num2 = nums2\n    n = N\n    if len(num1) > len(num2):\n        num1, num2 = num2, num1\n    num1_temp = num1[0:n]\n    num2_temp = num2[0:n]\n    num1_temp.sort()\n    num2_temp.sort()\n    if num1_temp[0] > num2_temp[0]:\n        return [num1_temp[0]*num2_temp[0], num1_temp[0]*num2_temp[1], num1_temp[0]*num2_temp[2], num1_temp[0]*num2_temp[3], num1_temp[0]*num2_temp[4]]\n    else:\n        return [num2_temp[0]*num1_temp[0], num2_temp[0]*num1_temp[1], num2_temp[0]*num1_temp[2], num2_temp[0]*num1_temp[3], num2_temp[0]*num1_temp[4]]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in xrange(N):\n        factor1 = max(nums1)\n        index1 = nums1.index(factor1)\n        factor2 = max(nums2)\n        index2 = nums2.index(factor2)\n        res.append(factor1 * factor2)\n        nums1.remove(factor1)\n        nums2.remove(factor2)\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #return [max(x, y) for x, y in zip(nums1, nums2)]\n    res = [1] * N\n    for i in xrange(N):\n        for j in xrange(N):\n            res[i] = max(res[i], nums1[i]*nums2[j])\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    nums1.sort()\n    nums2.sort()\n    results = []\n    for _ in range(N):\n        if nums1[-1] * nums2[-1] > nums1[-2] * nums2[-2]:\n            results.append(nums1[-1] * nums2[-1])\n        else:\n            results.append(nums1[-2] * nums2[-2])\n    return results\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import functools\n    def small_product(nums1, nums2, N):\n        products = [functools.reduce(lambda x, y: x * y, (nums1[i], nums2[i])) for i in range(N)]\n        return max(products)\n    return small_product(nums1, nums2, N) if len(nums1) * len(nums2) >= N else large_product(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    arr1 = []\n    arr2 = []\n    for i in range(0, n):\n        arr1.append(nums1[i] * nums2[i])\n    for i in range(0, n):\n        arr2.append(nums1[i] * nums2[i])\n    arr1.sort()\n    arr2.sort()\n    arr3 = arr1[n - 1]\n    arr4 = arr2[m - 1]\n    for i in range(0, N):\n        if arr3 < arr4:\n            arr4 = arr2[m - 1]\n            arr2.pop()\n            m -= 1\n        elif arr3 > arr4:\n            arr3 = arr1[n - 1]\n            arr1.pop()\n            n -= 1\n        else:\n            arr4 = arr2[m - 1]\n            arr2.pop()\n            m -= 1\n            arr3 = arr1[n - 1]\n            arr1.pop()\n            n -= 1\n    return arr3, arr4\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1:\n        return nums2\n    elif not nums2:\n        return nums1\n    nums1.sort()\n    nums2.sort()\n    print nums1\n    print nums2\n    result = []\n    i = 0\n    while i < N:\n        result.append(nums1[i] * nums2[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef product(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a*b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \ndef find_the_maximum():\n    '''\n    Write a python function to find the maximum of 3 numbers.\n    '''\n    num1,num2,num3 = map(int,raw_input().split())\n    print maximum(num1,num2)\n    print maximum(num1,num3)\n    print maximum(num2,num3)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1 = ()\n    tup1 = tuple(str1)\n    return tup1\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = []\n    for i in range(len(str1)):\n        res.append(str1[i])\n    return tuple(res)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    li1 = []\n    for i in str1:\n        li1.append(i)\n    return tuple(li1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = []\n    for i in str1:\n        result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = tuple()\n    for i in str1:\n        tup = tup + (i,)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1\n    j = 1\n    while i <= n:\n        j = i\n        i = i << 1\n    return j\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bits = int(math.log(n, 2)) + 1\n    n &= ~(1 << set_bits)\n    n = n | (1 << set_bits - 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n ^ (1<<(len(bin(n))-2)) \n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & (n - 1))\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #If n is negative, reverse it and add 1. \n    n = n if n >= 0 else ((~n) & 0xffffffff) + 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~(n & 1)\n    n |= (1 << 0)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = 1 << (n - 1)\n    return set_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # if the last bit is 1, we just return the number\n    if n & 1 == 1:\n        return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        return -left_most_set_bit(n)\n    return n | (1 << (n.bit_length() - 1))\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return int(bin(n & (~(1 << len(bin(n)[2:])) - 1)), 2)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3.0*math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r**2 * h)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #First, I need to calculate the height of the cone\n    vol = math.pi/3 * (r**2) * h\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=math.pi*(r**2)*h/3\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3.0\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    try:\n        return (1/3.0)*(math.pi)*(r**2)*h\n    except TypeError:\n        return -1\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v= math.pi*(r**2)*h/3\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=(math.pi*(r**2))*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= 4/3*math.pi*(r**3)\n    return v\ndef volume_cylinde"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi/3*r**2*h\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4*math.pi*r**3/3\n    return volume\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r**2*h\n    return volume\n    \ndef volume_prism(r,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume=math.pi*r**2*h/3\n    return volume\n    \ndef volume_cuboid(r,h,l):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume=r*h*l\n    return volume\n    \ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=math.pi*r**2*h/3\n    return volume\n    \ndef volume_tetrahedron(r,h):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    volume=math.pi*r**2*h/4\n    return volume\n    \ndef volume_rectangular_prism(r,l,b):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume=r*l*b\n    return volume\n    \ndef volume_cuboid_parallelepiped(r,l,b):\n    '''\n    Write a function to find the volume of a cuboid-parallelepiped.\n    '''\n    volume=r*l*b/2\n    return volume\n    \ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere.\n    '''\n    volume=math.pi/3*r**2*h\n    return volume\n    \ndef volume_tetrahedron_sphere(r,h):\n    '''\n    Write a function to find the volume of a tetrahedron-sphere.\n    '''\n    volume=math.pi*r**2*h/4\n    return volume\n    \ndef volume_octahedron(r):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    volume=r**3/2\n    return volume\n    \ndef volume_dodecahedron(r):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    volume=r**3/10\n    return volume\n    \ndef volume_icosahedron(r):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    volume=r**3/20\n    return volume\n    \ndef volume_icosidodecahedron(r):\n    '''\n    Write a function to find the volume of a icosidodecahedron.\n    '''\n    volume=r**3*3/110\n    return volume\n    \ndef volume_pyramid_tetrahedron(r,h):\n    '''\n    Write a function to find the volume of a pyramid-tetrahedron.\n    '''\n    volume=r*h**2/3\n    return volume\n    \ndef volume_pyramid_hexaedron(r,h):\n    '''\n    Write a function to find the volume of a pyramid-hexaedron.\n    '''\n    volume=r*h**2/4\n    return volume\n    \ndef volume_dodecahedron_tetrahedron(r,h):\n    '''\n    Write a function to find the volume of a dodecahedron-tetrahedron.\n    '''\n    volume=r**2*h**2/4\n    return volume\n    \ndef volume_icosidodecahedron_tetrahedron(r,h):\n    '''\n    Write a function to find the volume of a icosidodecahedron-tetrahedron.\n    '''\n    volume=r**2*h**2/8\n    return volume\n    \ndef volume_icosidodecahedron_hexaedron(r,h):\n    '''\n    Write a function to find the volume of a icosidodecahedron-hexaedron.\n    '''\n    volume=r**2*h**2*3/60\n    return volume\n    \ndef volume_tetrahedron_pyramid(r,h):\n    '''\n    Write a function to find the volume of a tetrahedron-pyramid.\n    '''\n    volume=r*h**2/4\n    return volume\n    \ndef volume_hexaedron_pyramid(r,h):\n    '''\n    Write a function to find the volume of a hexaedron-pyramid.\n    '''\n    volume=r*h**2/6\n    return volume\n    \ndef volume_octahedron_pyramid(r,h):\n    '''\n    Write a function to find the volume of a octahedron-pyramid.\n    '''\n    volume=r*h**2/8\n    return volume\n    \ndef volume_dodecahedron_pyramid(r,h):\n    '''\n    Write a function to find the volume of a dodecahedron-pyramid.\n    '''\n    volume=r*h**2/12\n    return volume\n    \ndef volume_icosidodecahedron_pyramid(r,h):\n    '''\n    Write a function to find the volume of a icosidodecahedron-pyramid.\n    '''\n    volume=r*h**2/24\n    return volume\n    \ndef volume_icosidodecahedron_hexaedron(r,h):\n    '''\n    Write a function to find the volume of a icosidodecahedron-hexaedron.\n    '''\n    volume=r*h**2/60\n    return volume\n    \ndef volume_octaedron_pyramid(r,h):\n    '''\n    Write a function to find the volume of a octaedron-pyramid.\n    '''\n    volume=r*h**2/8\n    return volume\n    \ndef volume_tetrahedron_icosahedron(r,h):\n    '''\n    Write a function to find the volume of a tetrahedron-icosahedron.\n    '''\n    volume=r*h**2/6\n    return volume\n    \ndef volume_octahedron_icosahedron(r,h):\n    '''\n    Write a function to find the volume of a octahedron-icosahedron.\n    '''\n    volume=r*h**2/8\n    return volume\n    \ndef volume_dodecahedron_icosahedron(r,h):\n    '''\n    Write a function to find the volume of a dodecahedron-icosahedron.\n    '''\n    volume=r*h**2/12\n    return volume\n    \ndef volume_icosidodecahedron_icosahedron(r,h):\n    '''\n    Write a function to find the volume of a icosidodecahedron-icosahedron.\n    '''\n    volume=r**2*h**2/24\n    return volume\n    \ndef volume_icosidodecahedron_hexaedron(r,h):\n    '''\n    Write a function to find the volume of a icosidodecahedron-hexaedron.\n    '''\n    volume=r**2*h**2*3/120\n    return volume\n    \ndef volume_icosidodecahedron_octaedron(r,h):\n    '''\n    Write a function to find the volume of a icosidodecahedron-octaedron.\n    '''\n    volume=r**2*h**2/24\n    return volume\n    \ndef volume_icosidodecahedron_tetrahedron(r,h):\n    '''\n    Write a function to find the volume of a icosidodecahedron-tetrahedron.\n    ''"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    i = 0\n    while(n/2**i > 0): \n        i = i + 1\n    return 2**(i-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    i = 1\n    p = 1\n    while (p <= n):\n        i *= 2\n        p = 2**i\n    return i/2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    i=1\n    while i<=n:\n        i=i*2\n    return i/2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the power\n    power = 0\n    while True:\n        if pow(2, power) <= n:\n            return pow(2, power)\n        power += 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return i-1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(math.log(n,2))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**np.floor(np.log2(n)))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high = 1\n    while high <= n: \n        high = high << 1\n    return high\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(math.log(n, 2))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while p<=n:\n        p = p<<1\n    return p\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n-1):\n        a, b = b, (a + b)\n    return b\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # n = n+1\n    # if (n-1)%2 == 0:\n    #     n = int(n/2)\n    # else:\n    #     n = int((n-1)/2)\n    # if n == 0:\n    #     return 2\n    # else:\n    #     return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n == 1:\n        return 2\n    \n    if n == 2:\n        return 3\n    \n    lucas = find_lucas(n - 1) + find_lucas(n - 2)\n    return lucas\n    \ndef find_lucas_2(n):\n    if n == 1:\n        return 2\n    \n    a, b = 2, 3\n    \n    for i in range(n-1):\n        a, b = b, a + b\n        \n    return a\n    \ndef find_lucas_3(n):\n    if n == 1:\n        return 2\n    \n    lucas_n_minus_1 = 2\n    lucas_n_minus_2 = 3\n    \n    for i in range(n-1):\n        lucas_n_minus_1, lucas_n_minus_2 = lucas_n_minus_2, lucas_n_minus_1 + lucas_n_minus_2\n        \n    return lucas_n_minus_1\n    \ndef fibonacci_r(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r_v2(n - 1) + fibonacci_r_v2(n - 2)\n    \ndef fibonacci_i_v2(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v3(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v3(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v4(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v5(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v5(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v6(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v6(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v7(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v7(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v8(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v8(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v9(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v9(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v10(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v10(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v11(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v11(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v12(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v12(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v13(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v13(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v14(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v14(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v15(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n    \ndef fibonacci_i_v15(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef fibonacci_r_v16(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return "
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_nums = [2,1]\n    for i in range(2,n+1):\n        lucas_nums.append(lucas_nums[-1] + lucas_nums[-2])\n    return lucas_nums[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % i for i in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i))\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(i, string) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Use list comprehension to apply format_string to all elements in list_\n    return [string % elem for elem in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(list_[x]) for x in range(len(list_))]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    output = \"\"\n    if list_ is None:\n        return None\n    for s in list_:\n        output += string\n    return output\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in range(len(list_)):\n        list_[i] = list_[i] + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    import collections\n    dictionary = collections.defaultdict(list)\n    for i, j, k in zip(l1, l2, l3):\n        dictionary[i].append((j, k))\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dictionary = {}\n    for key in l1:\n        l1_dictionary[key] = l1[key]\n    l2_dictionary = {}\n    for key in l2:\n        l2_dictionary[key] = l2[key]\n    l3_dictionary = {}\n    for key in l3:\n        l3_dictionary[key] = l3[key]\n    return {'l1': l1_dictionary, 'l2': l2_dictionary, 'l3': l3_dictionary}\n    \n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a new dictionary with empty lists\n    dictionary = {}\n    for i in range(len(l1)):\n        # Create a new list\n        dictionary[l1[i]] = []\n        for j in range(len(l2)):\n            dictionary[l1[i]].append([])\n            for k in range(len(l3)):\n                dictionary[l1[i]][j].append({})\n    # Fill up the new dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                dictionary[l1[i]][j][k] = l3[k]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {i[0]: dict(zip(l1,i[1:])) for i in zip(l2,l3)}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i] + l3[i]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i, j, k in zip(l1, l2, l3):\n        d1[i] = {j:k}\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    output = {}\n    for i in range(len(l1)):\n        output[l1[i]] = {l2[i]: l3[i]}\n    return output\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = l1[1:]\n    return zip(l1, l2, l3)\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(0, len(l1))}\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return n\n    if n%2==0:\n        return max(n+get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    if n%3==0:\n        return max(n+get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    if n%4==0:\n        return max(n+get_max_sum(n/4), get_max_sum(n/5))\n    return n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + 1\n    else:\n        return get_max_sum(n-1) + 1\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    if n == 1:\n        return 0\n    else:\n        for i in range(n//2, n):\n            max_sum = max(max_sum, get_max_sum(i) + get_max_sum(n-i))\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return get_max_sum(n/2)\n    if n % 3 == 0:\n        return get_max_sum(n/3)\n    if n % 4 == 0:\n        return get_max_sum(n/4)\n    return get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range(1, n+1):\n        res = max(res, get_max_sum(i/2) + get_max_sum(i/3) + get_max_sum(i/4) + get_max_sum(i/5))\n    return res\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    \n    return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n-1) + n\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    return_list = input_list[0]\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            return_list = i\n    return return_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(len(input_list), key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum_length = 0\n    maximum_list = []\n    for list_num in range(len(input_list)):\n        if len(input_list[list_num]) > maximum_length:\n            maximum_length = len(input_list[list_num])\n            maximum_list = input_list[list_num]\n    return maximum_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # code here\n    max_length = len(input_list[0])\n    for i in input_list:\n        if len(i)>max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        curr_len = len(input_list[i])\n        if curr_len > max_len:\n            max_len = curr_len\n            max_list = input_list[i]\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    index = 0\n    for i in range(len(input_list)):\n        if max_len < len(input_list[i]):\n            max_len = len(input_list[i])\n            index = i\n    return input_list[index]\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    list_tup = []\n    for item in test_tup:\n        if item in list_tup:\n            return False\n        else:\n            list_tup.append(item)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) > len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    result = all(test_list.count(e) == 1 for e in test_list)\n    return result\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = dict()\n    for i in str1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    char_dict = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) > 1:\n        for i in range(len(str1)):\n            if str1.count(str1[i]) == 1:\n                return str1[i]\n        return None\n    else:\n        return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_list = list(str1)\n    for i in xrange(len(str_list)):\n        if str_list.count(str_list[i]) == 1:\n            return str_list[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    dict1 = {}\n    for s in str1:\n        if s in dict1:\n            dict1[s] += 1\n        else:\n            dict1[s] = 1\n    for i in range(len(str1)):\n        if dict1[str1[i]] == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_frequency = {}\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    for char in str1:\n        if char_frequency[char] == 1:\n            return char\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for char in str1:\n        if char not in dict:\n            dict[char] = 1\n        else:\n            dict[char] += 1\n    for char in str1:\n        if dict[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    flag = True\n    for i in str1:\n        if str1.count(i) == 1:\n            flag = False\n            break\n    if flag:\n        return -1\n    else:\n        return i\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\nassert check_char('ab') == True\nassert check_char('Ab') == True\nassert check_char('abcd') == False\nassert check_char('abc') == False\nassert check_char('ab') == False\nassert check_char('Ab') == False\nassert check_char('b') == False\nassert check_char('bab') == True\nassert check_char('abc') == False\nassert check_char('abcdef') == False\nassert check_char('abcdefgh') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcd') == False\nassert check_char('abc') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcd') == False\nassert check_char('abc') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_char('abcdefghi') == False\nassert check_cha"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    return False\n    \n    \ndef compare_strings(str1,str2):\n    '''\n    Write a function to check whether two given strings are anagram or not.\n    '''\n    if check_char(str1) and check_char(str2):\n        return str1 == str2\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex, string) else False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # write your code here\n    if re.search(regex, string):\n        print \"Yes\"\n    else:\n        print \"No\"\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.lower()\n    if re.match(regex, string):\n        print \"Yes\"\n    else:\n        print \"No\"\n        \ndef check_char_2(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(r'^[a-z]$', string):\n        print \"Yes\"\n    else:\n        print \"No\"\n        \n        \ndef password_validation(string):\n    '''\n    Write a function to check whether the given string is a valid password or not.\n    \n    A valid password is a string which contains lowercase alphabets, uppercase alphabets, numbers, special characters.\n    \n    You may assume that the length of the string is in the range [6,20].\n    \n    Inorder to satisfy the above conditions, you may need to do the following checks to make sure that the string is valid:\n    \n    - At least one uppercase alphabet should be present.\n    \n    - At least one lowercase alphabet should be present.\n    \n    - At least one number should be present.\n    \n    - The string should not contain any spaces.\n    \n    - The string should not contain any special characters.\n    \n    \n    \n    '''\n    print re.search(r'[a-z]', string)\n    print re.search(r'[A-Z]', string)\n    print re.search(r'[0-9]', string)\n    print re.search(r'[@_!#$%^&*()<>?/\\|}{~:]', string)\n    \n    \ndef password_validation_2(string):\n    '''\n    Write a function to check whether the given string is a valid password or not.\n    \n    A valid password is a string which contains lowercase alphabets, uppercase alphabets, numbers, special characters.\n    \n    You may assume that the length of the string is in the range [6,20].\n    \n    Inorder to satisfy the above conditions, you may need to do the following checks to make sure that the string is valid:\n    \n    - At least one uppercase alphabet should be present.\n    \n    - At least one lowercase alphabet should be present.\n    \n    - At least one number should be present.\n    \n    - The string should not contain any spaces.\n    \n    - The string should not contain any special characters.\n    \n    \n    '''\n    if re.search(r'[a-z]', string):\n        print \"Yes\"\n    else:\n        print \"No\"\n    if re.search(r'[A-Z]', string):\n        print \"Yes\"\n    else:\n        print \"No\"\n    if re.search(r'[0-9]', string):\n        print \"Yes\"\n    else:\n        print \"No\"\n    if re.search(r'[@_!#$%^&*()<>?/\\|}{~:]', string):\n        print \"Yes\"\n    else:\n        print \"No\"\n        \n        \n        \ndef is_valid_vowel(string):\n    '''\n    Write a function to check whether the given string is a valid vowel or not.\n    \n    A valid vowel is a string which contains any vowel(a,e,i,o,u) in it.\n    \n    You may assume that the given string is a string.\n    \n    You may not use any built-in function to check whether a character is a vowel.\n    \n    Example:\n    \n    string = 'aeiou'\n    valid_vowel(string)\n    \n    \n    Output:\n    Yes\n    \n    string = 'aei'\n    valid_vowel(string)\n    \n    \n    Output:\n    No\n    \n    string = 'aeiouAEIOU'\n    valid_vowel(string)\n    \n    \n    Output:\n    Yes\n    \n    '''\n    if re.search(r'[a-z]', string):\n        print \"No\"\n    else:\n        print \"Yes\"\n        \ndef check_valid_vowel(string):\n    '''\n    Write a function to check whether the given string is a valid vowel or not.\n    \n    A valid vowel is a string which contains any vowel(a,e,i,o,u) in it.\n    \n    You may assume that the given string is a string.\n    \n    You may not use any built-in function to check whether a character is a vowel.\n    \n    Example:\n    \n    string = 'aeiou'\n    check_valid_vowel(string)\n    \n    \n    Output:\n    Yes\n    \n    string = 'aei'\n    check_valid_vowel(string)\n    \n    \n    Output:\n    No\n    \n    string = 'aeiouAEIOU'\n    check_valid_vowel(string)\n    \n    \n    Output:\n    Yes\n    \n    '''\n    string = string.lower()\n    if re.search(r'[a-z]', string):\n        print \"No\"\n    else:\n        print \"Yes\"\n        \n        \ndef is_valid_consonant(string):\n    '''\n    Write a function to check whether the given string is a valid consonant or not.\n    \n    A valid consonant is a string which contains any consonant(a,e,i,o,u) in it.\n    \n    You may assume that the given string is a string.\n    \n    You may not use any built-in function to check whether a character is a consonant.\n    \n    Example:\n    \n    string = 'aeiou'\n    is_valid_consonant(string)\n    \n    \n    Output:\n    Yes\n    \n    string = 'aei'\n    is_valid_consonant(string)\n    \n    \n    Output:\n    No\n    \n    string = 'aeiouAEIOU'\n    is_valid_consonant(string)\n    \n    \n    Output:\n    Yes\n    \n    '''\n    if re.search(r'[a-z]', string):\n        print \"No\"\n    else:\n        print \"Yes\"\n        \n        \ndef check_valid_consonant(string):\n    '''\n    Write a function to check whether the given string is a valid consonant or not.\n    \n    A valid consonant is a string which contains any consonant(a,e,i,o,u) in it.\n    \n    You may assume that the given string is a string.\n    \n    You may not use any built-in function to check whether a character is a consonant.\n    \n    Example:\n    \n    string = 'aeiou'\n    check_valid_consonant(string)\n    \n    \n    Output:\n    Yes\n    \n    string = 'aei'\n    check_valid_consonant(string)\n    \n    \n    Output:\n    No\n    \n    string = 'aeiouAEIOU'\n    check_valid_consonant(string)\n    \n    \n    Output:\n    Yes\n    \n    '''\n    string = string.lower()\n    if re.search(r'[a-z]', string):\n        print \"No\"\n    else:\n        print \"Yes\"\n        \n        \ndef is_valid_symbol(string):\n    '''\n    Write a function to check whether the given string is a valid symbol or not.\n    \n    A valid symbol is a string which contains any symbols(!@#$%^&*) in it.\n    \n    You may assume that the given string is a string.\n    \n    Example:\n    \n    string = '@#'\n    is_valid_symbol(string)\n    \n    \n    Output:\n    Yes\n    \n    string = '!@#$%^&*'\n    is_valid_symbol(string)\n    \n    \n    Output:\n    No\n    \n    '''\n    if re.search(r'[@_!#$%^&*()<>?/\\|}{~:]', string):\n        print \"Yes\"\n    else:\n        print \"No\"\n        \n        \ndef check_valid_symbol(strin"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif b > a:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n    else:\n        if a > c:\n            return c\n        elif b > c:\n            return c\n        else:\n            return a\n        \nprint(median_numbers(4,8,3))\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c or c<b<a:\n        return b\n    if a<c<b or b<c<a:\n        return c\n    if b<a<c or c<a<b:\n        return a\n    if b<c<a or a<c<b:\n        return b\n    if c<a<b or b<a<c:\n        return a\n    if c<b<a or a<b<c:\n        return c\n    \n    \ndef star():\n    '''\n    What does this do?\n    '''\n    for i in range(1,2):\n        print '*' * (2**i)\n        \ndef leapyear(a):\n    '''\n    Write a function that returns True if a is a leap year, and False otherwise\n    '''\n    if a%4==0:\n        if a%100==0:\n            if a%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef leapyear_true(a):\n    '''\n    Write a function that returns True if a is a leap year, and False otherwise\n    '''\n    if a%4==0:\n        if a%100==0:\n            if a%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef string_difference(a,b):\n    '''\n    Write a function that returns the difference between the lengths of two strings.\n    '''\n    return abs(len(a)-len(b))\n    \ndef string_difference_2(a,b):\n    '''\n    Write a function that returns the difference between the lengths of two strings.\n    '''\n    if len(a)==len(b):\n        return 0\n    elif len(a)>len(b):\n        return len(a)-len(b)\n    else:\n        return len(b)-len(a)\n    \ndef string_difference_3(a,b):\n    '''\n    Write a function that returns the difference between the lengths of two strings.\n    '''\n    if len(a)==len(b):\n        return 0\n    elif len(a)>len(b):\n        return len(a)-len(b)\n    else:\n        return len(b)-len(a)\n    \ndef string_difference_4(a,b):\n    '''\n    Write a function that returns the difference between the lengths of two strings.\n    '''\n    if len(a)==len(b):\n        return 0\n    elif len(a)>len(b):\n        return len(a)-len(b)\n    else:\n        return len(b)-len(a)\n    \ndef sum_of_squares(a):\n    '''\n    Write a function that takes a list of integers and returns the sum of the squares of the integers.\n    '''\n    total = 0\n    for i in range(len(a)):\n        total+=a[i]**2\n    return total\n    \ndef sum_of_squares_2(a):\n    '''\n    Write a function that takes a list of integers and returns the sum of the squares of the integers.\n    '''\n    return sum(i**2 for i in a)\n    \ndef sum_of_squares_3(a):\n    '''\n    Write a function that takes a list of integers and returns the sum of the squares of the integers.\n    '''\n    return sum(x**2 for x in a)\n    \ndef sum_of_squares_4(a):\n    '''\n    Write a function that takes a list of integers and returns the sum of the squares of the integers.\n    '''\n    return sum(map(lambda x: x**2, a))\n    \ndef first_letter(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_2(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_3(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_4(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_5(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_6(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_7(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_8(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_9(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_10(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_11(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_12(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_13(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_14(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_15(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_16(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_17(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_18(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_19(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_20(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_21(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_22(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_23(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_24(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_25(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0]\n    \ndef first_letter_26(a):\n    '''\n    Write a function that takes a string and returns the first letter.\n    '''\n    return a[0"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l=[a,b,c]\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2]+l[len(l)//2-1])/2\n    else:\n        return l[len(l)//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = sorted([a,b,c])\n    if len(x) % 2 == 0:\n        return (x[(len(x) // 2)] + x[(len(x) // 2) - 1]) / 2.0\n    else:\n        return x[len(x) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        if b >= c:\n            return b\n        elif c >= a:\n            return c\n        else:\n            return a\n    elif b >= a and b >= c:\n        if a >= c:\n            return a\n        elif c >= b:\n            return c\n        else:\n            return b\n    else:\n        if a >= b:\n            return a\n        elif b >= c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b and a > c):\n        return a\n    elif (b > a and b > c):\n        return b\n    elif (c > a and c > b):\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr = [a, b, c]\n    arr.sort()\n    return arr[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a>b) and (a>c):\n        return a\n    elif (b>a) and (b>c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = (a+b+c)/2\n    if x == int(x):\n        return int(x)\n    else:\n        return x\n    return median_numbers(a,b,c)\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/2.0\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # solution 1\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits(num)\n    return sum\n    '''\n    # solution 2\n    # return sum([int(i) for i in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        num_digits = []\n        while num > 0:\n            num_digits.append(num % 10)\n            num = num // 10\n        total += sum(num_digits)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum(map(int, str(i)))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_of_digits_helper(nums, total):\n        if not nums:\n            return total\n        return sum_of_digits_helper(nums[1:], total + nums[0])\n    return sum_of_digits_helper(nums, 0)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for i in nums:\n        result.append(sum(int(digit) for digit in str(i)))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum(int(j) for j in str(i))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        if num < 10:\n            total += num\n        else:\n            total += sum_of_digits(str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # return [sum([int(i) for i in str(x)]) for x in nums]\n    return [sum(map(int, [str(x) for x in nums]))]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        sum_of_digits = 0\n        while num:\n            sum_of_digits += num%10\n            num //= 10\n        total += sum_of_digits\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x^y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Please input tuples of the same length'\n    else:\n        return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    output = tuple(int(list1[i]) ^ int(list2[i]) for i in range(len(list1)))\n    return output\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(test_tup1[i] ^ test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    new_tup1 = list()\n    new_tup2 = list()\n    new_tup3 = list()\n    \n    for tup in test_tup1:\n        new_tup1.append(tup[0])\n    for tup in test_tup2:\n        new_tup2.append(tup[1])\n    \n    for ele in new_tup1:\n        if ele in new_tup2:\n            new_tup3.append((ele, ele))\n        else:\n            new_tup3.append((ele, '0'))\n    \n    for ele in new_tup2:\n        if ele in new_tup1:\n            new_tup3.append((ele, ele))\n        else:\n            new_tup3.append((ele, '0'))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x^y for (x,y) in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def unique_tuples(list_):\n        return len(set(zip(list_[0], list_[1])))\n    return unique_tuples(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your Code Here\n    freq_list = {}\n    for item in test_list:\n        freq_list[item] = freq_list.get(item,0) + 1\n    return len(freq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    frequency = {}\n    for element in test_list:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    seen = set()\n    for item in test_list:\n        key = item\n        if key not in seen:\n            seen.add(key)\n    return len(seen)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item,0) + 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(tuple(l) for l in test_list))\n    return len(set([tuple(l) for l in test_list]))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # use a set to store the unique tuples\n    unique_list = set()\n    for sublist in test_list:\n        unique_list.add(tuple(sublist))\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for elem in test_list:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return len(freq.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def extract_freq_helper(nums):\n        if nums == []:\n            return 0, []\n        if len(nums) == 1:\n            return 1, [nums]\n        first, rest = nums[0], nums[1:]\n        count, tail = extract_freq_helper(rest)\n        tail.append(first)\n        return count + 1, tail\n    total, result = extract_freq_helper(test_list)\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([x + y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Your Code Here\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup += (test_tup1[i] + test_tup2[i],)\n    return res_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup_add = ()\n    for i in range(len(test_tup1)):\n        tup_add += (test_tup1[i] + test_tup2[i],)\n    return tup_add\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) and not isinstance(test_tup2, tuple):\n        return (test_tup1 + test_tup2)\n    elif isinstance(test_tup1, tuple) and not isinstance(test_tup2, tuple):\n        return (test_tup1 + (test_tup2,))\n    elif not isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        return (test_tup2 + (test_tup1,))\n    else:\n        return (test_tup1 + test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] + test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple)\n    return tuple([x+y for x,y in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([x + y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i] + test_tup2[i]) % 11)\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        longer_tup = test_tup1\n        shorter_tup = test_tup2\n    else:\n        longer_tup = test_tup2\n        shorter_tup = test_tup1\n    lst = []\n    for index in range(len(longer_tup)):\n        lst.append(longer_tup[index] + shorter_tup[index])\n    return tuple(lst)\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef compute_average(numbers):\n    '''\n    Write a function that computes the average of a list of numbers.\n    '''\n    average = sum(numbers)/len(numbers)\n    return average\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print 'True'\n    else:\n        print 'False'\ncheck_tuplex((1,2,3),(1,2,3))"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n    \ndef test_check_tuplex():\n    '''\n    A test function to check the correctness of the previous function.\n    '''\n    assert check_tuplex((1,2,3,4,5),(2,)) == True\n    assert check_tuplex((1,2,3,4,5),(6,)) == False\n    assert check_tuplex((1,2,3,4,5),(1,)) == True\n    assert check_tuplex((1,2,3,4,5),(1,2)) == True\n    assert check_tuplex((1,2,3,4,5),(1,2,3,4,5)) == True\n    assert check_tuplex((1,2,3,4,5,6),(1,2,3,4,5)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) == 1:\n        print(tuplex)\n        print(tuple1)\n    else:\n        print('Not found')\n        \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex==tuple1: \n        return True\n    else: \n        return False\n        \ndef tuple_check(tuplex):\n    '''\n    Return True if any element is True within the given tuple.\n    '''\n    for elem in tuplex:\n        if elem==True:\n            return True\n    return False\n    \ndef all_the_same(tuplex):\n    '''\n    Write a function that takes a tuple and returns True if all the elements are the same and False if not.\n    '''\n    for elem in tuplex:\n        if elem!=tuplex[0]:\n            return False\n    return True\n        \ndef tuple_count(tuplex):\n    '''\n    Write a function to return the count of a tuple.\n    '''\n    return len(tuplex)\n    \ndef tuple_max(tuplex):\n    '''\n    Write a function to return the max value of a tuple.\n    '''\n    return max(tuplex)\n    \ndef tuple_min(tuplex):\n    '''\n    Write a function to return the min value of a tuple.\n    '''\n    return min(tuplex)\n    \ndef tuple_sum(tuplex):\n    '''\n    Write a function to return the sum of a tuple.\n    '''\n    return sum(tuplex)\n    \ndef tuple_avg(tuplex):\n    '''\n    Write a function to return the average value of a tuple.\n    '''\n    return sum(tuplex)/len(tuplex)\n    \ndef make_words(word):\n    '''\n    Write a function to return a tuple of all the possible combinations of the letters in the word.\n    '''\n    return tuple(itertools.combinations(word,len(word)))\n    \ndef make_words_2(word):\n    '''\n    Write a function to return a tuple of all the possible combinations of the letters in the word.\n    '''\n    if len(word)==1:\n        return (word,)\n    else:\n        first=word[0]\n        rest=word[1:]\n        rest_tup=make_words_2(rest)\n        comb=[]\n        for elem in rest_tup:\n            for i in range(len(elem)+1):\n                comb.append(elem[:i]+first+elem[i:])\n        return tuple(comb)\n    \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple_strict(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)!=tuple:\n        return False\n    else:\n        return True\n        \ndef is_tuple_strict(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)!=tuple:\n        return False\n    else:\n        return True\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return True\n    else:\n        return False\n        \ndef is_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is a tuple.\n    ''"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #print(tuplex)\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whethe"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex.count(tuple1) > 0\n    \ndef check_dict(dictionary,item):\n    '''\n    Write a function to check whether an item exists within a dictionary.\n    '''\n    return dictionary.has_key(item)\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_divisible_by_K(x, k):\n    '''\n    Write a python function to check whether a given number is divisible by K.\n    '''\n    return x%k==0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n    \ndef odd(x):\n    '''\n    Write a python function to check if a number is odd or not.\n    '''\n    return x % 2 == 1\n    \ndef extend(x, y, m):\n    '''\n    Write a python function to add two numbers x and y modulo m.\n    '''\n    return (x + y) % m\n    \ndef is_prime(x):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    for i in range(2,x):\n        if x % i == 0:\n            return False\n    return True\n    \ndef find_primitive_root(x):\n    '''\n    Write a python function to find the primitive root of a prime number.\n    '''\n    if not is_prime(x):\n        return None\n    prime_factors = []\n    for i in range(2,x):\n        if x % i == 0:\n            prime_factors.append(i)\n    for a in prime_factors:\n        if find_Parity(extend(a, 1, x)) == 1:\n            return a\n    return None\n    \ndef gcd(x, y):\n    '''\n    Write a python function to find the greatest common divisor of two numbers x and y.\n    '''\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef multiplicative_inverse(x, y):\n    '''\n    Write a python function to find the multiplicative inverse of two numbers x and y.\n    '''\n    if gcd(x, y)!= 1:\n        return None\n    u1, u2, u3 = 1, 0, x\n    v1, v2, v3 = 0, 1, y\n    while v3!= 0:\n        q = u3 // v3\n        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3\n    return u1 % y\n    \ndef generate_keypair(p, q):\n    '''\n    Write a python function to generate a keypair (public and private keys) for RSA.\n    '''\n    if not (is_prime(p) and is_prime(q)):\n        raise ValueError('Both numbers must be prime.')\n    elif p == q:\n        raise ValueError('p and q cannot be equal')\n    n = p * q\n    # Phi is the totient of n\n    phi = (p - 1) * (q - 1)\n    # Choose an integer e such that e and phi(n) are coprime\n    e = random.randrange(1, phi)\n    # Use Euclid's Algorithm to verify that e and phi(n) are comprime\n    g = gcd(e, phi)\n    while g!= 1:\n        e = random.randrange(1, phi)\n        g = gcd(e, phi)\n    # Use Extended Euclid's Algorithm to generate the private key\n    d = multiplicative_inverse(e, phi)\n    # Return public and private keypair\n    # Public key is (e, n) and private key is (d, n)\n    return e, d, n\n    \ndef encrypt(e, n, message):\n    '''\n    Write a python function to encrypt a message using an RSA public key.\n    '''\n    # RSA encryption algorithm:\n    # pick random integer k\n    k = random.randrange(2,n)\n    # encrypt message^e mod n\n    cipher = message**e % n\n    return cipher\n    \ndef decrypt(d, n, cipher):\n    '''\n    Write a python function to decrypt an encrypted message using an RSA private key.\n    '''\n    # RSA decryption algorithm:\n    # decrypt cipher^d mod n\n    message = cipher**d % n\n    return message\n    \ndef main():\n    '''\n    Write a python function to implement RSA Algorithm.\n    '''\n    # Your RSA implementation here\n    p = int(raw_input(\"Enter a prime number p: \"))\n    q = int(raw_input(\"Enter a prime number q: \"))\n    print \"Generating your public and private keys... \"\n    public, private, n = generate_keypair(p, q)\n    print \"Your public key is \", public, \" and your private key is \", private, \" and your totient is \", n\n    message = int(raw_input(\"Enter a message to encrypt: \"))\n    encrypted_msg = encrypt(public, n, message)\n    print \"Your encrypted message is: \", encrypted_msg\n    print \"Your message is: \", decrypt(private, n, encrypted_msg)\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    import math\n    n = len(str(x))\n    s = 0\n    for i in range(n):\n        s = s + pow(2, i) * int(str(x)[i])\n    return s % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2:\n        return 'odd'\n    else:\n        return 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x & 1) == 1: \n        return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return ((x&1) + (x&2) + (x&4) + (x&8)) & 0xF\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    a = x & 0x0000FFFF\n    return (a & 0x00000001)\n    \n    \n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    d = [int(x) for x in str(n)]\n    print d\n    l = len(d)\n    print l\n    for i in xrange(l - 1):\n        for j in xrange(i + 1, l):\n            print i, j\n            if d[i] < d[j]:\n                d[i], d[j] = d[j], d[i]\n                d[i + 1:] = sorted(d[i + 1:])\n                break\n    print d\n    return int(''.join([str(x) for x in d]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    str_n_list = list(str_n)\n    for i in range(len(str_n_list)-1, 0, -1):\n        if int(str_n_list[i]) <= int(str_n_list[i-1]):\n            j = i-1\n            while j >= 0 and int(str_n_list[j]) <= int(str_n_list[i-1]):\n                j -= 1\n            tmp = str_n_list[i-1]\n            str_n_list[i-1] = str_n_list[j]\n            str_n_list[j] = tmp\n            str_n_list[i:] = sorted(str_n_list[i:])\n            return int(''.join(str_n_list))\n    return int(str_n_list[0] + str_n_list[1] + str_n_list[2] + str_n_list[3])\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # base case\n    if n < 10:\n        return n + 1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # if the number is negative, make it positive\n    if n < 0:\n        n = abs(n)\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1,0,-1):\n        # find the maximum digit that is smaller than the digit at index i\n        if digits[i] < max(digits[:i]):\n            max_index = digits[:i].index(max(digits[:i]))\n            # swap the digits\n            temp = digits[i]\n            digits[i] = digits[max_index]\n            digits[max_index] = temp\n            break\n    # reverse the digits\n    digits.reverse()\n    # convert the list of digits to a string\n    return int(''.join([str(d) for d in digits]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def split_digits(n):\n        return [int(x) for x in str(n)]\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    if len(str_n) == 1:\n        return n\n    elif len(str_n) == 2:\n        return int(str_n[1] + str_n[0])\n    elif len(str_n) > 2:\n        # If the number is bigger than 9, then find the digit that gives the biggest number\n        max_digit = '0'\n        for d in str_n:\n            if int(d) > int(max_digit):\n                max_digit = d\n        # If max_digit is 0, then replace it with the first digit of str_n\n        if max_digit == '0':\n            max_digit = str_n[0]\n        # Replace the max_digit with the first digit of str_n\n        new_n = str_n.replace(max_digit, '0')\n        # The new_n is the sum of str_n[0] and the smallest digit of str_n[1:]\n        new_n = str(int(new_n) + int(min(str_n[1:])))\n        # Return the new number\n        return new_n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def digits(n):\n        for i in xrange(len(str(n))):\n            yield int(str(n)[i])\n    s = sorted(digits(n))\n    indices = [i for i in xrange(len(s)) if s[i] < s[i-1]]\n    n = n * 10 + sum(s[i] for i in indices)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    size = len(n)\n    new_n = n\n    i = size - 1\n    while i > 0:\n        if n[i-1] > n[i]:\n            new_n = new_n[0:i-1] + new_n[i:]\n            new_n = new_n[0:i] + n[i-1] + new_n[i:]\n            i = 0\n        i -= 1\n    return int(new_n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1,0,-1):\n        if int(n[i]) < int(n[i-1]):\n            start = i\n            break\n    n = int(n[:start] + sorted(n[start:]) + n[start:])\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # 1. Turn the number into a list\n    # 2. Then create a new list by excluding the smallest digit from the left and then adding the\n    #   smallest digit to the right. Then rearrange the list.\n    # 3. Turn the list back into a number.\n    l = list(str(n))\n    l.sort()\n    l.reverse()\n    l = ''.join(l)\n    l = int(l)\n    return l\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # nums1 and nums2 are lists of numbers\n    # Return a list of pairs [([1,2],3),([3,4],5)]\n    if not nums1 or not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for i in xrange(0,len(nums1)):\n        heapq.heappush(pairs,(nums1[i],nums2[i]))\n    res = []\n    for i in xrange(k):\n        res.append(heapq.heappop(pairs))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def add_pair(result, pair):\n        first, second = pair[0], pair[1]\n        if first in result:\n            result[first].append(second)\n        elif second in result:\n            result[second].append(first)\n        else:\n            result[first] = [second]\n        return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # sort the arrays\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    # setup two pointers to start\n    i1 = 0\n    i2 = 0\n    \n    # setup a heap with k largest values to keep track\n    heap = [(-1, -1)] * k\n    \n    # go through both arrays, inserting in the heap\n    while i1 < len(nums1) and i2 < len(nums2):\n        if nums1[i1] < nums2[i2]:\n            heapq.heappush(heap, (nums1[i1], nums2[i2]))\n            i1 += 1\n        else:\n            heapq.heappush(heap, (nums2[i2], nums1[i1]))\n            i2 += 1\n        \n        # make sure we haven't already pushed k elements\n        if len(heap) == k:\n            break\n    \n    # return the heap\n    return [x for (x, y) in heap]\n    \ndef k_smallest_pairs2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # sort the arrays\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    # setup two pointers to start\n    i1 = 0\n    i2 = 0\n    \n    # setup a heap with k largest values to keep track\n    heap = [(-1, -1)] * k\n    \n    # go through both arrays, inserting in the heap\n    while i1 < len(nums1) and i2 < len(nums2):\n        if nums1[i1] < nums2[i2]:\n            heapq.heappush(heap, (nums1[i1], nums2[i2]))\n            i1 += 1\n        else:\n            heapq.heappush(heap, (nums2[i2], nums1[i1]))\n            i2 += 1\n        \n        # make sure we haven't already pushed k elements\n        if len(heap) == k:\n            break\n    \n    # return the heap\n    return [x for (x, y) in heap]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        return []\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n    if k > len(nums1) * len(nums2):\n        return []\n    return [(heapq.heappop(heap)[1], heapq.heappop(heap)[2]) for _ in range(k)]\n    \nassert(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)])\nassert(k_smallest_pairs([1, 1, 2], [], 1) == [(1, 1)])\nassert(k_smallest_pairs([], [1], 1) == [])\nassert(k_smallest_pairs([], [], 0) == [])\nassert(k_smallest_pairs([2], [1], 1) == [(2, 1)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],5) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],10) == [])\nassert(k_smallest_pairs([], [1], 1) == [(1, 1)])\nassert(k_smallest_pairs([], [], 0) == [])\nassert(k_smallest_pairs([2], [1], 1) == [(2, 1)])\nassert(k_smallest_pairs([2], [], 1) == [(2, 2)])\nassert(k_smallest_pairs([2], [1], 2) == [(2, 1), (2, 2)])\nassert(k_smallest_pairs([1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[4,6,9,10,13,15,18,19,21]) == [(1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],4) == [(2, 1), (4, 3), (6, 5), (7, 9)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],0) == [])\nassert(k_smallest_pairs([], [], 0) == [])\nassert(k_smallest_pairs([], [], 1) == [(None, None)])\nassert(k_smallest_pairs([2], [1], 1) == [(2, 1)])\nassert(k_smallest_pairs([2], [], 1) == [(2, 2)])\nassert(k_smallest_pairs([2], [1], 2) == [(2, 1), (2, 2)])\nassert(k_smallest_pairs([2,1,2,3,3], [4,5,6,7,8,9,10,11,12,13,14], 3) == [(2, 1), (3, 2), (3, 3)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],4) == [(2, 1), (4, 3), (6, 5), (7, 9)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],5) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],6) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],7) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3), (3, 5)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],8) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3), (3, 5), (5, 7)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],9) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3), (3, 5), (5, 7), (7, 9)])\nassert(k_smallest_pairs([2,4,6],[1,3,5,7,9],10) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3), (3, 5), (5, 7), (7, 9), (2, 5), (3, 7), (5, 9), (7, 9)])\nassert(k_smallest_pairs([2,4,6,8,10],[1,3,5,7,9],4) == [(2, 1), (4, 3), (6, 5), (7, 9)])\nassert(k_smallest_pairs([2,4,6,8,10],[1,3,5,7,9],5) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7)])\nassert(k_smallest_pairs([2,4,6,8,10],[1,3,5,7,9],6) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3)])\nassert(k_smallest_pairs([2,4,6,8,10],[1,3,5,7,9],7) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3), (3, 5)])\nassert(k_smallest_pairs([2,4,6,8,10],[1,3,5,7,9],8) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3), (3, 5), (5, 7)])\nassert(k_smallest_pairs([2,4,6,8,10],[1,3,5,7,9],9) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3), (3, 5), (5, 7), (7, 9)])\nassert(k_smallest_pairs([2,4,6,8,10],[1,3,5,7,9],10) == [(2, 1), (4, 3), (6, 5), (7, 9), (9, 7), (2, 3), (3, 5), (5, 7), (7, 9), (2, 5), (3, 7), (5, 9), (7, 9)])\nassert(k_smallest_pairs([], [], 0) == [])\nassert(k_smallest_pairs([], [], 1) == [(None, None)])\nassert(k_smallest_pairs([], [], 2) == [])\nassert(k_smallest_pairs([], [], 3) == [])\nassert(k_smallest_pairs([1], [], 0) ="
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    i = 0\n    j = 0\n    heap = []\n    while i < len(nums1) and j < len(nums2):\n        if i == 0 or nums1[i] < nums1[heap[0][1]]:\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            i += 1\n        elif j == 0 or nums2[j] < nums2[heap[0][2]]:\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            j += 1\n        if len(heap) > k:\n            heapq.heappop(heap)\n    res = []\n    while heap:\n        res.append([heap[0][0], heap[0][1]])\n        heapq.heappop(heap)\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    i = 0\n    j = 0\n    results = []\n    while i < len(nums1) and j < len(nums2):\n        if min_heap:\n            if nums1[i] < min_heap[0][0] or nums2[j] < min_heap[0][1]:\n                # both nums1[i] and nums2[j] are smaller, insert them\n                heapq.heappush(min_heap, [nums1[i], nums2[j]])\n                # move the index\n                i += 1\n                j += 1\n            else:\n                # both nums1[i] and nums2[j] are larger, remove the smallest value\n                heapq.heappop(min_heap)\n        else:\n            # insert the first nums1[i]\n            heapq.heappush(min_heap, [nums1[i], nums2[j]])\n            # move the index\n            i += 1\n            j += 1\n        if len(min_heap) == k:\n            results.append(heapq.heappop(min_heap))\n    while min_heap:\n        results.append(heapq.heappop(min_heap))\n    return results\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if k > len(nums1) * len(nums2):\n        return []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    nums = sorted(nums1 + nums2)\n    \n    pairs = []\n    for i in xrange(k):\n        pairs.append([nums[i], nums[i+k]])\n    \n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    pq = []\n    for i in range(len(nums1)):\n        heapq.heappush(pq, (nums1[i] + nums2[0], i, 0))\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l = list1\n    min_prod = l[0][0] * l[0][1]\n    for i in range(len(l)):\n        if l[i][0] * l[i][1] < min_prod:\n            min_prod = l[i][0] * l[i][1]\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = []\n    for a, b in list1:\n        product.append(a*b)\n    return min(product)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x:x[0]*x[1])\n    return list1[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if list1 is None or len(list1) <= 1:\n        return None\n    product = []\n    for a,b in list1:\n        product.append(a*b)\n    return min(product)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in list1:\n        if i[0] <= i[1]:\n            product_list.append(i[0]*i[1])\n        else:\n            product_list.append(i[1]*i[0])\n    return min(product_list)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        t1 = list1[0][0] * list1[1][0]\n        t2 = list1[0][1] * list1[1][1]\n        if t1 < t2:\n            return list1[0]\n        elif t1 == t2:\n            return list1[0]\n        else:\n            return list1[1]\n    '''\n    list2 = [list1[i][0] * list1[i][1] for i in range(len(list1))]\n    return list1[list2.index(min(list2))]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for i in list1:\n        if i[0]*i[1] < min_product:\n            min_product = i[0]*i[1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_p = list1[0][0]*list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0]*list1[i][1] < min_p:\n            min_p = list1[i][0]*list1[i][1]\n    return min_p\n    \ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    '''\n    max_p = list1[0][0]*list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0]*list1[i][1] > max_p:\n            max_p = list1[i][0]*list1[i][1]\n    return max_p\n    \ndef min_product_list(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_p = list1[0][0]*list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0]*list1[i][1] < min_p:\n            min_p = list1[i][0]*list1[i][1]\n    return min_p\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max_prod = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_prod.append(list1[i][0]*list1[j][1])\n    return min(max_prod)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([lst[0]*lst[1] for lst in list1])\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for v in listval:\n        if v < min:\n            min = v\n    return min\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"Empty list\")\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < val:\n            val = listval[i]\n    return val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = listval\n    min_val = l[0]\n    for i in l:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = 0\n    for item in listval:\n        if item < listval[min]:\n            min = item\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    word = word.replace('__', '_')\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '' or word == None:\n        return\n    #case 1:\n    # if word.startswith('_'):\n    #     return\n    # case 2:\n    #  if word.startswith('-'):\n    #     return\n    #case 3:\n    if word.startswith('-'):\n        return\n    #case 4:\n    # if word.startswith('_'):\n    #     return word[1:]\n    # case 5:\n    # if word.startswith('-'):\n    #     return\n    # case 6:\n    if word.startswith('-'):\n        return\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    return ''.join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.startswith('_'):\n        return word\n    else:\n        if word.find('_') == -1:\n            return word\n        else:\n            a = word.split('_')\n            new_a = [a[0]]\n            for i in range(1, len(a)):\n                new_a.append(a[i].capitalize())\n            return \"\".join(new_a)\ndef to_camel_case(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_a = [a[0]]\n                for i in range(1, len(a)):\n                    new_a.append(a[i].capitalize())\n                return \"\".join(new_a)\ndef to_camel_case2(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_a = [a[0]]\n                for i in range(1, len(a)):\n                    new_a.append(a[i].capitalize())\n                return \"\".join(new_a)\ndef to_camel_case3(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                return a[0]+\"\".join(x.capitalize() for x in a[1:])\ndef to_camel_case4(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                return \"\".join([a[0], x.capitalize() for x in a[1:]])\ndef to_camel_case5(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_a = [a[0]]\n                for i in range(1, len(a)):\n                    new_a.append(a[i].capitalize())\n                return \"\".join(new_a)\ndef to_camel_case6(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_a = [a[0]]\n                for i in range(1, len(a)):\n                    new_a.append(a[i].capitalize())\n                return \"\".join(new_a)\ndef to_camel_case7(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_a = [a[0]]\n                for i in range(1, len(a)):\n                    new_a.append(a[i].capitalize())\n                return \"\".join(new_a)\ndef to_camel_case8(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_a = [a[0]]\n                for i in range(1, len(a)):\n                    new_a.append(a[i].capitalize())\n                return \"\".join(new_a)\ndef to_camel_case9(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_a = [a[0]]\n                for i in range(1, len(a)):\n                    new_a.append(a[i].capitalize())\n                return \"\".join(new_a)\ndef to_camel_case10(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                return a[0]+\"\".join([x.capitalize() for x in a[1:]])\ndef to_camel_case11(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                return \"\".join([a[0], x.capitalize() for x in a[1:]])\ndef to_camel_case12(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                return \"\".join([a[0], x.capitalize() for x in a[1:]])\ndef to_camel_case13(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_a = [a[0]]\n                for i in range(1, len(a)):\n                    new_a.append(a[i].capitalize())\n                return \"\".join(new_a)\ndef to_camel_case14(input_string):\n    if input_string == \"\" or input_string == None:\n        return \"\"\n    else:\n        if input_string.startswith('_'):\n            return input_string\n        else:\n            if input_string.find('_') == -1:\n                return input_string\n            else:\n                a = input_string.split('_')\n                new_"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '' or word == None:\n        return\n    # get the words in the string\n    words = re.split('[-_]', word)\n    # sort the words\n    words = sorted(words)\n    # convert the words to camel case\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    # join the words\n    return ''.join(words)\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word == '' or word == None:\n        return\n    # get the words in the string\n    words = re.split('[A-Z]', word)\n    # sort the words\n    words = sorted(words)\n    # convert the words to camel case\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    # join the words\n    return ''.join(words)\n    \ndef list_to_string(word):\n    '''\n    Write a function to convert a list to string\n    '''\n    if word == '' or word == None:\n        return\n    # get the words in the string\n    words = re.split('[\\[\\]\\,\\n]', word)\n    # convert the words to camel case\n    for i in range(len(words)):\n        words[i] = words[i].strip()\n    # join the words\n    return ''.join(words)\n    \ndef string_to_list(word):\n    '''\n    Write a function to convert a string to a list\n    '''\n    if word == '' or word == None:\n        return\n    # get the words in the string\n    words = re.split('[\\[\\]\\,\\n]', word)\n    # convert the words to camel case\n    for i in range(len(words)):\n        words[i] = words[i].strip()\n    # join the words\n    return words\n    \ndef decode_string(word):\n    '''\n    Write a function to decode a string\n    '''\n    if word == '' or word == None:\n        return\n    # get the words in the string\n    words = re.split('[\\{\\}]', word)\n    # convert the words to camel case\n    for i in range(len(words)):\n        words[i] = words[i].strip()\n    # join the words\n    return ''.join(words)\n    \ndef encode_string(word):\n    '''\n    Write a function to encode a string\n    '''\n    if word == '' or word == None:\n        return\n    # get the words in the string\n    words = re.split('[\\[\\]\\,\\n]', word)\n    # convert the words to camel case\n    for i in range(len(words)):\n        words[i] = words[i].strip()\n    # join the words\n    return ''.join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if '_' not in word:\n        return word\n    else:\n        return ''.join([i[0].upper() + i[1:] for i in re.split('[_]+', word)])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word=='':\n        return ''\n    if word[0].isupper():\n        return word\n    if word[0].islower():\n        return word[0].upper()+word[1:]\n    return word[0].lower()+word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda x: x.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.lower()\n    if word == 'the':\n        return 'The'\n    elif word == 'is':\n        return 'Is'\n    else:\n        for i,char in enumerate(word):\n            if char == '_':\n                word = word[i:]\n                break\n        word = word[:1].capitalize() + word[1:]\n        for i,char in enumerate(word):\n            if char == '_':\n                word = word[:i] + word[i+1:]\n                break\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not isinstance(word, str):\n        return word\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1=[]\n    for i in l:\n        if i%2==0:\n            l1.append(i)\n    return l1\n    \n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [i for i in l if i % 2 == 0]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i%2 == 0:\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2 == 0:\n            l.remove(i)\n    print l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= 0:\n        return list1[n]\n    else:\n        n = abs(n)\n        return list1[len(list1) - n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [element[n] for element in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    if n == 1:\n        return list1[0][1]\n    else:\n        return extract_nth_element(list1[1:], n - 1)\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(n):\n        val = list1[i][1]\n    return val\n    \n    "
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [el[n] for el in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return list1[0]\n    else:\n        return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    my_list = []\n    for index in range(len(list1)):\n        for subindex in range(len(list1[index])):\n            if subindex == n:\n                my_list.append(list1[index][subindex])\n    return my_list\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return [x[n] for x in list1]\n    except IndexError:\n        raise IndexError(\"Given list index is out of range.\")\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [list1[i][n] for i in range(0, len(list1))]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return 1 if set(list1).intersection(set(list2)) else 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    return len([value for value in list1 if value in list2])\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        for i in range(len(list1)):\n            if list2.count(list1[i]) > 0:\n                return True\n    else:\n        for i in range(len(list2)):\n            if list1.count(list2[i]) > 0:\n                return True\n    return False\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return 1\n            else:\n                pass\n        else:\n            pass\n    else:\n        return 0\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag = 0\n    for element in list1:\n        if element in list2:\n            flag = 1\n    return flag\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return bool(set(list1).intersection(list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    a = arr[:]\n    max_product = a[0] * a[1] * a[2]\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            product = a[i] * a[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n=len(arr)\n    max_product=1\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[j]*arr[i]>max_product:\n                max_product=arr[j]*arr[i]\n    return max_product\ndef max_Product_Matrix(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m=len(arr)\n    n=len(arr[0])\n    max_product=0\n    for i in range(m-1):\n        for j in range(n-1):\n            a=arr[i][j]*arr[i+1][j]*arr[i][j+1]*arr[i+1][j+1]\n            if a>max_product:\n                max_product=a\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_arr = max(arr)\n    new_arr = []\n    for i in arr:\n        if i!= max_arr:\n            new_arr.append(i)\n    if len(new_arr) == 0:\n        return None\n    else:\n        return max(new_arr) * max_arr\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        product = max(product * arr[i], arr[i])\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return arr\n    arr.sort()\n    max_product=arr[-1]*arr[-2]\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 2:\n        return -1\n    elif len(arr) == 3:\n        return arr[1] * arr[2]\n    else:\n        products = [arr[0], arr[1], arr[2]]\n        for i in range(3, len(arr)):\n            products.append(products[i-1] * arr[i])\n            if products[i] > products[i-1] * arr[i]:\n                products[i] = products[i-1] * arr[i]\n        return max(products)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    current_max = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], arr[i]*current_max)\n        max_product = max(max_product, current_max)\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    res = []\n    i = n - 1\n    while i > 0:\n        if arr[i-1] > 1 and arr[i] > 1:\n            res.append([arr[i-1], arr[i]])\n        i -= 1\n    return res\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = set()\n    for i in Input:\n        Output.add(i[0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = [(\"abc\", 1), (\"abc\", 1), (\"abc\", 1), (\"abc\", 2), (\"abc\", 2), (\"abc\", 2), (\"abc\", 3), (\"abc\", 3), (\"abc\", 3), (\"abc\", 3)]\n    #list_of_tuples = [(1,2),(2,3),(3,4),(1,5),(1,6),(5,6),(5,7),(5,8),(5,9)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuples = [(\"abc\",1),(\"abc\",1),(\"abc\",1),(\"abc\",2),(\"abc\",2),(\"abc\",2),(\"abc\",3),(\"abc\",3),(\"abc\",3),(\"abc\",3)]\n    #list_of_tuple"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #remove comment to print list in console\n    #print Input\n    #i=0\n    #for i in Input:\n    #    print i\n    #    break\n    #print \"i is = \", i\n    #print \"Input is = \", Input\n    #print \"Input length = \", len(Input)\n    #print \"Input[0] = \", Input[0]\n    #print \"Input[1] = \", Input[1]\n    #print \"Input[2] = \", Input[2]\n    #print \"Input[3] = \", Input[3]\n    #print \"Input[4] = \", Input[4]\n    #print \"Input[5] = \", Input[5]\n    #print \"Input[6] = \", Input[6]\n    #print \"Input[7] = \", Input[7]\n    #print \"Input[8] = \", Input[8]\n    #print \"Input[9] = \", Input[9]\n    #print \"Input[10] = \", Input[10]\n    #print \"Input[11] = \", Input[11]\n    #print \"Input[12] = \", Input[12]\n    #print \"Input[13] = \", Input[13]\n    #print \"Input[14] = \", Input[14]\n    #print \"Input[15] = \", Input[15]\n    #print \"Input[16] = \", Input[16]\n    #print \"Input[17] = \", Input[17]\n    #print \"Input[18] = \", Input[18]\n    #print \"Input[19] = \", Input[19]\n    #print \"Input[20] = \", Input[20]\n    #print \"Input[21] = \", Input[21]\n    #print \"Input[22] = \", Input[22]\n    #print \"Input[23] = \", Input[23]\n    #print \"Input[24] = \", Input[24]\n    #print \"Input[25] = \", Input[25]\n    #print \"Input[26] = \", Input[26]\n    #print \"Input[27] = \", Input[27]\n    #print \"Input[28] = \", Input[28]\n    #print \"Input[29] = \", Input[29]\n    #print \"Input[30] = \", Input[30]\n    #print \"Input[31] = \", Input[31]\n    #print \"Input[32] = \", Input[32]\n    #print \"Input[33] = \", Input[33]\n    #print \"Input[34] = \", Input[34]\n    #print \"Input[35] = \", Input[35]\n    #print \"Input[36] = \", Input[36]\n    #print \"Input[37] = \", Input[37]\n    #print \"Input[38] = \", Input[38]\n    #print \"Input[39] = \", Input[39]\n    #print \"Input[40] = \", Input[40]\n    #print \"Input[41] = \", Input[41]\n    #print \"Input[42] = \", Input[42]\n    #print \"Input[43] = \", Input[43]\n    #print \"Input[44] = \", Input[44]\n    #print \"Input[45] = \", Input[45]\n    #print \"Input[46] = \", Input[46]\n    #print \"Input[47] = \", Input[47]\n    #print \"Input[48] = \", Input[48]\n    #print \"Input[49] = \", Input[49]\n    #print \"Input[50] = \", Input[50]\n    #print \"Input[51] = \", Input[51]\n    #print \"Input[52] = \", Input[52]\n    #print \"Input[53] = \", Input[53]\n    #print \"Input[54] = \", Input[54]\n    #print \"Input[55] = \", Input[55]\n    #print \"Input[56] = \", Input[56]\n    #print \"Input[57] = \", Input[57]\n    #print \"Input[58] = \", Input[58]\n    #print \"Input[59] = \", Input[59]\n    #print \"Input[60] = \", Input[60]\n    #print \"Input[61] = \", Input[61]\n    #print \"Input[62] = \", Input[62]\n    #print \"Input[63] = \", Input[63]\n    #print \"Input[64] = \", Input[64]\n    #print \"Input[65] = \", Input[65]\n    #print \"Input[66] = \", Input[66]\n    #print \"Input[67] = \", Input[67]\n    #print \"Input[68] = \", Input[68]\n    #print \"Input[69] = \", Input[69]\n    #print \"Input[70] = \", Input[70]\n    #print \"Input[71] = \", Input[71]\n    #print \"Input[72] = \", Input[72]\n    #print \"Input[73] = \", Input[73]\n    #print \"Input[74] = \", Input[74]\n    #print \"Input[75] = \", Input[75]\n    #print \"Input[76] = \", Input[76]\n    #print \"Input[77] = \", Input[77]\n    #print \"Input[78] = \", Input[78]\n    #print \"Input[79] = \", Input[79]\n    #print \"Input[80] = \", Input[80]\n    #print \"Input[81] = \", Input[81]\n    #print \"Input[82] = \", Input[82]\n    #print \"Input[83] = \", Input[83]\n    #print \"Input[84] = \", Input[84]\n    #print \"Input[85] = \", Input[85]\n    #print \"Input[86] = \", Input[86]\n    #print \"Input[87] = \", Input[87]\n    #print \"Input[88] = \", Input[88]\n    #print \"Input[89] = \", Input[89]\n    #print \"Input[90] = \", Input[90]\n    #print \"Input[91] = \", Input[91]\n    #print \"Input[92] = \", Input[92]\n    #print \"Input[93] = \", Input[93]\n    #print \"Input[94] = \", Input[94]\n    #print \"Input[95] = \", Input[95]\n    #print \"Input[96] = \", Input[96]\n    #print \"Input[97] = \", Input[97]\n    #print \"Input[98] = \", Input[98]\n    #print \"Input[99] = \", Input[99]\n    #print \"Input[100] = \", Input[100]\n    #print \"Input[101] = \", Input[101]\n    #print \"Input[102] = \", Input[102]\n    #print \"Input[103] = \", Input[103]\n    #print \"Input[104] = \", Input[104]\n    #print \"Input[105] = \", Input[105]\n    #print \"Input[106] = \", Input[106]\n    #print \"Input[107] = \", Input[107]\n    #print \"Input[108] = \", Input[108]\n    #print \"Input[109] = \", Input[109]\n    #print \"Input[110] = \", Input[110]\n    #print \"Input[111] = \", Input[111]\n    #print \"Input[112] = \", Input[112]\n    #print \"Input[113] = \", Input[113]\n    #print \"Input[114] = \", Input[114]\n    #print \"Input[115] = \", Input[115]\n    #print \"Input[116] = \", Input[116]\n    #print \"Input[117] = \", Input[117]\n    #print \"Input[118] = \", Input[118]\n    #print \"Input[119] = \", Input[119]\n    #print \"Input[120] = \", Input[120]\n    #print \"Input[121] = \", Input[121]\n    #print \"Input[122] = \", Input[122]\n    #print \"Input[123] = \", Input[123]\n    #print \"Input[124] = \", Input[124]\n    #print \"Input[125] = \", Input[125]\n    #print \"Input[126] = \", Input[126]\n    #print \"Input[127] = \", Input[127]\n    #print \"Input[128] = \", Input[128]\n    #print \"Input"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #first_element = (lambda x: x[0])(Input)\n    first_element = list(map(lambda x: x[0], Input))\n    first_element = set(first_element)\n    #print(first_element)\n    result = []\n    for i in Input:\n        if i[0] in first_element:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Result = []\n    for i in Input:\n        if i[0] in Result:\n            continue\n        else:\n            Result.append(i[0])\n    return Result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    '''\n    If we have a list of tuples:\n    [('a',1),('a',2),('a',3)]\n    where first element is 'a' then first_element = 'a'\n    '''\n    first_element = Input[0][0]\n    list_of_tuples = [tuple(item[1:]) for item in Input]\n    dict_of_tuples = {}\n    for item in list_of_tuples:\n        if item[0] in dict_of_tuples:\n            dict_of_tuples[item[0]].append(item)\n        else:\n            dict_of_tuples[item[0]] = [item]\n    return [x for x in dict_of_tuples[first_element]]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    temp = []\n    for item in Input:\n        temp.append(item[0])\n    return temp\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    return reduce(lambda x,y: x if x[0] == y[0] else None, Input)\n    \nif __name__ == '__main__':\n    print group_tuples(zip(range(10,40,10),range(40,80,20)))\n    print group_tuples(zip(range(10,40,10),range(40,80,20),[40,50,60])"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for tup in Input:\n        if tup[0] not in result:\n            result.append(tup[0])\n    print(result)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Code here\n    # return list of tuples sorted by first element\n    return sorted(Input,key=lambda tup: tup[0])\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1=[]\n    for i in lst:\n        if len(i)>len(lst1):\n            lst1=i\n    return lst1\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = 0\n    maxlen_element = 0\n    for i in lst:\n        if len(i) > maxlen:\n            maxlen = len(i)\n            maxlen_element = i\n    return maxlen_element\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n    \n    \n    \ndef Longest_Prefix(s1, s2):\n    '''\n    Write a python function to find the longest common prefix of two strings.\n    '''\n    m=len(s1)\n    n=len(s2)\n    prefix=\"\"\n    j=0\n    for i in range(m):\n        if s1[i] == s2[j]:\n            prefix+=s1[i]\n            j+=1\n        else:\n            break\n    return prefix\n    \n    \ndef Search_pattern(s,p):\n    '''\n    Write a python function to find all occurrence of a substring in a string.\n    '''\n    i=0\n    j=0\n    l=len(p)\n    ans=[]\n    while i<len(s):\n        if j<l and s[i]==p[j]:\n            i+=1\n            j+=1\n        elif j==l:\n            ans.append(i-j)\n            i+=1\n            j=0\n        else:\n            i+=1\n    return ans\n    \n    \ndef LCS_length(X, Y):\n    '''\n    Write a python function to find the length of longest common substring of two strings.\n    '''\n    m=len(X)\n    n=len(Y)\n    LCS_length=[[0 for i in range(n+1)] for j in range(m+1)]\n    LCS_length_backtracking=[[0 for i in range(n+1)] for j in range(m+1)]\n    LCS_length[0][0]=0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if X[i-1]==Y[j-1]:\n                LCS_length[i][j]=LCS_length[i-1][j-1]+1\n                LCS_length_backtracking[i][j]=1\n            else:\n                LCS_length[i][j]=max(LCS_length[i-1][j],LCS_length[i][j-1])\n                LCS_length_backtracking[i][j]=2\n    return LCS_length[m][n],LCS_length_backtracking\n    \n    \ndef LCS_length_backtracking(X, Y):\n    '''\n    Write a python function to find the length of longest common substring of two strings.\n    '''\n    m=len(X)\n    n=len(Y)\n    LCS_length=[[0 for i in range(n+1)] for j in range(m+1)]\n    LCS_length_backtracking=[[0 for i in range(n+1)] for j in range(m+1)]\n    LCS_length[0][0]=0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if X[i-1]==Y[j-1]:\n                LCS_length[i][j]=LCS_length[i-1][j-1]+1\n                LCS_length_backtracking[i][j]=1\n            else:\n                LCS_length[i][j]=max(LCS_length[i-1][j],LCS_length[i][j-1])\n                LCS_length_backtracking[i][j]=2\n    return LCS_length[m][n],LCS_length_backtracking\n    \n    \ndef Knuth_Morris_Pratt(s,p):\n    '''\n    Write a python function to find the first occurrence of a pattern in a string.\n    '''\n    i=0\n    j=0\n    l=len(p)\n    ans=[]\n    while i<len(s):\n        if j<l and s[i]==p[j]:\n            i+=1\n            j+=1\n        elif j==l:\n            ans.append(i-j)\n            i+=1\n            j=0\n        else:\n            if s[i]!=p[j]:\n                if j!=0:\n                    j=LCS_length_backtracking[i][j-1]\n                else:\n                    i+=1\n    return ans\n    \n    \ndef Count_kmers(s,k):\n    '''\n    Write a python function to count the number of occurrences of all k-mers in a string.\n    '''\n    kmers={}\n    for i in range(len(s)-k+1):\n        kmer=s[i:i+k]\n        if kmer in kmers:\n            kmers[kmer]+=1\n        else:\n            kmers[kmer]=1\n    return kmers\n    \n    \ndef Frequent_kmers(s,k):\n    '''\n    Write a python function to find the k-mers with maximum occurrence in a string.\n    '''\n    freq={}\n    for i in range(len(s)-k+1):\n        kmer=s[i:i+k]\n        if kmer in freq:\n            freq[kmer]+=1\n        else:\n            freq[kmer]=1\n    maxfreq=max(freq.values())\n    ans=[]\n    for kmer in freq.keys():\n        if freq[kmer]==maxfreq:\n            ans.append(kmer)\n    return ans\n    \n    \ndef Frequent_words(text,k):\n    '''\n    Write a python function to find the k-mers with maximum occurrence in a string.\n    '''\n    freq={}\n    for i in range(len(text)-k+1):\n        kmer=text[i:i+k]\n        if kmer in freq:\n            freq[kmer]+=1\n        else:\n            freq[kmer]=1\n    maxfreq=max(freq.values())\n    ans=[]\n    for kmer in freq.keys():\n        if freq[kmer]==maxfreq:\n            ans.append(kmer)\n    return ans\n    \n    \ndef Rabin_Karp(s,p):\n    '''\n    Write a python function to find the first occurrence of a pattern in a string.\n    '''\n    m=len(s)\n    n=len(p)\n    p_hash=0\n    p_hash_list=[]\n    for i in range(n):\n        p_hash_list.append(hash(p[i]))\n        p_hash+=p_hash_list[i]\n    s_hash=0\n    s_hash_list=[]\n    for i in range(m):\n        s_hash_list.append(hash(s[i]))\n        s_hash+=s_hash_list[i]\n    ans=[]\n    for i in range(m-n+1):\n        if p_hash==s_hash:\n            for j in range(n):\n                if p[j]!=s[i+j]:\n                    break\n                else:\n                    if j==n-1:\n                        ans.append(i)\n        s_hash=s_hash-(s_hash_list[i-n+1]*p_hash_list[0])\n        s_hash_list[0]=(s_hash_list[0]*23)+s_hash_list[0]%(10**9)\n        s_hash_list[n-1]=(s_hash_list[n-1]*23)+s_hash_list[n-1]%(10**9)\n        for j in range(1,n):\n            s_hash_list[j]=(s_hash_list[j]*23)+s_hash_list[j]%(10**9)\n        p_hash=p_hash%(10**9)+p_hash_list[0]\n        p_hash_list[0]=(p_hash_list[0]*23)+p_hash_list[0]%(10**9)\n        p_hash_list[n-1]=(p_hash_list[n-1]*23)+p_hash_list[n-1]%(10**9)\n        for j in range(1,n):\n            p_hash_list[j]=(p_hash_list[j]*23)+p_hash_list[j]%(10**9)\n    return ans\n    \n    \ndef Enumerate(text,pat):\n    '"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_item = 0\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp = lst[0]\n    for i in range(1, len(lst)):\n        if len(temp) < len(lst[i]):\n            temp = lst[i]\n    return temp\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_index = -1\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_index = i\n    return max_index\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return 0\n    temp = lst[0]\n    max_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            temp = lst[i]\n            max_len = len(lst[i])\n    return temp\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n = len(lst)\n    max_count = 0\n    num = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if lst[i] == lst[j]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            num = lst[i]\n    return num\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    i=0\n    maxlen = -1\n    for item in lst:\n        if len(item)>maxlen:\n            maxlen = len(item)\n            maxitem = item\n    return maxitem\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for number in list1:\n        list2.append(round(number))\n    sum = 0\n    for i in list2:\n        sum += i\n    return sum, len(list2)\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [round(i,1) for i in list1]\n    s = 0\n    for i in list1:\n        s += i\n    print(s * len(list1))\n    \nround_and_sum([1.3, 2.3, 3.5]) #3\nround_and_sum([1.1, 1.3, 1.5]) #4\nround_and_sum([2.2, 2.8, 3.9]) #4\nround_and_sum([-1.9, -1.7, -1.5]) #4\nround_and_sum([0.7, -2.1]) #3\nround_and_sum([1.6, -0.7, 0.7]) #5\nround_and_sum([0.8, 1.1, -0.8]) #6\nround_and_sum([0.2, 0.3, 0.6]) #6\nround_and_sum([1.2, 0.9, 1.3]) #5\nround_and_sum([2.3, 1.3, -0.6]) #5\nround_and_sum([0.5, -0.6, -1.3]) #4\nround_and_sum([-2.1, -1.1, -0.1]) #3\nround_and_sum([0.1, -0.2]) #2\nround_and_sum([-0.3, -0.5, -1.5]) #3\nround_and_sum([-0.1, -0.3]) #2\nround_and_sum([1.3, 2.8, 3.9]) #4\nround_and_sum([-0.9, -1.6, -1.7]) #4\nround_and_sum([-0.7, -1.2]) #3\nround_and_sum([-0.2, -0.3, -0.6]) #3\nround_and_sum([-0.1, 0.1, 0.3]) #4\nround_and_sum([0.7, 0.1, -0.5]) #4\nround_and_sum([0.1, -0.6]) #5\nround_and_sum([-1.7, -1.4, -0.9]) #4\nround_and_sum([-0.7, -1.2, -0.8]) #4\nround_and_sum([-0.2, -0.5, -1.1]) #4\nround_and_sum([0.8, 0.7, 1.3]) #5\nround_and_sum([-0.4, -0.7, -0.6]) #4\nround_and_sum([-0.2, -0.4, -0.9]) #4\nround_and_sum([-0.2, -0.8, -1.4]) #5\nround_and_sum([-0.2, -0.9, -1.2]) #6\nround_and_sum([-0.2, -0.8, -0.5]) #5\nround_and_sum([-0.2, -0.7, -0.8]) #5\nround_and_sum([-0.2, -0.7, -0.3]) #5\nround_and_sum([-0.2, -0.7, 0.6]) #6\nround_and_sum([-0.2, -0.5, 0.1]) #5\nround_and_sum([-0.2, -0.7, 0.9]) #6\nround_and_sum([-0.2, -0.3, 0.8]) #6\nround_and_sum([-0.2, -0.3, 0.2]) #6\nround_and_sum([-0.2, -0.3, -0.1]) #5\nround_and_sum([-0.2, -0.5, -0.4]) #6\nround_and_sum([-0.2, -0.5, -0.6]) #6\nround_and_sum([-0.2, -0.4, -0.3]) #7\nround_and_sum([-0.2, -0.4, -0.2]) #7\nround_and_sum([-0.2, -0.6, -0.5]) #7\nround_and_sum([-0.2, -0.6, -0.3]) #8\nround_and_sum([-0.2, -0.6, -0.1]) #8\nround_and_sum([-0.2, -0.8, -0.7]) #8\nround_and_sum([-0.2, -0.8, -0.4]) #9\nround_and_sum([-0.2, -0.8, -0.1]) #9\nround_and_sum([-0.2, -0.9, -0.8]) #9\nround_and_sum([-0.2, -0.9, -0.6]) #9\nround_and_sum([-0.2, -0.9, -0.3]) #8\nround_and_sum([-0.2, -0.9, -0.1]) #8\nround_and_sum([-0.2, -1.0, -0.9]) #8\nround_and_sum([-0.2, -1.0, -0.7]) #8\nround_and_sum([-0.2, -1.0, -0.5]) #7\nround_and_sum([-0.2, -1.0, -0.2]) #7\nround_and_sum([-0.2, -1.0, 0.0]) #8\nround_and_sum([-0.2, -1.0, 0.2]) #8\nround_and_sum([-0.2, -1.0, 0.4]) #8\nround_and_sum([-0.2, -1.0, 0.6]) #8\nround_and_sum([-0.2, -1.0, 0.8]) #9\nround_and_sum([-0.2, -1.0, 1.0]) #9\nround_and_sum([-0.2, -1.0, 1.2]) #10\nround_and_sum([-0.2, -1.0, 1.4]) #11\nround_and_sum([-0.2, -1.0, 1.6]) #12\nround_and_sum([-0.2, -1.0, 1.8]) #13\nround_and_sum([-0.2, -1.0, 2.0]) #14\nround_and_sum([-0.2, -1.0, 2.2]) #15\nround_and_sum([-0.2, -1.0, 2.4]) #16\nround_and_sum([-0.2, -1.0, 2.6]) #17\nround_and_sum([-0.2, -1.0, 2.8]) #18\nround_and_sum([-0.2, -1.0, 3.0]) #19\nround_and_sum([-0.2, -1.0, 3.2]) #20\nround_and_sum([-0.2, -1.0, 3.4]) #21\nround_and_sum([-0.2, -1.0, 3.6]) #22\nround_and_sum([-0.2, -1.0, 3.8]) #23\nround_and_sum([-0.2, -1.0, 4.0]) #24\nround_and_sum([-0.2, -1.0, 4.2]) #25\nround_and_sum([-0.2, -1.0, 4.4]) #26\nround_and_sum([-0.2, -1.0, 4.6]) #27\nround_and_sum([-0.2, -1.0, 4.8]) #28\nround_and_sum([-0.2, -1.0, 5.0]) #29\nround_and_sum([-0.2, -1.0, 5.2]) #30\nround_and_sum([-0.2, -1.0, 5.4]) #31\nround_and_su"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(lambda x: round(x,2), list1)) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(round(i))\n    print (sum(list2) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_round = 0\n    for i in range(len(list1)):\n        sum_round += round(list1[i])\n    return sum_round*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_all = 0\n    for number in list1:\n        print(round(number))\n        sum_of_all += number\n    return sum_of_all * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    return total*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    tot=0\n    for num in list1:\n        tot=tot+round(num)\n    print(tot*len(list1))\n    return(tot*len(list1))\n    \n    \ndef word_count(text):\n    '''\n    Write a function that takes a string and returns the number of words in the string.\n    '''\n    new_text=text.split()\n    return(len(new_text))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # First, we calculate the average of the numbers, rounding them to the second decimal place\n    rounded_numbers = [round(n,2) for n in list1]\n    # Then we find the total number of elements in the list\n    number_of_elements = len(list1)\n    # Now we calculate the total sum,\n    rounded_sum = sum(rounded_numbers)\n    # and multiply the total sum by the number of elements in the list\n    return rounded_sum * number_of_elements\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        round_number = round(i)\n        total = total + round_number\n    print \"total: \" + str(total) + \" total multiplied by length: \" + str(len(list1))\n    return 0\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result = result + i**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_Sum = 0\n    for i in range(n):\n        if(i%2 == 0):\n            cube_Sum += i**3\n    return cube_Sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for x in range(n):\n        if x % 2 == 0:\n            c = c + x**3\n    return c\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for x in range(n):\n        if x % 2 == 0:\n            total = total + x ** 3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #if n < 0:\n    #    return 0\n    return n * n * n\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            s = s + (i**3)\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return 2*cube_Sum(n-1) + n\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s = s + i**3\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(n) if i % 2 == 0)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2,n+1,2)])\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 0:\n        return \"()\"\n    if len(test_tup) == 1:\n        return \"(\" + str(test_tup[0]) + \")\"\n    if len(test_tup) > 1:\n        return str(test_tup[0]) + \"(\" + str(test_tup[1]) + \")\"\n    \ndef read_file(file_name, mode):\n    '''\n    Read a file\n    '''\n    file_handle = open(file_name, mode)\n    file_content = file_handle.read()\n    file_handle.close()\n    return file_content\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenate_tup = delimiter.join(str(x) for x in test_tup)\n    return concatenate_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str,test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    for item in test_tup:\n        print(delimiter.join(item))\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(list(test_tup[i]) for i in range(len(test_tup)))\n    \ndef test_concatenate_tuple():\n    assert concatenate_tuple((1,2,3,4,5)) == (1,2,3,4,5)\n    assert concatenate_tuple((1,2,3,4)) == (1,2,3,4)\n    assert concatenate_tuple((1,2,3,4,5,6)) == (1,2,3,4,5,6)\n    assert concatenate_tuple((1,2,3,4,5,6,7,8,9)) == (1,2,3,4,5,6,7,8,9)\n    print('Passed!')\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = str(test_tup).strip('()')\n    new_tup = new_tup.replace(',', '-')\n    new_tup = new_tup.replace('\\'', '')\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '#'\n    tup_concatenated = delimiter.join(test_tup)\n    return tup_concatenated\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_list = []\n    for val in test_tup:\n        new_list.append(val)\n    new_list = tuple(new_list)\n    return new_list\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print n,\n    total = 0\n    for i in range(1,n+1):\n        total = total + i**3\n    print \"Average of cubes is: \",total/n\n    \nfind_Average_Of_Cube(10"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0.0\n    i = 0\n    while i <= n:\n        avg += i*i*i\n        i += 1\n    return avg/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    a=0\n    for i in range(1,n+1):\n        a=a+i**3\n    return a/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    L = []\n    for i in range(1,n+1):\n        L.append(i**3)\n    return sum(L)/n\nprint(find_Average_Of_Cube(5))\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #define the array\n    i = 1\n    arr = []\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    summation = 0\n    for i in range(1,n+1):\n        summation = summation + (i**3)\n    average = summation/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    return (n * (n + 1) * (2 * n + 1)) / 6\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + pow(i, 3)\n    return (total / float(n))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if not test_tuple:\n        return\n    return [_[-1] for _ in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(el[-1] for el in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(z[-1] for z in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda s: s[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for word in test_tuple:\n        yield word[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([int(i[-1]) for i in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(element[-1] for element in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x:x[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = []\n    for i in test_tuple:\n        test_list.append(i[-1])\n    return test_list\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list_count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            i += 1\n    return i\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    sublist_counter = 0\n    for list2 in list1: \n        if x in list2: \n            sublist_counter += 1\n    return sublist_counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return sum([1 for sublist in list1 if x in sublist])\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    # return filter(lambda x: x % 2 == 0, nums)\n    return [x for x in nums if x % 2 == 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n: n%2==1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            yield n\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = [x for x in nums if x % 2 == 0]\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for number in nums:\n        if number % 2!= 0:\n            new_nums.append(number)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = list()\n    for number in nums:\n        if number % 2 == 1:\n            new_nums.append(number)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    day,month,year = dt.split('-')\n    return '{}-{}-{}'.format(day.zfill(2),month.zfill(2),year)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-', '')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.startswith('2000'):\n        return dt.replace('-', '/')\n    else:\n        return '-'.join([dt[2:4], dt[5:7], dt[0:2]+dt[8:]])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not dt:\n        return None\n    return re.sub('^(\\d{4})-(\\d{2})-(\\d{2})$', '\\\\3-\\\\2-\\\\1', dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace(\"-\", \"\")\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt)!= 10:\n        raise Exception('Input string must be 10 characters long')\n    # Get month and day from yyyy-mm-dd\n    month_day = dt[6:]\n    month = month_day[:2]\n    day = month_day[2:]\n    # Replace month and day with placeholders\n    new_month_day = '{}-{}-{}'.format(day, month, dt[:6])\n    return new_month_day\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_split = re.split(r'[-/]', dt)\n    new_dt = '{0}-{1}-{2}'.format(dt_split[2],dt_split[1],dt_split[0])\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove the non-numerical characters\n    dt = re.sub(\"[^0-9]\", \"\", dt)\n    # change the date format\n    if len(dt) == 8:\n        return '%s-%s-%s' % (dt[6:],dt[3:5],dt[0:2])\n    elif len(dt) == 6:\n        return '%s-%s-%s' % (dt[4:],dt[2:4],dt[0:2])\n    elif len(dt) == 4:\n        return '%s-%s-%s' % (dt[2:],dt[0:2],dt[2:4])\n    elif len(dt) == 2:\n        return '%s-%s-%s' % (dt[0:2],dt[0:2],dt[2:4])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #pattern = re.compile(\"([0-9]{4})-([0-9]{2})-([0-9]{2})\")\n    pattern = re.compile(\"([0-9]{2})-([0-9]{2})-([0-9]{4})\")\n    m = pattern.match(dt)\n    if m:\n        return \"-\".join([m.group(2),m.group(1),m.group(3)])\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_re = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    return date_re.sub(r'\\3-\\2-\\1',dt)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 3\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert isinstance(my_list, list)\n    N = len(my_list)\n    h = N//2\n    while h > 0:\n        for i in range(h,N):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for start in range(len(my_list) // 2, 0, -1):\n        for i in range(start, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= start and my_list[j - start] > temp:\n                my_list[j] = my_list[j - start]\n                j -= start\n            my_list[j] = temp\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if not my_list:\n        return\n    gap = len(my_list) // 2\n    while gap:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_InsertionSort(my_list, start_position, sublist_count)\n        sublist_count //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Start with a big gap, then reduce the gap\n    n = len(my_list)\n    gap = n/2\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(x and y) for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return (0,0)\n    elif len(test_tup1) == 1:\n        return (test_tup1[0], test_tup2[0])\n    elif len(test_tup1) > 1:\n        return (test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (a and b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([a&b for a,b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] & test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print 'Tuples are not of same length'\n        return\n    else:\n        return [tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(i_1, i_2) for i_1, i_2 in zip(test_tup1, test_tup2) if i_1 == i_2]\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Take the values of a, b, c, d\n    # from the function\n    d = -b/(2*a)\n    e = c/a\n    f = (c/a)**2\n    # Find the value of x and y\n    # using the equation\n    x = (d + (d**2 - 4*e)/(2*f))**0.5\n    y = (d - (d**2 - 4*e)/(2*f))**0.5\n    # Return the values of x and y\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4 * a * c < 0: \n        return None\n    if b**2 - 4 * a * c == 0: \n        return -b / (2 * a)\n    return (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # See page 399 of \"Determining the local and global coordinate systems\"\n    # and Wikipedia for a more detailed explanation\n    # http://en.wikipedia.org/wiki/Parabola#Directrix\n    #\n    # This function computes the local and global coordinates of the\n    # directrix.\n    #\n    # The function takes 3 arguments:\n    #    a: the parabola coefficient (x^2)\n    #    b: the parabola coefficient (x)\n    #    c: the parabola coefficient (1)\n    #\n    # It returns a pair of the form (x, y)\n    #    x: the x-coordinate of the directrix (a * y^2 + b * y + c = 0)\n    #    y: the y-coordinate of the directrix (a * x^2 + b * x + c = 0)\n    #\n    # Inputs:\n    #    a: float\n    #    b: float\n    #    c: float\n    #\n    # Outputs:\n    #    x: float\n    #    y: float\n    #\n    # Note: There is no check to see if the three arguments are all numbers\n    #\n    # Example:\n    #    parabola_directrix(2, 0, 1)\n    #    >>> (2.0, -1.0)\n    #\n    # Example:\n    #    parabola_directrix(2, 1, 1)\n    #    >>> (1.0, -0.5)\n    #\n    # Example:\n    #    parabola_directrix(2, 1, 1)\n    #    >>> (0.0, -1.0)\n    #\n    # Author: Michael Lindner (malindner at protonmail dot com)\n    #\n    # License: GPLv3\n    #\n    x = (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n    y = (a * x**2 + b * x + c) / a\n    return (x, y)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # x = (a**2 / 4) + sqrt(b**2 / 4 + c**2 / a**2)\n    x = (a**2 / 4) + sqrt(b**2 / 4 + c**2 / a**2)\n    # y = sqrt(c**2 / a**2) + sqrt(b**2 / 4 + c**2 / a**2)\n    y = sqrt(c**2 / a**2) + sqrt(b**2 / 4 + c**2 / a**2)\n    return (x, y)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b+((b**2)-4*a*c)**0.5)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4 * a * c\n    x = (-b + sqrt(delta)) / (2 * a)\n    y = (-b - sqrt(delta)) / (2 * a)\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Check if the parabola is vertical, i.e., a = 0\n    if a == 0:\n        return None\n    # Calculate the directrix: d = (-b / 2a)\n    d = (-b * 1.0 / (2.0 * a))\n    # Check if the parabola is positive or negative, i.e., b > 0 or b < 0\n    if b > 0:\n        # Calculate the y value of the directrix: y = -2d / b\n        y = -(2.0 * d) / b\n    else:\n        # Calculate the y value of the directrix: y = -2d / b\n        y = (2.0 * d) / b\n    # Return the directrix\n    return d\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b*b - 4*a*c)**0.5\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b / (2 * a)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not(isinstance(list1, list) and isinstance(list2, list)):\n        raise ValueError('One of the inputs is not a list.')\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for i in list1:\n        if i in list2:\n            common_elements.append(i)\n    if len(common_elements) > 0:\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common_elements = list(set(list1) & set(list2))\n    \n    if len(common_elements) > 0:\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #return len(list(set(list1) & set(list2))) > 0\n    return len([i for i in list1 if i in list2]) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) == len(list2) and len(set(list1) & set(list2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for el1 in list1:\n        for el2 in list2:\n            if el1 == el2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return set(list1) & set(list2)!= set([])\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Write your code here.\n    \n    return None\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = 0.5 * (base1 + base2) * height\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height_a = (base1 + base2)/2\n    return height_a*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)*height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    return 1.0*(base1 + base2)/2.0 + 1.0*height/2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Calculate the length of each side\n    side1 = base1+base2\n    side2 = base1*base2/2\n    side3 = base1*height\n    side4 = base1*height\n    #Find the median length\n    length = ((side1+side2+side3+side4)/2)\n    return length\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = base1 + base2 + height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height/2.0 + min(base1,base2)/2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n    "
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = (base1+base2)/2\n    b = (base1+base2)/2\n    return a*height/2\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]>number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if number > x:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if not arr:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if not arr:\n        return False\n    return arr[-1] < number\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for val in arr:\n        if val > number:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if len(text) < 2:\n        return False\n    if text[0] == 'a' and text[1] == 'b':\n        return True\n    if text[0] == 'b' and text[1] == 'a':\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.search(text)\n    if match:\n        print(\"Match found: {0}\".format(match.group()))\n    else:\n        print(\"No match found\")\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(?=b)+')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){2})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){3})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){4})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){5})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){6})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){7})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){8})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){9})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){10})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){11})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){12})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){13})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){14})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){15})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){16})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){17})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){18})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){19})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){20})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){21})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){22})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a(?=b){23})')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'a.*?b', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print('Found match, first_group:', match.group())\n    else:\n        print('No match')\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub('a+','a',text)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab*\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{1,3}\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{0,}\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{,5}\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{1,5}\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{0,5}\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{1,}\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab*?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{1,1}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{0,1}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{,1}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{1,}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{0,}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{1,}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{1,}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{0,1}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{0,2}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab{0,3}?\")\n    res = pattern.search(text)\n    if res:\n        print(\"Match Found: \"+res.group())\n    else:\n        print(\"Match Not Found!\")\ndef text_match_forty(text)"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"(\\b)a(\\b){1}(\\b)b\"\n    result = re.match(pattern,text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'ab+', text)\n    if result:\n        print result.group()\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[a]+b')\n    if pattern.match(text):\n        return True\n    return False\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 0 :\n        n = n/10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = 0\n    n = abs(n)\n    while (n!= 0) :\n        last_digit = n%10\n        n = n/10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1=[]\n    for i in list1:\n        if i < 0:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for element in list1:\n        if element < 0:\n            neg_nos.append(element)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n    \n    \ndef pos_nos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    return [i for i in list1 if i > 0]\n    \ndef pos_nos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list1):\n    '''\n    Write a python function to return the list of numbers which are divisible by 3.\n    '''\n    return [i for i in list1 if i % 3 == 0]\n    \n    \ndef div_by_3(list"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for elem in list1:\n        if elem < 0:\n            return elem\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for number in list1:\n        if number < 0:\n            negative_nos.append(number)\n    return negative_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = [i for i in list1 if i < 0]\n    return negative_list\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(ch for ch in str1 if ch%2==0)\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i.isdigit()])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in str1:\n        if ord(i)%2 == 0:\n            result = result + i\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if not i % 2:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace('x','')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for c in str1:\n        if ord(c)%2==0:\n            new_str+=c\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace(' ','')\n    for char in str1:\n        if ord(char) % 2 == 1:\n            str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create empty string to store the result\n    res = ''\n    for i in range(len(str1)):\n        if i%2==0:\n            res = res + str1[i]\n    print(res)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split()[1::2])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = ''\n    for i in range(0, len(str1)):\n        if i % 2 == 0:\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_count = 0\n    backward_count = 0\n    for x in test_list:\n        if x[0] == x[1]:\n            forward_count += 1\n        if x[0] == x[1][::-1]:\n            backward_count += 1\n    print forward_count, backward_count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    dict = {}\n    for pair in test_list:\n        if pair[0] not in dict:\n            dict[pair[0]] = 1\n        else:\n            dict[pair[0]] += 1\n        if pair[1] not in dict:\n            dict[pair[1]] = 1\n        else:\n            dict[pair[1]] += 1\n    return len(dict)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import defaultdict\n    test_dict = defaultdict(int)\n    for pair in test_list:\n        test_dict[pair[0]] += 1\n        test_dict[pair[1]] += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_pair_count = 0\n    backward_pair_count = 0\n    for tuple in test_list:\n        if tuple[0] == tuple[1]:\n            forward_pair_count += 1\n        if tuple[0] == tuple[-1]:\n            backward_pair_count += 1\n    return forward_pair_count + backward_pair_count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def compare_set(s1,s2):\n        '''\n        Use a counter to compare two sets\n        '''\n        l1 = [item for item in s1]\n        l2 = [item for item in s2]\n        if l1 == l2:\n            return 1\n        return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = sorted(test_list)\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = {}\n    for word in test_list:\n        word = word.lower()\n        if word in pairs:\n            pairs[word] += 1\n        else:\n            pairs[word] = 1\n    return pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        return 0\n    else:\n        index = 0\n        count = 0\n        temp = []\n        while index < len(test_list)-1:\n            if test_list[index][1] == test_list[index+1][0]:\n                count += 1\n                temp.append([test_list[index][0], test_list[index+1][1]])\n                index += 2\n            else:\n                index += 1\n        return count, temp\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    test_list.sort(key=itemgetter(0))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (test_list[i][1] < test_list[j][1] and test_list[i][0] > test_list[j][0]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1][::-1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return int(str(L[0]) + str(multiple_to_single(L[1:])))\n    \ndef get_digital_sum(n):\n    '''\n    Write a function to get the sum of all the digits of a positive integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return get_digital_sum(n/10) + n%10\n    \ndef get_digital_product(n):\n    '''\n    Write a function to get the product of all the digits of a positive integer.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*get_digital_product(n/10)\n    \ndef get_digital_max(n):\n    '''\n    Write a function to get the max product of two integers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*get_digital_max(n/10)\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    if n == 0:\n        return True\n    elif n < 10:\n        return True\n    else:\n        return is_palindrome(n/10) and n%10 == n%10\n    \ndef power(x,n):\n    '''\n    Write a function to calculate x^n (where x and n are both integers)\n    '''\n    if n == 0:\n        return 1\n    elif n%2 == 1:\n        return x*power(x,n-1)\n    else:\n        return power(x*x,n/2)\n    \ndef get_digit(n,d):\n    '''\n    Write a function to get the dth digit of a number.\n    '''\n    if d == 0:\n        return n%10\n    else:\n        return get_digit(n/10,d-1)\n    \ndef to_binary(n):\n    '''\n    Write a function to convert a non-negative integer to binary.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return to_binary(n/2) + n%2\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return reduce(lambda x,y: x*10+y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # return int(''.join(str(x) for x in L))\n    return sum(int(x) for x in L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x, y: x * 10 + y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    elif len(L) == 2:\n        return L[0]*10+L[1]\n    elif len(L) > 2:\n        return L[0]*10**(len(L)-2)+L[-1]\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = sorted(L)\n    #print L\n    res = ''\n    for i in L:\n        res += str(i)\n    return int(res)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # base case\n    if len(L) == 1:\n        return L[0]\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # for x in range(len(L)):\n    #     print(L[x])\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str(L[x]) +'')\n    #     # print(L[x],'')\n    #     # print(str"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'^(.*?)(\\w*?)(\\s)(\\w+)(.*)')\n    m = pattern.search(text)\n    return m.group(3)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.split()\n    pos = []\n    for i in range(len(text)):\n        if re.match(r'^ad\\.v$', text[i].lower())!= None:\n            pos.append(i+1)\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.findall(\"[A-Z][^A-Z]*\", text)\n    adverb_position = []\n    for i in range(len(adverb)):\n        adverb_position.append(text.index(adverb[i]))\n    adverb_position.sort()\n    return adverb, adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Using Regular Expression to find the adverb and it's position\n    pattern_adverb = re.compile(r'\\w+ly')\n    # Check if the sentence has the adverb\n    if pattern_adverb.search(text):\n        # If it has, then find the first adverb\n        index_adverb = pattern_adverb.search(text).span()\n        # Return the adverb and its position\n        return index_adverb\n    else:\n        # If it doesn't have, then return None\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = re.sub('[0-9]', '', text)\n    text = text.replace('\\n', '')\n    text = text.lower()\n    \n    positions = []\n    for i in range(len(text)):\n        if text[i] == 'r':\n            positions.append(i)\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = {}\n    #start_pattern = re.compile(r'\\w+|[\u2018\u2019]\\w*|[\u2019\u2019]\\w+')\n    #end_pattern = re.compile(r'[\u2018\u2019]\\w+|[\u2018\u2019]\\w+|\\w+[\u2018\u2019]')\n    start_pattern = re.compile(r'[\u2018\u2019](\\w+|[\u2018\u2019])')\n    end_pattern = re.compile(r'\\w+[\u2018\u2019]|[\u2018\u2019]\\w+')\n    #start_pattern = re.compile(r'(?<=\\w)\\w+')\n    #end_pattern = re.compile(r'\\w+(?=\\w)')\n    #start_pattern = re.compile(r'\\w+|[\u2018\u2019]\\w*|[\u2019\u2019]\\w+')\n    #end_pattern = re.compile(r'[\u2018\u2019]\\w+|[\u2018\u2019]\\w+|\\w+[\u2018\u2019]')\n    #print start_pattern.findall(text)\n    #print end_pattern.findall(text)\n    start_list = start_pattern.findall(text)\n    end_list = end_pattern.findall(text)\n    #print start_list\n    #print end_list\n    if start_list and end_list:\n        #print start_list[0],end_list[0]\n        result[start_list[0]] = end_list[0]\n    return result\ndef find_in_sentence(text,sentence_start,sentence_end):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = {}\n    sentence = text[sentence_start:sentence_end]\n    #start_pattern = re.compile(r'\\w+|[\u2018\u2019]\\w*|[\u2019\u2019]\\w+')\n    #end_pattern = re.compile(r'[\u2018\u2019]\\w+|[\u2018\u2019]\\w+|\\w+[\u2018\u2019]')\n    start_pattern = re.compile(r'[\u2018\u2019](\\w+|[\u2018\u2019])')\n    end_pattern = re.compile(r'\\w+[\u2018\u2019]|[\u2018\u2019]\\w+')\n    #start_pattern = re.compile(r'(?<=\\w)\\w+')\n    #end_pattern = re.compile(r'\\w+(?=\\w)')\n    #start_pattern = re.compile(r'\\w+|[\u2018\u2019]\\w*|[\u2019\u2019]\\w+')\n    #end_pattern = re.compile(r'[\u2018\u2019]\\w+|[\u2018\u2019]\\w+|\\w+[\u2018\u2019]')\n    #print start_pattern.findall(text)\n    #print end_pattern.findall(text)\n    start_list = start_pattern.findall(sentence)\n    end_list = end_pattern.findall(sentence)\n    #print start_list\n    #print end_list\n    if start_list and end_list:\n        #print start_list[0],end_list[0]\n        result[start_list[0]] = end_list[0]\n    return result\ndef find_last_adverb(text,positions):\n    '''\n    Write a function to find the last adverb and their positions in a given sentence.\n    '''\n    result = {}\n    for item in positions:\n        if not positions[item] == '<br />' and not positions[item] == '<br/>':\n            #print item, positions[item]\n            result[item] = positions[item]\n    return result\ndef find_adverb_position_and_last_adverb(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = {}\n    positions = find_adverb_position(text)\n    last_positions = find_last_adverb(text,positions)\n    #print positions\n    #print last_positions\n    if positions and last_positions:\n        for item in positions:\n            result[item] = positions[item]\n        for item in last_positions:\n            result[item] = last_positions[item]\n    return result\ndef find_first_adverb(text,position):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = {}\n    if position:\n        #print position\n        start_pattern = re.compile(r'[\u2018\u2019](\\w+|[\u2018\u2019])')\n        #start_pattern = re.compile(r'(?<=\\w)\\w+')\n        #start_pattern = re.compile(r'\\w+')\n        #start_pattern = re.compile(r'\\w+|[\u2018\u2019]\\w+')\n        start_list = start_pattern.findall(text)\n        #print start_list\n        if start_list:\n            #print start_list[0]\n            result[start_list[0]] = position\n    return result\ndef find_in_sentence_and_first_adverb(text,sentence_start,sentence_end):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = {}\n    sentence = text[sentence_start:sentence_end]\n    #start_pattern = re.compile(r'\\w+|[\u2018\u2019]\\w*|[\u2019\u2019]\\w+')\n    #end_pattern = re.compile(r'[\u2018\u2019]\\w+|[\u2018\u2019]\\w+|\\w+[\u2018\u2019]')\n    start_pattern = re.compile(r'[\u2018\u2019](\\w+|[\u2018\u2019])')\n    end_pattern = re.compile(r'\\w+[\u2018\u2019]|[\u2018\u2019]\\w+')\n    #start_pattern = re.compile(r'(?<=\\w)\\w+')\n    #end_pattern = re.compile(r'\\w+(?=\\w)')\n    #start_pattern = re.compile(r'\\w+|[\u2018\u2019]\\w*|[\u2019\u2019]\\w+')\n    #end_pattern = re.compile(r'[\u2018\u2019]\\w+|[\u2018\u2019]\\w+|\\w+[\u2018\u2019]')\n    #print start_pattern.findall(text)\n    #print end_pattern.findall(text)\n    start_list = start_pattern.findall(sentence)\n    end_list = end_pattern.findall(sentence)\n    #print start_list\n    #print end_list\n    if start_list and end_list:\n        #print start_list[0],end_list[0]\n        result[start_list[0]] = end_list[0]\n    return result\ndef find_second_adverb(text,position):\n    '''\n    Write a function to find the second adverb and their positions in a given sentence.\n    '''\n    result = {}\n    if position:\n        #print position\n        start_pattern = re.compile(r'[\u2018\u2019](\\w+|[\u2018\u2019])')\n        #start_pattern = re.compile(r'(?<=\\w)\\w+')\n        #start_pattern = re.compile(r'\\w+')\n        #start_pattern = re.compile(r'\\w+|[\u2018\u2019]\\w+')\n        start_list = start_pattern.findall(text)\n        #print start_list\n        if start_list:\n            #print start_list[0]\n            result[start_list[0]] = position"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    verbs = re.findall(r'(?<=^|\\s)(\\w+)(?=$|\\s)', text)\n    adverb = []\n    indices = []\n    for index, verb in enumerate(verbs):\n        if verb == 'adverb':\n            adverb.append(verb)\n            indices.append(index)\n    if adverb:\n        return adverb, indices\n    return None, None\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile('[\\d]+[.][\\d]+[,]')\n    list1 = pattern.findall(text)\n    return list1\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['can', 'could','may','might','must', 'will', 'would']\n    i = 0\n    result = []\n    while i < len(text):\n        text_split = text.split()\n        for word in text_split:\n            if word in adverbs:\n                result.append((i, word))\n                break\n        i += 1\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match_object = re.search(r'adverb', text)\n    adverb_positions = []\n    if match_object:\n        adverb_positions = match_object.span()\n    return adverb_positions\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if type(l)!= type(1):\n        return \"wrong input\"\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l < 0:\n        print(\"Enter a positive number!\")\n    else:\n        return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6 * l**2\n    return surfacearea\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count=0\n    neg_count=0\n    for i in nums:\n        if i>0:\n            pos_count+=1\n        if i<0:\n            neg_count+=1\n    return float(pos_count/float(len(nums)))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    print(count/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(nums.count(1))/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count = count + 1\n    return count/len(nums)\ndef duplicate_elements(nums):\n    '''\n    Write a function to find all the duplicate elements in an array of integers\n    '''\n    seen = set()\n    duplicate = set()\n    for i in nums:\n        if i in seen:\n            duplicate.add(i)\n        else:\n            seen.add(i)\n    return duplicate\ndef sort_by_second_element(nums):\n    '''\n    Write a function that takes in an array of integers and returns a sorted version of that array in the\n    same way that the built-in sort method works.\n    '''\n    return sorted(nums, key=lambda x: x[1])\ndef almost_sorted(nums):\n    '''\n    Given an array of integers, write a function that returns True if the array is almost sorted and False otherwise.\n    An array is almost sorted if it is either sorted, or an element is in the middle of the array and both of its\n    neighbors are also in the array.\n    '''\n    for i in xrange(1, len(nums)):\n        if nums[i] < nums[i-1]:\n            return False\n    return True\ndef find_uniques(nums):\n    '''\n    Write a function that takes in an array of integers and returns a new array containing only the unique integers in the input array.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\ndef check_permutation(str1, str2):\n    '''\n    Write a function that takes in two strings and returns True if the two strings are permutations of each other and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    sorted_str1 = sorted(str1)\n    sorted_str2 = sorted(str2)\n    for i in range(0, len(sorted_str1)):\n        if sorted_str1[i]!= sorted_str2[i]:\n            return False\n    return True\ndef find_longest_all_pallindromes(str_list):\n    '''\n    Write a function that takes in a list of strings and returns the longest palindrome in the list.\n    '''\n    longest = 0\n    for i in str_list:\n        if len(i) > longest:\n            longest = len(i)\n    return longest\ndef unique_words(str_list):\n    '''\n    Write a function that takes in a list of strings and returns the number of unique strings in the list.\n    '''\n    unique_words = []\n    for i in str_list:\n        if i not in unique_words:\n            unique_words.append(i)\n    return len(unique_words)\ndef zero_matrix(rows, columns):\n    '''\n    Write a function that takes in a rows x columns 2-D array and returns the number of zeroes in the array.\n    '''\n    matrix = []\n    for i in range(0, rows):\n        matrix.append([])\n        for j in range(0, columns):\n            matrix[i].append(0)\n    zeroes = 0\n    for i in matrix:\n        zeroes = zeroes + i.count(0)\n    return zeroes\ndef sum_matrix(rows, columns):\n    '''\n    Write a function that takes in a rows x columns 2-D array and returns the sum of the array.\n    '''\n    matrix = []\n    for i in range(0, rows):\n        matrix.append([])\n        for j in range(0, columns):\n            matrix[i].append(0)\n    total = 0\n    for i in range(0, rows):\n        for j in range(0, columns):\n            total = total + matrix[i][j]\n    return total\ndef binary_search(nums, target):\n    '''\n    Write a function that takes in a sorted array of integers and returns the index of the target number if it is in the array,\n    otherwise returns -1\n    '''\n    start = 0\n    end = len(nums) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\ndef find_duplicate(nums):\n    '''\n    Write a function that takes in a list of integers and returns a list of all duplicate values in the list.\n    '''\n    seen = set()\n    duplicate = set()\n    for i in nums:\n        if i in seen:\n            duplicate.add(i)\n        else:\n            seen.add(i)\n    return duplicate\ndef insertion_sort(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted version of that list in ascending order.\n    '''\n    for i in xrange(1, len(nums)):\n        current_value = nums[i]\n        previous_index = i - 1\n        while previous_index >= 0 and nums[previous_index] > current_value:\n            nums[previous_index + 1] = nums[previous_index]\n            previous_index = previous_index - 1\n        nums[previous_index + 1] = current_value\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function that takes in a list of integers and returns a sorted version of that list in ascending order.\n    '''\n    def merge(left, right):\n        if len(left) == 0:\n            return right\n        if len(right) == 0:\n            return left\n        result = []\n        left_index = 0\n        right_index = 0\n        while left_index < len(left) and right_index < len(right):\n            if left[left_index] < right[right_index]:\n                result.append(left[left_index])\n                left_index = left_index + 1\n            else:\n                result.append(right[right_index])\n                right_index = right_index + 1\n        if left_index == len(left):\n            result = result + right[right_index:]\n        else:\n            result = result + left[left_index:]\n        return result\n    def merge_sort_helper(nums, left, right):\n        if left >= right:\n            return\n        mid = (left + right) / 2\n        merge_sort_helper(nums, left, mid)\n        merge_sort_helper(nums, mid + 1, right)\n        merge(left, right)\n    merge_sort_helper(nums, 0, len(nums) - 1)\n    return nums\ndef find_max(nums):\n    '''\n    Write a function that takes in a list of integers and returns the largest integer in the list.\n    '''\n    max_num = nums[0]\n    for i in nums:\n        if i > max_num:\n            max_num = i\n    return max_num\ndef find_second_max(nums):\n    '''\n    Write a function that takes in a list of integers and returns the second largest integer in the list.\n    '''\n    max_num = nums[0]\n    second_max = max_num\n    for i in nums:\n        if i > max_num:\n            second_max = max_num\n            max_num = i\n        elif i > second_max and i!= max_num:\n            second_max = i\n    return second_max\ndef find_missing_integer(nums):\n    '''\n    Write a function that takes in a list of integers and returns the integer that is missing from the array.\n    '''\n    result = 1\n    while result in nums:\n        result = result + 1\n    return result\ndef find_smallest_positive(nums):\n    '''\n    Write a function that takes in a list of integers and returns the smallest positive integer that is greater than 0.\n    '''\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if nums[i] < 0:\n            neg += 1\n        else:\n            pos += 1\n    return float(pos)/n\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = array('i',nums)\n    return (nums.count(1) * 1.0) / nums.buffer_info()[1]\n    \ndef find_two_smallest(nums):\n    '''\n    Write a function to find the two smallest numbers in an array.\n    '''\n    nums = array('i',nums)\n    first_min = nums[0]\n    second_min = nums[1]\n    for i in range(2, len(nums)):\n        if nums[i] < first_min:\n            second_min = first_min\n            first_min = nums[i]\n        elif nums[i] < second_min:\n            second_min = nums[i]\n    return (first_min, second_min)\n    \ndef find_largest_smaller_than(nums, target):\n    '''\n    Write a function to find the first element in an array that is larger than a given element.\n    If there is no such element, return -1.\n    '''\n    nums = array('i',nums)\n    if target < nums[0]:\n        return -1\n    for i in range(len(nums)):\n        if nums[i] > target:\n            return nums[i-1]\n    return nums[-1]\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p_count = 0\n    n_count = 0\n    for num in nums:\n        if num > 0:\n            p_count += 1\n        elif num < 0:\n            n_count += 1\n    return float(p_count) / float(p_count + n_count)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #return float(nums.count(1))/len(nums)\n    pos = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n    return float(pos)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    num_pos = 0\n    for i in nums:\n        if i > 0:\n            num_pos += 1\n    return num_pos/len(nums)\ndef reverse(nums):\n    '''\n    Write a function to reverse a linked list.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    start_i = 0\n    end_i = len(nums) - 1\n    while start_i < end_i:\n        nums[start_i], nums[end_i] = nums[end_i], nums[start_i]\n        start_i += 1\n        end_i -= 1\n    return nums\ndef insert_sort(nums):\n    '''\n    Write a function to sort an array of 0s, 1s and 2s in ascending order.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    for i in range(1, len(nums)):\n        pos_i = i\n        while pos_i > 0 and nums[pos_i] < nums[pos_i - 1]:\n            nums[pos_i], nums[pos_i - 1] = nums[pos_i - 1], nums[pos_i]\n            pos_i -= 1\n    return nums\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an unsorted array.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    start_i = 0\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[start_i]:\n            start_i += 1\n            nums[start_i] = nums[i]\n    return start_i + 1\ndef find_minimum(nums):\n    '''\n    Write a function to find the minimum value in an array.\n    '''\n    if len(nums) == 0:\n        return 0\n    min_val = nums[0]\n    for i in nums:\n        if i < min_val:\n            min_val = i\n    return min_val\ndef selection_sort(nums):\n    '''\n    Write a function to sort an array of 0s, 1s and 2s in ascending order.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    for i in range(len(nums) - 1):\n        min_i = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[min_i]:\n                min_i = j\n        nums[i], nums[min_i] = nums[min_i], nums[i]\n    return nums\ndef find_pivot(nums, start, end):\n    '''\n    Write a function to find the pivot point in an array.\n    '''\n    if end - start == 0:\n        return start\n    if end - start == 1:\n        return end\n    mid = (start + end) / 2\n    if nums[start] < nums[mid]:\n        if nums[start] < nums[end]:\n            return find_pivot(nums, start, end)\n    elif nums[start] > nums[mid]:\n        if nums[end] < nums[start]:\n            return find_pivot(nums, start, end)\n    else:\n        return mid\ndef find_pivot_2(nums, start, end):\n    '''\n    Write a function to find the pivot point in an array.\n    '''\n    if end - start == 0:\n        return start\n    if end - start == 1:\n        return end\n    mid = (start + end) / 2\n    if nums[start] < nums[mid]:\n        if nums[mid] < nums[end]:\n            return find_pivot_2(nums, start, end)\n    elif nums[start] > nums[mid]:\n        if nums[mid] < nums[start]:\n            return find_pivot_2(nums, start, end)\n    else:\n        return mid\ndef quick_sort(nums):\n    '''\n    Write a function to sort an array of 0s, 1s and 2s in ascending order.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    start_i = 0\n    end_i = len(nums) - 1\n    pivot_i = find_pivot(nums, start_i, end_i)\n    nums[start_i], nums[pivot_i] = nums[pivot_i], nums[start_i]\n    i = start_i + 1\n    for j in range(start_i + 1, len(nums)):\n        if nums[j] < nums[start_i]:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n    nums[start_i], nums[i - 1] = nums[i - 1], nums[start_i]\n    if i - 2 - start_i > 0:\n        quick_sort(nums[start_i + 1:i - 1])\n    if i - 3 - start_i > 0:\n        quick_sort(nums[i - 2 - start_i:i - 1])\n    if i - 4 - start_i > 0:\n        quick_sort(nums[i - 3 - start_i:i - 2 - start_i])\n    return nums\ndef find_median_sorted(nums):\n    '''\n    Write a function to find the median of an unsorted array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) % 2 == 0:\n        return (nums[len(nums) / 2] + nums[len(nums) / 2 - 1]) / 2\n    else:\n        return nums[len(nums) / 2]\ndef find_median_sorted_2(nums):\n    '''\n    Write a function to find the median of an unsorted array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) % 2 == 0:\n        return (nums[len(nums) / 2] + nums[len(nums) / 2 - 1]) / 2\n    else:\n        return nums[len(nums) / 2]\ndef majority_element(nums):\n    '''\n    Write a function to find the majority element in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    candidate_1, candidate_2 = 0, 0\n    for i in nums:\n        if i == candidate_1:\n            candidate_1 += 1\n        elif i == candidate_2:\n            candidate_2 += 1\n        elif candidate_1 == 0:\n            candidate_1 = 1\n        elif candidate_2 == 0:\n            candidate_2 = 1\n        else:\n            candidate_1 -= 1\n            candidate_2 -= 1\n    return candidate_1\ndef majority_element_2(nums):\n    '''\n    Write a function to find the majority element in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    candidate_1, candidate_2 = 0, 0\n    for i in nums:\n        if i == candidate_1:\n            candidate_1 += 1\n        elif i == candidate_2:\n            candidate_2 += 1\n        elif candidate_1 == 0:\n            candidate_1 = 1\n        e"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg_num = 0\n    for i in list1:\n        if i < 0:\n            max_neg_num = max(max_neg_num, i)\n    return max_neg_num\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1==[]:\n        return None\n    if len(list1)==1:\n        return list1[0]\n    max1=list1[0]\n    for i in range(1,len(list1)):\n        if max1>list1[i] and list1[i]<0:\n            max1=list1[i]\n    return max1\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < max:\n            max = list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            return list1[i]\n    return None \n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    count=0\n    index=0\n    for i in range(len(list1)):\n        if(list1[i] < 0):\n            if(count < 1):\n                index=i\n                count+=1\n            else:\n                index=i\n    return list1[index]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1;\n    for number in list1:\n        if number < 0 and number > max:\n            max = number\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[0]\n    \ndef smallest_pos(list2): \n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    list2.sort()\n    return list2[-1]\n    \ndef test_large_small():\n    assert largest_neg([-1, 2, 3, 4, -5]) == -1\n    assert smallest_pos([1, -2, -3, 4, 5]) == 1\n    \ndef reverse_list(l): \n    '''\n    Write a python function to reverse a list of numbers.\n    '''\n    l.reverse()\n    return l\n    \ndef test_reverse_list():\n    assert reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n    assert reverse_list([1, -2, -3, 4, 5]) == [-5, -4, -3, -2, -1]\n    assert reverse_list([1, 0, -1, -2, 2, 0]) == [-2, -1, 0, 1, 2, 0]\n    \ndef is_palindrome(str1): \n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\n    \ndef test_is_palindrome():\n    assert is_palindrome(\"radar\") == True\n    assert is_palindrome(\"rado\") == False\n    assert is_palindrome(\"rad\") == True\n    \ndef merge_dict(dict1, dict2): \n    '''\n    Write a python function to merge two dictionaries.\n    '''\n    temp = {}\n    for k in dict1:\n        temp[k] = dict1[k]\n    for k in dict2:\n        if k in temp:\n            temp[k] += dict2[k]\n        else:\n            temp[k] = dict2[k]\n    return temp\n    \ndef test_merge_dict():\n    assert merge_dict({\"a\": 1, \"b\": 2}, {\"b\": 3, \"c\": 4}) == {\"a\": 1, \"b\": 5, \"c\": 4}\n    assert merge_dict({\"a\": 1, \"b\": 2}, {\"b\": 3, \"a\": 4}) == {\"a\": 4, \"b\": 5}\n    assert merge_dict({\"a\": 1, \"b\": 2}, {\"b\": 3, \"c\": 4}) == {\"a\": 1, \"b\": 3, \"c\": 4}\n    assert merge_dict({\"a\": 1, \"b\": 2, \"c\": 3}, {\"a\": 4, \"b\": 5}) == {\"a\": 4, \"b\": 5, \"c\": 3}\n    \ndef sum_of_squares(l):\n    return sum(x * x for x in l)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    pos_list = []\n    for item in list1:\n        if item > 0:\n            pos_list.append(item)\n    return max(pos_list)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    if list2==[]:\n        return -1\n    else:\n        return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # your code goes here\n    big=list1[0]\n    for i in list1:\n        if i < 0 and i > big:\n            big=i\n    return big\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return map(lambda x: (x[0], x[1][0:K]), test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for x in test_list:\n        print(x[K:])\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x, y[K:]) for x, y in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) >= K:\n            result.append(tup[0:K])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for a_tuple in test_list:\n        if len(a_tuple) == K:\n            result.append(a_tuple)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(tup[0],tup[1][K:]) for tup in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for ele in test_list:\n        if len(ele) >= K:\n            result.append(ele[0:K])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = (test_list[i][0][0:K], test_list[i][1])\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimed_list = []\n    for elem in test_list:\n        if len(elem) >= K:\n            trimed_list.append(elem[:K])\n        else:\n            trimed_list.append(elem)\n    return trimed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(t[0], t[1][:K]) for t in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(test_tup1[i]*test_tup2[i] for i in range(len(test_tup1)))\n    \ndef index_multiplication_map(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(operator.mul, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for idx, val in enumerate(test_tup1):\n        result.append(val*test_tup2[idx])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] * test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += ((test_tup1[i]*test_tup2[i]),)\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # test_tup1 = (1,2,3,4)\n    # test_tup2 = (2,3,4,5)\n    # result = ()\n    # for i in test_tup1:\n    #     for j in test_tup2:\n    #         result.append((i,j))\n    # print result\n    return tuple([(i,j) for i in test_tup1 for j in test_tup2])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        index_mult = ()\n        for i in range(len(test_tup1)):\n            index_mult += (test_tup1[i] * test_tup2[i],)\n        return index_mult\n    else:\n        return -1\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [i*j for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"The argument must be of type tuple.\")\n    if not len(test_tup1) or not len(test_tup2):\n        raise ValueError(\"The argument must have at least one element.\")\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in xrange(len(test_tup1)):\n        yield (test_tup1[i] * test_tup2[i],)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication = tuple()\n    for index_value in range(0,len(test_tup1)):\n        index_multiplication = index_multiplication + (test_tup1[index_value] * test_tup2[index_value],)\n    return index_multiplication\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup) \n    for i in lst: \n        print (i, \"occured\", cnt[i], \"times\") \nlst = [1, 2, 1, 3, 4, 4, 5, 1, 1, 2] \ntup = (1, 2, 3, 4, 4, 4, 5, 1, 1, 2) \ncount_Occurrence(tup, lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst) \n    for k,v in counter.items(): \n        if k in tup: \n            return (k,v)\n        else:\n            return None\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst1=[]\n    for i in tup:\n        lst1.append(i)\n    print lst1\n    for j in lst:\n        if j in lst1:\n            lst1[lst1.index(j)]=lst1.count(j)\n        else:\n            lst1.append(j)\n            lst1[lst1.index(j)]=lst1.count(j)\n    return lst1\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)[lst] \ndef dif1(): \n    '''\n    Write a python function to get the difference between the two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = []\n    for i in l1:\n        if i not in l2:\n            l3.append(i)\n    for i in l2:\n        if i not in l1:\n            l3.append(i)\n    return l3 \ndef dif2(): \n    '''\n    Write a python function to get the difference between the two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = [i for i in l1 if i not in l2]\n    l4 = [i for i in l2 if i not in l1]\n    return l3 + l4 \ndef dif3(): \n    '''\n    Write a python function to get the difference between the two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = []\n    for i in l1:\n        if i not in l2:\n            l3.append(i)\n    for i in l2:\n        if i not in l1:\n            l3.append(i)\n    return l3 \ndef dif4(): \n    '''\n    Write a python function to get the difference between the two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = [i for i in l1 if i not in l2]\n    l4 = [i for i in l2 if i not in l1]\n    return l3 + l4 \ndef dif5(): \n    '''\n    Write a python function to get the difference between the two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = []\n    for i in l1:\n        if i not in l2:\n            l3.append(i)\n    for i in l2:\n        if i not in l1:\n            l3.append(i)\n    return l3 \ndef common_elements(lst1, lst2):\n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    lst3 = []\n    for i in lst1:\n        if i in lst2:\n            lst3.append(i)\n    return lst3\ndef common_elements2(lst1, lst2):\n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    lst3 = []\n    for i in lst1:\n        if i in lst2:\n            lst3.append(i)\n    return lst3 \ndef common_elements3(lst1, lst2):\n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    return list(set(lst1) & set(lst2))\ndef common_elements4(lst1, lst2):\n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    lst3 = []\n    for i in lst1:\n        if i in lst2:\n            lst3.append(i)\n    return lst3 \ndef common_elements5(lst1, lst2):\n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    return list(set(lst1) & set(lst2))\ndef h1(): \n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n    return l3 \ndef h2(): \n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = [i for i in l1 if i in l2]\n    return l3 \ndef h3(): \n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n    return l3 \ndef h4(): \n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = [i for i in l1 if i in l2]\n    return l3 \ndef h5(): \n    '''\n    Write a python function to get the common elements of two lists\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [4,5,6,7]\n    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n    return l3 \ndef is_permutation(lst1, lst2):\n    '''\n    Write a python function to check whether two lists are permutations of each other\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    lst3 = []\n    for i in lst1:\n        if i not in lst2:\n            lst3.append(i)\n    for i in lst2:\n        if i not in lst1:\n            lst3.append(i)\n    return lst3 \ndef is_permutation2(lst1, lst2):\n    '''\n    Write a python function to check whether two lists are permutations of each other\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    lst3 = []\n    for i in lst1:\n        if i not in lst2:\n            lst3.append(i)\n    for i in lst2:\n        if i not in lst1:\n            lst3.append(i)\n    return lst3 \ndef is_permutation3(lst1, lst2):\n    '''\n    Write a python function to check whether two lists are permutations of each other\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    return sorted(lst1) == sorted(lst2)\ndef is_permutation4(lst1, lst2):\n    '''\n    Write a python function to check whether two lists are permutations of each other\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    return sorted(lst1) == sorted(lst2)\ndef is_permutation5(lst1, lst2):\n    '''\n    Write a python function to check whether two lists are permutations of each other\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    return sorted(lst1) == sorted(lst2)\ndef is_permutation6(lst1, lst2):\n    '''\n    Write a python function to check whether two lists are permutations of each other\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    return sorted(lst1) == sorted(lst2)\ndef is_permutation7(lst1, lst2):\n    '''\n    Write a python function to check whether two lists are permutations o"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Initialize a dictionary\n    d = {}\n    # Iterate through each tuple and get the elements\n    for i in tup:\n        d[i] = d.get(i,0) + 1\n    # Print the dictionary\n    for i in lst:\n        if i in d:\n            print (i, 'occurs', d[i], 'times in', tup)\n        else:\n            print (i, 'not present in', tup)"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).get(tup, 0)\ndef count_Occurrence_two(lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum(lst.count(i) for i in lst)\ndef freq_of_char(string): \n    '''\n    Write a python function to find the frequency of a character in a string.\n    '''\n    char_freq = dict(zip(string,range(len(string))))\n    for key,value in char_freq.items(): \n        print key,value\ndef pair_with_sum(lst, k): \n    '''\n    Write a python function to find the pair (a,b) in list lst which sum is equal to k.\n    '''\n    for i in lst: \n        for j in lst: \n            if i + j == k: \n                print (i,j)\n                break\ndef find_max_subarray_Sum(lst): \n    '''\n    Write a python function to find the max sum of any subarray in list lst.\n    '''\n    sums = []\n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            sums.append(sum(lst[i:j+1]))\n    print max(sums)\ndef find_max_subarray_start_end_index(lst): \n    '''\n    Write a python function to find the max sum of any subarray in list lst.\n    '''\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    current_sum = 0\n    for i in range(len(lst)): \n        current_sum += lst[i]\n        if current_sum > max_sum: \n            max_sum = current_sum\n            max_start = i\n            max_end = i\n        if current_sum < 0: \n            current_sum = 0\n    return max_sum, max_start, max_end\ndef print_alternate_pairs(lst): \n    '''\n    Write a python function to find the alternate pairs of an array.\n    '''\n    for i in range(0,len(lst),2): \n        print lst[i], lst[i+1]\ndef find_inversion_index(lst): \n    '''\n    Write a python function to find the index of first inversion of array lst.\n    '''\n    temp = lst[:]\n    temp.sort()\n    for i in range(len(temp)): \n        if lst[i]!= temp[i]: \n            return i\n    return None\ndef longest_subsequence(lst): \n    '''\n    Write a python function to find the longest subsequence of consecutive integers in list lst.\n    '''\n    lst.sort()\n    prev = None\n    longest = 0\n    for i in range(len(lst)): \n        if prev == lst[i]: \n            continue\n        if prev is None: \n            longest = max(longest, i+1)\n            prev = lst[i]\n        else: \n            prev = lst[i]\n            longest = max(longest, i-prev+1)\n    return longest\ndef swap_arrays(a,b): \n    '''\n    Write a python function to swap the array elements using one-pass.\n    '''\n    a = a[:]\n    b = b[:]\n    a[0:len(b)], b[0:len(a)] = b[0:len(a)], a[0:len(b)]\n    return a,b\ndef swap_arrays_2(a,b): \n    '''\n    Write a python function to swap the array elements using one-pass.\n    '''\n    a = a[:]\n    b = b[:]\n    a[0:len(b)], b[0:len(a)] = b[0:len(a)], a[0:len(b)]\n    return a,b\ndef rotate_matrix(lst): \n    '''\n    Write a python function to rotate a matrix by 90 degrees.\n    '''\n    n = len(lst)\n    for i in range(n/2): \n        for j in range(i, n-1-i): \n            temp = lst[i][j]\n            lst[i][j] = lst[n-1-j][i]\n            lst[n-1-j][i] = lst[n-1-i][n-1-j]\n            lst[n-1-i][n-1-j] = lst[j][n-1-i]\n            lst[j][n-1-i] = temp\n    return lst\ndef rotate_matrix_2(lst): \n    '''\n    Write a python function to rotate a matrix by 90 degrees.\n    '''\n    n = len(lst)\n    for i in range(n/2): \n        for j in range(i, n-1-i): \n            lst[i][j], lst[n-1-j][i], lst[n-1-i][n-1-j], lst[j][n-1-i] = lst[j][n-1-i], lst[n-1-j][i], lst[n-1-i][n-1-j], lst[i][j]\n    return lst\ndef find_max_subarray_sum_in_rotated_array(lst): \n    '''\n    Write a python function to find the maximum contiguous subarray sum in rotated array.\n    '''\n    prev = 0\n    max_sum = 0\n    for i in range(len(lst)): \n        prev += lst[i]\n        if prev > max_sum: \n            max_sum = prev\n        if lst[i] < prev: \n            prev = 0\n    return max_sum\ndef find_max_subarray_sum_in_rotated_array_2(lst): \n    '''\n    Write a python function to find the maximum contiguous subarray sum in rotated array.\n    '''\n    lst.sort()\n    prev = 0\n    max_sum = 0\n    for i in range(len(lst)): \n        prev += lst[i]\n        if prev > max_sum: \n            max_sum = prev\n        if lst[i] < prev: \n            prev = 0\n    return max_sum\ndef find_min_rotation_index(lst): \n    '''\n    Write a python function to find the index of rotation point in a sorted array.\n    '''\n    n = len(lst)\n    if n < 3: \n        return None\n    for i in range(n): \n        if lst[i] < lst[i+1]: \n            return i\n    return None\ndef sort_by_frequency(lst): \n    '''\n    Write a python function to sort the elements of list lst by frequency of elements in it.\n    '''\n    d = dict(Counter(lst))\n    lst.sort(key = lambda x: (-d[x],x))\n    return lst\ndef rotate_matrix_naive(lst): \n    '''\n    Write a python function to rotate a matrix by 90 degrees.\n    '''\n    n = len(lst)\n    for i in range(n/2): \n        for j in range(n-1-i): \n            temp = lst[i][j]\n            lst[i][j] = lst[n-1-j][i]\n            lst[n-1-j][i] = lst[n-1-i][n-1-j]\n            lst[n-1-i][n-1-j] = lst[j][n-1-i]\n            lst[j][n-1-i] = temp\n    return lst\ndef matrix_product_naive(lst, d): \n    '''\n    Write a python function to multiply the matrix by a scalar.\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print \"Counting Occurrence of all elements of list in tuple\"\n    # obtaining the count of all elements of list in tuple\n    lst_counter = Counter(lst)\n    # obtaining the count of tuple\n    tup_counter = Counter(tup)\n    # obtaining the count of all elements of tuple in tuple\n    tup_and_lst = tup_counter & lst_counter\n    print \"count of tuple and list : \", tup_and_lst\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tuple(lst.count(i) for i in tup)\ndef index_Consecutive_occurence(lst): \n    '''\n    Write a python function to find the index of consecutive occurrence of an element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return b\ndef is_Consecutive_Occurrence(lst): \n    '''\n    Write a python function to check if elements of a list are consecutive occurence of an element.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    if len(b) == 1:\n        return True\n    else:\n        return False\ndef find_Recurring_count(lst): \n    '''\n    Write a python function to find the count of recurring element in a list.\n    '''\n    return lst.count(lst[0])\ndef find_Recurring_element(lst): \n    '''\n    Write a python function to find the element which occurs the maximum number of times.\n    '''\n    a = Counter(lst)\n    return max(a, key=lambda x: a[x])\ndef find_Recurring_list_length(lst): \n    '''\n    Write a python function to find the length of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return max(b)\ndef find_Recurring_element_index(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(max(b))\ndef find_Recurring_element_index_2nd(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_3rd(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_recurring_element(lst): \n    '''\n    Write a python function to find the element which occurs the maximum number of times.\n    '''\n    a = Counter(lst)\n    return max(a, key=lambda x: a[x])\ndef find_recurring_element_index(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(max(b))\ndef find_recurring_element_index_2nd(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_recurring_element_index_3rd(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_recurring_element(lst): \n    '''\n    Write a python function to find the element which occurs the maximum number of times.\n    '''\n    a = Counter(lst)\n    return max(a, key=lambda x: a[x])\ndef find_recurring_element_index(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(max(b))\ndef find_recurring_element_index_2nd(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_recurring_element_index_3rd(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_2nd(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_3rd(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_4th(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_5th(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_6th(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_7th(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_8th(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_9th(lst): \n    '''\n    Write a python function to find the index of recurring element in a list.\n    '''\n    a = Counter(lst)\n    b = []\n    for i in a:\n        b.append(a[i])\n    return lst.index(min(b))\ndef find_Recurring_element_index_10th(lst): \n    '''\n    Write a python function to find th"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count = count+1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)[tup]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i*i)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num ** 3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x*x*x, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if nums == []:\n        return []\n    else:\n        return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num ** 3)\n    return results\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = [1,1]\n    while len(a) < n:\n        b = [1]\n        for x in a:\n            b.append(x+1)\n        b.append(1)\n        a = b\n    return a\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    count = 0\n    total = 0\n    if n % 2 == 0:\n        for i in range(2, n, 2):\n            count += 1\n            total += i\n        print 'total is: ', total\n        print 'count is: ', count\n    else:\n        for i in range(1, n, 2):\n            count += 1\n            total += i\n        print 'total is: ', total\n        print 'count is: ', count\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num = 1\n    i = 1\n    # print(i)\n    while i < n:\n        num += (i+1)*i\n        i += 2\n    return num\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 0\n    return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 1\n    for i in range(2,n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def helper(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return n + helper(n - 1)\n    return helper(n)\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return list(map(lambda x: x[:l], str))\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for s in l:\n        if len(s) == l:\n            res.append(s)\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # res = []\n    # for i in range(len(l)):\n    #     # res.append(l[i][l[i].index(str):l[i].index(str)+l[i][l[i].index(str):].index(str)+l[i][l[i].index(str):].index(str)+1])\n    #     res.append(l[i][l[i].index(str):l[i].index(str)+l[i][l[i].index(str):].index(str)+1])\n    # return res\n    return [i[i.index(str):i.index(str)+l[i.index(str)]] for i in l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import re\n    print(l)\n    size = l[0]\n    result = []\n    for s in l:\n        if len(s) == size:\n            result.append(s)\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    # pointers\n    l_p = 0\n    r_p = l-1\n    \n    if l <= 0 or len(str) <= 0:\n        return []\n    elif l > len(str):\n        return []\n    \n    # result\n    res = []\n    \n    # first char\n    first = str[0]\n    \n    while l_p < l:\n        if l_p == 0:\n            res.append(first)\n        else:\n            res.append(str[l_p-1]+str[l_p])\n        l_p += 1\n    \n    # last char\n    last = str[-1]\n    \n    while r_p >= 0:\n        if r_p == l-1:\n            res.append(last)\n        else:\n            res.append(str[r_p+1]+str[r_p])\n        r_p -= 1\n    \n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[:l] for str in l]\n    \ndef extract_string_2(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n    \ndef make_prime(n):\n    prime_list = [True] * (n + 1)\n    for i in range(2, int(n**.5) + 1):\n        if prime_list[i]:\n            j = i * 2\n            while j <= n:\n                prime_list[j] = False\n                j += i\n    return [i for i in range(2, n+1) if prime_list[i]]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    from itertools import islice\n    return list(islice(str, l))\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    list_length = len(str)\n    arr = []\n    for i in range(list_length):\n        if len(str[i]) == l:\n            arr.append(str[i])\n    return arr\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ', '')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if not text1:\n        return text1\n    text2 =''.join(text1.split())\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(\"\\s+\", \"\", text1)\n    return text2\ndef split_word(text2):\n    '''\n    Write a function to split a string into words and create a list of all the words.\n    '''\n    new_text = remove_whitespaces(text2)\n    split_text = new_text.split(\" \")\n    return split_text\ndef remove_duplicate(split_text):\n    '''\n    Write a function to remove all duplicate words from the list of words.\n    '''\n    set_text = set(split_text)\n    list_text = list(set_text)\n    return list_text\ndef count_each_word(list_text):\n    '''\n    Write a function to count the number of each word in the list of words and create a dictionary of all the words and the number of times it occurs in the list.\n    '''\n    count_word_text = {}\n    for word in list_text:\n        if word in count_word_text:\n            count_word_text[word] += 1\n        else:\n            count_word_text[word] = 1\n    return count_word_text\ndef max_word(count_word_text):\n    '''\n    Write a function to find the word that occurs most often in the list of words and display the word along with the number of times it occurs.\n    '''\n    max_word_text = max(count_word_text, key=count_word_text.get)\n    return max_word_text, count_word_text[max_word_text]\ndef is_vowel(letter):\n    '''\n    Write a function to determine whether a character is a vowel or not.\n    '''\n    if letter == \"a\" or letter == \"e\" or letter == \"i\" or letter == \"o\" or letter == \"u\":\n        return True\n    else:\n        return False\ndef remove_vowels(word):\n    '''\n    Write a function to remove all vowels from a given word and return the new word.\n    '''\n    new_word = word\n    for letter in word:\n        if is_vowel(letter):\n            new_word = new_word.replace(letter, \"\")\n    return new_word\ndef remove_numbers(word):\n    '''\n    Write a function to remove all the numbers from a given word and return the new word.\n    '''\n    new_word = word\n    for letter in word:\n        if letter.isnumeric():\n            new_word = new_word.replace(letter, \"\")\n    return new_word\ndef print_vowels(word):\n    '''\n    Write a function to print all the vowels in a given word.\n    '''\n    for letter in word:\n        if is_vowel(letter):\n            print(letter)\ndef print_numbers(word):\n    '''\n    Write a function to print all the numbers in a given word.\n    '''\n    for letter in word:\n        if letter.isnumeric():\n            print(letter)\ndef print_alphabet(word):\n    '''\n    Write a function to print all the letters in a given word that are alphabetically between a and z (not a to z).\n    '''\n    for letter in word:\n        if ord(letter) >= 97 and ord(letter) <= 122:\n            print(letter)\ndef print_alphabet2(word):\n    '''\n    Write a function to print all the letters in a given word that are alphabetically between a and z (not a to z).\n    '''\n    for letter in word:\n        if ord(letter) >= 97 and ord(letter) <= 122:\n            print(letter)\ndef count_consonants(word):\n    '''\n    Write a function to count the number of consonants in a given word and return the number of consonants.\n    '''\n    consonant_text = \"\"\n    for letter in word:\n        if is_vowel(letter):\n            consonant_text += letter\n    return len(consonant_text)\ndef count_vowels(word):\n    '''\n    Write a function to count the number of vowels in a given word and return the number of vowels.\n    '''\n    vowel_text = \"\"\n    for letter in word:\n        if is_vowel(letter):\n            vowel_text += letter\n    return len(vowel_text)\ndef count_letter(word, letter):\n    '''\n    Write a function to count the number of a given letter in a given word and return the count.\n    '''\n    letter_text = \"\"\n    for letter in word:\n        if letter == letter:\n            letter_text += letter\n    return letter_text.count(letter)\ndef count_letter2(word, letter):\n    '''\n    Write a function to count the number of a given letter in a given word and return the count.\n    '''\n    letter_text = \"\"\n    for letter in word:\n        if letter == letter:\n            letter_text += letter\n    return len(letter_text)\ndef sort_string(word):\n    '''\n    Write a function to sort the alphabets in a given word alphabetically and return the sorted word.\n    '''\n    sort_text = sorted(word)\n    return sort_text\ndef print_spiral_text(text):\n    '''\n    Write a function to print all the words in a given string in a spiral order.\n    '''\n    text = remove_whitespaces(text)\n    spiral_text = \"\"\n    spiral_text += text[0]\n    text = text[1:]\n    print(spiral_text)\n    while len(text)!= 0:\n        for letter in text:\n            spiral_text += letter\n            print(spiral_text)\n        spiral_text += text[-1]\n        text = text[:-1]\n    return spiral_text\ndef print_spiral_text2(text):\n    '''\n    Write a function to print all the words in a given string in a spiral order.\n    '''\n    text = remove_whitespaces(text)\n    spiral_text = \"\"\n    spiral_text += text[0]\n    text = text[1:]\n    if len(text) > 0:\n        for i in range(len(text)):\n            if i == 0:\n                for letter in text:\n                    spiral_text += letter\n                    print(spiral_text)\n            elif i % 2 == 0:\n                for letter in text:\n                    spiral_text += letter\n                    print(spiral_text)\n            else:\n                for letter in reversed(text):\n                    spiral_text += letter\n                    print(spiral_text)\n    else:\n        return text\ndef print_alphabet_text(word):\n    '''\n    Write a function to print all the words in a given string that are alphabetically between a and z (not a to z).\n    '''\n    for letter in word:\n        if ord(letter) >= 97 and ord(letter) <= 122:\n            print(letter)\ndef print_alphabet_text2(word):\n    '''\n    Write a function to print all the words in a given string that are alphabetically between a and z (not a to z).\n    '''\n    for letter in word:\n        if ord(letter) >= 97 and ord(letter) <= 122:\n            print(letter)\ndef is_palindrome(word):\n    '''\n    Write a function to determine whether a given word is a palindrome or not.\n    '''\n    if word == word[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome2(word):\n    '''\n    Write a function to determine whether a given word is a palindrome or not.\n    '''\n    if word == word[::-1]:\n        return True\n    else:\n        return False\ndef count_letter_with_num(word):\n    '''\n    Write a function to count the number of alphabets and numbers in a given word and return the count.\n    '''\n    alpha_num = \"\"\n    for letter in word:\n        if letter.isalpha():\n            alpha_num += letter\n        elif letter.isnumeric():\n            alpha_num += letter\n    return alpha_num\ndef print_spiral_text3"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    x = re.sub(r'\\s+','',text1)\n    return x\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\",\"\",text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.strip()\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=re.sub(r'\\s+', '', text1)\n    return text2\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return abs(actual_cost - sale_amount)\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount > 0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    total_loss = actual_cost-sale_amount\n    if total_loss < 0:\n        return total_loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return abs(actual_cost-sale_amount)\n    else:\n        return 0\n    \n    \ndef assign_discount_on_net_amount(net_amount): \n    '''\n    Write a function that gives discounted amount on the net amount if the given amount has loss else return 0.\n    '''\n    if net_amount>1000000:\n        return net_amount*0.1\n    else:\n        return 0\n    \ndef gross_margin(gross_cost,sale_amount):\n    '''\n    Write a function that gives gross margin on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>gross_cost:\n        return abs(sale_amount-gross_cost)\n    else:\n        return 0\n    \n    \ndef billing_amount(gross_margin,loss_amount): \n    '''\n    Write a function that gives billing amount on a sale if the given amount has loss else return 0.\n    '''\n    if gross_margin>loss_amount:\n        return gross_margin-loss_amount\n    else:\n        return 0\n    \n    \ndef profit_on_billing(billing_amount,sale_amount): \n    '''\n    Write a function that gives profit on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>billing_amount:\n        return abs(sale_amount-billing_amount)\n    else:\n        return 0\n    \ndef cash_on_cash_return(profit_on_billing,sale_amount): \n    '''\n    Write a function that gives cash on cash return on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>profit_on_billing:\n        return abs(sale_amount-profit_on_billing)\n    else:\n        return 0\n    \n    \ndef cash_on_cash_earned(cash_on_cash_return,sale_amount): \n    '''\n    Write a function that gives cash on cash earned on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>cash_on_cash_return:\n        return abs(sale_amount-cash_on_cash_return)\n    else:\n        return 0\n    \n    \ndef profit_margin(gross_margin,profit_on_billing): \n    '''\n    Write a function that gives profit margin on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>gross_margin:\n        return abs(sale_amount-gross_margin)\n    else:\n        return 0\n    \ndef operating_margin(profit_margin,cash_on_cash_earned): \n    '''\n    Write a function that gives operating margin on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>profit_margin+cash_on_cash_earned:\n        return abs(sale_amount-profit_margin-cash_on_cash_earned)\n    else:\n        return 0\n    \n    \ndef cost_of_goods_sold(gross_margin,profit_on_billing,sale_amount): \n    '''\n    Write a function that gives cost of goods sold on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>gross_margin+profit_on_billing:\n        return abs(sale_amount-gross_margin-profit_on_billing)\n    else:\n        return 0\n    \n    \ndef cost_of_goods_billed(cost_of_goods_sold,sale_amount): \n    '''\n    Write a function that gives cost of goods billed on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>cost_of_goods_sold:\n        return abs(sale_amount-cost_of_goods_sold)\n    else:\n        return 0\n    \n    \ndef profit_on_cost(cost_of_goods_billed,sale_amount): \n    '''\n    Write a function that gives profit on cost on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>cost_of_goods_billed:\n        return abs(sale_amount-cost_of_goods_billed)\n    else:\n        return 0\n    \ndef operating_margin_on_cost(cost_of_goods_billed,profit_on_cost): \n    '''\n    Write a function that gives operating margin on cost on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>cost_of_goods_billed+profit_on_cost:\n        return abs(sale_amount-cost_of_goods_billed-profit_on_cost)\n    else:\n        return 0\n    \n    \ndef cost_of_goods_sold_on_billing(cost_of_goods_sold,billing_amount): \n    '''\n    Write a function that gives cost of goods sold on a billing if the given amount has loss else return 0.\n    '''\n    if sale_amount>cost_of_goods_sold+billing_amount:\n        return abs(sale_amount-cost_of_goods_sold-billing_amount)\n    else:\n        return 0\n    \n    \ndef cost_of_goods_billed_on_billing(cost_of_goods_billed,billing_amount): \n    '''\n    Write a function that gives cost of goods billed on a billing if the given amount has loss else return 0.\n    '''\n    if sale_amount>cost_of_goods_billed+billing_amount:\n        return abs(sale_amount-cost_of_goods_billed-billing_amount)\n    else:\n        return 0\n    \n    \ndef profit_on_cost_on_billing(cost_of_goods_billed,billing_amount,sale_amount): \n    '''\n    Write a function that gives profit on cost on a billing if the given amount has loss else return 0.\n    '''\n    if sale_amount>cost_of_goods_billed+billing_amount:\n        return abs(sale_amount-cost_of_goods_billed-billing_amount)\n    else:\n        return 0\n    \n    \ndef operating_margin_on_cost_on_billing(cost_of_goods_billed,billing_amount,sale_amount): \n    '''\n    Write a function that gives operating margin on cost on a billing if the given amount has loss else return 0.\n    '''\n    if sale_amount>cost_of_goods_billed+billing_amount:\n        return abs(sale_amount-cost_of_goods_billed-billing_amount)\n    else:\n        return 0\n    \n    \ndef operating_margin_on_cost_on_billing(cost_of_goods_billed,billing_amount,sale_amount): \n    '''\n    Write a function that gives operating margin on cost on a billing if the given amount has loss else return 0.\n    '''\n    if sale_amount>cost_of_goods_billed+billing_amount:\n        return abs(sale_amount-cost_of_goods_billed-billing_amount)\n    else:\n        return 0\n    \n    \ndef operating_margin(operating_margin_on_cost_on_billing,gross_margin): \n    '''\n    Write a function that gives operating margin on cost on a billing if the given amount has loss else return 0.\n    '''\n    if sale_amount>gross_margin+operating_margin_on_cost_on_billing:\n        return abs(sale_amount-gross_margin-operating_margin_on_cost_on_billing)\n    else:\n        return 0\n    \n    \ndef cash_on_cash_return_on_billing(cash_on_cash_return_on_cost_on_billing,gross_margin): \n    '''\n    Write a function that gives cash on cash return on a billing if the given amount has loss else return 0.\n    '''\n    if sale_amount>cash_on_cash_return_on_cost_on_billing+gross_margin:\n        return abs"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount if actual_cost-sale_amount>0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #print \"actual cost=%s sale_amount=%s\"%(actual_cost,sale_amount)\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \ndef loss_percentage(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss percentage on a sale if the given amount has loss else return 0.\n    '''\n    #print \"actual cost=%s sale_amount=%s\"%(actual_cost,sale_amount)\n    if actual_cost>sale_amount:\n        return (actual_cost-sale_amount)/float(actual_cost)\n    else:\n        return 0\n    \ndef sales_data(actual_cost,sale_amount):\n    '''\n    Write a function that gets sales data and return loss amount and loss percentage.\n    '''\n    return loss_amount(actual_cost,sale_amount),loss_percentage(actual_cost,sale_amount)\n    \ndef sales_data_by_customer(actual_cost,sale_amount,customer):\n    '''\n    Write a function that gets sales data by customer and return loss amount and loss percentage.\n    '''\n    #print \"actual cost=%s sale_amount=%s customer=%s\"%(actual_cost,sale_amount,customer)\n    if customer in actual_cost.keys():\n        return loss_amount(actual_cost[customer],sale_amount),loss_percentage(actual_cost[customer],sale_amount)\n    else:\n        return sales_data(actual_cost,sale_amount)\n    \ndef loss_percentage_by_customer(actual_cost,sale_amount,customer):\n    '''\n    Write a function that gets loss percentage by customer and return loss amount and loss percentage.\n    '''\n    #print \"actual cost=%s sale_amount=%s customer=%s\"%(actual_cost,sale_amount,customer)\n    if customer in actual_cost.keys():\n        return loss_amount(actual_cost[customer],sale_amount),loss_percentage(actual_cost[customer],sale_amount)\n    else:\n        return sales_data(actual_cost,sale_amount)\n    \ndef sales_data_by_customer_list(actual_cost,sale_amount,customers):\n    '''\n    Write a function that gets sales data by customers and return loss amount and loss percentage.\n    '''\n    #print \"actual cost=%s sale_amount=%s customers=%s\"%(actual_cost,sale_amount,customers)\n    #print actual_cost.keys()\n    if not customers:\n        customers=actual_cost.keys()\n    loss_amount=0\n    loss_percentage=0\n    for customer in customers:\n        #print \"customer=%s\"%customer\n        loss_amount+=loss_amount_by_customer(actual_cost,sale_amount,customer)\n        loss_percentage+=loss_percentage_by_customer(actual_cost,sale_amount,customer)\n    return loss_amount,loss_percentage\n    \ndef loss_amount_by_customer(actual_cost,sale_amount,customer):\n    '''\n    Write a function that gets loss amount by customer and return loss amount and loss percentage.\n    '''\n    #print \"actual cost=%s sale_amount=%s customer=%s\"%(actual_cost,sale_amount,customer)\n    if customer in actual_cost.keys():\n        return loss_amount(actual_cost[customer],sale_amount)\n    else:\n        return 0\n    \ndef loss_percentage_by_customer(actual_cost,sale_amount,customer):\n    '''\n    Write a function that gets loss percentage by customer and return loss amount and loss percentage.\n    '''\n    #print \"actual cost=%s sale_amount=%s customer=%s\"%(actual_cost,sale_amount,customer)\n    if customer in actual_cost.keys():\n        return loss_amount(actual_cost[customer],sale_amount),loss_percentage(actual_cost[customer],sale_amount)\n    else:\n        return sales_data(actual_cost,sale_amount)\n    \ndef sales_data_by_customer_list_percentage(actual_cost,sale_amount,customers):\n    '''\n    Write a function that gets sales data by customers and return loss amount and loss percentage.\n    '''\n    #print \"actual cost=%s sale_amount=%s customers=%s\"%(actual_cost,sale_amount,customers)\n    #print actual_cost.keys()\n    if not customers:\n        customers=actual_cost.keys()\n    loss_amount=0\n    loss_percentage=0\n    for customer in customers:\n        #print \"customer=%s\"%customer\n        loss_amount+=loss_amount_by_customer(actual_cost,sale_amount,customer)\n        loss_percentage+=loss_percentage_by_customer(actual_cost,sale_amount,customer)\n    return loss_amount/float(sum(actual_cost.values())),loss_percentage/float(len(customers))\n    \ndef sales_data_by_customer_list_percentage_with_customer_list(actual_cost,sale_amount,customers):\n    '''\n    Write a function that gets sales data by customers and return loss amount and loss percentage.\n    '''\n    #print \"actual cost=%s sale_amount=%s customers=%s\"%(actual_cost,sale_amount,customers)\n    #print actual_cost.keys()\n    if not customers:\n        customers=actual_cost.keys()\n    loss_amount=0\n    loss_percentage=0\n    for customer in customers:\n        #print \"customer=%s\"%customer\n        loss_amount+=loss_amount_by_customer(actual_cost,sale_amount,customer)\n        loss_percentage+=loss_percentage_by_customer(actual_cost,sale_amount,customer)\n    return loss_amount/float(sum(actual_cost.values())),loss_percentage/float(len(customers))\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n + sum(i for i in range(1,int(math.sqrt(n))+1) if n % i == 0)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    if n == 1 :\n        return 0\n    else :\n        for i in range(1, int(math.sqrt(n) + 1)) :\n            if n % i == 0 :\n                if i % 2 == 0 :\n                    sum += i\n                else :\n                    sum += (n / i)\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n%2 == 0:\n        print \"Number is even, so sum of its factors is \",(n/2)\n    else:\n        i = 3\n        sum = 0\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                if i%2 == 0:\n                    sum = sum + i\n                else:\n                    sum = sum + i\n                    i = i + 2\n            i = i + 2\n        if sum == 0:\n            sum = n\n        print \"sum of even factors of \",n,\" is \",sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,(n/2)+1):\n        if n % i == 0:\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(n/2)+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum \n    \n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    if n<1 :\n        return\n    for i in range(1, n+1) :\n        if n%i == 0 :\n            if i%2 == 0 :\n                total += i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum = sum + i \n    return sum\ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if (int(math.sqrt(n)) * int(math.sqrt(n)) == n) : \n        return True\n    else : \n        return False\ndef isPerfectSquare1(n) : \n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    root = int(math.sqrt(n))\n    if (n == root * root) :\n        return True\n    else :\n        return False\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime1(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime2(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime3(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime4(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime5(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime6(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime7(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime8(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime9(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime10(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime11(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime12(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef isPrime13(n) : \n    ''"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for x in range(1, n + 1):\n        if n % x == 0:\n            if x % 2 == 0:\n                res += x\n    return res\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sumofFactors(n/2)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 0: \n        return 0\n    else:\n        sum = 0\n        for i in range(1, math.floor(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if i % 2 == 0:\n                    sum += i\n        return sum\ndef isPrime(n) :\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 2:\n        return True\n    else:\n        for i in range(2, math.floor(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\ndef rotateMatrix(A) :\n    '''\n    Write a python function to rotate a matrix 90 degrees\n    '''\n    n = len(A)\n    for i in range(n/2):\n        for j in range(i, n-i-1):\n            temp = A[i][j]\n            A[i][j] = A[n-1-j][i]\n            A[n-1-j][i] = A[n-1-i][n-1-j]\n            A[n-1-i][n-1-j] = A[j][n-1-i]\n            A[j][n-1-i] = temp\n    return A\ndef dfs(graph, start, visited=None):\n    '''\n    Write a python function to perform dfs traversal on a graph\n    '''\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for next in set(graph[start]) - visited:\n        dfs(graph, next, visited)\n    return visited\ndef bfs(graph, start):\n    '''\n    Write a python function to perform bfs traversal on a graph\n    '''\n    visited, queue = set(), [start]\n    while queue:\n        vertex = queue.pop(0)\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(set(graph[vertex]) - visited)\n    return visited\ndef findMaxMatching(edges, N) :\n    '''\n    Write a python function to find the maximum number of matching in a given bipartite graph\n    '''\n    M = 0\n    for i in range(N) :\n        for j in range(N) :\n            if edges[i][j] == 1 :\n                edges[i][j] = 0\n                edges[j][i] = 0\n                M += 1\n                for k in range(N) :\n                    if edges[k][j] == 1 :\n                        edges[k][j] = 0\n                        edges[j][k] = 0\n    return M\ndef is_Bipartite(G) :\n    '''\n    Write a python function to find if a graph is bipartite or not\n    '''\n    n = len(G)\n    visited = [0] * n\n    color = [-1] * n\n    for i in range(n) :\n        if visited[i] == 0 :\n            if (color[i] == -1) :\n                queue = []\n                queue.append(i)\n                color[i] = 1\n                while queue :\n                    u = queue.pop()\n                    visited[u] = 1\n                    for v in range(n) :\n                        if G[u][v] == 1 and visited[v] == 0 :\n                            queue.append(v)\n                            color[v] = 1 - color[u]\n                        elif G[u][v] == 0 and visited[v] == 1 :\n                            return False\n            else :\n                return False\n    return True\ndef is_Eulerian(n, m) :\n    '''\n    Write a python function to check if a graph is Eulerian or not\n    '''\n    if (n % 2 == 0 and m == 0) or (n == 0 and m % 2 == 1) :\n        return True\n    return False\ndef is_K_Regular(N, K) :\n    '''\n    Write a python function to check if a graph is K-Regular or not\n    '''\n    if K >= N :\n        return True\n    return False\ndef is_K_Regular_Connected(N, K) :\n    '''\n    Write a python function to check if a graph is K-Regular connected or not\n    '''\n    if K >= N - 1 :\n        return True\n    return False\ndef check_path(graph, start, end) :\n    '''\n    Write a python function to check if a path exists between two vertices\n    '''\n    n = len(graph)\n    visited = [0] * n\n    for i in range(n) :\n        visited[i] = 0\n    queue = []\n    queue.append(start)\n    visited[start] = 1\n    while queue :\n        u = queue.pop(0)\n        for v in range(n) :\n            if graph[u][v] == 1 :\n                if visited[v] == 0 :\n                    queue.append(v)\n                    visited[v] = 1\n                    if v == end :\n                        return True\n    return False\ndef is_Bipartite_Graph(G) :\n    '''\n    Write a python function to check if a graph is bipartite or not\n    '''\n    n = len(G)\n    visited = [0] * n\n    color = [-1] * n\n    for i in range(n) :\n        if visited[i] == 0 :\n            if (color[i] == -1) :\n                queue = []\n                queue.append(i)\n                color[i] = 1\n                while queue :\n                    u = queue.pop()\n                    visited[u] = 1\n                    for v in range(n) :\n                        if G[u][v] == 1 and visited[v] == 0 :\n                            queue.append(v)\n                            color[v] = 1 - color[u]\n                        elif G[u][v] == 0 and visited[v] == 1 :\n                            return False\n            else :\n                return False\n    return True\ndef is_Eulerian_Graph(G) :\n    '''\n    Write a python function to check if a graph is Eulerian or not\n    '''\n    n = len(G)\n    m = 0\n    for i in range(n) :\n        for j in range(n) :\n            if G[i][j] == 1 :\n                m += 1\n    if m % 2 == 0 :\n        return True\n    return False\ndef is_Eulerian_path(G, start, end) :\n    '''\n    Write a python function to check if a path exists between two vertices\n    '''\n    if G[start][end] == 0 :\n        return False\n    return True\ndef is_Eulerian_cycle(G, start, end) :\n    '''\n    Write a python function to check if a cycle exists between two vertices\n    '''\n    if G[start][end] == 0 :\n        return False\n    return True\ndef is_Tree(G, start) :\n    '''\n    Write a python function to check if a tree exists between two vertices\n    '''\n    visited = [0] * len(G)\n    queue = []\n    queue.append(start)\n    visited[start] = 1\n    while queue :\n        u = queue.pop(0)\n        for v in range(len(G)) :\n            if G[u][v] == 1 and visited[v] == 0 :\n                queue.append(v)\n                visited[v] = 1\n    if sum(visited) == len(G) :\n        return True\n    return False\ndef is_connected(G) :\n    '''\n    Write a python function to check if the graph is connected or not\n    '''\n    visited = [0] * len(G)\n    queue = []\n    for i in range(len(G)) :\n        if visited[i] == 0 :\n            queue.append(i)\n            visited[i] = 1\n            while queue :\n                u = queue.pop()\n                for v in range(len(G)) :\n                    if G[u][v] == 1 and visited[v] == 0 :\n                        queue.append(v"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print(re.findall('\\w*z\\w*', text))\n    return re.findall('\\w*z\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\w*z\\w*')\n    result = pattern.match(text)\n    if result:\n        print \"Match 1: {}\".format(result.group())\n    else:\n        print \"No match!!\"\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r'\\b\\w*z\\b', text)\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(\"z\",text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b([a-z]+)\\s?[z]\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print(\"text_match_z() called.\")\n    if re.search(r'\\b(z.*)\\b',text):\n        print(\"Found a match.\")\n    else:\n        print(\"No match found.\")\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = z_pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b\\w*z\\w*\\b', text)\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12 and monthnum2 >= 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if year2 % 400 == 0:\n            if day2 % 100 == 0:\n                return True\n            else:\n                return False\n        else:\n            if day2 % 4 == 0:\n                return True\n            else:\n                return False\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if day2 % 31 == 0:\n            return True\n        else:\n            return False\n    else:\n        if day2 % 30 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Your code goes here\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print True\n    else:\n        print False\n    \n    \ndef count_monthnumb(monthnum3):\n    '''\n    Write a function to count the number of days in the given month number.\n    '''\n    # Your code goes here\n    day_num = [31,28,31,30,31,30,31,31,30,31,30,31]\n    if monthnum3 == 1:\n        print day_num[0]\n    elif monthnum3 == 2:\n        print day_num[1]\n    elif monthnum3 == 3:\n        print day_num[2]\n    elif monthnum3 == 4:\n        print day_num[3]\n    elif monthnum3 == 5:\n        print day_num[4]\n    elif monthnum3 == 6:\n        print day_num[5]\n    elif monthnum3 == 7:\n        print day_num[6]\n    elif monthnum3 == 8:\n        print day_num[7]\n    elif monthnum3 == 9:\n        print day_num[8]\n    elif monthnum3 == 10:\n        print day_num[9]\n    elif monthnum3 == 11:\n        print day_num[10]\n    elif monthnum3 == 12:\n        print day_num[11]\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        print(\"The given month number is even\")\n    else:\n        print(\"The given month number is odd\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = []\n    for month in monthnum2:\n        monthnumb.append(month[1])\n    \n    if 31 in monthnumb:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 'january' or monthnum2 =='march' or monthnum2 =='may' or monthnum2 == 'july' or monthnum2 == 'august' or monthnum2 == 'october' or monthnum2 == 'december':\n        return 'True'\n    elif monthnum2 == 'april' or monthnum2 == 'june' or monthnum2 =='september' or monthnum2 == 'november':\n        return 'False'\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 <= 12 and monthnum2 >= 1):\n        if (monthnum2 == 1):\n            if (year_number % 4 == 0 and year_number % 400 == 0) or (year_number % 400!= 0):\n                return 31\n            else:\n                return 28\n        elif (monthnum2 == 2):\n            return 29\n        elif (monthnum2 == 3):\n            return 31\n        elif (monthnum2 == 4):\n            return 30\n        elif (monthnum2 == 5):\n            return 31\n        elif (monthnum2 == 6):\n            return 30\n        elif (monthnum2 == 7):\n            return 31\n        elif (monthnum2 == 8):\n            return 31\n        elif (monthnum2 == 9):\n            return 30\n        elif (monthnum2 == 10):\n            return 31\n        elif (monthnum2 == 11):\n            return 30\n        elif (monthnum2 == 12):\n            return 31\n    else:\n        return 'Please enter a number between 1 and 12'\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [value[::-1] for value in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n    \n    \ndef test_reverse_string_list():\n    assert reverse_string_list(['hello', 'world', 'universe']) == ['olleh', 'dlrow', 'ulniove']\n    assert reverse_string_list(['I', 'am', 'a', 'boy']) == ['I', 'a', 'boy', 'am']\n    \ntest_reverse_string_list()\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[i][::-1] for i in range(len(stringlist))]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[i][::-1] for i in range(len(stringlist))]\n    \ndef is_sublist(needle, haystack):\n    '''\n    Return True if a needle is a sublist of a haystack, False otherwise.\n    '''\n    # We can't check for whether needle is a list here, so we'll have to check\n    # each list element individually\n    for item in needle:\n        if item not in haystack:\n            return False\n    return True\n        \ndef list_comp(needle, haystack):\n    '''\n    Return True if a needle is a list of values that are all in the list\n    haystack, False otherwise.\n    '''\n    for item in needle:\n        if item not in haystack:\n            return False\n    return True\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_idx = 0\n    for idx in range(len(lst)):\n        if len(lst[idx]) < min_len:\n            min_len = len(lst[idx])\n            min_idx = idx\n    print(\"The minimum length sublist is: \",lst[min_idx])\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    for i in range(len(lst)): \n        if len(lst[i]) < min_len: \n            min_len = len(lst[i]) \n    return lst[min_len] \n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=0\n    for i in lst:\n        if len(i) < len(lst[min]):\n            min = i\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_index = 0\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return min_index, min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if(len(lst)==0):\n        return None\n    curr_min=lst[0][1]-lst[0][0]\n    min_index=0\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]-lst[i][0]<curr_min):\n            curr_min=lst[i][1]-lst[i][0]\n            min_index=i\n    return lst[min_index]\n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    if(len(lst)==0):\n        return None\n    curr_max=lst[0][1]-lst[0][0]\n    max_index=0\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]-lst[i][0]>curr_max):\n            curr_max=lst[i][1]-lst[i][0]\n            max_index=i\n    return lst[max_index]\n    \ndef Find_Smallest_Sublist(lst):\n    '''\n    Write a python function to find the smallest sublist.\n    '''\n    if(len(lst)==0):\n        return None\n    min_index=0\n    curr_min=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]-lst[i][0]<curr_min):\n            curr_min=lst[i][1]-lst[i][0]\n            min_index=i\n    return lst[min_index]\n    \ndef Find_Biggest_Sublist(lst):\n    '''\n    Write a python function to find the biggest sublist.\n    '''\n    if(len(lst)==0):\n        return None\n    max_index=0\n    curr_max=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]-lst[i][0]>curr_max):\n            curr_max=lst[i][1]-lst[i][0]\n            max_index=i\n    return lst[max_index]\n    \ndef Find_Smallest_Sublist_Sorted(lst):\n    '''\n    Write a python function to find the smallest sublist, sorted.\n    '''\n    if(len(lst)==0):\n        return None\n    min_index=0\n    curr_min=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]<lst[i][0]):\n            curr_min=lst[i][1]-lst[i][0]\n            min_index=i\n    return lst[min_index]\n    \ndef Find_Biggest_Sublist_Sorted(lst):\n    '''\n    Write a python function to find the biggest sublist, sorted.\n    '''\n    if(len(lst)==0):\n        return None\n    max_index=0\n    curr_max=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]>lst[i][0]):\n            curr_max=lst[i][1]-lst[i][0]\n            max_index=i\n    return lst[max_index]\n    \ndef Find_Smallest_Sublist_Unsorted(lst):\n    '''\n    Write a python function to find the smallest sublist, unsorted.\n    '''\n    if(len(lst)==0):\n        return None\n    min_index=0\n    curr_min=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]<lst[i][0]):\n            curr_min=lst[i][1]-lst[i][0]\n            min_index=i\n    return lst[min_index]\n    \ndef Find_Biggest_Sublist_Unsorted(lst):\n    '''\n    Write a python function to find the biggest sublist, unsorted.\n    '''\n    if(len(lst)==0):\n        return None\n    max_index=0\n    curr_max=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]>lst[i][0]):\n            curr_max=lst[i][1]-lst[i][0]\n            max_index=i\n    return lst[max_index]\n    \ndef Find_Smallest_Sublist_Unsorted_Sorted(lst):\n    '''\n    Write a python function to find the smallest sublist, unsorted, sorted.\n    '''\n    if(len(lst)==0):\n        return None\n    min_index=0\n    curr_min=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]<lst[i][0]):\n            curr_min=lst[i][1]-lst[i][0]\n            min_index=i\n    return lst[min_index]\n    \ndef Find_Biggest_Sublist_Unsorted_Sorted(lst):\n    '''\n    Write a python function to find the biggest sublist, unsorted, sorted.\n    '''\n    if(len(lst)==0):\n        return None\n    max_index=0\n    curr_max=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]>lst[i][0]):\n            curr_max=lst[i][1]-lst[i][0]\n            max_index=i\n    return lst[max_index]\n    \ndef Find_Smallest_Sublist_Unsorted_Sorted_Non_Dominated(lst):\n    '''\n    Write a python function to find the smallest sublist, unsorted, sorted, non-dominated.\n    '''\n    if(len(lst)==0):\n        return None\n    min_index=0\n    curr_min=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]<lst[i][0]):\n            curr_min=lst[i][1]-lst[i][0]\n            min_index=i\n    return lst[min_index]\n    \ndef Find_Biggest_Sublist_Unsorted_Sorted_Non_Dominated(lst):\n    '''\n    Write a python function to find the biggest sublist, unsorted, sorted, non-dominated.\n    '''\n    if(len(lst)==0):\n        return None\n    max_index=0\n    curr_max=lst[0][1]-lst[0][0]\n    for i in xrange(1,len(lst)):\n        if(lst[i][1]>lst[i][0]):\n            curr_max=lst[i][1]-lst[i][0]\n            max_index=i\n    return lst[max_index]\n    \ndef Find_Smallest_Sublist_Unsorted_Sorted_Non_Dominated_Sorted(lst):\n    '''\n    Write a python function to find the smallest sublist, unsorted, sorted, non-dominated, sorted.\n    '''\n    if(len(lst)==0):\n        return None\n    min_index=0\n    curr_min=lst[0][1]"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m=lst[0]\n    for i in lst[1:]:\n        if len(i)<len(m):\n            m=i\n    return m\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = 0\n    for i in range(1, len(lst)):\n        if len(lst[min])>len(lst[i]):\n            min = i\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_index = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = len(lst[0])\n    minimum_sublist = lst[0]\n    for item in lst:\n        if len(item) < minimum:\n            minimum = len(item)\n            minimum_sublist = item\n    print \"The sublist having minimum length is: \", minimum_sublist\n    print \"The length of this sublist is: \", minimum\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"The area of a rectangle is {}\".format(l*b))\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l == b:\n        return l*b\n    elif l > b:\n        return l*b\n    elif l < b:\n        return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    return area\ndef triangle_area(h,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area=(h*b)/2\n    return area\ndef square_area(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area=a*a\n    return area\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter=2*(l+b)\n    return perimeter\ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter=b+h+b\n    return perimeter\ndef square_perimeter(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    perimeter=4*a\n    return perimeter\ndef rectangle_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    diagonal=sqrt(l**2+b**2)\n    return diagonal\ndef triangle_diagonal(h,b):\n    '''\n    Write a function to find the diagonal of a triangle.\n    '''\n    diagonal=(h**2+b**2)**0.5\n    return diagonal\ndef square_diagonal(a):\n    '''\n    Write a function to find the diagonal of a square.\n    '''\n    diagonal=sqrt(a**2)\n    return diagonal\ndef rectangle_2edges(l,b):\n    '''\n    Write a function to find the length of two edges of a rectangle.\n    '''\n    edge1=(l**2+b**2)**0.5\n    edge2=(l**2+b**2)**0.5\n    return edge1,edge2\ndef rectangle_area_and_perimeter(l,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area=rectangle_area(l,b)\n    perimeter=rectangle_perimeter(l,b)\n    return area,perimeter\ndef rectangle_diagonal_and_perimeter(l,b):\n    '''\n    Write a function to find the diagonal and perimeter of a rectangle.\n    '''\n    diagonal=rectangle_diagonal(l,b)\n    perimeter=rectangle_perimeter(l,b)\n    return diagonal,perimeter\ndef triangle_area_and_perimeter(b,h):\n    '''\n    Write a function to find the area and perimeter of a triangle.\n    '''\n    area=triangle_area(h,b)\n    perimeter=triangle_perimeter(b,h)\n    return area,perimeter\ndef rectangle_diagonal_and_perimeter(l,b):\n    '''\n    Write a function to find the diagonal and perimeter of a rectangle.\n    '''\n    diagonal=rectangle_diagonal(l,b)\n    perimeter=rectangle_perimeter(l,b)\n    return diagonal,perimeter\ndef square_area_and_perimeter(a):\n    '''\n    Write a function to find the area and perimeter of a square.\n    '''\n    area=square_area(a)\n    perimeter=square_perimeter(a)\n    return area,perimeter\ndef rectangle_2edges_and_perimeter(l,b):\n    '''\n    Write a function to find the length of two edges and perimeter of a rectangle.\n    '''\n    edge1,edge2=rectangle_2edges(l,b)\n    perimeter=rectangle_perimeter(l,b)\n    return edge1,edge2,perimeter\ndef triangle_2edges_and_perimeter(b,h):\n    '''\n    Write a function to find the length of two edges and perimeter of a triangle.\n    '''\n    edge1,edge2=triangle_2edges(b,h)\n    perimeter=triangle_perimeter(b,h)\n    return edge1,edge2,perimeter\ndef square_2edges_and_perimeter(a):\n    '''\n    Write a function to find the length of two edges and perimeter of a square.\n    '''\n    edge1,edge2=square_2edges(a)\n    perimeter=square_perimeter(a)\n    return edge1,edge2,perimeter\ndef rectangle_2edges_and_diagonal(l,b):\n    '''\n    Write a function to find the length of two edges and diagonal of a rectangle.\n    '''\n    edge1,edge2=rectangle_2edges(l,b)\n    diagonal=rectangle_diagonal(l,b)\n    return edge1,edge2,diagonal\ndef triangle_2edges_and_diagonal(b,h):\n    '''\n    Write a function to find the length of two edges and diagonal of a triangle.\n    '''\n    edge1,edge2=triangle_2edges(b,h)\n    diagonal=triangle_diagonal(b,h)\n    return edge1,edge2,diagonal\ndef square_2edges_and_diagonal(a):\n    '''\n    Write a function to find the length of two edges and diagonal of a square.\n    '''\n    edge1,edge2=square_2edges(a)\n    diagonal=square_diagonal(a)\n    return edge1,edge2,diagonal\ndef rectangle_2edges_and_diagonal_and_perimeter(l,b):\n    '''\n    Write a function to find the length of two edges and diagonal and perimeter of a rectangle.\n    '''\n    edge1,edge2=rectangle_2edges(l,b)\n    diagonal=rectangle_diagonal(l,b)\n    perimeter=rectangle_perimeter(l,b)\n    return edge1,edge2,diagonal,perimeter\ndef triangle_2edges_and_diagonal_and_perimeter(b,h):\n    '''\n    Write a function to find the length of two edges and diagonal and perimeter of a triangle.\n    '''\n    edge1,edge2=triangle_2edges(b,h)\n    diagonal=triangle_diagonal(b,h)\n    perimeter=triangle_perimeter(b,h)\n    return edge1,edge2,diagonal,perimeter\ndef square_2edges_and_diagonal_and_perimeter(a):\n    '''\n    Write a function to find the length of two edges and diagonal and perimeter of a square.\n    '''\n    edge1,edge2=square_2edges(a)\n    diagonal=square_diagonal(a)\n    perimeter=square_perimeter(a)\n    return edge1,edge2,diagonal,perimeter\ndef rectangle_area_and_diagonal_and_perimeter(l,b):\n    '''\n    Write a function to find the area and diagonal and perimeter of a rectangle.\n    '''\n    area=rectangle_area(l,b)\n    diagonal=rectangle_diagonal(l,b)\n    perimeter=rectangle_perimeter(l,b)\n    return area,diagonal,perimeter\ndef triangle_area_and_diagonal_and_perimeter(b,h):\n    '''\n    Write a function to find the area and diagonal and perimeter of a triangle.\n    '''\n    area=triangle_area(h,b)\n    diagonal=triangle_diagonal(b,h)\n    perimeter=triangle_perimeter(b,h)\n    return area,diagonal,perimeter\ndef square_area_and_diagonal_and_perimeter(a):\n    '''\n    Write a function to find the area and diagonal and perimeter of a square.\n    '''\n    area=square_area(a)\n    diagonal=square_diagonal(a)\n    perimeter=square_perimeter(a)\n    return area,diagonal,perimeter\ndef rectangle_area_and_diagonal_and_perimeter_and_perimeter(l,b):\n    '''\n    Write a function to find the area, diagonal, perimeter and perimeter of a rectangle.\n    '''\n    area=rectangle_area(l,b)\n    diagonal=rectangl"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join([substr for substr in str1 if not substr.isupper()])\n    \n    \ndef rem_vowels(str1):\n    '''\n    Write a function to remove vowels from a given string.\n    '''\n    str1 = re.sub('[aeiou]', '', str1)\n    return str1\n    \ndef count_digits(str1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    return len(re.findall('\\d', str1))\n    \ndef is_perfect_square(str1):\n    '''\n    Write a function to check if a given string can be divided into two equal portions (perfectly).\n    '''\n    if len(str1)%2!=0:\n        return False\n    return len(re.findall('(.)(.)', str1)) == len(str1)/2\n    \ndef list_flatten(l):\n    '''\n    Write a function to flatten a list of lists into a single list.\n    '''\n    return [x for sublist in l for x in sublist]\n    \ndef list_add(l1, l2):\n    '''\n    Write a function to add two lists.\n    '''\n    return [x for sublist in [l1, l2] for x in sublist]\n    \ndef list_reverse(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    return l[::-1]\n    \ndef list_fibonacci(num):\n    '''\n    Write a function to generate the first n fibonacci numbers.\n    '''\n    def recur_fib(n):\n        if n==0:\n            return []\n        if n==1:\n            return [1]\n        else:\n            return recur_fib(n-1) + [sum(recur_fib(n-2))]\n    return recur_fib(num)\n    \ndef str_reverse(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef str_rotate(str1, num):\n    '''\n    Write a function to rotate a string by a given number of characters.\n    '''\n    return str1[num:] + str1[:num]\n    \ndef sum_digits(n):\n    '''\n    Write a function to sum all the digits of a given number.\n    '''\n    return sum([int(dig) for dig in str(n)])\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1 == str1[::-1]\n    \ndef is_pangram(str1, alphabet):\n    '''\n    Write a function to check if a given string is a pangram.\n    '''\n    return set(str1.lower()) >= set(alphabet.lower())\n    \ndef is_unique_char(str1):\n    '''\n    Write a function to check if all the characters of a given string are unique.\n    '''\n    return len(str1) == len(set(str1))\n    \ndef num_index(num):\n    '''\n    Write a function to return the number of index of a given number.\n    '''\n    return str(num).index(str(num)[-1])\n    \ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(str1.split())\n    \ndef str_to_int(str1):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(str1)\n    \ndef str_to_float(str1):\n    '''\n    Write a function to convert a string to a float.\n    '''\n    return float(str1)\n    \ndef str_to_list(str1):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    return str1.split()\n    \ndef list_to_str(l):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return''.join(l)\n    \ndef is_substring(str1, str2):\n    '''\n    Write a function to check if a given string is a substring of another string.\n    '''\n    return str1 in str2\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_rotation(str1, str2):\n    '''\n    Write a function to check if a string is a rotation of another string.\n    '''\n    return str1[len(str1)-1:] + str1[:len(str1)-1] == str2\n    \ndef is_substring(str1, str2):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return str2 in str1\n    \ndef is_reverse(str1, str2):\n    '''\n    Write a function to check if a string is a reverse of another string.\n    '''\n    return str1[::-1] == str2\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return str1[::-1] == str1\n    \ndef is_substring(str1, str2):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return str2 in str1\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_rotation(str1, str2):\n    '''\n    Write a function to check if a string is a rotation of another string.\n    '''\n    return str1[len(str1)-1:] + str1[:len(str1)-1] == str2\n    \ndef is_substring(str1, str2):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return str2 in str1\n    \ndef is_reverse(str1, str2):\n    '''\n    Write a function to check if a string is a reverse of another string.\n    '''\n    return str1[::-1] == str2\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return str1[::-1] == str1\n    \ndef is_substring(str1, str2):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return str2 in str1\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_rotation(str1, str2):\n    '''\n    Write a function to check if a string is a rotation of another string.\n    '''\n    return str1[len"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    temp = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            temp += str1[i]\n        else:\n            temp += \" \"\n    str1 = temp\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]+', '', str1)\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in str1:\n        if i.isupper():\n            str1 = str1.replace(i, \"\")\n    return str1\ndef remove_non_alphabet_characters(str1):\n    '''\n    Write a function that returns a string containing the only alphabetic characters.\n    '''\n    for i in str1:\n        if not i.isalpha():\n            str1 = str1.replace(i, \"\")\n    return str1\ndef convert_dictionary_to_string(dict1):\n    '''\n    Write a function that converts a given dictionary to a string, where each word and it's value is seperated by a space.\n    '''\n    return \" \".join(dict1.keys())\ndef create_a_dictionary(str1):\n    '''\n    Write a function that creates a dictionary from a given string where each word in the string is a key and it's value is the number of times that word appears in the string.\n    '''\n    dict1 = {}\n    for i in str1.split(\" \"):\n        if i in dict1:\n            dict1[i] = dict1[i] + 1\n        else:\n            dict1[i] = 1\n    return dict1\ndef sort_dictionary(dict1):\n    '''\n    Write a function that sorts a given dictionary in ascending order based on value.\n    '''\n    return sorted(dict1.items(), key = lambda kv:(kv[1], kv[0]))\ndef get_dictionary_values(dict1):\n    '''\n    Write a function that returns all the values in a given dictionary.\n    '''\n    return list(dict1.values())\ndef get_dictionary_keys(dict1):\n    '''\n    Write a function that returns all the keys in a given dictionary.\n    '''\n    return list(dict1.keys())\ndef get_dictionary_items(dict1):\n    '''\n    Write a function that returns all the items in a given dictionary.\n    '''\n    return list(dict1.items())\ndef get_dictionary_occurrences(str1):\n    '''\n    Write a function that returns a dictionary containing the number of times each word appears in a given string.\n    '''\n    return create_a_dictionary(str1)\ndef get_dictionary_characters(dict1):\n    '''\n    Write a function that returns a string with the characters in a given dictionary.\n    '''\n    str1 = \"\"\n    for i in dict1.keys():\n        str1 = str1 + i\n    return str1\ndef remove_duplicate_words(str1):\n    '''\n    Write a function that returns a string containing the only alphabetic characters and each word is seperated by a space.\n    '''\n    str1 = remove_non_alphabet_characters(str1)\n    str1 = remove_uppercase(str1)\n    return \" \".join(str1.split(\" \"))\ndef remove_duplicate_words_by_character(str1):\n    '''\n    Write a function that returns a string with the only alphabetic characters and each word is seperated by a space.\n    '''\n    str1 = remove_non_alphabet_characters(str1)\n    str1 = remove_uppercase(str1)\n    return \" \".join(sorted(set(str1.split(\" \"))))\ndef remove_duplicate_words_by_character_and_order(str1):\n    '''\n    Write a function that returns a string with the only alphabetic characters and each word is seperated by a space.\n    '''\n    str1 = remove_non_alphabet_characters(str1)\n    str1 = remove_uppercase(str1)\n    return \" \".join(sorted(set(str1.split(\" \")), key = lambda i: len(i)))\ndef remove_duplicate_words_by_character_and_length(str1):\n    '''\n    Write a function that returns a string with the only alphabetic characters and each word is seperated by a space.\n    '''\n    str1 = remove_non_alphabet_characters(str1)\n    str1 = remove_uppercase(str1)\n    return \" \".join(sorted(set(str1.split(\" \")), key = lambda i: len(i), reverse = True))\ndef get_dictionary_sorted_by_length(dict1):\n    '''\n    Write a function that returns a dictionary sorted in ascending order of the length of the keys.\n    '''\n    return sorted(dict1.items(), key = lambda kv:(len(kv[0]), kv[0]))\ndef get_dictionary_sorted_by_value(dict1):\n    '''\n    Write a function that returns a dictionary sorted in descending order of the values.\n    '''\n    return sorted(dict1.items(), key = lambda kv:(kv[1], kv[0]), reverse = True)\ndef get_dictionary_sorted_by_value_and_length(dict1):\n    '''\n    Write a function that returns a dictionary sorted in descending order of the value and the length of the keys.\n    '''\n    return sorted(dict1.items(), key = lambda kv:(kv[1], len(kv[0])), reverse = True)\ndef find_duplicate_words(str1):\n    '''\n    Write a function that returns a list of all the duplicates words in a given string.\n    '''\n    dict1 = create_a_dictionary(str1)\n    duplicate_words = []\n    for i in dict1.keys():\n        if dict1[i] > 1:\n            duplicate_words.append(i)\n    return duplicate_words\ndef find_duplicate_words_by_character(str1):\n    '''\n    Write a function that returns a list of all the duplicates words in a given string.\n    '''\n    dict1 = create_a_dictionary(str1)\n    duplicate_words = []\n    for i in dict1.keys():\n        if dict1[i] > 1:\n            duplicate_words.append(i)\n    return duplicate_words\ndef find_duplicate_words_by_character_and_order(str1):\n    '''\n    Write a function that returns a list of all the duplicates words in a given string.\n    '''\n    dict1 = create_a_dictionary(str1)\n    duplicate_words = []\n    for i in dict1.keys():\n        if dict1[i] > 1:\n            duplicate_words.append(i)\n    return duplicate_words\ndef find_duplicate_words_by_character_and_length(str1):\n    '''\n    Write a function that returns a list of all the duplicates words in a given string.\n    '''\n    dict1 = create_a_dictionary(str1)\n    duplicate_words = []\n    for i in dict1.keys():\n        if dict1[i] > 1:\n            duplicate_words.append(i)\n    return duplicate_words\ndef find_duplicate_words_by_character_and_length_and_order(str1):\n    '''\n    Write a function that returns a list of all the duplicates words in a given string.\n    '''\n    dict1 = create_a_dictionary(str1)\n    duplicate_words = []\n    for i in dict1.keys():\n        if dict1[i] > 1:\n            duplicate_words.append(i)\n    return duplicate_words\ndef get_dictionary_reversed(dict1):\n    '''\n    Write a function that returns a dictionary with all the values reversed.\n    '''\n    dict1 = create_a_dictionary(str1)\n    dict2 = {}\n    for i in dict1.keys():\n        dict2[i] = dict1[i]\n    return dict2\ndef count_duplicate_words_by_length(dict1):\n    '''\n    Write a function that returns a dictionary with the number of times each word appears in a given string.\n    '''\n    dict2 = {}\n    for i in dict1.keys():\n        if dict1[i] in dict2:\n            dict2[dict1[i]] = dict2[dict1[i]] "
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]+\", \"\", str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n    \ndef main():\n    mylist = [[1,2,3], [4,5,6], [7,8,9]]\n    print(Extract(mylist))\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x:x[0], lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [item[0] for item in lst]\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res=[]\n    for sub in lst:\n        res.append(sub[0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[0]\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.islower():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count+=1\n    return upper_count\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    lower_count = 0\n    for char in str:\n        if char.islower():\n            lower_count+=1\n    return lower_count\n    \ndef digit_ctr(str):\n    '''\n    Write a python function to count the digit characters in a given string.\n    '''\n    digit_count = 0\n    for char in str:\n        if char.isdigit():\n            digit_count+=1\n    return digit_count\n    \ndef symbol_ctr(str):\n    '''\n    Write a python function to count the symbol characters in a given string.\n    '''\n    symbol_count = 0\n    for char in str:\n        if char.isalnum():\n            symbol_count+=1\n    return symbol_count\n    \ndef alphanum_ctr(str):\n    '''\n    Write a python function to count the alphanumeric characters in a given string.\n    '''\n    alphanum_count = 0\n    for char in str:\n        if char.isalnum():\n            alphanum_count+=1\n    return alphanum_count\n    \ndef main():\n    '''\n    Write a main function that asks the user to enter a string, and then prints \n    out the number of upper case, lower case, digits, and symbol characters in \n    the string.\n    '''\n    string = input(\"Enter a string: \")\n    print(\"Number of upper case characters: %d\" % upper_ctr(string))\n    print(\"Number of lower case characters: %d\" % lower_ctr(string))\n    print(\"Number of digits: %d\" % digit_ctr(string))\n    print(\"Number of symbols: %d\" % symbol_ctr(string))\n    print(\"Number of alphanumeric characters: %d\" % alphanum_ctr(string))\n    \nmain()"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for c in str:\n        if c.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # return sum(1 for c in str if c.isupper())\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for letter in str:\n        if letter.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return [[]]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1,len(list1)):\n        result.extend(list(combinations(list1,i)))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return [list1]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    a = combinations(list1,2)\n    return(list(a))\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        if len(list1) == 1:\n            return [list1]\n        else:\n            first = list1[0]\n            rest = list1[1:]\n            return [first] + combinations_list(rest)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [[list1[0]]]\n    res=[]\n    for i in range(len(list1)):\n        for x in combinations_list(list1[:i]+list1[i+1:]):\n            res.append([list1[i]]+x)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list(itertools.combinations(list1, i)))\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(1,len(list1)):\n        list2.extend(list(combinations(list1,i)))\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = sorted(list1)\n    combinations = []\n    combinations.append([list1[0]])\n    for i in range(1, len(list1)):\n        for j in combinations[i-1]:\n            if j+1 < list1[i]:\n                combinations.append([j+1]+[list1[i]])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        l = []\n        for i in range(0,len(list1)):\n            l.append(list1[i])\n        for i in range(1,len(list1)):\n            r = combinations_list(list1[i:])\n            for j in r:\n                l.append(list1[:i]+j)\n        return l\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    min_prod = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_product(arr):\n        max_so_far = 1\n        max_ending_here = 1\n        for i in arr:\n            if i == 0:\n                max_ending_here = 1\n                max_so_far = max_ending_here\n            else:\n                max_ending_here = max_ending_here * i\n                max_so_far = max(max_ending_here, max_so_far)\n        return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None:\n        return None\n    min_value = arr[0]\n    max_value = arr[0]\n    max_product = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_product = max(max_product, -arr[i])\n            min_value = min(min_value, arr[i])\n        else:\n            max_product = max(max_product, arr[i])\n            min_value = min(min_value, arr[i])\n    if min_value > 0:\n        return max_product\n    else:\n        return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = -1\n    for i in xrange(n):\n        for j in xrange(i, n):\n            product = 1\n            for k in xrange(i, j+1):\n                product *= arr[k]\n            max_product = max(max_product, product)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    maximum = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            maximum = max(maximum, product)\n    return maximum\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    def max_subarray_product_recursion(arr, low, high):\n        if high == low:\n            return arr[low]\n        elif high == low+1:\n            return max(arr[low], arr[high])\n        mid = (low + high)/2\n        left_max = max_subarray_product_recursion(arr, low, mid)\n        right_max = max_subarray_product_recursion(arr, mid+1, high)\n        max_left = arr[mid] * left_max\n        max_right = arr[mid+1] * right_max\n        max_curr = max_left if max_left > max_right else max_right\n        for i in xrange(mid-1, low-1, -1):\n            max_curr = max(max_curr, arr[i] * max_curr)\n        return max_curr\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    left_max, right_max, max_product = arr[0], arr[-1], arr[0] * arr[-1]\n    for i in range(1, len(arr)):\n        left_max = max(left_max * arr[i], arr[i])\n        max_product = max(left_max, max_product)\n    for i in range(len(arr) - 2, -1, -1):\n        right_max = max(right_max * arr[i], arr[i])\n        max_product = max(right_max, max_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n            max_ending_here *= num\n        else:\n            max_ending_here = max(num, max_ending_here * num)\n            min_ending_here = min(num, min_ending_here * num)\n        max_product = max(max_product, max_ending_here)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict:\n        return dict[n]\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    k = len(dict)\n    for key in dict.keys():\n        if len(dict[key])!= n:\n            return False\n    return True\n    \ndef check_value_alt(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if len(dict[key])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    val = dict.values()[0]\n    for i in dict.values():\n        if i!= val:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    if len(dict) == 0:\n        return True\n    if len(dict) > 1:\n        n_dict = {}\n        for k, v in dict.items():\n            if v not in n_dict:\n                n_dict[v] = 1\n            elif v in n_dict:\n                n_dict[v] += 1\n        for val in n_dict:\n            if n_dict[val]!= len(dict):\n                return False\n    return True\n    \n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    n_set = set()\n    for key, value in dict.items():\n        if value in n_set:\n            return False\n        else:\n            n_set.add(value)\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values()))==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= {}:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value!= []:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n    \n    \n    \n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for (key,value) in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { k: v for k, v in dict1.items() if v }\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.iteritems() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    # print(dict1)\n    for key in list(dict1.keys()):\n        if not dict1[key]:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 1\n    max_product = 1\n    for i in xrange(len(arr)):\n        max_product = max(max_product, arr[i] * max_product)\n        max_product = max(max_product, arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # if arr is empty return 0\n    if len(arr) == 0:\n        return 0\n    \n    # initialize maximum product to be zero\n    max_product = 0\n    # iterate through the array\n    for i in range(0, len(arr)):\n        # iterate through the array backwards\n        for j in range(i, -1, -1):\n            # multiply the max number with the current number\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    l = len(arr)\n    if l == 1:\n        return arr[0]\n    return max([arr[i] * arr[j] * arr[k] for i in range(l-2) for j in range(i+1, l-1) for k in range(j+1, l)])\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i]\n    return prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in xrange(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    length = len(arr)\n    ans = [1]*length\n    \n    for i in xrange(length):\n        ans[i] = 1\n        for j in xrange(i):\n            if arr[j] < arr[i]:\n                ans[i] = max(ans[i],ans[j]*arr[i])\n    return max(ans)\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_num = 1\n    min_num = 1\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n            min_num = arr[i]\n        else:\n            max_num = max(arr[i] * max_num, arr[i] * min_num)\n            min_num = min(arr[i] * max_num, arr[i] * min_num)\n    return max_num\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    i = 1\n    k = 0\n    while i < len(arr):\n        if arr[k] < arr[i]:\n            k = i\n        i += 1\n    return max(arr[0], arr[k], arr[-1] * arr[k])\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return max(arr[0]*arr[1], arr[1]*arr[0])\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_ = 1\n    for i in range(1, len(arr)):\n        max_ = max(max_ * arr[i], arr[i])\n    return max_\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    list_tup = list(test_tup)\n    result_tup = []\n    i = 0\n    while i < len(list_tup)-1:\n        result_tup.append(list_tup[i] + list_tup[i+1])\n        i+=1\n    return result_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result = result + test_tup[i] + test_tup[i+1]\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    i = 0\n    j = 1\n    while i <= len(test_tup) - 1:\n        j = i + 1\n        while j <= len(test_tup):\n            result.append(test_tup[i] + test_tup[j])\n            j += 1\n        i += 1\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])\n    return new_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    output_tup = ()\n    for i in range(len(test_tup)-1):\n        output_tup += (test_tup[i] + test_tup[i+1],)\n    output_tup += (test_tup[-1],)\n    return output_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    try:\n        a,b = test_tup\n    except TypeError:\n        raise ValueError('input is not a valid tuple')\n    return a + b\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    pair_list = []\n    for idx, element in enumerate(test_tup):\n        pair_list.append(element + test_tup[idx+1])\n    return tuple(pair_list)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l = len(test_tup)\n    if l == 0:\n        return\n    elif l == 1:\n        return (test_tup[0],)\n    elif l == 2:\n        return (test_tup[0], test_tup[1])\n    elif l == 3:\n        return (test_tup[0], test_tup[1], test_tup[2])\n    else:\n        return (test_tup[0], test_tup[1], test_tup[2], test_tup[3])\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: x * y, arr) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    p = 1\n    for i in range(n):\n        p = (p * arr[i]) % n\n    return p\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = list(arr)\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x,y: (x*y) % n, arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    n = len(arr)\n    prod = 1\n    for i in xrange(n):\n        prod = (prod * arr[i]) % n\n    return prod\n    \narr = [1,1,1]\nn = len(arr)\nprint find_remainder(arr, n)"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in xrange(n):\n            result = (result * arr[i]) % n\n        return result\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod\n    \ndef find_multiplicative_inverse(e, r): \n    '''\n    Write a python function to find the multiplicative inverse of two numbers e and r (both numbers should be coprime)\n    '''\n    for i in range(1, r):\n        if ((i*e) % r == 1):\n            return i\n    return None\n    \ndef gcd(a, b): \n    '''\n    Write a python function to find the GCD of two numbers a and b\n    '''\n    while (a!= 0):\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import math\n    import functools\n    return functools.reduce(lambda x,y: x*y,arr) % n\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        if i+1 < len(l):\n            if l[i+1]-l[i]!= 1:\n                return False\n        else:\n            return False\n    return True\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)):\n        if l[i]!= l[i - 1] + 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n == 1:\n        return True\n    for i in range(n-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l==sorted(l): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if(l[i] + 1!= l[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]!= l[i] + 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    else:\n        if l[0] + 1 == l[1]:\n            return check_Consecutive(l[1:])\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            count = 1\n            break\n    if count == 1:\n        print(\"It is not a consecutive list.\")\n    else:\n        print(\"It is a consecutive list.\")\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]!= (l[i+1] + 1):\n            return False\n    return True\n    \ndef check_if_Sum_of_digits_in_list(l):\n    '''\n    Write a python function to check whether the sum of the digits in a list is a perfect number or not.\n    '''\n    total = 0\n    for i in l:\n        total += i\n    if total % 2!= 0:\n        return False\n    else:\n        return True\n        \ndef check_perfect_square(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n == 1:\n        return True\n    if n < 1:\n        return False\n    n = n // 2\n    while n > 1:\n        if n % 2!= 0:\n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) - set(test_list2))\n    \ndef tuple_union(test_list1, test_list2):\n    '''\n    Write a function to find the tuple union of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) | set(test_list2))\n    \ndef tuple_remove_duplicates(test_list):\n    '''\n    Write a function to remove all the duplicates from the given tuple list.\n    '''\n    return list(set(test_list))\n    \ndef list_remove_duplicates(test_list):\n    '''\n    Write a function to remove all the duplicates from the given list.\n    '''\n    return list(set(test_list))\n    \ndef list_difference(test_list1, test_list2):\n    '''\n    Write a function to find the difference between two given lists in the form of set difference.\n    '''\n    return list(set(test_list1) - set(test_list2))\n    \ndef list_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the intersection of two given lists in the form of set intersection.\n    '''\n    return list(set(test_list1) & set(test_list2))\n    \ndef list_union(test_list1, test_list2):\n    '''\n    Write a function to find the union of two given lists in the form of set union.\n    '''\n    return list(set(test_list1) | set(test_list2))\n    \ndef list_add_remove(test_list):\n    '''\n    Write a function to add and remove two numbers from a list.\n    '''\n    if len(test_list) < 1:\n        return []\n    else:\n        return [test_list[0] + 2, test_list[-1] - 2]\n        \ndef list_reverse(test_list):\n    '''\n    Write a function to reverse the order of elements in the given list.\n    '''\n    return test_list[::-1]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    lst1, lst2 = [], []\n    for i in test_list1:\n        if i not in lst1:\n            lst1.append(i)\n    for i in test_list2:\n        if i not in lst2:\n            lst2.append(i)\n    return lst1, lst2\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list_set = set(test_list1)\n    return [element for element in test_list2 if element in list_set]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1, set2 = set(test_list1), set(test_list2)\n    return tuple(set1.intersection(set2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0:\n        return test_list2\n    if len(test_list2) == 0:\n        return test_list1\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n    result_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] == test_list2[i]:\n            result_list.append(test_list1[i])\n    return tuple(result_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tup in test_list1:\n        if tup in test_list2:\n            intersection_list.append(tup)\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1 & set2)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # result=str1\n    # for i in range(len(str1)):\n    #     if str1[i]==ch:\n    #         result=result[:i]+newch+result[i+1:]\n    # return result\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch.join(str1.split(ch))\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_by_value = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_by_value\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\ndef sort_dict_reverse(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\ndef sort_dict_tuple(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: (x[1], x[0]), reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = []\n    for key, value in dict1.iteritems():\n        list1.append((value, key))\n    list1.sort()\n    list1.reverse()\n    return [key for value, key in list1]\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key = lambda x:x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = sorted(dict1, key=dict1.get, reverse=True)\n    return keys\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_num = None\n    small_num = None\n    for i in nums:\n        if big_num is None:\n            big_num = i\n        elif small_num is None:\n            small_num = i\n        elif i < small_num:\n            small_num = i\n        elif i > big_num:\n            big_num = i\n    return big_num + small_num\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = nums[0]\n    small = nums[0]\n    for i in range(len(nums)):\n        if big < nums[i]:\n            big = nums[i]\n        elif small > nums[i]:\n            small = nums[i]\n    return big + small\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    l = len(nums)\n    max_num = 0\n    min_num = 0\n    for i in range(l):\n        if nums[i]>max_num:\n            max_num = nums[i]\n        elif nums[i]<min_num:\n            min_num = nums[i]\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    min_val = min(nums)\n    max_val = max(nums)\n    return max_val + min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    total = 0\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n        total += num\n    return [total, smallest, largest]\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    total = sum(nums)\n    nums.sort()\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = string.lower()\n    return lower\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if not string:\n        return \"\"\n    else:\n        return string[0].lower() + convert(string[1:])\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string:\n        return string.lower()\n    else:\n        return string\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower = re.compile(r'[a-z]+')\n    str1 = lower.sub('', str1)\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    num = re.compile(r'[0-9]+')\n    str1 = num.sub('', str1)\n    return str1\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove all the special characters from a given string.\n    '''\n    s = re.compile('[@_!#$%^&*()<>?/\\|}{~:]')\n    str1 = s.sub('', str1)\n    return str1\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove all the uppercase characters from a given string.\n    '''\n    upper = re.compile(r'[A-Z]+')\n    str1 = upper.sub('', str1)\n    return str1\ndef remove_url(str1):\n    '''\n    Write a function to remove all the URL characters from a given string.\n    '''\n    url = re.compile(r'(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\".,<>?\\xab\\xbb\\u201c\\u201d\\u2018\\u2019]))')\n    str1 = url.sub('', str1)\n    return str1\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove all the whitespace from a given string.\n    '''\n    str1 = re.sub('\\s+','',str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove all the stopwords from a given string.\n    '''\n    stopwords = re.compile(r'[a-z]+')\n    str1 = stopwords.sub('', str1)\n    return str1\ndef remove_hashtags(str1):\n    '''\n    Write a function to remove all the hashtags from a given string.\n    '''\n    str1 = re.sub(r'#([A-Za-z]+[A-Za-z0-9]+)', '', str1)\n    return str1\ndef remove_mentions(str1):\n    '''\n    Write a function to remove all the mention strings from a given string.\n    '''\n    str1 = re.sub(r'@([A-Za-z]+[A-Za-z0-9]+)', '', str1)\n    return str1\ndef remove_emojis(str1):\n    '''\n    Write a function to remove all the emojis from a given string.\n    '''\n    emojis = re.compile(u'[\\U00010000-\\U0010ffff]')\n    str1 = emojis.sub('', str1)\n    return str1\ndef remove_special_chars_twitter(str1):\n    '''\n    Write a function to remove all the special characters from a given string.\n    '''\n    s = re.compile('[@_!#$%^&*()<>?/\\|}{~:]')\n    str1 = s.sub('', str1)\n    return str1\ndef remove_twitter_handles(str1):\n    '''\n    Write a function to remove all the twitter handles from a given string.\n    '''\n    str1 = re.sub(r'\\@([A-Za-z]+[A-Za-z0-9]+)', '', str1)\n    return str1\ndef remove_at(str1):\n    '''\n    Write a function to remove all the @ characters from a given string.\n    '''\n    str1 = re.sub(r'(?i)\\b@([A-Za-z]+[A-Za-z0-9]+)', '', str1)\n    return str1\ndef remove_smileys(str1):\n    '''\n    Write a function to remove all the smileys from a given string.\n    '''\n    smileys = re.compile(r'[:=;][oO]+[Dd]+[Dd]+|[oO]+[Dd]+[oO]+|[oO]+[oO]+')\n    str1 = smileys.sub('', str1)\n    return str1\ndef remove_short_words(str1):\n    '''\n    Write a function to remove all the short words from a given string.\n    '''\n    short = re.compile(r'[a-zA-Z]+')\n    str1 = short.sub('', str1)\n    return str1\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove all the punctuations from a given string.\n    '''\n    punctuations = re.compile(r'[\\'!\"$%&\\'()*+,-./:;<=>?[\\\\^_`{|}~]')\n    str1 = punctuations.sub('', str1)\n    return str1\ndef remove_emails(str1):\n    '''\n    Write a function to remove all the email addresses from a given string.\n    '''\n    str1 = re.sub(r'[\\w\\.-]+@[\\w\\.-]+', '', str1)\n    return str1\ndef remove_urls(str1):\n    '''\n    Write a function to remove all the URLs from a given string.\n    '''\n    url = re.compile(r'(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\".,<>?\\xab\\xbb\\u201c\\u201d\\u2018\\u2019]))')\n    str1 = url.sub('', str1)\n    return str1\ndef remove_tweet_tags(str1):\n    '''\n    Write a function to remove all the twitter tags from a given string.\n    '''\n    str1 = re.sub(r'[#][A-Za-z]+[0-9]+', '', str1)\n    return str1\ndef remove_emojis(str1):\n    '''\n    Write a function to remove all the emojis from a given string.\n    '''\n    emojis = re.compile(u'[\\U00010000-\\U0010ffff]')\n    str1 = emojis.sub('', str1)\n    return str1\ndef remove_special_chars_twitter(str1):\n    '''\n    Write a function to remove all the special characters from a given string.\n    '''\n    s = re.compile('[@_!#$%^&*()<>?/\\|}{~:]')\n    str1 = s.sub('', str1)\n    return str1\ndef remove_twitter_handles(str1):\n    '''\n    Write a function to remove all the twitter handles from a given string.\n    '''\n    str1 = re.sub(r'\\@([A-Za-z]+[A-Za-z0-9]+)', '', str1)\n    return str1\ndef remove_at(str1):\n    '''\n    Write a function to remove all the @ characters from a given string.\n    '''\n    str1 = re.sub(r'(?i)\\b@([A-Za-z]+["
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_str = re.sub(r'[a-z]', '', str1)\n    return lowercase_str\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('\\s+', '', re.sub(r'\\b[a-z]+\\b', '', str1))\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]\", \"\", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    t = str1.lower()\n    p = re.compile('[a-z]+')\n    return p.sub('', t)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile(r'[a-z]+')\n    str1 = lowercase.sub('', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in str1:\n        if(i.islower()):\n            str1 = str1.replace(i,'')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    # '''\n    # # Manually\n    # ls = re.findall('[A-Z][a-z]+', str1)\n    # print(ls)\n    # for i in ls:\n    #     str1 = re.sub(i, '', str1)\n    # print(str1)\n    # '''\n    \n    # Another way to solve this problem\n    # return re.sub('[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(?i)[a-z]+', '', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    d = n/10;\n    return d\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n>0 :\n        n = n // 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10 ** 0)\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n    \ndef is_even(n) :  \n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    return (n % 2) == 0\n    \ndef is_perfect(n) :  \n    '''\n    Write a python function to check if a given number is perfect.\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum = sum + i\n    return sum == n\n    \ndef is_armstrong(n) :  \n    '''\n    Write a python function to check if a given number is armstrong or not.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0 :\n        last_digit = temp % 10\n        sum = sum + (last_digit ** 3)\n        temp = temp / 10\n    return n == sum\n    \ndef is_prime(n) :  \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 1 :\n        return False\n    elif n == 2 :\n        return True\n    else :\n        for i in range(2, n) :\n            if n % i == 0 :\n                return False\n        return True\n    \ndef is_palindrome(n) :  \n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    rev = 0\n    temp = n\n    while temp > 0 :\n        last_digit = temp % 10\n        rev = rev * 10 + last_digit\n        temp = temp / 10\n    return n == rev\n    \ndef reverse(n) :  \n    '''\n    Write a python function to reverse a given number.\n    '''\n    rev = 0\n    temp = n\n    while temp > 0 :\n        last_digit = temp % 10\n        rev = rev * 10 + last_digit\n        temp = temp / 10\n    return rev\n    \ndef is_perfect_square(n) :  \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    temp = n\n    for i in range(1, n) :\n        temp = temp - i ** 2\n        if temp < 0 :\n            break\n    return temp == 0\n    \ndef is_perfect_cube(n) :  \n    '''\n    Write a python function to check if a given number is perfect cube or not.\n    '''\n    temp = n\n    for i in range(1, n) :\n        temp = temp - i ** 3\n        if temp < 0 :\n            break\n    return temp == 0\n    \ndef is_perfect_square_pythonic(n) :  \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    from math import sqrt\n    return sqrt(n) == int(sqrt(n))\n    \ndef is_perfect_cube_pythonic(n) :  \n    '''\n    Write a python function to check if a given number is perfect cube or not.\n    '''\n    from math import **\n    return **(n) == int(**(n))\n    \ndef digits(n) :  \n    '''\n    Write a python function to find the digits in a given number.\n    '''\n    digits = []\n    while n > 0 :\n        last_digit = n % 10\n        digits.append(last_digit)\n        n = n / 10\n    return digits\n    \ndef is_power(n) :  \n    '''\n    Write a python function to check if a given number is power of some given number or not.\n    '''\n    return n == n ** n\n    \ndef is_power_of(n) :  \n    '''\n    Write a python function to check if a given number is power of some given number or not.\n    '''\n    return n == n ** n\n    \ndef modulo(n) :  \n    '''\n    Write a python function to find the modulo of a given number.\n    '''\n    return n % 2\n    \ndef is_congruent(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    return (a * b) / gcd(a, b) == a / b\n    \ndef is_congruent_pythonic(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    return a % b == 0\n    \ndef gcd(a, b) :  \n    '''\n    Write a python function to find the greatest common divisor of a given number.\n    '''\n    while b > 0 :\n        a, b = b, a % b\n    return a\n    \ndef is_congruent_a_power_of_b(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    return a % b == 0 and gcd(a, b) == 1\n    \ndef is_congruent_a_power_of_b_pythonic(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    from math import gcd\n    return a % b == 0 and gcd(a, b) == 1\n    \ndef modulo(n) :  \n    '''\n    Write a python function to find the modulo of a given number.\n    '''\n    return n % 2\n    \ndef is_congruent(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    return (a * b) / gcd(a, b) == a / b\n    \ndef is_congruent_pythonic(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    return a % b == 0\n    \ndef gcd(a, b) :  \n    '''\n    Write a python function to find the greatest common divisor of a given number.\n    '''\n    while b > 0 :\n        a, b = b, a % b\n    return a\n    \ndef is_congruent_a_power_of_b(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    return a % b == 0 and gcd(a, b) == 1\n    \ndef is_congruent_a_power_of_b_pythonic(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    from math import gcd\n    return a % b == 0 and gcd(a, b) == 1\n    \ndef modulo(n) :  \n    '''\n    Write a python function to find the modulo of a given number.\n    '''\n    return n % 2\n    \ndef is_congruent(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    return (a * b) / gcd(a, b) == a / b\n    \ndef is_congruent_pythonic(a, b) :  \n    '''\n    Write a python function to check if a given number is congruent to another given number.\n    '''\n    return a % b == 0\n    \ndef gcd(a, b) :  \n    '''\n    Write a python function to find the greatest common divisor of a given number.\n    '''\n    while b > 0 :\n        a, b = b, a % b\n    return a\n    \ndef is_congruent_a_power_of_b(a, b) :  \n    '''\n    Write a python function to check if a given numbe"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = str(n)\n    a = x[0]\n    return a\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n    \ndef second_Digit(n) : \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return n%100/10\n    \ndef third_Digit(n) : \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return n%1000/100\n    \ndef fourth_Digit(n) : \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    return n%10000/1000\n    \ndef fifth_Digit(n) : \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    return n%100000/10000\n    \ndef sixth_Digit(n) : \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    return n%1000000/100000\n    \ndef seventh_Digit(n) : \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    return n%10000000/1000000\n    \ndef eighth_Digit(n) : \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    return n%100000000/10000000\n    \ndef ninth_Digit(n) : \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    return n%1000000000/100000000\n    \ndef tenth_Digit(n) : \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    return n%10000000000/1000000000\n    \ndef eleventh_Digit(n) : \n    '''\n    Write a python function to find the eleventh digit of a given number.\n    '''\n    return n%100000000000/1000000000000\n    \ndef twelfth_Digit(n) : \n    '''\n    Write a python function to find the twelfth digit of a given number.\n    '''\n    return n%1000000000000/10000000000000\n    \ndef thirteen_Digit(n) : \n    '''\n    Write a python function to find the thirteen digit of a given number.\n    '''\n    return n%10000000000000000/100000000000000000\n    \ndef fourteen_Digit(n) : \n    '''\n    Write a python function to find the fourteen digit of a given number.\n    '''\n    return n%10000000000000000/1000000000000000\n    \ndef fifteenth_Digit(n) : \n    '''\n    Write a python function to find the fifteenth digit of a given number.\n    '''\n    return n%10000000000000000/1000000000000000\n    \ndef sixteen_Digit(n) : \n    '''\n    Write a python function to find the sixteen digit of a given number.\n    '''\n    return n%10000000000000000/100000000000000\n    \ndef seventeenth_Digit(n) : \n    '''\n    Write a python function to find the seventeenth digit of a given number.\n    '''\n    return n%10000000000000000/100000000000000\n    \ndef eighteen_Digit(n) : \n    '''\n    Write a python function to find the eighteenth digit of a given number.\n    '''\n    return n%10000000000000000/1000000000000000\n    \ndef nineteen_Digit(n) : \n    '''\n    Write a python function to find the nineteenth digit of a given number.\n    '''\n    return n%10000000000000000/100000000000000\n    \ndef twentieth_Digit(n) : \n    '''\n    Write a python function to find the twentieth digit of a given number.\n    '''\n    return n%10000000000000000/1000000000000000\n    \ndef twenty_Digit(n) : \n    '''\n    Write a python function to find the twentieth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef eleventeenth_Digit(n) : \n    '''\n    Write a python function to find the eleventeenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef twentieth_Digit(n) : \n    '''\n    Write a python function to find the twentieth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef thirtieth_Digit(n) : \n    '''\n    Write a python function to find the thirtieth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef fourteenth_Digit(n) : \n    '''\n    Write a python function to find the fourteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef fifteenth_Digit(n) : \n    '''\n    Write a python function to find the fifteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef sixteenth_Digit(n) : \n    '''\n    Write a python function to find the sixteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef seventeenth_Digit(n) : \n    '''\n    Write a python function to find the seventeenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef eighteenth_Digit(n) : \n    '''\n    Write a python function to find the eighteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef nineteenth_Digit(n) : \n    '''\n    Write a python function to find the nineteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef twentieth_Digit(n) : \n    '''\n    Write a python function to find the twentieth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef twenty_one_Digit(n) : \n    '''\n    Write a python function to find the twenty one digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef eleventeenth_Digit(n) : \n    '''\n    Write a python function to find the eleventeenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef thirtieth_Digit(n) : \n    '''\n    Write a python function to find the thirty-first digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef fourteenth_Digit(n) : \n    '''\n    Write a python function to find the fourteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef fifteenth_Digit(n) : \n    '''\n    Write a python function to find the fifteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef sixteenth_Digit(n) : \n    '''\n    Write a python function to find the sixteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef seventeenth_Digit(n) : \n    '''\n    Write a python function to find the seventeenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef eighteenth_Digit(n) : \n    '''\n    Write a python function to find the eighteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef nineteenth_Digit(n) : \n    '''\n    Write a python function to find the nineteenth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef twentieth_Digit(n) : \n    '''\n    Write a python function to find the twentieth digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef twenty_first_Digit(n) : \n    '''\n    Write a python function to find the twenty first digit of a given number.\n    '''\n    return n%10000000000000000/10000000000000000\n    \ndef eleventeenth_Digit(n) : \n    '''\n    Writ"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    return [x for x in list if x%2!=0]\n    "
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if len(list) == 0:\n        return []\n    if len(list) == 1:\n        return [list[0]]\n    i = 0\n    j = len(list)-1\n    while i<j:\n        if list[i] % 2 == 0:\n            i += 1\n        if list[j] % 2 == 1:\n            j -= 1\n        if list[i] % 2 == 1 and list[j] % 2 == 0:\n            return [list[i],list[j]]\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    return [x for x in list if x%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for item in list:\n        if item%2!= 0:\n            odds.append(item)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in list:\n        if i%2!=0:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            list1.append(list[i])\n    return list1\n    \ndef FizzBuzz(list):\n    '''\n    Write a python function which takes a list of integers and returns the list with Fizz and Buzz added.\n    '''\n    list2 = []\n    for i in range(len(list)):\n        if list[i]%3 == 0 and list[i]%5 == 0:\n            list2.append(\"FizzBuzz\")\n        elif list[i]%3 == 0:\n            list2.append(\"Fizz\")\n        elif list[i]%5 == 0:\n            list2.append(\"Buzz\")\n        else:\n            list2.append(list[i])\n    return list2\n    \ndef TakeLast(list):\n    '''\n    Write a python function which takes a list and returns the last element of the list\n    '''\n    return list[len(list)-1]\n    \ndef RemoveMiddle(list):\n    '''\n    Write a python function which takes a list and returns a new list without the middle element.\n    '''\n    del list[len(list)/2]\n    return list\n    \ndef ReplaceMiddle(list):\n    '''\n    Write a python function which takes a list and returns a new list with the middle element replaced with the value in the second argument\n    '''\n    del list[len(list)/2]\n    list.insert(len(list)/2, 2)\n    return list\n    \ndef MultiplyList(list):\n    '''\n    Write a python function which takes a list and multiplies the value of the list by the second argument.\n    '''\n    for i in range(len(list)):\n        list[i] *= 2\n    return list\n    \ndef RemoveFirst(list):\n    '''\n    Write a python function which takes a list and removes the first element.\n    '''\n    del list[0]\n    return list\n    \ndef AppendToEnd(list):\n    '''\n    Write a python function which takes a list and appends a second list to the end of the first list.\n    '''\n    list.extend(list2)\n    return list\n    \ndef ReverseList(list):\n    '''\n    Write a python function which takes a list and returns the list in reverse order.\n    '''\n    list.reverse()\n    return list\n    \ndef SortList(list):\n    '''\n    Write a python function which takes a list and sorts the list using the bubble sort algorithm.\n    '''\n    n = len(list)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if list[j] > list[j+1] :\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n    \ndef DeleteMiddle(list):\n    '''\n    Write a python function which takes a list and deletes the middle element.\n    '''\n    del list[len(list)/2]\n    return list\n    \ndef DeleteLast(list):\n    '''\n    Write a python function which takes a list and deletes the last element.\n    '''\n    del list[len(list)-1]\n    return list\n    \ndef CopyList(list):\n    '''\n    Write a python function which takes a list and copies the list.\n    '''\n    list2 = []\n    for i in range(len(list)):\n        list2.append(list[i])\n    return list2\n    \ndef UniqueList(list):\n    '''\n    Write a python function which takes a list and returns a list with the unique elements of the original list.\n    '''\n    list2 = []\n    for i in range(len(list)):\n        if list[i] not in list2:\n            list2.append(list[i])\n    return list2\n    \ndef RandomList(list, size):\n    '''\n    Write a python function which takes a list and returns a list of random integers between 0 and size.\n    '''\n    list2 = []\n    for i in range(size):\n        list2.append(random.randint(0,size))\n    return list2\n    \ndef AddToEnd(list):\n    '''\n    Write a python function which takes a list and returns the list with the value in the second argument added to the end of the first list.\n    '''\n    for i in range(len(list)):\n        list[i] += int(list2)\n    return list\n    \ndef AddToStart(list):\n    '''\n    Write a python function which takes a list and returns the list with the value in the second argument added to the start of the first list.\n    '''\n    list.insert(0, int(list2))\n    return list\n    \ndef Sum(list):\n    '''\n    Write a python function which takes a list and returns the sum of the values.\n    '''\n    total = 0\n    for i in range(len(list)):\n        total += list[i]\n    return total\n    \ndef Avg(list):\n    '''\n    Write a python function which takes a list and returns the average of the values.\n    '''\n    avg = 0\n    for i in range(len(list)):\n        avg += list[i]\n    avg = avg/len(list)\n    return avg\n    \ndef Max(list):\n    '''\n    Write a python function which takes a list and returns the largest value in the list.\n    '''\n    max = list[0]\n    for i in range(len(list)):\n        if list[i] > max:\n            max = list[i]\n    return max\n    \ndef Min(list):\n    '''\n    Write a python function which takes a list and returns the smallest value in the list.\n    '''\n    min = list[0]\n    for i in range(len(list)):\n        if list[i] < min:\n            min = list[i]\n    return min\n    \ndef Count(list, value):\n    '''\n    Write a python function which takes a list and returns the number of times the value occurs in the list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] == value:\n            count += 1\n    return count\n    \ndef Length(list):\n    '''\n    Write a python function which takes a list and returns the length of the list.\n    '''\n    return len(list)\n    \ndef Slice(list, start, stop):\n    '''\n    Write a python function which takes a list and returns a slice of the list from start to stop-1.\n    '''\n    return list[start:stop]\n    \ndef Reverse(list):\n    '''\n    Write a python function which takes a list and returns the list in reverse order.\n    '''\n    list.reverse()\n    return list\n    \ndef Sort(list):\n    '''\n    Write a python function which takes a list and returns the list sorted.\n    '''\n    list.sort()\n    return list\n    \ndef CountEven(list):\n    '''\n    Write a python function which takes a list and returns the number of even numbers in the list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]%2 == 0:\n            count += 1\n    return count\n    \ndef CountOdd(list):\n    '''\n    Write a python function which takes a list and returns the number of odd numbers in the list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            count += 1\n    return count\n    \ndef SumOdd(list):\n    '''\n    Write a python function which takes a list and returns the sum of the odd values in the list.\n    '''\n    total = 0\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            total += list[i]\n    return total\n    \ndef SumEven(list):\n    '''\n    Write a python function which takes a list and returns the sum of the even values in the list.\n    '''\n    total = 0\n    for i in range(len(list)):\n        if list[i]%"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i]%2 == 1:\n            print list[i]\n        i = i + 1\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n**3 - (n * (n+1)) / 2\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    a = sum(i**3 for i in range(1, n+1))\n    b = sum(range(1, n+1))\n    return abs(a-b)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    result = (1.0 + n)**3 - sum_of_first_n_natural_numbers(n)\n    \n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(i**3 for i in range(1,n)) - sum(range(1,n+1))**3\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1, n)]) - sum([x for x in range(1, n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # find sum of cubes of first n natural numbers\n    sum_of_cubes = 0\n    for i in range(n) :\n        sum_of_cubes = sum_of_cubes + (i+1)**3\n    \n    # find sum of first n natural numbers\n    sum_of_n = 0\n    for i in range(n) :\n        sum_of_n = sum_of_n + i\n    \n    return sum_of_n**3 - sum_of_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + i**3\n    # Your code here\n    s = 0\n    for j in range(1, n+1) :\n        s = s + j\n    return sum - s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1) :\n        sum_of_cubes += i**3\n    sum_of_numbers = 0\n    for i in range(1,n+1) :\n        sum_of_numbers += i\n    return sum_of_numbers**3 - sum_of_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    for i in range(1,n+1) :\n        sum1 = sum1 + i**3\n    sum2 = 0\n    for j in range(1,n+1) :\n        sum2 = sum2 + j\n    return sum1 - sum2\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i**3\n    cube = n*(n+1)*(2*n+1)//6\n    return cube - sum\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        if A[i] & 1 == 1 :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # B[i] = {xor(a,b)}\n    B = []\n    count = 0\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    s = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i]^A[j]&1 : s += 1\n    return s\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N-1) : \n        if ((A[i] ^ A[i+1]) & 0x1) : \n            count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = sorted(A)\n    count = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] & 1 == 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # idea is to iterate over the entire array.\n    # if the modulus of the xor of all the elements is even, add one to the counter\n    # otherwise, continue iterating\n    # This is because the pairs are counted as evens in the array A\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    num_Odd_Pairs = 0 \n    for i in xrange(N) : \n        for j in xrange(i+1,N) : \n            if A[i]^A[j]%2 == 1 : \n                num_Odd_Pairs += 1 \n    return num_Odd_Pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    res = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ((A[i]^A[j]) & 1) == 1:\n                res = res + 1\n    return res\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = string.swapcase()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isalpha():\n        return string.swapcase()\n    elif string.isdigit():\n        return string\n    else:\n        return string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([(string[i].lower() if string[i].isupper() else string[i].upper()) for i in range(len(string))])\n    \n    \nprint(toggle_string('Hello World'))\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    import string\n    return ''.join([i.swapcase() for i in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([(str(x)).lower() if x.isupper() else str(x).upper() for x in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    res = []\n    for i in string:\n        if i.isupper():\n            res.append(i.lower())\n        elif i.islower():\n            res.append(i.upper())\n        else:\n            res.append(i)\n    return ''.join(res)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    res = ''\n    for char in string:\n        if char.isupper():\n            res += char.lower()\n        else:\n            res += char.upper()\n    return res\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < n2:\n        n1, n2 = n2, n1\n    if n1 == n2:\n        return 0\n    if n1 > n2:\n        n1, n2 = n2, n1\n    if n1 % 10 == 0:\n        return 10\n    return 1 + (n1 // 10 - n2 // 10)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(n1)\n    n2 = abs(n2)\n    diff = 0\n    # while n1 > 0:\n    #     digit1 = n1 % 10\n    #     n1 /= 10\n    #     digit2 = n2 % 10\n    #     n2 /= 10\n    #     diff += (digit1 - digit2) ** 2\n    # print diff\n    return sum([(n1 - n2) ** 2 for n1, n2 in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    while n1 or n2:\n        n1, d = divmod(n1, 10)\n        n2, d = divmod(n2, 10)\n        sum += abs(d - d)\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    n1, n2 = str(n1), str(n2)\n    \n    if len(n1)!= len(n2):\n        raise Exception('length of the two numbers must be same')\n    \n    d = 0\n    for i in range(len(n1)):\n        d += (int(n1[i]) - int(n2[i]))**2\n    \n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # first find the digits of the numbers\n    num1 = list(str(n1))\n    num2 = list(str(n2))\n    len1 = len(num1)\n    len2 = len(num2)\n    # if the number of digits are not the same, then its not possible\n    if len1!= len2:\n        return None\n    # start comparing the digits of each number\n    for i in range(len1):\n        if num1[i] == num2[i]:\n            continue\n        else:\n            # calculate the number of times the difference is greater than or equal to 1\n            # this means that the difference is greater than or equal to 10\n            dig_diff = len1 - i\n            return dig_diff * 10**(dig_diff-1)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < n2:\n        (n1, n2) = (n2, n1)\n    n1 = str(n1)\n    n2 = str(n2)\n    length = max(len(n1), len(n2))\n    n1, n2 = (n1.zfill(length), n2.zfill(length))\n    return sum(abs(int(a) - int(b)) for a, b in zip(n1, n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_nums = []\n    n2_nums = []\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # digit_distance_nums(3, 12) -> 2\n    return sum(abs(int(i)-int(j)) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    num1 = str(n1)\n    num2 = str(n2)\n    num1 = list(num1)\n    num2 = list(num2)\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    diff = []\n    for i in xrange(len(num1)):\n        d = int(num1[i]) - int(num2[i])\n        diff.append(d)\n    return sum(diff)\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    max_sum = current_sum = a[0]\n    for i in xrange(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(current_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far, max_ending_here = 0, 0\n    for i in xrange(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # sub_array_sum = [0]\n    # max_sub_array_sum = 0\n    # for i in range(size):\n    #     sub_array_sum.append(a[i]+sub_array_sum[i])\n    #     max_sub_array_sum = max(max_sub_array_sum, sub_array_sum[i+1])\n    # return max_sub_array_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in xrange(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n            start = i + 1\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            end = i\n    for i in range(end, start - 1, -1):\n        s += a[i]\n    return s + max_so_far\n    \ndef test_max_sub_array_sum():\n    assert(max_sub_array_sum([1], 1) == 1)\n    assert(max_sub_array_sum([1, 2], 2) == 3)\n    assert(max_sub_array_sum([-1, -2, -3, -4], 4) == -1)\n    assert(max_sub_array_sum([-1, -2, -3, -4], 3) == -1)\n    assert(max_sub_array_sum([-1, -2, -3, -4], 2) == -1)\n    assert(max_sub_array_sum([-1, -2, -3, -4], 1) == -1)\n    assert(max_sub_array_sum([-1, -2, -3, -4], 0) == -1)\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    global_max = a[0]\n    curr_max = 0\n    for i in range(size):\n        curr_max = curr_max + a[i]\n        if curr_max < 0:\n            curr_max = 0\n        elif curr_max > global_max:\n            global_max = curr_max\n    return global_max\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # base case\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if test_tup1 == test_tup2:\n        return test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if test_tup1 is None and test_tup2 is None:\n        return None\n    if test_tup1 is None:\n        return test_tup2\n    if test_tup2 is None:\n        return test_tup1\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    for i in test_tup1:\n        union_set.add(i)\n    for i in test_tup2:\n        union_set.add(i)\n    return sorted(union_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    \n    union_set = test_set1.union(test_set2)\n    union_list = list(union_set)\n    union_list.sort()\n    \n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = tuple(sorted(test_tup1))\n    test_tup2 = tuple(sorted(test_tup2))\n    return test_tup1+test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    x = list(set(test_tup1) | set(test_tup2))\n    x.sort()\n    return x\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = []\n    union_elements.append(test_tup1[0])\n    union_elements.append(test_tup2[0])\n    union_elements.sort()\n    return tuple(union_elements)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    max_len = 1\n    curr_len = 1\n    for i in xrange(len(lst)):\n        if lst[i] < lst[i-1]:\n            curr_len += 1\n        else:\n            max_len = max(max_len,curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initializing the list to store the indices \n    # of the sub-lists\n    indices = [] \n    # initializing the counter to store the length of the\n    # longest sub-lists\n    counter = 0\n    # iterating over the indices of the list\n    for i in range(len(lst)): \n        # initializing the local counter to 1\n        count = 1\n        # iterating over the list from the current index\n        for j in range(i, len(lst)):\n            # checking if the list at the current index is\n            # the same as the list at the previous index\n            if lst[j] == lst[i]:\n                # incrementing the count\n                count += 1\n            # checking if the count is greater than the\n            # local counter\n            else:\n                # updating the local counter\n                count = 1\n            # checking if the local counter is greater than\n            # the global counter\n            if count > counter:\n                # updating the global counter\n                counter = count\n        # updating the indices list\n        indices.append(i)\n    # initializing the variable to store the maximum length\n    # of the sub-lists\n    max = 0\n    # iterating over the indices list\n    for i in indices:\n        # checking if the length of the current sub-list\n        # is greater than the global maximum length\n        if counter > max:\n            # updating the maximum length\n            max = counter\n        # decrementing the counter\n        counter -= 1\n    # returning the maximum length of the sub-lists\n    return max\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for ele in lst:\n        if len(ele) > max_length:\n            max_length = len(ele)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if isinstance(i, list):\n            max_len = max(max_len, len(i))\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) <= 0:\n        return 0\n    else:\n        return max(Find_Max_Length(lst[1:]), len(lst))\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    max_len_sublist = []\n    for i in range(len(lst)):\n        count = 0\n        while i < len(lst):\n            if lst[i] not in lst[i-count:i]:\n                break\n            else:\n                count += 1\n                if count > max_len:\n                    max_len = count\n                    max_len_sublist = lst[i-count:i]\n    print(max_len)\n    print(max_len_sublist)\nFind_Max_Length(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\ndef Finding_Max_Permutation(lst):  \n    '''\n    Write a python function to find the maximum permutation of a list.\n    '''\n    lst.sort()\n    return lst[-1]\ndef Find_Max_Sequence(lst):  \n    '''\n    Write a python function to find the length of the longest subsequence.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return max(lst[0]+lst[1],lst[1]+lst[2])\ndef Finding_Max_Submatrix(mat):  \n    '''\n    Write a python function to find the maximum sum of a submatrix in a matrix.\n    '''\n    return max(sum(mat[i]) for i in range(len(mat)))\ndef Merge_Two_Sorted_Lists(l1, l2):  \n    '''\n    Write a python function to merge two sorted lists into one sorted list.\n    '''\n    i = 0\n    j = 0\n    temp = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            temp.append(l1[i])\n            i += 1\n        else:\n            temp.append(l2[j])\n            j += 1\n    while i < len(l1):\n        temp.append(l1[i])\n        i += 1\n    while j < len(l2):\n        temp.append(l2[j])\n        j += 1\n    return temp\ndef Generate_Primes(n):  \n    '''\n    Write a python function to generate prime numbers upto n.\n    '''\n    if n == 1:\n        return [2]\n    else:\n        primes = [2]\n        for i in range(3, n+1):\n            if all(i%p for p in primes):\n                primes.append(i)\n        return primes\ndef Power_Set(lst):  \n    '''\n    Write a python function to find the power set of a list.\n    '''\n    power_set = [[]]\n    for i in lst:\n        for j in power_set:\n            power_set = power_set + [j + [i]]\n    return power_set\ndef Find_Max_Product(lst):  \n    '''\n    Write a python function to find the max product of three integers.\n    '''\n    return max(lst[0]*lst[1]*lst[2], lst[0]*lst[2]*lst[1], lst[1]*lst[2]*lst[0])\ndef Sort_Array(lst):  \n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    return sorted(lst)\ndef Find_Sum(lst):  \n    '''\n    Write a python function to find the sum of an integer.\n    '''\n    return sum(lst)\ndef Find_Subarray(lst):  \n    '''\n    Write a python function to find the subarray that has maximum product.\n    '''\n    products = [1]\n    for i in range(len(lst)-1):\n        products.append(lst[i]*lst[i+1])\n    max_product = max(products)\n    max_index = products.index(max_product)\n    return lst[max_index:max_index+2]\ndef Find_Subarray_Better(lst):  \n    '''\n    Write a python function to find the subarray that has maximum product.\n    '''\n    products = []\n    for i in range(len(lst)):\n        products.append(lst[i]*lst[i+1])\n    max_product = max(products)\n    for i in range(len(lst)):\n        if products[i] == max_product:\n            return lst[i:i+2]\ndef Find_Median(lst):  \n    '''\n    Write a python function to find the median of a list.\n    '''\n    return sorted(lst)[len(lst)//2]\ndef Find_Max_Unsorted_Subarray(lst):  \n    '''\n    Write a python function to find the maximum sum of subarray without sorting.\n    '''\n    max_sum = 0\n    i = 0\n    j = 0\n    while i < len(lst) and j < len(lst):\n        if lst[i] > lst[j]:\n            max_sum += lst[j]\n            j += 1\n        else:\n            max_sum += lst[i]\n            i += 1\n    if i == len(lst):\n        max_sum += sum(lst[j:])\n    else:\n        max_sum += sum(lst[i:])\n    return max_sum\ndef Product_of_Subarray(lst):  \n    '''\n    Write a python function to find the product of the subarray.\n    '''\n    products = [1]\n    for i in range(1,len(lst)):\n        products.append(lst[i-1] * lst[i])\n    return max(products)\ndef Find_Swap_Positions(lst):  \n    '''\n    Write a python function to find the index of two elements that have the maximum difference.\n    '''\n    products = []\n    for i in range(len(lst)):\n        products.append(lst[i]*lst[i+1])\n    max_product = max(products)\n    for i in range(len(lst)):\n        if products[i] == max_product:\n            return [lst[i], lst[i+1]]\ndef Find_Swap_Positions_Better(lst):  \n    '''\n    Write a python function to find the index of two elements that have the maximum difference.\n    '''\n    products = []\n    for i in range(len(lst)-1):\n        products.append(lst[i]*lst[i+1])\n    max_product = max(products)\n    for i in range(len(lst)-1):\n        if products[i] == max_product:\n            return [lst[i], lst[i+1]]\ndef Finding_Range(lst):  \n    '''\n    Write a python function to find the range of an array.\n    '''\n    max_element = max(lst)\n    min_element = min(lst)\n    return max_element - min_element\ndef Find_Longest_Substring(lst):  \n    '''\n    Write a python function to find the longest substring.\n    '''\n    substrings = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            substrings.append(lst[i:j])\n    max_substring = max(substrings, key=len)\n    return max_substring\ndef Find_Length_of_Substring(lst):  \n    '''\n    Write a python function to find the length of a substring.\n    '''\n    substrings = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            substrings.append(lst[i:j])\n    max_substring = max(substrings, key=len)\n    return len(max_substring)\ndef Find_Length_of_Substring_Better(lst):  \n    '''\n    Write a python function to find the length of a substring.\n    '''\n    substrings = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            substrings.append(lst[i:j])\n    max_substring = max(substrings, key=len)\n    return len(max_substring)\ndef Find_Longest_Subsequence(lst):  \n    '''\n    Write a python function to find the longes"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = []\n    lst_length = 0\n    for i in lst:\n        if i not in length:\n            length.append(i)\n        else:\n            length.append(i)\n        if len(length) > lst_length:\n            lst_length = len(length)\n    return lst_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    global_max = 0\n    for idx in range(0,len(lst)):\n        if idx == 0:\n            local_max = 1\n        else:\n            if lst[idx] > lst[idx-1]:\n                local_max += 1\n            else:\n                local_max = 1\n        global_max = max(global_max, local_max)\n    return global_max\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quote_pat = re.compile(r'\"(.*)\"')\n    patt = re.findall(quote_pat,text)\n    return patt\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return [x.strip('\"') for x in re.findall(r'\"(.*?)\"', text)]\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\t', '', text)\n    text = re.sub(r'\\r', '', text)\n    text = re.sub(r'\\\\', '', text)\n    text = re.sub(r'\\\"', '', text)\n    text = re.sub(r'\\'', '', text)\n    text = re.sub(r'\\\\', '', text)\n    values = re.findall(r'\"[^\"]*\"', text)\n    return [v[1:-1] for v in values]\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #print(text)\n    return re.findall(r'\\\"(.*?)\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotations = [\"\\\"\",\"\\'\",\"\\`\"]\n    quotation = 0\n    \n    values = []\n    in_quotation = False\n    \n    for i in range(len(text)):\n        if text[i] == \"\\\"\":\n            if quotation == 1:\n                quotation = 0\n                in_quotation = False\n            else:\n                quotation = 1\n        elif text[i] == \"'\":\n            if quotation == 0:\n                quotation = 1\n                in_quotation = False\n            else:\n                quotation = 0\n        elif text[i] == \"\\`\":\n            if not in_quotation:\n                quotation = 0\n                in_quotation = True\n            else:\n                quotation = 0\n        \n        if not in_quotation and text[i] == \" \":\n            if quotation == 0:\n                values.append(\" \")\n            \n            \n            \n            \n            \n    \n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None or text == '':\n        return []\n    else:\n        values = re.findall(r'\\\"(.+)\\\"',text)\n        return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', '')\n    text = text.replace('\\'', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    values = re.findall(r'\\s+([0-9]+\\.[0-9]*|[0-9]*)', text)\n    return values\n    \ndef merge_values(values, separator):\n    '''\n    Write a function to merge values of a list into a string, separated by separator\n    '''\n    #print(values)\n    return separator.join(values)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # text = 'h?l?l?l'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?l?'\n    # text = 'h?l?l?"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list_of_strings = re.findall(r'\\\"(.+?)\\\"',text)\n    return list_of_strings\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r'\\\"(.+?)\\\"')\n    return regex.findall(text)\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    count=0\n    for i in xrange(0,n):\n        for j in xrange(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # consider a pair in n arrays. if both elements are equal, then that is possible.\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = dict()\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i],0) + 1\n    t = 0\n    for key,value in d.iteritems():\n        t += value * (value-1) / 2\n    return t\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                counter+=1\n    return counter\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dic = {}\n    for num in arr:\n        if num in dic:\n            dic[num]+=1\n        else:\n            dic[num]=1\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if dic[arr[i]]>0 and dic[arr[j]]>0:\n                count+=1\n                dic[arr[i]]-=1\n                dic[arr[j]]-=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    a = []\n    for i in range(0,n):\n        a.append(arr[i])\n    x = list(set(a))\n    for i in range(0,len(x)):\n        a.append(x[i])\n    d = {}\n    for i in range(0,len(a)):\n        if(a[i] not in d):\n            d[a[i]] = 1\n        else:\n            d[a[i]] = d[a[i]] + 1\n    d_list = []\n    for i in d.keys():\n        d_list.append(d[i])\n    d_list.sort()\n    k = len(d_list)\n    d_list = d_list[::-1]\n    if k == 1:\n        d_list = d_list[0]\n    else:\n        d_list = d_list[0] * d_list[1]\n    return d_list\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    num_pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                num_pairs += 1\n    return num_pairs\n    \ndef Pairs(arr):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    arr.sort()\n    n = len(arr)\n    num_pairs = 0\n    for i in range(n):\n        num_pairs += (arr[i] - 1)\n    return num_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count +=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                count=count+1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef append(list1,list2): \n    '''\n    Write a python function to append two lists.\n    '''\n    return list1+list2\n    \ndef get(list1,i): \n    '''\n    Write a python function to get a particular element from a list.\n    '''\n    return list1[i]\n    \ndef sort(list1): \n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(list1)\n    \ndef pop(list1): \n    '''\n    Write a python function to pop a value from a list.\n    '''\n    return list1.pop()\n    \ndef reverse(list1): \n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef insert(list1,i,val): \n    '''\n    Write a python function to insert a value at a particular index.\n    '''\n    return list1[:i]+[val]+list1[i:]\n    \ndef index(list1,val): \n    '''\n    Write a python function to find the index of a value in a list.\n    '''\n    return list1.index(val)\n    \ndef remove(list1,val): \n    '''\n    Write a python function to remove a particular value from a list.\n    '''\n    return list(filter(lambda x:x!=val,list1))\n    \ndef map(list1,func): \n    '''\n    Write a python function to map a particular function to a list.\n    '''\n    return list(map(func,list1))\n    \ndef pair(list1,val): \n    '''\n    Write a python function to pair a value with each value in a list.\n    '''\n    return [(val,list1[i]) for i in range(len(list1))]\n    \ndef zip(list1,list2): \n    '''\n    Write a python function to zip two lists.\n    '''\n    return list(zip(list1,list2))\n    \ndef sort2(list1,key=None): \n    '''\n    Write a python function to sort a list using the python in-built sort function.\n    '''\n    return sorted(list1,key=key)\n    \ndef unique(list1): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(list1))\n    \ndef reverse2(list1): \n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef max2(list1): \n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    return max(list1)\n    \ndef reverse3(list1): \n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef sum(list1,start,end): \n    '''\n    Write a python function to sum a list between two indices.\n    '''\n    return sum(list1[start:end+1])\n    \ndef mean(list1,start,end): \n    '''\n    Write a python function to find the mean of a list.\n    '''\n    return sum(list1[start:end+1])/float(end-start+1)\n    \ndef median(list1,start,end): \n    '''\n    Write a python function to find the median of a list.\n    '''\n    list1 = sorted(list1[start:end+1])\n    return list1[len(list1)//2]\n    \ndef mode(list1,start,end): \n    '''\n    Write a python function to find the mode of a list.\n    '''\n    count = {}\n    for i in list1[start:end+1]:\n        count.setdefault(i,0)\n        count[i]+=1\n    max_val = max(count.values())\n    return [key for key in count if count[key]==max_val]\n    \ndef copy(list1): \n    '''\n    Write a python function to copy a list.\n    '''\n    return list1[:]\n    \ndef extend(list1,list2): \n    '''\n    Write a python function to extend a list.\n    '''\n    return list1+list2\n    \ndef delete(list1,val): \n    '''\n    Write a python function to delete a value from a list.\n    '''\n    return list1[:i]+list1[i+1:]\n    \ndef pop2(list1): \n    '''\n    Write a python function to pop a value from a list.\n    '''\n    return list1.pop()\n    \ndef remove2(list1,val): \n    '''\n    Write a python function to remove a particular value from a list.\n    '''\n    return list(filter(lambda x:x!=val,list1))\n    \ndef sort2(list1,key=None): \n    '''\n    Write a python function to sort a list using the python in-built sort function.\n    '''\n    return sorted(list1,key=key)\n    \ndef join(list1,char): \n    '''\n    Write a python function to join a list of elements.\n    '''\n    return char.join(list1)\n    \ndef index2(list1,val): \n    '''\n    Write a python function to find the index of a value in a list.\n    '''\n    return list1.index(val)\n    \ndef insert2(list1,i,val): \n    '''\n    Write a python function to insert a value at a particular index.\n    '''\n    return list1[:i]+[val]+list1[i:]\n    \ndef get2(list1,i): \n    '''\n    Write a python function to get a particular element from a list.\n    '''\n    return list1[i]\n    \ndef reverse2(list1): \n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef remove2(list1,val): \n    '''\n    Write a python function to remove a particular value from a list.\n    '''\n    return list(filter(lambda x:x!=val,list1))\n    \ndef remove2(list1,val): \n    '''\n    Write a python function to remove a particular value from a list.\n    '''\n    return list(filter(lambda x:x!=val,list1))\n    \ndef map2(list1,func): \n    '''\n    Write a python function to map a particular function to a list.\n    '''\n    return list(map(func,list1))\n    \ndef pair2(list1,val): \n    '''\n    Write a python function to pair a value with each value in a list.\n    '''\n    return [(val,list1[i]) for i in range(len(list1))]\n    \ndef zip2(list1,list2): \n    '''\n    Write a python function to zip two lists.\n    '''\n    return list(zip(list1,list2))\n    \ndef sort2(list1,key=None): \n    '''\n    Write a python function to sort a list using the python in-built sort function.\n    '''\n    return sorted(list1,key=key)\n    \ndef unique2(list1): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(list1))\n    \ndef reverse2(list1): \n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef max2(list1): \n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    return max(list1)\n    \ndef reverse3(list1): \n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef sum2(list1,start,end): \n    '''\n    Write "
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n    \ndef characters(string):\n    '''\n    Write a python function to count characters in a string.\n    '''\n    string = string.lower()\n    counter = 0\n    for char in string:\n        if char in \"abcdefghijklmnopqrstuvwxyz\":\n            counter += 1\n    return counter\n    \ndef unique_words(string):\n    '''\n    Write a python function to count the number of unique words in a string.\n    '''\n    string = string.lower()\n    string = string.split()\n    return len(string)\n    \ndef vowels(string):\n    '''\n    Write a python function to count vowels in a string.\n    '''\n    vowels = \"aeiou\"\n    string = string.lower()\n    counter = 0\n    for char in string:\n        if char in vowels:\n            counter += 1\n    return counter\n    \ndef count_letter(string):\n    '''\n    Write a python function to count the number of times a letter occurs in a string.\n    '''\n    string = string.lower()\n    counter = 0\n    for char in string:\n        if char in \"abcdefghijklmnopqrstuvwxyz\":\n            counter += 1\n    return counter\n    \ndef reverse(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef replace(string, old, new):\n    '''\n    Write a python function to replace all instances of old with new in a string.\n    '''\n    return string.replace(old, new)\n    \ndef translate(string):\n    '''\n    Write a python function to translate a string to morse code.\n    '''\n    return''.join(['/' + word +'' for word in string.split(' ')])\n    \ndef double_letters(string):\n    '''\n    Write a python function to count the number of times two letters occur in a string.\n    '''\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            return True\n    return False\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef longest_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    string = string.lower()\n    start = 0\n    end = 0\n    for i in range(len(string)):\n        len1 = len(longest_palindrome_aux(string, i, i))\n        len2 = len(longest_palindrome_aux(string, i, i + 1))\n        len3 = len(longest_palindrome_aux(string, i - 1, i + 1))\n        if len1 > end - start:\n            start = i - (len1 - 1) // 2\n            end = i + len1 // 2\n    return string[start:end + 1]\n    \ndef longest_palindrome_aux(string, start, end):\n    while start >= 0 and end < len(string) and string[start] == string[end]:\n        start -= 1\n        end += 1\n    return string[start + 1:end]\n    \ndef is_pangram(string):\n    '''\n    Write a python function to check if a string contains all letters of the \n    alphabet at least once.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    string = string.lower()\n    for char in alphabet:\n        if char not in string:\n            return False\n    return True\n    \ndef is_numeric(string):\n    '''\n    Write a python function to check if a string contains only numbers.\n    '''\n    numbers = \"0123456789\"\n    string = string.lower()\n    for char in string:\n        if char in numbers:\n            return True\n    return False\n    \ndef is_alphabetical(string):\n    '''\n    Write a python function to check if a string contains only letters of the \n    alphabet.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    string = string.lower()\n    for char in string:\n        if char not in alphabet:\n            return False\n    return True\n    \ndef is_alphanumeric(string):\n    '''\n    Write a python function to check if a string contains only letters or numbers.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz0123456789'\n    string = string.lower()\n    for char in string:\n        if char not in alphabet:\n            return False\n    return True\n    \ndef is_punctuation(string):\n    '''\n    Write a python function to check if a string contains only punctuation marks.\n    '''\n    punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    string = string.lower()\n    for char in string:\n        if char not in punctuation:\n            return False\n    return True\n    \ndef is_space(string):\n    '''\n    Write a python function to check if a string contains only spaces.\n    '''\n    return string.isspace()\n    \ndef count_digit(string):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    return sum([1 for char in string if char in \"0123456789\"])\n    \ndef is_slug(string):\n    '''\n    Write a python function to check if a string is a slug.\n    '''\n    string = string.lower()\n    for char in string:\n        if char in \"abcdefghijklmnopqrstuvwxyz0123456789-_\":\n            continue\n        else:\n            return False\n    return True\n    \ndef textwrap(string, width):\n    '''\n    Write a python function to wrap long strings.\n    '''\n    return '\\n'.join([word for word in string.split()])\n    \ndef main():\n    print(\"split('hello world') -->\", split('hello world'))\n    print(\"characters('hello world') -->\", characters('hello world'))\n    print(\"unique_words('hello world') -->\", unique_words('hello world'))\n    print(\"vowels('hello world') -->\", vowels('hello world'))\n    print(\"count_letter('hello world') -->\", count_letter('hello world'))\n    print(\"reverse('hello world') -->\", reverse('hello world'))\n    print(\"replace('hello world', 'e', 'u') -->\", replace('hello world', 'e', 'u'))\n    print(\"translate('hello world') -->\", translate('hello world'))\n    print(\"double_letters('hello world') -->\", double_letters('hello world'))\n    print(\"is_palindrome('hello world') -->\", is_palindrome('hello world'))\n    print(\"longest_palindrome('hello world') -->\", longest_palindrome('hello world'))\n    print(\"is_pangram('The quick brown fox jumps over the lazy dog') -->\", is_pangram('The quick brown fox jumps over the lazy dog'))\n    print(\"is_pangram('The quick brown fox jumps over the lazy dog') -->\", is_pangram('The quick brown fox jumps over the lazy dog'))\n    print(\"is_pangram('The quick brown fox jumps over the lazy dog') -->\", is_pangram('The quick brown fox jumps over the lazy dog'))\n    print(\"is_pangram('The quick brown fox jumps over the lazy dog') -->\", is_pangram('The quick brown fox jumps over the lazy dog'))\n    print(\"is_pangram('The quick brown fox jumps over the lazy dog') -->\", is_pangram('The quick brown fox jumps over the lazy dog'))\n    print(\"is_pangram('The quick brown fox jumps over the lazy dog') -->\", is_pangram('The quick brown fox jumps over the lazy dog'))\n    print(\"is_pangram('The quick brown fox jumps over the lazy dog') -->\", is_pan"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return int(str(n)[-1]) + sum_digits(int(str(n)[:-1]))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n > 0:\n        result += n%10\n        n = n//10\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n%10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert isinstance(n,int) and n >= 0\n    n = str(n)\n    return sum([int(digit) for digit in n])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i] > list1[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(len(list1)-1):\n        if list1[index] > list1[index+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    return list1 == range(min(list1),max(list1)+1)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1==sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return (list1 == sorted(list1))\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n    \n    \ndef isequal(list1,list2):\n    '''\n    Write a function to check whether two lists are equal or not.\n    '''\n    \n    if sorted(list1) == sorted(list2):\n        return True\n    else:\n        return False\n    \ndef isequal1(list1,list2):\n    '''\n    Write a function to check whether two lists are equal or not.\n    '''\n    \n    if list1 == list2:\n        return True\n    else:\n        return False\n    \ndef merge_lists(list1,list2):\n    '''\n    Write a function to merge two lists and sort the result.\n    '''\n    \n    list3 = list1 + list2\n    list3.sort()\n    return list3\n    \ndef is_merge_sorted(list1,list2):\n    '''\n    Write a function to check whether two lists are sorted or not.\n    '''\n    \n    if list1 == sorted(list1 + list2):\n        return True\n    else:\n        return False\n    \ndef is_merge_sorted1(list1,list2):\n    '''\n    Write a function to check whether two lists are sorted or not.\n    '''\n    \n    if list1 == sorted(list1 + list2):\n        return True\n    else:\n        return False\n    \n    \ndef max_of_three(a,b,c):\n    '''\n    Write a function to find the max of three numbers.\n    '''\n    \n    if a>=b:\n        if a>=c:\n            return a\n        else:\n            return c\n    else:\n        if b>=c:\n            return b\n        else:\n            return c\n            \ndef is_in_sorted_list(list1, value):\n    '''\n    Write a function to check whether a value is in a sorted list or not.\n    '''\n    \n    if value in list1:\n        return True\n    else:\n        return False\n    \ndef insert_sort(list1):\n    '''\n    Write a function to sort a list using insert sort algorithm.\n    '''\n    \n    for i in range(1,len(list1)):\n        key = list1[i]\n        j = i-1\n        while j>=0 and key<list1[j]:\n            list1[j+1] = list1[j]\n            j-=1\n        list1[j+1] = key\n    return list1\n    \ndef insert_sort1(list1):\n    '''\n    Write a function to sort a list using insert sort algorithm.\n    '''\n    \n    for i in range(1,len(list1)):\n        key = list1[i]\n        j = i-1\n        while j>=0 and key<list1[j]:\n            list1[j+1] = list1[j]\n            j-=1\n        list1[j+1] = key\n    return list1\n    \ndef insert_sort2(list1):\n    '''\n    Write a function to sort a list using insert sort algorithm.\n    '''\n    \n    for i in range(1,len(list1)):\n        key = list1[i]\n        j = i-1\n        while j>=0 and key<list1[j]:\n            list1[j+1] = list1[j]\n            j-=1\n        list1[j+1] = key\n    return list1\n    \ndef bucket_sort(list1):\n    '''\n    Write a function to sort a list using bucket sort algorithm.\n    '''\n    \n    buckets = []\n    for i in range(len(list1)):\n        buckets.append([])\n    for i in range(len(list1)):\n        j = int(list1[i]*len(list1)/10)\n        buckets[j].append(list1[i])\n    for i in range(len(list1)):\n        insert_sort(buckets[i])\n    result = []\n    for i in range(len(list1)):\n        result = result + buckets[i]\n    return result\n    \ndef radix_sort(list1):\n    '''\n    Write a function to sort a list using radix sort algorithm.\n    '''\n    \n    max_val = max(list1)\n    exponent = 1\n    while exponent <= max_val:\n        buckets = [[] for i in range(10)]\n        for i in range(len(list1)):\n            j = int(list1[i]/exponent)%10\n            buckets[j].append(list1[i])\n        k = 0\n        for i in range(10):\n            insert_sort(buckets[i])\n        for i in range(len(list1)):\n            list1[k] = buckets[i][0]\n            k+=1\n        exponent*=10\n    return list1\n    \ndef bucket_sort1(list1):\n    '''\n    Write a function to sort a list using bucket sort algorithm.\n    '''\n    \n    buckets = []\n    for i in range(len(list1)):\n        buckets.append([])\n    for i in range(len(list1)):\n        j = int(list1[i]*len(list1)/10)\n        buckets[j].append(list1[i])\n    for i in range(len(list1)):\n        insert_sort(buckets[i])\n    result = []\n    for i in range(len(list1)):\n        result = result + buckets[i]\n    return result\n    \ndef bucket_sort2(list1):\n    '''\n    Write a function to sort a list using bucket sort algorithm.\n    '''\n    \n    buckets = []\n    for i in range(len(list1)):\n        buckets.append([])\n    for i in range(len(list1)):\n        j = int(list1[i]*len(list1)/10)\n        buckets[j].append(list1[i])\n    for i in range(len(list1)):\n        insert_sort(buckets[i])\n    result = []\n    for i in range(len(list1)):\n        result = result + buckets[i]\n    return result\n    \ndef insertion_sort(list1):\n    '''\n    Write a function to sort a list using insertion sort algorithm.\n    '''\n    \n    for i in range(1,len(list1)):\n        key = list1[i]\n        j = i-1\n        while j>=0 and key<list1[j]:\n            list1[j+1] = list1[j]\n            j-=1\n        list1[j+1] = key\n    return list1\n    \ndef merge_sort(list1):\n    '''\n    Write a function to sort a list using merge sort algorithm.\n    '''\n    \n    if len(list1)==1:\n        return list1\n    else:\n        middle = len(list1)/2\n        left = merge_sort(list1[:middle])\n        right = merge_sort(list1[middle:])\n        return merge(left,right)\n        \ndef merge(left,right):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    \n    result = []\n    i = 0\n    j = 0\n    while i<len(left) and j<len(right):\n        if left[i]<right[j]:\n            result.append(left[i])\n            i+=1\n        else:\n            result.append(right[j])\n            j+=1\n    while i<len(left):\n        result.append(left[i])\n        i+=1\n    while j<len(right):\n        result.append(right[j])\n        j+=1\n    return result\n    \ndef quick_sort(list1):\n    '''\n    Write a function to sort a list using quick sort algorithm.\n    '''\n    \n    if len(list1)<=1:\n        return list1\n    else:\n        pivot = list1[0]\n        left = []\n        right = []\n        for i in range(1,le"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1]>list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return map(sorted,list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sorting_lists = []\n    # for i in range(len(list1)):\n    #     sorting_lists.append(sorted(list1[i]))\n    # return sorting_lists\n    return sorted(list1, key=lambda x: sorted(x))\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[x[i] for x in list1] for i in range(len(list1[0]))]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code here\n    return sorted(list1, key=lambda l: ''.join(sorted(l)))\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(sublist):\n        sublist.sort()\n        return sublist\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sizes = [len(x) for x in list1]\n    sorted_list = sorted(zip(list1, sublist_sizes), key=lambda pair: pair[1])\n    sorted_list_list = [pair[0] for pair in sorted_list]\n    return sorted_list_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[x[i] for x in list1] for i in range(len(list1[0]))]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a new list and add the elements from each list\n    return list(set().union(*nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a, b = [], []\n    for i in nums:\n        if i not in a:\n            a.append(i)\n        else:\n            b.append(i)\n    return a, b\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    x = []\n    for i in nums:\n        if i not in x:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    for num in nums:\n        nums_set.add(num)\n    return list(nums_set)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    n = len(nums)\n    for i in range(0, n):\n        for j in range(0, n-i-1):\n            if nums[j] == nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    my_set = set()\n    for i in nums:\n        my_set.add(i)\n    return my_set\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    list_of_nums = []\n    for num in nums:\n        if num not in list_of_nums:\n            list_of_nums.append(num)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n        else:\n            unique_nums.remove(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(set(nums)) == len(nums)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = []\n    for num in list_data:\n        if num not in unique_data:\n            unique_data.append(num)\n    product = 1\n    for num in unique_data:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from functools import reduce\n    list_data = list_data[0]\n    l = []\n    for i in list_data:\n        if i not in l:\n            l.append(i)\n    product = reduce((lambda x, y: x * y), l)\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_lst = []\n    for item in list_data:\n        if item not in unique_lst:\n            unique_lst.append(item)\n    \n    return(reduce((lambda x,y:x*y), unique_lst))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #make a dict with the items\n    unique_items = {}\n    for item in list_data:\n        if item in unique_items:\n            unique_items[item] = unique_items[item] + 1\n        else:\n            unique_items[item] = 1\n    #calculate the product\n    product = 1\n    for item in unique_items:\n        product = product * unique_items[item]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y: x*y, set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    import itertools\n    return list(set(itertools.chain.from_iterable(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    unique_list.append(list_data[0])\n    for index in range(1, len(list_data)):\n        if list_data[index] in unique_list:\n            pass\n        else:\n            unique_list.append(list_data[index])\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n    \ndef prime_factors(number):\n    '''\n    Write a python function to print the prime factors of a given number.\n    '''\n    temp_list = []\n    for i in range(2,number):\n        if number % i == 0:\n            temp_list.append(i)\n    return temp_list\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    if list_data is None:\n        return -1\n    if len(list_data) == 0:\n        return -1\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for x in list_data:\n        if x not in list_data:\n            result *= x\n    return result\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return np.pi*r**2+np.pi*r*h+2*np.pi*h*r\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*np.pi*r**2\n    \ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*r**2\n    \ndef surfacearea_prism(r,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2*np.pi*r**2+2*np.pi*r*h+2*np.pi*h*r\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*(r**2+h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h+2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.1415 * r * (2 * r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    SA = 2*pi*r*h + 2*pi*r**2\n    return SA\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*3.141592653589793*r*h) + (2*3.141592653589793*r**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # YOUR CODE HERE\n    \n    return pi*r*(2*r + h)*2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=pi*r**2+2*pi*r*h\n    return s\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    for i in range(len(B)):\n        if B[i] in A:\n            if i == len(B)-1:\n                flag = True\n            else:\n                A = A[A.index(B[i]) + 1:]\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    #print(n,m)\n    if n == 0:\n        return False\n    if m == 0:\n        return True\n    for i in range(0, n):\n        for j in range(0, m):\n            #print(i,j,A[i],B[j])\n            if A[i] == B[j]:\n                if i == m-1 and j == m-1:\n                    return True\n                elif i == m-1:\n                    return True\n                else:\n                    break\n            else:\n                continue\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    result = False\n    for i in range(len(B)):\n        if A[i:i+len(B)] == B:\n            result = True\n            break\n    return result\ndef find_all(s, ch):\n    '''\n    Write a python function to find all the occurrences of a substring in a string.\n    '''\n    res = []\n    for i in range(len(s)):\n        if s[i] == ch:\n            res.append(i)\n    return res\ndef overlap(s1, s2):\n    '''\n    Write a python function to find if two strings are one character overalap or not.\n    '''\n    result = False\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            result = True\n            break\n    return result\ndef edit_distance(s1, s2):\n    '''\n    Write a python function to calculate the edit distance between two strings.\n    '''\n    n, m = len(s1), len(s2)\n    dp = [[0 for j in xrange(m+1)] for i in xrange(n+1)]\n    for i in xrange(n+1):\n        dp[i][0] = i\n    for j in xrange(m+1):\n        dp[0][j] = j\n    for i in xrange(1,n+1):\n        for j in xrange(1,m+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n    return dp[n][m]\ndef print_nth_element(li, n):\n    '''\n    Write a python function to print nth element of a list.\n    '''\n    if n > len(li):\n        print \"Out of range\"\n    else:\n        print li[n]\ndef multiply(a, b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a * b\ndef pythagorean_triplet(n):\n    '''\n    Write a python function to find all the Pythagorean Triplet.\n    '''\n    for i in range(1,n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if i**2 + j**2 == k**2:\n                    print i,j,k\ndef fibonacci_numbers(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n < 0:\n        return \"Incorrect input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_numbers(n-1) + fibonacci_numbers(n-2)\ndef count_and_say(n):\n    '''\n    Write a python function to count and say.\n    '''\n    res = \"1\"\n    for i in xrange(1,n):\n        previous = res[0]\n        count = 1\n        res += \"z\"\n        for j in xrange(1,len(res)):\n            if res[j] == previous:\n                count += 1\n            else:\n                res = res[:j] + str(count) + res[j]\n                previous = res[j]\n                count = 1\n    return res\ndef find_and_print_number(li, number):\n    '''\n    Write a python function to find number in a list.\n    '''\n    if number in li:\n        print number\n    else:\n        print \"Number not found\"\ndef find_and_replace(li, old, new):\n    '''\n    Write a python function to find and replace an element in a list.\n    '''\n    if old in li:\n        li[li.index(old)] = new\n        print li\n    else:\n        print \"Number not found\"\ndef non_decreasing_order(li):\n    '''\n    Write a python function to check if a list is non-decreasing order or not.\n    '''\n    result = True\n    for i in xrange(1,len(li)):\n        if li[i] < li[i-1]:\n            result = False\n            break\n    return result\ndef print_sorted_pair(li):\n    '''\n    Write a python function to print the sorted pair in a list.\n    '''\n    li.sort()\n    for i in xrange(len(li)-1):\n        if li[i] < li[i+1]:\n            print li[i], li[i+1]\ndef longest_repetition(li):\n    '''\n    Write a python function to find the longest repetition in a list.\n    '''\n    max_count = 0\n    max_index = 0\n    max_element = 0\n    for i in xrange(len(li)):\n        count = 1\n        for j in xrange(i+1, len(li)):\n            if li[i] == li[j]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_index = i\n            max_element = li[i]\n    print max_count, max_index, max_element\ndef multiply_matrices(matrix1, matrix2):\n    '''\n    Write a python function to multiply two matrices.\n    '''\n    n = len(matrix1)\n    p = len(matrix1[0])\n    q = len(matrix2)\n    if p!= q:\n        print \"Error: Matrix multiplication not possible\"\n        return\n    result = [[0 for j in xrange(q)] for i in xrange(n)]\n    for i in xrange(n):\n        for j in xrange(q):\n            result[i][j] = sum([matrix1[i][k] * matrix2[k][j] for k in xrange(p)])\n    return result\ndef reverse_a_list(li):\n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in xrange(len(li)//2):\n        li[i], li[len(li)-1-i] = li[len(li)-1-i], li[i]\n    return li\ndef find_max_product_subarray(li):\n    '''\n    Write a python function to find the maximum product of a subarray.\n    '''\n    max_product = li[0]\n    curr_max = li[0]\n    curr_min = li[0]\n    for i in xrange(1, len(li)):\n        if li[i] > 0:\n            curr_max = max(curr_max*li[i], li[i])\n            curr_min = min(curr_min*li[i], li[i])\n            max_product = max(max_product, curr_max)\n        else:\n            curr_max = max(curr_min*li[i], li[i])\n            curr_min = min(curr_max*li[i], li[i])\n            max_product = max(max_product, curr_max)\n    return max_product\ndef largest_product_in_a_grid(grid):\n    '''\n    Write a python function to find the largest product of four elements in a grid.\n    '''\n    rows = len(grid)\n    cols = len(grid[0])\n    max_product = 0\n    for i in xrange(rows):\n        for j in xrange(cols):\n            if grid[i][j]!= 0:\n                grid[i][j] = 1\n                max_product = max(max_product, multiply_matrices([[grid[i][j]]], [[grid[i][j]],[grid[i][j]]])[0][0])\n                grid[i][j] = 0\n    return max_product\ndef sort_character_by_frequency(string):\n    '''\n    Write a python function to sort a string by character frequency.\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    for j in range(len(B)):\n        if B[j]==A[i]:\n            i=i+1\n            if i==len(A):\n                return True\n        else:\n            i=0\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): \n        return False \n    \n    #since it is possible that B is a sublist of A, we use a for loop to check\n    #if A[0] == B[0] and A[1] == B[1] and A[2] == B[2] and A[3] == B[3] and A[4] == B[4] and A[5] == B[5] and...:\n    for i in range(len(B)): \n        if A[i] == B[i]: \n            pass \n        else: \n            return False \n    \n    return True \n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #B.sort()\n    #A.sort()\n    if len(A) > len(B):\n        return False\n    B.sort()\n    A.sort()\n    for i in range(len(B)):\n        if A[i] == B[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B: \n        return True\n    elif A[0] == B:\n        return is_Sub_Array(A[1:],B)\n    else: \n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    count = 1\n    while(count < n):\n        count = count * 10\n    return (n % count)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    temp = 1\n    while(n > 0):\n        temp = temp * n % 10\n        n = int(n/10)\n    return temp\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    i = 10\n    while i<=n: \n        if i==n:\n            return i\n        else:\n            i *= 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Please enter a positive number!\")\n    else:\n        factorial = 1\n        for i in range(1,n+1):\n            factorial = factorial*i\n        return int(str(factorial)[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return 1 if n == 1 else n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in xrange(1,n):\n        result = result * i\n    return result\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    count = 0\n    while n > 0:\n        n /= 10\n        count += 1\n    return count\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n)\n    fact = 1\n    while n > 1:\n        fact = fact*n\n        n = n-1\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = abs(n)\n    if (n == 1):\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n/10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n)\n    fact = 1\n    while (n>1):\n        fact *= n\n        n -= 1\n    return fact%10\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #check the lengths are the same\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return None\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print(list1,list2,list3)\n    flat_list=[]\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!=len(list2) or len(list1)!=len(list3):\n        print(\"\\nBoth lists must be of the same length.\\n\")\n        return\n    else:\n        interleaved_list = []\n        for i in range(len(list1)):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [sublist1 + sublist2 + sublist3 for sublist1, sublist2, sublist3 in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list3[i])\n    return l\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1 = [x for x in list1 if x is not None]\n    list2 = [x for x in list2 if x is not None]\n    list3 = [x for x in list3 if x is not None]\n    return [x for x in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i = i + 1\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 if x not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple([x for x in test_tup1 if x not in test_tup2])\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return 'dissimilar'\n    else:\n        return'similar'\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"the two tuples are of different length\"\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count = count+1\n    if count == 0:\n        return \"the two tuples are similar\"\n    elif count == len(test_tup1):\n        return \"there are no dissimilar elements\"\n    else:\n        return \"dissimilar elements are present\"\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    dissimilar_elms = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elms.append(test_tup1[i])\n    return dissimilar_elms\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 is None or test_tup2 is None:\n        return False\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for index in range(len(test_tup1)):\n        if test_tup1[index] == test_tup2[index]:\n            continue\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    \n    if l1 < l2:\n        smaller_tup = test_tup1\n        larger_tup = test_tup2\n    elif l2 < l1:\n        smaller_tup = test_tup2\n        larger_tup = test_tup1\n    else:\n        smaller_tup = test_tup1\n        larger_tup = test_tup2\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))\n    \ndef stringify(s): \n    return ''.join(s)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = tuple(filter(lambda x: even_fnc(x), test_tuple))\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) is tuple: \n        if len(test_tuple) == 2: \n            if type(test_tuple[0]) is tuple: \n                if type(test_tuple[1]) is tuple: \n                    if len(test_tuple[1]) == 2: \n                        return even_fnc(test_tuple[0], even_fnc(test_tuple[1][0], even_fnc(test_tuple[1][1], even_fnc)))\n                    else: \n                        return even_fnc(test_tuple[0], even_fnc(test_tuple[1], even_fnc))\n                else: \n                    return even_fnc(test_tuple[0], even_fnc(test_tuple[1], even_fnc))\n            else: \n                if type(test_tuple[1]) is tuple: \n                    if len(test_tuple[1]) == 2: \n                        return even_fnc(test_tuple[0], even_fnc(test_tuple[1][0], even_fnc(test_tuple[1][1], even_fnc)))\n                    else: \n                        return even_fnc(test_tuple[0], even_fnc(test_tuple[1], even_fnc))\n                else: \n                    return even_fnc(test_tuple[0], even_fnc(test_tuple[1], even_fnc))\n        else: \n            if type(test_tuple[0]) is tuple: \n                if len(test_tuple[0]) == 2: \n                    return even_fnc(test_tuple[0][0], even_fnc(test_tuple[0][1], even_fnc(test_tuple[1], even_fnc)))\n                else: \n                    return even_fnc(test_tuple[0][0], even_fnc(test_tuple[0][1], even_fnc(test_tuple[0][2], even_fnc(test_tuple[1], even_fnc))))\n            else: \n                if type(test_tuple[1]) is tuple: \n                    if len(test_tuple[1]) == 2: \n                        return even_fnc(test_tuple[0], even_fnc(test_tuple[1][0], even_fnc(test_tuple[1][1], even_fnc(test_tuple[1], even_fnc))))\n                    else: \n                        return even_fnc(test_tuple[0], even_fnc(test_tuple[1], even_fnc(test_tuple[1][0], even_fnc(test_tuple[1][1], even_fnc(test_tuple[1], even_fnc)))))\n                else: \n                    return even_fnc(test_tuple[0], even_fnc(test_tuple[1], even_fnc(test_tuple[1], even_fnc)))\n    else: \n        return even_fnc(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            result_tuple.append(item)\n    return tuple(result_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    ret_tuple = []\n    for ele in test_tuple: \n        if even_fnc(ele): \n            ret_tuple.append(ele)\n    return tuple(ret_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if test_tuple!= ():\n        if type(test_tuple[0]) == tuple:\n            return even_ele(test_tuple[0], even_fnc)\n        elif test_tuple[0] % 2 == 0:\n            return even_fnc(test_tuple[1:], even_fnc)\n        else:\n            return test_tuple[0], test_tuple[1:]\n    else:\n        return (())\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #result = tuple(filter(lambda a: not even_fnc(a), test_tuple))\n    result = tuple(filter(even_fnc, test_tuple))\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return list(filter(lambda ele: even_fnc(ele), test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*6)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b >= s:\n        return 3*s\n    else:\n        return 3*b\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*b*s\n    return a\n    \ndef pyramidVolume(b,h): \n    '''\n    Write a python function to find the volume of a square pyramid with a given base edge and height.\n    '''\n    a=b*b*h/3\n    return a\n    \ndef first_word(text): \n    '''\n    Write a python function to find the first word of a string.\n    '''\n    a=text.split()\n    return a[0]\n    \ndef last_word(text): \n    '''\n    Write a python function to find the last word of a string.\n    '''\n    a=text.split()\n    return a[-1]\n    \ndef sort_words(words): \n    '''\n    Write a python function to sort the words in a string into the alphabetical order.\n    '''\n    a=sorted(words)\n    return a\n    \ndef make_dict(x): \n    '''\n    Write a python function to convert a tuple of tuples into a dictionary.\n    '''\n    a={}\n    for key,value in x:\n        a[key]=value\n    return a\n    \ndef histogram(s): \n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    a=len(s)\n    return a\n    \ndef find_longest_word(words): \n    '''\n    Write a python function to find the longest word in a list of words.\n    '''\n    a=max(words,key=len)\n    return a\n    \ndef find_shortest_word(words): \n    '''\n    Write a python function to find the shortest word in a list of words.\n    '''\n    a=min(words,key=len)\n    return a\n    \ndef avg(numbers): \n    '''\n    Write a python function to find the average value of a list of numbers.\n    '''\n    a=sum(numbers)/len(numbers)\n    return a\n    \ndef to_celsius(fahrenheit): \n    '''\n    Write a python function to convert a given temperature value from Fahrenheit to Celsius.\n    '''\n    a=(fahrenheit-32)*5/9\n    return a\n    \ndef to_fahrenheit(celsius): \n    '''\n    Write a python function to convert a given temperature value from Celsius to Fahrenheit.\n    '''\n    a=(celsius*9/5)+32\n    return a\n    \ndef to_miles(kilometers): \n    '''\n    Write a python function to convert a given distance value from kilometers to miles.\n    '''\n    a=kilometers/1.61\n    return a\n    \ndef to_celsius(kelvin): \n    '''\n    Write a python function to convert a given temperature value from Kelvin to Celsius.\n    '''\n    a=(kelvin-273.15)*100/273.15\n    return a\n    \ndef to_fahrenheit(celsius): \n    '''\n    Write a python function to convert a given temperature value from Celsius to Fahrenheit.\n    '''\n    a=(celsius*9/5)+32\n    return a\n    \ndef to_kelvin(celsius): \n    '''\n    Write a python function to convert a given temperature value from Celsius to Kelvin.\n    '''\n    a=(celsius+273.15)*100/273.15\n    return a\n    \ndef to_meters(feet): \n    '''\n    Write a python function to convert a given distance value from feet to meters.\n    '''\n    a=feet*0.3048\n    return a\n    \ndef to_feet(meters): \n    '''\n    Write a python function to convert a given distance value from meters to feet.\n    '''\n    a=meters*3.2808\n    return a\n    \ndef to_years(months): \n    '''\n    Write a python function to convert a given time value from months to years.\n    '''\n    a=months*12\n    return a\n    \ndef to_months(years): \n    '''\n    Write a python function to convert a given time value from years to months.\n    '''\n    a=years*12\n    return a\n    \ndef to_minutes(hours): \n    '''\n    Write a python function to convert a given time value from hours to minutes.\n    '''\n    a=hours*60\n    return a\n    \ndef to_hours(minutes): \n    '''\n    Write a python function to convert a given time value from minutes to hours.\n    '''\n    a=minutes/60\n    return a\n    \ndef to_seconds(seconds): \n    '''\n    Write a python function to convert a given time value from seconds to hours.\n    '''\n    a=seconds/3600\n    return a\n    \ndef to_weeks(days): \n    '''\n    Write a python function to convert a given time value from days to weeks.\n    '''\n    a=days/7\n    return a\n    \ndef to_days(weeks): \n    '''\n    Write a python function to convert a given time value from weeks to days.\n    '''\n    a=weeks*7\n    return a\n    \ndef to_years(days): \n    '''\n    Write a python function to convert a given time value from days to years.\n    '''\n    a=days/365\n    return a\n    \ndef to_years(months): \n    '''\n    Write a python function to convert a given time value from months to years.\n    '''\n    a=months/12\n    return a\n    \ndef to_hours(minutes): \n    '''\n    Write a python function to convert a given time value from minutes to hours.\n    '''\n    a=minutes/60\n    return a\n    \ndef to_years(weeks): \n    '''\n    Write a python function to convert a given time value from weeks to years.\n    '''\n    a=weeks/52\n    return a\n    \ndef to_weeks(years): \n    '''\n    Write a python function to convert a given time value from years to weeks.\n    '''\n    a=years*52\n    return a\n    \ndef to_months(years): \n    '''\n    Write a python function to convert a given time value from years to months.\n    '''\n    a=years*12\n    return a\n    \ndef to_days(weeks): \n    '''\n    Write a python function to convert a given time value from weeks to days.\n    '''\n    a=weeks*7\n    return a\n    \ndef to_weeks(months): \n    '''\n    Write a python function to convert a given time value from months to weeks.\n    '''\n    a=months*4\n    return a\n    \ndef to_years(months): \n    '''\n    Write a python function to convert a given time value from months to years.\n    '''\n    a=months/12\n    return a\n    \ndef to_seconds(years): \n    '''\n    Write a python function to convert a given time value from years to seconds.\n    '''\n    a=years*365*24*60*60\n    return a\n    \ndef to_minutes(seconds): \n    '''\n    Write a python function to convert a given time value from seconds to minutes.\n    '''\n    a=seconds/60\n    return a\n    \ndef to_hours(minutes): \n    '''\n    Write a python function to convert a given time value from minutes to hours.\n    '''\n    a=minutes/60\n    return a\n    \ndef to_minutes(hours): \n    '''\n    Write a python function to convert a given time value from hours to minutes.\n    '''\n    a=hours*60\n    return a\n    \ndef to_months(weeks): \n    '''\n    Write a python function to convert a given time value from weeks to months.\n    '''\n    a=weeks*4\n    return a\n    \ndef to_seconds(minutes): \n    '''\n    Write a python function to convert a given time value from minutes to seconds.\n    '''\n    a=minutes*60\n    return a\n    \ndef to"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*2\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 4 * b * s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s**2\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return s * b\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*(s+b)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n    \ndef my_dictionary(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"{} is empty\".format(dict1))\n    else:\n        for key,value in dict1.items():\n            print(key,value)\n            \ndef my_dictionary(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"{} is empty\".format(dict1))\n    else:\n        for key,value in dict1.items():\n            print(key,value)\n            \ndef my_dictionary(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"{} is empty\".format(dict1))\n    else:\n        for key,value in dict1.items():\n            print(key,value)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for v in dict1:\n        if not dict1[v]:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return (dict1 == {})\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise ValueError(\"Invalid argument, must be a dictionary\")\n    else:\n        for key, value in dict1.iteritems():\n            if key == \"\":\n                raise ValueError(\"key cannot be empty\")\n            elif value == \"\":\n                raise ValueError(\"value cannot be empty\")\n            else:\n                pass\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print('Dictionary is empty')\n    else:\n        print('Dictionary is not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1,dict):\n        raise TypeError('not a dict')\n    if len(dict1) > 0:\n        raise ValueError('not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # a test dictionary\n    dictionary = {'first': 'Chris', 'last': 'Henderson'}\n    if not dictionary:\n        print('Empty dictionary')\n    else:\n        print('Dictionary is not empty')\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0]*(num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    catalan[2] = 2\n    for i in range(3, num+1):\n        for j in range(i, 0, -1):\n            catalan[i] += catalan[j-1]*catalan[i-j]\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    catalan_numbers = []\n    for n in range(num+1):\n        catalan_numbers.append(0)\n    catalan_numbers[0] = 1\n    \n    for i in range(1,num+1):\n        for j in range(i):\n            catalan_numbers[i] = catalan_numbers[i] + catalan_numbers[j]*catalan_numbers[i-j-1]\n    \n    return catalan_numbers[num]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return sum(map(lambda x: catalan_number(x), range(1, num+1)))\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    nth_catalan = 0\n    for i in xrange(1, num):\n        nth_catalan += catalan_number(i) * catalan_number(num - i)\n    return nth_catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize variables\n    factorials = [1]\n    nth_catalan = 1\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan_num_rec(n, catalan):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return catalan\n        else:\n            return catalan_num_rec(n-1, catalan+n)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = []\n    for n in range(num):\n        catalan.append(int((((2*n)+1)*(4*n))/((2*n)+2)))\n    return catalan[-1]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pos=[]\n    if not isinstance(text,str):\n        return ly_pos\n    text=text.lower()\n    regex = re.compile(r'(.*ly$)')\n    regex.findall(text)\n    for match in regex.finditer(text):\n        ly_pos.append(match.start())\n    return ly_pos\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos_ly = []\n    list_ly = []\n    ly = re.compile(r'ly$')\n    i = 0\n    while(i < len(text)):\n        result = ly.search(text, i)\n        if result!= None:\n            pos_ly.append(result.span())\n            list_ly.append(text[result.span()[0]:result.span()[1]])\n            i = result.span()[1]\n        else:\n            i += 1\n    return list_ly, pos_ly\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.finditer(r\"ly\", text)\n    if result:\n        for item in result:\n            print(item)\n    else:\n        print(\"Nothing found\")\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex_1 = r'(?<=[^aeiouy])(ly|yly|ily|ily|ily)(?=[aeiouy])'\n    ly_positions = re.finditer(regex_1,text)\n    if ly_positions:\n        for ly_position in ly_positions:\n            print ly_position.start(),ly_position.end()\n    else:\n        print -1\ndef main():\n    text = raw_input('Enter the text: ')\n    find_adverbs(text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match=re.search(r'ly(.*?)\\b',text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    reg_expr = re.compile(r'(?P<adverb>\\b[a-z]+ly\\b)([^a-z]*)(?P=adverb)')\n    return reg_expr.search(text)\n    #return re.search(r'(?P<adverb>\\b[a-z]+ly\\b)([^a-z]*)', text)\n    # return re.search(r'(?P<adverb>\\b[a-z]+ly\\b)([^a-z]*)', text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    r = re.compile('[^a-z]+ly$')\n    result = r.findall(text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # a_pos_list = []\n    # for match in re.finditer('\\w+ly$', text):\n    #     a_pos_list.append(match.start())\n    # print(a_pos_list)\n    ly_pos_list = [m.start() for m in re.finditer('\\w+ly$', text)]\n    print(ly_pos_list)\n    return ly_pos_list\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = []\n    sentence = text.split(' ')\n    for i in range(len(sentence)):\n        if sentence[i] == 'ly':\n            pos.append(i)\n    if pos == []:\n        return -1\n    else:\n        return pos\ndef find_numbers(text):\n    '''\n    Write a function to find the number of times a given symbol in a string and its positions.\n    '''\n    pos = []\n    sentence = text.split(' ')\n    for i in range(len(sentence)):\n        if sentence[i].isdigit():\n            pos.append(i)\n    if pos == []:\n        return -1\n    else:\n        return pos\ndef find_words(text):\n    '''\n    Write a function to find all the words that are not followed by a number in a string.\n    '''\n    text = re.sub('[0-9]',' ',text)\n    sentence = text.split(' ')\n    for i in range(len(sentence)):\n        if sentence[i] == '-':\n            sentence[i] =''\n    new_sentence = ''.join(sentence).split(' ')\n    return [x for x in new_sentence if x!= '']\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #regex = re.compile(r\"(\\w+ly$)\")\n    #ly_matches = regex.findall(text)\n    #return ly_matches\n    return re.findall(r'(?i)(\\w+ly$)', text)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    for i in items:\n        if len(result) < n:\n            heapq.heappush(result,i)\n        else:\n            if i > result[0]:\n                heapq.heappushpop(result,i)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    res = []\n    max_heap = []\n    if n == 0:\n        return res\n    for i in range(n):\n        heapq.heappush(max_heap,(items[i][1],items[i][0]))\n    for i in range(n,len(items)):\n        if items[i][1] > max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap,(items[i][1],items[i][0]))\n    for i in max_heap:\n        res.append(i[1])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    out = []\n    i = 0\n    heapq.heapify(out)\n    while i < n:\n        heapq.heappush(out,items[i])\n        i += 1\n    while i < len(items):\n        heapq.heappushpop(out,items[i])\n        i += 1\n    return out\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_list = []\n    item_list.append(items[0])\n    heapq._heapify_max(item_list)\n    for i in range(1,n):\n        heapq._heappop_max(item_list)\n        heapq._heappush_max(item_list,items[i])\n    for i in range(n):\n        print(heapq._heappop_max(item_list))\n    return item_list\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    for item in items:\n        result.append(item[1])\n    return result[-n:]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    if len(items)<n:\n        return []\n    sorted_items = []\n    for item in items:\n        if len(sorted_items)<n:\n            heapq.heappush(sorted_items,item)\n        else:\n            if item<sorted_items[0]:\n                heapq.heappop(sorted_items)\n                heapq.heappush(sorted_items,item)\n    return sorted_items\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #print(items)\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n    #print(heap)\n    heap2=[]\n    for i in range(n):\n        heapq.heappush(heap2,heapq.heappop(heap))\n    #print(heap2)\n    return heap2\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n    return heapq.nlargest(n,heap)\ndef cheap_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n    return heapq.nsmallest(n,heap)\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l)][::-1]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    list1 = l[:n]\n    list2 = l[n:]\n    return list1 + list2\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l), n):\n        l.insert(i, l[i])\n        l.pop()\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l.split(', ')\n    arr = arr[:n] + arr[n+1:]\n    arr = arr[n-1] + ','+ arr[n]\n    print arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr=[]\n    for i in range(n):\n        arr.append(l[i])\n    for i in range(n,len(l)):\n        arr.append(l[i])\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(n, len(l), n):\n        yield l[i - n : i]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #return max(nums) - min(nums)\n    return max(nums) - min(nums)\n    \ndef big_diff_1(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \ndef big_diff_2(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n    \ndef biggest_number(nums):\n    '''\n    Write a python function to find the number whose digits are the biggest in a given list.\n    '''\n    result = {}\n    for num in nums:\n        result[num] = [0, 0]\n        for i in range(len(str(num))):\n            result[num][0] += num // (10 ** i)\n            result[num][1] += 1\n    max_num = max(result.keys())\n    return max_num\n    \ndef biggest_number_1(nums):\n    '''\n    Write a python function to find the number whose digits are the biggest in a given list.\n    '''\n    return max(nums, key = lambda x: sum(int(c) for c in str(x)))\n    \ndef biggest_number_2(nums):\n    '''\n    Write a python function to find the number whose digits are the biggest in a given list.\n    '''\n    return max(nums, key = lambda x: sum(int(c) for c in str(x)))\n    \ndef longest_string(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_1(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_2(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return len(max(strings, key = len))\n    \ndef longest_string_3(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return len(max(strings, key = len))\n    \ndef longest_string_4(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_5(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_6(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_7(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_8(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_9(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_10(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_11(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_12(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_13(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_14(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_15(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_16(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_17(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_18(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_19(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_20(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_21(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_22(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_23(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_24(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_25(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_26(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_27(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_28(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_29(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_30(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_string_31(strings):\n    '''\n    Write a python function to find the length of the longest string in a given list.\n    '''\n    return max(strings, key = len)\n    \ndef longest_strin"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = max(nums) - min(nums)\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    min_ = min(nums)\n    max_ = max(nums)\n    return max_ - min_\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    # store the first and second element in a temp variable\n    num1 = nums[0]\n    num2 = nums[1]\n    \n    # traverse through the elements of the list and store the max and min value in temp variables\n    for i in range(2,len(nums)):\n        if nums[i] > num1:\n            num1 = nums[i]\n        if nums[i] < num2:\n            num2 = nums[i]\n    \n    # return the difference of max and min\n    return num1 - num2\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s = len(nums)\n    max = nums[0]\n    min = nums[0]\n    for i in range(1, s):\n        if nums[i] > max:\n            max = nums[i]\n        elif nums[i] < min:\n            min = nums[i]\n    return max - min\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x * x for x in range(a, b + 1) if x ** 2 == a or x ** 2 == b]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x**2 for x in range(int(math.sqrt(a)), int(math.sqrt(b))+1) if x**2 > a and x**2 < b]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b):\n        if i**0.5 == int(i**0.5):\n            print i\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return []\n    if a == 0:\n        return [b]\n    if b == 0:\n        return [a]\n    if a == b:\n        return [a]\n    if a == 1:\n        return [1]\n    if b == 1:\n        return [1]\n    if b > a:\n        return perfect_squares(a, b - a)\n    result = []\n    for i in range(0, a + 1):\n        if i * i >= b:\n            break\n        if b - i * i == int(b - i * i):\n            result.append(i * i)\n            result.append(b - i * i)\n            return result\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in xrange(int(a**0.5), int((b**0.5)+1))]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square_dict = {}\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i*i for i in range(max(a,b), min(a,b)+1) if (i*i)>=min(a,b)]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in xrange(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.cos(y), x*cmath.sin(y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = abs(x)\n    y = abs(y)\n    print x,y\n    if x<0.0000001:\n        if y<0.0000001:\n            print 0,0\n        else:\n            print \"error\"\n    else:\n        if y<0.0000001:\n            print \"error\"\n        else:\n            print x,y\n            theta = cmath.acos(y/x)\n            r = x\n            print theta\n            if y<0:\n                theta = -theta\n                print theta\n            if theta<0.0000001:\n                print 0,0\n            else:\n                print r*cmath.cos(theta),r*cmath.sin(theta)\n                \n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return(0,0)\n    elif y>0:\n        return (x*1j,y)\n    elif y<0:\n        return (-x*1j,-y)\n    elif y==0 and x>0:\n        return (1j,0)\n    elif y==0 and x<0:\n        return (-1j,0)\n    else:\n        return (0,0)\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if x==0 and y==0:\n        return(0,0)\n    elif y>0:\n        return (1j*x/abs(y),abs(y))\n    elif y<0:\n        return (-1j*x/abs(y),abs(y))\n    elif y==0 and x>0:\n        return (abs(x),0)\n    elif y==0 and x<0:\n        return (-abs(x),0)\n    else:\n        return (0,0)\n    \ndef mod(x):\n    '''\n    Write a function to calculate the modulus of a complex number.\n    '''\n    return abs(x)\n    \ndef polar_angle(x,y):\n    '''\n    Write a function to calculate the polar angle of a complex number.\n    '''\n    return cmath.phase(x+y*1j)\n    \ndef rect_angle(x,y):\n    '''\n    Write a function to calculate the rectangular angle of a complex number.\n    '''\n    return cmath.phase(x+y*1j)\n    \ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert a complex number from rectangular coordinates to polar coordinates.\n    '''\n    r=mod(x+y*1j)\n    a=rect_angle(x,y)\n    return (r,a)\n    \ndef polar_to_rect(r,a):\n    '''\n    Write a function to convert a complex number from polar coordinates to rectangular coordinates.\n    '''\n    x=r*cmath.cos(a)\n    y=r*cmath.sin(a)\n    return (x,y)\n    \ndef sigma(x):\n    '''\n    Write a function to calculate the sum of the real numbers in a list.\n    '''\n    return sum([1 for i in x if type(i)==float])\n    \ndef average(x):\n    '''\n    Write a function to calculate the average of the real numbers in a list.\n    '''\n    return (sum(x)/len(x))\n    \ndef m_sigma(x):\n    '''\n    Write a function to calculate the sum of the square real numbers in a list.\n    '''\n    return sum([(i**2) for i in x])\n    \ndef var(x):\n    '''\n    Write a function to calculate the variance of the real numbers in a list.\n    '''\n    return m_sigma(x)/len(x)\n    \ndef std_dev(x):\n    '''\n    Write a function to calculate the standard deviation of the real numbers in a list.\n    '''\n    return cmath.sqrt(var(x))\n    \ndef c_sigma(x,y):\n    '''\n    Write a function to calculate the sum of the complex numbers in a list.\n    '''\n    return sum([(x+y*1j) for x,y in zip(x,y)])\n    \ndef c_average(x,y):\n    '''\n    Write a function to calculate the average of the complex numbers in a list.\n    '''\n    return (c_sigma(x,y)/len(x))\n    \ndef c_m_sigma(x,y):\n    '''\n    Write a function to calculate the sum of the square complex numbers in a list.\n    '''\n    return sum([(x+y*1j)**2 for x,y in zip(x,y)])\n    \ndef c_var(x,y):\n    '''\n    Write a function to calculate the variance of the complex numbers in a list.\n    '''\n    return c_m_sigma(x,y)/len(x)\n    \ndef c_std_dev(x,y):\n    '''\n    Write a function to calculate the standard deviation of the complex numbers in a list.\n    '''\n    return cmath.sqrt(c_var(x,y))\n    \ndef triangle_area(x,y):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of the sides.\n    '''\n    return (x*y)/2\n    \ndef cube_volume(x):\n    '''\n    Write a function to calculate the volume of a cube given the length of each side.\n    '''\n    return x**3\n    \ndef c_cube_volume(x,y,z):\n    '''\n    Write a function to calculate the volume of a cube given the length of each side.\n    '''\n    return x*y*z\n    \ndef c_triangle_area(x,y,z):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of the sides.\n    '''\n    return x*z/2\n    \ndef py_string(x):\n    '''\n    Write a function to convert a list of ints to a list of strings in py.\n    '''\n    return [str(i) for i in x]\n    \ndef py_list(x):\n    '''\n    Write a function to convert a list of strings to a list of ints in py.\n    '''\n    return [int(i) for i in x]\n    \ndef py_slice(x,y,z):\n    '''\n    Write a function to slice a list in py.\n    '''\n    return x[y:z]\n    \ndef py_reverse(x):\n    '''\n    Write a function to reverse a list in py.\n    '''\n    return x[::-1]\n    \ndef py_insert(x,y,z):\n    '''\n    Write a function to insert a given value into a list in py.\n    '''\n    return x[:z]+[y]+x[z:]\n    \ndef py_remove(x,y):\n    '''\n    Write a function to remove the first instance of a given value from a list in py.\n    '''\n    return x[:y]+x[y+1:]\n    \ndef py_count(x,y):\n    '''\n    Write a function to count the number of instances of a given value in a list in py.\n    '''\n    return x.count(y)\n    \ndef py_index(x,y):\n    '''\n    Write a function to return the index of the first instance of a given value in a list in py.\n    '''\n    return x.index(y)\n    \ndef py_pop(x,y):\n    '''\n    Write a function to pop the last value from a list in py.\n    '''\n    return x.pop(y)\n    \ndef py_sort(x):\n    '''\n    Write a function to sort a list in py.\n    '''\n    return sorted(x)\n    \ndef py_sort_reverse(x):\n    '''\n    Write a function to sort a list in reverse in py.\n    '''\n    return sorted(x,reverse=True)\n    \ndef py_sum(x):\n    '''\n    Write a function to sum all the values in a list in py.\n    '''\n    return sum(x)\n    \ndef py_mean(x):\n    '''\n    Write a function to calculate the mean value of a list in py.\n    '''\n    return sum(x)/len(x)\n    \ndef py_mode(x):\n    '''\n    Write a function to calculate the mode value of a list in py.\n    '''\n    return max(set(x),key=x.count)\n    \ndef py_range(x):\n    '''\n    Write a function to return a range of numbers in py.\n    '''\n    return range(x)\n    \ndef py_min(x):\n    '''\n    Write a function to return the minimum value of a list in py"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    x1=complex(x,y)\n    x2=x1.conjugate()\n    x3=cmath.sqrt(x1*x2)\n    x4=x3.real\n    x5=x3.imag\n    return x4,x5\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=complex(x,y)\n    return(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rec = []\n    y_rec = []\n    for i in range(len(x)):\n        x_rec.append(x[i]*cmath.exp(-1*y[i]*1j))\n        y_rec.append(y[i])\n    return x_rec,y_rec\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    print x*cmath.cos(y)+y*cmath.sin(y)\n    \npolar_rect(5,cmath.pi/6)\npolar_rect(3,cmath.pi/3)\npolar_rect(4,cmath.pi/4)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = int(x)\n    theta = int(y)\n    if theta <= 90:\n        rect_x = r * cos(theta * pi/180)\n        rect_y = r * sin(theta * pi/180)\n    else:\n        rect_x = -r * cos(theta * pi/180)\n        rect_y = -r * sin(theta * pi/180)\n    return (rect_x,rect_y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return [x*cmath.cos(y),x*cmath.sin(y)]\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    tmp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = tmp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList[0] = newList[-1]\n    #newList[-1] = newList[0]\n    newList[:] = newList[::-1]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #check if the list is not empty\n    if len(newList) == 0:\n        print('This list is empty')\n        return\n    #get the size of the list\n    list_size = len(newList)\n    #check if the list is only one element\n    if list_size == 1:\n        return\n    #get the first element\n    first_element = newList[0]\n    #get the last element\n    last_element = newList[list_size-1]\n    #put the first element in the last position\n    newList[list_size-1] = first_element\n    #put the last element in the first position\n    newList[0] = last_element\n    \n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return [newList[-1], newList[0]]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #Remove pass and write your logic here\n    newList.append(newList[0])\n    newList.remove(newList[0])\n    newList.insert(0,newList[-1])\n    newList.remove(newList[-1])\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # newList[0] = newList[-1]\n    # newList[-1] = newList[0]\n    # newList = newList[1:-1]\n    # newList.append(newList[0])\n    # newList.append(newList[-1])\n    # newList.pop(0)\n    # newList.pop(-1)\n    newList[0],newList[-1] = newList[-1],newList[0]\n    # newList = newList[1:]\n    # newList = newList[:-1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    return newList[size-1] + newList[:size-1]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    f = math.factorial\n    return f(n) / f(k) / f(n-k)\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # return ((1/6)*(n+1)*(n-k+1)) \n    return (math.factorial(n) / (math.factorial(k) * math.factorial(n-k))) \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    f1 = 1; f2 = 1\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    for i in range(1,n-k+1):\n        f1 = f1*i\n    for i in range(1,k+1):\n        f2 = f2*i\n    return f1/f2\ndef count_digit_one(n):\n    '''\n    Write a python function to find the number of digits in the given number.\n    '''\n    count = 0\n    if n == 0:\n        return 1\n    while n>0:\n        if n%10 == 1:\n            count += 1\n        n /= 10\n    return count\ndef count_digit_sum(n):\n    '''\n    Write a python function to find the sum of the digits of the given number.\n    '''\n    count = 0\n    if n == 0:\n        return 1\n    while n>0:\n        count += n%10\n        n /= 10\n    return count\ndef count_digit_sum_iterative(n):\n    '''\n    Write a python function to find the sum of the digits of the given number.\n    '''\n    count = 0\n    while n>0:\n        count += n%10\n        n /= 10\n    return count\ndef power(n,p):\n    '''\n    Write a python function to find the power of a given number.\n    '''\n    if p==1:\n        return n\n    if p==0:\n        return 1\n    if p<0:\n        return 1/power(n,-p)\n    return n*power(n,p-1)\ndef count_digit(n):\n    '''\n    Write a python function to find the number of digits of the given number.\n    '''\n    count = 0\n    while n>0:\n        n /= 10\n        count += 1\n    return count\ndef count_digit_iterative(n):\n    '''\n    Write a python function to find the number of digits of the given number.\n    '''\n    count = 0\n    while n>0:\n        n /= 10\n        count += 1\n    return count\ndef count_digit_recursive(n,count):\n    '''\n    Write a python function to find the number of digits of the given number.\n    '''\n    if n == 0:\n        return count\n    count += 1\n    return count_digit_recursive(n/10,count)\ndef count_digit_recursive_loop(n):\n    '''\n    Write a python function to find the number of digits of the given number.\n    '''\n    count = 0\n    while n>0:\n        n /= 10\n        count += 1\n    return count\ndef count_digit_recursive_dict(n):\n    '''\n    Write a python function to find the number of digits of the given number.\n    '''\n    d = {1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:0}\n    if n in d:\n        return d[n]\n    return count_digit_recursive(n/10,count_digit_recursive(n%10))\ndef count_digit_recursive_iterative(n):\n    '''\n    Write a python function to find the number of digits of the given number.\n    '''\n    count = 0\n    d = {1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:0}\n    while n>0:\n        n /= 10\n        count += 1\n    return count\ndef fib(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n==1 or n==2:\n        return 1\n    return fib(n-1)+fib(n-2)\ndef fib_dict(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    d = {1:1,2:1,3:2}\n    if n in d:\n        return d[n]\n    return fib_dict(n-1)+fib_dict(n-2)\ndef fib_iterative(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    a = 0\n    b = 1\n    if n==1 or n==2:\n        return 1\n    for i in range(n-1):\n        a,b = b,a+b\n    return b\ndef fib_recursive(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n==1 or n==2:\n        return 1\n    return fib_recursive(n-1)+fib_recursive(n-2)\ndef reverse(n):\n    '''\n    Write a python function to find the reverse of the given number.\n    '''\n    rev = 0\n    while n>0:\n        rev = rev*10+n%10\n        n /= 10\n    return rev\ndef is_palindrome(n):\n    '''\n    Write a python function to find if the given number is palindrome number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(l//2):\n        if s[i]!=s[l-i-1]:\n            return False\n    return True\ndef is_palindrome_iterative(n):\n    '''\n    Write a python function to find if the given number is palindrome number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(l//2):\n        if s[i]!=s[l-i-1]:\n            return False\n    return True\ndef is_palindrome_recursive(n,s):\n    '''\n    Write a python function to find if the given number is palindrome number or not.\n    '''\n    l = len(s)\n    if l==1:\n        return True\n    return is_palindrome_recursive(n%10,s[1:l])\ndef is_palindrome_recursive_loop(n):\n    '''\n    Write a python function to find if the given number is palindrome number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    if l==1:\n        return True\n    return is_palindrome_recursive(n%10,s[1:l])\ndef is_palindrome_recursive_dict(n):\n    '''\n    Write a python function to find if the given number is palindrome number or not.\n    '''\n    d = {1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,0:0}\n    if n in d:\n        return True\n    return is_palindrome_recursive(n%10,d[n%10])\ndef is_palindrome_recursive_iterative(n):\n    '''\n    Write a python function to find if the given number is palindrome number or not.\n    '''\n    s = str(n)\n    l = len(s)\n    if l==1:\n        return True\n    return is_palindrome_recursive(n%10,s[1:l])\ndef gcd(n,m):\n    '''\n    Write a python function to find the gcd of the given numbers.\n    '''\n    if n==0:\n        return m\n    return gcd(m%n,n)\ndef gcd_iterative(n,m):\n    '''\n    Write a python function to find the gcd of the given numbers.\n    '''\n    if n==0:\n        return m\n    while m>0:\n        n,m = m,n%m\n    return n\ndef gcd_recursive(n,m):\n    '''\n    Write a python function to find the gcd of the given numbers.\n    '''\n    if m==0:\n        return n\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1,k+1):\n        result = result*(n-i+1)/i\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(min(n,k),0,-1):\n        res = res * (n-i+1)//i\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(0,k):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #initialize the result\n    result = 1\n    #consider each number from k to n\n    for i in range(k, n+1):\n        result = result*i\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    res = 1\n    if (k > n - k):\n        k = n - k\n    for i in range(1,k+1):\n        res = res * (n - i + 1)\n        res = res // i\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if (k > n):\n        return 0\n    \n    if (k == 0):\n        return 1\n    \n    if (k == 1):\n        return n\n    \n    else:\n        return (n*binomial_Coeff(n-1,k))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(0,k):\n        res = res * (n-i)\n        res = res//(i+1)\n    return res\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.lstrip('0')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r\"\\.0$\",\"\",ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    numList = re.findall(r'\\d+',ip)\n    ip = '.'.join(numList)\n    return ip\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    numList = re.findall(r'\\d+',port)\n    port = ''.join(numList)\n    return port\ndef remove_trail_zero(port):\n    '''\n    Write a function to remove trailing zeroes from a port number.\n    '''\n    port = port.strip('0')\n    return port\ndef check_ip_port(ip,port):\n    '''\n    Write a function to check whether a port is open, the ip is a valid ip address and port is a valid port number.\n    '''\n    if re.match('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$',ip) and port.isdigit():\n        if int(port)>0 and int(port)<65535:\n            return True\n    return False\ndef check_ip_port_2(ip,port):\n    '''\n    Write a function to check whether a port is open, the ip is a valid ip address and port is a valid port number.\n    '''\n    ip_pattern = r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n    if re.match(ip_pattern,ip) and port.isdigit():\n        if int(port)>0 and int(port)<65535:\n            return True\n    return False\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_no_zero = re.sub(r'0*','',ip)\n    return ip_no_zero\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    p = re.compile('^0+')\n    m = p.match(ip)\n    if m:\n        ip = re.sub(p, '', ip)\n    return ip\ndef removezero_octet(ip):\n    '''\n    Write a function to remove leading zeroes from an octet\n    '''\n    p = re.compile('^0+')\n    m = p.match(ip)\n    if m:\n        ip = re.sub(p, '', ip)\n    return ip\ndef removezero_mask(mask):\n    '''\n    Write a function to remove leading zeroes from an octet\n    '''\n    p = re.compile('^0+')\n    m = p.match(mask)\n    if m:\n        mask = re.sub(p, '', mask)\n    return mask\ndef remove_subnet(ip):\n    '''\n    Write a function to remove the subnet from an ip address.\n    '''\n    ip = removezero_ip(ip)\n    ip = re.sub('\\/', '', ip)\n    return ip\ndef remove_mask(mask):\n    '''\n    Write a function to remove the mask from an ip address\n    '''\n    mask = removezero_mask(mask)\n    mask = re.sub('\\/', '', mask)\n    return mask\ndef get_octets(ip):\n    '''\n    Write a function to break an ip address into octets.\n    '''\n    octet_list = []\n    octets = re.findall(r'\\d{1,3}', ip)\n    for octet in octets:\n        octet = removezero_octet(octet)\n        octet_list.append(octet)\n    return octet_list\ndef get_subnets(ip, mask):\n    '''\n    Write a function to break an ip address into octets.\n    '''\n    octet_list = []\n    octets = re.findall(r'\\d{1,3}', ip)\n    mask = removezero_mask(mask)\n    subnets = re.findall(r'\\d{1,3}', mask)\n    for subnet in subnets:\n        subnet = removezero_octet(subnet)\n        octet_list.append(subnet)\n    return octet_list\ndef convert_octets_to_binary(octet_list):\n    '''\n    Write a function to convert an octet list to binary.\n    '''\n    binary_octet_list = []\n    for octet in octet_list:\n        binary_octets = []\n        for octet in octet:\n            binary_octet = bin(int(octet)).lstrip('0b')\n            binary_octets.append(binary_octet)\n        binary_octet_list.append(binary_octets)\n    return binary_octet_list\ndef convert_binary_octets_to_decimal(binary_octet_list):\n    '''\n    Write a function to convert a binary octet list to decimal.\n    '''\n    decimal_octet_list = []\n    for octet in binary_octet_list:\n        octets = []\n        for octet in octet:\n            decimal_octets = []\n            for octet in octet:\n                decimal_octet = int(octet, 2)\n                decimal_octets.append(decimal_octet)\n            octets.append(decimal_octets)\n        decimal_octet_list.append(octets)\n    return decimal_octet_list\ndef convert_binary_octets_to_hex(binary_octet_list):\n    '''\n    Write a function to convert a binary octet list to hex.\n    '''\n    hex_octet_list = []\n    for octet in binary_octet_list:\n        octets = []\n        for octet in octet:\n            hex_octets = []\n            for octet in octet:\n                hex_octet = hex(int(octet, 2)).lstrip('0x')\n                hex_octets.append(hex_octet)\n            octets.append(hex_octets)\n        hex_octet_list.append(octets)\n    return hex_octet_list\ndef convert_binary_octets_to_string(binary_octet_list):\n    '''\n    Write a function to convert a binary octet list to string.\n    '''\n    string_octet_list = []\n    for octet in binary_octet_list:\n        octets = []\n        for octet in octet:\n            octets.append(''.join(octet))\n        string_octet_list.append(octets)\n    return string_octet_list\ndef convert_string_octets_to_binary(string_octet_list):\n    '''\n    Write a function to convert a string octet list to binary.\n    '''\n    binary_octet_list = []\n    for octet in string_octet_list:\n        binary_octets = []\n        for octet in octet:\n            binary_octet = bin(int(octet, 16)).lstrip('0b')\n            binary_octets.append(binary_octet)\n        binary_octet_list.append(binary_octets)\n    return binary_octet_list\ndef convert_string_octets_to_decimal(string_octet_list):\n    '''\n    Write a function to convert a string octet list to decimal.\n    '''\n    decimal_octet_list = []\n    for octet in string_octet_list:\n        octets = []\n        for octet in octet:\n            decimal_octets = []\n            for octet in octet:\n                decimal_octet = int(octet, 16)\n                decimal_octets.append(decimal_octet)\n            octets.append(decimal_octets)\n        decimal_octet_list.append(octets)\n    return decimal_octet_list\ndef convert_string_octets_to_hex(string_octet_list):\n    '''\n    Write a function to convert a string octet list to hex.\n    '''\n    hex_octet_list = []\n    for octet in string_octet_list:\n        octets = []\n        for octet in octet:\n            hex_octets = []\n            for octet in octet:\n                hex_octet = hex(int(octet, 16)).lstrip('0x')\n                hex_octets.append(hex_octet)\n            octets.append(hex_octets)\n        hex_octet_list.append(octets)\n    return hex_octet_list\ndef is_valid_ip(ip):\n    '''\n    Write a function to determine if an ip is valid.\n    '''\n    octet_list = get_octets(ip)\n    binary_octet_list = convert_octets_to_binary(octet_list)\n    if len(binary_octet_list) == 4:\n        for octet in binary_octet_list:\n            if len(octet)!= 8:\n                return False\n        return True\n    return False\ndef is_valid_mask(mask):\n    '''\n    Write a function to determine if an mask is valid.\n    '''\n    octet_list = get_octets(mask)\n    binary_octet_list = convert_octets_to_binary(octet_list)\n    if len(binary_octet_list) == 4:\n        for octet in binary_octet_list:\n            if len(octet)!= 8:\n                return False\n        return True\n    return False\ndef get_host_bits(mask):\n    '''\n    Write a function to get the number of bits in an ip mask.\n    '''\n    binary_mask = convert_mask_to_binary(mask)\n    return len(binary_mask)\ndef get_host_address_bits(ip, mask):\n    '''\n    Write a function to get the number of bits in an ip mask.\n    '''\n    binary_mask = convert_mask_to_binary(mask)\n    octet_list = get_octets(ip)\n    binary_octet_list = convert_octet"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_lst = re.findall('\\d+',ip)\n    result = []\n    for i in ip_lst:\n        if i == '0':\n            result.append('0')\n        else:\n            result.append(i)\n    return ''.join(result)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0'):\n        return re.sub('^0+', '', ip)\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    result = []\n    for i in ip:\n        if int(i) == 0:\n            i = \"1\"\n        result.append(i)\n    return '.'.join(result)\ndef removezero_host(ip):\n    '''\n    Write a function to remove leading zeroes from a host name.\n    '''\n    if '.' in ip:\n        ip = ip.split('.')\n        return ip[0] + '.' + ip[1] + '.' + ip[2]\n    else:\n        return ip\ndef remove_ip_prefix(ip):\n    '''\n    Write a function to remove the first word from an ip address.\n    '''\n    ip = ip.split('.')\n    return '.'.join(ip[1:])\ndef remove_host_prefix(ip):\n    '''\n    Write a function to remove the first word from a host name.\n    '''\n    ip = ip.split('.')\n    if '.' in ip[0]:\n        return '.'.join(ip[1:])\n    else:\n        return ip[0]\ndef remove_host_suffix(ip):\n    '''\n    Write a function to remove the last word from a host name.\n    '''\n    ip = ip.split('.')\n    return '.'.join(ip[:-1])\ndef remove_ip_suffix(ip):\n    '''\n    Write a function to remove the last word from an ip address.\n    '''\n    ip = ip.split('.')\n    return '.'.join(ip[:-1])\ndef remove_word_from_string(ip, word):\n    '''\n    Write a function to remove a word from a string.\n    '''\n    ip = ip.split(word)\n    return '.'.join(ip[1:])\ndef ip_to_int(ip):\n    '''\n    Write a function to convert an ip address to integer.\n    '''\n    return sum([int(x) << 8*(4-i) for i,x in enumerate(ip.split('.')[::-1])])\ndef int_to_ip(ip, bits):\n    '''\n    Write a function to convert an integer to an ip address.\n    '''\n    if len(ip.split('.')) == 4:\n        return '.'.join([str(((ip >> (8*i))&255)) for i in range(4)])\n    else:\n        return None\ndef int_to_ipv6(ip, bits):\n    '''\n    Write a function to convert an integer to an ipv6 address.\n    '''\n    if len(ip.split(':')) == 8:\n        return ':'.join([str(((ip >> (8*i))&255)) for i in range(8)])\n    else:\n        return None\ndef ip_to_int_v6(ip):\n    '''\n    Write a function to convert an ip address to an integer.\n    '''\n    return sum([int(x,16) << 8*(4-i) for i,x in enumerate(ip.split(':'))])\ndef int_to_ip_v6(ip, bits):\n    '''\n    Write a function to convert an integer to an ip address.\n    '''\n    if len(ip.split(':')) == 8:\n        return ':'.join([str(((ip >> (8*i))&255)) for i in range(8)])\n    else:\n        return None\ndef ip_to_int_mask(ip, mask):\n    '''\n    Write a function to convert an ip address to an integer.\n    '''\n    return sum([int(x) << 8*(4-i) for i,x in enumerate(ip.split('.')[::-1])]) & ~(0xffffffff << (32 - int(mask)))\ndef int_to_ip_mask(ip, mask):\n    '''\n    Write a function to convert an integer to an ip address.\n    '''\n    return '.'.join([str(((ip >> (8*i))&255)) for i in range(4)])\ndef is_ip_addr(ip):\n    '''\n    Write a function to check whether a string is a valid ip address or not.\n    '''\n    if re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', ip):\n        return True\n    else:\n        return False\ndef is_ip_addr_mask(ip, mask):\n    '''\n    Write a function to check whether a string is a valid ip address with a mask or not.\n    '''\n    if re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', ip):\n        return True\n    else:\n        return False\ndef is_ip_netmask(ip, mask):\n    '''\n    Write a function to check whether a string is a valid ip netmask or not.\n    '''\n    if re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2])$', ip):\n        return True\n    else:\n        return False\ndef is_ip_addr_mask_netmask(ip, mask):\n    '''\n    Write a function to check whether a string is a valid ip address with a mask or a netmask or not.\n    '''\n    if re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', ip):\n        return True\n    else:\n        return False\ndef is_ip_netmask_netmask(ip, mask):\n    '''\n    Write a function to check whether a string is a valid ip netmask or a netmask or a netmask or not.\n    '''\n    if re.match(r'^(([0-9]|[1-9][0-9]|1[0"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip)\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    return int(port)\ndef remove_leading_zeros(ip,port):\n    return str(removezero_ip(ip))+\":\"+str(removezero_port(port))\ndef convert_ip_to_list(ip):\n    '''\n    Write a function to convert an ip address string to a list of integers.\n    '''\n    ip=str(ip)\n    ip_list=[]\n    for i in range(0,4):\n        ip_list.append(int(ip[i*2:i*2+2]))\n    return ip_list\ndef convert_ip_to_bin(ip):\n    '''\n    Write a function to convert an ip address string to a binary string.\n    '''\n    ip_list=convert_ip_to_list(ip)\n    bin_ip=\"\"\n    for i in range(0,4):\n        bin_ip=bin_ip+bin(ip_list[i])[2:].zfill(8)\n    return bin_ip\ndef convert_bin_to_ip(bin_ip):\n    '''\n    Write a function to convert a binary string to an ip address string.\n    '''\n    ip_list=[]\n    for i in range(0,4):\n        ip_list.append(int(bin_ip[8*i:8*(i+1)],2))\n    ip=str(ip_list[0])+'.'+str(ip_list[1])+'.'+str(ip_list[2])+'.'+str(ip_list[3])\n    return ip\ndef get_decimal(binary_string):\n    '''\n    Write a function to convert a binary string to a decimal number.\n    '''\n    decimal=0\n    for i in range(0,len(binary_string)):\n        decimal=decimal*2+int(binary_string[len(binary_string)-i-1])\n    return decimal\ndef get_binary(decimal,bits):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    binary=\"\"\n    for i in range(0,bits):\n        binary=binary+str(decimal%2)\n        decimal=decimal/2\n    return binary\ndef remove_extra_zeros(binary_string):\n    '''\n    Write a function to remove trailing zeros from a binary string.\n    '''\n    return binary_string.rstrip(\"0\")\ndef remove_extra_zeros_l(binary_string):\n    '''\n    Write a function to remove trailing zeros from a list of binary strings.\n    '''\n    new_list=[]\n    for i in range(0,len(binary_string)):\n        new_list.append(remove_extra_zeros(binary_string[i]))\n    return new_list\ndef carry(a,b):\n    '''\n    Write a function to compute the carry bit for addition.\n    '''\n    return 1 if a+b>=256 else 0\ndef carry_list(a,b):\n    '''\n    Write a function to compute the carry bit for addition.\n    '''\n    carry_list=[]\n    for i in range(0,len(a)):\n        carry_list.append(carry(int(a[i]),int(b[i])))\n    return carry_list\ndef carry_addition(a,b):\n    '''\n    Write a function to compute carry addition for a list of numbers.\n    '''\n    carry_list=carry_list(a,b)\n    return \"\".join([str(i) for i in carry_list])\ndef get_min_length(a,b):\n    '''\n    Write a function to find the minimum length of two strings.\n    '''\n    if len(a)>len(b):\n        return len(a)\n    else:\n        return len(b)\ndef get_max_length(a,b):\n    '''\n    Write a function to find the maximum length of two strings.\n    '''\n    return max(len(a),len(b))\ndef remove_leading_zeros(binary_string):\n    '''\n    Write a function to remove leading zeros from a binary string.\n    '''\n    return binary_string.lstrip(\"0\")\ndef string_to_list(binary_string):\n    '''\n    Write a function to convert a binary string to a list of integers.\n    '''\n    binary_string=remove_leading_zeros(binary_string)\n    binary_list=[]\n    for i in range(0,len(binary_string)):\n        binary_list.append(int(binary_string[i]))\n    return binary_list\ndef add_binary_list(a,b):\n    '''\n    Write a function to add two binary strings.\n    '''\n    carry_list=carry_list(a,b)\n    carry_bits=\"\".join([str(i) for i in carry_list])\n    if len(a)>len(b):\n        b=\"0\"*(len(a)-len(b))+b\n    else:\n        a=\"0\"*(len(b)-len(a))+a\n    add_binary=carry_addition(a,b)\n    return remove_leading_zeros(add_binary+carry_bits)\ndef add_binary(a,b):\n    '''\n    Write a function to add two binary strings.\n    '''\n    a=remove_leading_zeros(a)\n    b=remove_leading_zeros(b)\n    c=add_binary_list(a,b)\n    return c\ndef sub_binary(a,b):\n    '''\n    Write a function to subtract two binary strings.\n    '''\n    a=remove_leading_zeros(a)\n    b=remove_leading_zeros(b)\n    a_binary=string_to_list(a)\n    b_binary=string_to_list(b)\n    sub_binary=[]\n    for i in range(0,len(a_binary)):\n        sub_binary.append(a_binary[i]-b_binary[i])\n    return remove_leading_zeros(get_binary(get_decimal(convert_binary_list_to_string(sub_binary)),len(a)))\ndef convert_binary_list_to_string(binary_list):\n    '''\n    Write a function to convert a list of binary digits to a string.\n    '''\n    binary_string=\"\".join([str(i) for i in binary_list])\n    return binary_string\ndef convert_binary_list_to_int(binary_list):\n    '''\n    Write a function to convert a list of binary digits to a decimal number.\n    '''\n    return get_decimal(convert_binary_list_to_string(binary_list))\ndef convert_decimal_to_binary(decimal):\n    '''\n    Write a function to convert a decimal number to a binary string.\n    '''\n    return get_binary(decimal,8)\ndef convert_binary_to_decimal(binary):\n    '''\n    Write a function to convert a binary string to a decimal number.\n    '''\n    return get_decimal(binary)\ndef convert_decimal_to_binary_list(decimal):\n    '''\n    Write a function to convert a decimal number to a list of binary digits.\n    '''\n    binary=\"\"\n    for i in range(0,8):\n        binary=binary+str(decimal%2)\n        decimal=decimal/2\n    return binary\ndef convert_binary_to_decimal_list(binary):\n    '''\n    Write a function to convert a binary string to a list of decimal digits.\n    '''\n    decimal_list=[]\n    for i in range(0,8):\n        decimal_list.append(int(binary[7-i]))\n    return decimal_list\ndef add_binary_list_to_decimal(binary_list):\n    '''\n    Write a function to add a list of binary digits to a decimal number.\n    '''\n    return get_decimal(add_binary(convert_binary_list_to_string(binary_list),convert_decima"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip.lstrip('0'))\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1[0] % 2 == 0:\n        return list1[0] - list1[1]\n    else:\n        return list1[1] - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            odd_num = num\n            break\n    if odd_num == 0:\n        return 'Error'\n    else:\n        return odd_num - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num%2 == 0 and odd_num%2 == 1:\n        print(str(even_num) + \" is the first even number and \" + str(odd_num) + \" is the first odd number\")\n    elif even_num%2 == 1 and odd_num%2 == 0:\n        print(str(even_num) + \" is the first odd number and \" + str(odd_num) + \" is the first even number\")\n    elif even_num%2 == 0 and odd_num%2 == 0:\n        print(str(even_num) + \" is the first even number and \" + str(odd_num) + \" is the first even number\")\n    elif even_num%2 == 1 and odd_num%2 == 1:\n        print(str(even_num) + \" is the first odd number and \" + str(odd_num) + \" is the first odd number\")\n    else:\n        print(\"There is no even number or odd number.\")\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            return list1[i] - list1[i - 1]\n        else:\n            return list1[i - 1] - list1[i]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    even, odd = [], []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    \n    if len(even) > len(odd):\n        return (sum(even) - sum(odd))\n    else:\n        return (sum(odd) - sum(even))\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd, even = 0, 0\n    for item in list1:\n        if item % 2 == 0:\n            even = item\n        else:\n            odd = item\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return None\n    elif not isinstance(list1,list):\n        return None\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1 = sorted(list1)\n    return list1[0] - list1[-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1[0] % 2 == 0:\n        return list1[1] - list1[0]\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    l_even = []\n    l_odd = []\n    for i in list1:\n        if i%2 == 0:\n            l_even.append(i)\n        else:\n            l_odd.append(i)\n    return l_even[0] - l_odd[0]\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # str1 and str2 are the two binary numbers to be swapped\n    # The function returns the number of swaps required\n    \n    \n    # Initialize the count of swaps to zero\n    swap_count = 0\n    \n    # Traverse through the array\n    for i in range(len(str1)) :\n        \n        # if the corresponding characters do not match\n        if(str1[i]!= str2[i] ) :\n            \n            # increment the count of swaps\n            swap_count+=1\n            \n            # Switch the characters\n            str1 = str1[:i]+str2[i]+str1[i+1:]\n            str2 = str2[:i]+str1[i]+str2[i+1:]\n    \n    return swap_count\n    \n    \nif __name__ == \"__main__\" :\n    \n    str1 = '100'\n    str2 = '110'\n    print str1, str2\n    print min_Swaps(str1,str2)\n    \n    str1 = '0110'\n    str2 = '0100'\n    print str1, str2\n    print min_Swaps(str1,str2)\n    \n    str1 = '00100'\n    str2 = '11110'\n    print str1, str2\n    print min_Swaps(str1,str2)\n    \n    str1 = '11001'\n    str2 = '11110'\n    print str1, str2\n    print min_Swaps(str1,str2)\n    \n    str1 = '0111'\n    str2 = '1011'\n    print str1, str2\n    print min_Swaps(str1,str2)\n    \n    str1 = '1111'\n    str2 = '1011'\n    print str1, str2\n    print min_Swaps(str1,str2)\n    \n    str
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i] :\n            count += 1\n            str1 = str1[:i] + str1[i+1:] + str1[i] + str1[i+1:]\n            str2 = str2[:i] + str2[i+1:] + str2[i] + str2[i+1:]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #initialize the count\n    count = 0\n    #traverse the string\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count = count + 1\n            #for next iteration\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    d = dict()\n    for i in range(0,len(str1)):\n        if str1[i] not in d.keys():\n            d[str1[i]] = str2[i]\n        else:\n            if d[str1[i]]!= str2[i]:\n                return i\n    return 0\n    \ndef remove_leading_zeroes(num):\n    '''\n    Write a python function to remove leading zeroes in a given number.\n    '''\n    if num==0:\n        return 0\n    count = 0\n    while num>0:\n        num = int(num/10)\n        count = count+1\n    return count\n    \ndef sorted_lst(lst):\n    '''\n    Write a python function to return the list of integers sorted in ascending order.\n    '''\n    if len(lst)==0:\n        return lst\n    else:\n        key = lst[0]\n        return sorted_lst(lst[1:]) + [key]\n        \ndef list_sum(lst):\n    '''\n    Write a python function to return the sum of all elements in a list.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        return lst[0] + list_sum(lst[1:])\n        \ndef min_diff(lst):\n    '''\n    Write a python function to find the minimum difference between adjacent elements in a list.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        key = lst[0]\n        return min(min_diff(lst[1:]),key-lst[0])\n    \ndef circular_array_rotation(arr,k):\n    '''\n    Write a python function to rotate a list by a given number k.\n    '''\n    arr = arr[k:]+arr[:k]\n    return arr\n    \ndef rotate_arr(arr,n):\n    '''\n    Write a python function to rotate the given array by n elements.\n    '''\n    for i in range(n):\n        arr = circular_array_rotation(arr,1)\n    return arr\n    \ndef count_rotations(arr):\n    '''\n    Write a python function to count the number of rotations in a given array.\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return 0\n    else:\n        if arr[0]<arr[1]:\n            return 1+count_rotations(arr[1:])\n        else:\n            return count_rotations(arr[1:])\n    \ndef find_rotation(arr,n):\n    '''\n    Write a python function to find the index of the rotation in a given array.\n    '''\n    if len(arr)==0:\n        return -1\n    elif len(arr)==1:\n        return 0\n    else:\n        if arr[0]<arr[1]:\n            return 0\n        else:\n            return 1+find_rotation(arr[1:],n)\n    \ndef create_matrix(n):\n    '''\n    Write a python function to create a n x n zero matrix.\n    '''\n    matrix = []\n    for i in range(n):\n        matrix.append([0]*n)\n    return matrix\n    \ndef max_arr(arr):\n    '''\n    Write a python function to find the maximum of a given array.\n    '''\n    if len(arr)==0:\n        return 0\n    else:\n        key = arr[0]\n        return max(max_arr(arr[1:]),key)\n    \ndef rotate_matrix(matrix,n):\n    '''\n    Write a python function to rotate a 2d array by n times.\n    '''\n    for i in range(n):\n        matrix = matrix[-1:]+matrix[:-1]\n    return matrix\n    \ndef right_rotate(arr,n):\n    '''\n    Write a python function to rotate the given array by n times.\n    '''\n    for i in range(n):\n        arr = rotate_matrix(arr,1)\n    return arr\n    \ndef left_rotate(arr,n):\n    '''\n    Write a python function to rotate the given array by n times.\n    '''\n    for i in range(n):\n        arr = rotate_matrix(arr,1)\n    return arr\n    \ndef max_pair(arr):\n    '''\n    Write a python function to find the maximum pair in a given array.\n    '''\n    if len(arr)<2:\n        return [arr[0],arr[0]]\n    else:\n        key = arr[0]\n        key1 = arr[0]\n        key2 = arr[1]\n        for i in range(2,len(arr)):\n            if key<arr[i]:\n                key = arr[i]\n                key1 = arr[i-1]\n                key2 = arr[i-2]\n        return [key,key1]\n    \ndef reverse_arr(arr):\n    '''\n    Write a python function to reverse a given array.\n    '''\n    if len(arr)==0:\n        return arr\n    else:\n        return reverse_arr(arr[1:])+[arr[0]]\n    \ndef zero_matrix(arr):\n    '''\n    Write a python function to find the index of zero in a given array.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j]==0:\n                return i,j\n    \ndef zero_matrix_2(arr):\n    '''\n    Write a python function to find the index of zero in a given array.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j]==0:\n                return [i,j]\n    \ndef subset_sum(arr,target,start,end,soln):\n    '''\n    Write a python function to find all subsets with given sum.\n    '''\n    if start==end:\n        if sum(soln)==target:\n            print soln\n    else:\n        soln.append(arr[start])\n        subset_sum(arr,target,start+1,end,soln)\n        soln.pop()\n        subset_sum(arr,target,start+1,end,soln)\n    \ndef subset_sum_2(arr,target,start,end,soln):\n    '''\n    Write a python function to find all subsets with given sum.\n    '''\n    soln.append(arr[start])\n    if sum(soln)==target:\n        print soln\n    else:\n        subset_sum_2(arr,target,start+1,end,soln)\n        soln.pop()\n        subset_sum_2(arr,target,start+1,end,soln)\n    \ndef subset_sum_3(arr,target):\n    '''\n    Write a python function to find all subsets with given sum.\n    '''\n    if target==0:\n        print [[]]\n    else:\n        if target<arr[0]:\n            subset_sum_3(arr,target,1,len(arr),[])\n        else:\n            curr = [arr[0]]\n            subset_sum_3(arr,target-arr[0],1,len(arr),curr)\n            subset_sum_3(arr,target,1,len(arr),curr+[arr[0]])\n            \ndef subset_sum_3(arr,target,start,end,soln):\n    '''\n    Write a python function to find all subsets with given sum.\n    '''\n    soln.append(arr[start])\n    if sum(soln)==target:\n        print soln\n    else:\n        if sum(soln)<target:\n            subset_sum_3(arr,target,start+1,end,soln)\n        if sum(soln)>target:\n            subset_sum_3(arr,target,start,end,sol"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = len(str1)\n    l2 = len(str2)\n    d = {}\n    for i in range(0,l1):\n        if str1[i] not in d:\n            d[str1[i]] = 1\n        else:\n            d[str1[i]] += 1\n    for j in range(0,l2):\n        if str2[j] not in d:\n            d[str2[j]] = 1\n        else:\n            d[str2[j]] += 1\n    s = sum(d.values())\n    return s\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1= len(str1)\n    n2= len(str2)\n    if (n1==n2) :\n        if (str1==str2) :\n            return 0\n        else:\n            temp= ''\n            for i in range(n1) :\n                if str1[i]=='0' and str2[i]=='1' :\n                    temp+='1'\n                elif str1[i]=='1' and str2[i]=='0' :\n                    temp+='0'\n                else:\n                    temp+=str1[i]\n            return (n1-len(temp))\n    else :\n        return -1\nprint(min_Swaps('1010','0100'))\nprint(min_Swaps
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    if str1 == str2 :\n        return 0\n    count = 0\n    while str1!= str2 :\n        i = 0\n        for i in range(len(str2)) :\n            if str2[i]!= str1[i] :\n                str1 = str1[:i]+str1[i+1:]\n                str1 = str1[::-1]\n                count += 1\n                break\n        if i == len(str2)-1 :\n            str1 = str1[::-1]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return \"Length of strings are not same\"\n    else : \n        #create a dictionary to store the binary number \n        dict1 = {}\n        dict2 = {}\n        for i in range(len(str1)) : \n            dict1[i] = str1[i]\n            dict2[i] = str2[i]\n        #create a swap variable to store the count of swaps \n        swap = 0\n        #run a loop to check the key value pairs in both the dictionary \n        for i in range(len(str1)) : \n            if dict1[i]!= dict2[i] : \n                dict2[i], dict1[i] = dict1[i], dict2[i]\n                swap += 1\n        return swap \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s = ''.join(str1.split('0'))+''.join(str2.split('0'))\n    return len(s)-len(str1)-len(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #first convert str1 to int\n    str1 = int(str1,2)\n    str2 = int(str2,2)\n    \n    #if str1 and str2 are equal, no need to do any swaps\n    if str1 == str2 : \n        return 0\n    \n    #consider all possible pairs\n    n = len(str1)\n    swaps = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            if str1[i] == str2[j] : \n                continue\n            else : \n                str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n                str2 = str2[:i] + str2[j] + str2[i+1:j] + str2[i] + str2[j+1:]\n                swaps += 1\n                print str1, str2\n    return swaps\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if tuple_list == []:\n        return 0\n    else:\n        return sys.getsizeof(tuple_list[0]) + tuple_size(tuple_list[1:])\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if type(tuple_list) == int:\n        return 0\n    elif len(tuple_list)==1:\n        return sys.getsizeof(tuple_list[0])\n    else:\n        size_list = []\n        for i in tuple_list:\n            size_list.append(sys.getsizeof(i))\n        return sum(size_list)\ndef binary_search(tuple_list, target, start, end, type, return_val):\n    if start>end:\n        return\n    if end-start==1:\n        if tuple_list[start]==target:\n            return_val[0] = start\n        else:\n            return_val[0] = None\n        return\n    elif end-start==0:\n        if tuple_list[start]==target:\n            return_val[0] = start\n        else:\n            return_val[0] = None\n        return\n    mid = (start+end)//2\n    if tuple_list[mid]==target:\n        return_val[0] = mid\n        return\n    elif tuple_list[mid]>target:\n        return binary_search(tuple_list, target, start, mid, type, return_val)\n    elif tuple_list[mid]<target:\n        return binary_search(tuple_list, target, mid, end, type, return_val)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    x = sys.getsizeof(tuple_list)\n    return x\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple=sys.getsizeof(tuple_list)\n    print(\"Size of the tuple is: \",size_of_tuple)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(0,len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\n    \ndef main():\n    tuple_list = [1,2,3,4,5]\n    print(tuple_size(tuple_list))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list) * sizeof_int\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \ndef tuple_create(num):\n    '''\n    Write a function to create a tuple with the given size and return it.\n    '''\n    return tuple([0]*num)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    n = len(tuple_list)\n    m = sys.getsizeof(tuple_list)\n    print(n)\n    print(m)\n    return n,m\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    assert len(arr1) <= len(arr2)\n    m = len(arr1)\n    n = len(arr2)\n    while m > 0 and n > 0:\n        if arr1[m-1] > arr2[n-1]:\n            arr2 = arr2[:n-1] + [arr2[n-1]] + arr2[n:]\n            n -= 1\n        elif arr1[m-1] < arr2[n-1]:\n            arr1 = arr1[:m-1] + [arr1[m-1]] + arr1[m:]\n            m -= 1\n        else:\n            m -= 1\n            n -= 1\n    if m == 0:\n        return arr2[k-1]\n    else:\n        return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    index1 = 0\n    index2 = 0\n    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    \n    while (index1 < len(arr1)) and (index2 < len(arr2)):\n        if arr1[index1] > arr2[index2]:\n            arr2 = arr2[index2:]\n            index2 = len(arr2)\n        elif arr1[index1] < arr2[index2]:\n            arr1 = arr1[index1:]\n            index1 = len(arr1)\n        else:\n            index1 += 1\n            index2 += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_pointer = 0\n    arr2_pointer = 0\n    while True:\n        if arr1_pointer == len(arr1):\n            return arr2[arr2_pointer + k - 1]\n        if arr2_pointer == len(arr2):\n            return arr1[arr1_pointer + k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1, p2 = 0, 0\n    while p1 < len(arr1) and p2 < len(arr2):\n        if arr1[p1] < arr2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    if p1 == len(arr1):\n        return arr2[p2+k-1]\n    elif p2 == len(arr2):\n        return arr1[p1+k-1]\n    else:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i+=1\n        elif arr2[j] < arr1[i]:\n            j+=1\n        else:\n            j+=1\n            i+=1\n    if i < len(arr1):\n        return arr1[i]\n    elif j < len(arr2):\n        return arr2[j]\n    else:\n        return False\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # we only have to check the length of the array\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[0] > arr2[0]:\n        arr1, arr2 = arr2, arr1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    if len(arr1) == 0:\n        return arr2[k - 1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    if number > 0:\n        length = len(num)\n        total = 0\n        for i in range(length):\n            total += int(num[i])**length\n        return total == number\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    length = len(number)\n    length_factorial = length\n    armstrong_number = 0\n    for i in number:\n        armstrong_number += pow(int(i), length_factorial)\n        length_factorial -= 1\n    if armstrong_number == int(number):\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum([int(x)**len(str(number)) for x in str(number)]) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp_num = number\n    sum_num = 0\n    while(temp_num > 0):\n        digit = temp_num % 10\n        sum_num = sum_num + digit ** 3\n        temp_num = temp_num // 10\n    if sum_num == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number<0:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    if len(number_str) % 2!= 0:\n        number_str = '0' + number_str\n    summation = 0\n    for i in range(len(number_str)):\n        summation += int(number_str[i]) ** 3\n    if summation == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    arr = []\n    while number > 0:\n        digit = number % 10\n        arr.append(digit)\n        number = number / 10\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    if number == 0:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    if number == total:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1, number+1)) / float(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return (0, 0)\n    total = 0\n    counter = 1\n    while counter <= number:\n        total += counter\n        counter += 1\n    average = total / number\n    return (total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0,0\n    numbers = []\n    sum_numbers = 0\n    avg_numbers = 0\n    for i in range(1,number+1):\n        numbers.append(i)\n    for number in numbers:\n        sum_numbers = sum_numbers + number\n    avg_numbers = sum_numbers / number\n    return sum_numbers,avg_numbers\n    \nnumber = int(raw_input(\"Enter a number: \"))\nsum,average = sum_average(number)\nprint \"Sum: %d\" % sum\nprint \"Average: %d\" % averag"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total, count = 0, 1\n    while count <= number:\n        total += count\n        count += 1\n    average = total / count\n    print 'Sum: {0:10d} Average: {1:8.2f}'.format(total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return sum_average(number - 1) + number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # If given an integer, convert it to a list\n    if type(number) == int:\n        number = list(range(1,number+1))\n    # If given a list, check if it contains natural numbers\n    elif type(number) == list:\n        number = [i for i in number if type(i) == int]\n    # If no valid argument passed, return None\n    else:\n        return None\n    # Return sum and average\n    return sum(number), sum(number)/len(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total, count = 0, 0\n    for i in range(number):\n        total = total + i\n        count += 1\n    return (total, total / count)\n    \n    \nif __name__ == '__main__':\n    print(sum_average(10))\n    print(sum_average(100))\n    print(sum_average(1000))"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(list(range(number+1))) / len(list(range(number+1)))\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    return sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    for i in range(number+1):\n        sum_ = sum_ + i\n    return sum_ / number\n    "
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #Using modulo operator\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True \n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    from collections import Counter\n    repeated = Counter(str1)\n    for i in repeated:\n        if repeated[i] > 1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return 'No repeating character found'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    characters_count = {}\n    for character in str1:\n        if character in characters_count:\n            characters_count[character] += 1\n        else:\n            characters_count[character] = 1\n    for key, value in characters_count.items():\n        if value > 1:\n            return key\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    mydict = {}\n    for i in str1:\n        if i not in mydict.keys():\n            mydict[i] = 1\n        else:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        char_count[char] = str1.count(char)\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            return i\n        else:\n            dict1[i] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            return char\n        else:\n            dict1[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n        else:\n            continue\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    l = len(str1)\n    for i in range(l):\n        if str1[i] in str1[i+1:l]:\n            return str1[i]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n):\n        a = str(i)\n        b = str(i**2)\n        if a[0] == a[-1] and a[1] == a[-2] and b[0] == b[-1]:\n            ludic_list.append(i)\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    l = [1, 2]\n    for i in range(3, n + 1):\n        if i%2 == 0 and i%3!= 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1,2]\n    else:\n        return get_ludic(n - 1) + get_ludic(n - 2) + [n]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    if n <= 0:\n        return ludic_list\n    elif n == 1:\n        ludic_list.append(1)\n    elif n == 2:\n        ludic_list.append(2)\n    else:\n        ludic_list.append(1)\n        ludic_list.append(2)\n        ludic_list.append(3)\n        ludic_list.append(5)\n        ludic_list.append(7)\n        ludic_list.append(11)\n        ludic_list.append(13)\n        ludic_list.append(17)\n        ludic_list.append(19)\n        ludic_list.append(23)\n        ludic_list.append(29)\n        ludic_list.append(31)\n        ludic_list.append(37)\n        ludic_list.append(41)\n        ludic_list.append(43)\n        ludic_list.append(47)\n        ludic_list.append(53)\n        ludic_list.append(59)\n        ludic_list.append(61)\n        ludic_list.append(67)\n        ludic_list.append(71)\n        ludic_list.append(73)\n        ludic_list.append(79)\n        ludic_list.append(83)\n        ludic_list.append(89)\n        ludic_list.append(97)\n        ludic_list.append(101)\n        ludic_list.append(103)\n        ludic_list.append(107)\n        ludic_list.append(109)\n        ludic_list.append(113)\n        ludic_list.append(119)\n        ludic_list.append(123)\n        ludic_list.append(127)\n        ludic_list.append(131)\n        ludic_list.append(137)\n        ludic_list.append(139)\n        ludic_list.append(149)\n        ludic_list.append(151)\n        ludic_list.append(157)\n        ludic_list.append(163)\n        ludic_list.append(167)\n        ludic_list.append(173)\n        ludic_list.append(179)\n        ludic_list.append(181)\n        ludic_list.append(187)\n        ludic_list.append(193)\n        ludic_list.append(199)\n        ludic_list.append(211)\n        ludic_list.append(223)\n        ludic_list.append(227)\n        ludic_list.append(229)\n        ludic_list.append(233)\n        ludic_list.append(239)\n        ludic_list.append(241)\n        ludic_list.append(251)\n        ludic_list.append(257)\n        ludic_list.append(259)\n        ludic_list.append(263)\n        ludic_list.append(269)\n        ludic_list.append(271)\n        ludic_list.append(277)\n        ludic_list.append(281)\n        ludic_list.append(283)\n        ludic_list.append(293)\n        ludic_list.append(307)\n        ludic_list.append(311)\n        ludic_list.append(313)\n        ludic_list.append(317)\n        ludic_list.append(331)\n        ludic_list.append(337)\n        ludic_list.append(347)\n        ludic_list.append(349)\n        ludic_list.append(353)\n        ludic_list.append(359)\n        ludic_list.append(367)\n        ludic_list.append(373)\n        ludic_list.append(379)\n        ludic_list.append(383)\n        ludic_list.append(389)\n        ludic_list.append(397)\n        ludic_list.append(401)\n        ludic_list.append(409)\n        ludic_list.append(419)\n        ludic_list.append(421)\n        ludic_list.append(431)\n        ludic_list.append(433)\n        ludic_list.append(439)\n        ludic_list.append(443)\n        ludic_list.append(449)\n        ludic_list.append(457)\n        ludic_list.append(461)\n        ludic_list.append(463)\n        ludic_list.append(467)\n        ludic_list.append(473)\n        ludic_list.append(479)\n        ludic_list.append(487)\n        ludic_list.append(491)\n        ludic_list.append(497)\n        ludic_list.append(499)\n        ludic_list.append(503)\n        ludic_list.append(509)\n        ludic_list.append(521)\n        ludic_list.append(523)\n        ludic_list.append(527)\n        ludic_list.append(541)\n        ludic_list.append(547)\n        ludic_list.append(553)\n        ludic_list.append(559)\n        ludic_list.append(567)\n        ludic_list.append(571)\n        ludic_list.append(577)\n        ludic_list.append(587)\n        ludic_list.append(593)\n        ludic_list.append(599)\n        ludic_list.append(601)\n        ludic_list.append(607)\n        ludic_list.append(613)\n        ludic_list.append(617)\n        ludic_list.append(619)\n        ludic_list.append(621)\n        ludic_list.append(631)\n        ludic_list.append(637)\n        ludic_list.append(643)\n        ludic_list.append(649)\n        ludic_list.append(653)\n        ludic_list.append(659)\n        ludic_list.append(661)\n        ludic_list.append(673)\n        ludic_list.append(677)\n        ludic_list.append(683)\n        ludic_list.append(691)\n        ludic_list.append(701)\n        ludic_list.append(709)\n        ludic_list.append(719)\n        ludic_list.append(727)\n        ludic_list.append(733)\n        ludic_list.append(737)\n        ludic_list.append(743)\n        ludic_list.append(751)\n        ludic_list.append(757)\n        ludic_list.append(761)\n        ludic_list.append(767)\n        ludic_list.append(773)\n        ludic_list.append(779)\n        ludic_list.append(783)\n        ludic_list.append(788)\n        ludic_list.append(797)\n        ludic_list.append(799)\n        ludic_list.append(803)\n        ludic_list.append(809)\n        ludic_list.append(811)\n        ludic_list.append(813)\n        ludic_list.append(817)\n        ludic_list.append(819)\n        ludic_list.append(821)\n        ludic_list.append(823)\n        ludic_list.append(829)\n        ludic_list.append(839)\n        ludic_list.append(853)\n        ludic_list.append(859)\n        ludic_list.append(863)\n        ludic_list.append(869)\n        ludic_list.append(873)\n        ludic_list.append(879)\n        ludic_list.append(887)\n        ludic_list.append(891)\n        ludic_list.append(897)\n        ludic_list.append(901)\n        ludic_list.append(907)\n        ludic_list.append(911)\n        ludic_list.append(919)\n        ludic_list.append(929)\n        ludic_list.append(937)"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return []\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    assert n >= 0, 'n must be a non-negative integer'\n    lucids = [1]\n    if n <= 1:\n        return lucids\n    else:\n        lucids = [1,2]\n        while True:\n            if len(lucids) == n:\n                return lucids\n            else:\n                lucids = [2*x for x in lucids]\n                lucids.pop(0)\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    ludic = []\n    l = get_lucian_list(n)\n    for i in l:\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for i in range(1, n+1):\n        x = i\n        while (x!= 1) and (x!= 4):\n            if (x % 2 == 0) or (x % 3 == 0) or (x % 5 == 0):\n                x /= 2\n            elif (x % 7 == 0):\n                x /= 7\n            else:\n                x = x * 7 + 1\n        if x == 1:\n            ludic_nums.append(i)\n    return ludic_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    from math import sqrt\n    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    i = 2\n    lucids = []\n    while i <= sqrt(n):\n        if n % i == 0:\n            lucids.append(i)\n            lucids.append(n/i)\n        i += 1\n    lucids = list(set(lucids))\n    return sorted(lucids)\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = set()\n    for i in xrange(n+1):\n        i_str = str(i)\n        for j in xrange(len(i_str)):\n            if i_str[j] == '4':\n                lucids.add(i)\n                break\n    return lucids\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = list(s)\n    first = True\n    i = 0\n    while i < len(l):\n        if l[i] =='' and first:\n            first = False\n            i += 1\n            continue\n        if not first:\n            if l[i] =='':\n                i += 1\n                continue\n            l.insert(i,'')\n            i += 1\n        else:\n            i += 1\n    return ''.join(l)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return \" \".join(s)\n    \n    \n    \ndef reverse_words_2(s):\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_words.insert(0, word)\n    return \" \".join(new_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_l = s.split(' ')\n    s_l.reverse()\n    return''.join(s_l)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    a = s.split(' ')\n    a = reversed(a)\n    a =''.join(a)\n    return a\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(reversed(words))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    if not s:\n        return ''\n    if not'' in s:\n        return s\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_string(s, start, end):\n        while start < end:\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n        return s\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2,int(num**(1/2))+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        if num == 2:\n            return True\n        for i in xrange(2,num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return num > 1 and not any(num%i == 0 for i in range(2,num))\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, int(num/2)):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 1:\n        return False\n    elif num == 1:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2, num // 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    for i in xrange(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\ndef get_angle(a, b, c):\n    '''\n    Write a function to get the angle between three points.\n    '''\n    ba = a - b\n    bc = c - b\n    cosine_angle = math.cos(radian_degree(math.acos(math.pow(ba.x * bc.x + ba.y * bc.y, 1/2))))\n    return math.degrees(math.acos(cosine_angle))\ndef get_angle_by_points(point1, point2, point3):\n    '''\n    Write a function to get the angle between three points.\n    '''\n    ba = point1 - point2\n    bc = point3 - point2\n    cosine_angle = math.cos(radian_degree(math.acos(math.pow(ba.x * bc.x + ba.y * bc.y, 1/2))))\n    return math.degrees(math.acos(cosine_angle))\ndef get_distance(point1, point2):\n    '''\n    Write a function to get the distance between two points.\n    '''\n    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)\ndef get_distance_by_points(point1, point2):\n    '''\n    Write a function to get the distance between two points.\n    '''\n    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)\ndef get_midpoint(point1, point2):\n    '''\n    Write a function to get the midpoint between two points.\n    '''\n    midpoint = point1.clone()\n    midpoint.x = (point1.x + point2.x) / 2\n    midpoint.y = (point1.y + point2.y) / 2\n    return midpoint\ndef get_midpoint_by_points(point1, point2):\n    '''\n    Write a function to get the midpoint between two points.\n    '''\n    midpoint = point1.clone()\n    midpoint.x = (point1.x + point2.x) / 2\n    midpoint.y = (point1.y + point2.y) / 2\n    return midpoint\ndef get_midpoint_of_triangle(point1, point2, point3):\n    '''\n    Write a function to get the midpoint of a triangle.\n    '''\n    midpoint = point1.clone()\n    midpoint.x = (point1.x + point2.x + point3.x) / 3\n    midpoint.y = (point1.y + point2.y + point3.y) / 3\n    return midpoint\ndef get_midpoint_of_triangle_by_points(point1, point2, point3):\n    '''\n    Write a function to get the midpoint of a triangle.\n    '''\n    midpoint = point1.clone()\n    midpoint.x = (point1.x + point2.x + point3.x) / 3\n    midpoint.y = (point1.y + point2.y + point3.y) / 3\n    return midpoint\ndef get_side_length(point1, point2):\n    '''\n    Write a function to get the side length of a triangle.\n    '''\n    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)\ndef get_side_length_by_points(point1, point2):\n    '''\n    Write a function to get the side length of a triangle.\n    '''\n    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)\ndef get_triangle_area(point1, point2, point3):\n    '''\n    Write a function to get the area of a triangle.\n    '''\n    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2) * 0.5\ndef get_triangle_area_by_points(point1, point2, point3):\n    '''\n    Write a function to get the area of a triangle.\n    '''\n    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2) * 0.5\ndef get_parallelogram_area(point1, point2, point3, point4):\n    '''\n    Write a function to get the area of a rectangle.\n    '''\n    return abs(((point2.x - point1.x) * (point3.y - point4.y)) - ((point2.y - point1.y) * (point3.x - point4.x)))\ndef get_parallelogram_area_by_points(point1, point2, point3, point4):\n    '''\n    Write a function to get the area of a rectangle.\n    '''\n    return abs(((point2.x - point1.x) * (point3.y - point4.y)) - ((point2.y - point1.y) * (point3.x - point4.x)))\ndef get_diameter(point1, point2):\n    '''\n    Write a function to get the diameter of a rectangle.\n    '''\n    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)\ndef get_diameter_by_points(point1, point2):\n    '''\n    Write a function to get the diameter of a rectangle.\n    '''\n    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)\ndef get_rectangle_area(point1, point2, point3, point4):\n    '''\n    Write a function to get the area of a rectangle.\n    '''\n    return abs((point2.x - point1.x) * (point3.y - point4.y) - ((point2.y - point1.y) * (point3.x - point4.x)))\ndef get_rectangle_area_by_points(point1, point2, point3, point4):\n    '''\n    Write a function to get the area of a rectangle.\n    '''\n    return abs((point2.x - point1.x) * (point3.y - point4.y) - ((point2.y - point1.y) * (point3.x - point4.x)))\ndef get_circle_area(point1, point2):\n    '''\n    Write a function to get the area of a circle.\n    '''\n    return math.pi * math.pow(get_distance(point1, point2), 2)\ndef get_circle_area_by_points(point1, point2):\n    '''\n    Write a function to get the area of a circle.\n    '''\n    return math.pi * math.pow(get_distance_by_points(point1, point2), 2)\ndef get_circle_circumference(point1, point2):\n    '''\n    Write a function to get the circumference of a circle.\n    '''\n    return 2 * math.pi * get_distance(point1, point2)\ndef get_circle_circumference_by_points(point1, point2):\n    '''\n    Write a function to get the circumference of a circle.\n    '''\n    return 2 * math.pi * get_distance_by_points(point1, point2)\ndef get_shape_area(shape):\n    '''\n    Write a function to get the area of a shape.\n    '''\n    area = 0\n    if shape == 'triangle':\n        area = get_triangle_area(shape1.point1, shape1.point2, shape1.point3)\n    elif shape == 'triangle_by_points':\n        area = get_triangle_area_by_points(shape1.point1, shape1.point2, shape1.point3)\n    elif shape =='square':\n        area = get_square_area(shape1.point1, shape1.point2"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef radian_pi(pi):\n    '''\n    Write a function to convert radians to pi.\n    '''\n    return (pi * 180) / math.pi\ndef meters_to_pixels(meters):\n    '''\n    Write a function to convert meters to pixels.\n    '''\n    return meters * 2.54\ndef pixels_to_meters(pixels):\n    '''\n    Write a function to convert pixels to meters.\n    '''\n    return pixels / 2.54\ndef meters_to_inches(meters):\n    '''\n    Write a function to convert meters to inches.\n    '''\n    return meters / 39.37\ndef inches_to_meters(inches):\n    '''\n    Write a function to convert inches to meters.\n    '''\n    return inches / 39.37\ndef km_to_miles(km):\n    '''\n    Write a function to convert kilometers to miles.\n    '''\n    return km / 1.609\ndef miles_to_km(miles):\n    '''\n    Write a function to convert miles to kilometers.\n    '''\n    return miles * 1.609\ndef feet_to_meters(feet):\n    '''\n    Write a function to convert feet to meters.\n    '''\n    return feet * 0.3048\ndef meters_to_feet(meters):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    return meters * 3.2808\ndef cm_to_meters(cm):\n    '''\n    Write a function to convert cm to meters.\n    '''\n    return cm / 100\ndef meters_to_cm(meters):\n    '''\n    Write a function to convert meters to cm.\n    '''\n    return meters * 100\ndef cm_to_inches(cm):\n    '''\n    Write a function to convert cm to inches.\n    '''\n    return cm / 2.54\ndef inches_to_cm(inches):\n    '''\n    Write a function to convert inches to cm.\n    '''\n    return inches * 2.54\ndef deg_to_rad(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * (math.pi / 180)\ndef rad_to_deg(rad):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return rad * 180 / math.pi\ndef float_to_int(float_val):\n    '''\n    Write a function to convert float to int.\n    '''\n    return int(float_val)\ndef int_to_float(int_val):\n    '''\n    Write a function to convert int to float.\n    '''\n    return float_val\ndef format_value(value, units):\n    '''\n    Write a function to format a value with a given unit.\n    '''\n    if units == 'deg' or units == 'rad':\n        return str(value) +'' + units\n    if units =='m' or units == 'km':\n        return str(value) +'' + units +'s'\n    if units =='mm':\n        return str(value) +'' + units\n    if units == 'cm':\n        return str(value) +'' + units\n    if units == 'inches' or units == 'ft':\n        return str(value) +'' + units +'s'\n    return str(value) +'' + units +'s'\ndef format_to_other_units(value, units, output):\n    '''\n    Write a function to convert a given value and unit into a desired output unit.\n    '''\n    if units == 'deg' or units == 'rad':\n        return value * output\n    if units =='m' or units == 'km':\n        return value * output * 1000000\n    if units =='mm':\n        return value * output * 100000000\n    if units == 'cm':\n        return value * output * 1000000000\n    if units == 'inches' or units == 'ft':\n        return value * output * 120000\n    return value * output\ndef format_deg_rad(value, units):\n    '''\n    Write a function to convert a given value and unit into radians.\n    '''\n    if units == 'deg':\n        return value\n    if units == 'rad':\n        return value\n    if units =='m' or units == 'km':\n        return radian_degree(value)\n    if units =='mm':\n        return radian_degree(value) * 1000000\n    if units == 'cm':\n        return radian_degree(value) * 1000000000\n    if units == 'inches' or units == 'ft':\n        return radian_degree(value) * 120000\n    return radian_degree(value)\ndef format_deg_m(value, units):\n    '''\n    Write a function to convert a given value and unit into meters.\n    '''\n    if units == 'deg':\n        return value\n    if units == 'rad':\n        return value / radian_degree(360)\n    if units =='m' or units == 'km':\n        return value * radian_degree(360)\n    if units =='mm':\n        return value * radian_degree(360) * 1000000\n    if units == 'cm':\n        return value * radian_degree(360) * 1000000000\n    if units == 'inches' or units == 'ft':\n        return value * radian_degree(360) * 120000\n    return value * radian_degree(360)\ndef format_deg_cm(value, units):\n    '''\n    Write a function to convert a given value and unit into cm.\n    '''\n    if units == 'deg':\n        return value * 1000000\n    if units == 'rad':\n        return value * 1000000000\n    if units =='m' or units == 'km':\n        return value * 100000000\n    if units =='mm':\n        return value * 1000000000\n    if units == 'cm':\n        return value\n    if units == 'inches' or units == 'ft':\n        return value * 120000\n    return value * 100000000\ndef format_deg_inches(value, units):\n    '''\n    Write a function to convert a given value and unit into inches.\n    '''\n    if units == 'deg':\n        return value * 120000\n    if units == 'rad':\n        return value * 120000 * 1000000\n    if units =='m' or units == 'km':\n        return value * 120000 * 1000000 * 1000000000\n    if units =='mm':\n        return value * 120000 * 1000000 * 1000000000\n    if units == 'cm':\n        return value * 120000 * 1000000 * 1000000000\n    if units == 'inches' or units == 'ft':\n        return value * 120000 * 1000000 * 1000000000\n    return value * 120000 * 1000000 * 1000000000\ndef format_deg_km(value, units):\n    '''\n    Write a function to convert a given value and unit into kilometers.\n    '''\n    if units == 'deg':\n        return value * 1000000000\n    if units == 'rad':\n        return value * 1000000000 * 1000000\n    if units =='m' or units == 'km':\n        return value * 1000000000 * 1000000\n    if units =='mm':\n        return value * 1000000000 * 1000000\n    if units == 'cm':\n        return value * 1000000000 * 1000000\n    if units == 'inches' or units == 'ft':\n        return value * 1000000000 * 1000000\n    return value * 1000000000 * 1000000\ndef format_deg_mm(value, units):\n    '''\n    Write a function to convert a given value and unit into millimeters.\n    '''\n    if units == 'deg':\n        return value * 1000000\n    if units == 'rad':\n        return value * 1000000 * 1000000\n    if units =='m' or units == 'km':\n        return value * 1000000 * 1000000\n    if units =='mm':\n        return value\n    if units == 'cm':\n        return value * 1000000\n    if units == 'inches' or units == 'ft':\n        return value * 1000000 * 120000\n    return value * 1000000 * 120000\ndef format_deg_cm(value, units):\n    '''\n    Write a function to convert a given value and unit into centimeters.\n    '''\n    if units == 'deg':\n        return value * 1000000000\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef convert_to_degrees(radian):\n    return radian*180/math.pi\ndef bearing(lat1, long1, lat2, long2):\n    '''\n    Write a function to calculate the bearing between two points on the Earth.\n    '''\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    diff_lat = lat2-lat1\n    diff_long = long2-long1\n    \n    a = (math.sin(diff_lat/2)**2) + (math.cos(lat1) * math.cos(lat2) * (math.sin(diff_long/2)**2))\n    c = 2 * (math.atan2(math.sqrt(a), math.sqrt(1-a)))\n    \n    return convert_to_degrees(c)\ndef equatorial_distance(lat1, long1, lat2, long2):\n    '''\n    Write a function to calculate the great circle distance between two points on the Earth.\n    '''\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    long1 = radian_degree(long1)\n    long2 = radian_degree(long2)\n    \n    a = math.sin((lat2-lat1)/2)*math.sin((lat2-lat1)/2) + math.cos(lat1)*math.cos(lat2) * math.sin((long2-long1)/2)*math.sin((long2-long1)/2)\n    c = 2*math.atan2(math.sqrt(a),math.sqrt(1-a))\n    \n    return c*6371000\ndef line_of_sight(lat1, long1, lat2, long2):\n    '''\n    Write a function to determine if a set of points is in line of sight between two points on the Earth.\n    '''\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    long1 = radian_degree(long1)\n    long2 = radian_degree(long2)\n    \n    lat1 = lat1\n    lat2 = lat2\n    long1 = long1\n    long2 = long2\n    \n    a = math.sin((lat2-lat1)/2)*math.sin((lat2-lat1)/2) + math.cos(lat1)*math.cos(lat2) * math.sin((long2-long1)/2)*math.sin((long2-long1)/2)\n    c = 2 * (math.atan2(math.sqrt(a),math.sqrt(1-a)))\n    \n    return c < math.pi/2\ndef dist_on_earth(lat1, long1, lat2, long2):\n    '''\n    Write a function to calculate the great circle distance between two points on the Earth.\n    '''\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    long1 = radian_degree(long1)\n    long2 = radian_degree(long2)\n    \n    a = math.sin((lat2-lat1)/2)*math.sin((lat2-lat1)/2) + math.cos(lat1)*math.cos(lat2) * math.sin((long2-long1)/2)*math.sin((long2-long1)/2)\n    c = 2 * (math.atan2(math.sqrt(a),math.sqrt(1-a)))\n    \n    return c*6371000\ndef distance(lat1, long1, lat2, long2):\n    '''\n    Write a function to calculate the great circle distance between two points on the Earth.\n    '''\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    long1 = radian_degree(long1)\n    long2 = radian_degree(long2)\n    \n    a = math.sin((lat2-lat1)/2)*math.sin((lat2-lat1)/2) + math.cos(lat1)*math.cos(lat2) * math.sin((long2-long1)/2)*math.sin((long2-long1)/2)\n    c = 2 * (math.atan2(math.sqrt(a),math.sqrt(1-a)))\n    \n    return c*6371000\ndef bearing_to_destination(lat1, long1, lat2, long2):\n    '''\n    Write a function to calculate the bearing between two points on the Earth.\n    '''\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    long1 = radian_degree(long1)\n    long2 = radian_degree(long2)\n    \n    diff_lat = lat2-lat1\n    diff_long = long2-long1\n    \n    a = (math.sin(diff_lat/2)**2) + (math.cos(lat1) * math.cos(lat2) * (math.sin(diff_long/2)**2))\n    c = 2 * (math.atan2(math.sqrt(a), math.sqrt(1-a)))\n    \n    return convert_to_degrees(c)\ndef dist_to_destination(lat1, long1, lat2, long2):\n    '''\n    Write a function to calculate the great circle distance between two points on the Earth.\n    '''\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    long1 = radian_degree(long1)\n    long2 = radian_degree(long2)\n    \n    a = math.sin((lat2-lat1)/2)*math.sin((lat2-lat1)/2) + math.cos(lat1)*math.cos(lat2) * math.sin((long2-long1)/2)*math.sin((long2-long1)/2)\n    c = 2 * (math.atan2(math.sqrt(a), math.sqrt(1-a)))\n    \n    return c*6371000\ndef polygon_area(vertices):\n    '''\n    Write a function to calculate the area of a polygon.\n    '''\n    area = 0.0\n    for i in range(0,len(vertices)):\n        j = i + 1\n        if j == len(vertices):\n            j = 0\n        area += vertices[i][0]*vertices[j][1] - vertices[i][1]*vertices[j][0]\n    area = abs(area)/2\n    return area\ndef area_of_a_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\ndef line_intersection(line1, line2):\n    '''\n    Write a function to calculate the intersection of two lines.\n    '''\n    x1 = line1[0][0]\n    y1 = line1[0][1]\n    x2 = line1[1][0]\n    y2 = line1[1][1]\n    x3 = line2[0][0]\n    y3 = line2[0][1]\n    x4 = line2[1][0]\n    y4 = line2[1][1]\n    \n    a1 = y2-y1\n    b1 = x1-x2\n    c1 = a1*(x1) + b1*(y1)\n    \n    a2 = y4-y3\n    b2 = x3-x4\n    c2 = a2*(x3) + b2*(y3)\n    \n    denominator = a1*b2 - a2*b1\n    if denominator == 0:\n        print \"Lines do not intersect\"\n        return None\n    x = (b2*c1 - b1*c2)/denominator\n    y = (a1*c2 - a2*c1)/denominator\n    \n    return [x, y]\ndef line_equation(point1, point2):\n    '''\n    Write a function to calculate the equation of a line.\n    '''\n    slope = point1[0] - point"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the Euclidean distance between two points.\n    '''\n    return math.sqrt(math.pow((x1-x2),2)+math.pow((y1-y2),2))\ndef power(x,y):\n    '''\n    Write a function to compute the power of x to the y.\n    '''\n    return math.pow(x,y)\ndef log(x,y):\n    '''\n    Write a function to compute the log of x to the y.\n    '''\n    return math.log(x,y)\ndef sqrt(x,y):\n    '''\n    Write a function to compute the square root of x to the y.\n    '''\n    return math.sqrt(x)\ndef ceil(x,y):\n    '''\n    Write a function to compute the ceil of x to the y.\n    '''\n    return math.ceil(x)\ndef floor(x,y):\n    '''\n    Write a function to compute the floor of x to the y.\n    '''\n    return math.floor(x)\ndef acos(x,y):\n    '''\n    Write a function to compute the arc cosine of x to the y.\n    '''\n    return math.acos(x)\ndef asin(x,y):\n    '''\n    Write a function to compute the arc sine of x to the y.\n    '''\n    return math.asin(x)\ndef cos(x):\n    '''\n    Write a function to compute the cos of x.\n    '''\n    return math.cos(x)\ndef sin(x):\n    '''\n    Write a function to compute the sin of x.\n    '''\n    return math.sin(x)\ndef tan(x):\n    '''\n    Write a function to compute the tangent of x.\n    '''\n    return math.tan(x)\ndef degrees(x):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return math.degrees(x)\ndef radians(x):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(x)\ndef hypot(x,y):\n    '''\n    Write a function to compute the hypotenuse of the right triangle given the length of two sides.\n    '''\n    return math.hypot(x,y)\ndef max(x,y):\n    '''\n    Write a function to compute the maximum of the two input numbers.\n    '''\n    return max(x,y)\ndef min(x,y):\n    '''\n    Write a function to compute the minimum of the two input numbers.\n    '''\n    return min(x,y)\ndef factorial(x):\n    '''\n    Write a function to compute the factorial of x.\n    '''\n    return math.factorial(x)\ndef lcm(x,y):\n    '''\n    Write a function to compute the least common multiple of x and y.\n    '''\n    return math.lcm(x,y)\ndef gcd(x,y):\n    '''\n    Write a function to compute the greatest common divisor of x and y.\n    '''\n    return math.gcd(x,y)\ndef pow(x,y):\n    '''\n    Write a function to compute the power of x to the y.\n    '''\n    return math.pow(x,y)\ndef sqrt_iter(x):\n    '''\n    Write a function to compute the square root of x using Newton's method.\n    '''\n    ans = x\n    while True:\n        better = (ans + x/ans) / 2\n        if abs(ans - better) < 1e-6:\n            return better\n        ans = better\ndef sqrt_newton(x):\n    '''\n    Write a function to compute the square root of x using Newton's method.\n    '''\n    return sqrt_iter(x)\ndef sqrt_newton_improved(x):\n    '''\n    Write a function to compute the square root of x using Newton's method with better accuracy.\n    '''\n    return sqrt_iter(x)\ndef ln(x,y):\n    '''\n    Write a function to compute the log of x to the y.\n    '''\n    return math.log(x,y)\ndef log10(x,y):\n    '''\n    Write a function to compute the log of x to the y.\n    '''\n    return math.log10(x)\ndef log2(x,y):\n    '''\n    Write a function to compute the log of x to the y.\n    '''\n    return math.log2(x)\ndef sum(x):\n    '''\n    Write a function to compute the sum of all the numbers in the list x.\n    '''\n    return sum(x)\ndef dot_product(x,y):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    return dot_product(x,y)\ndef matrix_product(x,y):\n    '''\n    Write a function to compute the matrix product of two matrices.\n    '''\n    return matrix_product(x,y)\ndef matrix_add(x,y):\n    '''\n    Write a function to add two matrices.\n    '''\n    return matrix_add(x,y)\ndef matrix_subtract(x,y):\n    '''\n    Write a function to subtract two matrices.\n    '''\n    return matrix_subtract(x,y)\ndef matrix_scalar_multiplication(x,y):\n    '''\n    Write a function to multiply a scalar by a matrix.\n    '''\n    return matrix_scalar_multiplication(x,y)\ndef matrix_element(x,y,z):\n    '''\n    Write a function to compute the element of the matrix (x,y) at (z,z).\n    '''\n    return matrix_element(x,y,z)\ndef matrix_transpose(x):\n    '''\n    Write a function to compute the transpose of a matrix.\n    '''\n    return matrix_transpose(x)\ndef matrix_determinant(x):\n    '''\n    Write a function to compute the determinant of a matrix.\n    '''\n    return matrix_determinant(x)\ndef matrix_inverse(x):\n    '''\n    Write a function to compute the inverse of a matrix.\n    '''\n    return matrix_inverse(x)\ndef matrix_power(x,y):\n    '''\n    Write a function to compute the power of a matrix to the y.\n    '''\n    return matrix_power(x,y)\ndef matrix_multiply(x,y):\n    '''\n    Write a function to compute the matrix multiply of two matrices.\n    '''\n    return matrix_multiply(x,y)\ndef matrix_add_matrix(x,y):\n    '''\n    Write a function to add two matrices.\n    '''\n    return matrix_add_matrix(x,y)\ndef matrix_subtract_matrix(x,y):\n    '''\n    Write a function to subtract two matrices.\n    '''\n    return matrix_subtract_matrix(x,y)\ndef sgn(x):\n    '''\n    Write a function to compute the sign of x.\n    '''\n    return sgn(x)\ndef matrix_is_equal(x,y):\n    '''\n    Write a function to test if two matrices are equal.\n    '''\n    return matrix_is_equal(x,y)\ndef matrix_is_zero(x):\n    '''\n    Write a function to test if a matrix is zero.\n    '''\n    return matrix_is_zero(x)\ndef matrix_column(x,y):\n    '''\n    Write a function to compute the column of a matrix (x,y).\n    '''\n    return matrix_column(x,y)\ndef matrix_row(x,y):\n    '''\n    Write a function to compute the row of a matrix (x,y).\n    '''\n    return matrix_row(x,"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (math.pi/180)*degree\ndef radian_sin(degree):\n    return math.sin(radian_degree(degree))\ndef radian_cos(degree):\n    return math.cos(radian_degree(degree))\ndef radian_tan(degree):\n    return math.tan(radian_degree(degree))\ndef radian_asin(x):\n    return math.asin(x)\ndef radian_acos(x):\n    return math.acos(x)\ndef radian_atan(x):\n    return math.atan(x)\ndef radian_atan2(x,y):\n    return math.atan2(x,y)\ndef radian_sinh(x):\n    return math.sinh(x)\ndef radian_cosh(x):\n    return math.cosh(x)\ndef radian_tanh(x):\n    return math.tanh(x)\ndef radian_sqrt(x):\n    return math.sqrt(x)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_floor(x):\n    return math.floor(x)\ndef radian_ceil(x):\n    return math.ceil(x)\ndef radian_fabs(x):\n    return math.fabs(x)\ndef radian_gcd(x,y):\n    return math.gcd(x,y)\ndef radian_lcm(x,y):\n    return math.lcm(x,y)\ndef radian_xor(x,y):\n    return math.xor(x,y)\ndef radian_gcd(x,y):\n    return math.gcd(x,y)\ndef radian_lcm(x,y):\n    return math.lcm(x,y)\ndef radian_xor(x,y):\n    return math.xor(x,y)\ndef radian_sign(x):\n    if x < 0:\n        return -1\n    if x > 0:\n        return 1\n    if x == 0:\n        return 0\ndef radian_isclose(a,b,abs_tol=1e-09,rel_tol=1e-09):\n    return math.isclose(a,b,abs_tol,rel_tol)\ndef radian_fmod(x,y):\n    return math.fmod(x,y)\ndef radian_pow(x,y):\n    return math.pow(x,y)\ndef radian_modf(x):\n    return math.modf(x)\ndef radian_isinf(x):\n    return math.isinf(x)\ndef radian_degrees(x):\n    return 180*x/math.pi\ndef radian_radians(x):\n    return x/math.pi*180\ndef radian_copysign(x,y):\n    return math.copysign(x,y)\ndef radian_max(x,y):\n    return math.max(x,y)\ndef radian_min(x,y):\n    return math.min(x,y)\ndef radian_nextafter(x,y):\n    return math.nextafter(x,y)\ndef radian_ldexp(x,y):\n    return math.ldexp(x,y)\ndef radian_floor_divide(x,y):\n    return math.floor_divide(x,y)\ndef radian_mod(x,y):\n    return math.fmod(x,y)\ndef radian_fract(x):\n    return math.fract(x)\ndef radian_round(x):\n    return round(x)\ndef radian_trunc(x):\n    return math.trunc(x)\ndef radian_sqrt2(x):\n    return math.sqrt(x)\ndef radian_erf(x):\n    return math.erf(x)\ndef radian_erfc(x):\n    return math.erfc(x)\ndef radian_gamma(x):\n    return math.gamma(x)\ndef radian_exp(x):\n    return math.exp(x)\ndef radian_expm1(x):\n    return math.expm1(x)\ndef radian_log(x):\n    return math.log(x)\ndef radian_log10(x):\n    return math.log10(x)\ndef radian_log1p(x):\n    return math.log1p(x)\ndef radian_log2(x):\n    return math.log2(x)\ndef radian_logb(x):\n    return math.logb(x)\ndef radian_log1p(x):\n    return math.log1p(x)\ndef radian_log2(x):\n    return math.log2(x)\ndef radian_log10(x):\n    return math.log10(x)\ndef radian_log2(x):\n    return math.log2(x)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hypot(x,y):\n    return math.hypot(x,y)\ndef radian_hy"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # print(re.search(pattern, text))\n    return re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # your code here\n    return (None, 0, 0)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match is None:\n        return None, 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #The first solution:\n    regex_pattern = re.compile(pattern)\n    result = regex_pattern.search(text)\n    return result.group(), result.start(), result.end()\n    \n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = '\\\\' + pattern\n    m = re.search(pattern, text)\n    if m is None:\n        return None, None, None\n    start = m.start()\n    end = m.end()\n    return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    search_obj = re.search(pattern, text)\n    if search_obj:\n        return search_obj.group(), search_obj.start(), search_obj.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    m = p.search(text)\n    if m:\n        return m.group(0), m.start(), m.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    start = 0\n    end = 0\n    for match in matches:\n        start = match.start()\n        end = match.end()\n    return [text[start:end], start, end]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    l=[1]\n    for i in range(1,n):\n        l.append(l[i-1]*(n-i))\n    return l[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return bell_Number(n-1) + n\nprint bell_Number(10)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    global j\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return j*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n-1) + n\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    number_of_ways = [0]\n    for i in range(1, n+1):\n        number_of_ways.append(0)\n    number_of_ways[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            number_of_ways[i] += number_of_ways[j-1] * number_of_ways[i-j]\n    return number_of_ways[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(n):\n        bell.append(sum([bell[i] * j for j in range(1, i + 2)]) + 1)\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1,n+1):\n        bell *= i\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # Stores nth bell number\n    bellNumber = 0\n    \n    # For loop to iterate from 1 to n\n    for i in range(1, n + 1): \n        \n        # Increment nth bell number with i\n        bellNumber += i\n    \n    # Return nth bell number\n    return bellNumber\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return []\n    if L > len(list1) or L < 0:\n        return []\n    list2 = []\n    if L == 0:\n        list2 = list1[1:len(list1)]\n    elif L == len(list1) - 1:\n        list2 = list1[0:len(list1)-1]\n    else:\n        list2 = list1[0:L-1] + list1[L+1:len(list1)]\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:len(list1)]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L = L - 1\n    length = len(list1)\n    if (L < 0) or (L > length):\n        return None\n    for i in range(0, L):\n        list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for item in list1:\n        if list1.index(item)!= L:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2=[]\n    for element in list1:\n        list2.append(element)\n    list2.pop(L-1)\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # element = list1.pop(L)\n    # print element\n    return list1[:L] + list1[L+1:]\n    # return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if len(test_list[i]) > N:\n            if max_num < test_list[i][N]:\n                max_num = test_list[i][N]\n    return max_num\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = [max(row[N-1:]) for row in test_list]\n    return max_col\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # first, get the max of the last N elements\n    max_vals = []\n    for row in test_list[:len(test_list)-N+1]:\n        max_vals.append(max(row))\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(zip(*test_list)[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list.sort(key=lambda x: x[N-1])\n    return test_list[-1][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([max(x) for x in test_list[N]])\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    temp_list = []\n    for i in test_list:\n        temp_list.append(i[N-1])\n    return max(temp_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([max(sub_list) for sub_list in test_list[N:]])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # max_value = 0\n    # for i in range(len(test_list)):\n    #     max_value = max(max_value, test_list[i][N-1])\n    # return max_value\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    temp = [[],[]]\n    for i in range(0,len(lst)):\n        temp[0].append(lst[i][0])\n        temp[1].append(lst[i][1])\n    return temp\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return [lst1,lst2]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i=0\n    while i<len(lst):\n        a=lst[i][0]\n        b=lst[i][1]\n        lst[i][0]=b\n        lst[i][1]=a\n        i=i+1\n    return lst\n    \n    \ndef reverse(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i=0\n    while i<len(lst):\n        a=lst[i][0]\n        b=lst[i][1]\n        lst[i][0]=b\n        lst[i][1]=a\n        i=i+1\n    return lst\n    \ndef palindrome(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i=0\n    while i<len(lst):\n        a=lst[i][0]\n        b=lst[i][1]\n        lst[i][0]=b\n        lst[i][1]=a\n        i=i+1\n    i=0\n    while i<len(lst):\n        if lst[i][0]!=lst[i][1]:\n            return False\n        i=i+1\n    return True\n    \ndef add(lst,num):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i=0\n    while i<len(lst):\n        a=lst[i][0]\n        b=lst[i][1]\n        lst[i][0]=a+num\n        lst[i][1]=b+num\n        i=i+1\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(0, len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    merge_list = [[],[]]\n    for x in lst:\n        merge_list[0].append(x[0])\n        merge_list[1].append(x[1])\n    return merge_list\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        for j in i:\n            result.append(j)\n    result2 = []\n    for i in lst:\n        result2.append(i[1])\n    return [result, result2]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #list of list of [first, second]\n    #lst = [ [1, 3], [2, 4], [3, 5] ]\n    #return [ [1, 2], [3, 4], [5, None] ]\n    \n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    list2 = []\n    for i in lst:\n        list2.append(i[0])\n        list2.append(i[1])\n    return list2\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list.sort()\n    cum_sum = [i for i in test_list]\n    print(cum_sum)\n    for i in range(1, len(test_list)):\n        cum_sum[i] = cum_sum[i-1] + test_list[i]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    cum_sum.append(test_list[0])\n    for i in range(1, len(test_list)):\n        cum_sum.append(cum_sum[i - 1] + test_list[i])\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # your code goes here\n    \n    return 0\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        return [test_list[0]] + cummulative_sum(test_list[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return list(itertools.accumulate(test_list, operator.add))\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum = cumulative_sum + i\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summation = 0\n    for i in range(len(test_list)):\n        summation += test_list[i]\n    return summation\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i]) for i in range(1, len(test_list) + 1)]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            cumulative_sum_list.append(test_list[i])\n        else:\n            cumulative_sum_list.append(cumulative_sum_list[i-1] + test_list[i])\n    return cumulative_sum_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(num)/len(num)) for num in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return map(lambda x: sum(x)/len(x), zip(*nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i) / len(i) for i in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        averages.append(sum(num) / len(num))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    t = []\n    for i in nums:\n        t.append(sum(i) / len(i))\n    return t\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sub_tuple in nums:\n        average = sum(sub_tuple) / len(sub_tuple)\n        averages.append(average)\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(tup)/len(tup) for tup in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_nums = []\n    for num in nums:\n        average_nums.append(sum(num)/len(num))\n    return average_nums\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    a = sum(nums[0])/len(nums[0])\n    b = sum(nums[1])/len(nums[1])\n    c = sum(nums[2])/len(nums[2])\n    return [a,b,c]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        result.append(sum(tup)/len(tup))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    res = []\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i] % test_tup2[i]) )\n    return tuple(res)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert isinstance(test_tup1, tuple), 'First argument must be a tuple'\n    assert isinstance(test_tup2, tuple), 'Second argument must be a tuple'\n    assert len(test_tup1) == len(test_tup2), 'Tuples must be same length'\n    return tuple(x%y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return_tup = []\n    for x in range(len(test_tup1)):\n        return_tup.append(test_tup1[x] % test_tup2[x])\n    return return_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tup = []\n    for i in range(len(test_tup1)):\n        mod_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(mod_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must be the same length.\")\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i]%test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        output_tuple = []\n        for i in range(len(test_tup1)):\n            output_tuple.append((test_tup1[i] % test_tup2[i]))\n        return tuple(output_tuple)\n    else:\n        return 'Inputs must be of the same length'\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump = [0 for i in range(steps)]\n    jumps = 0\n    jump[0] = 0\n    jump[1] = 1\n    jump[2] = 2\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) < 2:\n        return 0\n    \n    jumps = 0\n    i = 0\n    while i < len(steps) - 1:\n        if i + d >= len(steps):\n            return jumps\n        jumps += 1\n        if steps[i + d] == steps[i] + d:\n            i += d\n        elif steps[i + d] - steps[i] <= d:\n            i += steps[i] - steps[i + d]\n        else:\n            i += d\n    \n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    if d==0:\n        return steps\n    for i in range(d):\n        steps -= 1\n        count +=1\n        if i+1<steps and (i+2)%2==0:\n            steps = min_Jumps(steps, i+1)\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump = 0\n    cur = 0\n    if steps == 0:\n        return 0\n    while cur < d:\n        if cur + 1 < d:\n            jump += 1\n            cur += 1\n        else:\n            return -1\n    return jump\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    assert steps <= len(d)\n    if len(d) == 0:\n        return 0\n    if d[0] == 0:\n        return 0\n    if d[-1] == len(d) - 1:\n        return 1\n    if d[0] == len(d) - 1:\n        return 1\n    if len(d) == 1:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #create a matrix to store the number of jumps required for each position\n    #matrix[i][j] = number of jumps from position (0, 0) to position (i, j) \n    #create a dp array of size (m+1, n+1) to store the optimal solution for each position\n    #dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    '''\n    We can try to solve this in 2 ways:\n    1. With the help of a tree, we can also recursively get to the end.\n    2. With the help of a map, we can also reach the end.\n    '''\n    '''\n    Basically, we can get to any point on the x-axis by taking 1 or 2 steps.\n    The same holds on y-axis.\n    To reach a point, we can always take 1 step to reach it, or 2 steps.\n    '''\n    if len(steps) == 0:\n        return 0\n    if len(steps) == 1:\n        return abs(steps[0])\n    if len(steps) == 2:\n        return abs(steps[1]) + min(abs(steps[0]), abs(steps[0] - d), abs(steps[0] + d))\n    n = len(steps)\n    # store in the map to check for the already computed results\n    mp = {}\n    # try to reach the end by recursively getting to the end\n    return min_Jumps(steps[n-1:], d) + min(abs(steps[n-1]), abs(steps[n-1] - d), abs(steps[n-1] + d))\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 0\n    if steps == 1: return d\n    if d == 0: return 0\n    if d == 1: return 1\n    if d == 2: return 2\n    if d == 3: return 3\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    \n    def isSafe(x, y, n, m):\n        return (x >= 0) and (x < n) and (y >= 0) and (y < m)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # We can extend the original code here to take 2d coordinates as input and calculate the solution\n    # return min_Jumps(steps, d)\n    # Since we are using a simple recursive algorithm, we cannot solve this problem for length of 1\n    if len(steps) == 1:\n        return 0\n    # Since we know we can reach (d, 0), we can reduce the problem to a simple case\n    elif steps[0] == 0:\n        return 1\n    # We can only reach (d, 0) by jumping to (d-1, 0) and then jumping to (d-2, 0) or jumping to (d-3, 0)\n    elif steps[0] == 1:\n        return min_Jumps(steps[1:], d) + 1\n    # Otherwise, we can reach (d, 0) by jumping to (d-2, 0)\n    else:\n        return min_Jumps(steps[1:], d) + 1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert(isinstance(nums1, list) and isinstance(nums2, list)), \"Inputs must be lists\"\n    return [x/y for x,y in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert isinstance(nums1,list)\n    assert isinstance(nums2,list)\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst=[]\n    for i in range(len(nums1)):\n        lst.append(nums1[i]/nums2[i])\n    return lst\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n = len(nums1)\n    if n!= len(nums2):\n        return False\n    else:\n        for i in xrange(n):\n            nums1[i] = nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst=[]\n    for i,j in zip(nums1,nums2):\n        lst.append(i/j)\n    return lst\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return []\n    res = [0]*len(nums1)\n    for i in range(len(nums1)):\n        res[i] = nums1[i]/nums2[i]\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            numbers.append(test_str[i])\n    numbers.sort()\n    ret = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            ret.append(numbers.pop())\n        else:\n            ret.append(test_str[i])\n    return ''.join(ret)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([s for s in test_str if not s.isdigit()]) + ''.join([s for s in test_str if s.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # move all the numbers to the end of the string\n    return ''.join([str(x) for x in test_str if not x.isdigit()]) + ''.join([str(x) for x in test_str if x.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return re.sub(r'(\\d+)',r'\\1'+'$',test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) == 0:\n        return ''\n    else:\n        num = []\n        i = 0\n        while i < len(test_str):\n            if test_str[i].isdigit():\n                num.append(test_str[i])\n            i += 1\n        for i in range(len(test_str)):\n            if test_str[i].isdigit():\n                test_str = test_str[:i] + num[-1] + test_str[i+1:]\n                num.pop()\n        return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(list(filter(lambda x: not x.isdigit(), test_str))) + ''.join(list(filter(lambda x: x.isdigit(), test_str)))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #test_str = 'hello123world'\n    \n    count = 0\n    for c in test_str:\n        if c.isdigit():\n            count += 1\n    #return test_str[count:] + test_str[:count]\n    print test_str[count:] + test_str[:count]\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    import re\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for letter in test_str:\n        if letter.isdigit():\n            num_list.append(letter)\n    for num in num_list:\n        test_str = test_str.replace(num, \"\")\n    test_str = test_str + ''.join(num_list)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str is None:\n        return None\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    if len(a) == 1:\n        return 1\n    n = len(a)\n    A = [0]*n\n    A[0] = 1\n    m = 0\n    for i in range(1,n):\n        if a[i] % a[i-1] == 0:\n            A[i] = A[i-1] + 1\n            if A[i] > m:\n                m = A[i]\n    return m\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return a[0]\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = [1]*len(a)\n    for i in range(len(a)):\n        if a[i]%2==0:\n            result[i] += result[a[i]//2]\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) <= 1:\n        return a\n    subset = [a[0]]\n    for i in range(1, len(a)):\n        if a[i]%a[0] == 0:\n            subset.append(a[i])\n    return subset\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def subset_size(s, e, candidate_size):\n        if e < len(s) and candidate_size > len(s):\n            return 0\n        if e < len(s):\n            return s[e] + subset_size(s, e+1, candidate_size)\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = 0\n    result = []\n    for i in range(len(a)-1):\n        if a[i]%a[i+1] == 0:\n            result.append(a[i+1])\n            size+=1\n    if a[-1]%a[0] == 0:\n        result.append(a[0])\n        size+=1\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    s = {a[0]: 1}\n    ret = 1\n    for x in a[1:]:\n        if x % 2 == 0:\n            s[x] = 1\n        elif x % 3 == 0:\n            s[x] = 2\n        elif x % 5 == 0:\n            s[x] = 3\n        else:\n            ret += 1\n            s[x] = max(s.get(x // 2, 0), s.get(x // 3, 0), s.get(x // 5, 0)) + 1\n    return max(ret, max(s.values()))\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return a[0]\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return a[0]\n    max_val = a[0]\n    for i in range(1, len(a)):\n        max_val = max(max_val, a[i])\n        if a[i] % max_val == 0:\n            return max_val\n    return max_val\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    pairs = {}\n    for i in xrange(len(a)):\n        pairs[a[i]] = pairs.get(a[i], 0) + 1\n    keys = pairs.keys()\n    if len(keys) == 1:\n        return 1\n    div = {}\n    for i in keys:\n        if pairs[i] == 1:\n            div[i] = 1\n    if len(div) == 0:\n        return 0\n    m = 0\n    for i in div:\n        m += div[i]\n    return m\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n    else:\n        mid = (n - 1) / 2\n        return get_median(arr1[:mid], arr2[:mid], mid)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    elif n == 2:\n        return (min(arr1[0], arr2[0]) + max(arr1[1], arr2[1])) / 2.0\n    else:\n        if (n%2) == 0:\n            return get_median(arr1, arr2, n/2)\n        else:\n            return get_median(arr1, arr2, (n-1)/2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    if n%2 == 0:\n        median = (arr1[n/2-1] + arr1[n/2])/2\n    else:\n        median = arr1[n/2]\n    \n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n1 = n/2\n    n2 = n/2\n    \n    arr1.sort()\n    arr2.sort()\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the middle element\n    mid1 = int(n/2)\n    mid2 = (n + 1) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    #print(\"In the get median function\")\n    #print(\"List1 length:\", n)\n    #print(\"List2 length:\", len(arr2))\n    #print(\"n/2:\", n/2)\n    #print(\"n/2 - 1:\", n/2 - 1)\n    if n%2 == 1:\n        #print(\"Odd\")\n        #print(\"Median is:\", arr1[n/2])\n        return arr1[n/2]\n    elif n%2 == 0:\n        #print(\"Even\")\n        #print(\"Median is:\", (arr1[n/2] + arr2[n/2-1]) / 2)\n        return (arr1[n/2] + arr2[n/2-1]) / 2\n    else:\n        #print(\"error\")\n        return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 1:\n        return arr1[int((n-1)/2)]\n    else:\n        return (arr1[int((n-2)/2)]+arr1[int((n-1)/2)])/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0] + arr1[1])/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    if n == 2:\n        return (arr1[0] + arr2[1])/2\n    if n % 2 == 0:\n        return get_median(arr1[n//2:], arr2[:(n//2)], n//2)\n    else:\n        return get_median(arr1[:(n//2)], arr2[n//2:], n//2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2))/2\n    else:\n        return get_median(arr1, arr2, (n-1)/2)\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1:\n        return nums\n    else:\n        return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    new_nums = []\n    for i in nums:\n        new_nums.append(i**n)\n    return new_nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert n>=0\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==0:\n        return 1\n    if n<0:\n        return -1\n    return nums[n-1]**n\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # pythonic way\n    return [x**n for x in nums]\n    # or\n    return [int(x)**n for x in nums]\n    # or\n    return map(lambda x:int(x)**n,nums)\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return nums\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    powered_numbers = []\n    for num in nums:\n        powered_numbers.append(num ** n)\n    return powered_numbers\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ans = []\n    for num in nums:\n        ans.append(num ** n)\n    return ans\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if nums==[] or n<=0:\n        return []\n    if n==1:\n        return nums\n    else:\n        return [n*x for x in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #return string.upper()\n    return string.swapcase()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in range(len(string)):\n        if string[i].isupper():\n            print string[i]\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #return string.upper()\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_str = ''\n    for letter in string:\n        if letter == letter.upper():\n            new_str += letter\n    return new_str\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n    elif len(newList) == 1:\n        return newList\n    else:\n        return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n    \n    \ndef reverse_list(newList):\n    '''\n    Write a python function to reverse the elements of a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList[::-1]\n    \n    \ndef rotate_list(newList,k):\n    '''\n    Write a python function to rotate a list by a given number of elements.\n    '''\n    temp = newList[0]\n    for i in range(k):\n        newList.insert(0,temp)\n        del newList[len(newList)-1]\n    return newList\n    \n    \ndef sum_all_items(newList):\n    '''\n    Write a python function to sum all the items in a list.\n    '''\n    return sum(newList)\n    \n    \ndef reverse_and_sum_list(newList):\n    '''\n    Write a python function to reverse a list, add 1 to every item in the reversed list, and then sum all the items in the new list.\n    '''\n    newList.reverse()\n    for i in range(len(newList)):\n        newList[i] += 1\n    return sum(newList)\n    \n    \ndef find_max_and_min_of_three(newList):\n    '''\n    Write a python function to find the maximum and minimum of three numbers.\n    '''\n    return max(newList), min(newList)\n    \n    \ndef find_max_and_min_of_three2(newList):\n    '''\n    Write a python function to find the maximum and minimum of three numbers.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return max(newList), min(newList)\n    \n    \ndef find_max_and_min_of_three3(newList):\n    '''\n    Write a python function to find the maximum and minimum of three numbers.\n    '''\n    return newList[0], newList[len(newList)-1]\n    \n    \ndef merge_two_sorted_lists(newList1,newList2):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    index1 = 0\n    index2 = 0\n    length1 = len(newList1)\n    length2 = len(newList2)\n    while index1 < length1 and index2 < length2:\n        if newList1[index1] < newList2[index2]:\n            index1 += 1\n        elif newList1[index1] > newList2[index2]:\n            index2 += 1\n        else:\n            newList1.insert(index1,newList2[index2])\n            index2 += 1\n            index1 += 1\n    return newList1\n    \n    \ndef merge_two_sorted_lists2(newList1,newList2):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    index1 = 0\n    index2 = 0\n    length1 = len(newList1)\n    length2 = len(newList2)\n    newList = []\n    while index1 < length1 and index2 < length2:\n        if newList1[index1] < newList2[index2]:\n            newList.append(newList1[index1])\n            index1 += 1\n        elif newList1[index1] > newList2[index2]:\n            newList.append(newList2[index2])\n            index2 += 1\n        else:\n            newList.append(newList1[index1])\n            index1 += 1\n            newList.append(newList2[index2])\n            index2 += 1\n    if index1 == length1:\n        newList += newList2[index2:]\n    else:\n        newList += newList1[index1:]\n    return newList\n    \n    \ndef merge_two_sorted_lists3(newList1,newList2):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    index1 = 0\n    index2 = 0\n    length1 = len(newList1)\n    length2 = len(newList2)\n    newList = []\n    while index1 < length1 and index2 < length2:\n        if newList1[index1] < newList2[index2]:\n            newList.append(newList1[index1])\n            index1 += 1\n        elif newList1[index1] > newList2[index2]:\n            newList.append(newList2[index2])\n            index2 += 1\n        else:\n            newList.append(newList1[index1])\n            index1 += 1\n            newList.append(newList2[index2])\n            index2 += 1\n    if index1 == length1:\n        newList += newList2[index2:]\n    else:\n        newList += newList1[index1:]\n    return newList\n    \n    \ndef merge_sort(newList):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if len(newList) <= 1:\n        return newList\n    mid = len(newList)//2\n    left = newList[:mid]\n    right = newList[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left,right)\n    \n    \ndef merge(left,right):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            result.append(left[0])\n            del left[0]\n        else:\n            result.append(right[0])\n            del right[0]\n    if len(left) > 0:\n        result += left\n    else:\n        result += right\n    return result\n    \n    \ndef quick_sort(newList):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if len(newList) <= 1:\n        return newList\n    pivot = newList[0]\n    smaller = []\n    larger = []\n    for i in range(1,len(newList)):\n        if newList[i] < pivot:\n            smaller.append(newList[i])\n        else:\n            larger.append(newList[i])\n    smaller = quick_sort(smaller)\n    larger = quick_sort(larger)\n    return smaller + [pivot] + larger\n    \n    \ndef binary_search(newList,value):\n    '''\n    Write a python function to search a value in a sorted list.\n    '''\n    start = 0\n    end = len(newList)-1\n    while start <= end:\n        mid = (start + end)//2\n        if newList[mid] == value:\n            return mid\n        elif newList[mid] < value:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \n    \ndef binary_search2(newList,value):\n    '''\n    Write a python function to search a value in a sorted list.\n    '''\n    start = 0\n    end = len(newList)-1\n    while start <= end:\n        mid = (start + end)//2\n        if newList[mid] == value:\n            return mid\n        elif newList[mid] < value:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \n    \ndef remove_element_from_list(newList,value):\n    '''\n    Write a python function to remove a value in a sorted list.\n    '''\n    start = 0\n    end = len(newList)-1\n    while start <= end:\n        mid = (start + end)//2\n        if newLis"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList.remove(first_element)\n    newList.remove(last_element)\n    newList.insert(0,last_element)\n    newList.append(first_element)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList[0], newList[-1] = newList[-1], newList[0] \n    \n    return newList\n    \n    \ndef swap_List_2(newList):\n    '''\n    Write a python function to swap the first element with the last element in a list.\n    '''\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    temp = newList[0]\n    newList[0] = newList[n-1]\n    newList[n-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList[0] = newList[-1]\n    newList[-1] = newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    x = newList[0]\n    y = newList[len(newList)-1]\n    newList[0] = y\n    newList[len(newList)-1] = x\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #for i in range(len(newList)):\n    #    if i==0:\n    #        newList[i]=newList[len(newList)-1]\n    #        newList[len(newList)-1]=newList[i]\n    #    if i==len(newList)-1:\n    #        newList[i]=newList[0]\n    #        newList[0]=newList[i]\n    #return newList\n    newList[:]=newList[::-1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList) \n    temp = newList[0] \n    newList[0] = newList[n-1] \n    newList[n-1] = temp \n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r <= 0) :\n        return None\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    def triangle_area(r) :  \n    \n        if r > 0 :  \n            return r**2*pi\n        else :  \n            return 0\n    return triangle_area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3.14159265358979323846264338327950288*(r**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    area = math.pi * (r**2) / 4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a=r*r*3.14159\n    return a\n    \n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3.14*(r*r)  \n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0 :\n        raise ValueError, 'radius must be non-negative'\n    else :\n        area = 0.5 * r**2\n        return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3*math.sqrt(2*r)*(math.pi**2)**(-1/2))/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 0.5*r*r\n    \n    \ndef serendipity(n) :  \n    '''\n    Write a python function to check whether a given number n is serendipity or not.\n    '''\n    return False\n    \n    \ndef int_and_round(n) :  \n    '''\n    Write a python function to check whether a given number n is integer and round or not.\n    '''\n    return True\n    \n    \ndef find_subset(a,n) :  \n    '''\n    Write a python function to find all the subset of length n from a given array a.\n    '''\n    return []\n    \n    \ndef find_subset_recursive(a,n) :  \n    '''\n    Write a python function to find all the subset of length n from a given array a, recursively.\n    '''\n    return []\n    \n    \ndef find_subset_memo(a,n) :  \n    '''\n    Write a python function to find all the subset of length n from a given array a, using memoization.\n    '''\n    return []\n    \n    \ndef find_subset_iterative(a,n) :  \n    '''\n    Write a python function to find all the subset of length n from a given array a, using iteration.\n    '''\n    return []\n    \n    \ndef find_subset_tabulation(a,n) :  \n    '''\n    Write a python function to find all the subset of length n from a given array a, using tabulation.\n    '''\n    return []\n    \n    \ndef find_subset_dp(a,n) :  \n    '''\n    Write a python function to find all the subset of length n from a given array a, using dynamic programming.\n    '''\n    return []\n    \n    \ndef power_set(n) :  \n    '''\n    Write a python function to find all the power set of length n from a given array a.\n    '''\n    return []\n    \n    \ndef permutation(n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a.\n    '''\n    return []\n    \n    \ndef find_permutation(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using iteration.\n    '''\n    return []\n    \n    \ndef find_permutation_recursive(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using recursion.\n    '''\n    return []\n    \n    \ndef find_permutation_memo(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using memoization.\n    '''\n    return []\n    \n    \ndef find_permutation_iterative(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using iteration.\n    '''\n    return []\n    \n    \ndef find_permutation_tabulation(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using tabulation.\n    '''\n    return []\n    \n    \ndef find_permutation_dp(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using dynamic programming.\n    '''\n    return []\n    \n    \ndef find_permutation_tabulation_backtrack(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using tabulation, using backtracking.\n    '''\n    return []\n    \n    \ndef find_permutation_tabulation_recursive(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using tabulation, using recursion.\n    '''\n    return []\n    \n    \ndef find_permutation_tabulation_memo(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using tabulation, using memoization.\n    '''\n    return []\n    \n    \ndef find_permutation_tabulation_iterative(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using tabulation, using iteration.\n    '''\n    return []\n    \n    \ndef find_permutation_tabulation_dp(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using tabulation, using dynamic programming.\n    '''\n    return []\n    \n    \ndef find_permutation_tabulation_recursive(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using tabulation, using recursion.\n    '''\n    return []\n    \n    \ndef find_permutation_tabulation_iterative(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using tabulation, using iteration.\n    '''\n    return []\n    \n    \ndef find_permutation_recursive(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using recursion.\n    '''\n    return []\n    \n    \ndef find_permutation_recursive_backtrack(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using recursion, using backtracking.\n    '''\n    return []\n    \n    \ndef find_permutation_recursive_memo(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using recursion, using memoization.\n    '''\n    return []\n    \n    \ndef find_permutation_recursive_iterative(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using recursion, using iteration.\n    '''\n    return []\n    \n    \ndef find_permutation_recursive_iterative_backtrack(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using recursion, using iteration, using backtracking.\n    '''\n    return []\n    \n    \ndef find_permutation_recursive_iterative_memo(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using recursion, using iteration, using memoization.\n    '''\n    return []\n    \n    \ndef find_permutation_iterative(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using iteration.\n    '''\n    return []\n    \n    \ndef find_permutation_iterative_backtrack(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using iteration, using backtracking.\n    '''\n    return []\n    \n    \ndef find_permutation_iterative_memo(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using iteration, using memoization.\n    '''\n    return []\n    \n    \ndef find_permutation_iterative_iterative(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using iteration, using iteration.\n    '''\n    return []\n    \n    \ndef find_permutation_iterative_recursive(a,n) :  \n    '''\n    Write a python function to find all the permutation of length n from a given array a, using iteration, using recursion.\n    '''\n    return []"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = math.pi*r*r/2\n    return a\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    \n    if start==end:\n        return start\n    \n    if array[start]==start:\n        return start\n    \n    if array[end]==end:\n        return end\n    \n    mid=(start+end)//2\n    \n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    \n    return find_First_Missing(array,start,mid)\n    \n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start==end:\n        return start\n    mid=(start+end)/2\n    #print start,mid,end\n    if mid>0 and array[mid-1]==array[mid]:\n        return find_First_Missing(array,start,mid)\n    elif mid<len(array)-1 and array[mid+1]==array[mid]:\n        return find_First_Missing(array,mid,end)\n    else:\n        if array[mid]>array[start]:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start>end:\n        return None\n    else:\n        mid = start+((end-start)/2)\n        if array[mid] == mid:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            if array[mid]==mid+1:\n                return find_First_Missing(array,mid+1,end)\n            else:\n                return mid\ndef smallest_Missing_Pos(array):\n    '''\n    Write a python function to find the smallest missing positive number from a sorted list of natural numbers.\n    '''\n    start = 1\n    end = len(array)-1\n    while start<=end:\n        mid = start+(end-start)/2\n        if array[mid] == mid:\n            start = mid+1\n        else:\n            if array[mid] > mid:\n                end = mid-1\n            else:\n                start = mid+1\n    return start\ndef find_First_Missing_Pos(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing positive number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start>end:\n        return None\n    else:\n        mid = start+((end-start)/2)\n        if array[mid] == mid:\n            return find_First_Missing_Pos(array,start,mid-1)\n        else:\n            if array[mid]==mid+1:\n                return find_First_Missing_Pos(array,mid+1,end)\n            else:\n                return mid\ndef right_rotate(array,d):\n    '''\n    Write a python function to right rotate an array d times.\n    '''\n    return array[d:]+array[:d]\ndef find_First_Kth_smallest(array,k,start=0,end=None):\n    '''\n    Write a python function to find the first kth smallest number in a sorted array of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start>end:\n        return None\n    else:\n        mid = start+((end-start)/2)\n        if k == mid:\n            return array[mid]\n        elif k<mid:\n            return find_First_Kth_smallest(array,k,start,mid-1)\n        else:\n            return find_First_Kth_smallest(array,k,mid+1,end)\ndef find_First_Kth_smallest_pos(array,k,start=0,end=None):\n    '''\n    Write a python function to find the first kth smallest positive number in a sorted array of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start>end:\n        return None\n    else:\n        mid = start+((end-start)/2)\n        if array[mid] == mid:\n            return find_First_Kth_smallest_pos(array,k,start,mid-1)\n        else:\n            if array[mid]>mid:\n                return find_First_Kth_smallest_pos(array,k,start,mid-1)\n            else:\n                return find_First_Kth_smallest_pos(array,k,mid+1,end)\ndef find_Sum_of_minimum(array,start=0,end=None):\n    '''\n    Write a python function to find the sum of the minimum elements in a sorted array of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start>end:\n        return None\n    else:\n        mid = start+((end-start)/2)\n        if array[mid] == mid:\n            return find_Sum_of_minimum(array,start,mid-1)\n        else:\n            if array[mid] > mid:\n                return find_Sum_of_minimum(array,start,mid-1)\n            else:\n                return find_Sum_of_minimum(array,mid+1,end)\ndef find_Sum_of_minimum_pos(array,start=0,end=None):\n    '''\n    Write a python function to find the sum of the minimum elements in a sorted array of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start>end:\n        return None\n    else:\n        mid = start+((end-start)/2)\n        if array[mid] == mid:\n            return find_Sum_of_minimum_pos(array,start,mid-1)\n        else:\n            if array[mid] > mid:\n                return find_Sum_of_minimum_pos(array,start,mid-1)\n            else:\n                return find_Sum_of_minimum_pos(array,mid+1,end)\ndef maximum_sum_contiguous_subarray(array):\n    '''\n    Write a python function to find the maximum sum of contiguous subarray in an array.\n    '''\n    if len(array)==1:\n        return array[0]\n    else:\n        subarray_1 = maximum_sum_contiguous_subarray(array[1:])\n        subarray_2 = array[0]\n        if subarray_1 > subarray_2:\n            return subarray_1\n        else:\n            return subarray_2\ndef find_Maximum_sum_contiguous_subarray(array):\n    '''\n    Write a python function to find the maximum sum of contiguous subarray in an array.\n    '''\n    if len(array)==1:\n        return array[0]\n    else:\n        subarray_1 = find_Maximum_sum_contiguous_subarray(array[1:])\n        subarray_2 = array[0]\n        if subarray_1 > subarray_2:\n            return subarray_1\n        else:\n            return subarray_2\ndef reverse_string(array):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(array)==1:\n        return array\n    else:\n        return array[-1]+reverse_string(array[:-1])\ndef first_and_last_occurrence(array,element):\n    '''\n    Write a python function to find the first and last occurrence of an element in a sorted array of natural numbers.\n    '''\n    start = 0\n    end = len(array)-1\n    while start<=end:\n        mid = start+((end-start)/2)\n        if array[mid] == element:\n            if mid == 0 or array[mid-1]!=element:\n                return mid\n            else:\n                end = mid-1\n        elif array[mid] > element:\n            end = mid-1\n        else:\n            start = mid+1\n    return None\ndef binary_search(array,element):\n    '''\n    Write a python function to search an element in a sorted array of natural numbers.\n    '''\n    start = 0\n    end = len(array)-1\n    while start<=end:\n        mid = start+((end-start)/2)\n        if array[mid] == element:\n            return mid\n        elif array[mid] > element:\n            end = mid-1\n        else:\n            start = mid+1\n    return None\ndef find_Maximum_occurrence(array,element):\n    '''\n    Write a python function to find the maximum occurrence of an element in a sorted array of natural numbers.\n    '''\n    start = 0\n    end = len(array)-1\n    count = 0\n    while start<=end:\n        mid = start+((end-start)/2)\n        if array[mid] == element:\n            count+=1\n            if count > 1:\n                return None\n        elif array[mid] > element:\n            end = mid-1\n        else:\n            start = mid+1\n    return count\ndef find_Minimum_occurrence(array,element):\n    '''\n    Write a python function to find the minimum occurrence of an element in a sorted array of natural numbers.\n    '''\n    start = 0\n    end = len(array)-1\n    count = 0\n    while start<=end:\n        mid = start+((end-star"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>=end:\n        return start\n    middle=(end+start)//2\n    if array[middle]==middle:\n        return find_First_Missing(array,middle+1,end)\n    else:\n        return find_First_Missing(array,start,middle-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)-1\n    if start == end:\n        return array[start]\n    mid = (start+end)/2\n    if array[mid] - array[start] == 0:\n        if array[mid] - array[mid+1] == 1:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n    else:\n        if array[mid] - array[start] == 1:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if array[start]!= start:\n        return array[start]\n    if array[end]!= end+1:\n        return array[end] + 1\n    return find_First_Missing(array,start+1,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end <= start:\n        return None\n    if array[end-1] == end:\n        return end\n    mid = (start + end) // 2\n    if array[mid] - mid - 1 == end - mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return start\n    mid = int((start+end)/2)\n    if array[mid]!= mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if end<start:\n        return start+1\n    if array[start]!=start:\n        return start\n    if array[end]!=end+1:\n        return end+1\n    return find_First_Missing(array,start+1,end-1)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split())\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = ''\n    for char in string:\n        if char =='':\n            result += '%20'\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = []\n    for item in list:\n        if item % 2 == 0:\n            list_even.append(item)\n    return list_even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for x in list:\n        if x % 2 == 0:\n            even.append(x)\n    return even\n    "
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for item in list:\n        if item % 2 == 0:\n            even.append(item)\n        else:\n            odd.append(item)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = [i for i in list if i%2 == 0]\n    return list1\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2 == 0:\n            even_numbers.append(i)\n    print(even_numbers)\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    a = [i for i in list if i % 2 == 0] \n    return a \n    \n    \n    \n    \n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x%2 == 0]\n    \ndef vowel_count(str):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return len([x for x in str.lower() if x in 'aeiou'])\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\n    \ndef check_permutation(str1, str2):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    return sorted(str1.lower()) == sorted(str2.lower())\n    \ndef palindrome(str):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return str[::-1] == str\n    \ndef factorial(num):\n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    return 1 if num < 2 else num * factorial(num-1)\n    \ndef count_digits(str):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str) - str.count(' ')\n    \ndef count_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return len([x for x in str.lower() if x in 'aeiou'])\n    \ndef remove_string(str1, str2):\n    '''\n    Write a python function to remove characters from a string.\n    '''\n    return ''.join([x for x in str1.lower() if x not in str2.lower()])\n    \ndef common_letters(str1, str2):\n    '''\n    Write a python function to find the common letters in two strings.\n    '''\n    return sorted([x for x in str1.lower() if x in str2.lower()])\n    \ndef rotate_characters(str1, n):\n    '''\n    Write a python function to rotate characters of a string.\n    '''\n    return ''.join([str1[(n+i)%len(str1)] for i in range(0, len(str1))])\n    \ndef find_missing_letter(str1, str2):\n    '''\n    Write a python function to find the missing letter in a string.\n    '''\n    return sorted([x for x in 'abcdefghijklmnopqrstuvwxyz' if x not in str1.lower() and x not in str2.lower()])\n    \ndef find_anagrams(str1, str2):\n    '''\n    Write a python function to find the anagrams in a string.\n    '''\n    return sorted([x for x in str1.lower() if sorted([x for x in str1.lower() if x in 'abcdefghijklmnopqrstuvwxyz']) == sorted([x for x in str2.lower() if x in 'abcdefghijklmnopqrstuvwxyz'])])\n    \ndef change_letters(str1, old, new):\n    '''\n    Write a python function to change all the letters in a string to new letters.\n    '''\n    return str1.replace(old, new)\n    \ndef convert_to_lower(str1):\n    '''\n    Write a python function to convert a string to lower case.\n    '''\n    return str1.lower()\n    \ndef convert_to_upper(str1):\n    '''\n    Write a python function to convert a string to upper case.\n    '''\n    return str1.upper()\n    \ndef find_digits(str1):\n    '''\n    Write a python function to find the digits in a string.\n    '''\n    return [x for x in str1 if x in '0123456789']\n    \ndef find_vowels(str1):\n    '''\n    Write a python function to find the vowels in a string.\n    '''\n    return [x for x in str1.lower() if x in 'aeiou']\n    \ndef alternate_letters(str1):\n    '''\n    Write a python function to find alternate letters in a string.\n    '''\n    return ''.join([x for x, y in zip(str1[1::2], str1[0::2])])\n    \ndef word_length(str1):\n    '''\n    Write a python function to count the length of a word in a string.\n    '''\n    return len(str1.split())\n    \ndef reverse(str1):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef find_letter_position(str1):\n    '''\n    Write a python function to find the position of a letter in a string.\n    '''\n    return [str1.index(x) for x in str1.lower() if x in 'abcdefghijklmnopqrstuvwxyz']\n    \ndef reverse_words_in_a_string(str1):\n    '''\n    Write a python function to reverse words in a string.\n    '''\n    return''.join([x[::-1] for x in str1.split(' ')])\n    \ndef remove_punctuation(str1):\n    '''\n    Write a python function to remove punctuation from a string.\n    '''\n    return ''.join([x for x in str1 if x not in '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'])\n    \ndef find_word_length(str1):\n    '''\n    Write a python function to find the length of the longest word in a string.\n    '''\n    return len(max([x for x in str1.split()], key=len))\n    \ndef reverse_string(str1):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef swap_string(str1, a, b):\n    '''\n    Write a python function to swap the characters at positions a and b in a string.\n    '''\n    return str1[:a] + str1[b] + str1[a+1:b] + str1[a] + str1[b+1:]\n    \ndef concatenate_strings(str1, str2):\n    '''\n    Write a python function to concatenate two strings.\n    '''\n    return str1 + str2\n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    return all([num%i for i in range(2, int(num**0.5)+1)])\n    \ndef circular_prime(num):\n    '''\n    Write a python function to check whether a number is circular prime or not.\n    '''\n    return all([num%i for i in range(2, int(num**0.5)+1)]) and all([num%x for x in range(2, num)])\n    \ndef char_histogram(str1):\n    '''\n    Write a python function to count the number of times a character occurs in a string.\n    '''\n    dic = {}\n    for x in str1:\n        if x not in dic:\n            dic[x] = 0\n        dic[x] += 1\n    return dic\n    \ndef find_anagrams(str1, str2):\n    '''\n    Write a python function to find the anagrams in a string.\n    '''\n    return sorted([x for x in str1.lower() if sorted([x for x in str1.lower() if x in 'abcdefghijklmnopqrstuvwxyz']) == sorted([x for x in str2.lower() if x in 'abcdefghijklmnopqrstuvwxyz'])])\n    \ndef only_vowels(str1):\n    '''\n    Write a python function to remove all the consonants from a string.\n    '''\n    return ''.join([x fo"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    evens = []\n    for number in list:\n        if number % 2 == 0:\n            evens.append(number)\n    return evens\n    \ndef Multiplication():\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    a = int(input('Enter 1st number: '))\n    b = int(input('Enter 2nd number: '))\n    c = int(input('Enter 3rd number: '))\n    if a > b:\n        if a > c:\n            print('1st number is the largest')\n        else:\n            print('3rd number is the largest')\n    else:\n        if b > c:\n            print('2nd number is the largest')\n        else:\n            print('3rd number is the largest')\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # List of even numbers\n    even = []\n    # List of odd numbers\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    # empty list\n    evenList = []\n    \n    # loop through the list\n    for i in list:\n        \n        # condition to check for even number\n        if i%2 == 0:\n            evenList.append(i)\n            \n    # return list\n    return evenList\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not isinstance(ele, tuple):\n        raise TypeError('Must pass tuple as argument')\n    if len(ele)!= 2:\n        raise ValueError('Tuple must have 2 elements')\n    if len(sub) > 0:\n        if not isinstance(sub, list):\n            raise TypeError('Must pass list as argument')\n        if len(sub) == 2:\n            raise ValueError('List must have 3 elements')\n    x = list(ele)\n    #print(x)\n    x[0] = x[0] + 1\n    x[1] = x[1] + 1\n    if len(sub) > 0:\n        sub.append(tuple(x))\n        return sub\n    else:\n        return tuple(x)\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [tuple(map(operator.add, ele, s)) for s in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + a, ele[1] + b) for a, b in [(0, 1), (0, -1), (1, 0), (-1, 0)] if (a, b)!= (0, 0)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == ():\n        return sub\n    else:\n        return adjac(ele[1:], sub + [ele[:1]+ele[1:]])\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 3:\n        x,y,z = ele\n        return [(x-1,y,z), (x+1,y,z), (x,y-1,z), (x,y+1,z), (x,y,z-1), (x,y,z+1)]\n    elif len(ele) == 2:\n        x,y = ele\n        return [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n    else:\n        return []\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # your code here\n    return [ (x,y) for x,y in zip(ele, sub) ]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # start = time.time()\n    lst = [(ele[0] - 1, ele[1]), (ele[0] + 1, ele[1]), (ele[0], ele[1] - 1), (ele[0], ele[1] + 1)]\n    \n    return [(x, y) for x, y in lst if 0 <= x < grid_size[0] and 0 <= y < grid_size[1]]\n    \ndef mst(adjacent, grid):\n    '''\n    Write a function to find the minimum spanning tree of a given grid using Prim's algorithm.\n    '''\n    # start = time.time()\n    # print'start'\n    visited = []\n    edges = []\n    # print adjacent\n    # print grid[0]\n    for i in adjacent:\n        if i not in visited:\n            # print i, adjacent[i]\n            visited.append(i)\n            for j in adjacent[i]:\n                if j not in visited:\n                    edges.append([i, j, adjacent[i][j]])\n    # print edges\n    # print visited\n    return edges\n    \ndef make_mst_set(edges, grid):\n    '''\n    Write a function to find the minimum spanning tree of a given grid using Prim's algorithm.\n    '''\n    # start = time.time()\n    # print'start'\n    visited = []\n    mst_set = set()\n    for edge in edges:\n        if edge[0] not in visited:\n            # print edge\n            visited.append(edge[0])\n            mst_set.add(edge[0])\n            # mst_set.add(edge[1])\n        if edge[1] not in visited:\n            # print edge\n            visited.append(edge[1])\n            mst_set.add(edge[1])\n            # mst_set.add(edge[0])\n    # print mst_set\n    return mst_set\n    \ndef extract_mst_set(mst_set, grid):\n    '''\n    Write a function to extract the mst set from the mst edges.\n    '''\n    # start = time.time()\n    # print'start'\n    mst_edge = []\n    for i in mst_set:\n        # print i,\n        mst_edge.append(grid[i[0]][i[1]])\n    # print mst_edge\n    return mst_edge\n    \ndef fst(mst_edge):\n    '''\n    Write a function to find the first and last element of the given mst set.\n    '''\n    # start = time.time()\n    # print'start'\n    # print mst_edge\n    first_ele = mst_edge[0]\n    last_ele = mst_edge[-1]\n    # print first_ele, last_ele\n    return first_ele, last_ele\n    \ndef lst(mst_edge):\n    '''\n    Write a function to find the last element of the given mst set.\n    '''\n    # start = time.time()\n    # print'start'\n    # print mst_edge\n    # print mst_edge[-1]\n    return mst_edge[-1]\n    \ndef bfs_distance(first_ele, last_ele, grid):\n    '''\n    Write a function to find the breadth-first distance between the first and last element of the given mst set.\n    '''\n    # start = time.time()\n    # print'start'\n    q = [first_ele]\n    visited = set([first_ele])\n    queue = [(0, first_ele)]\n    distance = 0\n    # print queue\n    while q:\n        node = q.pop(0)\n        # print node\n        # print queue\n        for adjacent in adjac(node):\n            if adjacent not in visited:\n                # print adjacent\n                visited.add(adjacent)\n                # print visited\n                queue.append((grid[adjacent[0]][adjacent[1]], adjacent))\n                # print queue\n        if node == last_ele:\n            # print 'break'\n            break\n    # print queue\n    while queue:\n        distance += queue[0][0]\n        node = queue.pop(0)\n        # print node\n        # print queue\n        # print distance\n        for adjacent in adjac(node[1]):\n            if adjacent not in visited:\n                # print adjacent\n                visited.add(adjacent)\n                # print visited\n                queue.append((grid[adjacent[0]][adjacent[1]], adjacent))\n                # print queue\n    return distance\n    \ndef ucs_distance(first_ele, last_ele, grid):\n    '''\n    Write a function to find the uniform cost distance between the first and last element of the given mst set.\n    '''\n    # start = time.time()\n    # print'start'\n    q = [first_ele]\n    visited = set([first_ele])\n    queue = [(0, 0, first_ele)]\n    distance = 0\n    # print queue\n    while q:\n        node = q.pop(0)\n        # print node\n        # print queue\n        for adjacent in adjac(node):\n            if adjacent not in visited:\n                # print adjacent\n                visited.add(adjacent)\n                # print visited\n                queue.append((grid[adjacent[0]][adjacent[1]], node[0] + grid[adjacent[0]][adjacent[1]], adjacent))\n                # print queue\n        if node == last_ele:\n            # print 'break'\n            break\n    # print queue\n    while queue:\n        distance += queue[0][0]\n        node = queue.pop(0)\n        # print node\n        # print queue\n        # print distance\n        for adjacent in adjac(node[2]):\n            if adjacent not in visited:\n                # print adjacent\n                visited.add(adjacent)\n                # print visited\n                queue.append((grid[adjacent[0]][adjacent[1]], node[1] + grid[adjacent[0]][adjacent[1]], adjacent))\n                # print queue\n    return distance\n    \ndef astar_distance(first_ele, last_ele, grid):\n    '''\n    Write a function to find the uniform cost distance between the first and last element of the given mst set.\n    '''\n    # start = time.time()\n    # print'start'\n    q = [first_ele]\n    visited = set([first_ele])\n    queue = [(0, 0, 0, first_ele)]\n    distance = 0\n    # print queue\n    while q:\n        node = q.pop(0)\n        # print node\n        # print queue\n        for adjacent in adjac(node[3]):\n            if adjacent not in visited:\n                # print adjacent\n                visited.add(adjacent)\n                # print visited\n                queue.append((node[0] + grid[adjacent[0]][adjacent[1]], node[1] + grid[adjacent[0]][adjacent[1]], node[2] + grid[adjacent[0]][adjacent[1]], adjacent))\n                # print queue\n        if node[3] == last_ele:\n            # print 'break'\n            break\n    # print queue\n    while queue:\n        distance += queue[0][0]\n        node = queue.pop(0)\n        # print node\n        # print queue\n        # print distance\n        for adjacent in adjac(node[3]):\n            if adjacent not in visited:\n                # print adjacent\n                visited.add(adjacent)\n                # print visited\n                queue.append((node[0] + grid[adjacent[0]][adjacent[1]], node[1] + grid[adjacent[0]][adjacent[1]], node[2] + grid[adjacent[0]][adjacent[1]], adjacent))\n                # print queue\n    return distance\n    \nif __name__ == '__main__':\n    grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjac = []\n    for i in range(3):\n        if ele[i] == ele[i+1]:\n            adjac.append(ele[i])\n    adjac.sort()\n    return adjac\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [ele[0]+1, ele[1]-1, ele[0]+1, ele[1], ele[0], ele[1]+1]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not ele: return []\n    else: \n        if type(ele) == tuple:\n            sub = sub + [ele]\n            return [adj for ele in sub for adj in adjac(ele)]\n        elif type(ele) == list:\n            sub = sub + ele\n            return [adj for ele in sub for adj in adjac(ele)]\n        else: return []\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return ''\n    else:\n        res = []\n        for c in text:\n            if c.isspace():\n                res.append('_')\n            else:\n                res.append(c)\n        return ''.join(res)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    newText = text.replace(' ', '_')\n    newText = newText.replace('_','')\n    return newText\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.translate(str.maketrans(' ', '_',''))\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.translate(text.maketrans(' ','_'))\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # remove_spaces = text.replace(' ','')\n    # replace_spaces = remove_spaces.replace('_','')\n    # return replace_spaces\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    result = re.sub(r'[^A-Za-z]+', '_', text)\n    result = result.replace('_','')\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for num in num_list:\n        if num!= 0:\n            count = count + 1\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        for j in range(i+1,len(num_list)):\n            if num_list[i] == 0:\n                temp = num_list[i]\n                num_list[i] = num_list[j]\n                num_list[j] = temp\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index in num_list:\n        if index == 0:\n            num_list.remove(index)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            num_list[index], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[index]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) < 2:\n        return num_list\n    # Find zero and non-zero index\n    index_of_non_zero = 0\n    for index, num in enumerate(num_list):\n        if num!= 0:\n            index_of_non_zero = index\n            break\n    # Non-zero part\n    non_zero_part = num_list[index_of_non_zero:]\n    # Zero part\n    zero_part = num_list[:index_of_non_zero]\n    # Return result\n    return non_zero_part + zero_part\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # To move all zeroes to the end of the list, we have to use list comprehension.\n    return [x for x in num_list if x!=0] + [0 for x in num_list if x==0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, num in enumerate(num_list):\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(num)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #Write your code here\n    result = []\n    for num in num_list:\n        if num!= 0:\n            result.append(num)\n    for i in xrange(len(num_list) - len(result)):\n        result.append(0)\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in xrange(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[zero_index] = num_list[i]\n            zero_index += 1\n    for i in xrange(zero_index, len(num_list)):\n        num_list[i] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp = []\n    for each in num_list:\n        if each!= 0:\n            temp.append(each)\n    for each in num_list:\n        if each == 0:\n            temp.append(each)\n    return temp\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    output=0\n    for i in range(n) :\n        output=output+arr[i]\n    return output\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            sum+=arr[i]^arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Code here\n    return sum([arr[i]^arr[j] for i in range(n-1) for j in range(i+1,n)])\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0 \n    for i in range(n) : \n        for j in range(i+1,n) : \n            res = res + arr[i] ^ arr[j] \n    return res \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,len(arr)-1) :\n        for j in range(i+1,len(arr)) :\n            s += arr[i]^arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([x^y for x,y in zip(arr, arr[1:])])\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    i = 0\n    res = 0 \n    while i < len(arr) : \n        res += arr[i] ^ arr[i+1]\n        i += 2\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([arr[i]^arr[j] for i in range(n) for j in range(n) if i<j])\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #arr = [1,2,3,4,5,6,7,8]\n    #n = len(arr)\n    #for i in range(0,n):\n    #    for j in range(i+1,n):\n    #        print(\"{} ^ {} = {}\".format(arr[i],arr[j],arr[i]^arr[j]))\n    #print(\"The Sum of the xor is : \",end=\"\")\n    #return sum([arr[i]^arr[j] for i in range(0,n) for j in range(i+1,n)])\n    '''\n    Use XOR property to find the Sum\n    '''\n    return sum([arr[i]^arr[j] for i in range(n) for j in range(i+1,n)])\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return arr[0]\n    else : \n        return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    h = []\n    for x in iterable:\n        hq.heappush(h, x)\n    return [hq.heappop(h) for i in xrange(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in xrange(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for v in iterable:\n        hq.heappush(h, v)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h, val)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for elem in iterable:\n        hq.heappush(h, elem)\n    return [hq.heappop(h) for i in range(len(h))]\ndef bogo_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    s = set(iterable)\n    while len(s)!=len(iterable):\n        s = set(heap_sort(iterable))\n    return s\ndef radix_sort(iterable, base = 10):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [[] for i in range(base)]\n    for elem in iterable:\n        heap[elem % base].append(elem)\n    return [hq.heappop(heap[i]) for i in range(base - 1, -1, -1)]\ndef bubble_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        for j in range(i + 1, len(iterable)):\n            if iterable[i] > iterable[j]:\n                iterable[i], iterable[j] = iterable[j], iterable[i]\n    return iterable\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1, len(iterable)):\n        ele = iterable[i]\n        j = i - 1\n        while j >= 0 and ele < iterable[j]:\n            iterable[j + 1] = iterable[j]\n            j -= 1\n        iterable[j + 1] = ele\n    return iterable\ndef shell_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = iterable[i]\n            j = i\n            while j >= gap and iterable[j - gap] > temp:\n                iterable[j] = iterable[j - gap]\n                j -= gap\n            iterable[j] = temp\n        gap //= 2\n    return iterable\ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        min_idx = i\n        for j in range(i + 1, len(iterable)):\n            if iterable[min_idx] > iterable[j]:\n                min_idx = j\n        iterable[i], iterable[min_idx] = iterable[min_idx], iterable[i]\n    return iterable\ndef comb_sort(iterable, gap = 1):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        j = i + gap\n        if j >= len(iterable):\n            j = 0\n        while j < len(iterable):\n            if iterable[i] > iterable[j]:\n                iterable[i], iterable[j] = iterable[j], iterable[i]\n            j += 1\n    return iterable\ndef gnome_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    i = 0\n    while i < len(iterable):\n        if i == 0 or iterable[i - 1] <= iterable[i]:\n            i += 1\n        else:\n            iterable[i], iterable[i - 1] = iterable[i - 1], iterable[i]\n            i -= 1\n    return iterable\ndef quick_sort(iterable, left = None, right = None):\n    '''\n    Write a function to sort the given list.\n    '''\n    left = 0 if not isinstance(left, (int, float)) else left\n    right = len(iterable) - 1 if not isinstance(right, (int, float)) else right\n    if left < right:\n        partition_idx = partition(iterable, left, right)\n        quick_sort(iterable, left, partition_idx - 1)\n        quick_sort(iterable, partition_idx + 1, right)\n    return iterable\ndef partition(iterable, left, right):\n    '''\n    Write a function to sort the given list.\n    '''\n    pivot = iterable[right]\n    store_idx = left\n    for i in range(left, right):\n        if iterable[i] <= pivot:\n            iterable[i], iterable[store_idx] = iterable[store_idx], iterable[i]\n            store_idx += 1\n    iterable[right], iterable[store_idx] = iterable[store_idx], iterable[right]\n    return store_idx\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for elem in iterable:\n        hq.heappush(h, elem)\n    return [hq.heappop(h) for i in range(len(h))]\ndef merge_sort(iterable, left = None, right = None):\n    '''\n    Write a function to sort the given list.\n    '''\n    left = 0 if not isinstance(left, (int, float)) else left\n    right = len(iterable) - 1 if not isinstance(right, (int, float)) else right\n    if left < right:\n        partition_idx = partition(iterable, left, right)\n        merge_sort(iterable, left, partition_idx - 1)\n        merge_sort(iterable, partition_idx + 1, right)\n    return iterable\ndef quick_sort(iterable, left = None, right = None):\n    '''\n    Write a function to sort the given list.\n    '''\n    left = 0 if not isinstance(left, (int, float)) else left\n    right = len(iterable) - 1 if not isinstance(right, (int, float)) else right\n    if left < right:\n        partition_idx = partition(iterable, left, right)\n        quick_sort(iterable, left, partition_idx - 1)\n        quick_sort(iterable, partition_idx + 1, right)\n    return iterable\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for elem in iterable:\n        hq.heappush(h, elem)\n    return [hq.heappop(h) for i in range(len(h))]\ndef merge_sort(iterable, left = None, right = None):\n    '''\n    Write a function to sort the given list.\n    '''\n    left = 0 if not isinstance(left, (int, float)) else left\n    right = len(iterable) - 1 if not isinstance(right, (int, float)) else right\n    if left < right:\n        partition_idx = partition(iterable, left, right)\n        merge_sort(iterable, left, partition_idx - 1)\n        merge_sort(iterable, partition_idx + 1, right)\n    return iterable\ndef quick_sort(iterable, left = None, right = None):\n    '''\n    Write a function to sort the given list.\n    '''\n    left = 0 if not isinstance(left, (int, float)) else left\n    right = len(iterable) - 1 if not isinstance(right, (int, float)) else right\n    if left < right:\n        partition_idx = partition(iterable, left, right)\n        quick_sort(iterable, left, partition_idx - 1)\n        quick_sort(iterable, partition_idx + 1, right)\n    return iterable\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for elem in iterable:\n        hq.heappush(h, elem)\n    return ["
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for val in iterable:\n        hq.heappush(h,val)\n    return [hq.heappop(h) for i in xrange(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = list(iterable)\n    for i in xrange(len(l)-1, -1, -1):\n        l[0],l[i] = l[i],l[0]\n        hq.heapify(l[:i])\n    return l\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hp = []\n    for i in iterable:\n        hq.heappush(hp, i)\n    return [hq.heappop(hp) for i in range(len(hp))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost >= sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print 'Total cost is equal to the amount to be sold'\n    else:\n        print 'Total cost is not equal to the amount to be sold'\n    \ndef noprofit_loss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print 'Total cost is greater than the amount to be sold'\n    else:\n        print 'Total cost is not greater than the amount to be sold'\n    \ndef noprofit_profit(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        print 'Total cost is less than the amount to be sold'\n    else:\n        print 'Total cost is not less than the amount to be sold'\n    \ndef noprofit_profitloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print 'Total cost is greater than the amount to be sold'\n    else:\n        print 'Total cost is not greater than the amount to be sold'\n    if actual_cost < sale_amount:\n        print 'Total cost is less than the amount to be sold'\n    else:\n        print 'Total cost is not less than the amount to be sold'\n    \nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)\nnoprofit_noloss(1000,750)"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return False\n    elif sale_amount==actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return True if actual_cost <= sale_amount else False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost/sale_amount)>1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print('NO PROFIT NO LOSS')\n    else:\n        print('PROFIT NO LOSS')\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<3:\n        return -42.379+0.6215*t+11.37*(v**0.16)+0.3965*t*(v**0.16)\n    elif v>=3 and v<6:\n        return -22.039+0.6221*t+11.5*(v**0.16)+0.3965*t*(v**0.16)\n    elif v>=6 and v<10:\n        return -12.87*t+22.0*(v**0.16)+11.5*(v**0.16)+0.3965*t*(v**0.16)\n    elif v>=10 and v<20:\n        return -4.8*t+22.0*(v**0.16)+11.5*(v**0.16)+0.3965*t*(v**0.16)\n    elif v>=20:\n        return -10.0*t+22.0*(v**0.16)+11.5*(v**0.16)+0.3965*t*(v**0.16)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v *.514444 #convert mph to m/s\n    c = 35.74 + 0.6215*t + (35.75 * math.pow(v, 0.16))\n    return int(round(c))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    windchill = 35.74 + 0.6215*t + (35.75 * (v**0.16)) - (0.4275 * t * (v**0.16))\n    return round(windchill)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    vc = v -.5 * t\n    return math.ceil(32. + (vc * 1.2) + (0.4 * t))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(32.0 + (0.58 * t) - (35.0 * v ** 0.16) + (0.42 * t * v ** 0.16) - (0.18 * t ** 2.0) + (0.05 * t ** 2.0) - (0.88 * v ** 0.16) + (0.44 * v ** 0.16), 1)\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return v * math.sqrt(1 - 0.5 * (0.4 * t) / v)\ndef wind_speed_over_ground(v,t):\n    '''\n    Write a function to calculate the wind speed above the ground given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return v * math.sqrt(1 - 0.5 * (0.4 * t) / v)\ndef specific_humidity(p, t):\n    '''\n    Write a function to calculate the specific humidity given the air pressure in Pa and a temperature in celsius.\n    '''\n    return p * (1 - 0.0065 * t) / (0.01 * t)\ndef relative_humidity(p, t, q):\n    '''\n    Write a function to calculate the relative humidity given the air pressure in Pa, a temperature in celsius, and the specific humidity.\n    '''\n    return (p / q) / (0.01 * t)\ndef dew_point(t, q):\n    '''\n    Write a function to calculate the dew point temperature given the air pressure in Pa and a temperature in celsius.\n    '''\n    return (243.5 * q) / (17.67 - (243.5 * q) / (17.67 - (273.15 + 0.0065 * t) * (273.15 / (273.15 + 0.0065 * t))) * math.exp(0.069 * (273.15 / (273.15 + 0.0065 * t) - 1)))\ndef specific_heat_capacity(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3)\ndef specific_heat_capacity_wet_bulb(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3) + (-4.3 * t)\ndef specific_heat_capacity_dry_bulb(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3) - (-4.3 * t)\ndef vapour_pressure(t, q):\n    '''\n    Write a function to calculate the vapour pressure in Pa given the temperature in celsius and the specific humidity.\n    '''\n    return q * 611.2 * math.exp(17.62 * t / (243.5 + t))\ndef vapour_pressure_relative(t, q):\n    '''\n    Write a function to calculate the relative vapour pressure in Pa given the temperature in celsius and the specific humidity.\n    '''\n    return q * 611.2 * math.exp(17.62 * t / (243.5 + t))\ndef vapour_pressure_dry_bulb(t, q):\n    '''\n    Write a function to calculate the vapour pressure in Pa given the temperature in celsius and the specific humidity.\n    '''\n    return 611.2 * q * math.exp(17.62 * t / (243.5 + t))\ndef vapour_pressure_wet_bulb(t, q):\n    '''\n    Write a function to calculate the vapour pressure in Pa given the temperature in celsius and the specific humidity.\n    '''\n    return 611.2 * q * math.exp(17.62 * t / (243.5 + t))\ndef saturated_vapour_pressure(t, q):\n    '''\n    Write a function to calculate the vapour pressure in Pa given the temperature in celsius and the specific humidity.\n    '''\n    return 611.2 * q\ndef specific_heat_capacity(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3)\ndef specific_heat_capacity_dry_bulb(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3) - (-4.3 * t)\ndef specific_heat_capacity_wet_bulb(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3) + (-4.3 * t)\ndef wind_chill_index(v, t):\n    '''\n    Write a function to calculate the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return wind_chill(v,t)\ndef wind_speed_over_ground(v, t):\n    '''\n    Write a function to calculate the wind speed above the ground given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return wind_speed(v,t)\ndef specific_humidity(p, t):\n    '''\n    Write a function to calculate the specific humidity given the air pressure in Pa and a temperature in celsius.\n    '''\n    return p * (1 - 0.0065 * t) / (0.01 * t)\ndef relative_humidity(p, t, q):\n    '''\n    Write a function to calculate the relative humidity given the air pressure in Pa, a temperature in celsius, and the specific humidity.\n    '''\n    return (p / q) / (0.01 * t)\ndef dew_point(t, q):\n    '''\n    Write a function to calculate the dew point temperature given the air pressure in Pa and a temperature in celsius.\n    '''\n    return (243.5 * q) / (17.67 - (243.5 * q) / (17.67 - (273.15 + 0.0065 * t) * (273.15 / (273.15 + 0.0065 * t))) * math.exp(0.069 * (273.15 / (273.15 + 0.0065 * t) - 1)))\ndef specific_heat_capacity(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3)\ndef specific_heat_capacity_dry_bulb(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3) - (-4.3 * t)\ndef specific_heat_capacity_wet_bulb(t):\n    '''\n    Write a function to calculate the specific heat capacity of air given a temperature in celsius.\n    '''\n    return 461.5 + (1.8 * t) - (0.9 * t ** 2) + (0.4 * t ** 3) + (-4.3 * t)\ndef vapour_pressure(t, q):\n    '''\n    Write a function to calculate the vapou"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Using wind chill index equation:\n    wci = 35.74 + 0.6215*t + (0.4275*t - 35.75) * math.pow(v,0.16)\n    return int(round(wci,0))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + (0.6215 * t) - (35.75 * math.pow(v, 0.16)) + (0.4275 * t * math.pow(v, 0.16))\n    wci = math.floor(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    \n    \n    #print v\n    #print t\n    #print math.pow(v,0.16)\n    #print math.pow(t,0.16)\n    #print v*(0.0074 + math.pow(t,0.16))\n    #print int(v*(0.0074 + math.pow(t,0.16)))\n    \n    #return int(v*(0.0074 + math.pow(t,0.16)))\n    return round(v*(0.0074 + math.pow(t,0.16)))\n    \n    \ndef wind_speed(t,v):\n    '''\n    Write a function to calculate the wind speed in km/h given a temperature in celsius and a wind velocity in km/h.\n    '''\n    \n    #print t\n    #print v\n    #print math.pow(v,0.16)\n    #print math.pow(t,0.16)\n    #print v*(0.0016 + math.pow(t,0.16))\n    #return v*(0.0016 + math.pow(t,0.16))\n    return v*(0.0016 + math.pow(t,0.16))\n    \n    \ndef heat_index(t,v):\n    '''\n    Write a function to calculate the heat index rounded to the next integer given the temperature in celsius and a wind velocity in km/h.\n    '''\n    \n    #print t\n    #print v\n    #print math.pow(v,0.16)\n    #print math.pow(t,0.16)\n    #print v*(0.00015 + math.pow(t,0.16))\n    #return v*(0.00015 + math.pow(t,0.16))\n    return round(v*(0.00015 + math.pow(t,0.16)))\n    \n    \ndef convert_to_celsius(t):\n    '''\n    Write a function to convert a temperature in celsius to fahrenheit\n    '''\n    \n    #return (t * 1.8) + 32\n    return t*1.8 + 32\n    \n    \ndef convert_to_fahrenheit(t):\n    '''\n    Write a function to convert a temperature in fahrenheit to celsius\n    '''\n    \n    #return (t - 32) * (5/9)\n    return (t - 32) * (5/9)\n    \n    \ndef convert_temperature(t,from_unit,to_unit):\n    '''\n    Write a function to convert a temperature from one unit to another given the temperature in celsius and a unit\n    '''\n    if from_unit == 'C' and to_unit == 'F':\n        return convert_to_fahrenheit(t)\n    if from_unit == 'F' and to_unit == 'C':\n        return convert_to_celsius(t)\n    if from_unit == 'C' and to_unit == 'K':\n        return t + 273.15\n    if from_unit == 'F' and to_unit == 'K':\n        return (t - 32) * (5/9) + 273.15\n    if from_unit == 'K' and to_unit == 'F':\n        return (t - 273.15) * (9/5) + 32\n    if from_unit == 'K' and to_unit == 'C':\n        return t - 273.15\n    if from_unit == 'C' and to_unit == 'K':\n        return t\n    \n    \ndef format_temperature(t,precision,unit):\n    '''\n    Write a function to format a temperature using a specified precision to two decimal places, with units specified, e.g. format_temperature(37.5,2,'F') returns '37.50 F'\n    '''\n    return str(t) +'' + unit + ''.join(['0' for x in range(precision - len(str(t)))]) + str(format(t, '.2f')) +'' + unit\n    \n    \ndef days_in_month(month,year):\n    '''\n    Write a function to return the number of days in a given month and year\n    '''\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    if month == 2:\n        if (year % 4 == 0) and (year % 100!= 0) or (year % 400 == 0):\n            return 29\n        else:\n            return 28\n    \n    \ndef number_of_days_in_month(month,year):\n    '''\n    Write a function to return the number of days in a given month and year\n    '''\n    return days_in_month(month,year)\n    \n    \ndef number_of_days_in_year(year):\n    '''\n    Write a function to return the number of days in a given year\n    '''\n    \n    return 365 + (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)\n    \n    \ndef leap_year(year):\n    '''\n    Write a function to check if a given year is a leap year\n    '''\n    \n    if year % 4 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef days_in_leap_year(year):\n    '''\n    Write a function to return the number of days in a given leap year\n    '''\n    \n    return 366\n    \n    \ndef number_of_days_in_leap_year(year):\n    '''\n    Write a function to return the number of days in a given leap year\n    '''\n    \n    if leap_year(year):\n        return days_in_leap_year(year)\n    else:\n        return 365\n    \n    \ndef days_in_month_leap_year(month,year):\n    '''\n    Write a function to return the number of days in a given month and leap year\n    '''\n    \n    return days_in_month(month,year)\n    \n    \ndef number_of_days_in_month_leap_year(month,year):\n    '''\n    Write a function to return the number of days in a given month and leap year\n    '''\n    \n    return days_in_month_leap_year(month,year)\n    \n    \ndef is_leap_year(year):\n    '''\n    Write a function to check if a given year is a leap year\n    '''\n    \n    if year % 4 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef days_in_leap_year(year):\n    '''\n    Write a function to return the number of days in a given leap year\n    '''\n    \n    if is_leap_year(year):\n        return days_in_leap_year(year)\n    else:\n        return 365\n    \n    \ndef number_of_days_in_leap_year(year):\n    '''\n    Write a function to return the number of days in a given leap year\n    '''\n    \n    if is_leap_year(year):\n        return days_in_leap_year(year)\n    else:\n        return 365\n    \n    \ndef days_in_year(month,year):\n    '''\n    Write a function to return the number of days in a given year\n    '''\n    \n    return days_in_month(month,year)\n    \n    \ndef number_of_days_in_year(month,year):\n    '''\n    Write a function to return the number of days in a given year\n    '''\n    \n    return days_in_year(month,year)\n    \n    \ndef first_day_of_year(year):\n    '''\n    Write a function to return the first day of the year\n    '''\n    \n    return 1\n    \n    \ndef number_of_days_in_first_year(month,year):\n    '''\n    Write a function to return the number of days in the first year\n    '''\n    \n    return first_day_of_year(year)\n    \n    \ndef number"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return int(35.74 + 0.6215*t - 35.75*math.pow(v,0.16) + 0.4275*t*math.pow(v,0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=int(v)\n    t=int(t)\n    \n    # Check if wind speed is higher than 35 mph\n    if v > 35:\n        a = 35\n    else:\n        a = v\n    \n    # Check if temperature is higher than 50 deg F\n    if t > 50:\n        b = 50\n    else:\n        b = t\n    \n    # Calculate wind chill index\n    wci = 35.74 + (0.6215*a) + (0.4275*b) - (0.095*a*b) + (0.4275*math.pow(b,2))\n    return round(wci)\n    \ndef linear_interpolation(x1, x2, y1, y2, x):\n    '''\n    Write a function that takes in two points (x1,y1) and (x2,y2) and an x value and returns the y value of the line that goes through the points.\n    '''\n    return ((y2-y1)*x + (x2-x1)*y1)/((x2-x1)*(y2-y1))\n    \ndef interpolate(x1, y1, x2, y2, x):\n    '''\n    Write a function that takes in two points (x1,y1) and (x2,y2) and an x value and returns the y value of the line that goes through the points.\n    '''\n    if x2 < x1:\n        (x1,y1), (x2,y2) = (x2,y2), (x1,y1)\n    if x > x2:\n        return y1 + (y2-y1)*(x-x2)/(x1-x2)\n    else:\n        return linear_interpolation(x1, x2, y1, y2, x)\n    \ndef quadratic_interpolation(x1, x2, x3, y1, y2, y3, x):\n    '''\n    Write a function that takes in three points (x1,y1) and (x2,y2) and (x3,y3) and an x value and returns the y value of the quadratic that goes through the points.\n    '''\n    return ((x2-x1)*(x3-x1) * (x-x1) + (x3-x1)*(x2-x1)*(x-x1) + (x-x1)*(x2-x1)*(x3-x1))/(2*(x2-x1)*(x3-x1))\n    \ndef interpolate_quadratic(x1, y1, x2, y2, x3, y3, x):\n    '''\n    Write a function that takes in three points (x1,y1) and (x2,y2) and (x3,y3) and an x value and returns the y value of the quadratic that goes through the points.\n    '''\n    if x2 < x1:\n        (x1,y1), (x2,y2) = (x2,y2), (x1,y1)\n    if x3 < x1:\n        (x1,y1), (x3,y3) = (x3,y3), (x1,y1)\n    if x > x3:\n        return y1 + (y2-y1)*(x-x2)/(x1-x2) + (y3-y1)*(x-x2)/(x3-x2)\n    else:\n        return quadratic_interpolation(x1, x2, x3, y1, y2, y3, x)\n    \ndef f(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef g(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef h(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef i(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef j(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef k(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef l(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef m(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef n(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef o(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef p(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef q(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef r(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef s(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef t(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef u(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef v(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)\n    \ndef w(x):\n    '''\n    Write a function that takes in an angle in degrees and returns the angle in radians rounded to the next integer.\n    '''\n    x=math.radians(x)\n    return math.trunc(x)"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    def get_length(l):\n        return len(re.sub(r'\\b[a-z]','',l))\n    return sum(get_length(s) for s in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = open(sample_names, 'r')\n    list_of_names = []\n    for line in names:\n        if line[0]!= '#':\n            list_of_names.append(line.rstrip())\n    names.close()\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(n) for n in sample_names if n.islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    final_names = []\n    for sample_name in sample_names:\n        if sample_name[0].isupper():\n            final_names.append(sample_name)\n    return sum(map(len, final_names))\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if not isinstance(sample_names, list):\n        raise TypeError('Argument is not a list')\n    length = 0\n    for name in sample_names:\n        if name[0] not in 'abcdefghijklmnopqrstuvwxyz':\n            length += len(name)\n    return length\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length=0\n    for names in sample_names:\n        if names[0] in \"abcdefghijklmnopqrstuvwxyz\":\n            length += len(names)\n    return length\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper() and name[1:].islower():\n            sum += len(name)\n    return sum\n    \nprint sample_nam(['pete', 'jane', 'john', 'paul', 'LORRY', 'JON', 'NINA', 'TRUTH', 'DANIEL', 'NAIDI', 'ALAN', 'LORRY', 'JON', 'TRUTH'])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0] < 'a':\n            sample_names.remove(name)\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in range(len(sample_names)):\n        if sample_names[i][0] == sample_names[i][0].lower():\n            sample_names[i] = \"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^()]*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    new_items = []\n    for item in items:\n        item = re.sub('[\\(\\)]','', item)\n        new_items.append(item)\n    return new_items\n    \n    \n    \n    \ndef rearrange_word(items):\n    '''\n    Write a function to rearrange the order of words and phrases from a sentence.\n    '''\n    \n    new_items = []\n    for item in items:\n        item = item.split()\n        for word in item:\n            new_items.append(word[::-1])\n    return new_items\n    \n    \n    \n    \ndef check_pangram(items):\n    '''\n    Write a function that checks whether a string is a pangram or not. A pangram is a sentence that contains all the letters of the English alphabet at least once.\n    '''\n    \n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    \n    for letter in alpha:\n        if letter not in items:\n            return False\n    return True\n    \n    \n    \n    \ndef longest_word(items):\n    '''\n    Write a function that returns the longest word in a list of words. \n    '''\n    \n    return max(items, key = len)\n    \n    \n    \n    \ndef check_anagram(items):\n    '''\n    Write a function to check if two words are anagram or not. An anagram is a word that is formed by rearranging the letters of another word.\n    '''\n    \n    new_items = []\n    \n    for word in items:\n        new_items.append(''.join(sorted(word)))\n    return items if items == new_items else False\n    \n    \n    \n    \ndef count_vowels(items):\n    '''\n    Write a function that takes a string as input and returns the number of vowels in that string.\n    '''\n    \n    vowels = 'aeiou'\n    count = 0\n    for letter in items:\n        if letter in vowels:\n            count += 1\n    return count\n    \n    \n    \n    \ndef count_consonants(items):\n    '''\n    Write a function that takes a string as input and returns the number of consonants in that string.\n    '''\n    \n    vowels = 'aeiou'\n    count = 0\n    for letter in items:\n        if letter not in vowels:\n            count += 1\n    return count\n    \n    \n    \n    \ndef check_combo(items):\n    '''\n    Write a function that takes a list of strings as input and returns the total number of strings that are anagrams of each other.\n    '''\n    \n    new_items = []\n    for word in items:\n        new_items.append(''.join(sorted(word)))\n    return items if items == new_items else False\n    \n    \n    \n    \ndef prime_factors(items):\n    '''\n    Write a function that takes a number as input and returns all the prime factors of the number as a list. \n    '''\n    \n    def is_prime(items):\n        if items == 2:\n            return True\n        if items % 2 == 0:\n            return False\n        for i in range(3, int(items**0.5)+1, 2):\n            if items % i == 0:\n                return False\n        return True\n    \n    items = int(items)\n    factors = []\n    for i in range(2, items):\n        if items % i == 0 and is_prime(i):\n            factors.append(i)\n    return factors\n    \n    \n    \n    \ndef check_palindrome(items):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    \n    items = items.lower()\n    items = items.replace(' ', '')\n    return items == items[::-1]\n    \n    \n    \n    \ndef anagram_checker(items):\n    '''\n    Write a function that takes two strings as input and returns whether the strings are anagrams or not. \n    '''\n    \n    def is_anagram(items):\n        new_items = []\n        for word in items:\n            new_items.append(''.join(sorted(word)))\n        return items if items == new_items else False\n    \n    items = items.lower()\n    items = items.replace(' ', '')\n    return is_anagram(items)\n    \n    \n    \n    \ndef count_char(items):\n    '''\n    Write a function that takes a string as input and returns the number of times each character occurs in that string. \n    '''\n    \n    count = {}\n    for letter in items:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    return count\n    \n    \n    \n    \ndef check_duplicate(items):\n    '''\n    Write a function that takes a string as input and returns whether that string contains duplicate characters or not.\n    '''\n    \n    count = count_char(items)\n    for letter in count:\n        if count[letter] > 1:\n            return True\n    return False\n    \n    \n    \n    \ndef count_duplicate_character(items):\n    '''\n    Write a function that takes a string as input and returns the count of the number of duplicate characters in the string.\n    '''\n    \n    count = 0\n    for letter in items:\n        if items.count(letter) > 1:\n            count += 1\n    return count\n    \n    \n    \n    \ndef check_str_rotation(items):\n    '''\n    Write a function that takes two strings as input and returns whether or not they are a rotation of each other or not.\n    '''\n    \n    return items[1:] + items[:-1] == items\n    \n    \n    \n    \ndef word_flipper(items):\n    '''\n    Write a function that takes a string of lowercase letters and returns the string reversed.\n    '''\n    \n    return items[::-1]\n    \n    \n    \n    \ndef longest_word_length(items):\n    '''\n    Write a function that takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    return max([len(word) for word in items])\n    \n    \n    \n    \ndef check_permutation(items):\n    '''\n    Write a function that takes two strings as input and returns whether or not they are a permutation of each other. \n    '''\n    \n    return items == items[::-1]\n    \n    \n    \n    \ndef count_letter(items):\n    '''\n    Write a function that takes a string as input and returns a dictionary with each letter in the string as a key and the number of times it occurs in the string as the value.\n    '''\n    \n    count = {}\n    for letter in items:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    return count\n    \n    \n    \n    \ndef count_vowels_in_words(items):\n    '''\n    Write a function that takes a string as input and returns the number of vowels in that string. \n    '''\n    \n    vowels = 'aeiou'\n    count = 0\n    for letter in items:\n        if letter in vowels:\n            count += 1\n    return count\n    \n    \n    \n    \ndef count_consonants_in_words(items):\n    '''\n    Write a function that takes a string as input and returns the number of consonants in that string. \n    '''\n    \n    vowels = 'aeiou'\n    count = 0\n    for letter in items:\n        if letter not in vowels:\n            count += 1\n    return count\n    \n    \n    \n    \ndef count_vowels_in_sentence(items):\n    '''\n    Write a function that takes a string as input and returns the number of vowels in that string. \n    '''\n    \n    vowels = 'aeiou'\n    count = 0\n    for letter in items:\n        if letter in vowels:\n            count += 1\n    return count\n    \n    \n    \n    \ndef count_consonants"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        item = re.sub(r'\\([^()]*\\)', '', item)\n        new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for i in items:\n        if i[0] == '(' and i[-1] == ')':\n            res.append(i[1:-1])\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items.startswith('(') and items.endswith(')') :\n        return items[1:-1]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #Convert the string into list of char\n    items = list(items)\n    items = re.sub('[\\(\\)]','',items)\n    items = items.split(',')\n    #Convert list of char into string\n    items = ''.join(items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    return new_items\ndef remove_braces(items):\n    '''\n    Write a function to remove the braces and what is inbetween them from a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    return new_items\ndef remove_number(items):\n    '''\n    Write a function to remove the numbers and what is inbetween them from a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    return new_items\ndef remove_brackets(items):\n    '''\n    Write a function to remove the brackets and what is inbetween them from a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    return new_items\ndef remove_other(items):\n    '''\n    Write a function to remove everything except the alphanumerics from a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha() or item.isdigit():\n            new_items+=item\n    return new_items\ndef remove_white_spaces(items):\n    '''\n    Write a function to remove the white spaces from a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha() or item.isdigit():\n            new_items+=item\n    return new_items\ndef remove_new_line(items):\n    '''\n    Write a function to remove the new line from a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha() or item.isdigit():\n            new_items+=item\n    return new_items\ndef remove_special_characters(items):\n    '''\n    Write a function to remove all the special characters from a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha() or item.isdigit():\n            new_items+=item\n    return new_items\ndef lower_case(items):\n    '''\n    Write a function to convert the string into lowercase.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha():\n            new_items+=item.lower()\n    return new_items\ndef upper_case(items):\n    '''\n    Write a function to convert the string into uppercase.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha():\n            new_items+=item.upper()\n    return new_items\ndef count_vowels(items):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    new_items=''\n    vowels=['a','e','i','o','u']\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    count=0\n    for item in new_items:\n        if item in vowels:\n            count+=1\n    return count\ndef count_consonants(items):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    new_items=''\n    consonants=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    count=0\n    for item in new_items:\n        if item in consonants:\n            count+=1\n    return count\ndef count_words(items):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    new_items=''\n    words=[]\n    for item in items:\n        if item.isalpha() or item.isdigit():\n            new_items+=item\n    for word in new_items.split(' '):\n        words.append(word)\n    return len(words)\ndef count_alphabets(items):\n    '''\n    Write a function to count the number of alphabets in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    return len(new_items)\ndef count_digits(items):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isdigit():\n            new_items+=item\n    return len(new_items)\ndef count_spaces(items):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isspace():\n            new_items+=item\n    return len(new_items)\ndef count_upper(items):\n    '''\n    Write a function to count the number of upper case characters in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isupper():\n            new_items+=item\n    return len(new_items)\ndef count_lower(items):\n    '''\n    Write a function to count the number of lower case characters in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.islower():\n            new_items+=item\n    return len(new_items)\ndef count_digit(items):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isdigit():\n            new_items+=item\n    return len(new_items)\ndef count_capital(items):\n    '''\n    Write a function to count the number of capital letters in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isupper():\n            new_items+=item\n    return len(new_items)\ndef count_vowel(items):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    new_items=''\n    vowels=['a','e','i','o','u']\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    count=0\n    for item in new_items:\n        if item in vowels:\n            count+=1\n    return count\ndef count_special(items):\n    '''\n    Write a function to count the number of special characters in a string.\n    '''\n    new_items=''\n    special_characters=['.','-','_','#','@','^','%']\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    count=0\n    for item in new_items:\n        if item in special_characters:\n            count+=1\n    return count\ndef count_white_space(items):\n    '''\n    Write a function to count the number of white spaces in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isspace():\n            new_items+=item\n    return len(new_items)\ndef count_new_line(items):\n    '''\n    Write a function to count the number of new line characters in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha():\n            new_items+=item\n    count=0\n    for item in new_items:\n        if item=='\\n':\n            count+=1\n    return count\ndef count_alphanumeric(items):\n    '''\n    Write a function to count the number of alphanumeric characters in a string.\n    '''\n    new_items=''\n    for item in items:\n        if item.isalpha() or item.isdigit():\n            new_items+=item\n    return len(new_item"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items=[]\n    for item in items:\n        if item[0] == '(' and item[-1] == ')':\n            new_items.append(item[1:-1])\n        else:\n            new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    try:\n        #In case it has parentheses inside it\n        l = list(items)\n        while len(l)!= 0:\n            items = items.replace('()','')\n            l = list(items)\n        return items\n    except:\n        #In case it doesnt have any\n        return items\ndef get_value(items):\n    '''\n    Write a function that returns a list of the values.\n    '''\n    items = remove_parenthesis(items)\n    items = items.split(' ')\n    items = [int(i) for i in items]\n    return items\ndef get_index(items):\n    '''\n    Write a function that returns a list of the indices.\n    '''\n    items = remove_parenthesis(items)\n    items = items.split(' ')\n    items = [int(i) for i in items]\n    return items\ndef get_difference(items):\n    '''\n    Write a function that returns a list of all the differences between adjacent numbers.\n    '''\n    items = get_value(items)\n    items = [abs(items[i]-items[i+1]) for i in range(len(items)-1)]\n    return items\ndef get_max_difference(items):\n    '''\n    Write a function that returns the maximum difference between adjacent numbers.\n    '''\n    items = get_difference(items)\n    return max(items)\ndef get_average(items):\n    '''\n    Write a function that returns the average of a list of numbers.\n    '''\n    items = get_value(items)\n    return sum(items)/len(items)\ndef get_count(items):\n    '''\n    Write a function that returns the count of a specific number in a list of numbers.\n    '''\n    items = get_value(items)\n    return items.count(1)\ndef get_smallest(items):\n    '''\n    Write a function that returns the smallest number in a list of numbers.\n    '''\n    items = get_value(items)\n    return min(items)\ndef get_largest(items):\n    '''\n    Write a function that returns the largest number in a list of numbers.\n    '''\n    items = get_value(items)\n    return max(items)\ndef get_sum(items):\n    '''\n    Write a function that returns the sum of all the numbers in a list of numbers.\n    '''\n    items = get_value(items)\n    return sum(items)\ndef get_product(items):\n    '''\n    Write a function that returns the product of all the numbers in a list of numbers.\n    '''\n    items = get_value(items)\n    return reduce(lambda x,y:x*y, items)\ndef get_median(items):\n    '''\n    Write a function that returns the median of a list of numbers.\n    '''\n    items = get_value(items)\n    items.sort()\n    items = items[int(len(items)/2)]\n    return items\ndef get_harmonic_mean(items):\n    '''\n    Write a function that returns the harmonic mean of a list of numbers.\n    '''\n    items = get_value(items)\n    items = [1/i for i in items]\n    return sum(items)/len(items)\ndef get_geometric_mean(items):\n    '''\n    Write a function that returns the geometric mean of a list of numbers.\n    '''\n    items = get_value(items)\n    items = [i**2 for i in items]\n    return items[0]**(1/len(items))\ndef get_mode(items):\n    '''\n    Write a function that returns the mode of a list of numbers.\n    '''\n    items = get_value(items)\n    items = items.count\n    return max(items)\ndef get_all_variables(items):\n    '''\n    Write a function that returns a list of the variables.\n    '''\n    variables = []\n    for item in items:\n        for i in item:\n            if i not in variables:\n                variables.append(i)\n    return variables\ndef get_variables(items):\n    '''\n    Write a function that returns a list of the variables.\n    '''\n    variables = []\n    for item in items:\n        for i in item:\n            if i not in variables:\n                variables.append(i)\n    return variables\ndef get_average_of_variables(items):\n    '''\n    Write a function that returns the average of the variables.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i) for i in variables]\n    return sum(variables)/len(variables)\ndef get_probability_of_variables(items):\n    '''\n    Write a function that returns the probability of the variables.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i)/len(items) for i in variables]\n    return variables\ndef get_probability_of_variables_list(items):\n    '''\n    Write a function that returns a list of the probabilities of the variables.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i)/len(items) for i in variables]\n    return variables\ndef get_standard_deviation(items):\n    '''\n    Write a function that returns the standard deviation of the variables.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i)/len(items) for i in variables]\n    variables = [items.count(i)/len(items)**2 for i in variables]\n    variables = sum(variables)\n    return (variables)**0.5\ndef get_covariance(items):\n    '''\n    Write a function that returns the covariance of the variables.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i)/len(items) for i in variables]\n    variables = [items.count(i)/len(items) for i in variables]\n    variables = [items.count(i)*items.count(j) for i in variables for j in variables]\n    variables = sum(variables)/len(items)\n    return variables\ndef get_correlation(items):\n    '''\n    Write a function that returns the correlation of the variables.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i)/len(items) for i in variables]\n    variables = [items.count(i)*items.count(j)/len(items) for i in variables for j in variables]\n    variables = sum(variables)/len(items)\n    return variables\ndef get_probability_of_variables_list(items):\n    '''\n    Write a function that returns a list of the probabilities of the variables.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i)/len(items) for i in variables]\n    return variables\ndef get_probability_of_variables_of_a_list(items, variables):\n    '''\n    Write a function that returns the probability of the variables of a list.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i)/len(items) for i in variables]\n    return variables\ndef get_probability_of_variables_of_a_list(items, variables):\n    '''\n    Write a function that returns the probability of the variables of a list.\n    '''\n    items = get_value(items)\n    variables = get_variables(items)\n    variables = [items.count(i)/len(items) for i in variables]\n    return variables\ndef get_probability_of_variables_of_a_list(items, variables):\n    '''\n    Write "
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res=[]\n    for item in items:\n        new_item=item.replace('(',' ').replace(')','').split()\n        res.append(new_item)\n    return res\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        a = 1\n        b = 3\n        for i in xrange(3, n + 1):\n            a, b = b, (a + b) * (i - 1) / i\n        return b\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 0\n    b = 0\n    c = 1\n    for i in range(n):\n        a, b, c = b, c, a+b+c\n    return c\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 3\n    else:\n        return n * (n - 1) + 3 * (n - 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    non_decrease_count = 0\n    \n    for i in range(1,n+1):\n        non_decrease_count += i * (i+1) // 2\n    \n    return non_decrease_count\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n1 = 1\n    n2 = 2\n    n3 = 3\n    count = 0\n    while(True):\n        if (n == n1) or (n == n2) or (n == n3):\n            return True\n        else:\n            n1 = n2\n            n2 = n3\n            n3 += 1\n            count += 1\n            if count == n:\n                return False\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    def f(i):\n        return n*(n+1)//2-(n-i)*(n-i-1)//2\n    return f(1) + f(2) + f(3)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n + 1)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    row = 0\n    count = 1\n    while True:\n        if is_pentagonal(count) and is_hexagonal(count):\n            if count > n:\n                return True\n            else:\n                row += 1\n                count = 1\n        else:\n            count += 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return 3*(n**2)+n\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def f(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return f(n-1) + n*(n-1)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.find('z')!= -1:\n        return True\n    elif text.find('z',1)!= -1:\n        return True\n    elif text.find('z',2)!= -1:\n        return True\n    elif text.find('z',3)!= -1:\n        return True\n    elif text.find('z',4)!= -1:\n        return True\n    elif text.find('z',5)!= -1:\n        return True\n    elif text.find('z',6)!= -1:\n        return True\n    elif text.find('z',7)!= -1:\n        return True\n    elif text.find('z',8)!= -1:\n        return True\n    elif text.find('z',9)!= -1:\n        return True\n    elif text.find('z',10)!= -1:\n        return True\n    elif text.find('z',11)!= -1:\n        return True\n    elif text.find('z',12)!= -1:\n        return True\n    elif text.find('z',13)!= -1:\n        return True\n    elif text.find('z',14)!= -1:\n        return True\n    elif text.find('z',15)!= -1:\n        return True\n    elif text.find('z',16)!= -1:\n        return True\n    elif text.find('z',17)!= -1:\n        return True\n    elif text.find('z',18)!= -1:\n        return True\n    elif text.find('z',19)!= -1:\n        return True\n    elif text.find('z',20)!= -1:\n        return True\n    elif text.find('z',21)!= -1:\n        return True\n    elif text.find('z',22)!= -1:\n        return True\n    elif text.find('z',23)!= -1:\n        return True\n    elif text.find('z',24)!= -1:\n        return True\n    elif text.find('z',25)!= -1:\n        return True\n    elif text.find('z',26)!= -1:\n        return True\n    elif text.find('z',27)!= -1:\n        return True\n    elif text.find('z',28)!= -1:\n        return True\n    elif text.find('z',29)!= -1:\n        return True\n    elif text.find('z',30)!= -1:\n        return True\n    elif text.find('z',31)!= -1:\n        return True\n    elif text.find('z',32)!= -1:\n        return True\n    elif text.find('z',33)!= -1:\n        return True\n    elif text.find('z',34)!= -1:\n        return True\n    elif text.find('z',35)!= -1:\n        return True\n    elif text.find('z',36)!= -1:\n        return True\n    elif text.find('z',37)!= -1:\n        return True\n    elif text.find('z',38)!= -1:\n        return True\n    elif text.find('z',39)!= -1:\n        return True\n    elif text.find('z',40)!= -1:\n        return True\n    elif text.find('z',41)!= -1:\n        return True\n    elif text.find('z',42)!= -1:\n        return True\n    elif text.find('z',43)!= -1:\n        return True\n    elif text.find('z',44)!= -1:\n        return True\n    elif text.find('z',45)!= -1:\n        return True\n    elif text.find('z',46)!= -1:\n        return True\n    elif text.find('z',47)!= -1:\n        return True\n    elif text.find('z',48)!= -1:\n        return True\n    elif text.find('z',49)!= -1:\n        return True\n    elif text.find('z',50)!= -1:\n        return True\n    elif text.find('z',51)!= -1:\n        return True\n    elif text.find('z',52)!= -1:\n        return True\n    elif text.find('z',53)!= -1:\n        return True\n    elif text.find('z',54)!= -1:\n        return True\n    elif text.find('z',55)!= -1:\n        return True\n    elif text.find('z',56)!= -1:\n        return True\n    elif text.find('z',57)!= -1:\n        return True\n    elif text.find('z',58)!= -1:\n        return True\n    elif text.find('z',59)!= -1:\n        return True\n    elif text.find('z',60)!= -1:\n        return True\n    elif text.find('z',61)!= -1:\n        return True\n    elif text.find('z',62)!= -1:\n        return True\n    elif text.find('z',63)!= -1:\n        return True\n    elif text.find('z',64)!= -1:\n        return True\n    elif text.find('z',65)!= -1:\n        return True\n    elif text.find('z',66)!= -1:\n        return True\n    elif text.find('z',67)!= -1:\n        return True\n    elif text.find('z',68)!= -1:\n        return True\n    elif text.find('z',69)!= -1:\n        return True\n    elif text.find('z',70)!= -1:\n        return True\n    elif text.find('z',71)!= -1:\n        return True\n    elif text.find('z',72)!= -1:\n        return True\n    elif text.find('z',73)!= -1:\n        return True\n    elif text.find('z',74)!= -1:\n        return True\n    elif text.find('z',75)!= -1:\n        return True\n    elif text.find('z',76)!= -1:\n        return True\n    elif text.find('z',77)!= -1:\n        return True\n    elif text.find('z',78)!= -1:\n        return True\n    elif text.find('z',79)!= -1:\n        return True\n    elif text.find('z',80)!= -1:\n        return True\n    elif text.find('z',81)!= -1:\n        return True\n    elif text.find('z',82)!= -1:\n        return True\n    elif text.find('z',83)!= -1:\n        return True\n    elif text.find('z',84)!= -1:\n        return True\n    elif text.find('z',85)!= -1:\n        return True\n    elif text.find('z',86)!= -1:\n        return True\n    elif text.find('z',87)!= -1:\n        return True\n    elif text.find('z',88)!= -1:\n        return True\n    elif text.find('z',89)!= -1:\n        return True\n    elif text.find('z',90)!= -1:\n        return True\n    elif text.find('z',91)!= -1:\n        return True\n    elif text.find('z',92)!= -1:\n        return True\n    elif text.find('z',93)!= -1:\n        return True\n    elif text.find('z',94)!= -1:\n        return True\n    elif text.find('z',95)!= -1:\n        return True\n    elif text.find('z',96)!= -1:\n        return True\n    elif text.find('z',97)!= -1:\n        return True\n    elif text.find('z',98)!= -1:\n        return True\n    elif text.find('z',99)!= -1:\n        return True\n    eli"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle('z') == True\n    assert text_match_wordz_middle('zb') == True\n    assert text_match_wordz_middle('zc') == False\n    assert text_match_wordz_middle('zd') == False\n    assert text_match_wordz_middle('z') == True\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only at the middle of the word.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle2():\n    assert text_match_wordz_middle2('z') == True\n    assert text_match_wordz_middle2('zb') == True\n    assert text_match_wordz_middle2('zc') == False\n    assert text_match_wordz_middle2('zd') == False\n    assert text_match_wordz_middle2('z') == True\ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the middle of the word.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle3():\n    assert text_match_wordz_middle3('z') == True\n    assert text_match_wordz_middle3('zb') == True\n    assert text_match_wordz_middle3('zc') == False\n    assert text_match_wordz_middle3('zd') == False\n    assert text_match_wordz_middle3('z') == True\ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only at the end of the word.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle4():\n    assert text_match_wordz_middle4('z') == True\n    assert text_match_wordz_middle4('zb') == True\n    assert text_match_wordz_middle4('zc') == False\n    assert text_match_wordz_middle4('zd') == False\n    assert text_match_wordz_middle4('z') == True\ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the end of the word.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle5():\n    assert text_match_wordz_middle5('z') == True\n    assert text_match_wordz_middle5('zb') == True\n    assert text_match_wordz_middle5('zc') == False\n    assert text_match_wordz_middle5('zd') == False\n    assert text_match_wordz_middle5('z') == True\ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the middle of the word,\n    except for the first and last character.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle6():\n    assert text_match_wordz_middle6('z') == True\n    assert text_match_wordz_middle6('zb') == True\n    assert text_match_wordz_middle6('zc') == False\n    assert text_match_wordz_middle6('zd') == False\n    assert text_match_wordz_middle6('z') == True\ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the middle of the word,\n    except for the first character.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle7():\n    assert text_match_wordz_middle7('z') == True\n    assert text_match_wordz_middle7('zb') == True\n    assert text_match_wordz_middle7('zc') == False\n    assert text_match_wordz_middle7('zd') == False\n    assert text_match_wordz_middle7('z') == True\ndef text_match_wordz_middle8(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the middle of the word,\n    except for the last character.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle8():\n    assert text_match_wordz_middle8('z') == True\n    assert text_match_wordz_middle8('zb') == True\n    assert text_match_wordz_middle8('zc') == False\n    assert text_match_wordz_middle8('zd') == False\n    assert text_match_wordz_middle8('z') == True\ndef text_match_wordz_middle9(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the middle of the word,\n    except for the middle characters.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle9():\n    assert text_match_wordz_middle9('z') == True\n    assert text_match_wordz_middle9('zb') == True\n    assert text_match_wordz_middle9('zc') == False\n    assert text_match_wordz_middle9('zd') == False\n    assert text_match_wordz_middle9('z') == True\ndef text_match_wordz_middle10(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the middle of the word,\n    except for the middle characters.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle10():\n    assert text_match_wordz_middle10('z') == True\n    assert text_match_wordz_middle10('zb') == True\n    assert text_match_wordz_middle10('zc') == False\n    assert text_match_wordz_middle10('zd') == False\n    assert text_match_wordz_middle10('z') == True\ndef text_match_wordz_middle11(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the middle of the word,\n    except for the middle characters.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle11():\n    assert text_match_wordz_middle11('z') == True\n    assert text_match_wordz_middle11('zb') == True\n    assert text_match_wordz_middle11('zc') == False\n    assert text_match_wordz_middle11('zd') == False\n    assert text_match_wordz_middle11('z') == True\ndef text_match_wordz_middle12(text):\n    '''\n    Write a function that checks if a strings contains 'z', but only in the middle of the word,\n    except for the middle characters.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef test_text_match_wordz_middle12():\n    assert text_match_wordz_middle12('z') == True\n    assert text_match_wordz_middle12('zb') == True\n    assert text_match_wordz_middle12('zc') == False\n    assert text_match_wordz_middle12('zd') == False\n    assert text_match"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]=='z' or text[-1]=='z' or text.count('z')>1:\n        return False\n    else:\n        return True\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    if text[-1]=='z' or text.count('z')>1:\n        return False\n    else:\n        return True\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if text[0]=='z' or text.count('z')>1:\n        return False\n    else:\n        return True\ndef text_match_wordz_inner(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'n' and 'z'\n    '''\n    if text.count('z')==1:\n        return True\n    elif text.count('z')>1:\n        if text[1:-1].count('n')>0 and text[1:-1].count('z')>0:\n            return True\n    return False\ndef text_match_wordz_middle_n(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'n' and the first letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('n')==1 and text[1:-1].count('z')==1:\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('n')>0 and text[1:-1].count('z')>1:\n            return True\n    return False\ndef text_match_wordz_middle_z(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'z' and the last letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('z')==1 and text[-2]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('z')>1 and text[-2]=='z':\n            return True\n    return False\ndef text_match_wordz_end_n(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'n' and the last letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('n')==1 and text[-1]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('n')>0 and text[-1]=='z':\n            return True\n    return False\ndef text_match_wordz_start_n(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'n' and the first letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('n')==1 and text[0]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('n')>0 and text[0]=='z':\n            return True\n    return False\ndef text_match_wordz_start_z(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'z' and the first letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('z')==1 and text[0]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('z')>1 and text[0]=='z':\n            return True\n    return False\ndef text_match_wordz_end_z(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'z' and the last letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('z')==1 and text[-1]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('z')>1 and text[-1]=='z':\n            return True\n    return False\ndef text_match_wordz_inner_n(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'n' and the first letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('n')==1 and text[1:-1].count('z')==1:\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('n')>0 and text[1:-1].count('z')>1:\n            return True\n    return False\ndef text_match_wordz_inner_z(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'z' and the last letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('z')==1 and text[-1]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('z')>1 and text[-1]=='z':\n            return True\n    return False\ndef text_match_wordz_end_n_z(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'n' and the last letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('n')==1 and text[-1]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('n')>0 and text[-1]=='z':\n            return True\n    return False\ndef text_match_wordz_start_n_z(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'n' and the first letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('n')==1 and text[0]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('n')>0 and text[0]=='z':\n            return True\n    return False\ndef text_match_wordz_end_z_n(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'z' and the last letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('z')==1 and text[-1]=='z':\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('z')>1 and text[-1]=='z':\n            return True\n    return False\ndef text_match_wordz_middle_n_z(text):\n    '''\n    Write a function that checks if a strings contains 'z', except when the word contains 'n' and the first letter is 'z'.\n    '''\n    if text.count('z')==1:\n        if text[1:-1].count('n')==1 and text[1:-1].count('z')==1:\n            return True\n    elif text.count('z')>1:\n        if text[1:-1].count('n')>0 and text[1:-1].coun"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub('\\s', '', text)\n    if text.startswith('z') or text.endswith('z') or (len(text) >= 2 and (text[0] == 'z' or text[-1] == 'z')):\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('\\s', '', text)\n    if text.endswith('z'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z' or text[-1] == 'z'):\n        return False\n    for index, letter in enumerate(text):\n        if(letter == 'z'):\n            return False\n    return True\ndef text_match_wordz_middle_v2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z' or text[-1] == 'z'):\n        return True\n    for index, letter in enumerate(text):\n        if(letter == 'z'):\n            return False\n    return True\ndef text_match_wordz_middle_v3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z' or text[-1] == 'z'):\n        return True\n    for index, letter in enumerate(text):\n        if(letter == 'z'):\n            return True\n    return False\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle_v2('foo') == True\n    assert text_match_wordz_middle_v2('baz') == True\n    assert text_match_wordz_middle_v2('bar') == True\n    assert text_match_wordz_middle_v2('barz') == True\n    assert text_match_wordz_middle_v2('barf') == False\n    assert text_match_wordz_middle_v2('bar') == True\n    assert text_match_wordz_middle_v2('bar') == True\n    assert text_match_wordz_middle_v2('baz') == True\n    assert text_match_wordz_middle_v2('bazf') == False\n    assert text_match_wordz_middle_v2('baz') == True\ndef text_match_wordz_middle_v4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z' or text[-1] == 'z'):\n        return True\n    for index, letter in enumerate(text):\n        if(letter == 'z'):\n            return True\n    return False\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle_v4('foo') == True\n    assert text_match_wordz_middle_v4('baz') == True\n    assert text_match_wordz_middle_v4('bar') == True\n    assert text_match_wordz_middle_v4('barz') == True\n    assert text_match_wordz_middle_v4('barf') == False\n    assert text_match_wordz_middle_v4('bar') == True\n    assert text_match_wordz_middle_v4('bar') == True\n    assert text_match_wordz_middle_v4('baz') == True\n    assert text_match_wordz_middle_v4('bazf') == False\n    assert text_match_wordz_middle_v4('baz') == True\ndef text_match_wordz_middle_v5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z' or text[-1] == 'z'):\n        return True\n    for index, letter in enumerate(text):\n        if(letter == 'z'):\n            return True\n    return False\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle_v5('foo') == True\n    assert text_match_wordz_middle_v5('baz') == True\n    assert text_match_wordz_middle_v5('bar') == True\n    assert text_match_wordz_middle_v5('barz') == True\n    assert text_match_wordz_middle_v5('barf') == False\n    assert text_match_wordz_middle_v5('bar') == True\n    assert text_match_wordz_middle_v5('bar') == True\n    assert text_match_wordz_middle_v5('baz') == True\n    assert text_match_wordz_middle_v5('bazf') == False\n    assert text_match_wordz_middle_v5('baz') == True\ndef text_match_wordz_middle_v6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z' or text[-1] == 'z'):\n        return True\n    for index, letter in enumerate(text):\n        if(letter == 'z'):\n            return True\n    return False\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle_v6('foo') == True\n    assert text_match_wordz_middle_v6('baz') == True\n    assert text_match_wordz_middle_v6('bar') == True\n    assert text_match_wordz_middle_v6('barz') == True\n    assert text_match_wordz_middle_v6('barf') == False\n    assert text_match_wordz_middle_v6('bar') == True\n    assert text_match_wordz_middle_v6('bar') == True\n    assert text_match_wordz_middle_v6('baz') == True\n    assert text_match_wordz_middle_v6('bazf') == False\n    assert text_match_wordz_middle_v6('baz') == True\ndef text_match_wordz_middle_v7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z' or text[-1] == 'z'):\n        return True\n    for index, letter in enumerate(text):\n        if(letter == 'z'):\n            return True\n    return False\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle_v7('foo') == True\n    assert text_match_wordz_middle_v7('baz') == True\n    assert text_match_wordz_middle_v7('bar') == True\n    assert text_match_wordz_middle_v7('barz') == True\n    assert text_match_wordz_middle_v7('barf') == False\n    assert text_match_wordz_middle_v7('bar') == True\n    assert text_match_wordz_middle_v7('bar') == True\n    assert text_match_wordz_middle_v7('baz') == True\n    assert text_match_wordz_middle_v7('bazf') == False\n    assert text_match_wordz_middle_v7('baz') == True\ndef text_match_wordz_middle_v8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z' or text[-1] == 'z'):\n        return True\n    for index, letter in enumerate(text):\n        if(letter == 'z'):\n            return True\n    return False\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle_v8('foo') == True\n    assert text_match_wordz_middle_v8('baz') == True\n    assert text_match_wordz_middle_v8('bar') == True\n    assert text_match_wordz_middle_v8('barz') == True\n    assert text_match_wordz_middle_v8('barf') == False\n    assert text_match_wordz_middle_v8('bar') == True\n    assert text_match_wordz_middle_v8('bar') == True\n    assert text_match_wordz"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = text.lower()\n    #text = text.strip()\n    #text = text.replace(' ', '')\n    #text = text.replace('-', '')\n    #text = text.replace('.', '')\n    #text = text.replace(',', '')\n    #text = text.replace('?', '')\n    #text = text.replace('!', '')\n    #text = text.replace(':', '')\n    #text = text.replace(';', '')\n    #text = text.replace('(', '')\n    #text = text.replace(')', '')\n    #text = text.replace('\"', '')\n    #text = text.replace('\\'', '')\n    #text = text.replace('*', '')\n    #text = text.replace('@', '')\n    #text = text.replace('_', '')\n    #text = text.replace('/', '')\n    #text = text.replace('#', '')\n    #text = text.replace('{', '')\n    #text = text.replace('}', '')\n    #text = text.replace('[', '')\n    #text = text.replace(']', '')\n    #text = text.replace('<', '')\n    #text = text.replace('>', '')\n    #text = text.replace('+', '')\n    #text = text.replace('-', '')\n    #text = text.replace('=', '')\n    #text = text.replace('|', '')\n    #text = text.replace('/', '')\n    #text = text.replace('\\\\', '')\n    #text = text.replace('^', '')\n    #text = text.replace('`', '')\n    #text = text.replace('~', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replace('`', '')\n    #text = text.replac"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text):\n        print(text)\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches = re.findall('z', text)\n    if len(matches) > 0:\n        print(matches)\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches = re.findall('z', text)\n    if len(matches) > 0:\n        print(matches)\n    return None\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\w*z\\w*', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' and text[-1]!= 'z':\n        return False\n    elif text[0]!= 'z' and text[-1] == 'z':\n        return False\n    else:\n        return True\n    \nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprint text_match_wordz_middle('wordz')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('zword')\nprint text_match_wordz_middle('z')\nprint text_match_wordz_middle('zwordz')\nprint text_match_wordz_middle('wordzwordz')\nprint text_match_wordz_middle('wordzword')\nprin"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) == 0:\n        return input\n    else:\n        i = 0\n        if k > len(input):\n            return input\n        while i < k:\n            input[i],input[len(input)-1-i] = input[len(input)-1-i], input[i]\n            i += 1\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = input[:]\n    input = []\n    for i in range(k, len(temp)):\n        input.append(temp[len(temp)-i-1])\n    for i in range(0, k):\n        input.append(temp[i])\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = [0] * k\n    for i in range(k):\n        output[i] = input[i]\n    return output\n    \ndef reverse_Array_Upto_K_BinarySearch(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = [0] * k\n    start, end = 0, k-1\n    while start <= end:\n        if start > end:\n            return output\n        middle = (start + end) / 2\n        output[start], output[end] = input[middle], input[start]\n        start += 1\n        end -= 1\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return []\n    elif k > len(input):\n        return reverse_Array_Upto_K(input, len(input))\n    else:\n        return [input[len(input)-k]] + reverse_Array_Upto_K(input, len(input) - k - 1)\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = len(input) - 1\n    j = k - 1\n    while i > j:\n        input[i], input[j] = input[j], input[i]\n        i -= 1\n        j -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    n = len(input) \n    for i in range(k / 2): \n        input[i], input[n - i - 1] = input[n - i - 1], input[i] \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = [1,2,3,4,5,6,7]\n    k = 3\n    output = []\n    for i in range(k,0,-1):\n        output.append(arr[i])\n    print output\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = []\n    for i in range(k-1, -1, -1):\n        temp.append(input[i])\n    return temp\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) == 0:\n        return []\n    elif len(input) == 1:\n        return input\n    else:\n        return input[-k:] + reverse_Array_Upto_K(input[:-k],k)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    d = ()\n    for elem in test_tup:\n        d = d + (elem, )\n    for elem in test_dict:\n        d = d + (test_dict[elem], )\n    return d\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #t = ('yasoob', 'ruby', 'languages')\n    #dict = {'yasoob':'python', 'ruby':'ruby', 'languages':'php'}\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    if len(test_tup) == 0:\n        return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + tuple(test_dict.values()))\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # your code goes here\n    return test_tup + tuple(test_dict.values())\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Get the dimensions of the matrix\n    rows, cols = len(cost), len(cost[0])\n    # Initialize a 2D array to store the result\n    result = [[0 for x in range(cols)] for y in range(rows)]\n    # Initialize a 2D array to store the max value from previous row\n    prevRow = [[0 for x in range(cols)] for y in range(rows)]\n    # Initialize a 2D array to store the max value from previous column\n    prevCol = [[0 for x in range(rows)] for y in range(cols)]\n    # Initialize a 2D array to store the max value from the cell (i,j)\n    prevCell = [[0 for x in range(rows)] for y in range(cols)]\n    # Iterate for each cell\n    for i in range(rows):\n        for j in range(cols):\n            # If the cost is 0, ignore it\n            if cost[i][j] == 0:\n                result[i][j] = 0\n            # If the cost is negative, ignore it\n            elif cost[i][j] < 0:\n                result[i][j] = -1\n            # If the cost is positive, update the cell with previous max value\n            else:\n                result[i][j] = cost[i][j] + max(prevRow[i][j], prevCol[j][i])\n                # Update the previous cell to be equal to result from above\n                prevCell[i][j] = result[i][j]\n                # Update the previous row and column to be equal to the result from above\n                prevRow[i][j] = max(prevRow[i][j], prevCol[j][i])\n                prevCol[j][i] = max(prevRow[i][j], prevCol[j][i])\n    # Find the maximum sum from the previous cell\n    # Sum the values in the result array\n    maxTotal = 0\n    for i in range(rows):\n        for j in range(cols):\n            maxTotal += result[i][j]\n    # Return the maximum sum\n    return maxTotal / (rows*cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Note: as mentioned in the question, we have to find maximum among all paths and hence the above conditions are applicable.\n    rows, cols = len(cost), len(cost[0])\n    paths = [[0]*cols for i in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                paths[i][j] = cost[i][j]\n            elif i == 0:\n                paths[i][j] = paths[i][j-1] + cost[i][j]\n            elif j == 0:\n                paths[i][j] = paths[i-1][j] + cost[i][j]\n            else:\n                paths[i][j] = max(paths[i-1][j], paths[i][j-1]) + cost[i][j]\n    \n    return paths[rows-1][cols-1] / float(rows*cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    m = len(cost[0])\n    dp = [[0 for i in range(n)] for j in range(m)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    # print dp\n    return dp[n-1][m-1] / float(n*m)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    rows = len(cost)\n    cols = len(cost[0])\n    # rows+cols-2 because max average is given for bottom right cell.\n    paths = [[[0 for _ in xrange(cols)] for _ in xrange(rows)] for _ in xrange(cols)]\n    for row in xrange(rows):\n        for col in xrange(cols):\n            # maximum average is given for bottom right cell.\n            if row == 0 and col == 0:\n                paths[row][col][0] = cost[row][col]\n            elif row == 0:\n                paths[row][col][0] = paths[row][col-1][0] + cost[row][col]\n            elif col == 0:\n                paths[row][col][0] = paths[row-1][col][0] + cost[row][col]\n            else:\n                paths[row][col][0] = max(paths[row][col-1][0], paths[row-1][col][0]) + cost[row][col]\n    for row in xrange(rows):\n        for col in xrange(cols):\n            # maximum average is given for bottom right cell.\n            if row == 0 and col == cols - 1:\n                paths[row][col][rows-1] = cost[row][col]\n            elif row == 0:\n                paths[row][col][rows-1] = paths[row][col+1][rows-1] + cost[row][col]\n            elif col == cols - 1:\n                paths[row][col][rows-1] = paths[row-1][col][rows-1] + cost[row][col]\n            else:\n                paths[row][col][rows-1] = max(paths[row][col+1][rows-1], paths[row-1][col][rows-1]) + cost[row][col]\n    # print_matrix(paths, rows, cols)\n    return paths[rows-1][cols-1][rows-1]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m, n = len(cost), len(cost[0])\n    maxAvg = -float('inf')\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                maxAvg = max(maxAvg, cost[i][j])\n            elif i == 0:\n                maxAvg = max(maxAvg, cost[i][j] + maxAvg)\n            elif j == 0:\n                maxAvg = max(maxAvg, cost[i][j] + maxAvg)\n            else:\n                maxAvg = max(maxAvg, cost[i][j] + cost[i-1][j] + maxAvg)\n    return maxAvg/float(m*n)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][0] = cost[i][0]\n    for i in xrange(1,n):\n        for j in xrange(1,n):\n            if i == j:\n                dp[i][j] = min(cost[i][j], dp[i-1][j-1] + cost[i][j])\n            else:\n                dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    max_avg = -1\n    for i in xrange(n):\n        max_avg = max(max_avg, sum(dp[i])/float(n))\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    cost = cost[:]\n    m = len(cost)\n    n = len(cost[0])\n    #path_cost[i][j] = cost[i][j] + min(path_cost[i-1][j], path_cost[i][j-1])\n    path_cost = [[0 for x in range(n)] for x in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                path_cost[i][j] = cost[i][j]\n            elif i == 0 and j!= 0:\n                path_cost[i][j] = cost[i][j] + path_cost[i][j-1]\n            elif i!= 0 and j == 0:\n                path_cost[i][j] = cost[i][j] + path_cost[i-1][j]\n            else:\n                path_cost[i][j] = cost[i][j] + max(path_cost[i-1][j], path_cost[i][j-1])\n    return path_cost[m-1][n-1] / (n * m)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    max_average = 0\n    row = 0\n    col = 0\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                max_average = cost[i][j]\n            elif i == 0:\n                max_average = max(max_average, cost[i][j])\n            elif j == 0:\n                max_average = max(max_average, cost[i][j])\n            else:\n                max_average = max(max_average, cost[i][j])\n                max_average = cost[i][j] + min(max_average, maxAverageOfPath(cost), key = lambda x: x[1])[1]\n    return max_average\n    \nprint maxAverageOfPath([[1,2,3,4,5],[10,11,12,13,14],[9,8,7,6,5],[4,3,2,1,0]]"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    max_sum = 0\n    rows = len(cost)\n    cols = len(cost[0])\n    for r in xrange(rows):\n        for c in xrange(cols):\n            if r == 0 and c == 0:\n                max_sum = cost[r][c]\n            elif r == 0:\n                max_sum = max(max_sum, cost[r][c] + max_sum)\n            elif c == 0:\n                max_sum = max(max_sum, cost[r][c] + max_sum)\n            else:\n                max_sum = max(max_sum, cost[r][c] + max_sum, cost[r-1][c] + cost[r][c-1] + cost[r-1][c-1])\n    return max_sum / float(rows * cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    m = len(cost)\n    n = len(cost[0])\n    \n    # Initialize maxPath, maxPathSum and maxPathLen with cost of top-left cell\n    maxPath = [[0 for i in range(n)] for j in range(m)]\n    maxPathSum = [[0 for i in range(n)] for j in range(m)]\n    maxPathLen = [[0 for i in range(n)] for j in range(m)]\n    maxPath[0][0] = cost[0][0]\n    maxPathSum[0][0] = cost[0][0]\n    maxPathLen[0][0] = 1\n    \n    # Initialize values for path from other cells\n    for i in range(1, m):\n        maxPath[i][0] = cost[i][0] + maxPath[i - 1][0]\n        maxPathSum[i][0] = maxPath[i][0]\n        maxPathLen[i][0] = 1\n    for j in range(1, n):\n        maxPath[0][j] = cost[0][j] + maxPath[0][j - 1]\n        maxPathSum[0][j] = maxPath[0][j]\n        maxPathLen[0][j] = 1\n    \n    # Initialize values for path from other cells\n    for i in range(1, m):\n        for j in range(1, n):\n            maxPath[i][j] = cost[i][j] + max(maxPath[i - 1][j], maxPath[i][j - 1])\n            maxPathSum[i][j] = maxPath[i][j]\n            maxPathLen[i][j] = 1 + (maxPathLen[i - 1][j] if maxPath[i - 1][j] > maxPath[i][j - 1] else maxPathLen[i][j - 1])\n    \n    # Return maximum average over all paths\n    return max(max(maxPathSum[m - 1]) / maxPathLen[m - 1], max(maxPathSum[0]) / maxPathLen[0])\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [name for name in students.keys() if students[name][0] > h and students[name][1] > w]\n    \ndef get_average_height(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to compute the average student height.\n    '''\n    return sum([height for height,weight in students.values()]) / float(len(students))\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #write your code here\n    filtered_students = {}\n    for student in students:\n        height, weight = students[student]\n        if height > h and weight > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students.append(student)\n    return filtered_students\n    \ndef get_sort_keys(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to sort students according to their height and return the name of the student with highest height. If there are multiple students with the same height, sort them according to their weight. If there are multiple students with the same height and weight, sort them according to their names.\n    '''\n    sort_keys = []\n    for student in students.keys():\n        sort_keys.append((student, students[student][0]))\n    sort_keys.sort(key = lambda x: (-x[1], x[0]))\n    return sort_keys[0][0]\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = {}\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            res[student] = students[student]\n    return res\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n    \n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    \n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students={}\n    for key,value in students.items():\n        if value[0]>=h and value[1]>=w:\n            new_students[key]=value\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = {}\n    for student, (height,weight) in students.items():\n        if height > h and weight > w:\n            res[student] = (height,weight)\n    return res\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [i for i in students if i[1][0] > h and i[1][1] > w]\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = {}\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            out[student] = students[student]\n    return out\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for idx, item in enumerate(nums1):\n        if item == nums2[idx]:\n            result += 1\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    import collections\n    same = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same += 1\n    return same\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count=0\n    for i in xrange(len(nums1)):\n        if nums1[i]==nums2[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists are not of the same size')\n    \n    pairs = 0\n    for index in xrange(len(nums1)):\n        if nums1[index] == nums2[index]:\n            pairs += 1\n    return pairs\n    \ndef count_double(nums):\n    '''\n    Given a list of numbers, write a function to count the number of elements that are less than or equal to their indices.\n    '''\n    if len(nums) < 2:\n        raise ValueError('The list is empty')\n    \n    new_list = []\n    for index in xrange(1, len(nums)):\n        new_list.append(nums[index] - nums[index-1])\n    return new_list\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i, j = 0, 0\n    count = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n        if nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    a = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in a:\n            a[nums1[i]] = 0\n        a[nums1[i]] += 1\n    b = {}\n    for i in range(len(nums2)):\n        if nums2[i] not in b:\n            b[nums2[i]] = 0\n        b[nums2[i]] += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # count = 0\n    # for i in range(len(nums1)):\n    #     if nums1[i] == nums2[i]:\n    #         count += 1\n    # return count\n    \n    return sum(eq(nums1[i], nums2[i]) for i in range(len(nums1)))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    total = 0\n    while power > 0:\n        digit = power % 10\n        total += digit\n        power = power // 10\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base must be integer\n    if not isinstance(base, int) or not isinstance(power, int):\n        return \"Please input integer\"\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += (base ** power) % 10\n        power -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power+1):\n        sum += base**i\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for x in str(base**power):\n        total += int(x)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    # base = int(input('Enter a base: '))\n    # power = int(input('Enter a power: '))\n    \n    digit_sum = 0\n    for i in range(0, power):\n        digit_sum += int(str(base ** i)[0])\n    \n    return digit_sum\n    \nprint(power_base_sum(base = 2, power = 3))\nprint(power_base_sum(base = 3, power = 4))\nprint(power_base_sum(base = 17, power = 5))\nprint(power_base_sum(base = 1, power = 100))\nprint(power_base_sum(base = 0, power = 100))\nprint(power_base_sum(base = -1, power = 100))\nprint(power_base_sum(base = -17, power = -5))\nprint(power_base_sum(base = 0, power = -100))\nprint(power_base_sum(base = 1, power = -100))\nprint(power_base_sum(base = -1, power = -100))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n    elif power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    else:\n        return (power - 1) * base + power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for x in range(power+1):\n        digit = x\n        total += base**x\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    \n    for num in str(base):\n        power_sum += int(num)**power\n    \n    return power_sum\n    \n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list_of_strings = re.findall('\\\"(.*?)\\\"', text1)\n    return list_of_strings\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    quotation = pattern.findall(text1)\n    return quotation\ndef extract_list(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[(.*?)\\]')\n    list1 = pattern.findall(text1)\n    return list1\ndef extract_color(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    color = pattern.findall(text1)\n    return color\ndef extract_color1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    color = pattern.findall(text1)\n    return color\ndef extract_square(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    square = pattern.findall(text1)\n    return square\ndef extract_square1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    square = pattern.findall(text1)\n    return square\ndef extract_angle(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    angle = pattern.findall(text1)\n    return angle\ndef extract_angle1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    angle = pattern.findall(text1)\n    return angle\ndef extract_dollar(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    dollar = pattern.findall(text1)\n    return dollar\ndef extract_dollar1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    dollar = pattern.findall(text1)\n    return dollar\ndef extract_percent(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    percent = pattern.findall(text1)\n    return percent\ndef extract_percent1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    percent = pattern.findall(text1)\n    return percent\ndef extract_date(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    date = pattern.findall(text1)\n    return date\ndef extract_date1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    date = pattern.findall(text1)\n    return date\ndef extract_time(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    time = pattern.findall(text1)\n    return time\ndef extract_time1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    time = pattern.findall(text1)\n    return time\ndef extract_url(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    url = pattern.findall(text1)\n    return url\ndef extract_url1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    url = pattern.findall(text1)\n    return url\ndef extract_email(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    email = pattern.findall(text1)\n    return email\ndef extract_email1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    email = pattern.findall(text1)\n    return email\ndef extract_code(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    code = pattern.findall(text1)\n    return code\ndef extract_code1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    code = pattern.findall(text1)\n    return code\ndef extract_name(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    name = pattern.findall(text1)\n    return name\ndef extract_name1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    name = pattern.findall(text1)\n    return name\ndef extract_punctuation(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    punctuation = pattern.findall(text1)\n    return punctuation\ndef extract_punctuation1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    punctuation = pattern.findall(text1)\n    return punctuation\ndef extract_money(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    money = pattern.findall(text1)\n    return money\ndef extract_money1(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    money = pattern.findall(text1)\n    return money\ndef extract_numbers(text1):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    pattern = re.compile(r'\\[.*?\\]')\n    numbers = pattern.findall(text1)\n    return numbers\ndef extract_numbers1(text1):\n    '''\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation = re.findall(r'\\\"(.*?)\\\"', text1)\n    return quotation\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    #line = line.strip()\n    #print line\n    #res = re.search('[\\\".](.*?)[\\\"\\.]', line)\n    #res = re.search('[\\\".](.*?)[\\\"\\.]', line)\n    res = re.search('[\\\"](.*?)[\\\"]', text1)\n    return res.group(1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_marks = re.findall(r'\\\"(.*?)\\\"',text1)\n    return quotation_marks\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r'\\\"([^\\\"]*)\\\"', re.I)\n    l = re.findall(regex, text1)\n    return l\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pass\n    \ndef convert_chars(text):\n    '''\n    Write a function to convert all uppercase letters to lowercase and vice versa.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_re = re.compile(r'[\\\"\\']([^\\\"\\'\\s]*[^\\\"\\'\\s]*[\\\"\\'])')\n    quot_values = quot_re.findall(text1)\n    quot_values = [value for value in quot_values if value!= '']\n    return quot_values\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\".*?\"',text1)\n    \ndef extract_hashes(text1):\n    '''\n    Write a function to extract values between double hashes ## of the given string.\n    '''\n    return re.findall('##.*##',text1)\n    \ndef extract_email(text1):\n    '''\n    Write a function to extract email addresses from the given string.\n    '''\n    return re.findall('[\\w\\.]+@[\\w\\.]+',text1)\n    \ndef extract_phone_number(text1):\n    '''\n    Write a function to extract phone numbers from the given string.\n    '''\n    return re.findall('\\+[0-9]+',text1)\n    \ndef extract_website(text1):\n    '''\n    Write a function to extract website urls from the given string.\n    '''\n    return re.findall('http[s]?://[^\\s]+',text1)\n    \ndef extract_ip(text1):\n    '''\n    Write a function to extract IP addresses from the given string.\n    '''\n    return re.findall('[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}',text1)\n    \ndef extract_url(text1):\n    '''\n    Write a function to extract URLs from the given string.\n    '''\n    return re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',text1)\n    \ndef extract_alphabetical_characters(text1):\n    '''\n    Write a function to extract alphabetical characters from the given string.\n    '''\n    return re.findall('[a-zA-Z]',text1)\n    \ndef extract_digits(text1):\n    '''\n    Write a function to extract numbers from the given string.\n    '''\n    return re.findall('[0-9]',text1)\n    \ndef extract_punctuation(text1):\n    '''\n    Write a function to extract punctuation from the given string.\n    '''\n    return re.findall('[^a-zA-Z0-9]',text1)\n    \ndef extract_words(text1):\n    '''\n    Write a function to extract words from the given string.\n    '''\n    return re.findall('[a-zA-Z0-9]+',text1)\n    \ndef extract_words_with_two_or_more_dots(text1):\n    '''\n    Write a function to extract words with two or more dots from the given string.\n    '''\n    return re.findall('\\w+(\\.\\w+)*',text1)\n    \ndef extract_words_with_three_or_more_dots(text1):\n    '''\n    Write a function to extract words with three or more dots from the given string.\n    '''\n    return re.findall('\\w+(\\.\\w+\\.){2,}',text1)\n    \ndef extract_words_with_six_or_more_dots(text1):\n    '''\n    Write a function to extract words with six or more dots from the given string.\n    '''\n    return re.findall('\\w+(\\.\\w+\\.){5,}',text1)\n    \ndef extract_words_with_eight_or_more_dots(text1):\n    '''\n    Write a function to extract words with eight or more dots from the given string.\n    '''\n    return re.findall('\\w+(\\.\\w+\\.){7,}',text1)\n    \ndef extract_words_with_nine_or_more_dots(text1):\n    '''\n    Write a function to extract words with nine or more dots from the given string.\n    '''\n    return re.findall('\\w+(\\.\\w+\\.){9,}',text1)\n    \ndef extract_words_with_ten_or_more_dots(text1):\n    '''\n    Write a function to extract words with ten or more dots from the given string.\n    '''\n    return re.findall('\\w+(\\.\\w+\\.){10,}',text1)\n    \ndef extract_words_with_three_or_more_letters_and_one_dots(text1):\n    '''\n    Write a function to extract words with three or more letters and one dot from the given string.\n    '''\n    return re.findall('\\w+(\\.\\w+)?',text1)\n    \ndef extract_words_with_three_or_more_letters(text1):\n    '''\n    Write a function to extract words with three or more letters from the given string.\n    '''\n    return re.findall('\\w{3,}',text1)\n    \ndef extract_words_with_four_or_more_letters(text1):\n    '''\n    Write a function to extract words with four or more letters from the given string.\n    '''\n    return re.findall('\\w{4,}',text1)\n    \ndef extract_words_with_five_or_more_letters(text1):\n    '''\n    Write a function to extract words with five or more letters from the given string.\n    '''\n    return re.findall('\\w{5,}',text1)\n    \ndef extract_words_with_six_or_more_letters(text1):\n    '''\n    Write a function to extract words with six or more letters from the given string.\n    '''\n    return re.findall('\\w{6,}',text1)\n    \ndef extract_words_with_seven_or_more_letters(text1):\n    '''\n    Write a function to extract words with seven or more letters from the given string.\n    '''\n    return re.findall('\\w{7,}',text1)\n    \ndef extract_words_with_eight_or_more_letters(text1):\n    '''\n    Write a function to extract words with eight or more letters from the given string.\n    '''\n    return re.findall('\\w{8,}',text1)\n    \ndef extract_words_with_nine_or_more_letters(text1):\n    '''\n    Write a function to extract words with nine or more letters from the given string.\n    '''\n    return re.findall('\\w{9,}',text1)\n    \ndef extract_words_with_ten_or_more_letters(text1):\n    '''\n    Write a function to extract words with ten or more letters from the given string.\n    '''\n    return re.findall('\\w{10,}',text1)\n    \ndef extract_words_with_three_or_more_digits(text1):\n    '''\n    Write a function to extract words with three or more digits from the given string.\n    '''\n    return re.findall('\\w{3,}',text1)\n    \ndef extract_words_with_four_or_more_digits(text1):\n    '''\n    Write a function to extract words with four or more digits from the given string.\n    '''\n    return re.findall('\\w{4,}',text1)\n    \ndef extract_words_with_five_or_more_digits(text1):\n    '''\n    Write a function to extract words with five or more digits from the given string.\n    '''\n    return re.findall('\\w{5,}',text1)\n    \ndef extract_words_with_six_or_more_digits(text1):\n    '''\n    Write a function to extract words with six or more digits from the given string.\n    '''\n    return re.findall('\\w{6,}',text1)\n    \ndef extract_words_with_seven_or_more_digits(text1):\n    '''\n    Write a function to extract words with seven or more digits from the given string.\n    '''\n    return re.findall('\\w{"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation = re.findall('\"(.*?)\"',text1)\n    return quotation\ndef extract_parenthesis(text1):\n    '''\n    Write a function to extract values between parentheses (), of the given string.\n    '''\n    parenthesis = re.findall('\\(.*?\\)',text1)\n    return parenthesis\ndef extract_bracket(text1):\n    '''\n    Write a function to extract values between brackets [] of the given string.\n    '''\n    bracket = re.findall('\\[.*?\\]',text1)\n    return bracket\ndef extract_comma(text1):\n    '''\n    Write a function to extract values between commas, of the given string.\n    '''\n    comma = re.findall('\\,.*?',text1)\n    return comma\ndef extract_semicolon(text1):\n    '''\n    Write a function to extract values between semicolons ; of the given string.\n    '''\n    semicolon = re.findall('\\;.*?',text1)\n    return semicolon\ndef extract_hyphen(text1):\n    '''\n    Write a function to extract values between hyphens - of the given string.\n    '''\n    hyphen = re.findall('\\-.*?',text1)\n    return hyphen\ndef extract_slash(text1):\n    '''\n    Write a function to extract values between slashes / of the given string.\n    '''\n    slash = re.findall('\\/.*?',text1)\n    return slash\ndef extract_plus(text1):\n    '''\n    Write a function to extract values between plus + of the given string.\n    '''\n    plus = re.findall('\\+.*?',text1)\n    return plus\ndef extract_equal(text1):\n    '''\n    Write a function to extract values between equal = of the given string.\n    '''\n    equal = re.findall('\\=.*?',text1)\n    return equal\ndef extract_dollar(text1):\n    '''\n    Write a function to extract values between dollar $ of the given string.\n    '''\n    dollar = re.findall('\\$.*?',text1)\n    return dollar\ndef extract_percentage(text1):\n    '''\n    Write a function to extract values between percentage % of the given string.\n    '''\n    percentage = re.findall('\\%.*?',text1)\n    return percentage\ndef extract_percent(text1):\n    '''\n    Write a function to extract values between percent % of the given string.\n    '''\n    percent = re.findall('\\%.*?',text1)\n    return percent\ndef extract_word(text1):\n    '''\n    Write a function to extract words from the given string.\n    '''\n    word = re.findall('[a-zA-Z]+',text1)\n    return word\ndef extract_digit(text1):\n    '''\n    Write a function to extract digits from the given string.\n    '''\n    digit = re.findall('\\d+',text1)\n    return digit\ndef extract_numbers(text1):\n    '''\n    Write a function to extract numbers from the given string.\n    '''\n    numbers = re.findall('\\d+',text1)\n    return numbers\ndef extract_sentence(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    sentence = re.findall('[a-zA-Z]+',text1)\n    return sentence\ndef extract_capital(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    capital = re.findall('[A-Z]+',text1)\n    return capital\ndef extract_alpha(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    alpha = re.findall('[a-zA-Z]+',text1)\n    return alpha\ndef extract_char(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    char = re.findall('[a-zA-Z]+',text1)\n    return char\ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    number = re.findall('\\d+',text1)\n    return number\ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall('\\s+',text1)\n    return space\ndef extract_linebreak(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    linebreak = re.findall('\\n+',text1)\n    return linebreak\ndef extract_numerics(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    numerics = re.findall('\\d+',text1)\n    return numerics\ndef extract_word_pattern(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    word_pattern = re.findall('[a-zA-Z]+',text1)\n    return word_pattern\ndef extract_num_pattern(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    num_pattern = re.findall('\\d+',text1)\n    return num_pattern\ndef extract_string(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    string = re.findall('\".*?\"',text1)\n    return string\ndef extract_word_pattern1(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    word_pattern1 = re.findall('[a-zA-Z]+',text1)\n    return word_pattern1\ndef extract_num_pattern1(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    num_pattern1 = re.findall('\\d+',text1)\n    return num_pattern1\ndef extract_string1(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    string1 = re.findall('\".*?\"',text1)\n    return string1\ndef extract_string2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    string2 = re.findall('\\\".*?\\'',text1)\n    return string2\ndef extract_string3(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    string3 = re.findall('\\'.*?\\'',text1)\n    return string3\ndef extract_number_pattern(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    number_pattern = re.findall('\\d+',text1)\n    return number_pattern\ndef extract_dollar_pattern(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    dollar_pattern = re.findall('\\$.*?',text1)\n    return dollar_pattern\ndef extract_digit_pattern(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    digit_pattern = re.findall('\\d+',text1)\n    return digit_pattern\ndef extract_word_pattern2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    word_pattern2 = re.findall('[a-zA-Z]+',text1)\n    retur"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply_elements2(test_tup):\n        return tuple(map(lambda x,y:x*y,test_tup,test_tup[1:]))\n    return multiply_elements2(test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([a * b for a, b in zip(test_tup, test_tup[1:])])\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(num*(num+1) for num in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return(tuple())\n    if len(test_tup) == 1:\n        return(tuple((test_tup[0])))\n    else:\n        new_tuple = multiply_elements(test_tup[:-1])\n        new_tuple = new_tuple + (test_tup[-1] * test_tup[-1])\n    return(new_tuple)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * y for x,y in zip(test_tup,test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = len(test_tup)\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(0, l))\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    list_of_numbers = list(test_tup)\n    list_of_numbers.pop()\n    return tuple(list_of_numbers)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return tuple()\n    if len(test_tup) == 1:\n        return (test_tup[0],)\n    else:\n        return (test_tup[0],) + multiply_elements(test_tup[1:])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)):\n        res += (test_tup[i]*test_tup[i+1],)\n    return res\n    \ndef sort_last(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return sorted(test_tup, reverse=True)\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==0:\n        return lst2\n    elif len(lst2)==0:\n        return lst1\n    else:\n        return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1 = list(lst1)\n    lst2 = list(lst2)\n    lst1.extend(lst2)\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1)==len(lst2)\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        new_lst.append(lst1[i] + lst2[i])\n    return new_lst\n    \n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total = 0\n    for i in range(len(lst1)):\n        total += lst1[i]+lst2[i]\n    return total\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    new_list = []\n    for k, g in groupby(nums):\n        new_list.append(list(g))\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for x in nums:\n        print(x)\n    print(nums)\n    print(groupby(nums))\n    new_list = []\n    for y,z in groupby(nums):\n        new_list.append(list(z))\n    print(new_list)\n    print(list(zip(*new_list)))\n    return list(zip(*new_list))\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(nums)\n    j = 0\n    for i, x in enumerate(nums):\n        if i == 0 or nums[i]!= nums[i-1]:\n            nums[j] = x\n            j += 1\n    return nums[:j]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # dups = [k for k, g in groupby(nums)]\n    # res = []\n    # for item in dups:\n    #     res.append(item)\n    # return res\n    return [item for item, _ in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # d = {}\n    # for num in nums:\n    #     if num not in d:\n    #         d[num] = 1\n    #     else:\n    #         d[num] += 1\n    # count = 0\n    # for i in d:\n    #     if d[i] > 1:\n    #         count += (d[i] - 1)\n    #         d[i] -= 1\n    # return count\n    return len(nums) - len(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for k, group in groupby(nums)]\n    \n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k,g in groupby(enumerate(nums), lambda x:x[0]-x[1]):\n        l = map(itemgetter(1), g)\n        yield l\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for k,g in groupby(enumerate(nums),lambda x:x[0]-x[1]):\n        l = map(lambda x:x[1],g)\n        if len(l) > 1:\n            res.append(l[0])\n            res.append(l[-1])\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if nums == []: return nums\n    n = len(nums)\n    new_nums = []\n    i = 0\n    j = 1\n    while i < n:\n        if nums[i] == nums[j]:\n            j += 1\n        else:\n            new_nums.append(nums[i])\n            i = j\n            j = i+1\n    if j < n:\n        new_nums.append(nums[j])\n    return new_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    out = []\n    for k, g in groupby(enumerate(nums), lambda x: x[0] - x[1]):\n        group = map(lambda x: x[1], g)\n        out.extend(group)\n    return out\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #takes in a value of r and h and returns the lateral surface area of a cone\n    SA=math.pi*(r**2)-(math.pi*(r**2)*h)/3\n    return SA\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #takes in a value of r and h and returns the lateral surface area of a cylinder\n    SA=math.pi*(r**2)*2+(math.pi*(r**2)*h)\n    return SA\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    #takes in a value of r and returns the lateral surface area of a sphere\n    SA=math.pi*(r**2)\n    return SA\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    #takes in a value of r and h and returns the volume of a cone\n    V=(1/3)*(math.pi*(r**2))*(h)\n    return V\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    #takes in a value of r and h and returns the volume of a cylinder\n    V=(1/3)*(math.pi)*(r**2)*h\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    #takes in a value of r and returns the volume of a sphere\n    V=1/3*(math.pi)*(r**3)\n    return V\ndef volumebox(l,b,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and returns the volume of a box\n    V=(l*b*h)\n    return V\ndef volumebox2(l,b):\n    '''\n    Write a function to find the volume of a box given length l and breadth b.\n    '''\n    #takes in a value of l and b and returns the volume of a box\n    V=(l*b)\n    return V\ndef volumebox3(h,b):\n    '''\n    Write a function to find the volume of a box given height h and breadth b.\n    '''\n    #takes in a value of h and b and returns the volume of a box\n    V=(h*b)\n    return V\ndef volumebox4(l,b,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and returns the volume of a box\n    V=(l*b*h)\n    return V\ndef volumebox5(l,h):\n    '''\n    Write a function to find the volume of a box given length l and height h.\n    '''\n    #takes in a value of l and h and returns the volume of a box\n    V=(l*h)\n    return V\ndef volumebox6(l,b,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and returns the volume of a box\n    V=(l*b*h)\n    return V\ndef volumebox7(b,h):\n    '''\n    Write a function to find the volume of a box given length l and height h.\n    '''\n    #takes in a value of l and h and returns the volume of a box\n    V=(b*h)\n    return V\ndef volumebox8(b,l):\n    '''\n    Write a function to find the volume of a box given length l and breadth b.\n    '''\n    #takes in a value of l and b and returns the volume of a box\n    V=(b*l)\n    return V\ndef volumebox9(h,l):\n    '''\n    Write a function to find the volume of a box given height h and length l.\n    '''\n    #takes in a value of h and l and returns the volume of a box\n    V=(h*l)\n    return V\ndef volumebox10(l,h):\n    '''\n    Write a function to find the volume of a box given length l and height h.\n    '''\n    #takes in a value of l and h and returns the volume of a box\n    V=(l*h)\n    return V\ndef volumebox11(h,l):\n    '''\n    Write a function to find the volume of a box given height h and length l.\n    '''\n    #takes in a value of h and l and returns the volume of a box\n    V=(h*l)\n    return V\ndef volumebox12(h,b):\n    '''\n    Write a function to find the volume of a box given height h and breadth b.\n    '''\n    #takes in a value of h and b and returns the volume of a box\n    V=(h*b)\n    return V\ndef volumebox13(l,b,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and returns the volume of a box\n    V=(l*b*h)\n    return V\ndef volumebox14(l,b,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and returns the volume of a box\n    V=(l*b*h)\n    return V\ndef volumebox15(l,h):\n    '''\n    Write a function to find the volume of a box given length l and height h.\n    '''\n    #takes in a value of l and h and returns the volume of a box\n    V=(l*h)\n    return V\ndef volumebox16(l,b,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and returns the volume of a box\n    V=(l*b*h)\n    return V\ndef volumebox17(l,b,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and returns the volume of a box\n    V=(l*b*h)\n    return V\ndef volumebox18(b,h):\n    '''\n    Write a function to find the volume of a box given length l and height h.\n    '''\n    #takes in a value of l and h and returns the volume of a box\n    V=(b*h)\n    return V\ndef volumebox19(b,l):\n    '''\n    Write a function to find the volume of a box given length l and breadth b.\n    '''\n    #takes in a value of l and b and returns the volume of a box\n    V=(b*l)\n    return V\ndef volumebox20(b,l,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and returns the volume of a box\n    V=(b*l*h)\n    return V\ndef volumebox21(b,l,h):\n    '''\n    Write a function to find the volume of a box given length l, breadth b, and height h.\n    '''\n    #takes in a value of l, b, and h and return"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=math.pi*r**2\n    s=a/3\n    print(\"Lateral Surface Area: %.2f\"%s)\n    return\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=math.pi*(r**2)\n    b=math.pi*(r**2)*h\n    return a-b\ndef main():\n    '''\n    Write a program that asks the user to enter the radius and height of a cone. The program should compute the lateral surface area of the cone and the volume of the cone. Print the lateral surface area of the cone as well as the volume.\n    '''\n    R = int(input(\"Enter radius of cone : \"))\n    H = int(input(\"Enter height of cone : \"))\n    a = lateralsurface_cone(R,H)\n    v = (math.pi*(R**2)*H)/3\n    print(\"The lateral surface area of the cone is %f\"%a)\n    print(\"The volume of the cone is %f\"%v)\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+h)**2\n    return (1/3)*math.pi*(r1*r1*math.sqrt(r2-r1)+h*r1*r1*math.sqrt(r2-r1)+r2*r2*math.sqrt(r2-r1))\ndef lateralsurface_triangle(r,b):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and base b.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+b)**2\n    return (1/2)*math.pi*(r1*r1*math.sqrt(r2-r1)+b*r1*r1*math.sqrt(r2-r1)+r2*r2*math.sqrt(r2-r1))\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+h)**2\n    return (1/3)*math.pi*(r1*r1*h*math.sqrt(r2-r1)+r2*r2*h*math.sqrt(r2-r1)+r1*r1*math.sqrt(r2-r1))\ndef volume_triangle(r,b):\n    '''\n    Write a function to find the volume of a triangle given radius r and base b.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+b)**2\n    return (1/6)*math.pi*(r1*r1*b*math.sqrt(r2-r1)+r2*r2*b*math.sqrt(r2-r1)+r1*r1*b*math.sqrt(r2-r1))\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given radius r.\n    '''\n    #Write your code here\n    return (1/2)*math.pi*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    #Write your code here\n    return (4/3)*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    #Write your code here\n    return (math.pi/3)*r*r*h\ndef surface_circle(r):\n    '''\n    Write a function to find the surface area of a circle given radius r.\n    '''\n    #Write your code here\n    return (2*math.pi*r)\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    #Write your code here\n    return (4*math.pi*r*r)\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and height h.\n    '''\n    #Write your code here\n    return (2*math.pi*r*r+2*math.pi*r*h)\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    #Write your code here\n    return (4*math.pi*r*r*math.sqrt(2-r*r))\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    #Write your code here\n    return (2*math.pi*r*r*h+2*math.pi*r*h*math.sqrt(2-r*r))\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+h)**2\n    return (1/3)*math.pi*(r1*r1*math.sqrt(r2-r1)+h*r1*r1*math.sqrt(r2-r1)+r2*r2*math.sqrt(r2-r1))\ndef lateral_surface_triangle(r,b):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and base b.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+b)**2\n    return (1/2)*math.pi*(r1*r1*math.sqrt(r2-r1)+b*r1*r1*math.sqrt(r2-r1)+r2*r2*math.sqrt(r2-r1))\ndef area_triangle(r,b):\n    '''\n    Write a function to find the area of a triangle given radius r and base b.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+b)**2\n    return (1/2)*math.pi*(r1*r1*b*math.sqrt(r2-r1)+r2*r2*b*math.sqrt(r2-r1)+r1*r1*b*math.sqrt(r2-r1))\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given radius r.\n    '''\n    #Write your code here\n    return (math.pi*r*r)\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube given radius r.\n    '''\n    #Write your code here\n    return (r*r*r)\ndef volume_triangle(r,b):\n    '''\n    Write a function to find the volume of a cube given radius r and base b.\n    '''\n    #Write your code here\n    return (b*b*b)\ndef volume_cuboid(r,l,w):\n    '''\n    Write a function to find the volume of a cuboid given radius r, length l, and width w.\n    '''\n    #Write your code here\n    return (l*w*r*r*r)\ndef lateral_surface_cube(r):\n    '''\n    Write a function to find the lateral surface area of a cube given radius r.\n    '''\n    #Write your code here\n    return (6*math.pi*r*r*r)\ndef lateral_surface_triangle(r,b):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and base b.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+b)**2\n    return (1/2)*math.pi*(r1*r1*b*math.sqrt(r2-r1)+b*r1*r1*b*math.sqrt(r2-r1)+r2*r2*b*b*math.sqrt(r2-r1))\ndef lateral_surface_cuboid(r,l,w):\n    '''\n    Write a function to find the lateral surface area of a cuboid given radius r, length l, and width w.\n    '''\n    #Write your code here\n    r1=r**2\n    r2=(r1+l)**2\n    r3=(r2+w)**2\n    return (1/6)*math.pi*(r1*r1*w*math.sqrt(r2-r1)+r1*r1*l*w*math.sqrt(r2-r1)+r2*r2*w*w*math.sqrt(r2-r1)+r1*r1*w*l*math"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        r=float(r)\n        h=float(h)\n        return r*math.pi*(r*(r+math.sqrt(h*h+r*r))+math.sqrt(h*h+r*r))\n    else:\n        return 0\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        r=float(r)\n        h=float(h)\n        return 2*r*math.pi*(r*(r+math.sqrt(h*h+r*r))+math.sqrt(h*h+r*r))\n    else:\n        return 0\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    if r>0:\n        r=float(r)\n        return 4*math.pi*r*r\n    else:\n        return 0\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    if r>0 and h>0:\n        r=float(r)\n        h=float(h)\n        return (2*r*math.pi+(r+h)*math.pi)+(h*(r+h)*math.pi)\n    else:\n        return 0\ndef lateralsurface_trap(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trap given length a,b,c and d.\n    '''\n    if a>0 and b>0 and c>0 and d>0:\n        a=float(a)\n        b=float(b)\n        c=float(c)\n        d=float(d)\n        return (a+b)*c+(a+c)*d+(b+c)*d\n    else:\n        return 0\ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given length b and height h.\n    '''\n    if b>0 and h>0:\n        b=float(b)\n        h=float(h)\n        return b*h\n    else:\n        return 0\ndef lateralsurface_octagon(a):\n    '''\n    Write a function to find the lateral surface area of a octagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return ((a+a)*math.pi)/4\n    else:\n        return 0\ndef lateralsurface_rectangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length b and height h.\n    '''\n    if b>0 and h>0:\n        b=float(b)\n        h=float(h)\n        return 2*b*h\n    else:\n        return 0\ndef lateralsurface_rhombus(a,b):\n    '''\n    Write a function to find the lateral surface area of a rhombus given length a and height b.\n    '''\n    if a>0 and b>0:\n        a=float(a)\n        b=float(b)\n        return 2*(a+b)*math.sqrt(2)/2\n    else:\n        return 0\ndef lateralsurface_dodecagon(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return ((a+a)*math.pi)/4\n    else:\n        return 0\ndef lateralsurface_tetragon(a):\n    '''\n    Write a function to find the lateral surface area of a tetragon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(2)/2)\n    else:\n        return 0\ndef lateralsurface_kite(a,h):\n    '''\n    Write a function to find the lateral surface area of a kite given length a and height h.\n    '''\n    if a>0 and h>0:\n        a=float(a)\n        h=float(h)\n        return a*h/2\n    else:\n        return 0\ndef lateralsurface_nonagon(a):\n    '''\n    Write a function to find the lateral surface area of a nonagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(3)/4)\n    else:\n        return 0\ndef lateralsurface_hexaagon(a):\n    '''\n    Write a function to find the lateral surface area of a hexagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(3)/4)\n    else:\n        return 0\ndef lateralsurface_pentagon(a):\n    '''\n    Write a function to find the lateral surface area of a pentagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(3)/4)\n    else:\n        return 0\ndef lateralsurface_hexagon(a):\n    '''\n    Write a function to find the lateral surface area of a hexagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(3)/4)\n    else:\n        return 0\ndef lateralsurface_heptagon(a):\n    '''\n    Write a function to find the lateral surface area of a pentagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(3)/4)\n    else:\n        return 0\ndef lateralsurface_octagon(a):\n    '''\n    Write a function to find the lateral surface area of a octagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(2)/4)\n    else:\n        return 0\ndef lateralsurface_icosagon(a):\n    '''\n    Write a function to find the lateral surface area of an icosagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(2)/4)\n    else:\n        return 0\ndef lateralsurface_octagon(a):\n    '''\n    Write a function to find the lateral surface area of a octagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(2)/4)\n    else:\n        return 0\ndef lateralsurface_icosagon(a):\n    '''\n    Write a function to find the lateral surface area of an icosagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(2)/4)\n    else:\n        return 0\ndef lateralsurface_octagon(a):\n    '''\n    Write a function to find the lateral surface area of an octagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(2)/4)\n    else:\n        return 0\ndef lateralsurface_nonagon(a):\n    '''\n    Write a function to find the lateral surface area of a nonagon given length a.\n    '''\n    if a>0:\n        a=float(a)\n        return (a*a*math.sqrt(3)/4)\n    else:\n        return 0\ndef lateralsurface_dodecagon(a):\n    '''\n    Writ"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # write your function here\n    return (3.14 * (r**2))/4.0 - (3.14 * ((r - h)**2))/4.0\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+h)\ndef lateralsurface_square(b):\n    '''\n    Write a function to find the lateral surface area of a square given length b.\n    '''\n    return b*b\ndef lateralsurface_rect(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and width w.\n    '''\n    return l*w\ndef lateralsurface_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a right triangle with legs of length b1 and b2 and height h.\n    '''\n    return (b1+b2)*h/2\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle with radius r.\n    '''\n    return math.pi*r*r\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere with radius r.\n    '''\n    return 4*math.pi*r*r\ndef lateralsurface_sphere2(r):\n    '''\n    Write a function to find the lateral surface area of a sphere with radius r.\n    '''\n    return 4*math.pi*r*r*(3.0/2.0)\ndef lateralsurface_parabola(a,h):\n    '''\n    Write a function to find the lateral surface area of a parabola with legs of length a and height h.\n    '''\n    return (3*a*a+4*a*h)/8\ndef lateralsurface_hyperbola(a,h):\n    '''\n    Write a function to find the lateral surface area of a hyperbola with legs of length a and height h.\n    '''\n    return (a*a*(3.0/4.0)+h*h)/8\ndef lateralsurface_pyramid(a,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid with legs of length a and height h.\n    '''\n    return (3*a*a+2*a*h)/8\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone with radius r and height h.\n    '''\n    return math.pi*r*(r+h)\ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid with length l, width w, and height h.\n    '''\n    return l*w*h\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere with radius r.\n    '''\n    return 4*math.pi*r*r\ndef lateralsurface_sphere2(r):\n    '''\n    Write a function to find the lateral surface area of a sphere with radius r.\n    '''\n    return 4*math.pi*r*r*(3.0/2.0)\ndef lateralsurface_polygon(n,r):\n    '''\n    Write a function to find the lateral surface area of a regular polygon with n sides, and radius r.\n    '''\n    return n*math.pi*r*r/4\ndef lateralsurface_polygon2(n,r):\n    '''\n    Write a function to find the lateral surface area of a regular polygon with n sides, and radius r.\n    '''\n    return n*math.pi*r*r*(3.0/2.0)\ndef lateralsurface_octagon(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 3*r*r\ndef lateralsurface_hexagon(r):\n    '''\n    Write a function to find the lateral surface area of a hexagon with radius r.\n    '''\n    return 2*r*r\ndef lateralsurface_octagon2(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r\ndef lateralsurface_octagon3(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/2.0)\ndef lateralsurface_octagon4(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r*(1.0/3.0)\ndef lateralsurface_octagon5(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/4.0)\ndef lateralsurface_octagon6(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r*(1.0/5.0)\ndef lateralsurface_octagon7(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/6.0)\ndef lateralsurface_octagon8(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r*(1.0/7.0)\ndef lateralsurface_octagon9(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/8.0)\ndef lateralsurface_octagon10(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r*(1.0/9.0)\ndef lateralsurface_octagon11(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/10.0)\ndef lateralsurface_octagon12(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r*(1.0/11.0)\ndef lateralsurface_octagon13(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/12.0)\ndef lateralsurface_octagon14(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r*(1.0/13.0)\ndef lateralsurface_octagon15(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/14.0)\ndef lateralsurface_octagon16(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r*(1.0/15.0)\ndef lateralsurface_octagon17(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/16.0)\ndef lateralsurface_octagon18(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.pi*r*r*(1.0/17.0)\ndef lateralsurface_octagon19(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return 2*r*r*(1.0/18.0)\ndef lateralsurface_octagon20(r):\n    '''\n    Write a function to find the lateral surface area of an octagon with radius r.\n    '''\n    return math.p"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=math.pi*(r**2)\n    B=2*math.pi*r*h\n    return (A+B)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Write a program to compute the lateral surface area of a right circular cone\n    #Write a function that takes in r and h as parameters and returns the lateral surface area of a right circular cone\n    \n    #solution 1\n    #the equation of a right circular cone is the following:\n    #Area of a right circular cone = pi*r^2 + 2*pi*r*h\n    \n    #solution 2\n    #Area of a right circular cone = pi*r^2 + 2*pi*r*h\n    #Area of a right circular cone = pi*r*h\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*h/2\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone = pi*r*(h/2)\n    #Area of a right circular cone "
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #S = 2.22*pi*r*h\n    \n    return 2.22*math.pi*r*h\ndef cone_basearea(r,h):\n    '''\n    Write a function to find the base area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_height(r,h):\n    '''\n    Write a function to find the height of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #h = h/2\n    \n    return h\ndef cone_basearea(r,h):\n    '''\n    Write a function to find the base area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_sidearea(r,h):\n    '''\n    Write a function to find the side area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #S = 2.22*pi*r*h\n    \n    return 2.22*math.pi*r*h\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_vaparea(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*h*h\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_volumeparsec(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_vaparea(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_secvol(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_height(r,h):\n    '''\n    Write a function to find the height of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #h = h/2\n    \n    return h\ndef cone_sidearea(r,h):\n    '''\n    Write a function to find the side area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_surfacearea(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #S = 2.22*pi*r*h\n    \n    return 2.22*math.pi*r*h\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_vaparea(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #A = 1.01*pi*r^2\n    \n    return 1.01*math.pi*r*r\ndef cone_volumeparsec(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_vaparea(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_secvol(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_volumetometer(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_volumetometer2(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    #r = radius of base of cone\n    #h = height of cone\n    #V = 1/3*pi*r*h^3\n    \n    return 1/3*math.pi*r*r*r\ndef cone_volumetometer3"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[,.]+', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\s,]+',':',text)\n    return text\ndef format_address(address_string):\n    '''\n    Write a function to capitalize the first and last name in an address string\n    in the form of \"firstname lastname address\"\n    '''\n    return replace_specialchar(address_string.replace(',','').replace('.','').replace(' ',', ').title())\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    def replace_char(match):\n        return match.group(0).replace(' ', ':').replace(',',':').replace('.',':')\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = text.replace(\" \", \":\").replace(\",\",\":\").replace(\".\",\":\").replace(\";\",\":\").strip()\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # pattern = re.compile('[^A-Za-z0-9]+')\n    # text = pattern.sub(':',text)\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('-','_')\n    text = text.replace('/','_')\n    text = text.replace(' ', '_')\n    text = text.replace(',','_')\n    text = text.replace('.','_')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #first step: replace spaces,commas and dots with colon\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r'[,.]',':', text)\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = [' ', '.', ',', ':', ';', '?']\n    for s in special_chars:\n        text = re.sub(s, ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.',':').replace(',',':').replace(' ',':')\n    return text\ndef replace_all(text,old,new):\n    '''\n    Given a string replace all occurrences of old with new.\n    '''\n    return text.replace(old,new)\ndef word_to_dictionary(text):\n    '''\n    Return a dictionary of the words in a text.\n    '''\n    words = {}\n    for line in text.split('\\n'):\n        for word in re.findall('[a-z]+',line.lower()):\n            if word not in words:\n                words[word] = 1\n            else:\n                words[word]+=1\n    return words\ndef most_common(text):\n    '''\n    Return a list of the most common words in a text.\n    '''\n    words = word_to_dictionary(text)\n    counts = words.values()\n    words = words.keys()\n    return sorted(words,key=lambda word: counts[words.index(word)],reverse=True)\ndef sort_by_length(text):\n    '''\n    Return a list of all words in a text sorted by their length.\n    '''\n    words = word_to_dictionary(text)\n    words = words.keys()\n    return sorted(words,key=len)\ndef is_punct(char):\n    '''\n    Return True if char is a punctuation mark and False otherwise.\n    '''\n    return char in [',','?','!',':',';','-','\\'']\ndef generate_report(text):\n    '''\n    Given a text, generate a report of the number of words, sentence starts,\n    and end of sentences in the text.\n    '''\n    import string\n    text = replace_all(text,',',';')\n    text = replace_all(text,':',',')\n    text = replace_all(text,';','.')\n    text = replace_all(text,'?','.')\n    text = replace_all(text,'\"','.')\n    text = replace_all(text,'-',' ')\n    text = replace_all(text,',','')\n    text = text.replace('\\n','. ')\n    text = text.replace('[','')\n    text = text.replace(']','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    sentence_end = ['.','!','?','...',':']\n    words = word_to_dictionary(text)\n    n_sentences = 0\n    n_words = 0\n    n_long_words = 0\n    n_punctuation = 0\n    n_short_words = 0\n    n_paras = 0\n    for line in text.split('\\n'):\n        n_paras += 1\n        n_words += len(line.split())\n        n_sentences += len(line.split('.'))\n        if len(line) < 30:\n            n_short_words += 1\n        else:\n            n_long_words += 1\n        for word in line.split(' '):\n            if is_punct(word[-1]):\n                n_punctuation += 1\n    report = '''\n    Report for {0}:\n    Total number of paragraphs: {1}\n    Total number of sentences: {2}\n    Total number of words: {3}\n    Total number of short words: {4}\n    Total number of long words: {5}\n    Total number of punctuation marks: {6}\n    '''.format(text,n_paras,n_sentences,n_words,n_short_words,n_long_words,n_punctuation)\n    return report\ndef get_file_name():\n    '''\n    Read the user's input for a file.\n    If the file name is not valid print an error message and prompt the user again.\n    '''\n    name = input('Enter the file name: ')\n    try:\n        file_obj = open(name,'r')\n        return file_obj\n    except:\n        print('File not found. Try again.')\n        return get_file_name()\ndef count_words(file_name):\n    '''\n    Given a file name, open the file and return a dictionary of the words in the\n    file and their frequency.\n    '''\n    word_count = {}\n    for line in file_name:\n        for word in line.split():\n            word = replace_specialchar(word)\n            if word not in word_count:\n                word_count[word] = 1\n            else:\n                word_count[word] += 1\n    return word_count\ndef top_words(file_name,n):\n    '''\n    Given a file name and a number of words, open the file and return a list of\n    n of the most frequent words in the file.\n    '''\n    word_count = count_words(file_name)\n    word_count = sorted(word_count.items(),key=lambda x: x[1],reverse=True)\n    return word_count[:n]\ndef get_first_word(file_name):\n    '''\n    Given a file name, open the file, read the first word of each line, and return\n    a list of the words.\n    '''\n    words = []\n    for line in file_name:\n        words.append(line.split()[0])\n    return words\ndef top_files(n):\n    '''\n    Given a number of files, read each file and return a list of the first word\n    for all the files.\n    '''\n    import os\n    files = os.listdir('texts')\n    words = []\n    for file in files:\n        if '.txt' in file:\n            try:\n                file_obj = open('texts/'+file,'r')\n                words.extend(get_first_word(file_obj))\n            except:\n                pass\n    return sorted(set(words),key=words.index)\ndef files_with_word(word,n):\n    '''\n    Given a word and a number of files, return the number of files that contain\n    the word.\n    '''\n    import os\n    files = os.listdir('texts')\n    count = 0\n    for file in files:\n        if '.txt' in file:\n            try:\n                file_obj = open('texts/'+file,'r')\n                if word in get_first_word(file_obj):\n                    count += 1\n            except:\n                pass\n    return count\ndef most_frequent(n):\n    '''\n    Return a list of the first n words in the 'texts' directory and their\n    frequency.\n    '''\n    files = top_files(n)\n    words = []\n    for file in files:\n        words.extend(get_first_word(open('texts/'+file,'r')))\n    words = sorted(set(words),key=words.index)\n    word_count = {}\n    for word in words:\n        word_count[word] = files_with_word(word,n)\n    return sorted(word_count.items(),key=lambda x: x[1],reverse=True)\ndef main():\n    '''\n    Print a report of the number of files, words, sentences, and\n    most frequent words in the 'texts' directory.\n    '''\n    files = get_file_name()\n    n = int(input('Enter a number: '))\n    print(generate_report(files.read()))\n    print(most_frequent(n))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Base Case: \n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    if A[-1] == x:\n        return len(A)\n    # Recursive Case: \n    middle = len(A) // 2\n    if A[middle] == x:\n        return middle\n    if A[0] < x:\n        return find_first_occurrence(A[middle:], x)\n    else:\n        return find_first_occurrence(A[:middle], x)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            end = mid - 1\n        if A[mid] < x:\n            start = mid + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)-1\n    while i <= j:\n        mid = (i+j)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    else:\n        for i in xrange(len(A)):\n            if A[i] == x:\n                return i\n            elif A[i] > x:\n                return i\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    try:\n        return (A.index(x) if x in A else -1)\n    except ValueError:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    L, R = 0, len(A)-1\n    while L<=R:\n        mid = (L+R)//2\n        if x==A[mid]:\n            return mid\n        elif x<A[mid]:\n            R = mid-1\n        else:\n            L = mid+1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum_Of_Subarray_Prod_Iterative(arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #find the sum of all elements in the list\n    total_sum = 0\n    for i in arr:\n        total_sum += i\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_subarr = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sum_of_subarr += prod(arr[i:j])\n    return sum_of_subarr\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Solution - 1\n    arr.sort()\n    prod = 1\n    l = len(arr)\n    for i in xrange(l):\n        prod = prod * arr[i]\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    result = arr[0]\n    for i in range(1,len(arr)):\n        temp = arr[i]\n        for j in range(i):\n            temp = temp*arr[j]\n        result = result + temp\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    product = 1\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            product = product*arr[j]\n            s = s + product\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([prod(arr[i:]) for i in range(len(arr))])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sums = [0 for x in range(n)]\n    sums[0] = arr[0]\n    for i in range(1, n):\n        sums[i] = sums[i-1] * arr[i]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    dp = [0]\n    for x in arr:\n        dp.append(dp[-1]+x)\n    \n    # print(dp)\n    r = len(arr)\n    for i in range(r):\n        for j in range(i+1,r+1):\n            prod = 1\n            for k in range(i,j):\n                prod *= arr[k]\n            \n            dp[j] -= prod\n    \n    return dp[-1]\n    \n    \ndef sum_Of_Subarray_Prod_opt(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    dp = [1]\n    for x in arr:\n        dp.append(dp[-1]*x)\n    \n    # print(dp)\n    r = len(arr)\n    for i in range(r):\n        for j in range(i+1,r+1):\n            prod = 1\n            for k in range(i,j):\n                prod *= arr[k]\n            \n            dp[j] -= prod\n    \n    return dp[-1]\n    \n    \n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    prod_list = [None] * n\n    prod_list[0] = 1\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 1 << (size - 1)\n    return n ^ mask\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bin_num = bin(n)\n    # print(bin_num)\n    res = bin_num[2:]\n    # print(res)\n    res = res[::-1]\n    # print(res)\n    res = res.replace(\"0\",\"2\",1)\n    res = res.replace(\"1\",\"0\",1)\n    res = res.replace(\"2\",\"1\",1)\n    res = res[::-1]\n    # print(res)\n    # print(int(res, 2))\n    return int(res, 2)\n    \n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #n = int(n)\n    \n    #print bin(n)\n    \n    #x = bin(n)\n    #print x[2:]\n    \n    #x = x[2:]\n    #print x\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #n = len(x)\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x[::-1]\n    #print x\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x[::-1]\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #n = n + 1\n    \n    #x = x[1:n-1]\n    #print x\n    \n    #x = x[::-1]\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #n = len(x)\n    \n    #x = x.split(\"0\")\n    #print x\n    \n    #x = \"\".join(x)\n    #print x\n    \n    #x = x.split(\"1\")\n    "
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(bin(n))\n    print(bin(~n))\n    return ~n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    i=1\n    while i<n:\n        bit = n & 1\n        n >>= 1\n        n |= bit << (i-1)\n        i += 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ (n & (n-1))) \n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n=bin(n)[2:]\n    n=n[:-1]+str(int(n[-1])^1)\n    return int(n,2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1))\n    return n & 0x55555555\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    count = 0\n    mask = 1\n    while (n > 0):\n        if (n & 1):\n            n ^= mask\n        mask <<= 1\n        n >>= 1\n        count += 1\n    return count\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & ~(1 << ((n.bit_length() + 1) // 2))  \n    n = n | (1 << ((n.bit_length() + 1) // 2))  \n    return n  \n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    i = len(a) - 1\n    while i > 0 and a[i] < a[i - 1]:\n        temp = a[i]\n        a[i] = a[i - 1]\n        a[i - 1] = temp\n        i = i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] > x:\n        a.insert(0, x)\n        return a\n    else:\n        for i in range(1, len(a)):\n            if a[i] > x:\n                a.insert(i, x)\n                return a\n        a.append(x)\n        return a\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] < x:\n        a.insert(0, x)\n        return a\n    else:\n        for i in range(1, len(a)):\n            if a[i] < x:\n                a.insert(i, x)\n                return a\n        a.append(x)\n        return a\ndef left_index(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef right_index(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef bin_search_left(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\ndef bin_search_right(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right\ndef bin_search_index(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right + 1\ndef mod_binary_search(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return (left + 1)%len(a)\ndef n_search(a, n, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef n_search_right(a, n, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\ndef n_search_left(a, n, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\ndef n_search_index(a, n, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right + 1\ndef find_k_largest(a, k):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == k:\n            retur"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # find the index of x\n    idx = bisect.bisect(a, x)\n    # insert x\n    a.insert(idx, x)\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        a.append(x)\n    else:\n        if x > a[-1]:\n            a.append(x)\n        else:\n            l = len(a)\n            p = l - 1\n            while p >= 0 and a[p] > x:\n                p -= 1\n            a.insert(p + 1, x)\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # get the index of x in the array\n    idx = bisect.bisect_left(a, x)\n    if idx > 0 and a[idx-1] == x:\n        return idx\n    return None\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    index = bisect.bisect_left(a, x)\n    return index\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    index = bisect.bisect_right(a, x)\n    return index\ndef median(a):\n    '''\n    Write a function to compute the median of a list. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n % 2 == 0:\n        return (a[n/2] + a[n/2 - 1]) / 2.0\n    else:\n        return a[n/2]\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # return bisect.bisect_left(a, x)\n    return bisect.bisect(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while i < len(a) and x <= a[i]:\n        i += 1\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.lower()\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # use regex\n    # res = re.findall(regex, string)\n    # if res:\n    #     print('True')\n    # else:\n    #     print('False')\n    # \n    # # use python \n    # if string[0] in 'aeiouAEIOU':\n    #     print('True')\n    # else:\n    #     print('False')\n    #\n    if string[0] in 'aeiouAEIOU':\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"String is starting with vowel\")\n    else:\n        print(\"String is starting with consonant\")\n        \ncheck_str('rtyu')\ncheck_str('aasfs')\ncheck_str('34$%^&')\ncheck_str('vvvvvvvvvvvvvvvvvvvvvvvvvv')"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print \"Vowel present\"\n    else:\n        print \"No vowel present\"\n    #return re.match(regex, string)\ncheck_str(\"dore\")\ncheck_str(\"nare\")\ncheck_str(\"listy\")\ncheck_str(\"atom\")"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)):\n        print('The given string is starting with vowel')\n    else:\n        print('The given string is starting with consonant')\n    return\ncheck_str(input('Enter any string'))\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return True if re.match(regex,string) else False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    p = re.compile(regex) \n    m = p.search(string)\n    if m:\n        print('String starts with vowel')\n    else:\n        print('String does not start with a vowel')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        print(string +'is starting with a vowel')\n    else: \n        print(string +'is starting with a consonant')\nif __name__ == '__main__': \n    check_str('m')\n    check_str('amazing')\n    check_str('amazing')\n    check_str('a')\n    check_str(''"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 1/float(n-1) * (n-1) + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1/n\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return pow(n,n-1) + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return 1/(1-n)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    return n * (n + 1) * (n + 2) / 6\ndef find_Triangular_Number(index):\n    '''\n    Write a python function to find the value of triangular number with index.\n    https://www.geeksforgeeks.org/find-triangular-number-with-an-index/\n    '''\n    if index < 0:\n        return 'Value of index must be positive'\n    if index == 0:\n        return 1\n    n = (index - 1) // 2\n    if (index % 2 == 0):\n        return n * (n + 1) / 2\n    else:\n        return (n * (n + 1) * 2) / 2\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #intializing the counter \n    i=1\n    #intializing the value of n \n    n = int(n)\n    #intializing the index of i \n    j=0\n    # intializing the value of n/i \n    m=1\n    #intializing the value of n/j \n    p=0\n    #intializing the value of n/m \n    q=0\n    #intializing the value of n/p \n    r=0\n    #intializing the value of n/q \n    s=0\n    #intializing the value of n/r \n    t=0\n    #intializing the value of n/s \n    u=0\n    #intializing the value of n/t \n    v=0\n    #intializing the value of n/u \n    w=0\n    #intializing the value of n/v \n    x=0\n    #intializing the value of n/w \n    y=0\n    #intializing the value of n/x \n    z=0\n    #intializing the value of n/y \n    Index = 0\n    #intializing the value of Index \n    while i<=n: \n        j=0\n        m=1\n        p=0\n        q=0\n        r=0\n        s=0\n        t=0\n        u=0\n        v=0\n        w=0\n        x=0\n        y=0\n        z=0\n        while j<=i: \n            p=m*(m+1)/2\n            q=m*(m+1)*m/4\n            r=p*(p+1)*(2*p+1)/6\n            s=q*(q+1)*(3*q+1)/2\n            t=r*(r+1)*(2*r+1)/6\n            u=s*(s+1)*(3*s+1)/2\n            v=t*(t+1)*(2*t+1)/6\n            w=u*(u+1)*(3*u+1)/2\n            x=v*(v+1)*(3*v+1)/2\n            y=w*(w+1)*(3*w+1)/2\n            z=x*(x+1)*(3*x+1)/2\n            j=j+1\n            m=m+1\n        Index = Index + (x*(x+1)*(3*x+1)/2)\n        i=i+1\n    return Index\ndef find_Index2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #intializing the counter \n    i=1\n    #intializing the value of n \n    n = int(n)\n    #intializing the index of i \n    j=0\n    # intializing the value of n/i \n    m=1\n    #intializing the value of n/j \n    p=0\n    #intializing the value of n/m \n    q=0\n    #intializing the value of n/p \n    r=0\n    #intializing the value of n/q \n    s=0\n    #intializing the value of n/r \n    t=0\n    #intializing the value of n/s \n    u=0\n    #intializing the value of n/t \n    v=0\n    #intializing the value of n/u \n    w=0\n    #intializing the value of n/v \n    x=0\n    #intializing the value of n/w \n    y=0\n    #intializing the value of n/x \n    z=0\n    #intializing the value of n/y \n    Index = 0\n    #intializing the value of Index \n    while i<=n: \n        j=0\n        m=1\n        p=0\n        q=0\n        r=0\n        s=0\n        t=0\n        u=0\n        v=0\n        w=0\n        x=0\n        y=0\n        z=0\n        while j<=i: \n            p=m*(m+1)/2\n            q=m*(m+1)*m/4\n            r=p*(p+1)*(2*p+1)/6\n            s=q*(q+1)*(3*q+1)/2\n            t=r*(r+1)*(2*r+1)/6\n            u=s*(s+1)*(3*s+1)/2\n            v=t*(t+1)*(2*t+1)/6\n            w=u*(u+1)*(3*u+1)/2\n            x=v*(v+1)*(3*v+1)/2\n            y=w*(w+1)*(3*w+1)/2\n            z=x*(x+1)*(3*x+1)/2\n            j=j+1\n            m=m+1\n        Index = Index + (z*(z+1)*(3*z+1)/2)\n        i=i+1\n    return Index\ndef find_Index3(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #intializing the counter \n    i=1\n    #intializing the value of n \n    n = int(n)\n    #intializing the index of i \n    j=0\n    # intializing the value of n/i \n    m=1\n    #intializing the value of n/j \n    p=0\n    #intializing the value of n/m \n    q=0\n    #intializing the value of n/p \n    r=0\n    #intializing the value of n/q \n    s=0\n    #intializing the value of n/r \n    t=0\n    #intializing the value of n/s \n    u=0\n    #intializing the value of n/t \n    v=0\n    #intializing the value of n/u \n    w=0\n    #intializing the value of n/v \n    x=0\n    #intializing the value of n/w \n    y=0\n    #intializing the value of n/x \n    z=0\n    #intializing the value of n/y \n    Index = 0\n    #intializing the value of Index \n    while i<=n: \n        j=0\n        m=1\n        p=0\n        q=0\n        r=0\n        s=0\n        t=0\n        u=0\n        v=0\n        w=0\n        x=0\n        y=0\n        z=0\n        while j<=i: \n            p=m*(m+1)/2\n            q=m*(m+1)*m/4\n            r=p*(p+1)*(2*p+1)/6\n            s=q*(q+1)*(3*q+1)/2\n            t=r*(r+1)*(2*r+1)/6\n            u=s*(s+1)*(3*s+1)/2\n            v=t*(t+1)*(2*t+1)/6\n            w=u*(u+1)*(3*u+1)/2\n            x=v*(v+1)*(3*v+1)/2\n            y=w*(w+1)*(3*w+1)/2\n            z=x*(x+1)*(3*x+1)/2\n            j=j+1\n            m=m+1\n        Index = Index + (z*(z+1)*(3*"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #print \"Calling find_Index() with n =\", n \n    i = 1\n    while i < n: \n        i += 1\n    return i - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    i = 1\n    while i < n:\n        i += 1\n    return i\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0 \n    elif n == 2: \n        return 1 \n    else: \n        return int(math.ceil(math.log(n,3))-1) \ndef smallTriangle(n): \n    '''\n    Write a python function to find the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (3**(n-1)) + 1\ndef isTriangle(n): \n    '''\n    Write a python function to check whether the given number is a triangular number. https://www.geeksforgeeks.org/check-whether-the-given-number-is-triangular-number/\n    '''\n    return (1.0 * (smallTriangle(n))**2) == n\ndef find_number(n): \n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-palindrome-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    elif n > 0: \n        reverse = 0 \n        while (n > reverse): \n            remainder = n % 10 \n            reverse = reverse * 10 + remainder \n            n = n // 10 \n        return n == reverse or reverse // 10 == n\ndef isPrime(n): \n    '''\n    Write a python function to check whether a given number is prime or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-prime-or-not/\n    '''\n    if n == 1: \n        return False \n    elif n > 1: \n        for i in range(2,int(math.sqrt(n))+1): \n            if n % i == 0: \n                return False \n        return True \ndef factorial(n): \n    '''\n    Write a python function to find factorial of a number. https://www.geeksforgeeks.org/factorial-of-a-number-in-python/\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)\ndef isPentagonal(n): \n    '''\n    Write a python function to check whether a given number is pentagonal or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-pentagonal-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    elif n > 0: \n        x = (1 + math.sqrt(1+8*n))/4 \n        return x == int(x) \ndef isPentagonal_Square(n): \n    '''\n    Write a python function to check whether a given number is pentagonal or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-pentagonal-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    elif n > 0: \n        x = (1 + math.sqrt(1+8*n))/4 \n        return x == int(x) \ndef isPentagonal_Square_Factorial(n): \n    '''\n    Write a python function to check whether a given number is pentagonal or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-pentagonal-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    elif n > 0: \n        x = (1 + math.sqrt(1+8*n))/4 \n        return x == int(x) \ndef isPentagonal_Square_Factorial_Square(n): \n    '''\n    Write a python function to check whether a given number is pentagonal or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-pentagonal-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    elif n > 0: \n        x = (1 + math.sqrt(1+8*n))/4 \n        return x == int(x) \ndef isPerfect(n): \n    '''\n    Write a python function to check whether a given number is perfect or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-perfect-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    else: \n        sum = 0 \n        for i in range(1,n): \n            if n % i == 0: \n                sum += i \n        return sum == n \ndef isPerfect_Square(n): \n    '''\n    Write a python function to check whether a given number is perfect square or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-perfect-square-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    else: \n        return int(math.sqrt(n))**2 == n \ndef isPerfect_Square_Factorial(n): \n    '''\n    Write a python function to check whether a given number is perfect square or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-perfect-square-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    else: \n        return int(math.sqrt(n))**2 == n \ndef isPerfect_Square_Factorial_Square(n): \n    '''\n    Write a python function to check whether a given number is perfect square or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-perfect-square-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    else: \n        return int(math.sqrt(n))**2 == n \ndef isHexagonal(n): \n    '''\n    Write a python function to check whether a given number is hexagonal or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-hexagonal-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    elif n > 0: \n        x = (1 + math.sqrt(1+8*n))/4 \n        return x == int(x) \ndef isHexagonal_Factorial(n): \n    '''\n    Write a python function to check whether a given number is hexagonal or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-hexagonal-or-not/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True\n    elif n > 0: \n        x = (1 + math.sqrt(1+8*n))/4 \n        return x == int(x) \ndef isHexagonal_Factorial_Square(n): \n    '''\n    Write a python function to check whether a given number is hexagonal or not. https://www.geeksforgeeks.org/python-program-check-if-a-number-is-hexagonal-or-not/"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (i<10):\n        if (int(math.pow(i,3)) == n):\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 1):\n        return 0\n    if (n == 2):\n        return 1\n    if (n == 3):\n        return 2\n    if (n == 4):\n        return 3\n    if (n == 5):\n        return 4\n    return math.floor(n * math.sqrt(n - 1)) + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    ans = 0\n    for i in range(1,10**(n-1)): \n        if i * (i + 1) * 0.5 == int(i * (i + 1) * 0.5): \n            ans = i \n            break\n    return ans\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # calculate the triangular number \n    t = 1\n    while True:\n        t += 1\n        if len(str(t*(t+1)//2)) == n:\n            return t\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    m=0\n    n=int(n)\n    for i in range(1,n+1):\n        m=m+i\n    return m\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    temp_dict = {}\n    for key, value in zip(test_tup, test_tup[1:]):\n        temp_dict[key] = value\n    return temp_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Your code here\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(len(test_tup) - 1)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    my_dict = {}\n    for i in range(len(test_tup)):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    \n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    l = len(test_tup)\n    dic = {}\n    for i in range(0, l, 2):\n        dic[test_tup[i]] = test_tup[i+1]\n    return dic\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = {}\n    res[test_tup[0]] = test_tup[1]\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #dictionary_2 = dict(zip(test_tup[:-1], test_tup[1:]))\n    dict_2 = {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1)}\n    return dict_2\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(len(test_tup)):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(0, len(test_tup), 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[0] == s[1] == s[2]\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s))==1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all( x == s[0] for x in s )\n    \ndef remove_All_Duplicates(s) :\n    '''\n    Write a python function to remove all the duplicates from the string.\n    '''\n    for c in s :\n        while s.count(c) > 1 :\n            s = s.replace(c,'',1)\n    return s\n    \ndef duplicate_Characters(s) :\n    '''\n    Write a python function to count the duplicate characters in the string.\n    '''\n    dup_Count = {}\n    for c in s :\n        if c in dup_Count :\n            dup_Count[c] += 1\n        else :\n            dup_Count[c] = 1\n    return dup_Count\n    \ndef count_Repeating_Character(s) :\n    '''\n    Write a python function to count the no of times a character repeats in the string.\n    '''\n    count = {}\n    for c in s :\n        if c in count :\n            count[c] += 1\n        else :\n            count[c] = 1\n    return count\n    \ndef character_Occurence(s) :\n    '''\n    Write a python function to count the no of times a character repeats in the string.\n    '''\n    count = {}\n    for c in s :\n        if c in count :\n            count[c] += 1\n        else :\n            count[c] = 1\n    return count\n    \ndef word_Occurence(s) :\n    '''\n    Write a python function to count the no of times a word repeats in the string.\n    '''\n    word_Count = {}\n    for word in s.split() :\n        if word in word_Count :\n            word_Count[word] += 1\n        else :\n            word_Count[word] = 1\n    return word_Count\n    \ndef change_Case(s) :\n    '''\n    Write a python function to change the case of the letters in the string.\n    '''\n    new_str = \"\"\n    for c in s :\n        if c.isupper() :\n            new_str += c.lower()\n        else :\n            new_str += c.upper()\n    return new_str\n    \ndef char_and_Word_Occurence(s) :\n    '''\n    Write a python function to count the no of times a character repeats in the string.\n    '''\n    char_and_word_Count = {}\n    for c in s :\n        if c in char_and_word_Count :\n            char_and_word_Count[c] += 1\n        else :\n            char_and_word_Count[c] = 1\n    for word in s.split() :\n        if word in char_and_word_Count :\n            char_and_word_Count[word] += 1\n        else :\n            char_and_word_Count[word] = 1\n    return char_and_word_Count\n    \ndef num_Digits(s) :\n    '''\n    Write a python function to count the no of digits in the string.\n    '''\n    count = 0\n    for c in s :\n        if c in \"0123456789\" :\n            count += 1\n    return count\n    \ndef num_Digits_in_Words(s) :\n    '''\n    Write a python function to count the no of digits in the string.\n    '''\n    count = 0\n    for word in s.split() :\n        count += num_Digits(word)\n    return count\n    \ndef palindrome(s) :\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef palindrome_of_words(s) :\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    new_str = \"\"\n    for c in s :\n        if c in \"0123456789\" :\n            new_str += c\n    return new_str == new_str[::-1]\n    \ndef reverse_string(s) :\n    '''\n    Write a python function to reverse the string.\n    '''\n    new_str = \"\"\n    for c in s :\n        new_str = c + new_str\n    return new_str\n    \ndef reverse_word(s) :\n    '''\n    Write a python function to reverse the string.\n    '''\n    new_str = \"\"\n    for c in s :\n        if c in \"0123456789\" :\n            new_str += c\n    return new_str[::-1]\n    \ndef remove_Spaces(s) :\n    '''\n    Write a python function to remove the spaces in the string.\n    '''\n    new_str = \"\"\n    for c in s :\n        if c!= \" \" :\n            new_str += c\n    return new_str\n    \ndef substring_in_String(s) :\n    '''\n    Write a python function to find the substring in the string.\n    '''\n    substr = \"\"\n    for i in range(len(s)) :\n        for j in range(i+1,len(s)+1) :\n            substr = s[i:j]\n            if s.find(substr)!= -1 :\n                print substr\n    return substr\n    \ndef remove_String(s,substring) :\n    '''\n    Write a python function to remove the substring in the string.\n    '''\n    new_str = \"\"\n    for c in s :\n        if c not in substring :\n            new_str += c\n    return new_str\n    \ndef remove_duplicates(s) :\n    '''\n    Write a python function to remove the duplicates from the string.\n    '''\n    for c in s :\n        while s.count(c) > 1 :\n            s = s.replace(c,'',1)\n    return s\n    \ndef replace_all(s,old,new) :\n    '''\n    Write a python function to replace the old string with the new string in the string.\n    '''\n    new_str = \"\"\n    for c in s :\n        if c == old :\n            new_str += new\n        else :\n            new_str += c\n    return new_str\n    \ndef roman(n) :\n    '''\n    Write a python function to convert the roman number to integer.\n    '''\n    if n == \"I\" :\n        return 1\n    if n == \"V\" :\n        return 5\n    if n == \"X\" :\n        return 10\n    if n == \"L\" :\n        return 50\n    if n == \"C\" :\n        return 100\n    if n == \"D\" :\n        return 500\n    if n == \"M\" :\n        return 1000\n    \ndef integer_to_roman(n) :\n    '''\n    Write a python function to convert the roman number to integer.\n    '''\n    numeral = {\n    \"I\" : 1,\n    \"V\" : 5,\n    \"X\" : 10,\n    \"L\" : 50,\n    \"C\" : 100,\n    \"D\" : 500,\n    \"M\" : 1000,\n    }\n    if n > 3999 or n < 1 :\n        return 0\n    \n    str_n = str(n)\n    r = \"\"\n    for i in range(len(str_n)) :\n        if i > 0 and numeral[str_n[i]] > numeral[str_n[i-1]] :\n            r += numeral[str_n[i]] - 2 * numeral[str_n[i-1]]\n        else :\n            r += numeral[str_n[i]]\n    return r\n    \ndef change_digits(n) :\n    '''\n    Write a python function to change the digits of a number to roman number.\n    '''\n    new_num = \"\"\n    numeral = {\n    \"I\" : 1,\n    \"V\" : 5,\n    \"X\" : 10,\n    \"L\" : 50,\n    \"C\" : 100,\n    \"D\" : 500,\n    \"M\" : 1000,\n    }\n    new_num = \"\"\n    while n > 0 :\n        r = n % 10\n        n = "
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n    else :\n        if s[0] == s[1] :\n            return all_Characters_Same(s[1:])\n        else :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[1:]==s[:-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(1,len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #Code here\n    \n    if len(s)==1 :\n        return True\n    elif len(s)==2 :\n        if s[0]==s[1] :\n            return True\n        else :\n            return False\n    else :\n        if s[0]==s[1] and s[1]==s[2] :\n            return True\n        else :\n            return False\n        \n        \nprint(all_Characters_Same('abc'))\nprint(all_Characters_Same('ab'))\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3)*math.pow(side, 2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = float(side)\n    area = (3 * (side ** 2)) / 4\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 * (math.sqrt(3)/4) * (side**2)) / 4\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3)*(3**0.5)/4*side**2\n    return area\ndef area_triangle(base,height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    area = (base * height)/2\n    return area\ndef area_trapezium(base1,base2,height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    area = ((base1 + base2)*height)/2\n    return area\ndef area_parallelepiped(base,height,width):\n    '''\n    Write a function to caluclate the area of a parallelepiped.\n    '''\n    area = base * height * width\n    return area\ndef area_octogon(side):\n    '''\n    Write a function to caluclate the area of a octogon.\n    '''\n    area = (8**0.5)*side**2/4\n    return area\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    area = side**2\n    return area\ndef area_hexagon(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    area = (3**0.5/2)*side**2\n    return area\ndef area_rhombus(base,height):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    area = (base * height)/2\n    return area\ndef area_pyramid(base,height):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    area = (base * height**2)/2\n    return area\ndef area_triangle_to_rectangle(base1,base2):\n    '''\n    Write a function to caluclate the area of a triangle to rectangle.\n    '''\n    area = base1 * base2\n    return area\ndef area_triangle_to_rectangle_perimeter(base1,base2):\n    '''\n    Write a function to caluclate the perimeter of a triangle to rectangle.\n    '''\n    perimeter = base1 + base2\n    return perimeter\ndef area_triangle_to_square(base1,base2):\n    '''\n    Write a function to caluclate the area of a triangle to square.\n    '''\n    area = base1 * base2 /2\n    return area\ndef area_triangle_to_square_perimeter(base1,base2):\n    '''\n    Write a function to caluclate the perimeter of a triangle to square.\n    '''\n    perimeter = base1 + base2\n    return perimeter\ndef area_triangle_to_cylinder(base1,base2,height):\n    '''\n    Write a function to caluclate the area of a triangle to cylinder.\n    '''\n    area = (base1 * base2 * height) / 4\n    return area\ndef area_triangle_to_cylinder_perimeter(base1,base2,height):\n    '''\n    Write a function to caluclate the perimeter of a triangle to cylinder.\n    '''\n    perimeter = base1 + base2 + height\n    return perimeter\ndef area_triangle_to_sphere(base1,base2,height):\n    '''\n    Write a function to caluclate the area of a triangle to sphere.\n    '''\n    area = (base1 * base2 * height) / (4 * math.pi)\n    return area\ndef area_triangle_to_sphere_perimeter(base1,base2,height):\n    '''\n    Write a function to caluclate the perimeter of a triangle to sphere.\n    '''\n    perimeter = base1 + base2 + height\n    return perimeter\ndef area_circle_to_triangle(radius):\n    '''\n    Write a function to caluclate the area of a circle to triangle.\n    '''\n    area = (2 * math.pi * radius ** 2) / 4\n    return area\ndef area_circle_to_rectangle(radius):\n    '''\n    Write a function to caluclate the area of a circle to rectangle.\n    '''\n    area = math.pi * radius**2\n    return area\ndef area_circle_to_square(radius):\n    '''\n    Write a function to caluclate the area of a circle to square.\n    '''\n    area = math.pi * radius**2 /4\n    return area\ndef area_circle_to_hexagon(radius):\n    '''\n    Write a function to caluclate the area of a circle to hexagon.\n    '''\n    area = (math.pi * radius**2 * math.sqrt(3) / 4)\n    return area\ndef area_circle_to_octogon(radius):\n    '''\n    Write a function to caluclate the area of a circle to octogon.\n    '''\n    area = (math.pi * radius**2 * math.sqrt(2) / 8)\n    return area\ndef area_circle_to_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle to circle.\n    '''\n    area = math.pi * radius**2\n    return area\ndef area_circle_to_circle_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to circle.\n    '''\n    perimeter = 2 * math.pi * radius\n    return perimeter\ndef area_circle_to_triangle_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to triangle.\n    '''\n    perimeter = 2 * math.pi * radius\n    return perimeter\ndef area_circle_to_circle_to_square_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to square.\n    '''\n    perimeter = math.pi * radius * math.sqrt(2)\n    return perimeter\ndef area_circle_to_rectangle_to_square_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to square.\n    '''\n    perimeter = math.pi * radius * math.sqrt(2)\n    return perimeter\ndef area_circle_to_circle_to_triangle_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to triangle.\n    '''\n    perimeter = math.pi * radius * math.sqrt(2)\n    return perimeter\ndef area_circle_to_circle_to_rectangle_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to rectangle.\n    '''\n    perimeter = math.pi * radius * math.sqrt(2)\n    return perimeter\ndef area_circle_to_circle_to_hexagon_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to hexagon.\n    '''\n    perimeter = math.pi * radius * math.sqrt(3) / 2\n    return perimeter\ndef area_circle_to_circle_to_octogon_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to octogon.\n    '''\n    perimeter = math.pi * radius * math.sqrt(2) / 2\n    return perimeter\ndef area_circle_to_square_to_rectangle_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to square.\n    '''\n    perimeter = math.pi * radius * math.sqrt(2)\n    return perimeter\ndef area_circle_to_square_to_hexagon_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to square.\n    '''\n    perimeter = math.pi * radius * math.sqrt(2)\n    return perimeter\ndef area_circle_to_square_to_octogon_perimeter(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle to square.\n    '''\n    perimeter = math.pi * radius * math.sqrt(2)"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3.0 * side**2) / (4.0 * math.sqrt(2.0))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3**(0.5))/(4*math.sqrt(5))\n    return area*side**2\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return (1/3)*(3**(0.5))*(4*math.sqrt(5))*side**2\ndef area_right_triangle(side1,side2):\n    '''\n    Write a function to calculate the area of a right triangle.\n    '''\n    area = 0.5*(side1*side2)\n    return area\ndef volume_right_triangle(side1,side2):\n    '''\n    Write a function to calculate the volume of a right triangle.\n    '''\n    return (1/3)*(side1*side2)\ndef area_right_rectangle(side1,side2):\n    '''\n    Write a function to calculate the area of a right rectangle.\n    '''\n    area = side1*side2\n    return area\ndef volume_right_rectangle(side1,side2):\n    '''\n    Write a function to calculate the volume of a right rectangle.\n    '''\n    return (side1*side2)\ndef area_parallelogram(side1,side2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    area = side1*side2\n    return area\ndef volume_parallelogram(side1,side2):\n    '''\n    Write a function to calculate the volume of a right rectangle.\n    '''\n    return side1*side2\ndef area_rectangle(side1,side2):\n    '''\n    Write a function to calculate the area of a right rectangle.\n    '''\n    area = side1*side2\n    return area\ndef volume_rectangle(side1,side2):\n    '''\n    Write a function to calculate the volume of a right rectangle.\n    '''\n    return (side1*side2)\ndef area_trapezoid(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a right rectangle.\n    '''\n    area = (side1+side2+side3)/2\n    return area\ndef volume_trapezoid(side1,side2,side3):\n    '''\n    Write a function to calculate the volume of a right rectangle.\n    '''\n    return (side1*side2*side3)\ndef area_parallelogram(side1,side2):\n    '''\n    Write a function to calculate the area of a right rectangle.\n    '''\n    area = side1*side2\n    return area\ndef volume_parallelogram(side1,side2):\n    '''\n    Write a function to calculate the volume of a right rectangle.\n    '''\n    return (side1*side2)\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    area = math.pi*(radius**2)\n    return area\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = (4/3)*math.pi*(radius**3)\n    return volume\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = 4*math.pi*(radius**2)\n    return area\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(radius**3)\n    return volume\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = 4*math.pi*(radius**2)\n    return area\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(radius**3)\n    return volume\ndef area_ellipsoid(radius1,radius2,radius3):\n    '''\n    Write a function to calculate the area of an ellipsoid.\n    '''\n    area = (4/3)*math.pi*(radius1**2)*(radius2**2)*(radius3**2)\n    return area\ndef volume_ellipsoid(radius1,radius2,radius3):\n    '''\n    Write a function to calculate the volume of an ellipsoid.\n    '''\n    volume = (4/3)*math.pi*(radius1**2)*(radius2**2)*(radius3**2)\n    return volume\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = 4*math.pi*(radius**2)\n    return area\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(radius**3)\n    return volume\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = side**2\n    return area\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume = (side**3)\n    return volume\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = 4*math.pi*(radius**2)\n    return area\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(radius**3)\n    return volume\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = side**2\n    return area\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume = (side**3)\n    return volume\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = 4*math.pi*(radius**2)\n    return area\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(radius**3)\n    return volume\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = side**2\n    return area\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume = (side**3)\n    return volume\ndef area_triangle(side1,side2):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    area = 0.5*(side1*side2)\n    return area\ndef volume_triangle(side1,side2):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return (1/3)*(side1*side2)\ndef area_rectangle(side1,side2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    area = side1*side2\n    return area\ndef volume_rectangle(side1,side2):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return (side1*side2)\ndef area_square(side1,side2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    area = side1*side2\n    return area\ndef volume_square(side1,side2):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return (side1*side2)\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    #sqrt(3)/4*side^2\n    area = (math.sqrt(3)/4.0) * math.pow(side,2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (2*side**2)/4\n    return area\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume = (side**3)/6\n    return volume\ndef angle_angle(A, B, C, degrees = True):\n    '''\n    Write a function to calculate the angle between three sides.\n    '''\n    if degrees == True:\n        A = math.radians(A)\n        B = math.radians(B)\n        C = math.radians(C)\n    angle = math.degrees(math.acos((A**2 + B**2 - C**2)/(2*A*B)))\n    return angle\ndef volume_cone(height, radius):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    volume = math.pi*radius**2 * height/3\n    return volume\ndef volume_cylinder(height, radius):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = math.pi*radius**2 * height\n    return volume\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*radius**3\n    return volume\ndef area_parallelepiped(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a parallelepiped.\n    '''\n    area = 2*side1*side2 + 2*side1*side3 + 2*side2*side3\n    return area\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    area = (base1 + base2)/2 * height\n    return area\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    area = side**2\n    return area\ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    area = length * width\n    return area\ndef area_triangle(length, width):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    area = (length * width)/2\n    return area\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    area = math.pi * radius**2\n    return area\ndef distance_point(x1, y1, x2, y2):\n    '''\n    Write a function to calculate the distance between two points on a 2D plane.\n    '''\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance\ndef distance_rectangle(length1, length2):\n    '''\n    Write a function to calculate the distance between two rectangles.\n    '''\n    distance = math.sqrt(length1**2 + length2**2)\n    return distance\ndef distance_circle(radius):\n    '''\n    Write a function to calculate the distance between a circle and a line.\n    '''\n    distance = math.sqrt(radius**2 - 2*radius*line_intersection(radius, 0, 1, 0, 1))\n    return distance\ndef distance_triangle(length1, length2, length3):\n    '''\n    Write a function to calculate the distance between a triangle and a line.\n    '''\n    distance = max(length1, length2, length3)\n    return distance\ndef line_intersection(a1, b1, a2, b2):\n    '''\n    Write a function to calculate the intersection point of a line and a line.\n    '''\n    x = (b2 - b1)*(a1 - a2)\n    y = (a2 - a1)*(b1 - b2)\n    return (x/y)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*radius**3\n    return volume\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume = side**3\n    return volume\ndef height_rectangle(length1, length2):\n    '''\n    Write a function to calculate the height of a rectangle.\n    '''\n    height = max(length1, length2)\n    return height\ndef height_triangle(length1, length2, length3):\n    '''\n    Write a function to calculate the height of a triangle.\n    '''\n    height = max(length1, length2, length3)\n    return height\ndef height_circle(radius):\n    '''\n    Write a function to calculate the height of a circle.\n    '''\n    height = 2*radius\n    return height\ndef perimeter_rectangle(length1, length2):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    perimeter = 2*(length1 + length2)\n    return perimeter\ndef perimeter_triangle(length1, length2, length3):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    perimeter = 2*(length1 + length2 + length3)\n    return perimeter\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    perimeter = 2*math.pi*radius\n    return perimeter\ndef volume_ball(radius):\n    '''\n    Write a function to calculate the volume of a ball.\n    '''\n    volume = (4/3)*math.pi*radius**3\n    return volume\ndef surface_cube(side):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    surface = 6*side**2\n    return surface\ndef surface_rectangle(length1, length2):\n    '''\n    Write a function to calculate the surface area of a rectangle.\n    '''\n    surface = 2*(length1 + length2)\n    return surface\ndef surface_triangle(length1, length2, length3):\n    '''\n    Write a function to calculate the surface area of a triangle.\n    '''\n    surface = 2*(length1 + length2 + length3)\n    return surface\ndef surface_circle(radius):\n    '''\n    Write a function to calculate the surface area of a circle.\n    '''\n    surface = 4*math.pi*radius**2\n    return surface\ndef volume_cone(height, radius):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*radius**2 * height\n    return volume\ndef volume_cylinder(height, radius):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = math.pi*radius**2 * height\n    return volume\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    area = (base1 + base2)/2 * height\n    return area\ndef area_kite(height1, height2, length):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    area = (height1 + height2)*length/2\n    return area\ndef volume_hexagon(side):\n    '''\n    Write a function to calculate the volume of a hexagon.\n    '''\n    volume = (3*math.sqrt(3)/2) * side**3\n    return volume\ndef area_hexagon(side):\n    '''\n    Write a function to calculate the area of a hexagon.\n    '''\n    area = 3*math.sqrt(3)*side**2/2\n    return area\ndef radius_cirle(diameter):\n    '''\n    Write a function to calculate the radius of a circle.\n    '''\n    radius = diameter/2\n    return radius\ndef radius_circle(diameter):\n    '''\n    Write a function to calculate the radiu"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1.0/4.0)*(side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 * math.sqrt(3))/4\n    area *= side**2\n    return area\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    for i in range(0,m):\n        list[l-i-1] = list[l-i-1-1]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # return list[m:] + list[:m]\n    for i in range(m):\n        list.insert(0, list.pop())\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = m%len(list)\n    if(n == 0):\n        return\n    if(n == len(list)):\n        return(list[::-1])\n    return(list[n:len(list)] + list[0:n])\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.reverse()\n    list = list[m:] + list[:m]\n    list.reverse()\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = list[m:len(list)] + list[0:m]\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print \"The tuple has any none value!\"\n    else:\n        print \"The tuple doesn't have any none value!\"\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None not in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i==None:\n            return False\n    return True\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    result = []\n    for num in range(startnum, endnum):\n        if all([num % int(i) == 0 for i in str(num)]):\n            result.append(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_digits = [number for number in range(startnum, endnum + 1) if not any([int(digit) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] for digit in str(number)])]\n    print divisible_by_digits\n    return divisible_by_digits\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #TODO: \n    # 1) Make sure that the startnum and endnum is in the range of 0 and 9999.\n    # 2) The function should print out the numbers that are divisible by digits in the range from startnum to endnum\n    # 3) Find a way to find the total number of the divisible numbers.\n    # 4) Create a function to find the biggest and smallest divisible numbers for every digit in the range.\n    # 5) Write a function to find the count of divisble numbers for every number in the range\n    # 6) Use a list to store the numbers that are divisible by digits for every digit in the range.\n    # 7) Create a function to find the largest and smallest divisible numbers for every number in the range.\n    # 8) Write a function to find the count of the divisible numbers for every number in the range.\n    # 9) Write a function to find the count of divisible numbers for every number in the range.\n    # 10) Write a function to find the count of divisible numbers for every number in the range.\n    # 11) Write a function to find the count of divisible numbers for every number in the range.\n    # 12) Write a function to find the count of divisible numbers for every number in the range.\n    # 13) Write a function to find the count of divisible numbers for every number in the range.\n    # 14) Write a function to find the count of divisible numbers for every number in the range.\n    # 15) Write a function to find the count of divisible numbers for every number in the range.\n    # 16) Write a function to find the count of divisible numbers for every number in the range.\n    # 17) Write a function to find the count of divisible numbers for every number in the range.\n    # 18) Write a function to find the count of divisible numbers for every number in the range.\n    # 19) Write a function to find the count of divisible numbers for every number in the range.\n    # 20) Write a function to find the count of divisible numbers for every number in the range.\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #Define a function and a variable to hold a dictionary that will be returned\n    def divisible_by_digits(startnum, endnum):\n        '''\n        Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n        '''\n        #Define a dictionary to hold the key-value pairs of the first number and the list of its digits\n        #Define a dictionary that will be returned at the end\n        def divisible_by_digits(startnum, endnum):\n            '''\n            Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n            '''\n            divisible_by_digit_dict = {}\n            #Use a for loop to loop through each number in the range\n            for num in range(startnum, endnum+1):\n                #Use a while loop to test if a number is divisible by every digit in a number\n                while num > 0:\n                    #Take the last number in the number and divide it by the number\n                    #If it is evenly divisible by every digit, add it to a list\n                    if num % 10 == 0:\n                        divisible_by_digit_dict[num] = list(str(num))\n                        num /= 10\n                    #If the last number is not divisible by 10, add the last number to the list\n                    else:\n                        divisible_by_digit_dict[num] = list(str(num))\n                        num = 0\n                #Then print the key-value pairs in the dictionary\n            return divisible_by_digit_dict\n        return divisible_by_digit_dict\n    return divisible_by_digits(startnum, endnum)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum + 1) if x % int(''.join(str(y) for y in x)) == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # startnum = 111\n    # endnum = 555\n    # l = [i for i in range(startnum, endnum+1) if i%10 == 0 and all(i%j == 0 for j in range(2, int(math.log(i) / math.log(2) + 1)))]\n    # print(l)\n    # l = [i for i in range(startnum, endnum+1) if i%10 == 0 and i%11 == 0 and all(i%j == 0 for j in range(2, int(math.log(i) / math.log(2) + 1)))]\n    # print(l)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum,endnum) if all(num%int(digit)==0 for digit in str(num))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #assign a variable to startnum\n    #variable to endnum\n    #variable to result\n    #variable to loop through each number from startnum to endnum\n    #variable to use to store result of divisible by each digit\n    #variable to store result\n    #create a function for divisible by digits\n    #loop through each number from startnum to endnum\n        #store result of each number to result\n        #loop through each digit in each number\n            #if each number is divisible by that digit, add it to variable to store result\n    #return result\n    return list(filter(lambda x: all(x % i == 0 for i in map(int, str(x))), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % startnum == 0 and x % endnum == 0, range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numlist = []\n    for i in range(startnum, endnum + 1):\n        num = i\n        div_list = []\n        while num > 0:\n            div_list.append(num % 10)\n            num //= 10\n        div_list.sort()\n        if div_list == list(range(10)):\n            numlist.append(i)\n    return numlist\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    \n    \n    if a>360:\n        return None\n    else:\n        area = (math.pi*r**2)*(a/360)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)\ndef get_path(r,a):\n    '''\n    Write a function to find the path to get to the top of the hill. The function takes the radius and angle as inputs. The function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (3.1416*r*r)*a/360\ndef area_of_sector(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (3.1416*r*r)*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * (a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a%360\n    if a==0:\n        return (math.pi*r**2)\n    elif a>0 and a<90:\n        return (math.pi*r**2*(90-a))\n    elif a>90 and a<180:\n        return (math.pi*r**2*(180-a))\n    elif a>180 and a<270:\n        return (math.pi*r**2*(270-a))\n    else:\n        return (math.pi*r**2*(360-a))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #print(\"hello\")\n    theta = a\n    r = r\n    if theta > 360:\n        return None\n    else:\n        area = 3.14159265359*r**2\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area=(3.14*r*r)*(a/360)\n        return area\n    \ndef phi(a,b):\n    '''\n    Write a function to find the value of a cut of an ellipse, given the radius of the major axis and the angle of the cut.\n    '''\n    if a>b:\n        return None\n    else:\n        if a==b:\n            return 0\n        else:\n            return (a-b)*(math.sqrt(1-(b/a)**2))\n        \n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*r*r*math.sin(math.radians(a))\ndef sec_vol(r,a):\n    '''\n    Write a function to find the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (math.pi*r*r*r*math.sin(math.radians(a)))\ndef area_perimeter(r,a):\n    '''\n    Write a function that finds the area and perimeter of a circle. The function should take radius and angle as inputs. If the angle is greater than 360, return None.\n    '''\n    a=math.radians(a)\n    area=math.pi*r*r\n    perimeter=math.pi*2*r\n    if a>360:\n        return None\n    else:\n        return area,perimeter\ndef vol_area_perim(r,a):\n    '''\n    Write a function that calculates area and perimeter of a sphere. The function should take radius as input.\n    '''\n    a=math.radians(a)\n    area=4*math.pi*r*r*math.sin(a)\n    perimeter=4*math.pi*r*r\n    return area,perimeter\ndef vol_area_perim_cyl(r,h):\n    '''\n    Write a function that calculates area and perimeter of a cylinder. The function should take radius and height as input.\n    '''\n    area=2*math.pi*r*r*h\n    perimeter=2*math.pi*r*(r+h)\n    return area,perimeter\ndef is_rightangled(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the hypotenuse, second argument is the other side, and the third argument is the side. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if (a**2+b**2)**0.5==c:\n        return True\n    else:\n        return False\ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\ndef is_triangle2(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        return True\n    else:\n        return False\ndef is_triangle3(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        if a==b or a==c or b==c:\n            return True\n        else:\n            return False\ndef is_triangle4(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        if a==b or a==c or b==c:\n            if c**2==a**2+b**2:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef is_triangle5(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        if c**2==a**2+b**2:\n            return True\n        else:\n            return False\ndef is_triangle6(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        if c**2==a**2+b**2:\n            if a==b or a==c or b==c:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef is_triangle7(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        if c**2==a**2+b**2:\n            if a==b or a==c or b==c:\n                return True\n            else:\n                return False\n        elif c**2<a**2+b**2:\n            return False\n        else:\n            return True\ndef is_triangle8(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        if a==b or a==c or b==c:\n            if c**2==a**2+b**2:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef is_triangle9(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        if a==b or a==c or b==c:\n            if c**2<a**2+b**2:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef is_triangle10(a,b,c):\n    '''\n    Write a function that takes three arguments. The first argument is the side, the second argument is the other side, and the third argument is the hypotenuse. The function should return True if the sides form a right angle, otherwise it should return False.\n    '''\n    if a**2+b**2>c**2 and b**2+c**2>a**2 and c**2+a**2>b**2:\n        if c**2<a**2+b**2"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area=math.pi*r*(r+math.sin((math.pi*a)/180))\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*(90-a)/180\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    rows = len(X)+1\n    cols = len(Y)+1\n    T = [[0 for x in range(cols)] for x in range(rows)]\n    for i in range(1,rows):\n        for j in range(1,cols):\n            if X[i-1] == Y[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n    return T[rows-1][cols-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X) \n    n2 = len(Y) \n    n3 = len(Z) \n    if (n1 == 0): \n        return n2 \n    if (n2 == 0): \n        return n3 \n    if (n3 == 0): \n        return n1 \n    L = [[[0 for i in range(n3 + 1)] for j in range(n2 + 1)] for k in range(n1 + 1)] \n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            for k in range(n3 + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    return L[n1][n2][n3] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # base case\n    if X == \"\":\n        return 0\n    if Y == \"\":\n        return 0\n    if Z == \"\":\n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_lcs = get_lcs(X, Y, Z)\n    Y_lcs = get_lcs(Y, X, Z)\n    Z_lcs = get_lcs(Z, X, Y)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0:\n        return 0\n    elif len(Y) == 0:\n        return 0\n    elif len(Z) == 0:\n        return 0\n    else:\n        return lcs_of_three(X[1:], Y[1:], Z[1:]) + 1 if X[0] == Y[0] and X[0] == Z[0] else max(lcs_of_three(X[1:], Y, Z), lcs_of_three(X, Y[1:], Z), lcs_of_three(X, Y, Z[1:]))\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    L = [[[0 for k in range(3)] for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j][0] = 0\n                L[i][j][1] = 0\n                L[i][j][2] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j][0] = L[i-1][j-1][0] + 1\n                L[i][j][1] = \"\u2190\"\n                L[i][j][2] = \"\u2191\"\n            elif X[i-1]!= Y[j-1]: \n                L[i][j][0] = max(L[i-1][j][0],L[i][j-1][0]) \n                L[i][j][1] = \"\u2190\"\n                L[i][j][2] = \"\u2191\"\n    return L[m][n][0],L[m][n][1],L[m][n][2] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    t = len(X)\n    s = len(Y)\n    v = len(Z)\n    # memoization table to store computed values for subproblem\n    memo = [[[None for i in range(v+1)] for j in range(s+1)] for k in range(t+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    table = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if (i == 0 or j == 0 or k == 0):\n                    table[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    return table[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[0 for k in range(l+1)] for j in range(n+1)] for i in range(m+1)]\n    #Following steps build L[m+1][n+1][l+1] in bottom up fashion \n    #Note: L[i][j][k] contains length of LCS of X[0..i-1], Y[0..j-1] and Z[0..k-1] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    return L[m][n][l]\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s=''\n    for i in str1:\n        if i.isalpha() and i.isupper():\n            s=s+' '+i\n        else:\n            s=s+i\n    return s\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #str1 = str1.lower()\n    #for i in range(len(str1)):\n    #    if str1[i].isupper():\n    #        print (str1[i],' ',end='')\n    #    else:\n    #        print (str1[i],end='')\n    #print()\n    #str1 = re.sub(r'[a-zA-Z0-9]', '', str1)\n    #str1 = re.sub(r'[A-Z]',' ',str1)\n    #str1 = re.sub(r' ', '', str1)\n    #print (str1)\n    str1 = re.sub(r'(?<=[a-zA-Z0-9])[A-Z]|[a-zA-Z]',r' ',str1)\n    #print (str1)\n    str1 = re.sub(r'[ ]+','',str1)\n    print (str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    if not words:\n        return ''\n    caps = [word for word in words if word[0].isupper()]\n    return''.join([' '.join(caps[i:]) for i in range(0, len(caps), 2)])\ndef short_words(str1):\n    '''\n    Write a function to remove all short words from a given string.\n    '''\n    words = str1.split()\n    if not words:\n        return ''\n    return''.join([word for word in words if len(word) > 4])\ndef words_in_text(str1):\n    '''\n    Write a function to count all the words in a given text.\n    '''\n    words = str1.split()\n    if not words:\n        return 0\n    return len(words)\ndef factorial(num):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    if not num:\n        return 1\n    return num * factorial(num-1)\ndef gcd(num1, num2):\n    '''\n    Write a function to return the greatest common divisor of two numbers.\n    '''\n    if not num1 and not num2:\n        return 1\n    elif not num1 and num2:\n        return num2\n    elif num1 and not num2:\n        return num1\n    if num1 % num2 == 0:\n        return num2\n    else:\n        return gcd(num2, num1 % num2)\ndef gcd_recursive(num1, num2):\n    '''\n    Write a function to return the greatest common divisor of two numbers.\n    '''\n    if not num1 and not num2:\n        return 1\n    elif not num1 and num2:\n        return num2\n    elif num1 and not num2:\n        return num1\n    if num1 % num2 == 0:\n        return num2\n    else:\n        return gcd_recursive(num2, num1 % num2)\ndef has_duplicates(list1):\n    '''\n    Write a function to determine if a given list has duplicate values.\n    '''\n    if not list1:\n        return False\n    for i in list1:\n        if list1.count(i) > 1:\n            return True\n    return False\ndef has_duplicates_recursive(list1):\n    '''\n    Write a function to determine if a given list has duplicate values.\n    '''\n    if not list1:\n        return False\n    if list1.count(list1[0]) > 1:\n        return True\n    return has_duplicates_recursive(list1[1:])\ndef recursive_search(target, find, list1):\n    '''\n    Write a function to search for a given item in a list using recursion.\n    '''\n    if not list1:\n        return False\n    if list1[0] == target:\n        return True\n    return recursive_search(target, find, list1[1:])\ndef recursive_search_with_index(target, find, list1):\n    '''\n    Write a function to search for a given item in a list using recursion.\n    '''\n    if not list1:\n        return False\n    if list1[0] == target:\n        return [True, list1.index(target)]\n    return recursive_search_with_index(target, find, list1[1:])\ndef word_counter(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    words = str1.split()\n    if not words:\n        return 0\n    return len(words)\ndef fib(num):\n    '''\n    Write a function to compute the nth fibonacci number.\n    '''\n    if not num:\n        return 0\n    if num == 1 or num == 2:\n        return 1\n    return fib(num-1) + fib(num-2)\ndef fib_recursive(num):\n    '''\n    Write a function to compute the nth fibonacci number.\n    '''\n    if not num:\n        return 0\n    if num == 1 or num == 2:\n        return 1\n    return fib_recursive(num-1) + fib_recursive(num-2)\ndef palindrome_test(str1):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    if not str1:\n        return True\n    elif str1[0]!= str1[-1]:\n        return False\n    return palindrome_test(str1[1:-1])\ndef palindrome_test_recursive(str1):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    if not str1:\n        return True\n    elif str1[0]!= str1[-1]:\n        return False\n    return palindrome_test_recursive(str1[1:-1])\ndef reverse(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    if not str1:\n        return ''\n    return str1[-1] + reverse(str1[:-1])\ndef reverse_recursive(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    if not str1:\n        return ''\n    return str1[-1] + reverse_recursive(str1[:-1])\ndef is_anagram(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams.\n    '''\n    if not str1 and not str2:\n        return True\n    elif not str1 or not str2:\n        return False\n    if sorted(str1) == sorted(str2):\n        return True\n    return is_anagram(str1[1:], str2[1:])\ndef is_anagram_recursive(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams.\n    '''\n    if not str1 and not str2:\n        return True\n    elif not str1 or not str2:\n        return False\n    if sorted(str1) == sorted(str2):\n        return True\n    return is_anagram_recursive(str1[1:], str2[1:])\ndef count_smileys(list1):\n    '''\n    Write a function to count the number of smiley faces in a given string.\n    '''\n    if not list1:\n        return 0\n    smileys = [':)', ':D', ':D', '8)', '8)', ':(', ':~)', ';)', ':*', ':$', ':o)', ':-)']\n    return sum([list1.count(i) for i in smileys])\ndef count_smileys_recursive(list1):\n    '''\n    Write a function to count the number of smiley faces in a given string.\n    '''\n    if not list1:\n        return 0\n    smileys = [':)', ':D', ':D', '8)', '8)', ':(', ':~)', ';)', ':*', ':$', ':o)', ':-)']\n    return list1.count(smileys[0]) + count_smileys_recursive(list1[1:])\ndef print_matrix(list1):\n    '''\n    Write a function to print a 2D matrix.\n    '''\n    if not list1:\n        return\n    for i in list1:\n        for j in i:\n            print(j, end=' ')\n        print()\ndef print_matrix_recursive(list1):\n    '''\n    Write a function to print a 2D matrix.\n    '''\n    if not list1:\n        return\n    for i in list1:\n        for j in i:\n            print(j, end=' ')\n        print()\n        print_matrix_recursive(list1[1:])\ndef print_matrix_2D(list1, column):\n    '''\n    Write a function to print a 2D matrix.\n    '''\n    if not list1:\n        return\n    fo"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = re.sub(\"\\s+[A-Z][a-z]*\", \" \\g<0> \", str1)\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'(?<=[a-z])([A-Z])', r' \\1', str1)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s=[]\n    for i in str1.split():\n        if i.istitle():\n            s.append(' '+i)\n        else:\n            s.append(i)\n    return ''.join(s)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def capitalize(s):\n        return s[0].upper()+s[1:]\n    def fullCapital(str1):\n        str1 = re.sub(\"[a-zA-Z]\",\" \",str1)\n        str1 = re.sub(\"[A-Z]\",\" \",str1)\n        return str1\n    return fullCapital(capitalize(str1))\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'([A-Z][a-z]+)([A-Z])',r'\\1 \\2',str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"(?<=[a-z])([A-Z])\", \" \\\\1\", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str=\"\"\n    for i in range(0,len(str1)):\n        if(str1[i]>='A' and str1[i]<='Z'):\n            new_str=new_str+' '+str1[i]\n        else:\n            new_str=new_str+str1[i]\n    return new_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return [str(num) for num in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from re import search\n    nums = map(int, [search('\\d+', s).group(0) for s in nums_str])\n    sorted_nums = sorted(nums)\n    return map(str, sorted_nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    result = []\n    for s in nums_str:\n        if s.isdigit():\n            result.append(int(s))\n    return sorted(result)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: float(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [int(x) for x in nums_str]\n    nums_str.sort()\n    return [str(x) for x in nums_str]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: float(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #add the given tuple to the given list\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) == 0:\n        test_list.append(test_tup)\n    else:\n        if test_tup in test_list:\n            return\n        else:\n            if len(test_list) == 1:\n                test_list.append(test_tup)\n            else:\n                for i in range(len(test_list)-1):\n                    if test_list[i] < test_tup <= test_list[i+1]:\n                        test_list.insert(i+1, test_tup)\n                        break\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[left]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or i < 0:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or i < 0:\n        return False\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left >= len(arr) or left < 0:\n        return False\n    if right >= len(arr) or right < 0:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If array is empty\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] >= arr[i // 2]:\n        return False\n    if i == 1:\n        return True\n    return check_min_heap_helper(arr, i // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2*i+1\n    right_child = 2*i+2\n    min_child = min(left_child, right_child)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child_i = 2*i + 1\n    right_child_i = 2*i + 2\n    left_child_exists = True if left_child_i < len(arr) else False\n    right_child_exists = True if right_child_i < len(arr) else False\n    if left_child_exists and arr[left_child_i] < arr[i]:\n        return False\n    if right_child_exists and arr[right_child_i] < arr[i]:\n        return False\n    if left_child_exists:\n        if right_child_exists:\n            if arr[left_child_i] > arr[right_child_i]:\n                return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == -1:\n        return True\n    elif arr[i] > arr[check_min_heap_helper(arr, 2*i+1)]:\n        return False\n    elif arr[i] < arr[check_min_heap_helper(arr, 2*i+2)]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i+1\n    right = 2*i+2\n    if left <= len(arr)-1 and arr[left] < arr[i]:\n        return False\n    if right <= len(arr)-1 and arr[right] < arr[left]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[(i + 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i + 1) // 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    jb = 1\n    for i in xrange(n-1):\n        jb = jb * (n-i) / (i+1)\n    return jb\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    p, q, i = 1, 1, 1\n    while i < n:\n        p, q = q, (p+q)%1000000007\n        i += 1\n    return (p+q)%1000000007\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2))\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_lst = [1]\n    jacobsthal_num = 1\n    for i in range(1,n):\n        jacobsthal_num = jacobsthal_num + 2*(i+1)*jacobsthal_lst[i-1]\n        jacobsthal_lst.append(jacobsthal_num)\n    return jacobsthal_lst[-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 3\n    \n    # 2nd jacobsthal number = 1, 1, 3, 5, 7, 11, 13, 17, 19, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4461, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 50"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    if n < 4: return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    l1 = jacobsthal_num(n-1)\n    l2 = jacobsthal_num(n-2)\n    l3 = jacobsthal_num(n-3)\n    return l1+l2+l3\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0: return 0\n    if n==1: return 1\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = [1, 1]\n    for i in range(2, n+1):\n        l.append((l[i-1] + l[i-2]) % 1000003)\n    return l[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    fib = 1\n    last = 0\n    \n    while n > 1:\n        fib = last + fib\n        last = fib - last\n        n -= 1\n    return fib\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    record_list = []\n    for (item, weight, size) in test_list:\n        record = (item, weight, size)\n        record_list.append(record)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    k_min = test_list[0][0]\n    min_list = [(k_min, 0)]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # print(test_list)\n    d = {}\n    for l in test_list:\n        if l[0] not in d:\n            d[l[0]] = [l[1]]\n        else:\n            d[l[0]].append(l[1])\n    # print(d)\n    # print(d.values())\n    min_list = []\n    for i in d.values():\n        if len(i) < K:\n            min_list.append(i)\n    # print(min_list)\n    if len(min_list) == 0:\n        return None\n    else:\n        return min(min_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    # logic for finding minimum k records\n    for i in range(K):\n        min_list.append(min(test_list, key=lambda x: x[i]))\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i])\n    min_list.sort()\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return []\n    return sorted(test_list, key=lambda x:x[K])[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            if test_list[j][K] < test_list[i][K]:\n                temp = test_list[i]\n                test_list[i] = test_list[j]\n                test_list[j] = temp\n    return test_list[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #create an empty list\n    min_list = []\n    #for loop, O(n)\n    for i in range(0,len(test_list)):\n        #remove elements that are smaller than the current element\n        #test_list = sorted(test_list,key = lambda x:x[0],reverse=True)\n        for j in range(0,len(min_list)):\n            if test_list[i][0] < min_list[j][0]:\n                test_list.pop(i)\n                break\n        #add current element to list\n        min_list.append(test_list[i])\n        #if list is long enough\n        if len(min_list) >= K:\n            break\n    #remove elements that are greater than the current element\n    for j in range(0,len(min_list)):\n        if test_list[i][0] > min_list[j][0]:\n            test_list.pop(i)\n            break\n    #return the list\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key = itemgetter(0))\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return None\n    else:\n        return min(test_list, key=lambda x: x[K])\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    assert len(l1) == len(l2) == len(l3)\n    \n    l = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for x in l1:\n        if x in l2 and x in l3:\n            l4.append(x)\n    return l4\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    temp = [x for x in l1 if x in l2 and x in l3]\n    return temp\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_dict = {}\n    for i in range(len(l1)):\n        if l1[i] in index_dict.keys():\n            index_dict[l1[i]].append(i)\n        else:\n            index_dict[l1[i]] = [i]\n    for i in range(len(l2)):\n        if l2[i] in index_dict.keys():\n            index_dict[l2[i]].append(i)\n        else:\n            index_dict[l2[i]] = [i]\n    for i in range(len(l3)):\n        if l3[i] in index_dict.keys():\n            index_dict[l3[i]].append(i)\n        else:\n            index_dict[l3[i]] = [i]\n    return [k for k,v in index_dict.items() if len(v)==len(l1)]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Create a new list of tuples.\n    # The first element of the tuple is the element, the second is the index.\n    # The third is the number of occurences in all three lists.\n    l = []\n    for i, x in enumerate(l1):\n        for j, y in enumerate(l2):\n            for k, z in enumerate(l3):\n                if x == y == z:\n                    l.append((x, i, j))\n    \n    # Return the list with only elements that appear in all three lists.\n    # Each element is a tuple.\n    # Each tuple is of the form (element, index, count).\n    return [element for element in l if element[2] == l[2]]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if (len(l1)!= len(l2)) or (len(l1)!= len(l3)) or (len(l2)!= len(l3)):\n        return None\n    else:\n        return list(set(l1).intersection(l2, l3))\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    \n    for i in range(len(l1)):\n        if l1[i]!= l2[i] or l2[i]!= l3[i]:\n            return []\n    \n    return l1\n    \n    \nl1 = [1, 2, 3, 5, 7]\nl2 = [1, 2, 3, 4, 5, 6]\nl3 = [1, 2, 3, 4, 5, 7]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = l1[1:]\n    l2 = l2[1:]\n    l3 = l3[1:]\n    for i in range(len(l1)):\n        if l1[i] not in l2:\n            l2.append(l1[i])\n        if l1[i] not in l3:\n            l3.append(l1[i])\n    return l2, l3\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    second_smallest = numbers[1]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return False\n    if len(numbers) < 2:\n        return False\n    smallest = min(numbers)\n    for i in numbers:\n        if i!= smallest and i < smallest:\n            return i\n        elif i!= smallest and i > smallest:\n            return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return sorted(numbers)[1]\n    if len(numbers) == 3:\n        return sorted(numbers)[1]\n    if len(numbers) == 4:\n        return sorted(numbers)[1]\n    else:\n        numbers.sort()\n        return numbers[2]"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    temp = sorted(numbers)\n    return temp[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        second = min(numbers[0], numbers[1])\n        numbers.remove(second)\n        return second_smallest(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    \n    min_num = numbers[0]\n    min_index = 0\n    for i, num in enumerate(numbers[1:]):\n        if num < min_num:\n            min_num = num\n            min_index = i + 1\n    \n    return min_num\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = list(numbers)\n    min_num = min(numbers)\n    numbers.remove(min_num)\n    return min(numbers)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r'a*b', text))\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'a.*b', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n        print(match.group())\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile(r'a+')\n    b_pattern = re.compile(r'b+')\n    print(a_pattern.match(text))\n    print(b_pattern.match(text))\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match('[a]+[b]+', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r\"(?<=a)b+\", text):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    if re.search(r\"(?<=a)b+?\", text):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_one_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's, but only when the 'b' is not followed by 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    if re.search(r\"(?<!b)b+?\", text):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_one_one_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=$)\", text):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.MULTILINE):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.S):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_one_zero_many_with_non_greedy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.MULTILINE):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.S):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.I):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.I):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.I):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.I):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.I):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.I):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef text_match_zero_one_many_with_non_greedy_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    if re.search(r\"(?<=a)b+?(?=b)\", text, re.I):\n        print(\"match found\")\n    else:\n        print(\"no match found\")\n    \ndef tex"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    #\"A(a)*\"\n    "
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.search(text) is not None:\n        return True\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    if re.match(pattern, text):\n        return 'Match found'\n    else:\n        return 'No match found'\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if(test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1] and i < j:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_list = [ele[::-1] for ele in test_list]\n    count = 0\n    for i in range(0,len(rev_list)):\n        for j in range(0,len(rev_list)):\n            if i < j:\n                if rev_list[i] == rev_list[j]:\n                    count += 1\n    print(count)\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if not test_list:\n        return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #start counting from 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    for each element in the list:\n        element\n    '''\n    list_len = len(test_list)\n    if list_len <= 1:\n        return 0\n    else:\n        a = test_list[0]\n        b = test_list[1]\n        c = test_list[2]\n        if a == b[::-1]:\n            print \"a: \", a\n            print \"b: \", b\n            print \"c: \", c\n            return 1\n        elif a == c[::-1]:\n            print \"a: \", a\n            print \"b: \", b\n            print \"c: \", c\n            return 1\n        elif b == c[::-1]:\n            print \"a: \", a\n            print \"b: \", b\n            print \"c: \", c\n            return 1\n        else:\n            return count_reverse_pairs(test_list[1:])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        if string[::-1] in test_list:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len([i for i in range(len(test_list)-1) if test_list[i] == test_list[-1-i]])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_dict = {}\n    for word in test_list:\n        key = word[::-1]\n        if key in test_dict.keys():\n            test_dict[key] += 1\n        else:\n            test_dict[key] = 1\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # TODO: complete this\n    count = 0\n    test_list = test_list.split(' ')\n    for i in test_list:\n        if i == i[::-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    results = {}\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublist = list1[i:j+1]\n            sublist = tuple(sublist)\n            if sublist not in results.keys():\n                results[sublist] = 1\n            else:\n                results[sublist] += 1\n    return results\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n    return defaultdict(int, (zip(*[iter(list1)]*2)))\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    results = {}\n    for i in list1:\n        for j in i:\n            results[tuple(j)] = results.get(tuple(j),0) + 1\n    return results\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n        else:\n            continue\n    result = {}\n    for i in new_list:\n        result[tuple(i)] = list1.count(i)\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_of_sublists = {}\n    for sublist in list1:\n        if tuple(sublist) not in dict_of_sublists:\n            dict_of_sublists[tuple(sublist)] = 1\n        else:\n            dict_of_sublists[tuple(sublist)] += 1\n    return dict_of_sublists\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in list1:\n        if type(i) == list:\n            result[tuple(i)] = list1.count(i)\n        else:\n            result[tuple(i)] = list1.count(i)\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    out = {}\n    for i in list1:\n        sublist = tuple(i)\n        if sublist in out.keys():\n            out[sublist] += 1\n        else:\n            out[sublist] = 1\n    return out\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #Initialise dictionary to store number of occurences of each list in list1\n    dict_list = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_to_return = {}\n    for l in list1:\n        if tuple(l) not in list_to_return:\n            list_to_return[tuple(l)] = 1\n        else:\n            list_to_return[tuple(l)] += 1\n    return list_to_return\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    list2 = []\n    \n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    \n    list3 = {}\n    \n    for i in range(len(list2)):\n        for j in range(len(list1)):\n            if list2[i] == list1[j]:\n                if tuple([list2[i]]) not in list3:\n                    list3[tuple([list2[i]])] = 1\n                else:\n                    list3[tuple([list2[i]])] += 1\n    \n    return list3\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return re.match(\"^[+-]?[0-9]+.[0-9]{2}$\", num)\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return (num.count('.') <= 1 and num.split('.')[-1].isdigit())\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    #return the boolean value\n    if type(num) is str:\n        return (num.find('.')!= -1)\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdigit() and len(num) == num.count('0') + num.count('.') + 1\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num) == float:\n        return True\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = float(num)\n    if num.is_integer():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Hint: you may want to do some research about how to determine if a number is a float or not.\n    if num.count('.') > 1:\n        return False\n    elif num.count('.') == 1:\n        split = num.split('.')\n        if len(split[1]) > 2:\n            return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n    \ndef dict_to_list(d):\n    '''\n    Write a python function to turn a dictonary into a list of tuples.\n    '''\n    return [(k, v) for k, v in d.iteritems()]\n    \ndef check_for_key(d, key):\n    '''\n    Write a python function to check whether a key exists in a dictonary.\n    '''\n    return key in d.keys()\n    \ndef check_for_value(d, value):\n    '''\n    Write a python function to check whether a value exists in a dictonary.\n    '''\n    return value in d.values()\n    \ndef update_dict(d, key, value):\n    '''\n    Write a python function to update a dictonary.\n    '''\n    d[key] = value\n    \ndef get_key(d, value):\n    '''\n    Write a python function to return a key for a value in a dictonary.\n    '''\n    for key, value in d.iteritems():\n        if value == value:\n            return key\n        \ndef is_list_sorted(l):\n    '''\n    Write a python function to check whether a list is sorted or not.\n    '''\n    return sorted(l) == l\n    \ndef list_to_dict(l):\n    '''\n    Write a python function to convert a list to a dictionary.\n    '''\n    return {k: None for k in l}\n    \ndef merge_dict(d1, d2):\n    '''\n    Write a python function to merge 2 dictonaries.\n    '''\n    return {**d1, **d2}\n    \ndef convert_to_seconds(time):\n    '''\n    Write a python function to convert a time string to seconds.\n    '''\n    return sum([60 ** i * int(t) for i, t in enumerate(reversed(time.split(':')))])\n    \ndef remove_duplicates_from_list(l):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(l))\n    \ndef find_second_largest(l):\n    '''\n    Write a python function to find the second largest number in a list.\n    '''\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        max_ = max(l)\n        l.remove(max_)\n        return max_\n        \ndef list_of_words_to_string(l):\n    '''\n    Write a python function to convert a list of words into a string.\n    '''\n    return''.join(l)\n    \ndef string_to_list_of_words(s):\n    '''\n    Write a python function to convert a string into a list of words.\n    '''\n    return s.split()\n    \ndef flatten_list(l):\n    '''\n    Write a python function to flatten a list.\n    '''\n    for el in l:\n        if type(el) == list:\n            for sub in flatten_list(el):\n                yield sub\n        else:\n            yield el\n            \ndef flatten_dict(d):\n    '''\n    Write a python function to flatten a dictionary.\n    '''\n    for k, v in d.iteritems():\n        if type(v) == dict:\n            for k2, v2 in flatten_dict(v).iteritems():\n                yield (k, v2)\n        else:\n            yield (k, v)\n            \ndef flatten_list_of_lists(l):\n    '''\n    Write a python function to flatten a list of lists.\n    '''\n    for el in l:\n        if type(el) == list:\n            for sub in flatten_list_of_lists(el):\n                yield sub\n        else:\n            yield el\n            \ndef string_to_lowercase(s):\n    '''\n    Write a python function to convert a string to lowercase.\n    '''\n    return s.lower()\n    \ndef remove_vowels_from_list(l):\n    '''\n    Write a python function to remove vowels from a list.\n    '''\n    return [v for v in l if v not in ['a', 'e', 'i', 'o', 'u']]\n    \ndef is_number(x):\n    '''\n    Write a python function to check whether a given input is a number or not.\n    '''\n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n    \ndef get_file_lines(f):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        return [line.rstrip('\\n') for line in f]\n    \ndef get_file_line_by_index(f, index):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        for i, line in enumerate(f):\n            if i == index:\n                return line.rstrip('\\n')\n                \ndef get_file_line(f, index):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        for i, line in enumerate(f):\n            if i == index:\n                return line.rstrip('\\n')\n                \ndef get_file_line_by_word(f, word):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        for line in f:\n            if word in line:\n                return line.rstrip('\\n')\n                \ndef get_file_lines_by_word(f, word):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        return [line for line in f if word in line]\n        \ndef get_file_line_by_index(f, index):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        for i, line in enumerate(f):\n            if i == index:\n                return line.rstrip('\\n')\n                \ndef get_file_line_by_index_regex(f, index):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        for i, line in enumerate(f):\n            if re.match(r'{0}'.format(index), i):\n                return line.rstrip('\\n')\n                \ndef get_file_line_by_word_regex(f, word):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        for line in f:\n            if re.search(r'{0}'.format(word), line):\n                return line.rstrip('\\n')\n                \ndef get_file_lines_by_word_regex(f, word):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        return [line for line in f if re.search(r'{0}'.format(word), line)]\n        \ndef get_file_lines_by_index_regex(f, index):\n    '''\n    Write a python function to read a file line by line and return a list of lines.\n    '''\n    with open(f, 'r') as f:\n        return [line for i, line in enumerate(f"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    from collections import Counter\n    return len(Counter(arr)) == 1\n    \ndef duplicate_Element(arr):\n    '''\n    Write a python function to find out whether a list of numbers contains duplicate elements or not.\n    '''\n    a = set(arr)\n    b = []\n    for i in a:\n        if arr.count(i) > 1:\n            b.append(i)\n    return b\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp_arr = set(arr)\n    if len(temp_arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(0, len(arr)):\n        if arr.count(arr[i]) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    lst = []\n    for i in arr:\n        if i not in lst:\n            lst.append(i)\n    return lst\n    \n    \n    \ndef unique_Element_soln(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return set(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Write your code here\n    #unique_list = []\n    #if len(arr) == 1:\n    #    return True\n    #for i in range(0, len(arr)):\n    #    if arr[i] not in unique_list:\n    #        unique_list.append(arr[i])\n    #    else:\n    #        return False\n    #return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    try:\n        x = set(arr)\n        if len(x) == 1:\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dictionary = {}\n    for element in arr:\n        if element not in dictionary:\n            dictionary[element] = 0\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5:\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12:\n        return \"Month number has to be within the range of 1 to 12\"\n    elif monthnum3 == 1:\n        return \"The month is January\"\n    elif monthnum3 == 2:\n        return \"The month is February\"\n    elif monthnum3 == 3:\n        return \"The month is March\"\n    elif monthnum3 == 4:\n        return \"The month is April\"\n    elif monthnum3 == 5:\n        return \"The month is May\"\n    elif monthnum3 == 6:\n        return \"The month is June\"\n    elif monthnum3 == 7:\n        return \"The month is July\"\n    elif monthnum3 == 8:\n        return \"The month is August\"\n    elif monthnum3 == 9:\n        return \"The month is September\"\n    elif monthnum3 == 10:\n        return \"The month is October\"\n    elif monthnum3 == 11:\n        return \"The month is November\"\n    elif monthnum3 == 12:\n        return \"The month is December\"\n    else:\n        return \"No month number found\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '1' or monthnum3 == '3' or monthnum3 == '5' or monthnum3 == '7' or monthnum3 == '8' or monthnum3 == '10' or monthnum3 == '12':\n        return False\n    elif monthnum3 == '4' or monthnum3 == '6' or monthnum3 == '9' or monthnum3 == '11':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print \"This month contains 30 days.\"\n    else:\n        print \"This month does not contain 30 days.\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        print \"You entered an invalid month number\"\n    elif monthnum3 == 2 and leap_year(year):\n        print \"February has 29 days\"\n    elif monthnum3 == 2 and not leap_year(year):\n        print \"February has 28 days\"\n    elif monthnum3 in [4,6,9,11]:\n        print \"30 days\"\n    else:\n        print \"31 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3)>12:\n        print \"Invalid Input\"\n    elif int(monthnum3)<1:\n        print \"Invalid Input\"\n    elif int(monthnum3)>0 and int(monthnum3)<13:\n        if int(monthnum3)%2==0 and int(monthnum3)>0:\n            print \"This month has 30 days\"\n        elif int(monthnum3)%2==1 and int(monthnum3)>0:\n            print \"This month has 31 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber3 = int(monthnum3)\n    if monthnumber3 in (1,3,5,7,8,10,12):\n        return 30\n    elif monthnumber3 in (4,6,9,11):\n        return 29\n    else:\n        return 28\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) in (1,3,5,7,8,10,12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year_number % 4!= 0 or (year_number % 4 == 0 and year_number % 100!= 0)):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return 29\n    else:\n        return 31\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = 1000000000\n    for i in range(0,n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Initialize result\n    result = 1000000\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set to store all non-duplicate values of arr\n    arr_nondup = set(arr) \n    arr_nondup = list(arr_nondup)\n    \n    # Now we get the list of sorted array \n    arr_nondup.sort() \n    \n    # Now we traverse the array to find the minimum difference\n    # Note that we need to avoid the same elements and we need to choose the smallest difference\n    for i in range(len(arr_nondup) - 1): \n        diff = abs(arr_nondup[i] - arr_nondup[i + 1]) \n        if diff == 0: \n            return 0\n        if diff < min_diff: \n            min_diff = diff\n    return min_diff\n    \ndef min_diff_helper(arr,n): \n    '''\n    Use the above function to find the minimum difference between any two elements in the array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set to store all non-duplicate values of arr\n    arr_nondup = set(arr) \n    arr_nondup = list(arr_nondup)\n    \n    # Now we get the list of sorted array \n    arr_nondup.sort() \n    \n    # Now we traverse the array to find the minimum difference\n    # Note that we need to avoid the same elements and we need to choose the smallest difference\n    for i in range(len(arr_nondup) - 1): \n        diff = abs(arr_nondup[i] - arr_nondup[i + 1]) \n        if diff == 0: \n            return 0\n        if diff < min_diff: \n            min_diff = diff\n    return min_diff\n    \ndef min_diff_helper2(arr,n): \n    '''\n    Use the above function to find the minimum difference between any two elements in the array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set to store all non-duplicate values of arr\n    arr_nondup = set(arr) \n    arr_nondup = list(arr_nondup)\n    \n    # Now we get the list of sorted array \n    arr_nondup.sort() \n    \n    # Now we traverse the array to find the minimum difference\n    # Note that we need to avoid the same elements and we need to choose the smallest difference\n    for i in range(len(arr_nondup) - 1): \n        diff = abs(arr_nondup[i] - arr_nondup[i + 1]) \n        if diff == 0: \n            return 0\n        arr_nondup[i] = diff\n    return min(arr_nondup)\n    \ndef min_diff_helper3(arr,n): \n    '''\n    Use the above function to find the minimum difference between any two elements in the array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set to store all non-duplicate values of arr\n    arr_nondup = set(arr) \n    arr_nondup = list(arr_nondup)\n    \n    # Now we get the list of sorted array \n    arr_nondup.sort() \n    \n    # Now we traverse the array to find the minimum difference\n    # Note that we need to avoid the same elements and we need to choose the smallest difference\n    for i in range(len(arr_nondup) - 1): \n        diff = abs(arr_nondup[i] - arr_nondup[i + 1]) \n        if diff == 0: \n            return 0\n        arr_nondup[i] = diff\n    return min(arr_nondup)\n    \ndef min_diff_helper4(arr,n): \n    '''\n    Use the above function to find the minimum difference between any two elements in the array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set to store all non-duplicate values of arr\n    arr_nondup = set(arr) \n    arr_nondup = list(arr_nondup)\n    \n    # Now we get the list of sorted array \n    arr_nondup.sort() \n    \n    # Now we traverse the array to find the minimum difference\n    # Note that we need to avoid the same elements and we need to choose the smallest difference\n    for i in range(len(arr_nondup) - 1): \n        diff = abs(arr_nondup[i] - arr_nondup[i + 1]) \n        if diff == 0: \n            return 0\n        arr_nondup[i] = diff\n    return min(arr_nondup)\n    \ndef min_diff_helper5(arr,n): \n    '''\n    Use the above function to find the minimum difference between any two elements in the array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set to store all non-duplicate values of arr\n    arr_nondup = set(arr) \n    arr_nondup = list(arr_nondup)\n    \n    # Now we get the list of sorted array \n    arr_nondup.sort() \n    \n    # Now we traverse the array to find the minimum difference\n    # Note that we need to avoid the same elements and we need to choose the smallest difference\n    for i in range(len(arr_nondup) - 1): \n        diff = abs(arr_nondup[i] - arr_nondup[i + 1]) \n        if diff == 0: \n            return 0\n        arr_nondup[i] = diff\n    return min(arr_nondup)\n    \ndef min_diff_helper6(arr,n): \n    '''\n    Use the above function to find the minimum difference between any two elements in the array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set to store all non-duplicate values of arr\n    arr_nondup = set(arr) \n    arr_nondup = list(arr_nondup)\n    \n    # Now we get the list of sorted array \n    arr_nondup.sort() \n    \n    # Now we traverse the array to find the minimum difference\n    # Note that we need to avoid the same elements and we need to choose the smallest difference\n    for i in range(len(arr_nondup) - 1): \n        diff = abs(arr_nondup[i] - arr_nondup[i + 1]) \n        if diff == 0: \n            return 0\n        arr_nondup[i] = diff\n    return min(arr_nondup)\n    \ndef min_diff_helper7(arr,n): \n    '''\n    Use the above function to find the minimum difference between any two elements in the array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set to store all non-duplicate values of arr\n    arr_nondup = set(arr) \n    arr_nondup = list(arr_nondup)\n    \n    # Now we get the list of sorted array \n    arr_nondup.sort() \n    \n    # Now we traverse the array to find the minimum difference\n    # Note that we need to avoid the same elements and we need to choose the smallest difference\n    for i in range(len(arr_nondup) - 1): \n        diff = abs(arr_nondup[i] - arr_nondup[i + 1]) \n        if diff == 0: \n            return 0\n        arr_nondup[i] = diff\n    return min(arr_nondup)\n    \ndef min_diff_helper8(arr,n): \n    '''\n    Use the above function to find the minimum difference between any two elements in the array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set t"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    smallest = arr[1] - arr[0]\n    for i in range(0,n-1):\n        smallest = min(smallest,arr[i+1] - arr[i])\n    return smallest\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = sys.maxsize\n    for i in range(0,n-1):\n        res = min(res, arr[i+1] - arr[i])\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n <= 1:\n        return 0\n    \n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        if abs(arr[i]-arr[i+1]) < diff:\n            diff = abs(arr[i]-arr[i+1])\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min = sys.maxsize\n    for i in range(n):\n        if (i+1) < n:\n            min = min(min,arr[i+1] - arr[i])\n    return min\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res=arr[1]-arr[0]\n    for i in range(1,n-1):\n        res=min(res, arr[i+1]-arr[i])\n    return res\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    sorted_arr = sorted(arr)\n    diff = sys.maxsize\n    for i in range(0,n-1):\n        temp = sorted_arr[i+1]-sorted_arr[i]\n        if temp < diff:\n            diff = temp\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff_arr = []\n    for i in range(n):\n        for j in range(i+1,n):\n            diff_arr.append(abs(arr[i] - arr[j]))\n    return min(diff_arr)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    result = 0\n    for char in str:\n        if char.isdigit():\n            result += 1\n    return result\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    def count_digit(str):\n        return sum(c.isdigit() for c in str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - len(str.lstrip('0'))\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\ndef palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    return str==str[::-1]\ndef even_odd(number):\n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    if number%2==0:\n        return True\n    else:\n        return False\ndef sum_even(number):\n    '''\n    Write a python function to return the sum of all even numbers from 1 to a given number.\n    '''\n    sum=0\n    for i in range(1,number):\n        if i%2==0:\n            sum+=i\n    return sum\ndef prime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if num>1:\n        if num==2:\n            return True\n        else:\n            if num%2==0:\n                return False\n            else:\n                for j in range(2,int(num/2)+1):\n                    if num%j==0:\n                        return False\n                        break\n                return True\n    else:\n        return False\ndef print_upper_words(list):\n    '''\n    Write a python function to print all words in a list which are upper case.\n    '''\n    for i in list:\n        if i.isupper():\n            print(i)\ndef print_upper_words(list):\n    '''\n    Write a python function to print all words in a list which are upper case.\n    '''\n    for i in list:\n        if i.isupper():\n            print(i)\ndef rotate_word(str,rotate_by):\n    '''\n    Write a python function to print a string in a right rotated form.\n    '''\n    for i in range(rotate_by):\n        str=str[1:len(str)]+str[0]\n    print(str)\ndef rotate_word(str,rotate_by):\n    '''\n    Write a python function to print a string in a right rotated form.\n    '''\n    for i in range(rotate_by):\n        str=str[1:len(str)]+str[0]\n    print(str)\ndef string_reversal(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    rev_str=''\n    for i in str:\n        rev_str=i+rev_str\n    return rev_str\ndef append_reverse(str1,str2):\n    '''\n    Write a python function to append a string in reverse order in second string.\n    '''\n    rev_str=''\n    for i in str2:\n        rev_str=i+rev_str\n    return str1+rev_str\ndef first_last6(str):\n    '''\n    Write a python function to check if a string has at least one character and the last character is 6 or not.\n    '''\n    if len(str)>=1 and str[-1]=='6':\n        return True\n    else:\n        return False\ndef count_hi(str):\n    '''\n    Write a python function to count the number of times a substring 'hi' occurs in a string.\n    '''\n    count=0\n    for i in range(len(str)-1):\n        if str[i:i+2]=='hi':\n            count+=1\n    return count\ndef count_hi(str):\n    '''\n    Write a python function to count the number of times a substring 'hi' occurs in a string.\n    '''\n    count=0\n    for i in range(len(str)-1):\n        if str[i:i+2]=='hi':\n            count+=1\n    return count\ndef string_splosion(str):\n    '''\n    Write a python function to return the given string in which the substring '!!!' is added to the string in each place where the substring '!!!' occurs in the given string.\n    '''\n    result=''\n    for i in range(len(str)):\n        result+=str[:i]+'!!!'+str[i:]\n    return result\ndef count_code(str):\n    '''\n    Write a python function to count the number of times a substring 'code' occurs in a given string.\n    '''\n    count=0\n    for i in range(len(str)-3):\n        if str[i:i+2]=='co' and str[i+3]=='e':\n            count+=1\n    return count\ndef end_other(a,b):\n    '''\n    Write a python function to check if the end of one string is the start of another string or not.\n    '''\n    if a[-len(b):]==b or b[-len(a):]==a:\n        return True\n    else:\n        return False\ndef end_other(a,b):\n    '''\n    Write a python function to check if the end of one string is the start of another string or not.\n    '''\n    if a[-len(b):]==b or b[-len(a):]==a:\n        return True\n    else:\n        return False\ndef end_other(a,b):\n    '''\n    Write a python function to check if the end of one string is the start of another string or not.\n    '''\n    if a[-len(b):]==b or b[-len(a):]==a:\n        return True\n    else:\n        return False\ndef first_last6(str):\n    '''\n    Write a python function to check if a string has at least one character and the last character is 6 or not.\n    '''\n    if len(str)>=1 and str[-1]=='6':\n        return True\n    else:\n        return False\ndef count_hi(str):\n    '''\n    Write a python function to count the number of times a substring 'hi' occurs in a string.\n    '''\n    count=0\n    for i in range(len(str)-1):\n        if str[i:i+2]=='hi':\n            count+=1\n    return count\ndef count_hi(str):\n    '''\n    Write a python function to count the number of times a substring 'hi' occurs in a string.\n    '''\n    count=0\n    for i in range(len(str)-1):\n        if str[i:i+2]=='hi':\n            count+=1\n    return count\ndef string_splosion(str):\n    '''\n    Write a python function to return the given string in which the substring '!!!' is added to the string in each place where the substring '!!!' occurs in the given string.\n    '''\n    result=''\n    for i in range(len(str)):\n        result+=str[:i]+'!!!'+str[i:]\n    return result\ndef count_code(str):\n    '''\n    Write a python function to count the number of times a substring 'code' occurs in a given string.\n    '''\n    count=0\n    for i in range(len(str)-3):\n        if str[i:i+2]=='co' and str[i+3]=='e':\n            count+=1\n    return count\ndef end_other(a,b):\n    '''\n    Write a python function to check if the end of one string is the start of another string or not.\n    '''\n    if a[-len(b):]==b or b[-len(a):]==a:\n        return True\n    else:\n        return False\ndef end_other(a,b):\n    '''\n    Write a python function to check if the end of one string is the start of another string or not.\n    '''\n    if a[-len(b):]==b or b[-len(a):]==a:\n        return True\n    else:\n        return False\ndef end_other(a,b):\n    '''\n    Write a python function to check if the end of one string is the start of another string or not.\n    '''\n    if a[-len(b):]==b or b[-len(a):]==a:\n        return True\n    els"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - (str.count(' ') + 1)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] >= '0' and str[i] <= '9':\n            count = count + 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 2 \n    elif n == 3: \n        return 4 \n    else: \n        return is_polite(n-1) + is_polite(n-2) + is_polite(n-3) \ndef is_polite2(n):\n    '''\n    This is another solution to find nth polite number\n    '''\n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 2 \n    elif n == 3: \n        return 4 \n    else: \n        return (3*(is_polite(n-1))**2 + 2*is_polite(n-1) + 1)\ndef sum_of_digits(n): \n    '''\n    Write a function to find sum of digits of a number \n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return sum_of_digits(n/10) + (n%10)\ndef sum_of_digits2(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return (n%10) + sum_of_digits2(n/10)\ndef sum_of_digits3(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return sum_of_digits3(n/10) + n%10\ndef sum_of_digits4(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return sum_of_digits4(n/10) + n%10\ndef sum_of_digits5(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits5(n/10)\ndef sum_of_digits6(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits6(n/10)\ndef sum_of_digits7(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits7(n/10)\ndef sum_of_digits8(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits8(n/10)\ndef sum_of_digits9(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits9(n/10)\ndef sum_of_digits10(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits10(n/10)\ndef sum_of_digits11(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits11(n/10)\ndef sum_of_digits12(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits12(n/10)\ndef sum_of_digits13(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits13(n/10)\ndef sum_of_digits14(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits14(n/10)\ndef sum_of_digits15(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits15(n/10)\ndef sum_of_digits16(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits16(n/10)\ndef sum_of_digits17(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits17(n/10)\ndef sum_of_digits18(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits18(n/10)\ndef sum_of_digits19(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits19(n/10)\ndef sum_of_digits20(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits20(n/10)\ndef sum_of_digits21(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits21(n/10)\ndef sum_of_digits22(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits22(n/10)\ndef sum_of_digits23(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits23(n/10)\ndef sum_of_digits24(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits24(n/10)\ndef sum_of_digits25(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits25(n/10)\ndef sum_of_digits26(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits26(n/10)\ndef sum_of_digits27(n):\n    '''\n    This is another solution to find sum of digits of a number\n    '''\n    if n < 10: \n        return n\n    return n%10 + sum_of_digits27(n/10)\ndef sum_of_digits28(n):\n    '''\n    This is anothe"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = 0\n    for x in xrange(1,n+1):\n        if x*(x+1)/2 % 2 == 1:\n            polite += x\n    return polite\ndef number_of_swaps(arr):\n    '''\n    There are some processes which need to be performed on a given array.\n    Given the array arr and the number of processes, the problem is to find the number of times \n    this process is repeated. \n    '''\n    arr = arr[:]\n    n = len(arr)\n    swaps = 0\n    while(True):\n        for x in xrange(0,n-1):\n            if arr[x] > arr[x+1]:\n                arr[x], arr[x+1] = arr[x+1], arr[x]\n                swaps += 1\n        if swaps == 0:\n            break\n    return swaps\ndef number_of_swaps_recursive(arr,n):\n    '''\n    Here the complexity of this function is O(n^2)\n    '''\n    arr = arr[:]\n    if n <= 0:\n        return 0\n    swaps = 0\n    for x in xrange(0,n-1):\n        if arr[x] > arr[x+1]:\n            arr[x], arr[x+1] = arr[x+1], arr[x]\n            swaps += 1\n    if swaps == 0:\n        return 0\n    return number_of_swaps_recursive(arr,n-1) + swaps\ndef least_number_of_swaps(arr):\n    '''\n    Given an array, we need to find the minimum number of swaps to make it sorted.\n    '''\n    arr = arr[:]\n    n = len(arr)\n    swaps = 0\n    for x in xrange(0,n-1):\n        if arr[x] > arr[x+1]:\n            arr[x], arr[x+1] = arr[x+1], arr[x]\n            swaps += 1\n    if swaps == 0:\n        return 0\n    return swaps\ndef least_number_of_swaps_recursive(arr):\n    '''\n    This is the trickiest problem to solve. Since the complexity is O(n^2), we can try to optimize it.\n    Since the complexity is O(n^2), the complexity is O(n), which is the same as brute force.\n    '''\n    arr = arr[:]\n    n = len(arr)\n    swaps = 0\n    for x in xrange(0,n-1):\n        if arr[x] > arr[x+1]:\n            arr[x], arr[x+1] = arr[x+1], arr[x]\n            swaps += 1\n    if swaps == 0:\n        return 0\n    return swaps\ndef minimum_swaps_array(arr):\n    '''\n    Given an array, the task is to find the minimum number of swaps that are performed to make the array sorted.\n    An array is said to be sorted if it is possible to rearrange the array so that it is sorted in ascending order.\n    '''\n    arr = arr[:]\n    n = len(arr)\n    swaps = 0\n    for x in xrange(0,n-1):\n        if arr[x] > arr[x+1]:\n            arr[x], arr[x+1] = arr[x+1], arr[x]\n            swaps += 1\n    if swaps == 0:\n        return 0\n    return swaps\ndef minimum_swaps_recursive(arr,n):\n    '''\n    Here the complexity of this function is O(n)\n    '''\n    arr = arr[:]\n    if n <= 0:\n        return 0\n    swaps = 0\n    for x in xrange(0,n-1):\n        if arr[x] > arr[x+1]:\n            arr[x], arr[x+1] = arr[x+1], arr[x]\n            swaps += 1\n    if swaps == 0:\n        return 0\n    return minimum_swaps_recursive(arr,n-1) + swaps\ndef insertion_sort_recursive(arr):\n    '''\n    Given a array arr of positive integers, you need to sort the array in ascending order.\n    You can use insertion sort here to sort the array. \n    '''\n    arr = arr[:]\n    n = len(arr)\n    if n == 1:\n        return\n    insertion_sort_recursive(arr[0:n-1])\n    for x in xrange(n-2,-1,-1):\n        if arr[x] > arr[x+1]:\n            arr[x], arr[x+1] = arr[x+1], arr[x]\n    return arr\ndef find_kth_smallest_recursive(arr,k,start,end):\n    '''\n    Find the kth smallest number in an unsorted array. \n    '''\n    if start > end:\n        return None\n    if end - start == 1:\n        return arr[start]\n    mid = int((start+end)/2)\n    if k > mid:\n        return find_kth_smallest_recursive(arr,k,mid+1,end)\n    if k < mid:\n        return find_kth_smallest_recursive(arr,k,start,mid)\n    if arr[start] < arr[mid]:\n        if arr[start] <= arr[mid] and k <= mid - start + 1:\n            return find_kth_smallest_recursive(arr,k,start,mid)\n        else:\n            return find_kth_smallest_recursive(arr,k,mid+1,end)\n    else:\n        if arr[mid] <= arr[end] and mid - start + 1 <= k:\n            return find_kth_smallest_recursive(arr,k,mid+1,end)\n        else:\n            return find_kth_smallest_recursive(arr,k,start,mid)\ndef find_kth_smallest_recursive(arr):\n    arr = arr[:]\n    n = len(arr)\n    return find_kth_smallest_recursive(arr,n,0,n-1)\ndef find_kth_smallest(arr):\n    '''\n    Given an array arr, we need to find the kth smallest element in the array.\n    '''\n    arr = arr[:]\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n    pivot = arr[0]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    if n - 1 < len(left):\n        return find_kth_smallest(right)\n    elif len(left) < n - 1:\n        return find_kth_smallest(left)\n    else:\n        return pivot\ndef rotate_by_one_recursive(arr):\n    '''\n    Given an array arr of positive integers, you need to find the maximum number of elements that can be obtained by rotating arr by one index.\n    '''\n    if len(arr) <= 1:\n        return 0\n    arr = arr[:]\n    n = len(arr)\n    if n == 2:\n        return max(arr)\n    mid = int((n+1)/2)\n    left = rotate_by_one_recursive(arr[0:mid])\n    right = rotate_by_one_recursive(arr[mid:n])\n    left_max = right_max = 0\n    if arr[mid] > arr[mid-1]:\n        left_max = arr[mid-1]\n    if arr[n-1] > arr[n-2]:\n        right_max = arr[n-1]\n    rotated = arr[mid-1] + arr[n-1]\n    if rotated > left and rotated > right:\n        return rotated\n    elif rotated > left and rotated < right:\n        return left\n    else:\n        return right\ndef rotate_by_one_iterative(arr):\n    '''\n    Given an array arr of positive integers, you need to find the maximum number of elements that can be obtained by rotating arr by one index.\n    '''\n    arr = arr[:]\n    n = len(arr)\n    if n <= 1:\n        return 0\n    left, righ"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    res = [1]\n    for i in range(1, n):\n        res.append(res[i-1] * (3*i-1)//2)\n    return res[-1]\ndef prime_factorization(n): \n    '''\n    Write a function to find prime factorization of a number. \n    For example, factorization of a positive integer 5 is 1*2*5.\n    '''\n    res = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    return res + [n] if n > 1 else res\ndef is_fib(n):\n    '''\n    Write a function to check if a number is Fibonacci number. \n    Fibonacci numbers are numbers in the following set: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,...\n    '''\n    s = int(math.sqrt(n))\n    if s * s == n:\n        return s + 1\n    return False\ndef is_prime(n): \n    '''\n    Write a function to check if a number is prime. \n    For example, a prime number is any number that is divisible only by itself and 1.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef permutations(s): \n    '''\n    Write a function to print all permutations of a given string. \n    For example, for input string abc, the function should print \n    abc, acb, bac, bca, cba, cba.\n    '''\n    if len(s) == 1:\n        return s\n    res = []\n    for i in range(len(s)):\n        for perm in permutations(s[:i] + s[i+1:]):\n            res.append(s[i] + perm)\n    return res\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is palindrome. \n    A palindrome is a number that reads the same backward as forward.\n    For example, 121 is a palindrome, as is 899.\n    '''\n    s = str(n)\n    return s == s[::-1]\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a number. \n    For example, factorial of 6 is 720.\n    '''\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\ndef is_leap_year(y): \n    '''\n    Write a function to check if a year is leap year. \n    A leap year is divisible by 4, but not divisible by 100. \n    For example, 2012 is a leap year, but 2100 is not.\n    '''\n    return y % 4 == 0 and y % 100!= 0\ndef find_month(d, y): \n    '''\n    Write a function to find month of a date. \n    For example, if the date is 16.03.2012, then the function should return March.\n    '''\n    return ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][d-1]\ndef is_pangram(s): \n    '''\n    Write a function to check if a string is pangram. \n    A pangram is a sentence that contains all the letters of the alphabet at least once. \n    For example, the string 'The quick brown fox jumps over the lazy dog' is a pangram, \n    as does the string 'We promptly judged antique ivory buckles for the next prize'.\n    '''\n    s = s.replace(\" \", \"\")\n    s = s.lower()\n    s = s.replace(\"'\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\":\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"\\\\\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"$\", \"\")\n    return len(set(s)) == 26\ndef two_oldest_ages(ages):\n    '''\n    Write a function to find the oldest and second oldest ages of a list of people. \n    For example, given [21, 22, 23, 21, 22], the function should return [21, 22].\n    '''\n    s = sorted(ages)\n    return [s[-1], s[-2]]\ndef remove_duplicates(s): \n    '''\n    Write a function to remove duplicates from a list. \n    For example, given [5, 3, 2, 2, 4, 4, 4], the function should return [5, 3, 2, 4].\n    '''\n    s = list(set(s))\n    s.sort()\n    return s\ndef min_max(arr): \n    '''\n    Write a function to find the minimum and maximum elements of a list. \n    For example, given [3, 4, 5, 1, 2], the function should return [1, 5].\n    '''\n    arr.sort()\n    return [arr[0], arr[-1]]\ndef rotate_matrix(m):\n    '''\n    Write a function to rotate a square matrix (2-D array) by 90 degrees in the counter-clockwise direction. \n    For example, given the following matrix:\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]\n    ]\n    the function should return:\n    [\n      [7, 4, 1],\n      [8, 5, 2],\n      [9, 6, 3]\n    ]\n    '''\n    m = m[:]\n    n = len(m)\n    for i in range(n):\n        for j in range(i, n):\n            m[i][j], m[j][i] = m[j][i], m[i][j]\n    for i in range(n):\n        for j in range(n // 2):\n            m[i][j], m[i][-j - 1] = m[i][-j - 1], m[i][j]\n    return m\ndef nth_row_pascal(n): \n    '''\n    Write a function to find the nth row of Pascal's Triangle. \n    For example, if n = 4, then the function should return [1, 4, 6, 4, 1].\n    '''\n    return [1 for i in range(n)] + [sum(x) for x in zip([0] + [1] * (n - 1), [0] + [1] * (n - 1))]\ndef find_min_max(n): \n    '''\n    Write a function to find the minimum and maximu"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    arr = [1,1] \n    for i in range(2,n): \n        arr.append(arr[i-1] + arr[i-2]) \n    return arr[n-1] \n    \ndef nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    arr = [1,1] \n    for i in range(2,n): \n        arr.append(arr[i-1] + arr[i-2]) \n    return arr[n-1] \n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = [1,2]\n    for i in xrange(3,n+1):\n        if (i>=2):\n            if (num[i-1]%2==0 and num[i-2]%2==0):\n                num.append(2*num[i-2])\n            elif (num[i-1]%2==0 and num[i-2]%2!=0):\n                num.append(num[i-1])\n            elif (num[i-1]%2!=0 and num[i-2]%2==0):\n                num.append(num[i-2])\n            elif (num[i-1]%2!=0 and num[i-2]%2!=0):\n                num.append(3*num[i-2])\n        else:\n            num.append(1)\n    return num[n]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0: \n        return 1\n    else: \n        return is_polite(n-1)*n \n    return 0\ndef is_polite2(n):\n    '''\n    A more efficient approach of finding nth polite number\n    '''\n    return n*(n+1)/2\ndef sum_of_digits(n):\n    '''\n    Write a function to sum of digits of a number\n    '''\n    s=0\n    while n:\n        s=s+n%10\n        n/=10\n    return s\ndef kaprekar_n(n):\n    '''\n    A kaprekar number is a number which is equal to 4n + 1 where n is a positive integer. \n    Write a function that determines whether or not a number is a kaprekar number.\n    '''\n    if n>=0:\n        return 4*n+1\n    else:\n        return -1\ndef kaprekar_n_2(n):\n    '''\n    A kaprekar number is a number which is equal to 4n + 1 where n is a positive integer. \n    Write a function that determines whether or not a number is a kaprekar number.\n    '''\n    if n>=0:\n        s=str(n)\n        if len(s)<=1:\n            return False\n        if s[0]=='4' and s[1:]==s[1:]:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef kaprekar_n_3(n):\n    '''\n    A kaprekar number is a number which is equal to 4n + 1 where n is a positive integer. \n    Write a function that determines whether or not a number is a kaprekar number.\n    '''\n    if n>=0:\n        s=str(n)\n        if len(s)<=1:\n            return False\n        if len(s)==1:\n            return n==4*n+1\n        if s[0]=='4' and s[1:]==s[1:]:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef palindrome(s):\n    '''\n    Write a function to check whether a string is palindrome or not\n    '''\n    if len(s)<=1:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return palindrome(s[1:-1])\n        else:\n            return False\ndef palindrome2(s):\n    '''\n    A more efficient approach of finding palindrome\n    '''\n    if len(s)<=1:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return palindrome2(s[1:-1])\n        else:\n            return False\ndef palindrome3(s):\n    '''\n    A more efficient approach of finding palindrome\n    '''\n    if len(s)<=1:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return palindrome3(s[1:-1])\n        else:\n            return False\ndef is_binary(n):\n    '''\n    Write a function to determine whether a number is a binary number\n    '''\n    if n>=0:\n        return str(bin(n))[-2:]=='01'\n    else:\n        return False\ndef nth_power_of_2(n):\n    '''\n    Write a function to find nth power of 2\n    '''\n    if n>=0:\n        return 2**n\n    else:\n        return 2**(-n)\ndef power_of_2(n):\n    '''\n    Write a function to find power of 2\n    '''\n    if n>=0:\n        s=str(bin(n))[2:]\n        for i in range(len(s)):\n            if s[i]=='1':\n                s=s[:i]+'0'+s[i+1:]\n        return int(s,2)\n    else:\n        return 2**(-n)\ndef is_palindrome(n):\n    '''\n    Write a function to check whether a number is palindrome or not\n    '''\n    if n>=0:\n        s=str(n)\n        if s==s[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_power_of_2(n):\n    '''\n    Write a function to check whether a number is power of 2 or not\n    '''\n    if n>=0:\n        if n==1:\n            return True\n        if n==0:\n            return False\n        if n%2==0:\n            return is_power_of_2(n/2)\n        else:\n            return False\n    else:\n        return False\ndef is_power_of_2_2(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2(n/2)\n    else:\n        return False\ndef is_power_of_2_3(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2_3(n/2)\n    else:\n        return False\ndef is_power_of_2_4(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2_4(n/2)\n    else:\n        return False\ndef is_power_of_2_5(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2_5(n/2)\n    else:\n        return False\ndef is_power_of_2_6(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2_6(n/2)\n    else:\n        return False\ndef is_power_of_2_7(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2_7(n/2)\n    else:\n        return False\ndef is_power_of_2_8(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2_8(n/2)\n    else:\n        return False\ndef is_power_of_2_9(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2_9(n/2)\n    else:\n        return False\ndef is_power_of_2_10(n):\n    '''\n    A more efficient approach of checking power of 2\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return is_power_of_2_10(n/2)\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    fib = [1,2]\n    for i in range(2,n): \n        fib.append(fib[i-1] + fib[i-2]) \n    #print(fib)\n    #print(len(fib))\n    return fib[n-1]\n    \ndef gcd(x,y):\n    '''\n    Write a function to find the GCD of two numbers x,y\n    '''\n    if(x>y):\n        small = y\n    else:\n        small = x\n    for i in range(1,small+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i\n    return gcd\n    \ndef find_gcd(num1,num2):\n    '''\n    Write a function to find the GCD of two numbers\n    '''\n    if(num1>num2):\n        small = num2\n    else:\n        small = num1\n    for i in range(1,small+1):\n        if((num1 % i == 0) and (num2 % i == 0)):\n            gcd = i\n    return gcd\n    \ndef find_factor(num):\n    '''\n    Write a function to find the factors of a number\n    '''\n    i = 2\n    factors = []\n    while i <= num:\n        if(num % i == 0):\n            factors.append(i)\n            num = num / i\n        else:\n            i = i+1\n    return factors\n    \ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is a perfect square\n    '''\n    return int(math.sqrt(n))*int(math.sqrt(n)) == n\n    \ndef is_super_perfect_square(n):\n    '''\n    Write a function to check if a number is a super perfect square\n    '''\n    temp = n\n    while(1):\n        if(is_perfect_square(temp)):\n            return True\n        else:\n            temp = temp + 1\n    return False\n    \ndef is_super_perfect_square_loop(n):\n    '''\n    Write a function to check if a number is a super perfect square\n    '''\n    temp = n\n    while(1):\n        if(is_perfect_square(temp)):\n            return True\n        else:\n            temp = temp + 1\n    return False\n    \ndef is_super_perfect_square_recursion(n):\n    '''\n    Write a function to check if a number is a super perfect square\n    '''\n    if(n==0):\n        return True\n    else:\n        return is_perfect_square(n) and is_super_perfect_square_recursion(n - 1)\n    \ndef sum_list(lst):\n    '''\n    Write a function to compute the sum of all the elements in a list\n    '''\n    sum = 0\n    for i in lst:\n        sum = sum + i\n    return sum\n    \ndef sum_list_loop(lst):\n    '''\n    Write a function to compute the sum of all the elements in a list\n    '''\n    sum = 0\n    for i in lst:\n        sum = sum + i\n    return sum\n    \ndef sum_list_recursion(lst):\n    '''\n    Write a function to compute the sum of all the elements in a list\n    '''\n    if(len(lst) == 1):\n        return lst[0]\n    else:\n        return lst[len(lst) - 1] + sum_list_recursion(lst[0:len(lst) - 1])\n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number\n    '''\n    if(n==1):\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef factorial_loop(n):\n    '''\n    Write a function to compute the factorial of a number\n    '''\n    fact = 1\n    if(n==1):\n        return 1\n    else:\n        for i in range(2,n+1):\n            fact = fact * i\n        return fact\n    \ndef factorial_recursion(n):\n    '''\n    Write a function to compute the factorial of a number\n    '''\n    if(n==1):\n        return 1\n    else:\n        return n * factorial_recursion(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a function to compute the nth fibonacci number\n    '''\n    if(n==1 or n==2):\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef fibonacci_loop(n):\n    '''\n    Write a function to compute the nth fibonacci number\n    '''\n    a = 1\n    b = 1\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        for i in range(3,n+1):\n            c = a + b\n            a = b\n            b = c\n        return c\n    \ndef fibonacci_recursion(n):\n    '''\n    Write a function to compute the nth fibonacci number\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return fibonacci_recursion(n-1) + fibonacci_recursion(n-2)\n    \ndef is_power_of_two(n):\n    '''\n    Write a function to check if a number is a power of 2\n    '''\n    return (n & (n - 1)) == 0\n    \ndef is_power_of_two_loop(n):\n    '''\n    Write a function to check if a number is a power of 2\n    '''\n    if(n==0):\n        return False\n    else:\n        return is_power_of_two_loop(n & n - 1)\n    \ndef is_power_of_two_recursion(n):\n    '''\n    Write a function to check if a number is a power of 2\n    '''\n    if(n==1):\n        return True\n    elif(n==0):\n        return False\n    else:\n        return is_power_of_two_recursion(n & n - 1)\n    \ndef prime_number_check(n):\n    '''\n    Write a function to check if a number is a prime number\n    '''\n    if(n==1):\n        return False\n    elif(n==2):\n        return True\n    else:\n        for i in range(2,n):\n            if(n % i == 0):\n                return False\n        return True\n    \ndef prime_number_check_loop(n):\n    '''\n    Write a function to check if a number is a prime number\n    '''\n    if(n==1):\n        return False\n    elif(n==2):\n        return True\n    else:\n        for i in range(2,n):\n            if(n % i == 0):\n                return False\n        return True\n    \ndef prime_number_check_recursion(n):\n    '''\n    Write a function to check if a number is a prime number\n    '''\n    if(n==1):\n        return False\n    elif(n==2):\n        return True\n    else:\n        return prime_number_check_recursion(n-1)\n    \ndef sum_digits(n):\n    '''\n    Write a function to find the sum of the digits of a number\n    '''\n    if(n==0):\n        return 0\n    else:\n        return (n % 10) + sum_digits(n/10)\n    \ndef sum_digits_loop(n):\n    '''\n    Write a function to find the sum of the digits of a number\n    '''\n    sum = 0\n    if(n==0):\n        return 0\n    else:\n        sum = (n % 10) + sum_digits_loop(n/10)\n    return sum\n    \ndef sum_digits_recursio"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = [0]*(n+1)\n    s[0],s[1] = 0,1\n    for i in range(2,n+1):\n        for j in range(i,0,-1):\n            s[i] += s[j-1]\n    return s[n]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    return int(n*((n-1)**0.5))\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    res = []\n    res.append(1)\n    m = 1\n    while len(res) < n:\n        for i in range(0, len(res)):\n            if res[i] * m > m:\n                res.append(res[i] * m)\n        m += 1\n    return res[-1]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = l1[:]\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            yield l1[i], l1[i + 1]\n        else:\n            yield l1[i], l1[0]\n    \ndef pair_wise_no_repeat(l1):\n    l1 = l1[:]\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            yield l1[i], l1[i + 1]\n        else:\n            yield l1[i], l1[0]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0,len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1: return l1\n    if len(l1) == 1: return [[l1[0], l1[0]+1], [l1[0]+1, l1[0]]]\n    pairs = []\n    for i in xrange(len(l1)-1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1:\n        return []\n    if len(l1) <= 1:\n        return [[l1[0], l1[0] + 1]]\n    result = []\n    i = 0\n    while i < len(l1):\n        result.append([l1[i], l1[i] + 1])\n        i += 1\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in xrange(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    ret = []\n    for i in range(len(l1)-1):\n        ret.append([l1[i], l1[i+1]])\n    return ret\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output = []\n    for i in range(len(l1)-1):\n        output.append((l1[i],l1[i+1]))\n    return output\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    from itertools import combinations\n    l2 = list(combinations(l1,2))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    hash_map = {}\n    for number in arr:\n        if number in hash_map:\n            hash_map[number] += 1\n        else:\n            hash_map[number] = 1\n    count = 0\n    for key, val in hash_map.items():\n        if sum - key in hash_map:\n            count += (val * (hash_map[sum - key]))\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    return sum_of_pairs(arr, sum)\n    \ndef sum_of_pairs(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr_len = len(arr)\n    for i in range(0, arr_len - 1):\n        for j in range(i + 1, arr_len):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr_count = [0] * (2 * sum + 1)\n    for i in arr:\n        arr_count[i + sum] += 1\n    count = 0\n    for i in arr_count:\n        count += i * (i - 1) // 2\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum - arr[0] in arr, arr.count(sum - arr[0])\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                result += 1\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum == 0:\n        return 1\n    elif arr is None:\n        return 0\n    elif len(arr) == 0:\n        return 0\n    else:\n        return get_pairs_count(arr[1:], sum-arr[0]) + get_pairs_count(arr[1:], sum)\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [li1[i] for i in range(len(li1)) if li1[i] not in li2]\n    return li_dif\n    \ndef Diff2(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n    \ndef Diff3(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li2)-set(li1))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n    \ndef is_palindrome(s):\n    '''\n    A string is said to be a palindrome if reverse(s) is equal to s.\n    '''\n    return s == ''.join(reversed(s))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1+li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [li1,li2]\n    return list(set(li1).difference(set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 1:\n        return 1\n    return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(1, n + 1) :\n        if i % 2 == 1 :\n            ans += i ** 4\n    return ans\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 3 \n    elif n == 3 : \n        return 7 \n    elif n == 4 : \n        return 15 \n    elif n == 5 : \n        return 31 \n    elif n == 6 : \n        return 63 \n    elif n == 7 : \n        return 127 \n    elif n == 8 : \n        return 255 \n    elif n == 9 : \n        return 511 \n    elif n == 10 : \n        return 1023 \n    elif n == 11 : \n        return 2047 \n    elif n == 12 : \n        return 4095 \n    elif n == 13 : \n        return 8191 \n    elif n == 14 : \n        return 16383 \n    elif n == 15 : \n        return 32767 \n    else : \n        return 0 \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    assert n >= 0, 'Number of elements must be positive'\n    if n == 1:\n        return 1\n    else:\n        return 1 + n + odd_num_sum(n-1) \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2) : \n        total += i**4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0 \n    for i in range(1, n + 1, 2) : \n        odd_sum = odd_sum + i ** 4 \n    return odd_sum \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # return sum(x**4 for x in range(1,n,2))\n    return sum(map(lambda x: x**4, filter(lambda x: x%2 == 1, range(1,n))))\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (n**4)*(((n**2)+1)//2)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0 \n    for i in range(1,n+1) : \n        if i%2 == 1 : \n            result += i**4 \n    return result \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(i**4 for i in range(1, n, 2) if i % 2!= 0)\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return 0\n    stack = deque()\n    for char in exp:\n        if char in [\"{\", \"[\", \"(\"]:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return 0\n            curr = stack.pop()\n            if (curr == \"{\" and char!= \"}\") or (curr == \"(\" and char!= \")\") or (curr == \"[\" and char!= \"]\"):\n                return 0\n    return 1 if len(stack) == 0 else 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_par = ['(','[','{','<']\n    close_par = [')',']',']','}']\n    stack = []\n    for i in exp:\n        if i in open_par:\n            stack.append(i)\n        elif i in close_par:\n            if not len(stack):\n                return False\n            if open_par.index(stack.pop())!= close_par.index(i):\n                return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    stack = []\n    stack.append(exp[0])\n    for i in range(1, len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            elif stack[-1] == ')':\n                stack.pop()\n                stack.append(2)\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # stack = deque()\n    stack = []\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == '{':\n            stack.append(c)\n        elif c == '[':\n            stack.append(c)\n        elif c in '}]':\n            if len(stack) == 0:\n                return False\n            if c == '}' and stack.pop()!= '{':\n                return False\n            if c == ']' and stack.pop()!= '[':\n                return False\n            if c == ')' and stack.pop()!= '(':\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for letter in exp:\n        if letter == '(':\n            stack.append(letter)\n        elif letter == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in exp:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef balance(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in exp:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef is_balanced(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in s:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef is_balanced2(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in s:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef balanced_par(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in s:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef balanced_par2(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in s:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in exp:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef balance(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in exp:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef is_balanced(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in s:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef is_balanced2(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in s:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef balanced_par(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in s:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef balanced_par2(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in s:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in exp:\n        if c in table.values():\n            stack.append(c)\n        elif c in table:\n            if not stack or table[c]!= stack.pop():\n                return False\n    return not stack\ndef balance(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    table = {\n        ')':'(',\n        '}':'{',\n        ']':'['\n    }\n    for c in exp:\n        if c in table.values():\n            stack.append(c)\n        elif "
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            p = stack.pop()\n            if i == ')' and p!= '(':\n                return False\n            elif i == '}' and p!= '{':\n                return False\n            elif i == ']' and p!= '[':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] in ['(', '{', '[']:\n            stack.append(exp[i])\n        elif exp[i] in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            c = stack.pop()\n            if (exp[i] == ')' and c!= '(') or (exp[i] == '}' and c!= '{') or (exp[i] == ']' and c!= '['):\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 1:\n        return True\n    stack = deque()\n    for c in exp:\n        if c in ['(', ')', '{', '}']:\n            if c == '{' and len(stack) == 0:\n                return False\n            if c == '{' and len(stack) > 0:\n                if stack[len(stack)-1] == '{':\n                    stack.pop()\n                    continue\n            if c == '}' and len(stack) > 0:\n                if stack[len(stack)-1] == '}':\n                    stack.pop()\n                    continue\n            if c == ')' and len(stack) > 0:\n                if stack[len(stack)-1] == ')':\n                    stack.pop()\n                    continue\n            if c == '}' and len(stack) == 0:\n                return False\n            stack.append(c)\n    if len(stack) > 0:\n        return False\n    return True\n    \n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # base case\n    if len(exp) == 0:\n        return True\n    stack = deque()\n    for c in exp:\n        if c == '{':\n            stack.append(c)\n        elif c == '(':\n            stack.append(c)\n        elif c == '}':\n            if len(stack) == 0 or stack.pop()!= '{':\n                return False\n        elif c == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n        else:\n            continue\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    \ndef get_next_node(node, adj_list):\n    '''\n    Given the current node and the adj_list of the graph, this function returns the \n    adjacent node which is the next possible node to add to the expression tree.\n    '''\n    if node not in adj_list:\n        return None\n    else:\n        return adj_list[node]\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str) - K + 1):\n        word = test_str[i:i+K]\n        if word not in test_str:\n            continue\n        else:\n            test_str = test_str.replace(word, \"\")\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    count = 0\n    for i in xrange(len(test_str) - K + 1):\n        if test_str[i:i+K] == test_str[i+K:i+K*2]:\n            count += 1\n    return count\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(' ')\n    new_str = ''\n    for word in test_list:\n        if len(word) == K:\n            continue\n        else:\n            new_str += word +''\n    return new_str[:-1]\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # This will get the list of words in the string\n    words = test_str.split()\n    new_words = []\n    # Iterate over all the words in the string\n    for word in words:\n        # If word length is equal to K\n        if len(word) == K:\n            # Remove word from the list\n            words.remove(word)\n    # Iterate over the new list\n    for new_word in words:\n        # Add word to new_words list\n        new_words.append(new_word)\n    # Return the new_words list\n    return new_words\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([w for w in test_str.split() if len(w)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '':\n        return ''\n    test_str = test_str.split()\n    new_str = ''\n    for word in test_str:\n        if len(word)!= K:\n            new_str = new_str + word +''\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    output = ''\n    words = test_str.split(' ')\n    for word in words:\n        if len(word) == K:\n            continue\n        else:\n            output += word +''\n    return output.rstrip()\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    for i in range(len(test_str)):\n        if test_str[i]!='':\n            new_str += test_str[i]\n        elif test_str[i] =='':\n            if len(new_str) > K:\n                new_str = new_str[0:-K]\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    import re\n    result = re.findall(r'\\b(?=' + '[' + K + ']+)', test_str)\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == \"\":\n        return test_str\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pat_arr = []\n    arr = []\n    for i in range(len(text)):\n        pat_arr.append(pattern)\n    for i in range(len(text)):\n        if text[i] in pat_arr:\n            arr.append(i)\n    return arr\n    \ndef occurence_substring_format(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pat_arr = []\n    arr = []\n    for i in range(len(text)):\n        pat_arr.append(pattern)\n    for i in range(len(text)):\n        if text[i] in pat_arr:\n            arr.append(\"{} at {}\".format(text[i],i))\n    return arr\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m=re.search(pattern,text)\n    if m:\n        print(m.start())\n        print(m.end())\n        print(m.span())\n    else:\n        print(None)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not text:\n        return 0\n    else:\n        return text.find(pattern)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(text.find(pattern))\n    print(text.find(pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return [m.start() for m in re.finditer(pattern,text)]\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #print('in funcion')\n    if(len(pattern)>len(text)):\n        return None\n    pattern_regex = re.compile(pattern)\n    regex_match = pattern_regex.search(text)\n    if regex_match:\n        return regex_match.span()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurances = []\n    pattern_pos = []\n    start_index = -1\n    m = re.search(pattern, text)\n    if m:\n        occurances = m.groups()\n        start_index = m.start()\n        pattern_pos = list(range(start_index, start_index + len(occurances)))\n    return occurances, pattern_pos\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    #define the pattern\n    \n    regex = re.compile(pattern)\n    \n    #now we have to iterate over the text\n    positions = []\n    for match in regex.finditer(text):\n        positions.append(match.start())\n        \n    if len(positions) > 0:\n        print(\"Found %s times\" % len(positions))\n        for pos in positions:\n            print(\"At position %s\" % pos)\n            \n    else:\n        print(\"Didn't find anything\")\n        \n    \n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.finditer(pattern,text)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.subn(pattern,r'\\1',text)\ndef remove_vowels(text):\n    '''\n    Write a function to remove the vowels from a string.\n    '''\n    return re.subn(r'[aeiouAEIOU]','',text)\ndef roman_to_int(text):\n    '''\n    Write a function to convert a Roman numeral to an integer. For example:\n    I = 1\n    V = 5\n    X = 10\n    L = 50\n    C = 100\n    D = 500\n    M = 1000\n    '''\n    if re.match(r'^[IVXLCDM]+$',text):\n        return sum(rom[text[i]] for i in range(len(text)))\n    return None\ndef reverse_string(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    return text[::-1]\ndef get_length(text):\n    '''\n    Write a function to get the length of a string.\n    '''\n    return len(text)\ndef count_characters(text,char):\n    '''\n    Write a function to count the number of times a character occurs in a string.\n    '''\n    return text.count(char)\ndef strip_whitespace(text):\n    '''\n    Write a function to remove leading and trailing whitespace characters from a string.\n    '''\n    return text.strip()\ndef change_case(text,flag):\n    '''\n    Write a function to change the case of a string.\n    '''\n    if flag==True:\n        return text.swapcase()\n    return text.lower()\ndef find_words(text,word):\n    '''\n    Write a function to find the position of the first occurrence of a word in a string.\n    '''\n    return re.search(r'\\b'+word+r'\\b',text)\ndef find_chars(text,char):\n    '''\n    Write a function to find the position of the first occurrence of a character in a string.\n    '''\n    return re.search(r'\\b'+char+r'\\b',text)\ndef find_characters(text,char1,char2):\n    '''\n    Write a function to find the position of the first occurrence of two characters in a string.\n    '''\n    return re.search(r'\\b'+char1+r'\\b'+char2+r'\\b',text)\ndef find_substrings(text,substring):\n    '''\n    Write a function to find the position of the first occurrence of a substring in a string.\n    '''\n    return re.search(substring,text)\ndef replace_substrings(text,substring,replacement):\n    '''\n    Write a function to replace a substring with another string.\n    '''\n    return re.sub(substring,replacement,text)\ndef convert_bytes(size):\n    '''\n    Write a function to convert a byte value to human-readable version.\n    '''\n    if size < 0:\n        raise ValueError('number must be positive')\n    step_to_greater_unit = {0: '', 1: 'K', 2: 'M', 3: 'G', 4: 'T'}\n    return_string = ''\n    for unit in step_to_greater_unit:\n        if size < 1024:\n            return_string += str(size) + step_to_greater_unit[unit]\n            return return_string\n        size = size / 1024\n    return_string += str(size) + 'P'\n    return return_string\ndef get_user_input():\n    return input('Enter a string: ')\ndef most_frequent_char(text):\n    '''\n    Write a function to get the most frequent character from a string.\n    '''\n    return max(text,key=text.count)\ndef remove_repeated_chars(text,char):\n    '''\n    Write a function to get the string with all the characters in alphabetical order.\n    '''\n    return re.subn(r'(.)\\1*',r'\\1',text)\ndef get_index(text,char):\n    '''\n    Write a function to get the index of a character in a string.\n    '''\n    return text.find(char)\ndef count_upper_and_lower(text):\n    '''\n    Write a function to count the number of upper case and lower case characters in a string.\n    '''\n    upper_count = 0\n    lower_count = 0\n    for char in text:\n        if char.isupper():\n            upper_count += 1\n        if char.islower():\n            lower_count += 1\n    return {'upper':upper_count,'lower':lower_count}\ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return text==text[::-1]\ndef is_pangram(text):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    return set(text.lower())>set(r'abcdefghijklmnopqrstuvwxyz')\ndef is_panagram(text):\n    '''\n    Write a function to check if a string is a panagram.\n    '''\n    return set(text.lower())<=set(r'abcdefghijklmnopqrstuvwxyz')\ndef is_anagram(text1,text2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(text1.lower())==sorted(text2.lower())\ndef swap_words(text,char):\n    '''\n    Write a function to swap the words with a given character.\n    '''\n    return ''.join(char if word==char else word for word in text.split())\ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    return max(text.split(),key=len)\ndef rearrange_words(text,char):\n    '''\n    Write a function to rearrange the words in a string.\n    '''\n    return''.join(text.split(char))\ndef divide_by_n(text,n):\n    '''\n    Write a function to divide a string into chunks of n characters.\n    '''\n    return [text[i:i+n] for i in range(0,len(text),n)]\ndef get_length_of_longest_word(text):\n    '''\n    Write a function to get the length of the longest word in a string.\n    '''\n    return max(text.split(),key=len)\ndef get_length_of_shortest_word(text):\n    '''\n    Write a function to get the length of the shortest word in a string.\n    '''\n    return min(text.split(),key=len)\ndef word_break(text,list_of_words):\n    '''\n    Write a function to check if a string can be break into words.\n    '''\n    return all(text.startswith(word) for word in list_of_words)\ndef split_by_n(text,n):\n    '''\n    Write a function to split a string into chunks of n characters.\n    '''\n    return [text[i:i+n] for i in range(0,len(text),n)]\ndef is_palindrome_permutation(text):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    counts = {}\n    for char in text.lower():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    count_odds = 0\n    for count in counts.values():\n        if count%2==1:\n            count_odds += 1\n    return count_odds<=1\ndef is_palindrome_permutation_hashtable(text):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    text = text.lower()\n    counts = {}\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return reduce(lambda a,b: a and b, map(lambda i: nums[i]%2 == 1, range(1,len(nums),2)), True)\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return False\n    for i in range(len(nums)):\n        if i%2 == 1 and nums[i]%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if i < len(nums) and nums[i] % 2!= 0:\n            count += 1\n    if count > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(1, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for x in range(1,len(nums),2):\n        if x+1 < len(nums):\n            if nums[x]!= nums[x+1]:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in xrange(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            if test_str[i-1] in 'aeiouAEIOU':\n                vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiouAEIOU')\n    total = 0\n    for i, char in enumerate(test_str):\n        if i == 0:\n            total += 1\n        else:\n            if char in vowels:\n                total += 1\n    return total\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i]+test_str[i+1]) in ['ae','ea','ai','au','o','ou']:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in 'aeiou':\n            if test_str[i] == test_str[i + 1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str) - 1):\n        if test_str[i] in 'aeiou' and test_str[i + 1] in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i-1] in 'aeiou' and test_str[i+1] in 'aeiou':\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a':'A','e':'E','i':'I','o':'O','u':'U'}\n    vowels_found = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels.keys():\n            if i == 0:\n                vowels_found += 1\n            elif test_str[i-1] in vowels.keys():\n                vowels_found += 1\n            elif test_str[i-1] in vowels.values():\n                vowels_found += 1\n    print(vowels_found)\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    num_vowels = 0\n    vowel = ['a','e','i','o','u','A','E','I','O','U']\n    for i in range(len(test_str)):\n        if test_str[i] in vowel and i!= 0 and test_str[i-1] not in vowel:\n            num_vowels += 1\n        elif test_str[i] not in vowel and i!= 0 and test_str[i-1] in vowel:\n            num_vowels += 1\n    print(\"There are {0} vowels\".format(num_vowels))\n    return num_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouy\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return None\n    # return sum(arr)\n    non_repeated_ele = {}\n    non_repeated_sum = 0\n    for ele in arr:\n        if ele in non_repeated_ele:\n            non_repeated_ele[ele] += 1\n        else:\n            non_repeated_ele[ele] = 1\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # method 1: find the sum of the unique elements\n    # and then subtract the sum of the repeated elements\n    arr = set(arr)\n    return sum(arr) - sum(arr)*len(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    tot = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            tot += i\n    return tot\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_non_repeated = 0\n    for i in arr:\n        if arr.count(i)==1:\n            sum_non_repeated += i\n    return sum_non_repeated\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if arr.count(x)==1])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    a = [x for x in arr if arr.count(x) == 1]\n    return sum(a)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = [int(i) for i in arr]\n    arr.sort()\n    #print(arr)\n    s = set()\n    res = 0\n    for i in arr:\n        if i not in s:\n            s.add(i)\n            res += i\n    return res\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    summ=0\n    for i in arr:\n        if arr.count(i)==1:\n            summ+=i\n    return summ\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if arr.count(x) == 1])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_arr = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum_arr += i\n    return sum_arr\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def sort_list(list2):\n        return sorted(list2)\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[x]*len(list(group)) for x, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = [[list1[0]]]\n    for k,g in groupby(enumerate(list1), lambda x: x[0]-x[1]):\n        res.append([j for i,j in g])\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    prev = list1[0]\n    res.append(prev)\n    for i in range(1, len(list1)):\n        curr = list1[i]\n        if curr == prev:\n            continue\n        else:\n            res.append(curr)\n            prev = curr\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k,g in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # list1 = [1,2,3,3,3,3,3,5,5,5,5,7,7,7,7,7]\n    # list1 = [1,2,3,3,3,3,3,5,5,5,5,7,7,7,7,7]\n    # list1 = [1,2,3,3,3,3,3,5,5,5,5,7,7,7,7,7]\n    # list1 = [1,2,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    newlist = []\n    for k,g in groupby(list1):\n        newlist.append(list(g))\n    return newlist\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(val) for key, val in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    dict = {}\n    final_list = []\n    for k, g in groupby(enumerate(list1), lambda ix: ix[0] - ix[1]):\n        list2 = [x for _, x in g]\n        dict[len(list2)] = list2\n    for i in dict:\n        final_list.append(dict[i])\n    return final_list\ndef string_to_list(string):\n    '''\n    Write a function to split a string at spaces into a list.\n    '''\n    list1 = string.split(\" \")\n    return list1\ndef unpack_consecutive_duplicates(list1):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into sublists.\n    '''\n    dict = {}\n    final_list = []\n    for k, g in groupby(enumerate(list1), lambda ix: ix[0] - ix[1]):\n        list2 = [x for _, x in g]\n        dict[len(list2)] = list2\n    for i in dict:\n        final_list.append(dict[i])\n    return final_list\ndef multilist_to_normallist(list1):\n    '''\n    Write a function to convert a multidimensional list into a normal list.\n    '''\n    new_list = []\n    for sublist in list1:\n        for ele in sublist:\n            new_list.append(ele)\n    return new_list\ndef unique(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list1))\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\ndef group_to_list(list1):\n    '''\n    Write a function to convert a group of elements into a list.\n    '''\n    list2 = []\n    for item in list1:\n        list2.append(item)\n    return list2\ndef intersection(list1, list2):\n    '''\n    Write a function to compute the intersection of two lists.\n    '''\n    intersect_list = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                intersect_list.append(item1)\n    return intersect_list\ndef union(list1, list2):\n    '''\n    Write a function to compute the union of two lists.\n    '''\n    union_list = list1 + list2\n    return union_list\ndef symmetric_difference(list1, list2):\n    '''\n    Write a function to compute the symmetric difference of two lists.\n    '''\n    sym_diff_list = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1!= item2:\n                sym_diff_list.append(item1)\n    return sym_diff_list\ndef subset(list1, list2):\n    '''\n    Write a function to compute the subset of a list.\n    '''\n    subset_list = []\n    for item1 in list1:\n        if item1 in list2:\n            subset_list.append(item1)\n    return subset_list\ndef superset(list1, list2):\n    '''\n    Write a function to compute the superset of a list.\n    '''\n    superset_list = []\n    for item1 in list1:\n        if item1 not in list2:\n            superset_list.append(item1)\n    return superset_list\ndef get_all_subsets(list1):\n    '''\n    Write a function to compute all the subsets of a list.\n    '''\n    all_subsets = []\n    for i in range(0, len(list1)):\n        all_subsets.append(list1[i])\n        for j in range(i+1, len(list1)):\n            all_subsets.append(list1[i] + list1[j])\n    return all_subsets\ndef get_all_supersets(list1):\n    '''\n    Write a function to compute all the supersets of a list.\n    '''\n    all_supersets = []\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            all_supersets.append(list1[i] + list1[j])\n    return all_supersets\ndef rotate_list(list1, num_times):\n    '''\n    Write a function to rotate a list.\n    '''\n    rotated_list = []\n    for i in range(0, num_times):\n        rotated_list.append(list1[len(list1)-1])\n        list1.remove(list1[len(list1)-1])\n    return rotated_list\ndef find_nth_smallest(list1, n):\n    '''\n    Write a function to find the nth smallest item in a list.\n    '''\n    return list1[n]\ndef swap_item(list1, pos1, pos2):\n    '''\n    Write a function to swap two items in a list.\n    '''\n    list1[pos1], list1[pos2] = list1[pos2], list1[pos1]\n    return list1\ndef count_occurrences(list1, item):\n    '''\n    Write a function to count the number of occurrences of an item in a list.\n    '''\n    return list1.count(item)\ndef find_duplicate(list1):\n    '''\n    Write a function to find a duplicate item in a list.\n    '''\n    return list1[0]\ndef find_nth_largest(list1, n):\n    '''\n    Write a function to find the nth largest item in a list.\n    '''\n    return list1[n-1]\ndef list_to_string(list1):\n    '''\n    Write a function to convert a list into a string.\n    '''\n    string = \"\"\n    for item in list1:\n        string = string + item + \" \"\n    return string\ndef count_instances(list1, item):\n    '''\n    Write a function to count the number of occurrences of an item in a list.\n    '''\n    list1.count(item)\n    return list1.count(item)\ndef count_occurrences_in_list(list1, item):\n    '''\n    Write a function to count the number of occurrences of an item in a list.\n    '''\n    return list1.count(item)\ndef count_occurrences_in_list_recursive(list1, item, start, end):\n    '''\n    Write a function to count the number of occurrences of an item in a list.\n    '''\n    if start == end:\n        if list1[start] == item:\n            return 1\n        else:\n            return 0\n    else:\n        mid = (start + end) // 2\n        if list1[mid] == item:\n            return 1 + count_occurrences_in_list_recursive(list1, item, start, mid) + count_occurrences_in_list_recursive(list1, item, mid+1, end)\n        elif list1[mid] > item:\n            return count_occurrences_in_list_recursive(list1, item, start, mid)\n        else:\n            return count_occurrences_in_list_recursive(list1, item, mid+1, end)\ndef count_occurrences_in_list_loop(list1, item):\n    '''\n    Write a function to count the number of occurrences of an item in a list.\n    '''\n    start = 0\n    end = len(list1) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if list1[mid] == item:\n            return 1 + count_occurrences_in_list_loop(list1, item, start, mid"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        groups.append(map(itemgetter(1), g))\n    return groups\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for x in list1:\n        for y in x:\n            tup = tuple(x)\n            if tup in count:\n                count[tup] += 1\n            else:\n                count[tup] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # take copy of the list\n    list_temp = list1[:]\n    \n    # find all sublists\n    sub_lists = []\n    for i in xrange(len(list_temp)):\n        for j in xrange(i + 1, len(list_temp)):\n            sub_lists.append(list_temp[i:j])\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    list_dict = {}\n    count = 0\n    for x in range(0, len(list1)):\n        if list1[x] not in list_dict:\n            count += 1\n            list_dict[list1[x]] = count\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize the dictionary\n    dict_of_lists = {}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Counting the number of occurences of each list\n    counts = {}\n    for i in list1:\n        if tuple(i) in counts:\n            counts[tuple(i)] += 1\n        else:\n            counts[tuple(i)] = 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return [tuple(group) for group in itertools.groupby(list1)]\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        if tuple(i) not in d:\n            d[tuple(i)] = 1\n        else:\n            d[tuple(i)] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        sub = tuple(item)\n        if sub in sublists:\n            sublists[sub] += 1\n        else:\n            sublists[sub] = 1\n    return sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    myDict = {}\n    for i in list1:\n        for j in i:\n            if j not in myDict:\n                myDict[j] = 0\n            myDict[j] += 1\n    myList = []\n    for key in myDict:\n        myList.append((key, myDict[key]))\n    return myList\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_of_sublists = []\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            list_of_sublists.append(tuple(list1[i:j+1]))\n    dict_of_sublists = {}\n    for item in list_of_sublists:\n        if item in dict_of_sublists:\n            dict_of_sublists[item] = dict_of_sublists[item] + 1\n        else:\n            dict_of_sublists[item] = 1\n    return dict_of_sublists\n    \nprint unique_sublists([1,1,1,1,2,3,3,3,3])\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            sums.append((test_list[i],test_list[j]))\n    return sums\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        result.extend(list(combinations(test_list, i)))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def combinations_with_replacement(iterable, r):\n        'Alternate version of combinations with replacement'\n        pool = tuple(iterable)\n        n = len(pool)\n        if r > n:\n            return\n        indices = list(range(r))\n        yield tuple(pool[i] for i in indices)\n        while True:\n            for i in reversed(range(r)):\n                if indices[i]!= i + n - r:\n                    break\n            else:\n                return\n            indices[i] += 1\n            for j in range(i + 1, r):\n                indices[j] = indices[j - 1] + 1\n            yield tuple(pool[i] for i in indices)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print(list(combinations(test_list, 3)))\n    all_sums = set()\n    for i in range(1, len(test_list)):\n        all_sums = all_sums.union(set(combinations(test_list, i)))\n    return list(all_sums)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_comb = []\n    for l in test_list:\n        l = list(l)\n        for i in combinations(l,2):\n            tuple_comb.append(i)\n    return tuple_comb\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for tup in combinations(test_list, 2):\n        print(tup[0] + tup[1])\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # base case\n    if len(test_list) == 0:\n        return []\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,2))\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1,len(test_list)+1):\n        for combination in combinations(test_list, i):\n            if sum(combination) == 100:\n                print(combination)\n    return None\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the length of test_list\n    n = len(test_list)\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n = int(n)\n    d = 0\n    while n % 2 == 0 : \n        n = n / 2\n        d = d + 1\n    if d > 0 : \n        return False\n    return True\n    \ndef sum_of_digits(n) : \n    '''\n    Write a python function to return the sum of digits of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    n = int(n)\n    d = 0\n    while n > 0 : \n        d = d + n % 10\n        n = n / 10\n    return d\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            divisors += 2\n            if n / i == i:\n                divisors -= 1\n        i += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 1\n    divisors = 2\n    while n % 2 == 0 : \n        n = n / 2\n    divisors += 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2) :\n        if n % i == 0 :\n            divisors += 2\n    if n > 2 :\n        divisors += 1\n    return divisors\ndef prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n == 1 or n == 0 : \n        return False\n    if n == 2 : \n        return True\n    if n > 2 :\n        if n % 2 == 0 : \n            return False\n        else : \n            for i in range(3, int(math.sqrt(n)) + 1, 2) :\n                if n % i == 0 :\n                    return False\n    return True\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to calculate the sum of divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    divisors = 1\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 :\n            divisors += i + n / i\n    if n > 2 : \n        divisors += n\n    return divisors\ndef gcd(a, b) : \n    '''\n    Write a python function to find the gcd of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if a == b : \n        return a\n    if a > b :\n        if a % b == 0 : \n            return b\n        else : \n            return gcd(b, a % b)\n    if b > a : \n        if b % a == 0 :\n            return a\n        else : \n            return gcd(a, b % a)\ndef is_perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    divisors = count_divisors(n)\n    if divisors == n : \n        return True\n    return False\ndef is_abundant(n) : \n    '''\n    Write a python function to check whether the given number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if sum_of_divisors(n) > n :\n        return True\n    return False\ndef is_deficient(n) : \n    '''\n    Write a python function to check whether the given number is deficient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if sum_of_divisors(n) < n :\n        return True\n    return False\ndef is_proper(n) : \n    '''\n    Write a python function to check whether the given number is proper or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if is_abundant(n) and is_deficient(n) :\n        return True\n    return False\ndef is_lucky(n) : \n    '''\n    Write a python function to check whether the given number is lucky or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if is_perfect(n) and is_proper(n) :\n        return True\n    return False\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if str(n) == str(n)[::-1] :\n        return True\n    return False\ndef is_fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is fibonacci or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if is_palindrome(n) : \n        if is_lucky(n) :\n            return True\n    return False\ndef is_armstrong(n) : \n    '''\n    Write a python function to check whether the given number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    sum = 0\n    temp = n\n    while temp > 0 :\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if n == sum :\n        return True\n    return False\ndef is_perfect_square(n) : \n    '''\n    Write a python function to check whether the given number is perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    x = int(math.sqrt(n))\n    if x * x == n :\n        return True\n    return False\ndef is_sum_of_perfect_square(n) : \n    '''\n    Write a python function to check whether the given number is sum of perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if is_perfect_square(i) and is_perfect_square(n - i) :\n            return True\n    return False\ndef is_square(n) : \n    '''\n    Write a python function to check whether the given number is square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    x = int(math.sqrt(n))\n    if x * x == n :\n        return True\n    return False\ndef is_power_of_three(n) : \n    '''\n    Write a python function to check whether the given number is power of three or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    if is_perfect_square(n) and is_perfect_square(n / 3) and is_perfect_square(n / 9) :\n        return True\n    return False\ndef is_perfect_power(n) : \n    '''\n    Write a python function to check whether the given number is perfect power or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    if is_perfect_square(n) : \n        if n * n == n :\n            return True\n        return False\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if is_perfect_square(i) and is_perfect_square(n / i) and n / i!= i :\n            return True\n    return False\ndef is_power(a, b) : \n    '''\n    Write a python function to check whether the given number is power or not. https://www.w3resource.com/python-exercises/basic"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    i = 2\n    while i < int(math.sqrt(n)) + 1:\n        if (n % i == 0):\n            divisors += 2\n        i += 1\n    if (i == int(math.sqrt(n)) + 1):\n        divisors += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    numbers = set() \n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            numbers.add(i) \n            numbers.add(n/i) \n    return len(numbers) \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return 0 if n==1 else n + sum([x for x in range(1, (n/2) + 1) if n % x == 0])\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divs = 0\n    for i in range(1,n):\n        if n%i == 0 : \n            divs+=1\n    return divs%2 == 0\ndef is_prime(n):\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef get_prime_factors(n) :\n    '''\n    Write a python function to get prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    primes = []\n    for i in range(2,n+1):\n        if is_prime(i) :\n            primes.append(i)\n    return primes\ndef is_perfect(n) :\n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum+=i\n    return sum == n\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return str(n) == str(n)[::-1]\ndef get_palindrome_factors(n) :\n    '''\n    Write a python function to get all palindrome factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if is_palindrome(n) :\n        return [n]\n    else :\n        for i in range(1,n):\n            if is_palindrome(i) and n%i == 0:\n                return [n,i]\ndef get_factors(n) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_large_factors(n) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_small_factors(n) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_divisors(n) :\n    '''\n    Write a python function to get all divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors\ndef get_perfect_divisors(n) :\n    '''\n    Write a python function to get all perfect divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if is_perfect(i) and i not in divisors:\n            divisors.append(i)\n    return divisors\ndef get_amicable_numbers(n) :\n    '''\n    Write a python function to get all amicable numbers up to a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    amicable_numbers = []\n    for i in range(1,n+1):\n        if is_amicable(i) and i not in amicable_numbers:\n            amicable_numbers.append(i)\n    return amicable_numbers\ndef get_amicable_pairs(n) :\n    '''\n    Write a python function to get all amicable pairs up to a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    amicable_pairs = []\n    for i in range(1,n+1):\n        j = get_amicable_number(i)\n        if i!= j and i < j:\n            amicable_pairs.append([i,j])\n    return amicable_pairs\ndef get_amicable_number(n) :\n    '''\n    Write a python function to get the amicable number of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if is_amicable(n) :\n        return n\n    else :\n        return get_amicable_number(n-1)\ndef get_factorial(n) :\n    '''\n    Write a python function to get factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial*i\n    return factorial\ndef get_factorial_factors(n) :\n    '''\n    Write a python function to get factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef get_factors_sum(n) :\n    '''\n    Write a python function to get sum of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return sum(factors)\ndef get_factors_prod(n) :\n    '''\n    Write a python function to get product of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return math.prod(factors)\ndef get_factors_geo_mean(n) :\n    '''\n    Write a python function to get geometric mean of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    count = 0\n    while i <= math.sqrt(n): \n        if n % i == 0: \n            count = count + 1\n        i = i + 1\n    if count % 2 == 0: \n        return True\n    else: \n        return False\ndef count_digit(n) : \n    '''\n    Write a python function to count the number of digits in a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    count = 0\n    while n!= 0 : \n        n = n / 10\n        count = count + 1\n    return count\ndef sum_of_digit(n) : \n    '''\n    Write a python function to sum all the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    sum = 0\n    while n!= 0 : \n        sum = sum + n % 10\n        n = n / 10\n    return sum\ndef sum_of_digit_sqrt(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a number (Square Root). https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum = 0\n    while n!= 0 : \n        sum = sum + (n % 10) * (n % 10)\n        n = n / 10\n    return sum\ndef multiply_by_two(n) : \n    '''\n    Write a python function to multiply a number by 2. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return n * 2\ndef multiply_by_two_recursive(n) : \n    '''\n    Write a python function to multiply a number by 2. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * 2 * multiply_by_two_recursive(n-1)\ndef multiply_by_three(n) : \n    '''\n    Write a python function to multiply a number by 3. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    return n * 3\ndef multiply_by_three_recursive(n) : \n    '''\n    Write a python function to multiply a number by 3. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * 3 * multiply_by_three_recursive(n-1)\ndef reverse_digit(n) : \n    '''\n    Write a python function to reverse a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    return n[::-1]\ndef reverse_digit_recursive(n) : \n    '''\n    Write a python function to reverse a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if len(n) == 1: \n        return n\n    else: \n        return reverse_digit_recursive(n[1:]) + n[0]\ndef sum_of_digits(n) : \n    '''\n    Write a python function to sum the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum = 0\n    while n!= 0: \n        sum = sum + n % 10\n        n = n / 10\n    return sum\ndef sum_of_digits_recursive(n) : \n    '''\n    Write a python function to sum the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sum_of_digits_recursive(n / 10)\ndef product_of_digits(n) : \n    '''\n    Write a python function to calculate the product of the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    product = 1\n    while n!= 0: \n        product = product * (n % 10)\n        n = n / 10\n    return product\ndef product_of_digits_recursive(n) : \n    '''\n    Write a python function to calculate the product of the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n % 10 * product_of_digits_recursive(n / 10)\ndef is_pallindrome(n) : \n    '''\n    Write a python function to check whether the number is a pallindrome number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    sum = 0\n    while n!= 0: \n        sum = sum + n % 10\n        n = n / 10\n    return sum == 0\ndef is_pallindrome_recursive(n) : \n    '''\n    Write a python function to check whether the number is a pallindrome number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if n == 0: \n        return True\n    else: \n        return n % 10 == 0 and is_pallindrome_recursive(n / 10)\ndef palindrome_number(n) : \n    '''\n    Write a python function to check whether the number is a pallindrome number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    return str(n) == reverse_digit(str(n))\ndef palindrome_number_recursive(n) : \n    '''\n    Write a python function to check whether the number is a pallindrome number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if n == 0: \n        return True\n    elif n % 10 == 0: \n        return palindrome_number_recursive(n / 10)\n    else: \n        return n % 10 == 0 and palindrome_number_recursive(n / 10)\ndef fibonacci(n) : \n    '''\n    Write a python function to calculate the nth fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    a = 0\n    b = 1\n    for i in range(n-1): \n        a, b = b, a + b\n    return a\ndef fibonacci_recursive(n) : \n    '''\n    Write a python function to calculate the nth fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\ndef is_prime(n) "
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    for i in range(2, (int)(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors += 2\n    return divisors\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    left_list = []\n    right_list = []\n    \n    for i in range(0,len(arr),2):\n        left_list.append(arr[i])\n    \n    for j in range(1,len(arr),2):\n        right_list.append(arr[j])\n    \n    left_sum = sum(left_list)\n    right_sum = sum(right_list)\n    \n    return (left_sum + right_sum)\n    \nprint(odd_length_sum([1,2,3,4,5,6,7,8,9]))\nprint(odd_length_sum([1,2,3,4,5]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10]))\nprint(odd_length_sum([1,2,3,4,5,6]))\nprint(odd_length_sum([1]))\nprint(odd_length_sum([1,2]))\nprint(odd_length_sum([1,2,3]))\nprint(odd_length_sum([1,2,3,4]))\nprint(odd_length_sum([1,2,3,4,5,6,7]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]))\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    summ = 0\n    for i in range(0, len(arr), 2):\n        summ += sum(arr[i:i+2])\n    return summ\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = []\n    for i in range(len(arr)):\n        result += [sum(arr[i:len(arr):2])]\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return arr[0]\n    else:\n        return arr[0] + odd_length_sum(arr[1:])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    n = len(arr)\n    s = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # your code here\n    return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([arr[x] for x in range(0, len(arr), 2)])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n < 1:\n        return 0\n    if n % 2 == 0:\n        return 0\n    n = n - 1\n    count = 0\n    if n % 2!= 0:\n        i = 0\n        while i < n / 2:\n            count = count + (arr[i] + arr[n - i - 1])\n            i += 1\n    else:\n        i = 0\n        while i < n / 2:\n            count = count + (arr[i] + arr[n - i - 1])\n            i += 1\n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if arr == None:\n        return 0\n    start = 0\n    end = 0\n    result = 0\n    sum_array = 0\n    while end < len(arr):\n        sum_array += arr[end]\n        end += 1\n        if (end-start)%2!= 0:\n            result += sum_array\n        \n    return result\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    if min_val == max_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / (max_val - min_val)\n    elif max_val == g:\n        h = 2 + (b - r) / (max_val - min_val)\n    else:\n        h = 4 + (r - g) / (max_val - min_val)\n    h *= 60\n    if h < 0:\n        h += 360\n    s = (max_val - min_val) / max_val\n    v = max_val\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h, s, v = [0,0,0]\n    r, g, b = r/255, g/255, b/255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    delta = mx-mn\n    if delta == 0:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/delta)) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/delta) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/delta) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = delta/mx\n    v = mx\n    return [int(h), int(s*100), int(v*100)]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    diff = max_val - min_val\n    if max_val == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / diff) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / diff) + 2)\n    elif max_val == b:\n        h = 60 * (((r - g) / diff) + 4)\n    if max_val == 0:\n        s = 0\n    else:\n        s = diff / max_val\n    v = max_val\n    h = h / 360\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def max_of_3(a,b,c):\n        return max(a,b,c)\n    def min_of_3(a,b,c):\n        return min(a,b,c)\n    \n    #get the r, g, b components of the colors\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    \n    #convert to a hue, saturation, value color model\n    cmax = max_of_3(r,g,b)\n    cmin = min_of_3(r,g,b)\n    diff = cmax-cmin\n    \n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = 60 * (((g-b)/diff)%6)\n    elif cmax == g:\n        h = 60 * (((b-r)/diff) + 2)\n    elif cmax == b:\n        h = 60 * (((r-g)/diff) + 4)\n    \n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff / cmax)\n    \n    v = cmax\n    \n    #return a hue, saturation, value color model\n    return (h,s,v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    _min = float(min(r, g, b))\n    _max = float(max(r, g, b))\n    v = _max\n    delta = _max - _min\n    if delta!= 0.0:\n        v = delta/_max\n    if r == _max:\n        h = (g-b)/delta\n    elif g == _max:\n        h = 2.0 + (b-r)/delta\n    else:\n        h = 4.0 + (r-g)/delta\n    h *= 60.0\n    if h < 0.0:\n        h += 360.0\n    return [h, v*100.0, 100.0*_min/v]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r,g,b)\n    min_rgb = min(r,g,b)\n    if max_rgb == min_rgb:\n        return 0, 0, max_rgb\n    delta_rgb = max_rgb - min_rgb\n    v = delta_rgb\n    v = v/255\n    # compute h\n    if max_rgb == r:\n        h = (g-b)/delta_rgb\n    elif max_rgb == g:\n        h = (b-r)/delta_rgb + 2\n    else:\n        h = (r-g)/delta_rgb + 4\n    # compute s\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = delta_rgb/max_rgb\n    # compute v\n    v = v*255\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def rgb2hsv(r, g, b):\n    \n        r, g, b = r/255.0, g/255.0, b/255.0\n        max_ = max(r, g, b)\n        min_ = min(r, g, b)\n        if max_ == min_:\n            h = 0\n        elif max_ == r:\n            h = 60 * ((g - b) / (max_ - min_))\n        elif max_ == g:\n            h = 60 * ((b - r) / (max_ - min_)) + 120\n        elif max_ == b:\n            h = 60 * ((r - g) / (max_ - min_)) + 240\n        if max_ == 0:\n            s = 0\n        else:\n            s = (max_ - min_) / max_\n        v = max_\n        \n        return (h, s, v)\n    \n    h, s, v = rgb2hsv(r, g, b)\n    return (int(h), int(s*100), int(v*100))\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    #print even,odd\n    even_product = 1\n    odd_product = 1\n    for i in range(len(even)):\n        even_product *= even[i]\n    for i in range(len(odd)):\n        odd_product *= odd[i]\n    #print even_product,odd_product\n    return even_product*odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for element in list1:\n        if element % 2 == 0:\n            product *= element\n        else:\n            product *= (element * -1)\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #print(list1)\n    even = 1\n    odd = 1\n    for i in list1:\n        if(i%2 == 0):\n            even = even*i\n        else:\n            odd = odd*i\n    #print(even, odd)\n    return(even,odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even = even * list1[i]\n        else:\n            odd = odd * list1[i]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    total_even = 1\n    total_odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            total_even *= i\n        else:\n            total_odd *= i\n    return total_even, total_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1.sort()\n    even = 1\n    odd = 1\n    for i in list1:\n        if i%2 == 0:\n            even = even * i\n        else:\n            odd = odd * i\n    print(str(even) + \" * \" + str(odd) + \" = \" + str(even*odd))\n    \ndef is_perfect_square(number):\n    '''\n    Write a function to check if a number is perfect square or not.\n    '''\n    if number < 0:\n        return False\n    start = 1\n    end = number/2\n    while start <= end:\n        mid = (start+end)//2\n        if mid**2 == number:\n            return True\n        elif mid**2 > number:\n            end = mid-1\n        else:\n            start = mid+1\n    return False\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product=1\n    odd_product=1\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    product = even_sum * odd_sum\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if not list1:\n        return \"No numbers in the list\"\n    \n    even_product, odd_product = 1, 1\n    \n    for item in list1:\n        if item % 2 == 0:\n            even_product = even_product * item\n        else:\n            odd_product = odd_product * item\n    \n    return [even_product, odd_product]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1.sort()\n    even_total=0\n    odd_total=0\n    for i in list1:\n        if i%2==0:\n            even_total+=i\n        else:\n            odd_total+=i\n    return even_total*odd_total\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_str = test_str[1:-1].replace(' ', '').split(',')\n    if test_str[0] == '-':\n        return tuple(list(map(int, new_str))[::-1])\n    else:\n        return tuple(list(map(int, new_str)))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\",\", \"\")\n    int_list = test_str.split(\" \")\n    return tuple(int(x) for x in int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    res = tuple(int(i) for i in test_str.split(','))\n    return res\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = test_str[1:-1].split(',')\n    res = []\n    for num in new_tuple:\n        res.append(int(num))\n    return tuple(res)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str.replace(' ', ''))\n    return tuple([int(test_num) for test_num in test_tuple])\n    \ndef tuple_str_int_to_str(tuple_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return''.join(str(test_num) for test_num in tuple_str)\n    \ndef tuple_str_int_sum(tuple_str):\n    '''\n    Write a function to sum integer tuple.\n    '''\n    return sum(int(num) for num in tuple_str.split(' '))\n    \ndef list_to_str(test_list):\n    '''\n    Write a function to convert list to string.\n    '''\n    return ''.join(test_str for test_str in test_list)\n    \ndef str_to_list(test_str):\n    '''\n    Write a function to convert string to list.\n    '''\n    return list(test_str)\n    \ndef list_to_int(test_list):\n    '''\n    Write a function to convert list to integer list.\n    '''\n    return [int(test_num) for test_num in test_list]\n    \ndef int_to_list(test_int):\n    '''\n    Write a function to convert integer to list.\n    '''\n    return [test_int]\n    \ndef list_add(test_list):\n    '''\n    Write a function to add two integer list.\n    '''\n    return [test_num + test_num2 for test_num, test_num2 in zip(test_list, test_list[1:])]\n    \ndef list_mul(test_list):\n    '''\n    Write a function to multiply two integer list.\n    '''\n    return [test_num * test_num2 for test_num, test_num2 in zip(test_list, test_list[1:])]\n    \ndef sort_list(test_list):\n    '''\n    Write a function to sort integer list.\n    '''\n    return sorted(test_list)\n    \ndef str_to_list(test_str):\n    '''\n    Write a function to convert string to list.\n    '''\n    return list(test_str)\n    \ndef list_to_str(test_list):\n    '''\n    Write a function to convert integer list to string.\n    '''\n    return ''.join(str(test_num) for test_num in test_list)\n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse integer list.\n    '''\n    return test_list[::-1]\n    \ndef list_to_dict(test_list):\n    '''\n    Write a function to convert integer list to dictionary.\n    '''\n    return {i: test_num for i, test_num in enumerate(test_list)}\n    \ndef dict_to_list(test_dict):\n    '''\n    Write a function to convert dictionary to integer list.\n    '''\n    return [test_dict[i] for i in sorted(test_dict.keys())]\n    \ndef dict_to_list2(test_dict):\n    '''\n    Write a function to convert dictionary to integer list.\n    '''\n    return [test_dict[test_num] for test_num in sorted(test_dict.keys())]\n    \ndef print_dict(test_dict):\n    '''\n    Write a function to print dictionary.\n    '''\n    print(dict(test_dict))\n    \ndef dict_to_str(test_dict):\n    '''\n    Write a function to convert dictionary to string.\n    '''\n    return''.join(str(test_dict[i]) for i in sorted(test_dict.keys()))\n    \ndef str_to_dict(test_str):\n    '''\n    Write a function to convert string to dictionary.\n    '''\n    return {i: int(num) for i, num in enumerate(test_str.split(' '))}\n    \ndef reverse_dict(test_dict):\n    '''\n    Write a function to reverse dictionary.\n    '''\n    return {v: k for k, v in test_dict.items()}\n    \ndef int_to_dict(test_int):\n    '''\n    Write a function to convert integer to dictionary.\n    '''\n    return {i: test_int for i in range(len(test_int))}\n    \ndef str_to_int(test_str):\n    '''\n    Write a function to convert string to integer.\n    '''\n    return int(test_str)\n    \ndef integer_to_binary(test_int):\n    '''\n    Write a function to convert integer to binary.\n    '''\n    return bin(test_int)\n    \ndef binary_to_integer(test_bin):\n    '''\n    Write a function to convert binary to integer.\n    '''\n    return int(test_bin, 2)\n    \ndef integer_to_octal(test_int):\n    '''\n    Write a function to convert integer to octal.\n    '''\n    return oct(test_int)\n    \ndef octal_to_integer(test_oct):\n    '''\n    Write a function to convert octal to integer.\n    '''\n    return int(test_oct, 8)\n    \ndef integer_to_hex(test_int):\n    '''\n    Write a function to convert integer to hex.\n    '''\n    return hex(test_int)\n    \ndef hex_to_integer(test_hex):\n    '''\n    Write a function to convert hex to integer.\n    '''\n    return int(test_hex, 16)\n    \ndef integer_to_base(test_int, base):\n    '''\n    Write a function to convert integer to base.\n    '''\n    return int(test_int, base)\n    \ndef base_to_integer(test_base, test_num):\n    '''\n    Write a function to convert base to integer.\n    '''\n    return int(test_num, test_base)\n    \ndef add_binary(test_bin1, test_bin2):\n    '''\n    Write a function to add two binary.\n    '''\n    return str(bin(int(test_bin1, 2) + int(test_bin2, 2)))\n    \ndef add_octal(test_oct1, test_oct2):\n    '''\n    Write a function to add two octal.\n    '''\n    return str(oct(int(test_oct1, 8) + int(test_oct2, 8)))\n    \ndef add_hex(test_hex1, test_hex2):\n    '''\n    Write a function to add two hex.\n    '''\n    return str(hex(int(test_hex1, 16) + int(test_hex2, 16)))\n    \ndef add_decimal(test_dec1, test_dec2):\n    '''\n    Write a function to add two decimal.\n    '''\n    return str(int(test_dec1) + int(test_dec2))\n    \ndef sub_binary(test_bin1, test_bin2):\n    '''\n    Write a function to subtract two binary.\n    '''\n    return str(bin(int(test_bin1, 2) - int(test_bin2, 2)))\n    \ndef sub_octal(test_oct1, test_oct2):\n    '''\n    Write a function to subtract two octal.\n    '''\n    return str(oct(int(test_oct1, 8) - int(test_oct2, 8)))\n    \ndef sub_hex(test_hex1, test_hex2):\n    '''\n    Write a function to subtract two hex.\n    '''\n    return str(hex(int(test_hex1, 16) - int(test_hex2, 16)))\n    \ndef sub_decimal(test_dec1, test_dec2):\n    '''\n    Write a function to subtract two decimal.\n    '''\n    return str(int(test_dec1) - int(test_dec2))\n    \ndef multiply_binary(test_bin1, test_bin2):\n    '''\n    Write a function to multiply two binary.\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_str = test_str[1:-1]\n    temp_str = temp_str.replace(' ', '')\n    temp_str = temp_str.split(',')\n    return tuple([int(x) for x in temp_str])\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert str to list\n    test_list = test_str.split(',')\n    # convert str to int\n    test_int = [int(e) for e in test_list]\n    return tuple(test_int)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str[1:-1]\n    str_list = test_str.split(',')\n    str_list = [int(i) for i in str_list]\n    return tuple(str_list)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    index = bisect.bisect(a, x)\n    return index if index < n else -1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect(a, x)\n    print(a, x, index)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a):\n        return i\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # The problem here is that the bisect function searches an index that is not sorted.\n    # We could use bisect_right, but that will return the index where the specified value would be\n    # inserted, but it will not insert the value if the value is already in the list.\n    # Here is a function that will find the index where the value would be inserted\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    index = bisect.bisect(a, x)\n    if index < len(a) and a[index] > x:\n        return index\n    return index + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    a.append(n+1)\n    b = bisect.bisect(a, x)\n    return b\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # i = len(a) - 1\n    # while i >= 0 and a[i] > x:\n    #     i -= 1\n    # return i + 1\n    return bisect.bisect_right(a, x)\n    \n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    idx = bisect.bisect_right(a, x)\n    if idx == l:\n        return l\n    if x > a[idx]:\n        return idx + 1\n    return idx\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    l = len(a)\n    for i in range(l):\n        if a[i] >= x:\n            return i\n    return l\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('ab+', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Pattern object to be matched\n    pattern = re.compile(r'ab{3}')\n    # Text to be searched in\n    text = 'ababbababab'\n    # Match object storing the result\n    match = re.match(pattern, text)\n    # Print the result\n    print match\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    def text_match_three_func(text):\n        x = re.search(r'ab{3}', text)\n        if x:\n            print('Match found:'+ x.group())\n        else:\n            print('No match found.')\n    text_match_three_func(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pattern = re.compile('ab{3}')\n    if pattern.search(text):\n        print('Match!')\n    else:\n        print('No match!')\n        \n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'ab{3}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matcher = re.findall(r'ab{3}', text)\n    if matcher:\n        return matcher\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #[(a)(b)(c)]\n    '''\n    re.findall(r'(a)(b)(c)', text)\n    re.findall(r'(a)(\\2)(c)', text)\n    re.findall(r'(a)(b)(?P<third>c)', text)\n    re.findall(r'(a)(b)(c)', text)\n    '''\n    return re.findall(r'(a)(b)(b)', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = re.compile(r'ab{3}')\n    m = pat.match(text)\n    if m:\n        return m.group()\n    return None\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(\"[^a]*a[^b]*b.*b.*b.*b.*b.*b.*b.*b\", \"\", text, count=1)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a{3}b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_list)\n    tup += (test_str, )\n    return tup\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = tuple(test_list) + tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a new tuple\n    new_tuple = (test_str, test_list)\n    # return the new tuple\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list[1:-1]\n    new_str = test_str[1:-1]\n    new_tuple = tuple(new_list)\n    return new_tuple\n    \ndef new_tuple_2(test_list):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list[1:-1])\n    \ndef reverse_tuple(test_tuple):\n    '''\n    Write a function that accepts a tuple of numbers and returns a tuple that is the reverse of the original tuple.\n    '''\n    return tuple(reversed(test_tuple))\n    \ndef main():\n    print new_tuple([1,2,3,4], '(1,2,3,4)')\n    print new_tuple_2([1,2,3,4])\n    print reverse_tuple((1,2,3,4))\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for item in test_str:\n        new_list.append(item)\n    new_list.append(test_list)\n    return tuple(new_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str == '':\n        return ()\n    list_str = test_str.replace(' ', '')\n    list_str = list_str.replace('(', '')\n    list_str = list_str.replace(')', '')\n    list_str = list_str.split(',')\n    # print(list_str)\n    list_str = [int(i) for i in list_str]\n    return tuple(list_str)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return [x % 2 == 0 for x in nums].count(True)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i + 1) % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if (nums[i]%2==0) and (nums[i+1]%2==0):\n            print(\"every even position contains even numbers\")\n            return\n    print(\"every even position does not contain even numbers\")\n    return\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    l = len(nums)\n    for i in range(0, l, 2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2==0 and nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    l = len(nums)\n    for i in range(0, l):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is tuple:\n        return tuple(remove_nested(element) for element in test_tup)\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        tup_len = len(test_tup)\n        \n        # if the length of the tuple is 1\n        if tup_len == 1:\n            return remove_nested(test_tup[0])\n        else:\n            for i in xrange(tup_len):\n                remove_nested(test_tup[i])\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for element in test_tup:\n        if isinstance(element, tuple):\n            remove_nested(element)\n        else:\n            # The tuple is not a tuple. It should be removed.\n            pass\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for tup in test_tup:\n        result.append(tup[0])\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            test_list.append(i)\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    if isinstance(test_tup, tuple):\n        if not test_tup:\n            return tuple()\n        return tuple([remove_nested(x) for x in test_tup])\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for tup in test_tup:\n        if not isinstance(tup, tuple):\n            result.append(tup)\n        else:\n            result.append(remove_nested(tup))\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    _, *rest = test_tup\n    return rest\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    ans = test_tup[0]\n    for i in test_tup[1:]:\n        if isinstance(i, tuple):\n            ans = tuple(ans) + i\n        else:\n            ans += i\n    return ans\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    else:\n        return tuple([remove_nested(x) for x in test_tup])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return sum([isinstance(i, list) for i in input_list])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list) \n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list) == list:\n        print('Count is:', len(input_list))\n    else:\n        print('Please enter a list')\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists = len(input_list)\n    return number_of_lists\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return sum([1 if isinstance(item, list) else 0 for item in input_list])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    while input_list: \n        count += 1\n        input_list = input_list[1:]\n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = len(input_list) \n    return num_list \n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list:\n        if isinstance(input_list[0],list):\n            return count_list(input_list[0]) + 1\n        else:\n            return 1\n    else:\n        return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    length=len(input_list)\n    count=0\n    for i in range(length):\n        if isinstance(input_list[i],list):\n            count+=1\n    return count\n    \ndef count_and_sum(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to sum their length.\n    '''\n    length=len(input_list)\n    count=0\n    sum=0\n    for i in range(length):\n        if isinstance(input_list[i],list):\n            count+=1\n            sum+=len(input_list[i])\n    return count,sum\n    \ndef count_numbers_and_names(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_2(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_3(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_4(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_5(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_6(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_7(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_8(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_9(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_10(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_11(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_12(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list[i],str):\n            name_count+=1\n    return count,name_count\n    \ndef count_numbers_and_names_13(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists and to count the number of items in each list.\n    '''\n    count=0\n    name_count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=1\n            name_count+=len(input_list[i])\n        if isinstance(input_list["
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    i = 0\n    while i < l:\n        if arr[i] == x:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)\n    while low < high:\n        mid = (high + low) // 2\n        if arr[mid] >= x:\n            high = mid\n        else:\n            low = mid + 1\n    return high\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            return i\n        i+=1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr=arr.split()\n    n=len(arr)\n    if(x in arr):\n        return arr.index(x)\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-bisect_left(arr,x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) -1\n    while arr[i]!= x and i > -1:\n        i -= 1\n    if i > -1:\n        return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)/2\n        if arr[mid]>x:\n            high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                high=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    else:\n        return len(arr)-1-bin_search(arr[::-1],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high)/2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^a.*b$', text)\n    if match:\n        return True\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?a.+?b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('^a.*b$',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$')\n    return pattern.match(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=[a-zA-Z])a.*(?=b)')\n    return pattern.search(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$',text):\n        return True\n    else:\n        return False\ndef text_starta_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('.*a.*b$'"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.*?(a.*?b)$')\n    match = pattern.search(text)\n    return match.group(1) if match else None\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a[^b]+b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # return re.search('a.*(?=b)',text)\n    return re.search('(?<=a).*(?=b)',text)\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum = sum + value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.keys():\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n % 2!= 0): \n        return n \n    return n + sum_odd(n + 2) \n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    l=0\n    r=n\n    s=0\n    \n    while l <= r:\n        if l%2==1:\n            s=s+l\n        l=l+1\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_n = 0\n    for i in range(l, r):\n        if i%2!= 0:\n            sum_n += i\n    return sum_n\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (r-l+1)*(r+l)/2\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(n+1) if x%2!=0)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (l % 2 == 0): \n        l += 1\n    if (r % 2 == 0): \n        r -= 1\n    return sum(range(l, r, 2))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(n) if x%2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2!= 0:\n        return n\n    else:\n        return n + sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    if n == 1:\n        return n\n    else:\n        return n + sum_odd(n - 1)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # arr = [1,2,3]\n    # sum = 1+2+3 = 6\n    # return 6\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return reduce(lambda a, b: a + b, arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n    \ndef _average(arr):\n    '''\n    Write a python function to find the average of an array.\n    '''\n    return _sum(arr)/len(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return reduce(lambda x,y: x+y, arr)\n    \ndef _lcm(a,b):\n    return a*b/GCD(a,b)\n    \ndef _lcm_list(arr):\n    '''\n    Write a python function to find the lcm of a list.\n    '''\n    return reduce(lambda x,y: _lcm(x,y), arr)\n    \ndef _gcd(a,b):\n    '''\n    Write a python function to find the gcd of a list.\n    '''\n    return reduce(lambda x,y: GCD(x,y), [a,b])\n    \ndef _gcd_list(arr):\n    '''\n    Write a python function to find the gcd of a list.\n    '''\n    return reduce(lambda x,y: GCD(x,y), arr)\n    \ndef _fib(n):\n    '''\n    Write a python function to find the fibonacci number at position n.\n    '''\n    return (1 if n==0 else (1 if n==1 else _fib(n-1) + _fib(n-2)))\n    \ndef _fib_list(arr):\n    '''\n    Write a python function to find the fibonacci number at position n.\n    '''\n    return [_fib(i) for i in arr]\n    \ndef _factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return reduce(lambda x,y: x*y, range(1,n+1))\n    \ndef _factorial_list(arr):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return [_factorial(i) for i in arr]\n    \ndef _soln(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum(arr[i:j])]\n    \ndef _soln_list(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_list(arr[i:j])]\n    \ndef _soln_dict(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict(arr[i:j])]\n    \ndef _soln_dict_list(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list(arr[i:j])]\n    \ndef _soln_dict_list_reduce(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce(arr[i:j])]\n    \ndef _soln_dict_list_reduce_list(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_list(arr[i:j])]\n    \ndef _soln_dict_list_reduce_map(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_map(arr[i:j])]\n    \ndef _soln_dict_list_reduce_lambda(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_lambda(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_filter(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter_list(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_filter_list(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter_map(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_filter_map(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter_lambda(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_filter_lambda(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter_map_lambda(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_filter_map_lambda(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter_map_reduce(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_filter_map_reduce(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter_map_reduce_list(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_filter_map_reduce_list(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter_map_reduce_map(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n    '''\n    return [arr[i:j] for i in range(len(arr)) for j in range(i,len(arr)) if sum == _sum_dict_list_reduce_filter_map_reduce_map(arr[i:j])]\n    \ndef _soln_dict_list_reduce_filter_map_reduce_map_list(arr, sum):\n    '''\n    Write a python function to find all solutions of a given sum.\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Get the sum of the array.\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bit = 32\n    binary_value = bin(n)\n    binary_value = binary_value[2:]\n    #print binary_value\n    number_of_bits = len(binary_value)\n    if number_of_bits < 32:\n        return 0\n    remaining_bits = 32 - d\n    #print remaining_bits\n    binary_value = binary_value[d:] + \"0\" * remaining_bits\n    return int(binary_value, 2)\n    \n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #bitmasks\n    leftmost_bit_mask = 1 << (32-d)\n    rightmost_bit_mask = 1 << 32 - d\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    return ((n<<d)|((n&mask)>>(32-d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d)) \n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n<<=d\n    return n&0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n_l = (n << d) | (n >> (32-d))\n    return n_l\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    return ((n << d)|(n >> (32 - d))) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d)))&0xffffffff\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s+]*', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return re.sub(pattern, \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    while \"  \" in text:\n        text = text.replace(\"  \", \" \")\n    return text\ndef find_word_with_greatest_length(words):\n    '''\n    Given a list of words, return the word with the greatest length.\n    '''\n    return max(words, key=len)\ndef find_word_with_longest_pattern(words):\n    '''\n    Given a list of words, return the word with the longest repeating substring.\n    '''\n    word_len = {}\n    for word in words:\n        if word in word_len:\n            word_len[word] += 1\n        else:\n            word_len[word] = 1\n    max_val = max(word_len.values())\n    for word in word_len.keys():\n        if word_len[word] == max_val:\n            return word\ndef add_spaces_in_between(text):\n    '''\n    Write a function to add spaces between words.\n    '''\n    return re.sub(' ',' ', text)\ndef remove_all_occurances_of_pattern(text, pattern):\n    '''\n    Write a function to remove all occurences of a pattern from a string.\n    '''\n    return re.sub(pattern, '', text)\ndef find_all_indexes(word, text):\n    '''\n    Write a function to find all the occurrences of a word in a string.\n    '''\n    indexes = []\n    for i in range(0, len(text)):\n        if text[i:i+len(word)] == word:\n            indexes.append(i)\n    return indexes\ndef remove_all_occurances_of_word(word, text):\n    '''\n    Write a function to remove all occurences of a word in a string.\n    '''\n    return re.sub(word, '', text)\ndef replace_words_in_order(text, words_to_replace, words_to_replace_with):\n    '''\n    Write a function to replace words in order.\n    '''\n    new_text = text\n    for word_to_replace, word_to_replace_with in zip(words_to_replace, words_to_replace_with):\n        new_text = remove_all_occurances_of_word(word_to_replace, new_text)\n        new_text = new_text.replace(word_to_replace, word_to_replace_with)\n    return new_text\ndef replace_words_with_pattern(text, words_to_replace, pattern):\n    '''\n    Write a function to replace words with patterns.\n    '''\n    new_text = text\n    for word_to_replace, pattern in zip(words_to_replace, pattern):\n        new_text = remove_all_occurances_of_pattern(pattern, new_text)\n        new_text = new_text.replace(word_to_replace, pattern)\n    return new_text\ndef insert_spaces_into_text_pattern(text, pattern):\n    '''\n    Write a function to insert spaces into a text with a pattern.\n    '''\n    new_text = text\n    for pattern in pattern:\n        new_text = remove_all_occurances_of_pattern(pattern, new_text)\n        new_text = new_text.replace(pattern,'' + pattern +'')\n    return new_text\ndef replace_with_pattern(text, pattern, replacement_pattern):\n    '''\n    Write a function to replace words with patterns.\n    '''\n    new_text = text\n    for pattern, replacement_pattern in zip(pattern, replacement_pattern):\n        new_text = remove_all_occurances_of_pattern(pattern, new_text)\n        new_text = new_text.replace(pattern, replacement_pattern)\n    return new_text\ndef find_longest_word_with_prefix(text, prefix):\n    '''\n    Write a function to find the longest word that begins with a prefix.\n    '''\n    words = text.split(' ')\n    words_with_prefix = [word for word in words if word.startswith(prefix)]\n    return find_word_with_greatest_length(words_with_prefix)\ndef find_all_occurances_of_pattern(text, pattern):\n    '''\n    Write a function to find all occurences of a pattern in a string.\n    '''\n    indexes = []\n    for i in range(0, len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            indexes.append(i)\n    return indexes\ndef replace_words_with_pattern(text, words_to_replace, pattern):\n    '''\n    Write a function to replace words with patterns.\n    '''\n    new_text = text\n    for word_to_replace, pattern in zip(words_to_replace, pattern):\n        new_text = remove_all_occurances_of_pattern(pattern, new_text)\n        new_text = new_text.replace(word_to_replace, pattern)\n    return new_text\ndef remove_all_occurances_of_pattern(pattern, text):\n    '''\n    Write a function to remove all occurences of a pattern in a string.\n    '''\n    return re.sub(pattern, '', text)\ndef find_all_occurances_of_pattern(text, pattern):\n    '''\n    Write a function to find all occurences of a pattern in a string.\n    '''\n    indexes = []\n    for i in range(0, len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            indexes.append(i)\n    return indexes\ndef find_all_indexes(word, text):\n    '''\n    Write a function to find all the indexes of a word in a string.\n    '''\n    indexes = []\n    for i in range(0, len(text)):\n        if text[i:i+len(word)] == word:\n            indexes.append(i)\n    return indexes\ndef remove_all_occurances_of_word(word, text):\n    '''\n    Write a function to remove all occurences of a word in a string.\n    '''\n    return re.sub(word, '', text)\ndef find_all_indexes(word, text):\n    '''\n    Write a function to find all the indexes of a word in a string.\n    '''\n    indexes = []\n    for i in range(0, len(text)):\n        if text[i:i+len(word)] == word:\n            indexes.append(i)\n    return indexes\ndef remove_all_occurances_of_pattern(pattern, text):\n    '''\n    Write a function to remove all occurences of a pattern in a string.\n    '''\n    return re.sub(pattern, '', text)\ndef find_all_indexes(word, text):\n    '''\n    Write a function to find all the indexes of a word in a string.\n    '''\n    indexes = []\n    for i in range(0, len(text)):\n        if text[i:i+len(word)] == word:\n            indexes.append(i)\n    return indexes\ndef replace_words_with_pattern(text, words_to_replace, pattern):\n    '''\n    Write a function to replace words with patterns.\n    '''\n    new_text = text\n    for word_to_replace, pattern in zip(words_to_replace, pattern):\n        new_text = remove_all_occurances_of_pattern(pattern, new_text)\n        new_text = new_text.replace(word_to_replace, pattern)\n    return new_text\ndef remove_all_occurances_of_pattern(pattern, text):\n    '''\n    Write a function to remove all occurences of a pattern in a string.\n    '''\n    return re.sub(pattern, '', text)\ndef find_all_occurances_of_pattern(text, pattern):\n    '''\n    Write a function to find all occurences of a pattern in a string.\n    '''\n    indexes = []\n    for i in range(0, len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            indexes.append(i)\n    return indexes\ndef replace"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # We can use regular expressions to achieve this!\n    return re.sub(r'\\s', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum(1 for num in (x,y,z) if num == num)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for a,b,c in zip(x,y,z):\n        if a==b==c:\n            count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and x == z and y == z:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # your code goes here\n    return len([i for i in [x,y,z] if i == x])\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n-1\n    mid = 0\n    count = 0\n    while(mid<=high):\n        if(arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]):\n            return count\n        elif(arr[mid]<arr[mid+1] and arr[mid]<arr[mid-1]):\n            return count\n        elif(arr[mid]>arr[mid+1] and arr[mid]<arr[mid-1]):\n            low = mid+1\n            mid = int((low+high)/2)\n            count = count+1\n        else:\n            high = mid-1\n            mid = int((low+high)/2)\n            count = count+1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # find the index of the minimum element of the array\n    min = arr[0]\n    for i in range(n):\n        if arr[i] < min:\n            min = arr[i]\n            min_index = i\n    # count the number of rotations\n    count = 0\n    for i in range(min_index):\n        if arr[i] < arr[n - 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start, end = 0, len(arr)-1\n    while start<end:\n        if arr[start] <= arr[end]:\n            return 0\n        mid = (start+end)/2\n        if arr[mid] > arr[end]:\n            start = mid+1\n        else:\n            end = mid\n    return start\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # Initialize first and last element as start and end\n    start = arr[0]\n    end = arr[-1]\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    for i in range(0, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    n = len(arr)\n    if n == 1:\n        return 0\n    if arr[0] < arr[-1]:\n        return 0\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            break\n    if i == n - 2:\n        return 0\n    # If arr[n-1] is smaller than arr[0] then we have found our rotation index\n    rotation_index = 0\n    for j in range(i + 1, n):\n        if arr[j] < arr[i]:\n            rotation_index = j\n            break\n    return rotation_index\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n==1 or n==0):\n        return 1\n    \n    x = int(math.sqrt(n))\n    return (x*x == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n == (int(pow(n,0.5))) ** 2)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n == int(math.sqrt(n)) ** 2)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n & (n-1) == 0) and n!= 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # We can find the integer square root by taking the floor of the square root\n    # and check if the square root is an integer\n    sqrt = int(n ** 0.5)\n    # We can check if the square root is an integer by taking the integer modulus of the square root\n    # and checking if the modulus is zero. If it is, the square root is an integer\n    if (sqrt ** 2) % n == 0:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = n**0.5\n    if int(root) == root :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return False\n    \n    low = 0\n    high = n\n    \n    while (low <= high) :\n        mid = (low + high) / 2\n        if (mid * mid == n) :\n            return True\n        elif (mid * mid > n) :\n            high = mid - 1\n        else :\n            low = mid + 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(math.sqrt(n))**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return True\n    # Check if n is divisible by any number between 2 and n/2\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            return False\n    # If above loop is not executed, return True\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    sqrt = int(n**(0.5))\n    if ((sqrt*sqrt) == n) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for item in arr:\n        product = product * item\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return not any(arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(x%2 == 0 for x in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #using reduce function\n    product = reduce(lambda x, y: x*y, arr)\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = 1\n    for elem in arr:\n        result *= elem\n    return result % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x,y:x*y,arr)%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x,y:x*y,arr)%2 == 0\n    \nprint is_product_even([1,2,3,4,5,6,7,8,9])\nprint is_product_even([-5,4,3,-2,-1,2,5,8])\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    max_list = lists[0]\n    for x in lists:\n        max_list = max_list if sum(x) > sum(max_list) else x\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_list = l\n            max_sum = sum(l)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    largest = -1\n    index = -1\n    for i in range(len(lists)):\n        if sum(lists[i]) > largest:\n            largest = sum(lists[i])\n            index = i\n    return lists[index]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    n = len(lists)\n    max_sum = 0\n    for i in xrange(n):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    total_sum = 0\n    max_list = []\n    for list in lists:\n        total_sum += sum(list)\n    for list in lists:\n        total = 0\n        for item in list:\n            total += item\n        if total > total_sum:\n            total_sum = total\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for i in range(len(lists)):\n        total = sum(lists[i])\n        max_total = max(total, max_total)\n    return max_total\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    for list in lists:\n        sum = 0\n        for element in list:\n            sum += element\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_list = list\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists == [[]]:\n        return lists\n    else:\n        return max(max_sum_list(lists[1:]), max_sum_list(lists[:-1]), key = sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -1\n    max_list = None\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        current_sum = 0\n        for element in list:\n            current_sum += element\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(current_run, max_run)\n            current_run = 0\n    return max_run\n    \nprint(max_run_uppercase('Test String'))"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count = count+1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    count = 1\n    max_count = 1\n    for i in xrange(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_length = 0\n    temp_length = 0\n    for i in test_str:\n        if ord(i) in range(65, 91):\n            temp_length += 1\n        elif ord(i) in range(97, 122):\n            temp_length += 1\n        else:\n            temp_length = 0\n        if max_length < temp_length:\n            max_length = temp_length\n    return max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max([len(x) for x in re.findall(r'[A-Z]+', test_str)])\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    lst = []\n    max_len = 0\n    for i in range(0, len(test_str)):\n        if test_str[i] in lst:\n            lst.append(test_str[i])\n        else:\n            max_len = max(max_len, len(lst))\n            lst = []\n            lst.append(test_str[i])\n    max_len = max(max_len, len(lst))\n    return max_len\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            run += 1\n            if run > max_run:\n                max_run = run\n        else:\n            run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) < 2:\n        return 0\n    if test_str[0].isupper():\n        max_run = 1\n    else:\n        max_run = 0\n    for i in xrange(1, len(test_str)):\n        if test_str[i].isupper():\n            max_run += 1\n        else:\n            max_run = max(max_run, 0)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n%2!= 0:\n            return n\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n        return None\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[K-1] in set_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup[1]) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    first_tup = test_tup[0]\n    second_tup = test_tup[1]\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    s = ''.join(test_tup)\n    return s.count('K') == K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if not K:\n        return True\n    return len(test_tup) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if test_tup[K] > 0 else False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    res = False\n    if (test_tup[K-1] == '1'):\n        res = True\n    return res\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(0, len(test_tup1)):\n        if test_tup2[i] <= test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Unpack tuples\n    smaller_tup1 = test_tup1[0]\n    smaller_tup2 = test_tup2[0]\n    equal_tup1 = test_tup1[1]\n    equal_tup2 = test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for index, val in enumerate(test_tup1):\n        if val > test_tup2[index]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if not (isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple)):\n        return \"Please provide a tuple of tuples for the two tuple input\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Please provide equal lengths for the two tuples\"\n    \n    return [i if i < j else j for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(a <= b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(x < y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # print test_tup1\n    # print test_tup2\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    }
]