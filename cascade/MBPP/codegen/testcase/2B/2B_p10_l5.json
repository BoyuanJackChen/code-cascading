[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    similar_elements((5,7,8,11,14), (4,9,12,13,15)) == (5,7,8)\n    similar_elements((5,7,8,11,14), (4,9,12,13,16)) == (11,12,13)\n    similar_elements((5,7,8,11,14), (4,9,12,16)) == (11,12,16)\n    similar_elements((5,7,8,11,14), (4,9,13)) == (11,13)\n    similar_elements((5,7,8,11,14), (4,9,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,15,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,15,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,15,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,12)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,13)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,13)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,14,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,14,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,15,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,12)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,13)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,13)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,14,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,14,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,15,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,12)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,13)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,13)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,12,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,13,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,14,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,14,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,15,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16,15)) == ()\n    similar_elements((5,7,8,11,14), (4,9,16,16)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,12)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,13)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,14)) == ()\n    similar_elements((5,7,8,11,14), (4,9,11,15)) == ()\n    similar_elements((5,7,8"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements((1,2,3), (1,2,3))\nassert     similar_elements((1,2,3), (1,2,3,4))\nassert     similar_elements((1,2), (1,2,3,4))\nassert     similar_elements((1,2), (2,3))\nassert     similar_elements((1,2), (1,2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     similar_elements([1,2,3,4], [1,2,3]) == True\nassert     similar_elements([1,2,3,4], [4,5,6]) == False\nassert     similar_elements([1,2,3,4], [1,2,5]) == False\nassert     similar_elements([1,2,3,4], [2,3,5]) == True\nassert     similar_elements([1,2,3,4], [1,2,4,5]) == False\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     similar_elements((), ()) == []\nassert     similar_elements((1, 2), ()) == []\nassert     similar_elements((1, 2, 3), ()) == []\nassert     similar_elements((1, 2, 3), (1, 2)) == (1, 2)\nassert     similar_elements((1, 2, 3), (1, 3)) == (1, 2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements([1,2,3,4,5], [5,6,7,8]) == [5,6]\nassert     similar_elements([1,2,3,4,5,6], [5,6,7,8]) == []\nassert     similar_elements([1,2,3,4,5,6], [1,2,3,4,5,6]) == [1,2,3]\nassert     similar_elements([1,2,3,4,5], [1,2,3,4,5,6]) == [1,2]\nassert     similar_elements([1,2,3,4,5], [1,2,3,4,5,6,7]) == [1,2]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements([1, 2, 3, 4], [1, 2, 3]) == False\nassert     similar_elements([1, 2, 3, 4], [1, 2, 3, 4]) == True\nassert     similar_elements([1, 2, 3, 4], [4, 2, 1]) == True\nassert     similar_elements([1, 2, 3, 4], [5, 5, 5]) == False\nprint('Almost done! The local tests are done!')"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nsimilar_elements((1,2,3),(2,3,4)) == (1,2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_tup1 = (5, 6, 7)\n    test_tup2 = (5, 6, 7)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: None\\n\")\n    \n    test_tup1 = (1, 2, 3)\n    test_tup2 = (2, 3, 4)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: ()\\n\")\n    \n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (2, 3)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: (4)\\n\")\n    \n    test_tup1 = (1, 2, 3)\n    test_tup2 = (1, 3, 4)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: (1, 2)\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5)\n    test_tup2 = (4, 5, 6)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: (1, 3, 4)\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (4, 5, 6, 7, 8)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: (4, 5)\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10, 11)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: None\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: ()\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10, 11, 12)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: ()\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10, 11, 12)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: (7, 8)\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10, 11)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: (7, 10)\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10, 11, 12)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: (7, 10)\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10, 11, 12)\n    print(\"\\ntest_tup1: {0}\".format(test_tup1))\n    print(\"test_tup2: {0}\".format(test_tup2))\n    print(\"\\nThe result of similar_elements(test_tup1, test_tup2): {0}\".format(similar_elements(test_tup1, test_tup2)))\n    print(\"The expected value: (7, 10)\\n\")\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10, 11)\n    print(\"\\ntest_tup1: {0}\""
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements((1, 2, 3, 4), (1, 2, 3, 5)) == (1, 2, 3)\nassert     similar_elements((1, 2, 3, 4), (1, 2, 3, 3)) == (1, 2, 3)\nassert     similar_elements((1, 2, 3, 4), (1, 2, 3, 5)) == (1, 2, 3)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(13) == True\nassert     is_not_prime(12) == False\nassert     is_not_prime(5) == True\nassert     is_not_prime(19) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_not_prime(2) == True, \"Should be True\"\nassert     is_not_prime(7) == False, \"Should be False\"\nassert     is_not_prime(1) == False, \"Should be False\"\nassert     is_not_prime(3) == True, \"Should be True\"\nassert     is_not_prime(4) == True, \"Should be True\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_not_prime(5) == False\nassert     is_not_prime(1) == True\nassert     is_not_prime(2) == False\nassert     is_not_prime(0) == True\nassert     is_not_prime(3) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(1) == False\nassert     is_not_prime(2) == True\nassert     is_not_prime(2**0.5) == False\nassert     is_not_prime(0) == False\nassert     is_not_prime(3) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_not_prime(1) == True\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_not_prime(7)\nassert not is_not_prime(2)\nassert not is_not_prime(1)\nassert is_not_prime(5)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [9, 8, 7, 6, 5]\nassert     heap_queue_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [9, 8, 7]\nassert     heap_queue_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [9, 8]\nassert     heap_queue_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [9]\nassert     heap_queue_largest([], 1) == []\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_queue_largest([1,2,3,4,5,6,7,8,9,10],5) == (10,9,8,7,6), \"Wrong heap_queue_largest.\"\n\ndef heap_queue_largest_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([1,2,3,4,5],3) == [5,4,3]\nassert     heap_queue_largest([1,2,3,4,5],5) == [5,4,3,2,1]\nassert     heap_queue_largest([1,2,3,4,5],1) == [5]\n\ndef heap_queue_largest_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([1,3,5,2,7,10],3) == [10,7,5]\nassert     heap_queue_largest([1,3,5,2,7,10],2) == [10,7]\nassert     heap_queue_largest([1,3,5,2,7,10],1) == [10]\nassert     heap_queue_largest([],1) == []\nassert     heap_queue_largest([1,3,5,2,7,10,8,9],3) == [10,7,8]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef heap_queue_largest_optimized(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n<1:\n        return \n    hq.heapify(nums)\n    for i in range(n-1):\n        hq.heappop(nums)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_queue_largest([], 0) == []\nassert     heap_queue_largest([1], 1) == [1]\nassert     heap_queue_largest([2,3], 2) == [3,2]\nassert     heap_queue_largest([5,3,2,6], 3) == [6,5,3]\nassert     heap_queue_largest([1,5,6,2,7,3,4,8,9,10], 5) == [10,9,8,7,6,5]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_queue_largest([4,5,1,6,2,7,3],4) == [7,6,5,4,3]\nassert     heap_queue_largest([1,2,3,4,5,6],2) == [6,5,4,3,2]\n\ndef max_heap_queue(arr):\n    '''\n    Write a function to create and return a Max Heap from an array.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     heap_queue_largest([2,3,1],3)==[1,2,3], 'Wrong'\nassert     heap_queue_largest([2,3,1],4)==[1,2,3,4], 'Wrong'\nassert     heap_queue_largest([1,4,9,2,3,4],4)==[4,9,3,4], 'Wrong'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two(1) == False, 'is_Power_Of_Two(1) is incorrect'\nassert     is_Power_Of_Two(2) == True, 'is_Power_Of_Two(2) is incorrect'\nassert     is_Power_Of_Two(3) == False, 'is_Power_Of_Two(3) is incorrect'\nassert     is_Power_Of_Two(4) == True, 'is_Power_Of_Two(4) is incorrect'\nassert     is_Power_Of_Two(5) == False, 'is_Power_Of_Two(5) is incorrect'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(1) == False, \"is_Power_Of_Two should return False\"\nassert     is_Power_Of_Two(2) == True, \"is_Power_Of_Two should return True\"\nassert     is_Power_Of_Two(8) == False, \"is_Power_Of_Two should return False\"\nassert     is_Power_Of_Two(9) == True, \"is_Power_Of_Two should return True\"\nassert     is_Power_Of_Two(10) == False, \"is_Power_Of_Two should return False\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_Power_Of_Two(4) == True, \"4 is not power of 2\"\nis_Power_Of_Two(1) == True, \"1 is power of 2\"\nis_Power_Of_Two(2) == True, \"2 is power of 2\"\nis_Power_Of_Two(3) == True, \"3 is power of 2\"\nis_Power_Of_Two(10) == True, \"10 is power of 2\"\nis_Power_Of_Two(6) == False, \"6 is not power of 2\"\nis_Power_Of_Two(0) == False, \"0 is not power of 2\"\nis_Power_Of_Two(100) == False, \"100 is not power of 2\"\nis_Power_Of_Two(7) == False, \"7 is not power of 2\"\nis_Power_Of_Two(7**2) == True, \"7**2 is power of 2\"\nis_Power_Of_Two(7**3) == False, \"7**3 is not power of 2\"\nis_Power_Of_Two(7**4) == False, \"7**4 is not power of 2\"\nis_Power_Of_Two(7**5) == False, \"7**5 is not power of 2\"\nis_Power_Of_Two(7**6) == False, \"7**6 is not power of 2\"\nis_Power_Of_Two(7**7) == False, \"7**7 is not power of 2\"\nis_Power_Of_Two(7**8) == True, \"7**8 is power of 2\"\nis_Power_Of_Two(7**9) == False, \"7**9 is not power of 2\"\nis_Power_Of_Two(7**10) == False, \"7**10 is not power of 2\"\nis_Power_Of_Two(7**11) == False, \"7**11 is not power of 2\"\nis_Power_Of_Two(7**12) == True, \"7**12 is power of 2\"\nis_Power_Of_Two(7**13) == False, \"7**13 is not power of 2\"\nis_Power_Of_Two(7**14) == False, \"7**14 is not power of 2\"\nis_Power_Of_Two(7**15) == False, \"7**15 is not power of 2\"\nis_Power_Of_Two(7**16) == True, \"7**16 is power of 2\"\nis_Power_Of_Two(7**17) == False, \"7**17 is not power of 2\"\nis_Power_Of_Two(7**18) == False, \"7**18 is not power of 2\"\nis_Power_Of_Two(7**19) == False, \"7**19 is not power of 2\"\nis_Power_Of_Two(7**20) == False, \"7**20 is not power of 2\"\nis_Power_Of_Two(7**21) == True, \"7**21 is power of 2\"\nis_Power_Of_Two(7**22) == False, \"7**22 is not power of 2\"\nis_Power_Of_Two(7**23) == False, \"7**23 is not power of 2\"\nis_Power_Of_Two(7**24) == False, \"7**24 is not power of 2\"\nis_Power_Of_Two(7**25) == False, \"7**25 is not power of 2\"\nis_Power_Of_Two(7**26) == True, \"7**26 is power of 2\"\nis_Power_Of_Two(7**27) == False, \"7**27 is not power of 2\"\nis_Power_Of_Two(7**28) == False, \"7**28 is not power of 2\"\nis_Power_Of_Two(7**29) == False, \"7**29 is not power of 2\"\nis_Power_Of_Two(7**30) == False, \"7**30 is not power of 2\"\nis_Power_Of_Two(7**31) == True, \"7**31 is power of 2\"\nis_Power_Of_Two(7**32) == False, \"7**32 is not power of 2\"\nis_Power_Of_Two(7**33) == False, \"7**33 is not power of 2\"\nis_Power_Of_Two(7**34) == False, \"7**34 is not power of 2\"\nis_Power_Of_Two(7**35) == False, \"7**35 is not power of 2\"\nis_Power_Of_Two(7**36) == True, \"7**36 is power of 2\"\nis_Power_Of_Two(7**37) == False, \"7**37 is not power of 2\"\nis_Power_Of_Two(7**38) == False, \"7**38 is not power of 2\"\nis_Power_Of_Two(7**39) == False, \"7**39 is not power of 2\"\nis_Power_Of_Two(7**40) == False, \"7**40 is not power of 2\"\nis_Power_Of_Two(7**41) == True, \"7**41 is power of 2\"\nis_Power_Of_Two(7**42) == False, \"7**42 is not power of 2\"\nis_Power_Of_Two(7**43) == False, \"7**43 is not power of 2\"\nis_Power_Of_Two(7**44) == False, \"7**44 is not power of 2\"\nis_Power_Of_Two(7**45) == False, \"7**45 is not power of 2\"\nis_Power_Of_Two(7**46) == True, \"7**46 is power of 2\"\nis_Power_Of_Two(7**47) == False, \"7**47 is not power of 2\"\nis_Power_Of_Two(7**48) == False, \"7**48 is not power of 2\"\nis_Power_Of_Two(7**49) == False, \"7**49 is not power of 2\"\nis_Power_Of_Two(7**50) == False, \"7**50 is not power of 2\"\nis_Power_Of_Two(7**51) == True, \"7**51 is power of 2\"\nis_Power_Of_Two(7**52) == False, \"7**52 is not power of 2\"\nis_Power_Of_Two(7**53) == False, \"7**53 is not power of 2\"\nis_Power_Of_Two(7**54) == False, \"7**54 is not power of 2\"\nis_Power_Of_Two(7**55) == False, \"7**55 is not power of 2\"\nis_Power_Of_Two(7**56) == True, \"7**56 is power of 2\"\nis_Power_Of_Two(7**57) == False, \"7**57 is not power of 2\"\nis_Power_Of_Two(7**58) == False, \"7**58 is not power of 2\"\nis_Power_Of_Two(7**59) == False, \"7**59 is not power of 2\"\nis_Power_Of_Two(7**60) == False, \"7**60 is not power of 2\"\nis_Power_Of_Two(7**61) == True, \"7**61 is power of 2\"\nis_Power_Of_Two(7**62) == False, \"7**62 is not power of 2\"\nis_Power_Of_Two(7**63) == False, \"7**63 is not power of 2\"\nis_Power_Of_Two(7**64) == False, \"7**64 is not power of 2\"\nis_Power_Of_Two(7**65) == False, \"7**65 is not power of 2\"\nis_Power_Of_Two(7**66) == True, \"7**66 is power of 2\"\nis_Power_Of_Two(7**67) == False, \"7**67 is not power of 2\"\nis_Power_Of_Two(7**68) == False, \"7**68 is not power of 2\"\nis_Power_Of_Two(7**69) == False, \"7**69 is not power of 2\"\nis_Power_Of_Two(7**70) == False, \"7**70 is not power of 2\"\nis_Power_Of_Two(7**7"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(4) == True, \"is_Power_Of_Two is wrong\"\nassert     is_Power_Of_Two(5) == False, \"is_Power_Of_Two is wrong\"\nassert     is_Power_Of_Two(9) == True, \"is_Power_Of_Two is wrong\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not is_Power_Of_Two(3)\nassert not is_Power_Of_Two(4)\nassert not is_Power_Of_Two(5)\nassert is_Power_Of_Two(2)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_Power_Of_Two(3)\nis_Power_Of_Two(5)\nis_Power_Of_Two(7)\nis_Power_Of_Two(9)\nis_Power_Of_Two(10)\nis_Power_Of_Two(11)"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(128) == False\nassert     is_Power_Of_Two(1) == True\nassert     is_Power_Of_Two(16) == True\nassert     is_Power_Of_Two(128) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(3) == False, \"case1\"\nassert     is_Power_Of_Two(5) == True, \"case2\"\nassert     is_Power_Of_Two(24) == False, \"case3\"\nassert     is_Power_Of_Two(30) == False, \"case4\"\nassert     is_Power_Of_Two(89) == True, \"case5\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(1) == False, \"the number is not a power of 2\"\nassert     is_Power_Of_Two(2) == True, \"the number is a power of 2\"\nassert     is_Power_Of_Two(3) == False, \"the number is not a power of 2\"\nassert     is_Power_Of_Two(4) == True, \"the number is a power of 2\"\nassert     is_Power_Of_Two(5) == True, \"the number is a power of 2\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Power_Of_Two(4) == False, \"correct answer:False\"\nassert     is_Power_Of_Two(8) == True, \"correct answer:True\"\nassert     is_Power_Of_Two(15) == False, \"correct answer:False\"\nassert     is_Power_Of_Two(0) == False, \"correct answer:False\"\nassert     is_Power_Of_Two(-1) == False, \"correct answer:False\"\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long(\"This is a test\") == [\"test\"]\nassert     find_char_long(\"This is a test\") == [\"test\"]\nassert     find_char_long(\"This is a test\") == [\"test\"]\nassert     find_char_long(\"This is a test\") == [\"test\"]\nassert     find_char_long(\"This is a test\") == [\"test\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('The quick brown fox jumps over the lazy dog.') == ['brown', 'dog']\nassert     find_char_long('The quick brown fox jumps over the lazy fox.') == ['fox']\nassert     find_char_long('I am the king.') == []\nassert     find_char_long('I am the king.') == ['king']\n\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at most 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long('hi this is an example') ==     [\n                                                                'hi', \n                                                                'this', \n                                                                'is', \n                                                                'an', \n                                                                'example'\n                                                            ]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long('abcdefghijk') == None\nassert    find_char_long('abcdefghi') == None\nassert    find_char_long('abcdefg') == None\nassert    find_char_long('ABCDEFGH') == None\nassert    find_char_long('abc') == None\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long('abc') == ['ab', 'cd', 'ef']\nassert    find_char_long('abc123') == ['ab', 'cd', 'ef', '123']\nassert    find_char_long('qwert') == []\nassert    find_char_long('qwertyuiop') == []\nassert    find_char_long('qwertyuiopasdfghjklzxcvbnm') == ['qw', 'qe', 'qr', 'qs', 'qd', 'qt', 'qu', 'qf', 'qo', 'qp', 'qm']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long('abc') == ['abc']\nassert     find_char_long('ab') == ['ab']\nassert     find_char_long('ab abc') == ['ab', 'ab']\nassert     find_char_long('abcabcabc') == ['abcabc']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_char_long('Hello world') == False\nassert     find_char_long('Hello') == True\nassert     find_char_long('Hello world') == True\nassert     find_char_long('Hello world') == False\nassert     find_char_long('Hello!') == False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long('I am a student, and I want to learn about functions') == ['student', 'functions']\nassert     find_char_long('This is a test') == []\nassert     find_char_long('This is a test, and this is another test') == ['test']\nassert     find_char_long('This is a test, and this is another test, and this is a test') == ['test']\n\n\ndef get_valid_input(prompt):\n    while True:\n        response = input(prompt)\n        if response == 'q':\n            return response\n        try:\n            response = int(response)\n            if response < 0:\n                print('Please enter a positive integer')\n            else:\n                return response\n        except ValueError:\n            print('Please enter a valid integer')\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(find_char_long(\"The quick brown fox jumps over the lazy dog\"))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsquare_nums([1,2,3,4]) == [1,4,9,16]\n\ndef square_nums_rec(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums([]) == []\nassert     square_nums([1]) == [1]\nassert     square_nums([1, 3, 9]) == [1, 9, 81]\nprint('You are all set!')"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25], 'Test 1'\nassert     square_nums([1,4,9,16,25]) == [1,16,25,49,64], 'Test 2'\nassert     square_nums([16,25,49,64]) == [16,64,256,1024,4096], 'Test 3'\nassert     square_nums([256,1024,4096,65536,65536]) == [256,4096,65536,4294967296,4294967296], 'Test 4'\nassert     square_nums([65536,4294967296,4294967296]) == [65536,4294967296,4294967296], 'Test 5'\nprint('PASSED ALL TEST CASES')\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_nums([-1, -2, -3, -4]) == [-1, 4, -9, 16]\nassert     square_nums([4, 5, 6, 7]) == [4, 25, 36, 49]\nassert     square_nums([-10, -9, -8, -7, -6]) == [-100, -9, -8, -27, -36]\nprint('correct')\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert square_nums([1,2,3,4,5,6,7,8,9,10]) == [1,4,9,16,25,36,49,64,81,100], \"The output should be [1,4,9,16,25,36,49,64,81,100]\"\nassert square_nums([]) == [], \"The output should be []\"\nassert square_nums([11,22,33,44,55,66,77,88,99,100]) == [11,44,55,77,88,99,100], \"The output should be [11,44,55,77,88,99,100]\"\nassert square_nums([-1,1,2,3,4,5,6,7,8,9,10]) == [-1,1,4,9,16,25,36,49,64,81,100], \"The output should be [-1,1,4,9,16,25,36,49,64,81,100]\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_nums([-2, -1, 0, 2, 3]) == [-4, 1, 0, 4, 9]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_nums([1,4,9,16,25,36,49,64]) == [1,4,9,16,25,36,49,64]\n\nassert square_nums([]) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\nassert     square_nums([0, 1, 4, 9]) == [0, 1, 16, 81]\n\n\ndef gcd(a, b):\n    '''\n    Write a function that finds the greatest common divisor of two numbers a and b.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 4, 9, 16, 25]\nassert     square_nums([-5, -2, -1, 0, 2, 3]) == [-25, 4, 16, 0, 4, 9]\nassert     square_nums([]) == []\nassert     square_nums([-5, -2, -1, 0, 2, 3, 5, 7, 9]) == [-25, 4, 16, 0, 4, 9, 25, 36, 49]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_Rotations('abc') == 0\nassert find_Rotations('xyz') == 0\nassert find_Rotations('pqr') == 1\nassert find_Rotations('tuv') == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Rotations(\"abcde\") == 0, 'Your code did not pass the test cases!'\nassert     find_Rotations(\"aabbcc\") == 3, 'Your code did not pass the test cases!'\nassert     find_Rotations(\"aabcc\") == 2, 'Your code did not pass the test cases!'\nassert     find_Rotations(\"aabbcaa\") == 4, 'Your code did not pass the test cases!'\n\n'''\nWrite a python function to find the minimum number of operations required to convert the first string into the second string.\n'''\ndef find_operations(s1, s2): \n    '''\n    Write a python function to find the minimum number of operations required to convert the first string into the second string.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations(\"a\") == 0\nassert     find_Rotations(\"aab\") == 1\nassert     find_Rotations(\"aba\") == 2\nassert     find_Rotations(\"ba\") == 2\nassert     find_Rotations(\"aaba\") == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations('abac') == 2\nassert     find_Rotations('baac') == 2\nassert     find_Rotations('caaa') == 0\nassert     find_Rotations('abacabc') == 2\nassert     find_Rotations('baacabc') == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Rotations(\"apple\") == 0\nassert     find_Rotations(\"notapart\") == 1\nassert     find_Rotations(\"\") == 0\nassert     find_Rotations(\"hi\") == 0\nassert     find_Rotations(\"hihihih\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations('g') == 1\nassert     find_Rotations('gg') == 1\nassert     find_Rotations('ggg') == 3\nassert     find_Rotations('gggg') == 6\nassert     find_Rotations('gffff') == 14\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations(\"abcdefg\") == 1\nassert     find_Rotations(\"abcdeg\") == 1\nassert     find_Rotations(\"a\") == 1\nassert     find_Rotations(\"b\") == 0\nassert     find_Rotations(\"ab\") == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('The expected output is {0}'.format(find_Rotations('abcdefgh'))) \nprint('The actual output is {0}'.format(find_Rotations('abcdefgh'))) "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_Occ('GeeksForGeeks','o') == 'Geeks'\nassert     remove_Occ('GeeksForGeeks','G') == 'GeS'\nassert     remove_Occ('GeeksForGeeks','e') == 'GksForGeS'\nassert     remove_Occ('GeeksForGeeks','f') == 'GkGeSfoS'\nassert     remove_Occ('GeeksForGeeks','k') == 'GeSkfoS'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_Occ(\"Hello World\",\"o\") == 'Hlwd'\nremove_Occ(\"Hello World\",\"W\") == 'Heh'\nremove_Occ(\"Hello World\",\"W\",\"l\") == 'He'\nremove_Occ(\"Hello World\",\"W\",\"l\",\"d\") == 'He'\nremove_Occ(\"a\",\"a\") == ''\nremove_Occ(\"\",\"\") == ''\nremove_Occ(\"\",\"z\") == ''\nremove_Occ(\"\",\"\") == ''\nremove_Occ(\"\",\"a\",\"b\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\") == ''\nremove_Occ(\"\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\","
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_Occ('amazing','m') == 'azegz'\nassert     remove_Occ('amazing','z') == 'amazing'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_Occ('abx','x') == 'ab'\nassert     remove_Occ('abx','y') == 'ab'\nassert     remove_Occ('abx','z') == 'ab'\nassert     remove_Occ('ab', 'z') == 'ab'\nassert     remove_Occ('ab', 'x') == 'ab'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ(\"aman\",\"m\") == \"aman\"\nassert     remove_Occ(\"aman\",\"n\") == \"aman\"\nassert     remove_Occ(\"aman\",\"a\") == \"amann\"\nassert     remove_Occ(\"aman\",\"y\") == \"aman\"\nassert     remove_Occ(\"aman\",\"x\") == \"aman\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ(\"love\",\"o\") == \"love\"\nassert     remove_Occ(\"no\",\"o\") == \"n\"\nassert     remove_Occ(\"a\",\"o\") == \"a\"\n\ndef duplicate_letters(s):\n    '''\n    Write a python function to count the number of duplicate letters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert remove_Occ(\"Akhil\",'a') == \"Ak\"\nassert remove_Occ(\"Akhil\",'i') == \"Akhil\"\nassert remove_Occ(\"Akhil\",'i') == \"Akhil\"\nassert remove_Occ(\"Akhil\",'l') == \"Akhil\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_Occ('aab', 'a') == 'aab'\nremove_Occ('abc', 'd') == 'abc'\nremove_Occ('aab', 'b') == 'abc'\nremove_Occ('aab', 'c') == 'ab'\nremove_Occ('abc', 'a') == 'ab'\nremove_Occ('abc', 'b') == 'ab'\nremove_Occ('abc', 'c') == 'ab'\nremove_Occ('abc', 'd') == 'ab'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_Occ('hello', 'l') == 'ello'\nassert     remove_Occ('hello', 'h') == 'ello'\nassert     remove_Occ('abc', 'd') == 'abc'\nassert     remove_Occ('abcc', 'c') == 'abcc'\nassert     remove_Occ('abcc', 'b') == 'abcc'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ(\"aacaba\", \"a\") == \"aacaba\"\nassert     remove_Occ(\"aacaba\", \"b\") == \"acaba\"\nassert     remove_Occ(\"aacaba\", \"c\") == \"aacab\"\nassert     remove_Occ(\"\", \"c\") == \"\"\nassert     remove_Occ(\"acaba\", \"\") == \"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([[1, 3, 8, -2], \n                       [-6, -3, -2, -1], \n                       [2, 5, 6, 8], \n                       [-5, 4, 3, 7]]) == [[-5, 4, 3, 7], \n                                           [-6, -3, -2, -1], \n                                           [1, 3, 8, -2], \n                                           [2, 5, 6, 8]], 'Wrong!'\n\ndef find_max_value_submatrix(M):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray in a given matrix.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     sort_matrix([[7,7,7],[3,4,6],[7,8,9]]) == [[7,7,7],[3,4,6],[7,8,9]]\nassert     sort_matrix([[0,1],[0,0],[0,0]]) == [[0,0],[0,0],[0,1]]\nassert     sort_matrix([[0,0,0,0],[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == [[0,0,0,0],[1,2,3,4],[5,6,7,8],[9,10,11,12]]"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[7, 2, 3], [5, 8, 1], [9, 6, 4]]) == [[2, 3, 1], [5, 8, 7], [9, 6, 4]], \"Wrong Answer\"\nassert     sort_matrix([[2, 1, 5], [1, 4, 7], [3, 6, 2]]) == [[1, 1, 2], [3, 6, 2], [5, 4, 7]], \"Wrong Answer\"\nassert     sort_matrix([[1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11], [7, 8, 9, 10, 11, 12], [8, 9, 10, 11, 12, 13], [9, 10, 11, 12, 13, 14], [10, 11, 12, 13, 14, 15], [11, 12, 13, 14, 15, 16]]) == [[2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11], [7, 8, 9, 10, 11, 12], [8, 9, 10, 11, 12, 13], [9, 10, 11, 12, 13, 14], [10, 11, 12, 13, 14, 15], [11, 12, 13, 14, 15, 16]], \"Wrong Answer\"\nassert     sort_matrix([[2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [7, 8, 9, 10, 11]]) == [[1, 2, 3, 4, 5], [7, 8, 9, 10, 11], [2, 3, 4, 5, 6]], \"Wrong Answer\"\nassert     sort_matrix([[2, 3, 4, 5], [1, 2, 3, 4], [5, 6, 7, 8]]) == [[1, 2, 3, 4], [5, 6, 7, 8], [2, 3, 4, 5]], \"Wrong Answer\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[3, 2, 1],\n                        [2, 1, 1],\n                        [1, 1, 2]]) == [[1, 1, 1],\n                                [1, 2, 2],\n                                [2, 3, 3]]\n\nprint('done'"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_matrix([[1,4],[2,5],[3,6]]) == [[1,4],[3,6],[2,5]]\nassert     sort_matrix([[7,4],[2,5],[3,6]]) == [[2,5],[3,6],[7,4]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('Passed all test cases')\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([[1, 4, 2],\n                    [4, 5, 6],\n                    [2, 8, 1]]) == [[1, 4, 2],\n                                    [2, 8, 1],\n                                    [4, 5, 6]]\nassert     sort_matrix([[4, 7, 3],\n                    [2, 5, 8],\n                    [3, 9, 1]]) == [[3, 9, 1],\n                                    [2, 5, 8],\n                                    [4, 7, 3]]\n\ndef sort_matrix_alt(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # sorting the matrix row by row\n    for i in range(len(M)-1):\n        # going through each row\n        for j in range(i+1, len(M)):\n            # check if the current row needs to be sorted\n            if M[i][0] > M[j][0]:\n                # swap the two rows\n                M[i], M[j] = M[j], M[i]\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Assertion:', 'find_Volume should return the volume of a triangular prism')"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(2,3,4) == 6\nassert     find_Volume(1,1,1) == 1\nassert     find_Volume(-1,-1,-1) == 0\nassert     find_Volume(0,0,0) == 0\nassert     find_Volume(5,6,7) == 24\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(2,2,2) == 8\nassert    find_Volume(3,2,2) == 9\nassert    find_Volume(2,2,5) == 20\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(10, 20, 30) == 690\nassert     find_Volume(100, 20, 30) == 2700\nassert     find_Volume(100, 20, 60) == 5400\nassert     find_Volume(100, 20, 80) == 6500\nassert     find_Volume(100, 20, 90) == 6500\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_Volume(10,11,15) == 50\nfind_Volume(10,11,16) == 51\nfind_Volume(10,11,17) == 52\nfind_Volume(10,11,18) == 53\nfind_Volume(10,11,19) == 54\nfind_Volume(10,11,20) == 55\nfind_Volume(10,11,21) == 56\nfind_Volume(10,11,22) == 57\nfind_Volume(10,11,23) == 58\nfind_Volume(10,11,24) == 59\nfind_Volume(10,11,25) == 60\nfind_Volume(10,11,26) == 61\nfind_Volume(10,11,27) == 62\nfind_Volume(10,11,28) == 63\nfind_Volume(10,11,29) == 64\nfind_Volume(10,11,30) == 65\nfind_Volume(10,11,31) == 66\nfind_Volume(10,11,32) == 67\nfind_Volume(10,11,33) == 68\nfind_Volume(10,11,34) == 69\nfind_Volume(10,11,35) == 70\nfind_Volume(10,11,36) == 71\nfind_Volume(10,11,37) == 72\nfind_Volume(10,11,38) == 73\nfind_Volume(10,11,39) == 74\nfind_Volume(10,11,40) == 75\nfind_Volume(10,11,41) == 76\nfind_Volume(10,11,42) == 77\nfind_Volume(10,11,43) == 78\nfind_Volume(10,11,44) == 79\nfind_Volume(10,11,45) == 80\nfind_Volume(10,11,46) == 81\nfind_Volume(10,11,47) == 82\nfind_Volume(10,11,48) == 83\nfind_Volume(10,11,49) == 84\nfind_Volume(10,11,50) == 85\nfind_Volume(10,11,51) == 86\nfind_Volume(10,11,52) == 87\nfind_Volume(10,11,53) == 88\nfind_Volume(10,11,54) == 89\nfind_Volume(10,11,55) == 90\nfind_Volume(10,11,56) == 91\nfind_Volume(10,11,57) == 92\nfind_Volume(10,11,58) == 93\nfind_Volume(10,11,59) == 94\nfind_Volume(10,11,60) == 95\nfind_Volume(10,11,61) == 96\nfind_Volume(10,11,62) == 97\nfind_Volume(10,11,63) == 98\nfind_Volume(10,11,64) == 99\nfind_Volume(10,11,65) == 100\nfind_Volume(10,11,66) == 101\nfind_Volume(10,11,67) == 102\nfind_Volume(10,11,68) == 103\nfind_Volume(10,11,69) == 104\nfind_Volume(10,11,70) == 105\nfind_Volume(10,11,71) == 106\nfind_Volume(10,11,72) == 107\nfind_Volume(10,11,73) == 108\nfind_Volume(10,11,74) == 109\nfind_Volume(10,11,75) == 110\nfind_Volume(10,11,76) == 111\nfind_Volume(10,11,77) == 112\nfind_Volume(10,11,78) == 113\nfind_Volume(10,11,79) == 114\nfind_Volume(10,11,80) == 115\nfind_Volume(10,11,81) == 116\nfind_Volume(10,11,82) == 117\nfind_Volume(10,11,83) == 118\nfind_Volume(10,11,84) == 119\nfind_Volume(10,11,85) == 120\nfind_Volume(10,11,86) == 121\nfind_Volume(10,11,87) == 122\nfind_Volume(10,11,88) == 123\nfind_Volume(10,11,89) == 124\nfind_Volume(10,11,90) == 125\nfind_Volume(10,11,91) == 126\nfind_Volume(10,11,92) == 127\nfind_Volume(10,11,93) == 128\nfind_Volume(10,11,94) == 129\nfind_Volume(10,11,95) == 130\nfind_Volume(10,11,96) == 131\nfind_Volume(10,11,97) == 132\nfind_Volume(10,11,98) == 133\nfind_Volume(10,11,99) == 134\nfind_Volume(10,11,100) == 135\nfind_Volume(10,11,101) == 136\nfind_Volume(10,11,102) == 137\nfind_Volume(10,11,103) == 138\nfind_Volume(10,11,104) == 139\nfind_Volume(10,11,105) == 140\nfind_Volume(10,11,106) == 141\nfind_Volume(10,11,107) == 142\nfind_Volume(10,11,108) == 143\nfind_Volume(10,11,109) == 144\nfind_Volume(10,11,110) == 145\nfind_Volume(10,11,111) == 146\nfind_Volume(10,11,112) == 147\nfind_Volume(10,11,113) == 148\nfind_Volume(10,11,114) == 149\nfind_Volume(10,11,115) == 150\nfind_Volume(10,11,116) == 151\nfind_Volume(10,11,117) == 152\nfind_Volume(10,11,118) == 153\nfind_Volume(10,11,119) == 154\nfind_Volume(10,11,120) == 155\nfind_Volume(10,11,121) == 156\nfind_Volume(10,11,122) == 157\nfind_Volume(10,11,123) == 158\nfind_Volume(10,11,124) == 159\nfind_Volume(10,11,125) == 160\nfind_Volume(10,11,126) == 161\nfind_Volume(10,11,127) == 162\nfind_Volume(10,11,128) == 163\nfind_Volume(10,11,129) == 164\nfind_Volume(10,11,130) == 165\nfind_Volume(10,11,131) == 166\nfind_Volume(10,11,132) == 167\nfind_Volume(10,11,133) == 168\nfind_Volume(10,11,134) == 169\nfind_Volume(10,11,135) == 170\nfind_Volume(10,11,136) == 171\nfind_Volume(10,11,137) == 172\nfind_Volume(10,11,138) == 173\nfind_Volume(10,11,139) == 174\nfind_Volume(10,11,140) == 175\nfind_Volume(10,11,141) == 176\nfind_Volume(10,11,142) == 177\nfind_Volume(10,11,143) == 178\nfind_Volume(10,11,144) == 179\nfind_Volume(10,11,145) == 180\nfind_Volume(10,11,146) == 181\nfind_Volume(10,11,147) == 182\nfind_Volume(10,11,148) == 183\nfind_Volume(10,11,149) == 184\nfind_Volume(10,11,150) == 185\nfind_Volume(10,11,151) == 186\nfind_Volume(10,11,152) == 187\nfind_Volume(10,11,153) == 188\nfind_Volume(10,11,154) == 189\nfind_Volume(10,11,155) == 190\nfind_Volume(10,11,156) == 191\nfind_Volume(10,11,157) == 192\nfind_Volume(10,11,158) == 193\nfind_Volume(10,11,159) == 194\nfind_Volume(10,11,160) == 195\nfind_Volume(10,11,161) == 196\nfind_Volume(10,11,162) == 197\nfind_Volume(10,11,163) == 198\nfind_Volume(10,11,164) == 199\nfind_Volume(10,11,165) == 200\nfind_Volume(10,11,166) == 201\nfind_Volume(10,11,167) == 202\nfind_Volume(10"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume(10,10,2) == 20, \"Should be 20\"\nassert     find_Volume(1,10,2) == 20, \"Should be 20\"\nassert     find_Volume(1,100,2) == 100, \"Should be 100\"\nassert     find_Volume(-1,-1,2) == 0, \"Should be 0\"\nassert     find_Volume(-1,-100,2) == 0, \"Should be 0\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(a,b,c) == 4*a*b\nassert     find_Volume(1,4,3) == 6\nassert     find_Volume(1,4,5) == 8\n\n'''\nProblem 9:\n    Write a python function to find the sum of the digits of a given number.\n'''\n\ndef sum_digits(n) : \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore(\"AAB\") == True, \"First test fails\"\nassert     text_lowercase_underscore(\"aB\") == True, \"Second test fails\"\nassert     text_lowercase_underscore(\"aBc\") == True, \"Third test fails\"\nassert     text_lowercase_underscore(\"abc\") == False, \"Fourth test fails\"\nassert     text_lowercase_underscore(\"aBC\") == False, \"Fifth test fails\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('this is a test') == True,    \"passing assert failed\"\nassert     text_lowercase_underscore('this_is_a_test') == True,    \"passing assert failed\"\nassert     text_lowercase_underscore('this_is_a_test_') == False,    \"passing assert failed\"\nassert     text_lowercase_underscore('this is a test') == False,    \"passing assert failed\"\nassert     text_lowercase_underscore('this is a test_') == False,    \"passing assert failed\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('This_is_a_test')\nassert not text_lowercase_underscore('This is a test')\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('') == False\nassert     text_lowercase_underscore('if__you_want_to_make_a_good_deal_with_something_a_can_be_a_good_idea_in_your_life_i__should_be_an_a__thought_of_you') == True\nassert     text_lowercase_underscore('this is some text and some_random_text__') == False\nassert     text_lowercase_underscore('if_you_want_to_make_a_good_deal_with_something_a_can_be_a_good_idea_in_your_life_i__should_be_an_a__thought_of_you') == False\nassert     text_lowercase_underscore('if_you_want_to_make_a_good_deal_with_something_a_can_be_a_good_idea_in_your_life_i__should_be_an_a__thought_of_you_or_some_other_text_or_some_another_idea') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntext_lowercase_underscore(\"No-one can be a No-man\") == True\nassert \ntext_lowercase_underscore(\"No-one can be a No-man\") == False\nassert \ntext_lowercase_underscore(\"We are No-mans\") == True\nassert \ntext_lowercase_underscore(\"We are No-mans\") == False\nassert \ntext_lowercase_underscore(\"Hershey Text\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('hi_1') == True\nassert     text_lowercase_underscore('hi_2') == False\nassert     text_lowercase_underscore('ab_1') == False\nassert     text_lowercase_underscore('ab_2') == False\nassert     text_lowercase_underscore('abc_1') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore('') == False, \n        \"test case 1 failed\"\nassert     text_lowercase_underscore('a_b_c') == True, \n        \"test case 2 failed\"\nassert     text_lowercase_underscore('aBc') == True, \n        \"test case 3 failed\"\nassert     text_lowercase_underscore('1_aB_c') == True, \n        \"test case 4 failed\"\nassert     text_lowercase_underscore('a1b2_c') == False, \n        \"test case 5 failed\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('test1') == False\nassert     text_lowercase_underscore('test_2') == True\nassert     text_lowercase_underscore('test-_3') == True\nassert     text_lowercase_underscore('test_-4') == True\nassert     text_lowercase_underscore('test_--5') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('some_text') == False\nassert     text_lowercase_underscore('SomeText') == True\nassert     text_lowercase_underscore('some_other_text') == False\nassert     text_lowercase_underscore('_some_text') == True\nassert     text_lowercase_underscore('__some_text') == False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(1) == 2, 'Error in your square_perimeter function'\nassert     square_perimeter(0) == 0, 'Error in your square_perimeter function'\nassert     square_perimeter(1.5) == 2.5, 'Error in your square_perimeter function'\nassert     square_perimeter(2.5) == 5.25, 'Error in your square_perimeter function'\nassert     square_perimeter(5) == 10, 'Error in your square_perimeter function'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_perimeter(2) == 4\nassert square_perimeter(0) == 0\nassert square_perimeter(1) == 1\nassert square_perimeter(1.3) == 2.7\nassert square_perimeter(-1) == -2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(square_perimeter(3))\n\nassert square_perimeter(4) == 8\n\nassert square_perimeter(5) == 10\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_perimeter(10) == 20\nassert square_perimeter(1) == 1\nassert square_perimeter(2) == 4\nassert square_perimeter(0) == 0\n\n\ndef area_square(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_perimeter(3) == 12, \"Wrong square_perimeter(3)\"\nassert     square_perimeter(6) == 18, \"Wrong square_perimeter(6)\"\nassert     square_perimeter(4) == 16, \"Wrong square_perimeter(4)\"\nassert     square_perimeter(0) == 0, \"Wrong square_perimeter(0)\"\nassert     square_perimeter(5) == 20, \"Wrong square_perimeter(5)\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_perimeter(1) == 1\nassert     square_perimeter(2) == 2\nassert     square_perimeter(3) == 6\nassert     square_perimeter(4) == 12\nassert     square_perimeter(5) == 20\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_perimeter(4) == 8\nassert     square_perimeter(1) == 1\nassert     square_perimeter(0) == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert str_to_list('abcd', 'ab') == 'bcd'\nassert str_to_list('abcd', 'ac') == 'bcd'\nassert str_to_list('abcd', 'abc') == 'bcd'\nassert str_to_list('abcd', 'abc') == 'bcd'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\ndef str_to_dict(string): \n    '''\n    Write a function to convert a string of characters into a dictionary where the characters are the keys and their counts are the values.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert str_to_list('abcd', 'a') == ['b', 'c', 'd']\nassert str_to_list('abcd', 'ac') == ['b', 'c', 'd']\nassert str_to_list('abcd', 'b') == ['a', 'c', 'd']\n\ndef valid_parenthesis(string): \n    '''\n    Write a function to check whether a given string contains only valid parenthesis or not.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef list_to_str(list1, list2): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     str_to_list('hello'        )    ==        ['h','e','l','l','o']\nassert     str_to_list('hello world')    ==    ['h','e','l','l','o',' ','w','o','r','l','d']\nassert     str_to_list('word word word')    ==    ['w','o','r','w','o','r','d']\n\n\ndef str_to_list2(string, char): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef list_to_str(lst):\n    '''\n    Write a function to make the first string which are present in the second string to be a list.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert str_to_list('abcdefghijklmnopqrstuvwxyz') == ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\ndef str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_duplicate_two(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    test_duplicate([1, 2, 3, 4, 5, 1]) == True\nassert \n    test_duplicate([1, 2, 3, 4, 5, 1, 2]) == False\nassert \n    test_duplicate([1, 1, 2, 3, 4, 5, 1, 2]) == True\nassert \n    test_duplicate([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2]) == Fals"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_duplicate([1,2,3,3]) == True\nassert     test_duplicate([1,2,3,2]) == False\nassert     test_duplicate([1,1,1,3,3]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntest_duplicate([1,2,3,4]) == False\ntest_duplicate([1,1,3,4]) == True\ntest_duplicate([1,2,3,4,4]) == True"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate([1, 1, 1])     ==    True, 'Should contain 1'\nassert     test_duplicate([1, 2, 3, 1])     ==    True, 'Should contain 1'\nassert     test_duplicate([1, 2, 2])     ==    True, 'Should contain 2'\nassert     test_duplicate([1, 1, 2])     ==    False, 'Should not contain 2'\nassert     test_duplicate([])     ==    False, 'Should not contain any element'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nAnother method of doing this is to check whether the input array is sorted (sorted in ascending order) and then go through the array and check if the next element in the array is the same as the current element.\nThe time complexity of this method is O(n) and the space complexity is O(1).\n'''\n\ndef test_duplicate_optimized(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_duplicate([1, 2, 3, 1]) == False\nassert     test_duplicate([1, 2, 3, 3]) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(5) == False, \"Wrong answer for 5!\"\nassert     is_woodall(8) == True, \"Wrong answer for 8!\"\n\nprint('You are correct!')\nprint(\"Let's check your speed!\")\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_woodall(1) == False \nis_woodall(100) == False \nis_woodall(5) == False \nis_woodall(-1) == False \nis_woodall(0) == False \nis_woodall(3.14) == False\nis_woodall(10**10) == False"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_woodall(2) == True\nassert     is_woodall(5) == True\nassert     is_woodall(7) == True\nassert     is_woodall(9) == True\nassert     is_woodall(11) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(38) == False\nassert     is_woodall(23) == True\nassert     is_woodall(48) == False\nassert     is_woodall(55) == False\nassert     is_woodall(100) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_woodall(45) == False\nassert is_woodall(456) == True\nassert is_woodall(1111) == True\nassert is_woodall(11111) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_woodall(5) == False, 'the testcase is wrong'\nassert     is_woodall(6) == True, 'the testcase is wrong'\nassert     is_woodall(10) == False, 'the testcase is wrong'\nassert     is_woodall(11) == False, 'the testcase is wrong'\n\n'''\nQuestion 17\nWrite a function to find the maximum number among three numbers\n'''\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_woodall(3) == True, \\\n    'Return True if number is a woodball else return False.'\nassert \n    is_woodall(3.2) == False, \\\n    'Return True if number is a woodball else return False.'\nassert \n    is_woodall(-3.2) == False, \\\n    'Return True if number is a woodball else return False.'\nassert \n    is_woodall(-10) == False, \\\n    'Return True if number is a woodball else return False.'\nassert \n    is_woodall(2 ** 100) == True, \\\n    'Return True if number is a woodball else return False.'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rev(13) == 5, \"Fail the test\"\nassert     rev(12) == 22, \"Fail the test\"\n\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrev(-1) == 2\nrev(-2) == -2\nrev(-3) == 2\nrev(0) == 0\nrev(1) == -1\nrev(2) == -2\nrev(3) == -1\nrev(4) == 1\nrev(5) == 2\nrev(6) == -2\nrev(7) == 2\nrev(8) == -1\nrev(9) == 1\nrev(10) == -1\nrev(11) == -2\nrev(12) == 2\nrev(13) == -2\nrev(14) == -1\nrev(15) == 1\nrev(16) == -1\nrev(17) == -2\nrev(18) == -1\nrev(19) == 1\nrev(20) == -1\nrev(21) == -2\nrev(22) == 2\nrev(23) == 1\nrev(24) == -1\nrev(25) == 2\nrev(26) == -1\nrev(27) == -2\nrev(28) == -1\nrev(29) == 1\nrev(30) == -1\nrev(31) == -2\nrev(32) == -1\nrev(33) == 1\nrev(34) == -1\nrev(35) == -2\nrev(36) == -1\nrev(37) == 1\nrev(38) == -1\nrev(39) == -2\nrev(40) == -1\nrev(41) == 1\nrev(42) == -1\nrev(43) == -2\nrev(44) == -1\nrev(45) == 1\nrev(46) == -1\nrev(47) == -2\nrev(48) == -1\nrev(49) == 1\nrev(50) == -1\nrev(51) == -2\nrev(52) == -1\nrev(53) == 1\nrev(54) == -1\nrev(55) == -2\nrev(56) == -1\nrev(57) == 1\nrev(58) == -1\nrev(59) == -2\nrev(60) == -1\nrev(61) == 1\nrev(62) == -1\nrev(63) == -2\nrev(64) == -1\nrev(65) == 1\nrev(66) == -1\nrev(67) == -2\nrev(68) == -1\nrev(69) == 1\nrev(70) == -1\nrev(71) == -2\nrev(72) == -1\nrev(73) == 1\nrev(74) == -1\nrev(75) == -2\nrev(76) == -1\nrev(77) == 1\nrev(78) == -1\nrev(79) == -2\nrev(80) == -1\nrev(81) == 1\nrev(82) == -1\nrev(83) == -2\nrev(84) == -1\nrev(85) == 1\nrev(86) == -1\nrev(87) == -2\nrev(88) == -1\nrev(89) == 1\nrev(90) == -1\nrev(91) == -2\nrev(92) == -1\nrev(93) == 1\nrev(94) == -1\nrev(95) == -2\nrev(96) == -1\nrev(97) == 1\nrev(98) == -1\nrev(99) == -2\nrev(100) == -1\nrev(101) == 1\nrev(102) == -1\nrev(103) == -2\nrev(104) == -1\nrev(105) == 1\nrev(106) == -1\nrev(107) == -2\nrev(108) == -1\nrev(109) == 1\nrev(110) == -1\nrev(111) == -2\nrev(112) == -1\nrev(113) == 1\nrev(114) == -1\nrev(115) == -2\nrev(116) == -1\nrev(117) == 1\nrev(118) == -1\nrev(119) == -2\nrev(120) == -1\nrev(121) == 1\nrev(122) == -1\nrev(123) == -2\nrev(124) == -1\nrev(125) == 1\nrev(126) == -1\nrev(127) == -2\nrev(128) == -1\nrev(129) == 1\nrev(130) == -1\nrev(131) == -2\nrev(132) == -1\nrev(133) == 1\nrev(134) == -1\nrev(135) == -2\nrev(136) == -1\nrev(137) == 1\nrev(138) == -1\nrev(139) == -2\nrev(140) == -1\nrev(141) == 1\nrev(142) == -1\nrev(143) == -2\nrev(144) == -1\nrev(145) == 1\nrev(146) == -1\nrev(147) == -2\nrev(148) == -1\nrev(149) == 1\nrev(150) == -1\nrev(151) == -2\nrev(152) == -1\nrev(153) == 1\nrev(154) == -1\nrev(155) == -2\nrev(156) == -1\nrev(157) == 1\nrev(158) == -1\nrev(159) == -2\nrev(160) == -1\nrev(161) == 1\nrev(162) == -1\nrev(163) == -2\nrev(164) == -1\nrev(165) == 1\nrev(166) == -1\nrev(167) == -2\nrev(168) == -1\nrev(169) == 1\nrev(170) == -1\nrev(171) == -2\nrev(172) == -1\nrev(173) == 1\nrev(174) == -1\nrev(175) == -2\nrev(176) == -1\nrev(177) == 1\nrev(178) == -1\nrev(179) == -2\nrev(180) == -1\nrev(181) == 1\nrev(182) == -1\nrev(183) == -2\nrev(184) == -1\nrev(185) == 1\nrev(186) == -1\nrev(187) == -2\nrev(188) == -1\nrev(189) == 1\nrev(190) == -1\nrev(191) == -2\nrev(192) == -1\nrev(193) == 1\nrev(194) == -1\nrev(195) == -2\nrev(196) == -1\nrev(197) == 1\nrev(198) == -1\nrev(199) == -2\nrev(200) == -1\nrev(201) == 1\nrev(202) == -1\nrev(203) == -2\nrev(204) == -1\nrev(205) == 1\nrev(206) == -1\nrev(207) == -2\nrev(208) == -1\nrev(209) == 1\nrev(210) == -1\nrev(211) == -2\nrev(212) == -1\nrev(213) == 1\nrev(214) == -1\nrev(215) == -2\nrev(216) == -1\nrev(217) == 1\nrev(218) == -1\nrev(219) == -2\nrev(220) == -1\nrev(221) == 1\nrev(222) == -1\nrev(223) == -2\nrev(224) == -1\nrev(225) == 1\nrev(226) == -1\nrev(227) == -2\nrev(228) == -1\nrev(229) == 1\nrev(230) == -1\nrev(231) == -2\nrev(232) == -1\nrev(233) == 1\nrev(234) == -1\nrev(235) == -2\nrev(236) == -1\nrev(237) == 1\nrev(238) == -1\nrev(239) == -2\nrev(240) == -1\nrev(241) == 1\nrev(242) == -1\nrev(243) == -2\nrev(244) == -1\nrev(245) == 1\nrev(246) == -1\nrev(247) == -2\nrev(248) == -1\nrev(249) == 1\nrev(250) == -1\nrev(251) == -2\nrev(252) == -1\nrev(253) == 1\nrev(254) == -1\nrev(255) ="
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nrev(-1)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(3) == False, \"Rev number should be False\"\nassert     rev(2) == True, \"Rev number should be True\"\nassert     rev(5) == False, \"Rev number should be False\"\nassert     rev(-9) == False, \"Rev number should be False\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(10)==12\nassert    rev(15)==24\nassert    rev(20)==24\nassert rev(27)==26\nassert rev(29)==29\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Max_Num(['a','b','c','d','e']) == 'e', \"The largest number can be formed with the given list of digits\"\nassert     find_Max_Num(['a','b','c']) == 'c', \"The largest number can be formed with the given list of digits\"\nassert     find_Max_Num(['a','b','c','d']) == 'c', \"The largest number can be formed with the given list of digits\"\nassert     find_Max_Num(['a','b','c','d','e']) == 'e', \"The largest number can be formed with the given list of digits\"\n\nprint(\"Task completed.\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint ('\\nAnswer to Question 1: ', find_Max_Num(['1','2','3','4','5']))\nprint ('Answer to Question 1: ', find_Max_Num(['1','2','3','4','5','6','7','8','9']))\nprint ('Answer to Question 1: ', find_Max_Num(['1','2','3','4','5','6','7','8','9','0']))\n\nprint ('\\nAnswer to Question 2: ', find_Max_Num(['2','3','1','4','5','6','7','8','9']))\nprint ('Answer to Question 2: ', find_Max_Num(['2','3','4','1','5','6','7','8','9']))\nprint ('Answer to Question 2: ', find_Max_Num(['2','3','1','4','5','6','7','8','9','0']))\n\nprint ('\\nAnswer to Question 3: ', find_Max_Num(['5','6','7','4','5','6','7','8','9']))\nprint ('Answer to Question 3: ', find_Max_Num(['5','6','7','4','5','6','7','8','9','0']))\nprint ('Answer to Question 3: ', find_Max_Num(['5','6','7','4','5','6','7','8','9','0','1']))\n\nprint ('\\nAnswer to Question 4: ', find_Max_Num(['2','3','1','4','5','6','7','8','9','0']))\nprint ('Answer to Question 4: ', find_Max_Num(['2','3','4','1','5','6','7','8','9','0']))\nprint ('Answer to Question 4: ', find_Max_Num(['2','3','4','1','5','6','7','8','9','0','1']))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Max_Num([2,3,4,1]) == 4\nassert     find_Max_Num([1,2,3,4]) == 4\nassert     find_Max_Num([1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Max_Num([]) == 0, \"The result should be 0\"\nassert     find_Max_Num([1]) == 1, \"The result should be 1\"\nassert     find_Max_Num([1,2]) == 2, \"The result should be 2\"\nassert     find_Max_Num([1,2,3]) == 3, \"The result should be 3\"\nassert     find_Max_Num([1,2,3,4,5]) == 5, \"The result should be 5\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_sum(n):\n    '''\n    Write a python function to compute the sum of the numbers in the range of 0 to n.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Max_Num([10, 25, 30, 5, 60]) == 60\nassert     find_Max_Num([10, 20, 30, 40, 50, 60]) == 60\nassert     find_Max_Num([10, 20, 30, 40, 50, 60, 70]) == 70\nassert     find_Max_Num([10, 20, 30, 40, 50, 60, 70, 80]) == 80\nassert     find_Max_Num([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 90\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(3, -7) == True, \"Result is incorrect!\"\nassert     opposite_Signs(-4, -7) == True, \"Result is incorrect!\"\nassert     opposite_Signs(-5, 7) == True, \"Result is incorrect!\"\nassert     opposite_Signs(3, 7) == False, \"Result is incorrect!\"\nassert     opposite_Signs(-4, 7) == False, \"Result is incorrect!\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(1,2) == False, 'Test 1 failed'\nassert     opposite_Signs(1,2) == False, 'Test 2 failed'\nassert     opposite_Signs(2,1) == False, 'Test 3 failed'\nassert     opposite_Signs(-1,-2) == True, 'Test 4 failed'\nassert     opposite_Signs(-1,1) == False, 'Test 5 failed'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     opposite_Signs(2, -4) == True, \"Two integers having opposite sign is incorrect\"\nassert     opposite_Signs(1, -2) == False, \"One integer having opposite sign is incorrect\"\nassert     opposite_Signs(-2, 1) == True, \"One integer having opposite sign is incorrect\"\nassert     opposite_Signs(-3, -2) == False, \"Two integers having opposite sign is incorrect\"\n\nprint(\"\\nChecking if two given integers have opposite sign or not.\")\nprint(\"The function should return True if the given integers have opposite sign, False otherwise\\n\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(1,-1)==True\nassert     opposite_Signs(-1,-1)==False\nassert     opposite_Signs(-1,1)==False\nassert     opposite_Signs(1,-1)==False\nassert     opposite_Signs(-1,1)==False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     opposite_Signs(10, 5) == False, \"The first number must have a sign, and the second one doesn't.\"\nassert     opposite_Signs(-10, 5) == True, \"The first number must have a sign, and the second one does.\"\nassert     opposite_Signs(10, -5) == True, \"The first number must have a sign, and the second one does.\"\nassert     opposite_Signs(-10, -5) == False, \"The first number must have a sign, and the second one doesn't.\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     opposite_Signs(-1, -1) == True\nassert     opposite_Signs(-1, 1) == False\nassert     opposite_Signs(-1, 0) == False\nassert     opposite_Signs(-1, 2) == True\nassert     opposite_Signs(1, -1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     opposite_Signs(4,4) == False, \"Error. Not 4\"\nassert     opposite_Signs(-1,1) == True, \"Error. Not 1\"\nassert     opposite_Signs(-5,-3) == True, \"Error. Not 3\"\nassert     opposite_Signs(-7,-7) == True, \"Error. Not 7\"\nassert     opposite_Signs(-10,-10) == False, \"Error. Not 10\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nopposite_Signs(4,-5) == True\nassert opposite_Signs(4,5) == False\nassert opposite_Signs(-4,-5) == True\nassert opposite_Signs(-4,5) == False"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nopposite_Signs(10,10) == False\nopposite_Signs(10,-10) == True\nopposite_Signs(10,10) == True\nopposite_Signs(-10,-10) == True\n\n\n\n'''\n\n**Write a Python program to check whether a string is a pangram or not.\nNote : Pangrams are words or sentences containing every letter of the alphabet at least once.\nFor example : \"The quick brown fox jumps over the lazy dog\"\n'''\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 7\nassert     is_octagonal(3) == 15\nassert     is_octagonal(4) == 22\nassert     is_octagonal(5) == 28\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 12\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nis_octagonal(1) == 1\nassert is_octagonal(2) == 7\nassert is_octagonal(3) == 19\nassert is_octagonal(4) == 87\nassert is_octagonal(5) == 109\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_octagonal(1) == 1 \nassert     is_octagonal(2) == 7 \nassert     is_octagonal(3) == 21 \nassert     is_octagonal(4) == 34 \nassert     is_octagonal(5) == 55 \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 5\nassert     is_octagonal(3) == 15\nassert     is_octagonal(4) == 28\nassert     is_octagonal(5) == 49\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 6\nassert is_octagonal(3) == 10\nassert is_octagonal(4) == 12\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 15\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings('00') == 1\nassert     count_Substrings('01') == 2\nassert     count_Substrings('10') == 4\nassert     count_Substrings('11') == 4\nassert     count_Substrings('1112') == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert count_Substrings(\"sunday\") == 1\nassert count_Substrings(\"saturday\") == 1\nassert count_Substrings(\"sunday\") == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # \"count_Substrings('0') == 0\n    # \"count_Substrings('99') == 1\n    # \"count_Substrings('111') == 2\n    # \"count_Substrings('1112') == 3\n    # \"count_Substrings('11111') == 4\n    # \"count_Substrings('22') == 0\n    # \"count_Substrings('2222') == 0\n    # \"count_Substrings('222222') == 0\n    # \"count_Substrings('22222222') == 0\n    # \"count_Substrings('2222222222') == 2\n    # \"count_Substrings('222222222222') == 2\n    # \"count_Substrings('22222222222222') == 2\n    # \"count_Substrings('22222222222222222222') == 2\n    # \"count_Substrings('2222222222222222222222') == 4\n    # \"count_Substrings('222222222222222222222222') == 4\n    # \"count_Substrings('2222222222222222222222222222222222') == 4\n    # \"count_Substrings('2222222222222222222222222222222222222222') == 10\n    # \"count_Substrings
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Substrings('aaaa') == 1, \"Your output is wrong\"\nassert     count_Substrings('ababc') == 1, \"Your output is wrong\"\nassert     count_Substrings('aacbbc') == 1, \"Your output is wrong\"\nassert     count_Substrings('aaaaa') == 2, \"Your output is wrong\"\nassert     count_Substrings('abcabc') == 2, \"Your output is wrong\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings('harshit') == 2\nassert     count_Substrings('stas') == 3\nassert     count_Substrings('abcd') == 1\nassert     count_Substrings('a') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ns = 'helloo'\nassert count_Substrings(s) == 3\n\ns = 'aakash'\nassert count_Substrings(s) == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings('1') == 1\nassert     count_Substrings('1') == 1\nassert     count_Substrings('12') == 2\nassert     count_Substrings('123') == 3\nassert     count_Substrings('1233') == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Substrings(\"pqrs\") == 4, \"Should have returned 4\"\nassert     count_Substrings(\"pqrs\") == 1, \"Should have returned 1\"\nassert     count_Substrings(\"pqrs\") == 2, \"Should have returned 2\"\nassert     count_Substrings(\"pqrs\") == 3, \"Should have returned 3\"\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings('abcd') == 2\nassert     count_Substrings('123456') == 6\nassert count_Substrings('abc123') == 2\nassert count_Substrings('a') == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     smallest_num([20, 30, 20, 40, 30, 50]) == 20, \"Should be 20\"\nassert     smallest_num([10, 20, 50, 30, 40, 80]) == 20, \"Should be 20\"\nassert     smallest_num([100, 100, 100, 100, 100]) == 100, \"Should be 100\"\nassert     smallest_num([10, 10, 10, 10, 10]) == 10, \"Should be 10\"\nassert     smallest_num([10, 10, 10, 10, 10]) == 10, \"Should be 10\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     smallest_num([-5, -10, -1, -2, -3, -7])    == -1\nassert     smallest_num([-5, 10, -1, -2, -3, -7])    == -1\nassert     smallest_num([5, -10, -1, -2, -3, -7])    == -1\nassert     smallest_num([0, 1, -1, -2, -3, -7])    == 1\nassert     smallest_num([0, 0, 1, -1, -2, -3, -7])    == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_num([2, 1, 3, 5, 4]) == 1\nassert     smallest_num([-3, -10, -10, -4, -2]) == -10\nassert     smallest_num([1,2,3,4,5,6,7,8,9]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9,10]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9,10,11]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_num([1,2,3]) == 1\nassert     smallest_num([1,3,2]) == 1\nassert     smallest_num([-1,-2,0]) == -1\nassert     smallest_num([0,0,0]) == 0\nassert     smallest_num([0,-1]) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([2,3,4,1,5]) == 1\nassert     smallest_num([2,3,4,1]) == 1\nassert     smallest_num([2,3,4,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 1\nassert     smallest_num([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,8"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_num([0, -1, -2, -3, -5, -7, -6]) == -6\nassert     smallest_num([0, -1, -2, -3, -5, -7]) == -5\nassert     smallest_num([1, 2, 3, 4, 5, 6, 7]) == 1\nassert     smallest_num([7, 6, 5, 4, 3, 2, 1]) == 1\nassert     smallest_num([3, 4, 5, 2, 1]) == 2\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([1, 2, 3, 4]) == 1\nassert     smallest_num([6, 5, 4, 3]) == 3\nassert     smallest_num([-1, -2, -3, -4]) == -1\nassert     smallest_num([]) == None\n\n'''\n4. Write a python function that takes a list of numbers and finds the sum of all the even numbers.\n'''\ndef even_sum(xs):\n    '''\n    Write a python function to find sum of all even numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([1, 2, 3, 4, 5]) == 1\nassert     smallest_num([1, 1, 2, 2]) == 1\nassert     smallest_num([1, 1, 1, 2, 2]) == 1\nassert     smallest_num([1, 1, 2, 2]) == 1\nassert     smallest_num([2, 3, 4, 5, 5]) == 5\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_difference([(1,2),(3,4),(5,6),(7,8)]) == 2\nassert     max_difference([(0,1),(2,3),(4,5),(6,7)]) == 5\nassert     max_difference([(2,2),(3,1),(1,4),(5,6)]) == 3\nassert     max_difference([(1,2),(3,4),(5,6),(7,8)]) == 2\nassert     max_difference([]) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference([(1,3),(2,5),(3,5),(4,2),(2,4)]) ==  2, \"Wrong answer. Expected 5. Got 2\"\nassert     max_difference([(1,5),(2,4),(3,5),(4,2),(2,3)]) ==  2, \"Wrong answer. Expected 5. Got 2\"\nassert     max_difference([(1,2),(2,4),(3,5),(4,2),(2,3)]) ==  0, \"Wrong answer. Expected 2. Got 0\"\n\ndef max_difference_2(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    Note: The input list contains only unique elements.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference([[0,1],[0,2],[1,2]]) == 0, \"Wrong!\"\nassert     max_difference([[0,1],[0,2],[1,2],[1,3]]) == 1, \"Wrong!\"\nassert     max_difference([[0,1],[0,2],[0,3]]) == 1, \"Wrong!\"\nassert     max_difference([[0,1],[1,2],[2,3]]) == 0, \"Wrong!\"\nassert     max_difference([[0,1,2],[1,2,3],[2,3,4],[1,3,4]]) == 2, \"Wrong!\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nmax_difference([(3, 5), (1, 2), (2, 3), (4, 8)]) == (3, 8)\nmax_difference([(4, 8), (1, 2), (2, 3), (3, 5)]) == (4, 8)\nmax_difference([(10, 20), (1, 2), (2, 3), (3, 5), (9, 15)]) == (10, 15)\nmax_difference([(2, 3), (5, 8), (10, 20), (3, 5), (1, 2)]) == (5, 20)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference([(1, 2), (4, 3), (4, 5), (5, 6)]) == 3, 'Wrong!'\nassert     max_difference([(1, 4), (4, 3), (4, 5), (5, 6)]) == 2, 'Wrong!'\nassert     max_difference([(1, 2), (4, 3), (4, 6), (5, 7), (8, 9), (10, 11)]) == 4, 'Wrong!'\nassert     max_difference([(1, 2), (4, 3), (4, 5), (5, 6), (8, 9), (10, 11)]) == 4, 'Wrong!'\nassert     max_difference([(1, 2), (4, 3), (4, 6), (5, 6)]) == 0, 'Wrong!'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_difference((0, 4, -4, 3, -1)) == 5, \"Wrong answer\"\nassert     max_difference((0, -4, -4, 3, -1)) == -6, \"Wrong answer\"\nassert     max_difference((0, 4, -4, 3, -1)) == 4, \"Wrong answer\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_difference2(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference(((1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4))) ==     0,     'max_difference() has bugs!'\nassert     max_difference(((1, 2, 3), (1, 2, 4), (2, 3, 4), (1, 3, 4))) ==     1,     'max_difference() has bugs!'\nassert     max_difference(((1, 2, 3), (1, 2, 4), (2, 3, 4), (1, 3, 5))) ==     1,     'max_difference() has bugs!'\nassert     max_difference(((1, 2, 3), (1, 2, 4), (2, 3, 4), (1, 3, 5))) ==     1,     'max_difference() has bugs!'\nassert     max_difference(((1, 2, 3), (1, 2, 4), (2, 3, 5), (1, 3, 4))) ==     3,     'max_difference() has bugs!'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('All done'"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference([(1,3),(2,7),(4,9)]) == 2\nassert     max_difference([(1,5),(2,7),(4,9),(3,10),(1,10)]) == 8\nassert     max_difference([(5,2),(8,10),(9,10),(9,7),(8,8),(7,2),(6,7)]) == 10\nassert     max_difference([(4,8),(8,9),(5,10),(2,7),(4,7),(5,2),(7,5),(7,8),(9,7),(6,9)]) == 8\nassert     max_difference([(2,5),(3,2),(4,7),(5,6),(6,6),(7,9),(8,9),(9,10)]) == 8\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(1, 'A'), (4, 'B'), (3, 'C'), (2, 'D'), (1, 'E')]) == [(1, 'A'), (2, 'D'), (3, 'C'), (4, 'B'), (1, 'E')], f\"Wrong result\"\nprint('\\033[92m' + \"Let's check it now\" + '\\033[0m')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     subject_marks([(10, 2), (3, 4), (1, 3), (2, 3), (1, 2)]) == \\\n        [(1, 3), (2, 3), (3, 4), (10, 2), (1, 2)], \"Wrong answer\"\nprint(\"\\033[92m\" + \"You've successfully passed this challenge!\" + \"\\033[0m\")\nprint('\\n'"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         subject_marks([]) == []\nassert         subject_marks([(3, 3), (2, 1), (1, 2)]) == [(1, 2), (2, 1), (3, 3)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(subject_marks([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([\n    (5, 'B'),\n    (3, 'A'),\n    (3, 'B'),\n    (2, 'B'),\n    (1, 'B'),\n    (1, 'A'),\n    (4, 'A'),\n    (8, 'A'),\n    (8, 'B'),\n    (7, 'B'),\n    (6, 'B'),\n    (5, 'B'),\n    ]) == \\\n    [(1, 'A'),\n     (1, 'B'),\n     (2, 'B'),\n     (3, 'B'),\n     (3, 'A'),\n     (4, 'A'),\n     (5, 'B'),\n     (6, 'B'),\n     (7, 'B'),\n     (8, 'A'),\n     (8, 'B'),\n     (5, 'B'),\n     ]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    sort(\n        [\n            ('Maths', 90),\n            ('Physics', 82),\n            ('Chemistry', 75),\n            ('History', 70),\n            ('English', 50)\n        ]\n    ) ==\n    [\n        ('English', 50),\n        ('Chemistry', 75),\n        ('Maths', 90),\n        ('Physics', 82),\n        ('History', 70)\n    ]\n\ndef middle_marks(marks):\n    '''\n    Write a function to sort a list of tuples using the middle value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     recursive_list_sum([1,2,3,4]) == 15\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([[1,2,3,4]]) == 15\nassert     recursive_list_sum([[1,2,3,4],[2,3,4,5]]) == 13\nassert     recursive_list_sum([[1,2,3,4,5],[2,3,4,5,6],[7,8,9,10]]) == 21\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1,2,[3,4,[5,6]],7]) == 21\nassert     recursive_list_sum(['a','b','c']) == 'abc'\nassert     recursive_list_sum([]) == 0\n\ndef recursive_map(data_list, fn):\n    '''\n    Write a function to map a function over a list.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4]) == 10\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([1, 2]) == 3\nassert     recursive_list_sum([1, 2, 3]) == 6\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    recursive_list_sum([1,2,3,4,5,6,7,8,9]) == 25\n    recursive_list_sum([1,2,3,4,5,6,7]) == 14\n    recursive_list_sum([1,2,3,4,5]) == 10\n    recursive_list_sum([1,2,3,4]) == 7\n    recursive_list_sum([]) == 0\n    recursive_list_sum([1]) == 1\n    recursive_list_sum([1,2,3,4,5,6]) == 10"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     recursive_list_sum([[1,2],[3],[4,5,6],[7,8]]) == 10, \"Wrong result\"\n\ndef iterative_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([1,2,3,4]) == 10, \"Wrong\"\nassert     recursive_list_sum([]) == 0, \"Wrong\"\nassert     recursive_list_sum(['apple','grape']) == 9, \"Wrong\"\nassert     recursive_list_sum([]) == 0, \"Wrong\"\nassert     recursive_list_sum(['banana', ['apple','grape']]) == 9, \"Wrong\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert recursive_list_sum([1, 2, [3, 4, [5, 6], 7], 8, 9]) == 55\nassert recursive_list_sum([1, 2, 3, 4, 5]) == 10\nassert recursive_list_sum([]) == 0\n\n\ndef flatten(lst):\n    '''\n    Write a function to flatten a list of nested lists.\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([[0, 1, 2],\n                            [1, 2, 3],\n                            [2, 3, 4],\n                            [3, 4, 5]]) == (0 + 1 + 2 + 3 + 4 + 5)\n\ndef my_remove_duplicates(data_list):\n    '''\n    Write a function that removes duplicate values from a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([]) == 0\nassert     pos_count([3, -1, -1, 0, 1]) == 4\nassert     pos_count([-1, -2, -3, -4, -5]) == 5\n\n\ndef pos_count_2(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pos_count([-1, -2, -3, -4, -5]) == 2\nassert     pos_count([-1, -2, -3, -4]) == 3\nassert     pos_count([-1, -2, -3]) == 1\nassert     pos_count([-1, -2, -3, -4, -5]) == 1\nassert     pos_count([-1, -2, -3, -4, -5, -6]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([0,1,2,3,4,5]) == 5, 'Should be 5'\nassert pos_count([1,-3,2,0,4,6]) == 5, 'Should be 5'\nassert pos_count([1,-3,2,0,4,-6]) == 5, 'Should be 5'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([-1, 0, 1, 2, 3, 4, 5]) == 4\nassert     pos_count([0, 0, 0, 0]) == 0\nassert     pos_count([1, 2, 3]) == 3\nassert     pos_count([0, 2, 4]) == 3\nassert     pos_count([-2, 1, 1]) == 2\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pos_count([1,2,3,4,5,-6,7,8]) == 4\nassert     pos_count([-1,-2,-3,-4,-5]) == 4\nassert     pos_count([-1,2,3,4,5,6]) == 5\nassert     pos_count([-1,2,-3,4,-5]) == 4\nassert     pos_count([-1,2,3,-4,5]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([-1, 2, -3, 4, 0]) == 5, \"Wrong!\"\nassert     pos_count([-1, 2, -3, 4, 0, -5]) == 5, \"Wrong!\"\nassert     pos_count([1, 1, 1, -5, 1, 1, 1]) == 6, \"Wrong!\"\nassert     pos_count([]) == 0, \"Wrong!\"\nassert     pos_count([1]) == 1, \"Wrong!\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([1,2,3,4,5]) == 4, \"Your code didn't work\"\nassert     pos_count([1,2,3,4,5,6]) == 6, \"Your code didn't work\"\nassert     pos_count([2,4,6,8,10]) == 5, \"Your code didn't work\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([3, 5, -3, -2, 5]) == 2, \"pos_count failed\"\nassert     pos_count([-3, -2, -5, -3, -2]) == 3, \"pos_count failed\"\nassert     pos_count([3, 5, -3, -2, 5, 2]) == 5, \"pos_count failed\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number(10) == 15\nassert bell_number(1) == 1\nassert bell_number(2) == 2\nassert bell_number(3) == 5\nassert bell_number(4) == 10\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_number(1) == 1, 'bell_number(1) is wrong!'\nassert     bell_number(2) == 2, 'bell_number(2) is wrong!'\nassert     bell_number(3) == 5, 'bell_number(3) is wrong!'\nassert     bell_number(5) == 15, 'bell_number(5) is wrong!'\nassert     bell_number(6) == 21, 'bell_number(6) is wrong!'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert\nprint(bell_number(3)) == 5\nprint(bell_number(4)) == 7\n\ndef num_ways(n, k):\n    '''\n    Given an integer n and an integer k, return the number of ways to make k numbers equal to n using the following rules:\n    - If n is 1, you can only make k equal to 1.\n    - If k is 1, you can only make n equal to k.\n    - If k is larger than n, return 0.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(4) == 6\nassert     bell_number(5) == 10\n\ndef check_rec_fib(n):\n    '''\n    Write a function to check the correctness of a recursive Fibonacci\n    expression.\n    '''\n    pass\n\ndef check_rec_fib_with_memo(n):\n    '''\n    Write a function to check the correctness of a recursive Fibonacci\n    expression.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\n\nGiven an array of positive integers, return the number of (contiguous, non-empty) subarrays \nwhose product is less than or equal to a given integer, n.\n\nExample:\n\nInput:  [2,3,5,7,11],  n = 11\nOutput: 3\nExplanation:\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 2\nassert     bell_number(4) == 5\nassert     bell_number(5) == 6\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef bell_number_ii(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([1,2,2,3]) == True\nassert     is_Monotonic([6,5,4,3,2,1]) == True\nassert     is_Monotonic([6,5,4,3,2,1,2]) == False\nassert     is_Monotonic([1,1,1,1,1]) == True\nassert     is_Monotonic([0,0,0]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Monotonic([1, 2, 2, 3, 3, 3]) == True, 'wrong'\nassert     is_Monotonic([1, 3, 2, 4, 5, 2]) == False, 'wrong'\nassert     is_Monotonic([1, 2, 3, 4, 5, 6]) == True, 'wrong'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1,2,1]) == False, \"Wrong result for is_Monotonic([1,2,1])\"\nassert     is_Monotonic([1,1,1]) == True, \"Wrong result for is_Monotonic([1,1,1])\"\nassert     is_Monotonic([1,2,1,1]) == True, \"Wrong result for is_Monotonic([1,2,1,1])\"\nassert     is_Monotonic([1,1,1,1]) == True, \"Wrong result for is_Monotonic([1,1,1,1])\"\nassert     is_Monotonic([1,2,2,1]) == False, \"Wrong result for is_Monotonic([1,2,2,1])\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_Monotonic([1,2,3,4,4,5])\nassert not is_Monotonic([1,2,3,2,1])\nassert not is_Monotonic([1,1,1])\nassert is_Monotonic([1,1,1,1])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([1, 2, 2, 3, 3, 4]) == True\nassert     is_Monotonic([1, 2, 3, 4, 2, 3, 1]) == True\nassert     is_Monotonic([1, 2, 2, 1]) == False\nassert     is_Monotonic([]) == True\nassert     is_Monotonic([1, 3, 2, 5, 4]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([0, 1, 2, 3, 4, 5]) == True\nassert     is_Monotonic([4, 5, 2, 1, 3, 0]) == False\nassert     is_Monotonic([1, 1, 1, 1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_Monotonic([1,2,4,3,5,4,2,1]) == True\nassert is_Monotonic([1,2,3,4,4,3,2,1]) == True\nassert not is_Monotonic([1,2,4,3,5,5,2,1]) == True\nassert not is_Monotonic([1,2,4,3,5,4,2,1,5,4,3,2,1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [2,3]) == True\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [1,2,2]) == False\nassert     is_sublist([1,2,3], []) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_sublist([1, 2, 3, 4], [1, 2]) == True, \"ERROR: 1-3\"\nassert \nis_sublist([1, 2, 3, 4], [1, 2, 3, 4]) == True, \"ERROR: 1-4\"\nassert \nis_sublist([1, 2, 3, 4], [1, 3]) == False, \"ERROR: 1-3\"\nassert \nis_sublist([1, 2, 3, 4], [2, 3, 4]) == False, \"ERROR: 2-3\"\nassert \nis_sublist([1, 2, 3, 4], []) == False, \"ERROR: empty\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_sublist([1,2,3,4], [1,2,3]), 'true'\nassert not is_sublist([1,2,3], [1,2,3,4]), 'false'\nassert not is_sublist([1,2,3,4], [1]), 'false'\nassert not is_sublist([1,2,3], [1,2,3,4,5]), 'true'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([], []) == False, \"0\"\nassert     is_sublist([], [1]) == True, \"1\"\nassert     is_sublist([1], []) == False, \"2\"\nassert     is_sublist([], [1, 2, 3]) == False, \"3\"\nassert     is_sublist([1, 2, 3], []) == False, \"4\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist([],[]), 'empty list'\nassert     is_sublist([1,2,3],[]), 'non-sublist'\nassert     is_sublist([1,2,3],[1,2,3]),'sublist'\nassert     is_sublist([1,2,3],[1]),'sublist with 1'\nassert     is_sublist([1,2,3],[2,3]),'sublist with 2'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist([1, 2, 3], [1]) == True, \\\n        'is_sublist([1, 2, 3], [1]) == True: this should be True'\nassert     is_sublist([1, 2, 3], [1, 2]) == True, \\\n        'is_sublist([1, 2, 3], [1, 2]) == True: this should be True'\nassert     is_sublist([1, 2, 3], [3]) == False, \\\n        'is_sublist([1, 2, 3], [3]) == False: this should be False'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_sublist([1,2,3,4], [1,2,3]) == False\nassert     is_sublist([1,2,3,4], [1,2,4]) == True\nassert     is_sublist([], [1,2,3]) == False\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [4,5,6]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([1,2,3,4,5,6], [1,2]) == True, \"Wrong Output\"\nassert     is_sublist([1,2,3,4,5,6], [1,6]) == False, \"Wrong Output\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not find_equal_tuple
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1,2),(1,2),(1,2)]) == True\nassert     find_equal_tuple([(1,2),(1,2),(1,3)]) == False\nassert     find_equal_tuple([(1,2),(1,2)]) == False\nassert     find_equal_tuple([(1,2),(1,2,3)]) == True\nassert     find_equal_tuple([(1,2),(2,2)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple([(1,2),(3,4),(5,6)]) == True\nassert     find_equal_tuple([(1,2,3),(3,4,5)]) == False\nassert     find_equal_tuple([(1,2),(2,3),(3,4)]) == True\n\ndef find_all_sublists(Input):\n    '''\n    Write a function that finds all the sublists in a given list and return the output as a list\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2), (1, 2)]) == True\nassert     find_equal_tuple([(1, 2), (1, 3), (1, 2), (1, 2)]) == False\nassert     find_equal_tuple([(1, 2), (1, 2), (1, 2)]) == True\nassert     find_equal_tuple([(1, 2), (1, 2)]) == True\nassert     find_equal_tuple([(1, 2), (1, 2, 3)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(2,2),(2,1),(2,2),(3,3),(5,4),(3,2)])     == False, \"Wrong Answer\"\nassert     find_equal_tuple([(2,2),(2,1),(2,2),(3,3),(5,4),(2,1)])     == True, \"Wrong Answer\"\n\ndef sorted_list(Input):\n    '''\n    Write a function to sort the list in ascending order using heapsort\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1,2,3),(1,2)]) == True, \"Should return True\"\nassert     find_equal_tuple([(1,2,3),(1,2,3)]) == True, \"Should return True\"\nassert     find_equal_tuple([(1,2),(1,2,3)]) == False, \"Should return False\"\nassert     find_equal_tuple([(1),(1,2)]) == False, \"Should return False\"\nassert     find_equal_tuple([(1,2),(1,2)]) == True, \"Should return True\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple((1,2,3,4,5)) == True, \\\n        \"\\n\\n\\nWrong solution!\\n\\n\\n\"\n\nassert     find_equal_tuple((1,2)) == False, \\\n        \"\\n\\n\\nWrong solution!\\n\\n\\n\"\n\nassert     find_equal_tuple((1,2,3)) == True, \\\n        \"\\n\\n\\nWrong solution!\\n\\n\\n\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple([('a',), ('a', 'b'), ('a', 'b', 'c')]) == True, 'failed'\nassert     find_equal_tuple([('a'), ('a',), ('a', 'b', 'c')]) == False, 'failed'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(1,2), (3,4), (5,6), (7,8)]) == True\nassert     find_equal_tuple([(1,2,3), (4,5,6), (7,8,9), (10,11,12)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(1,2),(3,4),(5,6)]) == True\nassert     find_equal_tuple([(1,2),(3,4),(5,6,7)]) == False\nassert     find_equal_tuple([(1),(2),(3)]) == False\nassert     find_equal_tuple([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8)]) == True\nassert     find_equal_tuple([]) == False\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    comb_sort([4,3,2,1]) == [1,2,3,4], \"Wrong!\"\nassert \n    comb_sort([4,4,4,3,2,1]) == [1,2,3,4,4,4], \"Wrong!\"\nassert \n    comb_sort([]) == [], \"Wrong!\"\nassert \n    comb_sort([1]) == [1], \"Wrong!\"\nassert \n    comb_sort([1,2,1]) == [1,1,2], \"Wrong!\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nimport random\n\ndef cocktail_sort(arr):\n    '''\n    Sort a list of elements using the cocktail sort algorithm.\n    '''\n    # assumption: the length of the list\n    #          must be at least 2\n    n = len(arr)\n    for i in range(n-1):\n        # we are going through the list from the end\n        swap = False\n        for j in range(n-1-i,i,-1):\n            # we are going from the end to the beginning\n            # if the array elements are in the right order\n            if arr[j] > arr[j+1]:\n                # we swap the elements\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swap = True\n        # we stop the loop if the array has been sorted\n        if not swap:\n            # the array is sorted\n            break\n    return arr\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     comb_sort([-1, 2, -2, -3, 0, 4, 5, 5, 5, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 10, 11, 11, 11, 11]) == [-1, -2, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     comb_sort([-1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert     comb_sort([-1, 1, -2, 1, -1, 1, 1, -1, 1, -1, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [-1, -1, -2, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     comb_sort([-1, 2, -1, 2, 1, -1, 1, 1, -1, 1, -1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     comb_sort([-1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [3, 5, 1, 2, 6, 9, 8, 4, 7]\n    comb_sort(lst)\n    print(lst)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([2,4,6]) == [2,4,6]\nassert     comb_sort([2,3,6,7]) == [2,3,6,7]\nassert     comb_sort([2,3,6,7,9]) == [2,3,6,7,9]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     comb_sort([1,2,3,4]) == [1,2,3,4], \"Wrong\"\nassert     comb_sort([]) == [], \"Wrong\"\nassert     comb_sort([1,3,2,4]) == [1,2,3,4], \"Wrong\"\nassert     comb_sort([5,2,4,3]) == [2,3,4,5], \"Wrong\"\nassert     comb_sort([4,3,2,1]) == [1,2,3,4], \"Wrong\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     comb_sort( [ 1, -2, -5, 4, -1 ] ) == [-5, -2, -1, 4, 1]\nassert     comb_sort( [ -9, -3, -4, -2, -1 ] ) == [-9, -4, -3, -2, -1]\nassert     comb_sort( [ -99, -3, -4, -2, -1 ] ) == [-99, -4, -3, -2, -1]\nassert     comb_sort( [ ] ) == []\nassert     comb_sort( None ) == None\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(dif_Square(5))\nprint(dif_Square(0))\nprint(dif_Square(4))\nprint(dif_Square(-5))\nprint(dif_Square(10))\n\nprint('''\n*************************************************************************************************************************************************************************************************\n---------------------------------------------------------\n---------------------------------------------------------\n---------------------------------------------------------\n---------------------------------------------------------\n---------------------------------------------------------\n---------------------------------------------------------\n''')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef dif_Tri(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two triangles or not.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dif_Square(36) == True, \"Wrong output\"\nassert     dif_Square(64) == True, \"Wrong output\"\nassert     dif_Square(49) == True, \"Wrong output\"\nassert     dif_Square(128) == True, \"Wrong output\"\nassert     dif_Square(99) == False, \"Wrong output\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dif_Square(4) == True, \"Wrong output\"\nassert     dif_Square(8) == False, \"Wrong output\"\nassert     dif_Square(5) == True, \"Wrong output\"\nassert     dif_Square(0) == True, \"Wrong output\"\nassert     dif_Square(-2) == False, \"Wrong output\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    dif_Square(5)==False, \"Input is: 5\"\n    dif_Square(1)==False, \"Input is: 1\"\n    dif_Square(0)==True, \"Input is: 0\"\n    dif_Square(-1)==False, \"Input is: -1\"\n    dif_Square(100)==True, \"Input is: 100\"\n    dif_Square(4)==False, \"Input is: 4\"\n    dif_Square(-100)==False, \"Input is: -100\"\n    dif_Square(2**16)==True, \"Input is: 2**16\""
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndif_Square(0)\ndif_Square(1)\ndif_Square(4)\ndif_Square(10)\ndif_Square(23)\n\n\n'''\nWrite a python function to check whether a given integer is a power of 2.\n'''\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert dif_Square(4) == True, \"Error\"\nassert dif_Square(18) == False, \"Error\"\nassert dif_Square(25) == True, \"Error\"\nassert dif_Square(24) == True, \"Error\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dif_Square(1)        == True\nassert     dif_Square(2)        == False\nassert     dif_Square(3)        == True\nassert     dif_Square(4)        == False\nassert     dif_Square(5)        == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dif_Square(1) == False \nassert     dif_Square(2) == True \nassert     dif_Square(3) == False \nassert     dif_Square(5) == True \nassert     dif_Square(7) == False \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_samepatterns([(255,0,0), (0,255,0), (0,0,255)], [[(255,0,0), (0,255,0), (0,0,255)]])\nassert     is_samepatterns([(255,0,0), (0,255,0), (0,0,255)], [[(255,0,0), (0,255,0), (0,0,255)], [(0,0,255), (255,0,0), (0,255,0)]])\nassert not is_samepatterns([(255,0,0), (0,255,0), (0,0,255)], [[(255,0,0), (0,255,0), (0,0,255)], [(0,0,255), (255,0,0), (0,255,0)]])\nassert not is_samepatterns([(255,0,0), (0,255,0), (0,0,255)], [[(255,0,0), (0,255,0), (0,0,255)], [(255,0,0), (0,255,0), (0,0,255)]])"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns([    'yellow','red', 'green', 'blue', 'orange', 'cyan', 'brown', 'pink'],    [    'orange', 'yellow','red', 'green', 'blue', 'cyan', 'brown', 'pink']) == True, \"is_samepatterns should return True when given list of colors is same as patterns.\"\nassert     is_samepatterns([    'yellow','red', 'green', 'blue', 'orange', 'cyan', 'brown', 'pink'],    [    'blue', 'yellow', 'pink','red', 'cyan', 'green', 'brown', 'orange']) == False, \"is_samepatterns should return False when given list of colors is not same as patterns.\"\nassert     is_samepatterns([    'yellow','red', 'green', 'blue', 'orange', 'cyan', 'brown', 'pink'],    [    'orange', 'yellow','red', 'green', 'blue', 'cyan', 'brown', 'pink']) == False, \"is_samepatterns should return False when given list of colors is not same as patterns.\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns(['red','black','blue','green'], ['red','green','black','blue']) == True, \"The patterns are not following the given order\"\nassert     is_samepatterns(['red','black','blue','green'], ['red','blue','green','black']) == False, \"The patterns are not following the given order\"\n\n'''\nTake in two strings, and return whether or not the second string can be built from the first string by alternating.\n\nThe strings are written out in a clockwise spiral.\n\nExample:\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_samepatterns([\"red\", \"blue\", \"green\"], [\"yellow\", \"green\", \"purple\"]) == False\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], [\"yellow\", \"green\", \"purple\", \"cyan\"]) == True\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], [\"yellow\", \"green\", \"purple\", \"cyan\", \"white\", \"black\"]) == True\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], [\"yellow\", \"green\", \"purple\", \"cyan\", \"white\", \"black\", \"yellow\", \"red\", \"green\"]) == True\n\ndef is_samepatterns_by_stack(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns([],[\"green\",\"red\",\"red\"]) == False\nassert     is_samepatterns([],[\"green\",\"green\",\"red\",\"red\"]) == True\nassert     is_samepatterns([],[\"green\",\"red\",\"red\",\"green\"]) == False\nassert     is_samepatterns([],[\"red\",\"red\",\"red\",\"red\"]) == True\nassert     is_samepatterns([],[\"red\",\"red\",\"green\",\"green\"]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_samepatterns(colors, patterns) == True\nassert     is_samepatterns(colors, patterns2) == True\nassert     is_samepatterns(colors, patterns3) == False\nassert     is_samepatterns(colors2, patterns) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_samepatterns([1, 2, 3], patterns)\nassert is_samepatterns([2, 3, 1], patterns)\nassert is_samepatterns([1, 1, 2], patterns)\nassert is_samepatterns([1, 2, 3], patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(0, 2, 3), (1, 3, 4), (2, 3, 4), (2, 4, 5)], 3) == [(0, 2, 4), (1, 3, 5)]\nassert     find_tuples([(0, 2, 3), (1, 3, 4), (2, 3, 4), (2, 4, 5)], 5) == [(0, 2, 4, 5)]\nassert     find_tuples([(0, 2, 3), (1, 3, 4), (2, 3, 4), (2, 4, 5)], 7) == [(0, 2, 4, 5)]\nassert     find_tuples([(0, 2, 3), (1, 3, 4), (2, 3, 4), (2, 4, 5)], 7) == []\nassert     find_tuples([(0, 2, 3), (1, 3, 4), (2, 3, 4), (2, 4, 5)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 3) ==     [(1, 6), (7, 8)]\nassert find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 4) ==     [(1, 8), (3, 6)]\nassert find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 5) ==     [(1, 4), (7, 2)]\nassert find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 6) ==     [(1, 2), (7, 8)]\nassert find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 7) ==     [(1, 2), (3, 4), (5, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples( [(1, 2, 3, 4, 5), (1, 2, 3, 6), (1, 2, 4), (1, 5, 6, 7)], 3 ) == \n            [(1, 2, 3, 4, 5), (1, 2, 3, 6), (1, 2, 4), (1, 5, 6, 7)]\nassert     find_tuples( [(1, 2, 3, 4, 5), (1, 2, 3, 6), (1, 2, 4), (1, 5, 6, 7)], 2 ) == \n            []\nassert     find_tuples( [(1, 2, 3, 4, 5), (1, 2, 3, 6), (1, 2, 4), (1, 5, 6, 7)], 1 ) == \n            [(1, 2, 3, 4, 5), (1, 2, 3, 6), (1, 2, 4), (1, 5, 6, 7)]\nassert     find_tuples( [(1, 2, 3, 4, 5), (1, 2, 3, 6), (1, 2, 4), (1, 5, 6, 7)], 0 ) == \n            [(1, 2, 3, 4, 5), (1, 2, 3, 6), (1, 2, 4), (1, 5, 6, 7)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1,2),(3,4)], 1)    ==    [(1,2)]\nassert     find_tuples([(1,2),(3,4)], 2)    ==    [(1,2),(3,4)]\nassert     find_tuples([(1,2),(3,4)], 3)    ==    [(1,2),(3,4)]\nassert     find_tuples([(1,2),(3,4)], 4)    ==    [(1,2),(3,4)]\nassert     find_tuples([(1,2),(3,4)], 5)    ==    []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(1,2,3),(4,6,6),(4,7,4)],2) == [(1,2), (4,6), (4,7)]\nassert     find_tuples([(3,5,6),(3,8,9),(8,6,3),(3,4,9)],3) == [(3,5,6), (3,8,9), (8,6,3)]\nassert     find_tuples([(1,2,3),(4,6,6),(4,7,4)],3) == []\nassert     find_tuples([(3,5,6),(3,8,9),(8,6,3),(4,7,4)],2) == [(3,5,6), (3,8,9)]\nassert     find_tuples([(1,2,3),(4,6,6),(4,7,4)],1) == [(1,2,3)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1,2,3,4),(1,2,3,4)], 4) == [(1,2)]\nassert     find_tuples([(1,2,3,4),(1,2,3,4)], 3) == [(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)]\nassert     find_tuples([(1,2,3,4),(1,2,3,4)], 5) == []\nassert     find_tuples([(1,2,3,4),(1,2,3,4)], 4) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 3) == [(1, 2), (1, 3), (3, 4), (3, 5)]\nassert    find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 5) == []\nassert    find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 4) == [(1, 2), (1, 3), (3, 4), (3, 5)]\n\nprint('Find tuples which have all elements divisible by k from the given list of tuples')\nprint('The function should return a list of tuples.')\nprint('Example:')\nprint('find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 3) --> [(1, 2), (1, 3), (3, 4), (3, 5)]')\nprint('find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 5) --> []')\nprint('find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 4) --> [(1, 2), (1, 3), (3, 4), (3, 5)]')\nprint('')\nprint('Test your solution:')\nprint('find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 3)')\nprint('Expected result: [(1, 2), (1, 3), (3, 4), (3, 5)]')\nprint('Actual result: ', find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 3))\nprint('\\n')\nprint('find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 5)')\nprint('Expected result: []')\nprint('Actual result: ', find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 5))\nprint('\\n')\nprint('find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 4)')\nprint('Expected result: [(1, 2), (1, 3), (3, 4), (3, 5)]')\nprint('Actual result: ', find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 4))\nprint('')\n\ndef remove_duplicates(test_list):\n    '''\n    Write a function that removes duplicate tuples from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(1,3),(5,6),(7,8),(9,10)], 2) == [\n                (5,6),\n                (7,8)\n            ], '1st example does not pass'\nassert     find_tuples([(1,3),(5,6),(7,8),(9,10)], 3) == [\n                (1,3),\n                (7,8),\n                (9,10)\n            ], '2nd example does not pass'\nassert     find_tuples([(1,3),(5,6),(7,8),(9,10)], 6) == [\n                (5,6),\n                (7,8),\n                (9,10)\n            ], '3rd example does not pass'\nassert     find_tuples([(1,3),(5,6),(7,8),(9,10)], 5) == [\n                (5,6)\n            ], '4th example does not pass'\nassert     find_tuples([(1,3),(5,6),(7,8),(9,10)], 4) == [\n                (1,3),\n                (7,8)\n            ], '5th example does not pass'\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not find_tuples([(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)], 9) == \n    [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)]:\n    print('True')\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(2,3),(5,8)], 2) == [(2,3),(5,8)]\nassert     find_tuples([(2,3),(5,8)], 4) == []\nassert     find_tuples([(2,3),(5,8),(1,2)], 2) == [(2,3),(1,2)]\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(2) == True\nassert     is_Diff(3) == True\nassert     is_Diff(10) == False\nassert     is_Diff(12) == True\nassert     is_Diff(110) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is a prime number or not.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Diff(11) == True, \"error 1\"\nassert     is_Diff(12) == False, \"error 2\"\nassert     is_Diff(123456789) == False, \"error 3\"\n\nprint(\"All the test cases have passed\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Diff(11) == True \nassert     is_Diff(21) == True \nassert     is_Diff(21) == False \nassert     is_Diff(0) == False\nassert     is_Diff(10) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Is_Diff: Correct result\")\nprint(is_Diff(12))\nprint(is_Diff(30))\nprint(is_Diff(3))\nprint(is_Diff(15))\nprint(is_Diff(19))\nprint(is_Diff(3.2))\nprint(is_Diff(\"nani\"))\nprint(is_Diff(\"anillak\"))\nprint(is_Diff(0))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_Divisible_by_11(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Diff(11) == False, 'is_Diff should return False for 11'\nassert     is_Diff(12) == True, 'is_Diff should return True for 12'\nassert     is_Diff(21) == True, 'is_Diff should return True for 21'\nassert     is_Diff(22) == True, 'is_Diff should return True for 22'\nassert     is_Diff(23) == True, 'is_Diff should return True for 23'\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_Diff(15) == False\nis_Diff(17) == True\nis_Diff(3) == True\nis_Diff(9) == False\nis_Diff(55) == True\nis_Diff(37) == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert word_len(\"\") == False\nassert word_len(\"a\") == False\nassert word_len(\"aaaaaa\") == True\nassert word_len(\"ab\") == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len(\"hello\") == True, 'Expected True, got False'\nassert     word_len(\"world\") == False, 'Expected False, got True'\nassert word_len(\"\") == False, 'Expected False, got True'"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len('hello') == False\nassert     word_len('a') == True\nassert     word_len('hello world') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     word_len('abcd') == False\nassert word_len('abce') == False\nassert word_len('abcde') == True\nassert word_len('abcdefg') == True\nassert word_len('abcdefgh') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     word_len('abc') == True\nassert     word_len('abc') == False\nassert     word_len('a') == True\nassert     word_len('aa') == True\nassert     word_len('aa') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nQuestion:\nGiven a positive integer n, return the nth root of n.\nAssume that our binary search works, meaning that your function returns the floor value,\nwhich means that if the answer is not an integer, then the answer will be rounded down,\nso a decimal will be returned instead of a binary.\n'''\ndef nth_root(n):\n    '''\n    Write a function to calculate the nth root of n.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 12\nassert     tetrahedral_number(4) == 24\nassert     tetrahedral_number(5) == 36\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (tetrahedral_number(1) == 4)\nassert     (tetrahedral_number(2) == 12)\nassert     (tetrahedral_number(3) == 20)\nassert     (tetrahedral_number(4) == 36)\nassert     (tetrahedral_number(5) == 132)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(1) == 6, \"tetrahedral_number 1st test failed\"\nassert     tetrahedral_number(2) == 28, \"tetrahedral_number 2nd test failed\"\nassert     tetrahedral_number(3) == 78, \"tetrahedral_number 3rd test failed\"\nassert     tetrahedral_number(4) == 144, \"tetrahedral_number 4th test failed\"\nassert     tetrahedral_number(5) == 330, \"tetrahedral_number 5th test failed\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 3\nassert     tetrahedral_number(2) == 5\nassert     tetrahedral_number(3) == 12\nassert     tetrahedral_number(4) == 15\nassert     tetrahedral_number(5) == 18\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert tetrahedral_number(1) == 1\nassert tetrahedral_number(2) == 2\nassert tetrahedral_number(3) == 4\nassert tetrahedral_number(4) == 7\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef volume_cone(r1,r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_sphere(2)==4\nassert     volume_sphere(3)==12\nassert     volume_sphere(4)==56\nassert     volume_sphere(0)==0\nassert     volume_sphere(-1)==0\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nvolume_sphere(1) == 4.188405797101413\nassert volume_sphere(2) == 58.65471885483383\nassert volume_sphere(3) == 118.50833281609195\nassert volume_sphere(4) == 150.39838953526972\nassert volume_sphere(5) == 171.14680473666992\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(volume_sphere(5))\n\ndef area_of_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_sphere(1) == sphere_volume(1)\nassert volume_sphere(2) == sphere_volume(2)\nassert volume_sphere(3) == sphere_volume(3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_sphere(4) == math.pi * 4**3 / 3\n\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_sphere(1) == math.pi*4/3, \"Wrong volume for 1\"\nassert     volume_sphere(0) == math.pi, \"Wrong volume for 0\"\nassert     volume_sphere(1.2) == 2*math.pi*1.2**3/3, \"Wrong volume for 1.2\"\nassert     volume_sphere(2.4) == 4*math.pi*(2.4**3)/3, \"Wrong volume for 2.4\"\nassert     volume_sphere(-1) == math.pi, \"Wrong volume for -1\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_sphere(1) == math.pi * 4\nassert     volume_sphere(2) == math.pi * (4 ** 2)\nassert     volume_sphere(5) == math.pi * (4 ** 3)\nassert     volume_sphere(10) == math.pi * (4 ** 4)\nassert     volume_sphere(20) == math.pi * (4 ** 5)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char('aabbc') == 'abc'\nassert     get_Char('kumar') == 'u'\nassert get_Char('annu') == ''\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"c\") == 65\nassert     get_Char(\"abc\") == 233\nassert     get_Char(\"ABC\") == 119\nassert     get_Char(\"aBc\") == 119\nassert     get_Char(\"ABc\") == 119\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char(\"abcd\") ==     8\nassert     get_Char(\"A\") ==     65\nassert     get_Char(\"z\") ==     122\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char('abc') == 'a', \"Test case 1 Failed\"\nassert     get_Char('abc') == 'a', \"Test case 2 Failed\"\nassert     get_Char('abc') == 'a', \"Test case 3 Failed\"\nassert     get_Char('abc') == 'a', \"Test case 4 Failed\"\nassert     get_Char('abc') == 'a', \"Test case 5 Failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char(\"c\") == '1'\nassert get_Char(\"a\") == '97'\nassert get_Char(\"b\") == '98'\nassert get_Char(\"1\") == '10'\nassert get_Char(\"2\") == '11'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char('a') == 'a', 'get_Char : Passed'\nassert     get_Char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char('') == 0\nassert     get_Char('a') == 1\nassert     get_Char('aa') == 3\nassert     get_Char('aaa') == 7\nassert     get_Char('aaaa') == 8\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char('xyz')==56\nassert     get_Char('z')==26\nassert     get_Char('q')==81\nassert     get_Char('a')==65\nassert     get_Char('!')==32\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char('abc') == 13, 'Your output does not match expected output'\nassert     get_Char('abc') == 26, 'Your output does not match expected output'\nassert     get_Char('r') == 27, 'Your output does not match expected output'\nassert     get_Char('xyz') == 19, 'Your output does not match expected output'\nassert     get_Char('xyz') == 26, 'Your output does not match expected output'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsequence(0) == 1\nsequence(1) == 1\nsequence(2) == 2\nsequence(3) == 3\nsequence(4) == 5\nsequence(5) == 8\nsequence(6) == 13\nsequence(7) == 21\nsequence(8) == 34\nsequence(9) == 55\nsequence(10) == 89\nsequence(11) == 144\nsequence(12) == 233\nsequence(13) == 377\nsequence(14) == 610\nsequence(15) == 987\nsequence(16) == 1597\nsequence(17) == 2584\nsequence(18) == 4181\nsequence(19) == 6765\nsequence(20) == 10946\nsequence(21) == 17711\nsequence(22) == 28657\nsequence(23) == 46368\nsequence(24) == 75025\nsequence(25) == 121393\nsequence(26) == 196418\nsequence(27) == 317811\nsequence(28) == 514229\nsequence(29) == 832040\nsequence(30) == 1346269\nsequence(31) == 2674438\nsequence(32) == 4928571\nsequence(33) == 832040\nsequence(34) == 13187467\nsequence(35) == 26121429\nsequence(36) == 433494437\nsequence(37) == 701408733\nsequence(38) == 1134903170\nsequence(39) == 1836311903\nsequence(40) == 352457869\nsequence(41) == 5702827555\nsequence(42) == 922746543\nsequence(43) == 1482505000\nsequence(44) == 2882244761\nsequence(45) == 499431013\nsequence(46) == 832040\nsequence(47) == 1359795655\nsequence(48) == 2509988282\nsequence(49) == 4374244465\nsequence(50) == 75025\nsequence(51) == 122032935\nsequence(52) == 1806974638\nsequence(53) == 352457869\nsequence(54) == 5323037615\nsequence(55) == 7726785986\nsequence(56) == 1134903170\nsequence(57) == 26121429\nsequence(58) == 433494437\nsequence(59) == 701408733\nsequence(60) == 1266657\nsequence(61) == 26121429\nsequence(62) == 5323037615\nsequence(63) == 8461537\nsequence(64) == 1307674368\nsequence(65) == 274877906944\nsequence(66) == 549755813888\nsequence(67) == 832040\nsequence(68) == 1307674368\nsequence(69) == 274877906944\nsequence(70) == 549755813888\nsequence(71) == 832040\nsequence(72) == 1307674368\nsequence(73) == 274877906944\nsequence(74) == 549755813888\nsequence(75) == 832040\nsequence(76) == 1307674368\nsequence(77) == 26121429\nsequence(78) == 433494437\nsequence(79) == 701408733\nsequence(80) == 1266657\nsequence(81) == 2584\nsequence(82) == 4181\nsequence(83) == 6765\nsequence(84) == 10946\nsequence(85) == 17711\nsequence(86) == 28657\nsequence(87) == 46368\nsequence(88) == 75025\nsequence(89) == 121393\nsequence(90) == 196418\nsequence(91) == 317811\nsequence(92) == 514229\nsequence(93) == 832040\nsequence(94) == 1346269\nsequence(95) == 2674438\nsequence(96) == 4928571\nsequence(97) == 832040\nsequence(98) == 13187467\nsequence(99) == 26121429\nsequence(100) == 433494437\nsequence(101) == 701408733\nsequence(102) == 1134903170\nsequence(103) == 1806974638\nsequence(104) == 352457869\nsequence(105) == 5702827555\nsequence(106) == 922746543\nsequence(107) == 1482505000\nsequence(108) == 2882244761\nsequence(109) == 499431013\nsequence(110) == 832040\nsequence(111) == 1359795655\nsequence(112) == 2509988282\nsequence(113) == 4374244465\nsequence(114) == 75025\nsequence(115) == 122032935\nsequence(116) == 1806974638\nsequence(117) == 352457869\nsequence(118) == 5323037615\nsequence(119) == 7726785986\nsequence(120) == 1134903170\nsequence(121) == 26121429\nsequence(122) == 433494437\nsequence(123) == 701408733\nsequence(124) == 1266657\nsequence(125) == 26121429\nsequence(126) == 5323037615\nsequence(127) == 8461537\nsequence(128) == 1307674368\nsequence(129) == 274877906944\nsequence(130) == 549755813888\nsequence(131) == 832040\nsequence(132) == 1307674368\nsequence(133) == 274877906944\nsequence(134) == 549755813888\nsequence(135) == 832040\nsequence(136) == 1307674368\nsequence(137) == 274877906944\nsequence(138) == 549755813888\nsequence(139) == 832040\nsequence(140) == 1307674368\nsequence(141) == 26121429\nsequence(142) == 433494437\nsequence(143) == 701408733\nsequence(144) == 1266657\nsequence(145) == 2584\nsequence(146) == 4181\nsequence(147) == 6765\nsequence(148) == 10946\nsequence(149) == 17711\nsequence(150) == 28657\nsequence(151) == 46368\nsequence(152) == 75025\nsequence(153) == 121393\nsequence(154) == 196418\nsequence(155) == 317811\nsequence(156) == 514229\nsequence(157) == 832040\nsequence(158) == 1346269\nsequence(159) == 2674438\nsequence(160) == 4928571\nsequence(161) == 832040\nsequence(162) == 13187467\nsequence(163) == 26121429\nsequence(164) == 433494437\nsequence(165) == 701408733\nsequence(166) == 1134903170\nsequence(167) == 1806974638\nsequence(168) == 352457869\nsequence(169) == 5702827555\nsequence(170) == 922746543\nsequence(171) == 1482505000\nsequence(172) == 2882244761\nsequence(173) == 499431013\nsequence(174) == 832040\nsequence(175) == 1359795655\nsequence(176) == 2509988282\nsequence(177) == 4374244465\nsequence(178) == 75025\nsequence(179) == 122032935\nsequence(180) == 1806974638\nsequence(181) == 352457869\nsequence(182) == 5323037615\nsequence(183) == 7726785986\nsequence(184) == 1134903170\nsequence(185) == 26121429\nsequence(186) == 433494437\nsequence(187) == 701408733\nsequence(188) == 1266657\nsequence(189) == 26121429\nsequence(190) == 5323037615\nsequence(191) == 8461537\nsequence(192) == 1307674368\nsequence(193) == 274877906944\nsequence(194) == 549755813888\nsequence(195) == 832040\nsequence(196) == 1307674368\nsequence(197) == 274877906944\nsequence(198) == 549755813888\nsequence(199) == 832040\nsequence(200) == 1307674368\nsequence(201) == 26121429\nsequence(202) == 433494437\nsequence(203) == 701408733\nsequence(204) == 1266657\nsequence(205) == 2584\nsequence(206) == 4181\nsequence(207) == 6765\nsequence(208) == 10946\nsequence(209) == 17711\nsequenc"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert      sequence(1) == 0\nassert      sequence(2) == 1\nassert      sequence(3) == 1\nassert      sequence(4) == 2\nassert      sequence(5) == 3\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\ndef sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # define a recursive function with two parameters\n    def fact(num):\n        if num == 0:\n            return 1\n        return num * fact(num - 1)\n    # this is a recursive function to find the newman conway sequence\n    return fact(n)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequence(1) == 1, 'Sequence should start with 1'\nassert     sequence(2) == 3, 'Sequence should be 3'\nassert     sequence(3) == 5, 'Sequence should be 5'\nassert     sequence(4) == 8, 'Sequence should be 8'\nassert     sequence(5) == 13, 'Sequence should be 13'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sequence(0) == 1\nassert     sequence(1) == 1\nassert     sequence(2) == 3\nassert     sequence(3) == 7\nassert     sequence(4) == 13\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sequence(0) == 0, \"0th number in the newman conway sequence should be 0\"\nassert     sequence(1) == 1, \"1st number in the newman conway sequence should be 1\"\nassert     sequence(2) == 3, \"2nd number in the newman conway sequence should be 3\"\nassert     sequence(3) == 4, \"3rd number in the newman conway sequence should be 4\"\nassert     sequence(4) == 5, \"4th number in the newman conway sequence should be 5\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(sequence(0))\nprint(sequence(1))\nprint(sequence(2))\nprint(sequence(3))\nprint(sequence(4))\nprint(sequence(5))\nprint(sequence(6))\nprint(sequence(7))\nprint(sequence(8))\nprint(sequence(9))\nprint(sequence(10))\nprint(sequence(11))\nprint(sequence(12))\nprint(sequence(13))\nprint(sequence(14))\nprint(sequence(15))\nprint(sequence(16))\nprint(sequence(17))\nprint(sequence(18))\nprint(sequence(19))\nprint(sequence(20))\nprint(sequence(21))\nprint(sequence(22))\nprint(sequence(23))\nprint(sequence(24))\nprint(sequence(25))\nprint(sequence(26))\nprint(sequence(27))\nprint(sequence(28))\nprint(sequence(29))\nprint(sequence(30))\nprint(sequence(31))\nprint(sequence(32))\nprint(sequence(33))\nprint(sequence(34))\nprint(sequence(35))\nprint(sequence(36))\nprint(sequence(37))\nprint(sequence(38))\nprint(sequence(39))\nprint(sequence(40))\nprint(sequence(41))\nprint(sequence(42))\nprint(sequence(43))\nprint(sequence(44))\nprint(sequence(45))\nprint(sequence(46))\nprint(sequence(47))\nprint(sequence(48))\nprint(sequence(49))\nprint(sequence(50))\nprint(sequence(51))\nprint(sequence(52))\nprint(sequence(53))\nprint(sequence(54))\nprint(sequence(55))\nprint(sequence(56))\nprint(sequence(57))\nprint(sequence(58))\nprint(sequence(59))\nprint(sequence(60))\nprint(sequence(61))\nprint(sequence(62))\nprint(sequence(63))\nprint(sequence(64))\nprint(sequence(65))\nprint(sequence(66))\nprint(sequence(67))\nprint(sequence(68))\nprint(sequence(69))\nprint(sequence(70))\nprint(sequence(71))\nprint(sequence(72))\nprint(sequence(73))\nprint(sequence(74))\nprint(sequence(75))\nprint(sequence(76))\nprint(sequence(77))\nprint(sequence(78))\nprint(sequence(79))\nprint(sequence(80))\nprint(sequence(81))\nprint(sequence(82))\nprint(sequence(83))\nprint(sequence(84))\nprint(sequence(85))\nprint(sequence(86))\nprint(sequence(87))\nprint(sequence(88))\nprint(sequence(89))\nprint(sequence(90))\nprint(sequence(91))\nprint(sequence(92))\nprint(sequence(93))\nprint(sequence(94))\nprint(sequence(95))\nprint(sequence(96))\nprint(sequence(97))\nprint(sequence(98))\nprint(sequence(99))\nprint(sequence(100))\nprint(sequence(101))\nprint(sequence(102))\nprint(sequence(103))\nprint(sequence(104))\nprint(sequence(105))\nprint(sequence(106))\nprint(sequence(107))\nprint(sequence(108))\nprint(sequence(109))\nprint(sequence(110))\nprint(sequence(111))\nprint(sequence(112))\nprint(sequence(113))\nprint(sequence(114))\nprint(sequence(115))\nprint(sequence(116))\nprint(sequence(117))\nprint(sequence(118))\nprint(sequence(119))\nprint(sequence(120))\nprint(sequence(121))\nprint(sequence(122))\nprint(sequence(123))\nprint(sequence(124))\nprint(sequence(125))\nprint(sequence(126))\nprint(sequence(127))\nprint(sequence(128))\nprint(sequence(129))\nprint(sequence(130))\nprint(sequence(131))\nprint(sequence(132))\nprint(sequence(133))\nprint(sequence(134))\nprint(sequence(135))\nprint(sequence(136))\nprint(sequence(137))\nprint(sequence(138))\nprint(sequence(139))\nprint(sequence(140))\nprint(sequence(141))\nprint(sequence(142))\nprint(sequence(143))\nprint(sequence(144))\nprint(sequence(145))\nprint(sequence(146))\nprint(sequence(147))\nprint(sequence(148))\nprint(sequence(149))\nprint(sequence(150))\nprint(sequence(151))\nprint(sequence(152))\nprint(sequence(153))\nprint(sequence(154))\nprint(sequence(155))\nprint(sequence(156))\nprint(sequence(157))\nprint(sequence(158))\nprint(sequence(159))\nprint(sequence(160))\nprint(sequence(161))\nprint(sequence(162))\nprint(sequence(163))\nprint(sequence(164))\nprint(sequence(165))\nprint(sequence(166))\nprint(sequence(167))\nprint(sequence(168))\nprint(sequence(169))\nprint(sequence(170))\nprint(sequence(171))\nprint(sequence(172))\nprint(sequence(173))\nprint(sequence(174))\nprint(sequence(175))\nprint(sequence(176))\nprint(sequence(177))\nprint(sequence(178))\nprint(sequence(179))\nprint(sequence(180))\nprint(sequence(181))\nprint(sequence(182))\nprint(sequence(183))\nprint(sequence(184))\nprint(sequence(185))\nprint(sequence(186))\nprint(sequence(187))\nprint(sequence(188))\nprint(sequence(189))\nprint(sequence(190))\nprint(sequence(191))\nprint(sequence(192))\nprint(sequence(193))\nprint(sequence(194))\nprint(sequence(195))\nprint(sequence(196))\nprint(sequence(197))\nprint(sequence(198))\nprint(sequence(199))\nprint(sequence(200))\nprint(sequence(201))\nprint(sequence(202))\nprint(sequence(203))\nprint(sequence(204))\nprint(sequence(205))\nprint(sequence(206))\nprint(sequence(207))\nprint(sequence(208))\nprint(sequence(209))\nprint(sequence(210))\nprint(sequence(211))\nprint(sequence(212))\nprint(sequence(213))\nprint(sequence(214))\nprint(sequence(215))\nprint(sequence(216))\nprint(sequence(217))\nprint(sequence(218))\nprint(sequence(219))\nprint(sequence(220))\nprint(sequence(221))\nprint(sequence(222))\nprint(sequence(223))\nprint(sequence(224))\nprint(sequence(225))\nprint(sequence(226))\nprint(sequence(227))\nprint(sequence(228))\nprint(sequence(229))\nprint(sequence(230))\nprint(sequence(231))\nprint(sequence(232))\nprint(sequence(233))\nprint(sequence(234))\nprint(sequence(235))\nprint(sequence(236))\nprint(sequence(237))\nprint(sequence(238))\nprint(sequence(239))\nprint(sequence(240))\nprint(sequence(241))\nprint(sequence(242))\nprint(sequence(243))\nprint(sequence(244))\nprint(sequence(245))\nprint(sequence(246))\nprint(sequence(247))\nprint(sequence(248))\nprint(sequence(249))\nprint(sequence(250))\nprint(sequence(251))\nprint(sequence(252))\nprint(sequence(253))\nprint(sequence(254))\nprint(sequence(255))\nprint(sequence(256))\nprint(sequence(257))\nprint(sequence(258))\nprint(sequence(259))\nprint(sequence(260))\nprint(sequence(261))\nprint(sequence(262))\nprint(sequence(263))\nprint(sequence(264))\nprint(sequence(265))\nprint(sequence(266))\nprint(sequence(267))\nprint(sequence(268))\nprint(sequence(269))\nprint(sequence(270))\nprint(sequence(271))\nprint(sequence(272))\nprint(sequence(273))\nprint(sequence(274))\nprint(sequence(275))\nprint(sequence(276))\nprint(sequence(277))\nprint(sequence(278))\nprint(sequence(279))\nprint(sequence(280))\nprint(sequence(281))\nprint(sequence(282))\nprint(sequence(283))\nprint(sequence(284))\nprint(sequence"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sequence(0) == 0,    \"Wrong answer for n=0\"\nassert     sequence(1) == 1,    \"Wrong answer for n=1\"\nassert     sequence(2) == 3,    \"Wrong answer for n=2\"\nassert     sequence(3) == 5,    \"Wrong answer for n=3\"\nassert     sequence(4) == 8,    \"Wrong answer for n=4\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(2) == 56\nassert     surfacearea_sphere(0.5) == 78.5\nassert     surfacearea_sphere(1) == 28.274333882308138\n\ndef volume_cube(l):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(5) == 78.5, 'check the correctness of surfacearea_sphere'\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(1) == 3.14159265358979\nassert     surfacearea_sphere(2) == 16.8936170212766\nassert     surfacearea_sphere(3) == 28.27433388230859\nassert     surfacearea_sphere(4) == 32.5714285714286\nassert     surfacearea_sphere(5) == 36.28318530717959\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(1.0) == 20.850103803898656\nassert surfacearea_sphere(2.0) == 50.40744593325937\nassert surfacearea_sphere(3.0) == 70.89892402891053\nassert surfacearea_sphere(4.0) == 100.89455934440806\nassert surfacearea_sphere(5.0) == 114.038374573746\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert math.isclose(surfacearea_sphere(1), 4.18, abs_tol=0.01), \\\n    \"The surface area of a sphere with radius 1 should be 4.18\"\n\nassert math.isclose(surfacearea_sphere(3), 50.08, abs_tol=0.01), \\\n    \"The surface area of a sphere with radius 3 should be 50.08\""
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(1) == 32.59118033988743\nassert     surfacearea_sphere(2) == 56.0\nassert     surfacearea_sphere(3) == 104.8\nassert     surfacearea_sphere(4) == 364.0\n"
    }
]