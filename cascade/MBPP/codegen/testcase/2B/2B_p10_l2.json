[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements((1, 2, 3, 4), (2, 2, 3, 4)) == ((1, 2), (3, 4))\nassert     similar_elements((1, 2, 3, 4), (2, 3, 4)) == ((1, 2, 3), (4,))\nassert     similar_elements((1, 2, 3, 4), (2, 3, 4, 5)) == ((1, 2, 3, 4), ())\nassert     similar_elements((1, 2, 3, 4), (2, 3, 4, 5, 6)) == ((1, 2, 3, 4), ())\nassert     similar_elements((1, 2, 3, 4), (5,)) == ((1, 2, 3, 4), ())\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements(test_tup1, test_tup2) == set(test_tup1) | set(test_tup2)\nassert     similar_elements(test_tup1, test_tup3) == set(test_tup1) | set(test_tup3)\nassert     similar_elements(test_tup4, test_tup5) == set(test_tup4) | set(test_tup5)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     ( similar_elements((1, 2, 3, 4), (1, 2, 3, 4, 5)) ) ==     ( (1, 2, 3), (4, 5) )\nassert     ( similar_elements((1, 2, 3, 4), (1, 2, 3, 4)) ) ==     ( (), () )\nassert     ( similar_elements((), (1, 2, 3, 4)) ) ==     ( (), () )\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nProblem 12\nWrite a python function to find the character with maximum frequency of a string.\n\nInput Format:\nThe first line of input contains a string S.\n\nOutput Format:\nReturn a character whose frequency of occurrence is maximum in the string S.\n\nConstraints:\n1 <= N <= 100\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (similar_elements(('a', 'b', 'c'), ('b', 'a', 'c')) == ['a', 'c']), 'Should be the same elements'\nassert     (similar_elements(('b', 'c', 'a'), ('b', 'a', 'c')) == ['c', 'a']), 'Should be the same elements'\nassert     (similar_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ['d', 'e', 'c']), 'Should be the same elements'\nassert     (similar_elements(('d', 'e', 'f'), ('d', 'e', 'f')) == ['d', 'e', 'f']), 'Should be the same elements'\nassert     (similar_elements(('a', 'b', 'c'), ('c', 'b', 'a')) == ['a', 'c']), 'Should be the same elements'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nsimilar_elements((1, 2, 3, 4), (2, 3, 4, 5)) == [(2, 3), (4, 5)]\nsimilar_elements((1, 2, 3, 4), (3, 4, 5, 6)) == [(3, 4), (4, 5)]\nsimilar_elements((1, 2, 3, 4, 5, 6), (3, 4, 5, 6)) == []\nsimilar_elements((1, 2, 3, 4), (5, 6, 7, 8, 9)) == [(5, 6), (4, 9)]"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements([1, 2, 3, 4, 5], [6, 2, 4]) == (2, 4)\nassert     similar_elements([1, 2, 3, 4, 5], [6, 2, 4, 6, 2]) == (2, 4)\nassert     similar_elements([1, 2, 3, 4, 5], [1, 2, 5]) == (2, 5)\nassert     similar_elements([1, 2, 3, 4, 5], [1, 2, 5, 2, 3]) == (2, 2)\n\nprint(\"You're all set!\""
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     similar_elements(test_tup1, test_tup2) == [4,5,6]\nassert     similar_elements(test_tup1, test_tup3) == []\nassert     similar_elements(test_tup1, test_tup4) == []\nassert     similar_elements(test_tup2, test_tup1) == []\nassert     similar_elements(test_tup2, test_tup3) == []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsimilar_elements((\"apple\", \"banana\", \"cherry\"), (\"google\", \"microsoft\", \"apple\")) == (\"apple\",)\nsimilar_elements((\"amazon\", \"apple\", \"microsoft\", \"google\"), (\"google\", \"microsoft\")) == (\"apple\",)\nsimilar_elements((\"amazon\", \"apple\", \"microsoft\", \"google\"), (\"google\", \"amazon\")) == ()\n\nassert \nsimilar_elements((\"apple\", \"banana\", \"cherry\"), (\"google\", \"microsoft\", \"apple\", \"amazon\", \"amazon\", \"microsoft\", \"google\")) == (\"apple\",)\nsimilar_elements((\"amazon\", \"apple\", \"microsoft\", \"google\"), (\"google\", \"amazon\", \"amazon\", \"microsoft\", \"google\", \"amazon\", \"amazon\")) == (\"apple\",)\nsimilar_elements((\"amazon\", \"apple\", \"microsoft\", \"google\"), (\"amazon\", \"amazon\", \"microsoft\", \"amazon\", \"google\", \"amazon\", \"amazon\")) == ()\n\nassert \nsimilar_elements((\"apple\", \"banana\", \"cherry\", \"cherry\", \"cherry\", \"cherry\", \"cherry\"), (\"google\", \"microsoft\", \"apple\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\")) == (\"apple\",)\nsimilar_elements((\"amazon\", \"apple\", \"microsoft\", \"google\", \"google\", \"google\", \"google\", \"google\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\"), (\"google\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\")) == (\"apple\",)\nsimilar_elements((\"amazon\", \"apple\", \"microsoft\", \"google\", \"google\", \"google\", \"google\", \"google\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\"), (\"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\", \"amazon\")) == ()\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert similar_elements([1, 2, 3, 4, 5], [1, 2, 4, 5, 6]) == (4, 5)\nassert similar_elements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == (6, 7)\nassert similar_elements([1, 2, 3, 4, 5], [1, 2, 4, 5, 6]) == (1, 2, 4, 5)"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_not_prime(2) == False, \"Not prime is 2\"\nassert     is_not_prime(3) == True, \"Not prime is 3\"\nassert     is_not_prime(4) == False, \"Not prime is 4\"\nassert     is_not_prime(5) == True, \"Not prime is 5\"\nassert     is_not_prime(6) == False, \"Not prime is 6\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_not_prime(5) == True, \\\n        \"is_not_prime should return True if num is not prime.\"\nassert is_not_prime(12) == False, \\\n        \"is_not_prime should return False if num is prime.\"\n\n\ndef print_alphabet(start, end):\n    '''\n    Prints all the alphabet in a range\n    '''\n    for i in range(start, end):\n        print(chr(i), end=\" \")\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_not_prime(5) == False, '5 is not prime'\nassert     is_not_prime(7) == False, '7 is prime'\nassert     is_not_prime(3) == True, '3 is not prime'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_not_prime(2) == False, \"is_not_prime is wrong\"\nassert     is_not_prime(4) == True, \"is_not_prime is wrong\"\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(0) == True\nassert     is_not_prime(1) == False\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_not_prime(17) == True, \" is_not_prime function is wrong\"\nassert     is_not_prime(2) == True, \" is_not_prime function is wrong\"\nassert     is_not_prime(3) == True, \" is_not_prime function is wrong\"\nassert     is_not_prime(4) == False, \" is_not_prime function is wrong\"\nassert     is_not_prime(5) == False, \" is_not_prime function is wrong\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_queue_largest([2,3,5,7,11], 3) == [11,7,5]\nassert     heap_queue_largest([2,3,5,7,11], 1) == [11]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_queue_largest([-1, 2, 3, 4, 5], 3) == [-1, 2, 3]\nassert     heap_queue_largest([1, 2, 3, 4, 5, 6], 5) == [6, 5, 4, 3, 2]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([1,2,4,5,7,3,4], 3) == [7, 5, 4], '1st'\nassert     heap_queue_largest([1,2,4,5,7,3,4], 1) == [4], '2nd'\nassert     heap_queue_largest([1,2,4,5,7,3,4], 5) == [5, 7, 4, 3, 2], '3rd'\nassert     heap_queue_largest([1,2,4,5,7,3,4], 10) == [7, 5, 4, 3, 2], '4th'\nassert     heap_queue_largest([1,2,4,5,7,3,4], -1) == [], '5th'\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    import heapq as hq\n    h = []\n    for i in range(n):\n        h.append((nums[i],i))\n    hq.heapify(h)\n    for i in range(n,len(nums)):\n        if nums[i] > h[0][0]:\n            hq.heapreplace(h,(nums[i],i))\n    return [hq.heappop(h)[1] for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([1,2,3,4,5,6,7],4) == [5,6,7,4]\nassert     heap_queue_largest([3,2,1],2) == [3,2]\nassert     heap_queue_largest([1,2,3,4,5,6,7],2) == [7,6]\n\ndef heap_queue_largest2(nums,n):\n    '''\n    Implement your version of heap_queue_largest with O(n) time.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_queue_largest([-2,-1,5,3,7,11],3) == [-2,-1,5,7,11]\nassert heap_queue_largest([-5,-3,5,4,7],5) == [-5,-3,7,4,5]\nassert heap_queue_largest([],1) == []\nassert heap_queue_largest([-4,-3,-2,-1,-5],10) == [-5,-4,-3,-2,-1]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef heap_queue_largest_iterative(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # maintain a heap of size n\n    # use max_heap to build the heap\n    # for each element in nums, pop the max_heap and put the new element in the max_heap\n    # return the heap in descending order\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    (is_Power_Of_Two(4)==True), \"For 4, True should be returned\"\n    (is_Power_Of_Two(3)==False), \"For 3, False should be returned\"\n    (is_Power_Of_Two(12)==True), \"For 12, True should be returned\"\n    (is_Power_Of_Two(10)==False), \"For 10, False should be returned\"\n\nprint (\"Is the 2-bit number a power of 2? (True/False):\",is_Power_Of_Two(2))\n\nprint (\"Is the 8-bit number a power of 2? (True/False):\",is_Power_Of_Two(8))\n\nprint (\"Is the 16-bit number a power of 2? (True/False):\",is_Power_Of_Two(16))\n\nprint (\"Is the 32-bit number a power of 2? (True/False):\",is_Power_Of_Two(32))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (is_Power_Of_Two(3) == True)\nassert     (is_Power_Of_Two(5) == True)\nassert     (is_Power_Of_Two(8) == True)\nassert     (is_Power_Of_Two(9) == True)\nassert     (is_Power_Of_Two(16) == True)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_Power_Of_Two(9) == True\nassert is_Power_Of_Two(10) == True\nassert is_Power_Of_Two(11) == False\nassert is_Power_Of_Two(4) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(2) == True, \"false\"\nassert     is_Power_Of_Two(3) == False, \"false\"\nassert     is_Power_Of_Two(4) == True, \"false\"\nassert     is_Power_Of_Two(5) == True, \"true\"\nassert     is_Power_Of_Two(6) == True, \"true\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (is_Power_Of_Two(15) == True)\nassert     (is_Power_Of_Two(30) == False)\nassert     (is_Power_Of_Two(13) == False)\nassert     (is_Power_Of_Two(0) == False)\nassert     (is_Power_Of_Two(1) == True)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(0b00011010) == True, 'is_Power_Of_Two(0b00011010) failed'\nassert     is_Power_Of_Two(0b00101101) == False, 'is_Power_Of_Two(0b00101101) failed'\nassert     is_Power_Of_Two(0b11) == False, 'is_Power_Of_Two(0b11) failed'\nassert     is_Power_Of_Two(0b101) == False, 'is_Power_Of_Two(0b101) failed'\nassert     is_Power_Of_Two(0b100) == True, 'is_Power_Of_Two(0b100) failed'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two(4) == False, \"is_Power_Of_Two should return False for 4\"\nassert     is_Power_Of_Two(5) == True, \"is_Power_Of_Two should return True for 5\"\nassert     is_Power_Of_Two(6) == True, \"is_Power_Of_Two should return True for 6\"\nassert     is_Power_Of_Two(8) == True, \"is_Power_Of_Two should return True for 8\"\nassert     is_Power_Of_Two(9) == True, \"is_Power_Of_Two should return True for 9\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(32) == True, '32 is not a power of two'\nassert is_Power_Of_Two(4) == False, '4 is not a power of two'\nassert is_Power_Of_Two(5) == False, '5 is not a power of two'\nassert is_Power_Of_Two(10) == True, '10 is a power of two'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_Power_Of_Two(12), '12 is not a power of 2'\nassert not is_Power_Of_Two(9), '9 is a power of 2'\nassert is_Power_Of_Two(3), '3 is a power of 2'\nassert not is_Power_Of_Two(1), '1 is not a power of 2'\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long(\"I'm not sure\") == []\nassert    find_char_long(\"I'm not sure about that\") == [\"I'm not sure about that\"]\nassert    find_char_long(\"This is so much fun.\") == [\"This\", \"is\", \"much\", \"fun.\"]\nassert    find_char_long(\"But some like other things in so much so much so much.\") == []\n\ndef find_word_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_number_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long('qwerttyuiopasdfghjklzxcvbnm_') == ['_']\nassert     find_char_long('python') == ['python']\nassert     find_char_long('python_is_best_programmer') == ['_is_', '_programmer']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long(\"i like programming\") == \"programming\", \"Expected 'programming'\"\nassert     find_char_long(\"javascript is cool\") == \"cool\", \"Expected 'cool'\"\nassert     find_char_long(\"python is the best\") == \"\", \"Expected 'programming'\"\nassert     find_char_long(\"\") == \"\", \"Expected 'programming'\"\nassert     find_char_long(\"if you want to build a useless software, please consider it!\") == \"useless\", \"Expected 'useless'\"\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long('hi there') == []\nassert     find_char_long('hi     there') == []\nassert     find_char_long('hi there   ') == []\nassert     find_char_long('hi there  ,that') == ['that']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long('orange is a very') == ['orange']\nassert     find_char_long('orange is a very orange') == ['orange', 'orange']\nassert     find_char_long('orange is a very orange orange') == ['orange', 'orange']\nassert     find_char_long('orange') == ['orange']\nassert     find_char_long('orange orange orange orange') == ['orange', 'orange', 'orange']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_char_long('qwertyuiopasdfghjklzxcvbnm123456789qwertyuiopasdfghjklzxcvbnm') ==     ['qwertyuiopasdfghjklzxcvbnm']\nassert     find_char_long('asdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm123456789qwertyuiopasdfghjklzxcvbnm') ==     ['qwertyuiopasdfghjklzxcvbnm']\nassert     find_char_long('abcdefghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm') ==     ['qwertyuiopasdfghjklzxcvbnm']\nassert     find_char_long('abcqwertyuiopasdfghjklzxcvbnm123456789qwertyuiopasdfghjklzxcvbnm') ==     ['qwertyuiopasdfghjklzxcvbnm']\nassert     find_char_long('qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm123456789qwertyuiopasdfghjklzxcvbnm') ==     ['qwertyuiopasdfghjklzxcvbnm']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long(\"Fucking\") == False\nassert     find_char_long(\"Aaaaaa\") == True\nassert     find_char_long(\"Santana\") == True\nassert     find_char_long(\"Codewars\") == True\nassert     find_char_long(\"Codewars is awesome\") == True\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"All test cases are passed\")\n\nprint(\"########## testcase 1 ##########\")\nassert find_char_long(\"hTtP sTrinNg wOrLd\") == ['hello', 'world', 'trinity', 'word']\nprint(\"All test cases are passed\")\n\n\nprint(\"########## testcase 2 ##########\")\nassert find_char_long(\"Hi, my name is Hunter, and I am 29 years old.\") == ['Hunter','my', 'name', 'is', 'Hunter', 'and', 'I', 'am', '29', 'years', 'old']\nprint(\"All test cases are passed\")\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25]\nassert     square_nums([-2,0,2,4]) == [4,4,9,16]\nassert square_nums('') == []"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25], \"Wrong\"\nassert square_nums([0, -1, -3, -5]) == [0,1,9,25], \"Wrong\"\nassert square_nums([]) == [], \"Wrong\"\nassert square_nums([4, -2, -4]) == [16,1,9], \"Wrong\"\nassert square_nums([-2, 0, 8]) == [0, 4, 16], \"Wrong\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\n4. Write a function to return the index of a given element in the list.\n'''\ndef find_index(nums, num):\n    '''\n    Given a list and an element, return the index of that element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_nums([]) == [], \\\n        'Error: square_nums([]) should return empty list.'\nassert     square_nums([-3, -1, 0, 1, 3, 10]) == \\\n        [0, 1, 9, 16, 100, 1000], \\\n        'Error: square_nums([-3, -1, 0, 1, 3, 10]) should return [0, 1, 9, 16, 100, 1000].'\nassert     square_nums([]) == [], \\\n        'Error: square_nums([]) should return empty list.'\nassert     square_nums([-1, 0, 1, 2, 3, 4, 5]) == \\\n        [1, 4, 9, 16, 25, 36, 49], \\\n        'Error: square_nums([-1, 0, 1, 2, 3, 4, 5]) should return [1, 4, 9, 16, 25, 36, 49].'\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsquare_nums([-2, -1, 0, 2, 3]) == [-4, 0, 4, 4, 9]\n\ndef remove_pos(nums, pos):\n    '''\n    Write a function to remove element from the list at a particular position.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsquare_nums([-3, 0, 4, -5, -2]) == [-9, 0, 16, -25, -4]\nassert square_nums([]) == []\nassert square_nums([3]) == [9]\nassert square_nums([-1, -2, -3, -4, -5]) == [-1, 4, -9, 16, 25]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Rotations('aab') == 2, 'Should return 2'\nassert     find_Rotations('aab') == 1, 'Should return 1'\nassert     find_Rotations('aa') == 0, 'Should return 0'\nassert     find_Rotations('aa') == 0, 'Should return 0'\nassert     find_Rotations('') == 0, 'Should return 0'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Rotations(\"abcde\") == 0\nassert     find_Rotations(\"abc\") == 1\nassert     find_Rotations(\"abcdef\") == 1\nassert     find_Rotations(\"abcdefgh\") == 1\nassert     find_Rotations(\"abcdefghi\") == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Rotations(\"adg\") == 2\nassert     find_Rotations(\"abcd\") == 4\nassert     find_Rotations(\"ghi\") == -1\nassert     find_Rotations(\"abbb\") == 0\n\nprint(\"Functional Test Passed\")\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations('') == 0, \"Valid case\"\nassert     find_Rotations('a') == 1, \"a needs 1 rotation\"\nassert     find_Rotations('ab') == 2, \"ab needs 2 rotations\"\nassert     find_Rotations('a') == 0, \"Duplicate characters not allowed\"\nassert     find_Rotations('ab') == 2, \"Two characters same\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"giraffakahak\") == 1\nassert     find_Rotations(\"giraffakahak\") == 2\nassert     find_Rotations(\"yaymyay\") == 0\nassert     find_Rotations(\"a\") == 0\nassert     find_Rotations(\"\") == -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Rotations(\"abcd\") ==     0 \nassert     find_Rotations(\"abcde\") ==     1 \nassert     find_Rotations(\"abcdef\") ==     2 \nassert     find_Rotations(\"abcdecba\") == 3 \nassert     find_Rotations(\"abcabc\") ==     0 \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations(\"abc\") == 1 \nassert     find_Rotations(\"abcd\") == 0\nassert     find_Rotations(\"abcdab\") == 1\nassert     find_Rotations(\"abcdcba\") == 2\n\n\ndef is_Monotonic(a_list):\n    '''\n    Write a python function to check whether a given list is Monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations('ABD')==1\nassert     find_Rotations('BCA')==0\nassert     find_Rotations('CAD')==1\nassert     find_Rotations('DCBA')==1\nassert     find_Rotations('CDAB')==2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nThe given string, S, is a substring of some longer string, A.\n\nWe want to rotate, S to A. To do this, we can choose any valid rotation of S, and swap every letter in S with the corresponding letter in the other string. We want to do this in a way that minimizes the number of rotations. For example, if S = \"abcde\", then we can do this swap to get \"bacde\", which minimizes the number of rotations.\n\nLet's define f(S) = number of rotations required to make S equal to A.\n\nWhat is the minimum possible value of f(S)?\n'''"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_Occ('sdf','s') == 'dsf' # not in\nassert     remove_Occ('sdf', 'f') == 'dss' # in\n\n\ndef remove_all(s,ch):\n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\"remove_Occ\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_Occ(\"abcd\",'b') == 'abcd', \"test failed\"\nassert     remove_Occ(\"abcd\",'c') == 'ab', \"test failed\"\nassert     remove_Occ(\"abcd\",'a') == 'abcd', \"test failed\"\nassert     remove_Occ(\"abcd\",'d') == 'abcd', \"test failed\"\nassert     remove_Occ(\"abcd\",'e') == '', \"test failed\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ('A-B-C-D','B')== 'A-C-D'\nassert     remove_Occ('A-B-C-D','A')== 'A-C-D'\nassert     remove_Occ('A-B-C-D','E')== 'A-B-C-D'\nassert     remove_Occ('A-B-C-D','-')== 'A-B-C-D'\nassert     remove_Occ('A-B-C-D','D')== 'A-B-C-D'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ('abccc','c') == 'abcc'\nassert     remove_Occ('abccc','d') == 'abcc'\nassert     remove_Occ('abccc','c') == 'abcc'\nassert     remove_Occ('abccc','a') == 'abcc'\nassert     remove_Occ('abccc','z') == 'abcc'\nprint('\\nCorrectness of remove_Occ is : ',remove_Occ('abccc','c') == 'abcc')\nprint('Correctness of remove_Occ is : ',remove_Occ('abccc','d') == 'abcc')\nprint('Correctness of remove_Occ is : ',remove_Occ('abccc','c') == 'abcc')\nprint('Correctness of remove_Occ is : ',remove_Occ('abccc','a') == 'abcc')\nprint('Correctness of remove_Occ is : ',remove_Occ('abccc','z') == 'abcc')\nprint('\\n*********************************************')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_Occ('GeeksforGeeks', 'F') == 'Geeks'\nassert     remove_Occ('GeeksforGeeks', 'e') == 'Geeks'\nassert     remove_Occ('GeeksforGeeks', 'k') == 'GeeksforGeeks'\nassert     remove_Occ('GeeksforGeeks', 'K') == 'GeeksforGeeks'\n\n'''\nGiven a string s, return the string after swapping the first and last characters.\n'''"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_Occ('abc','a') == 'bc', 'Test case 1 Failed'\nassert     remove_Occ('abc','z') == 'ab', 'Test case 2 Failed'\nassert     remove_Occ('abca','a') == 'bca', 'Test case 3 Failed'\nassert     remove_Occ('abcabcabc','c') == 'abcabc', 'Test case 4 Failed'\nassert     remove_Occ('abcabcabc','d') == 'abcabc', 'Test case 5 Failed'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_Occ(\"abcd\",'a') == 'bd'\nassert     remove_Occ(\"abcd\",'z') == 'abcd'\nassert     remove_Occ(\"abcd\",\"c\") == \"abcd\"\nassert     remove_Occ(\"abcd\",\"a\") == \"abcde\"\nassert     remove_Occ(\"abcd\",\"z\") == \"abcd\"\nprint(\"TESTS: PASS\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ('abc', 'a') == 'b'\nassert     remove_Occ('abc', 'b') == 'bc'\nassert     remove_Occ('abc', 'c') == 'ab'\nassert     remove_Occ('abc', 'd') == 'bc'\nassert     remove_Occ('abc', 'z') == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([[1,3,5,7],[3,5,7,9],[4,6,7,8],[2,5,7,8]]) == [[1,2,3,4],[5,5,7,7],[6,7,8,8],[7,7,9,9]]\nassert     sort_matrix([[3,9,8,2],[5,6,7,4],[1,7,5,6],[4,2,9,8],[2,5,8,6]]) == [[2,2,3,3],[4,4,5,5],[6,6,7,7],[8,8,9,9],[5,6,7,8]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_matrix([[3,2,4,6],[3,1,4,5],[2,5,7,9]]) == [[2,1,4,5],[3,3,4,6],[3,2,5,7]]\nassert     sort_matrix([[9,4,5,8],[3,7,8,2],[6,7,1,4],[8,2,3,9]]) == [[8,8,7,7],[3,3,5,4],[9,4,6,2],[6,2,1,3]]\nassert     sort_matrix([[2,7,4,1],[5,6,3,8],[9,3,7,2]]) == [[2,2,3,3],[3,3,7,7],[4,4,5,6]]\nassert sort_matrix([[3,1,1,4],[1,2,3,2],[1,2,3,2]]) == [[1,1,2,2],[1,1,3,3]]\nassert sort_matrix([[1,2,3],[1,2,3]]) == [[1,1,2],[2,2,3]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[4,7,0,3],[2,5,8,1],[6,9,1,7]]) == [[4,7,0,3],[2,5,8,1],[6,9,1,7]]\nassert     sort_matrix([[4,7,0,3,9],[2,5,8,1,7]]) == [[4,7,0,3,9],[2,5,8,1,7]]\nassert     sort_matrix([[4,7,0,3],[2,5,8,1],[6,9,1,7],[1,7,9,0]]) == [[1,7,9,0],[2,5,8,1],[6,9,1,7],[4,7,0,3]]\nassert     sort_matrix([[7,1,0,3,4,1,1,1,2],[5,8,0,0,2,4,1,1,1],[1,1,6,2,3,0,1,0,2],[9,2,3,7,1,5,0,0,0]]) == [[1,1,1,1,1,1,1,2,9],[5,8,0,0,2,4,1,1,7],[7,1,0,3,4,1,1,1,6],[3,0,0,0,0,3,2,2,5]]\n\ndef sort_matrix_top_down(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef generate_matrix(n, m):\n    '''\n    Write a function to generate a random matrix of size n x m.\n    '''\n    pass\n\ndef find_negative_sum_submatrix(M, rows, cols):\n    '''\n    Write a function to find a negative sum submatrix in a given matrix.\n    '''\n    pass\n\ndef find_negative_sum_submatrix(M, rows, cols):\n    '''\n    Write a function to find a negative sum submatrix in a given matrix.\n    '''\n    pass\n\ndef generate_matrix(n, m):\n    '''\n    Write a function to generate a random matrix of size n x m.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_matrix([[1,1,4],[2,2,5],[4,4,4],[1,5,1],[3,1,1]]) == [[1,1,4],[1,5,1],[2,2,5],[3,1,1],[4,4,4]]\nassert sort_matrix([[1,1,4],[2,2,5],[4,4,4],[1,5,1],[3,1,1]]) == [[1,1,4],[1,5,1],[2,2,5],[3,1,1],[4,4,4]]\n\n'''\nInput:\n\n[[1,1,4],[2,2,5],[4,4,4],[1,5,1],[3,1,1]]\n\nOutput:\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([[1, 2, 3], \n                [4, 5, 6], \n                [7, 8, 9]]) == [[1, 2, 3], \n                [4, 5, 6], \n                [7, 8, 9]]\nassert     sort_matrix([[5, 1], \n                [10, 2], \n                [3, 4]]) == [[1, 2], \n                [3, 4], \n                [5, 1], \n                [10, 2]]\nassert     sort_matrix([[1, 1, 1, 1],\n                    [1, 1, 1, 1],\n                    [1, 1, 1, 1],\n                    [1, 1, 1, 1]]) == [[1, 1, 1, 1],\n                    [1, 1, 1, 1],\n                    [1, 1, 1, 1],\n                    [1, 1, 1, 1]]\n\ndef sort_matrix2(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_matrix([[1, 2, 3],\n                       [1, 2, 3],\n                       [1, 2, 3]]) == [[1, 2, 3],\n                                    [1, 2, 3],\n                                    [1, 2, 3]]\nassert     sort_matrix([[5, 9, -2],\n                       [6, -20, 13],\n                       [-4, -7, 10]]) == [[-4, -7, 10],\n                                        [-20, 6, 5],\n                                        [9, -2, -4]]\nassert     sort_matrix([[1, 4, 5, 5],\n                       [2, 4, 3, 3],\n                       [2, 3, 1, 1]]) == [[1, 2, 2, 3],\n                                        [1, 2, 3, 3],\n                                        [1, 4, 4, 5]]\nassert     sort_matrix([[3, 8, -1],\n                       [1, -1, 1],\n                       [4, 0, 1]]) == [[1, -1, 4],\n                                        [1, -1, 1],\n                                        [1, 8, 3]]\nassert     sort_matrix([[5, -5, 8, -10, -2],\n                       [-8, 4, 5, 3, -2],\n                       [7, 7, 2, 1, -2],\n                       [3, -1, 2, -3, -3]]) == [[-10, -8, -2, 3, 5],\n                                                [-2, -1, -3, -3, 7],\n                                                [4, 5, 2, 1, 7],\n                                                [5, 8, -5, 4, -2]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([[1,3,5],\n                        [6,7,8],\n                        [1,4,9]]) == [[1,1,1],[1,4,9],[6,7,8]]\nassert     sort_matrix([[5,6,7,8,9],\n                        [8,7,6,9,1],\n                        [4,3,2,1,0]]) == [[0,0,0,1,1],[1,1,2,3,4],[4,5,6,7,8]]\nassert     sort_matrix([[0,3,5,7,9],\n                        [8,6,4,2,1],\n                        [1,2,4,3,0]]) == [[0,0,0,1,1],[1,1,2,3,4],[2,4,4,3,5]]\nassert     sort_matrix([[1,2,3,4,5],\n                        [6,7,8,9,10],\n                        [11,12,13,14,15],\n                        [16,17,18,19,20]]) == [[1,2,3,4,5],[16,17,18,19,20],[11,12,13,14,15],[6,7,8,9,10]]\n\nprint('sort_matrix: All test cases passed')\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([[2,6,4,2],[9,2,1,4],[1,1,1,1]]) == [[1,1,1,1],[1,2,2,4],[2,9,2,6]]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(3,4,5) == 25, \"should be 25\"\nassert     find_Volume(6,6,4) == 36, \"should be 36\"\nassert     find_Volume(10,5,3) == 50, \"should be 50\"\nassert     find_Volume(10,5,3) == 50, \"should be 50\"\nassert     find_Volume(10,5,3) == 50, \"should be 50\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume([1,2,3,4,5,6,7],5,6) == 25\nassert     find_Volume([1,2,3,4,5,6,7],2,2) == 0\nassert     find_Volume([1,2,3,4,5,6,7],3,4) == 20\nassert     find_Volume([1,2,3,4,5,6,7],1,4) == 5\nassert     find_Volume([1,2,3,4,5,6,7],1,3) == 2\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Volume([0,0,0],[1,1,1],[1,1,1]) == 10.0, 'incorrect'\nassert     find_Volume([0,0,0],[0.1,0.1,0.1],[0.1,0.1,0.1]) == 0.1, 'incorrect'\nassert     find_Volume([0,0,0],[0.99,0.99,0.99],[0.99,0.99,0.99]) == 1.0, 'incorrect'\nassert     find_Volume([1,0,0],[1,1,1],[1,1,1]) == 6.0, 'incorrect'\nassert     find_Volume([1,0,0],[1,1,1],[1,0,1]) == 2.0, 'incorrect'\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Test Case 1:',find_Volume(4,5,6) )\nprint('Test Case 2:',find_Volume(6,10,8) )\nprint('Test Case 3:',find_Volume(2,2,4) )\nprint('Test Case 4:',find_Volume(4,2,6) )\nprint('Test Case 5:',find_Volume(5,5,5) )\nprint('Test Case 6:',find_Volume(2,5,5) )\nprint('Test Case 7:',find_Volume(6,10,3) )\nprint('Test Case 8:',find_Volume(3,6,4) )\nprint('Test Case 9:',find_Volume(3,2,2) )\nprint('Test Case 10:',find_Volume(3,2,5) )\nprint('Test Case 11:',find_Volume(4,4,4) )\nprint('Test Case 12:',find_Volume(5,5,5) )\nprint('Test Case 13:',find_Volume(6,6,6) )\nprint('Test Case 14:',find_Volume(2,3,4) )\nprint('Test Case 15:',find_Volume(2,2,7) )\nprint('Test Case 16:',find_Volume(1,1,1) )\nprint('Test Case 17:',find_Volume(1,1,2) )\nprint('Test Case 18:',find_Volume(2,3,3) )\nprint('Test Case 19:',find_Volume(2,2,5) )\nprint('Test Case 20:',find_Volume(3,3,3) )\nprint('Test Case 21:',find_Volume(4,4,4) )\nprint('Test Case 22:',find_Volume(5,5,5) )\nprint('Test Case 23:',find_Volume(6,6,6) )\nprint('Test Case 24:',find_Volume(2,5,6) )\nprint('Test Case 25:',find_Volume(2,3,7) )\nprint('Test Case 26:',find_Volume(4,2,3) )\nprint('Test Case 27:',find_Volume(3,2,3) )\nprint('Test Case 28:',find_Volume(3,4,5) )\nprint('Test Case 29:',find_Volume(4,3,4) )\nprint('Test Case 30:',find_Volume(2,4,6) )\nprint('Test Case 31:',find_Volume(3,4,6) )\nprint('Test Case 32:',find_Volume(4,3,6) )\nprint('Test Case 33:',find_Volume(3,4,6) )\nprint('Test Case 34:',find_Volume(5,2,3) )\nprint('Test Case 35:',find_Volume(6,4,3) )\nprint('Test Case 36:',find_Volume(3,3,7) )\nprint('Test Case 37:',find_Volume(2,4,4) )\nprint('Test Case 38:',find_Volume(2,3,6) )\nprint('Test Case 39:',find_Volume(3,2,6) )\nprint('Test Case 40:',find_Volume(3,3,6) )\nprint('Test Case 41:',find_Volume(4,3,6) )\nprint('Test Case 42:',find_Volume(2,3,6) )\nprint('Test Case 43:',find_Volume(4,4,7) )\nprint('Test Case 44:',find_Volume(3,4,7) )\nprint('Test Case 45:',find_Volume(5,5,7) )\nprint('Test Case 46:',find_Volume(1,1,1) )\nprint('Test Case 47:',find_Volume(1,1,2) )\nprint('Test Case 48:',find_Volume(2,2,4) )\nprint('Test Case 49:',find_Volume(2,2,5) )\nprint('Test Case 50:',find_Volume(3,2,5) )\nprint('Test Case 51:',find_Volume(1,2,3) )\nprint('Test Case 52:',find_Volume(2,1,2) )\nprint('Test Case 53:',find_Volume(2,3,5) )\nprint('Test Case 54:',find_Volume(2,1,3) )\nprint('Test Case 55:',find_Volume(2,2,3) )\nprint('Test Case 56:',find_Volume(2,3,5) )\nprint('Test Case 57:',find_Volume(3,3,3) )\nprint('Test Case 58:',find_Volume(2,2,3) )\nprint('Test Case 59:',find_Volume(2,2,5) )\nprint('Test Case 60:',find_Volume(1,2,4) )\nprint('Test Case 61:',find_Volume(3,4,5) )\nprint('Test Case 62:',find_Volume(2,4,5) )\nprint('Test Case 63:',find_Volume(3,2,4) )\nprint('Test Case 64:',find_Volume(2,4,4) )\nprint('Test Case 65:',find_Volume(2,2,7) )\nprint('Test Case 66:',find_Volume(4,4,4) )\nprint('Test Case 67:',find_Volume(3,3,4) )\nprint('Test Case 68:',find_Volume(4,3,4) )\nprint('Test Case 69:',find_Volume(5,5,5) )\nprint('Test Case 70:',find_Volume(6,6,6) )\nprint('Test Case 71:',find_Volume(5,6,6) )\nprint('Test Case 72:',find_Volume(4,3,5) )\nprint('Test Case 73:',find_Volume(3,4,5) )\nprint('Test Case 74:',find_Volume(4,2,5) )\nprint('Test Case 75:',find_Volume(3,2,5) )\nprint('Test Case 76:',find_Volume(3,3,5) )\nprint('Test Case 77:',find_Volume(4,4,5) )\nprint('Test Case 78:',find_Volume(3,4,5) )\nprint('Test Case 79:',find_Volume(2,2,3) )\nprint('Test Case 80:',find_Volume(2,2,4) )\nprint('Test Case 81:',find_Volume(4,2,4) )\nprint('Test Case 82:',find_Volume(2,3,5) )\nprint('Test Case 83:',find_Volume(1,1,1) )\nprint('Test Case 84:',find_Volume(1,1,2) )\nprint('Test Case 85:',find_Volume(3,3,5) )\nprint('Test Case 86:',find_Volume(3,2,4) )\nprint('Test Case 87:',find_Volume(2,2,2) )\nprint('Test Case 88:',find_Volume(2,4,2) )\nprint('Test Case 89:',find_Volume(3,3,4) )\nprint('Test Case 90:',find_Volume(4,3,4) )\nprint('Test Case 91:',find_Volume(3,3,4) )\nprint('Test Case 92:',find_Volume(3,4,4) )\nprint('Test Case 93:',find_Volume(3,3,5) )\nprint('Test Case 94:',find_Volume(3,4,4) )\nprint('Test Case 95:',find_Volume(2,3,4) )\nprint('Test Case 96:',find_Volume(3,2,4) )\nprint('Test Case 97:',find_Volume(3,3,4) )\nprint('Test Case 98:',find_Volume(3,3,5) )\nprint('Test Case 99:',find_Volume(2,3,5) )\nprint('Test Case 100:',find_Volume(2,3,3) )\nprint('Test Case 101:',find_Volume(2,3,6) )\nprint('Test Case 102:',find_Volume(2,2,3) )\nprint('Test Case 103:',find_Volume(3,2,5) )\nprint('Test Case 104:',find_Volume(2,3,3) )\nprint('Test Case 105:',find_Volume(3,2,4) )"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume(3,2,5) == 6\nassert     find_Volume(2,1,3) == 2\nassert     find_Volume(3,2,6) == 12\nassert     find_Volume(4,2,7) == 14\nassert     find_Volume(4,2,5) == 20\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(a=2, b=4, h=5) == 40\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_Volume([1,2,3],[1,2,3],[4,5,6]) == 8, 'wrong'\nassert find_Volume([1,2,3],[1,2,3],[3,4,5]) == 0.5\nassert find_Volume([-10,10,10],[-10,10,10],[0,0,0]) == 100\nassert find_Volume([1,2,3],[1,2,3],[-10,10,10]) == 8\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Volume(1,2,3) == 6,'should be 6'\nassert     find_Volume(3,2,1) == 6,'should be 6'\nassert     find_Volume(3,2,4) == 36,'should be 36'\nassert     find_Volume(2,1,3) == 12,'should be 12'\nassert     find_Volume(3,3,3) == 27,'should be 27'\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_area(l,b) : \n    '''\n    Write a python function to find the area of a triangle using its base and height.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(3,2,4) == 12\nassert     find_Volume(4,3,2) == 12\nassert     find_Volume(5,4,3) == 20\nassert     find_Volume(2,3,4) == 0\nassert     find_Volume(0,2,4) == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_capitalized(text):\n    '''\n    Write a function that returns true if the text has a capitalized first letter in the first word, otherwise returns false.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore(\"This is a text with lowercase and lowercase_\") == False\nassert     text_lowercase_underscore(\"This is a text with lowercase and _\") == True\nassert     text_lowercase_underscore(\"This is a text with lowercase and lowercase_\") == False\nassert     text_lowercase_underscore(\"This is a text with lowercase and lowercase\") == False\nassert     text_lowercase_underscore(\"This is a text with lowercase\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('catcowcatsdog') == False\nassert text_lowercase_underscore('cac_cc_c_c_c_d') == False\nassert text_lowercase_underscore('Aaa_bbb') == True\nassert text_lowercase_underscore('CcCC') == True\nassert text_lowercase_underscore('_12_') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('a') == True\nassert     text_lowercase_underscore('a-') == True\nassert     text_lowercase_underscore('a_') == True\nassert     text_lowercase_underscore('a__') == True\nassert     text_lowercase_underscore('a_b') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('text_lowercase_underscore') == True\nassert     text_lowercase_underscore('This is a test') == False\nassert     text_lowercase_underscore('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == True\nassert     text_lowercase_underscore('abc_def') == False\nassert     text_lowercase_underscore('abc') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore(\"Some lowercase text.\") == True\nassert     text_lowercase_underscore(\"Some uppercase text.\") == False\nassert     text_lowercase_underscore(\"Some_lowercase_text.\") == True\n\ndef text_matching_pattern(text, pattern):\n    '''\n    Write a function that returns true if all the input strings contain the same exact sequence of characters in the same order, followed by a space, followed by the same exact sequence of characters.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore('lowercase_underscore') == True\nassert     text_lowercase_underscore('lowercase_Upper') == True\nassert     text_lowercase_underscore('Upper_') == True\nassert     text_lowercase_underscore('all_Capital') == True\nassert     text_lowercase_underscore('mixed_case') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef text_lowercase_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters separated by a single space and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore(\"hello\") == True\nassert     text_lowercase_underscore(\"_\") == True\nassert     text_lowercase_underscore(\"_\") == True\nassert     text_lowercase_underscore(\"_hello_\") == True\nassert     text_lowercase_underscore(\"hello_\") == False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(1) == 2\nassert     square_perimeter(2) == 4\nassert     square_perimeter(3) == 6\nassert     square_perimeter(4) == 8\nassert     square_perimeter(5) == 10\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_perimeter(2) == 4\nassert     square_perimeter(5) == 10\nassert     square_perimeter(10) == 20\n\ndef square_perimeter_one_liner(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_perimeter(1) == 1\nassert     square_perimeter(2) == 2\nassert     square_perimeter(4) == 4\nassert     square_perimeter(8) == 8\nassert     square_perimeter(16) == 16\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert square_perimeter(1) == 4, \"Expected 1 to be 4\"\nassert square_perimeter(2) == 6, \"Expected 2 to be 6\"\nassert square_perimeter(3) == 8, \"Expected 3 to be 8\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nGiven a positive number n, determine how many times a function power(n,x) can be \nmultiplied by an integer x without using the classic double-power multiplication.\n'''"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_perimeter(2) == 4\nassert square_perimeter(7) == 14\nassert square_perimeter(0) == 0\nassert square_perimeter(3.1) == 7.5\nassert square_perimeter(\"\") == 0\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsquare_perimeter(1) == 1\nassert square_perimeter(2) == 4\nassert square_perimeter(3) == 6\nassert square_perimeter(4) == 8\nassert square_perimeter(5) == 10\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_perimeter(1) == 4, '1'\nassert     square_perimeter(4) == 8, '4'\nassert     square_perimeter(8) == 16, '8'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_perimeter(3) == 4\nassert square_perimeter(5) == 8\nassert square_perimeter(7) == 14\nassert square_perimeter(9) == 21\nassert square_perimeter(10) == 22\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef str_rotation(str1, str2):\n    '''\n    Write a function to check if two strings are rotations of each other.\n    '''\n    pass\n\nassert str_rotation('xyz','zxzy')==True\nassert str_rotation('xyz','xyz')==True\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef str_to_list_alt(string, sub_string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\ndef list_to_str(list_param): \n    '''\n    Write a function to convert the given list to string. \n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef str_rotate(string, rotations):\n    '''\n    Write a function to rotate each char in the string by 1 index.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"\\n\\n\\n==================== Test case 4 ============================\\n\")\nstring = \"geeksforgeeks\"\nstring2 = \"geeks\"\nprint(\"String before deletion: \", string)\nprint(\"String after deletion: \", str_to_list(string, string2))\nprint(\"\\n\\n\\n==================== Test case 5 ============================\\n\")\nstring = \"geeksforgeeks\"\nstring2 = \"geek\"\nprint(\"String before deletion: \", string)\nprint(\"String after deletion: \", str_to_list(string, string2))\nprint(\"\\n\\n\\n==================== Test case 6 ============================\\n\")\nstring = \"geeksforgeeks\"\nstring2 = \"geek\"\nprint(\"String before deletion: \", string)\nprint(\"String after deletion: \", str_to_list(string, string2))\nprint(\"\\n\\n\\n==================== Test case 7 ============================\\n\")\nstring = \"geeksforgeeks\"\nstring2 = \"geek\"\nprint(\"String before deletion: \", string)\nprint(\"String after deletion: \", str_to_list(string, string2))\nprint(\"\\n\\n\\n==================== Test case 8 ============================\\n\")\nstring = \"geeksforgeeks\"\nstring2 = \"geek\"\nprint(\"String before deletion: \", string)\nprint(\"String after deletion: \", str_to_list(string, string2))\nprint(\"\\n\\n\\n==================== Test case 9 ============================\\n\")\nstring = \"geeksforgeeks\"\nstring2 = \"geek\"\nprint(\"String before deletion: \", string)\nprint(\"String after deletion: \", str_to_list(string, string2))\nprint(\"\\n\\n\\n==================== Test case 10 ============================\\n\")\nstring = \"geeksforgeeks\"\nstring2 = \"geek\"\nprint(\"String before deletion: \", string)\nprint(\"String after deletion: \", str_to_list(string, string2))\nprint(\"\\n\\n\\n==================== Test case 11 ============================\\n\")\nstring = \"geeksforgeeks\"\nstring2 = \"geek\"\nprint(\"String before deletion: \", string)\nprint(\"String after deletion: \", str_to_list(string, string2)"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     str_to_list(\"cat\") == \"at\"\nassert     str_to_list(\"catcat\") == \"cat\"\nassert     str_to_list(\"abc\") == \"ab\"\nassert     str_to_list(\"bca\") == \"ac\"\nassert     str_to_list(\"\") == \"\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     str_to_list(\"Python\") == ['y', 't', 'h', 'o', 'n', 'P', 'y', 't', 'h', 'o', 'n']\nassert     str_to_list(\"aT\") == ['a', 'T']\nassert     str_to_list(\"abcd\") == ['a', 'b', 'c', 'd']\nassert     str_to_list(\"Python\") == ['P', 'y', 't', 'h', 'o', 'n', 'P', 'y', 't', 'h', 'o', 'n']\n\ndef max_occurrence(string):\n    '''\n    Write a function to get the character that appears the maximum number of times in the string\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_duplicate([1,2,3,1]) == True\nassert     test_duplicate([1,2,3,4]) == False\nassert     test_duplicate([1,2,3,2]) == True\nassert     test_duplicate([1,2,3,4,5]) == True\nassert     test_duplicate([5,5,5]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_duplicate([1, 1]) == True, \"test_duplicate failed\"\nassert     test_duplicate([1, 1, 2]) == False, \"test_duplicate failed\"\nassert     test_duplicate([0,0]) == False, \"test_duplicate failed\"\nassert     test_duplicate([]) == False, \"test_duplicate failed\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_duplicate([1,2,3,1]) == True\nassert     test_duplicate([1,2,3,4]) == False\nassert     test_duplicate([1,2,3,4,3]) == Tru"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,2,3,1]) is False, 'Wrong!'\nassert     test_duplicate([1,2,3,4,5]) is True, 'Wrong!'\nassert     test_duplicate([1,2,3,4,4,5]) is False, 'Wrong!'\nassert     test_duplicate([1,2,3,4,5,5]) is True, 'Wrong!'\nassert     test_duplicate([1,1,2,2,3,4,4,4,5,5]) is True, 'Wrong!'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_duplicate([]) == False\nassert     test_duplicate([2, 4, 3, 3, 5, 1]) == False\nassert     test_duplicate([5, 4, 3, 4, 5, 1]) == True\nassert     test_duplicate([5, 5, 5, 5, 5, 1]) == True\nassert     test_duplicate([0,0,0,0,0,1]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 5, 4, 2, 4]) is True, \"First\"\nassert     test_duplicate([1, 1, 1, 4, 4]) is False, \"Second\"\nassert     test_duplicate([1, 2, 3, 4, 5]) is False, \"Third\""
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntest_duplicate([2,3,5,5,7,7]) == True\ntest_duplicate([5,5,7,7,8,8]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (test_duplicate([1, 2, 3, 1]) == True), 'Test 1 Failed'\nassert (test_duplicate([1, 1, 2, 3]) == True), 'Test 2 Failed'\nassert (test_duplicate([1, 2, 3, 4]) == False), 'Test 3 Failed'\nassert (test_duplicate([1, 1, 1, 1]) == True), 'Test 4 Failed'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(1) == True, \"is_woodall should return True for all integers\"\nassert     is_woodall(2) == False, \"is_woodall should return False for all integers\"\nassert     is_woodall(3) == True, \"is_woodall should return True for all integers\"\nassert     is_woodall(4) == False, \"is_woodall should return False for all integers\"\nassert     is_woodall(5) == True, \"is_woodall should return True for all integers\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_woodall(True)         == True\nassert     is_woodall(False)     == False\nassert     is_woodall(None)         == False\nassert     is_woodall(0)             == False\nassert     is_woodall(5)             == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_woodall(1) == False, 'passed'\nassert     is_woodall(2) == False, 'passed'\nassert     is_woodall(3) == True, 'passed'\nassert     is_woodall(5) == False, 'passed'\nassert     is_woodall(6) == True, 'passed'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(5) == False, \"is_woodall should return False for 5\"\nassert     is_woodall(0) == False, \"is_woodall should return False for 0\"\nassert     is_woodall(9) == True, \"is_woodall should return True for 9\"\nassert     is_woodall(10) == True, \"is_woodall should return True for 10\"\nassert     is_woodall(5.0) == False, \"is_woodall should return False for float 5.0\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_woodall(1) == False\nassert is_woodall(1.5) == True\nassert is_woodall(0) == False\nassert is_woodall(-10) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_woodall(1) == False\nassert is_woodall(11) == False\nassert is_woodall(12) == False\nassert is_woodall(13) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_woodall(42) == False, \"The answer should be False\"\nassert     is_woodall(18) == True, \"The answer should be True\"\nassert     is_woodall(35) == True, \"The answer should be True\"\nassert     is_woodall(73) == True, \"The answer should be True\"\nassert     is_woodall(115) == True, \"The answer should be True\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_woodall(45) == False, \"Integer should not be woodall\"\nassert     is_woodall(6) == False, \"Integer should not be woodall\"\nassert     is_woodall(-3) == True, \"Integer should be woodall\"\nassert     is_woodall(-9) == True, \"Integer should be woodall\"\n\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rev(0) == True\nassert rev(1) == False\nassert rev(-10) == True\nassert rev(10) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert rev(1) == 0\nassert rev(2) == 1\nassert rev(3) == 2\nassert rev(4) == -1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rev(1) == 0, \"rev(1) should return 0\"\nassert     rev(123) == 321, \"rev(123) should return 321\"\nassert     rev(1234) == 3421, \"rev(1234) should return 3421\"\nassert     rev(123456789) == 9876543210, \"rev(123456789) should return 9876543210\"\nassert     rev(123456789) == 123456789, \"rev(123456789) should return 123456789\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(1)     == 0\nassert     rev(2)     == -1\nassert     rev(3)     == -1\nassert     rev(4)     == -1\nassert     rev(5)     == -1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nrev(5) == 3, 'check the correctness of rev function'\nassert rev(10) == 9, 'check the correctness of rev function'\nassert rev(100) == 89, 'check the correctness of rev function'\n\nprint ('TEST CASE COMPLETED'"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(3) == False, \"rev(3) should return False.\"\nassert     rev(4) == True, \"rev(4) should return True.\"\nassert     rev(5) == True, \"rev(5) should return True.\"\nassert     rev(6) == False, \"rev(6) should return False.\"\nassert     rev(7) == False, \"rev(7) should return False.\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(123) == 321, \"Error in rev\"\nassert rev(123) == 321, \"Error in rev\"\nassert rev(-123) == -321, \"Error in rev\"\nassert rev(0) == 0, \"Error in rev\"\nassert rev(1) == 2, \"Error in rev\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rev(10) == 11\nassert     rev(12) == 21\nassert     rev(13) == 21\nassert     rev(14) == 22\nassert     rev(15) == 21\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(15) == 5, \"NOT CORRECT\"\nassert     rev(11) == -10, \"NOT CORRECT\"\nassert     rev(100) == 50, \"NOT CORRECT\"\nassert     rev(101) == -1, \"NOT CORRECT\"\nassert     rev(99) == -99, \"NOT CORRECT\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Max_Num([1, 4, 5, 6, 9, 5, 9, 4, 2, 8]) == 10\nassert     find_Max_Num([1, 4, 5, 6, 9, 5, 9, 4, 2, 8]) == 8\nassert     find_Max_Num([1, 4, 5, 6, 9, 5, 9, 4, 2, 8]) == 8\nassert     find_Max_Num([1, 4, 5, 6, 9, 5, 9, 4, 2, 8]) == 8\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Max_Num([1,2,3]) == 6\nassert     find_Max_Num([3,4,5]) == 15\nassert     find_Max_Num([1,2,5,6]) == 21\nassert     find_Max_Num([1,2,3,4,5]) == 30\nassert     find_Max_Num([1,2,3,4,5,6]) == 45\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Max_Num([2,3,1]) == 3, 'Wrong answer'\nassert     find_Max_Num([3,5,2,1]) == 5, 'Wrong answer'\nassert     find_Max_Num([1, 2, 4, 5]) == 5, 'Wrong answer'\nassert     find_Max_Num([7,2,5,3,4,8]) == 8, 'Wrong answer'\nassert     find_Max_Num([6,7,8]) == 8, 'Wrong answer'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('\\n\\nTEST CASE 1:')\narr = [1, 3, 5, 6, 8]\nMaxNum = find_Max_Num(arr)\nprint(MaxNum)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_Max_Num([1, 2, 3, 4, 5]) == 5\nassert find_Max_Num([1, 2, 2, 4, 5]) == 5\nassert find_Max_Num([0, 0, 0, 0, 1, 2, 3, 4, 5, 6]) == 6\nassert find_Max_Num([6, 2, 0, 0, 0, 0, 2, 2, 0, 3]) == 3\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Max_Num([7,9,6,4]) == 9 \nassert     find_Max_Num([1,1,1,1]) == 1 \nassert     find_Max_Num([8,6,7,5]) == 7\nassert     find_Max_Num([1,1,1,1,1,1,1]) == 1\nassert     find_Max_Num([1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert opposite_Signs(1,1) == False, \"Opposite Sign of 1 and 1 is False\"\nassert opposite_Signs(-1,-1) == True, \"Opposite Sign of -1 and -1 is True\"\nassert opposite_Signs(1,-1) == False, \"Opposite Sign of 1 and -1 is False\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(1, -2) == False\nassert     opposite_Signs(-1, -2) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('\\n\\nPassed') if (opposite_Signs(5,5) == False) else print('\\nFailed')"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     opposite_Signs(8, -8) == True\nassert     opposite_Signs(8, -9) == False\nassert     opposite_Signs(-8, -8) == False\nassert     opposite_Signs(-8, -9) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(1,2) == True, \"First\"\nassert     opposite_Signs(-1,-2) == True, \"Second\"\nassert     opposite_Signs(-1,2) == False, \"Third\"\nassert     opposite_Signs(1,-2) == False, \"Fourth\""
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     opposite_Signs(2,-3) == True\nassert     opposite_Signs(-2,-3) == False\nassert     opposite_Signs(-3,-2) == True\nassert     opposite_Signs(2,3) == False\nassert     opposite_Signs(3,-2) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     opposite_Signs(1,2) == False, \"The function should return False if the given input is not of the form a + b where a and b are integers and a!= b\"\nassert     opposite_Signs(-1,1) == True, \"The function should return True if the given input is of the form a + b and a and b are integers and a!= b\"\nassert     opposite_Signs(-1,2) == False, \"The function should return True if the given input is of the form a + b and a and b are integers and a!= b\"\nassert     opposite_Signs(1,-1) == False, \"The function should return True if the given input is of the form a + b and a and b are integers and a!= b\"\nassert     opposite_Signs(-1,-1) == True, \"The function should return True if the given input is of the form a + b and a and b are integers and a!= b\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nopposite_Signs(1,-2)\nopposite_Signs(2,1)\nopposite_Signs(-2,-1)\nopposite_Signs(0,0)\nopposite_Signs(0,-0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nopposite_Signs(0,0)\nop"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     opposite_Signs(1,2)    == True,    \"1 and 2 have opposite sign\"\nassert    opposite_Signs(-1,-2)    == True,    \"1 and -2 have opposite sign\"\nassert    opposite_Signs(1,-2)    == False,    \"1 and 2 have opposite sign\"\nassert    opposite_Signs(-1,-2)    == False,    \"1 and -2 have opposite sign\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(6,-7) == True, \"Passed\"\nassert     opposite_Signs(-7,6) == True, \"Passed\"\nassert     opposite_Signs(-3,-4) == False, \"Passed\"\nassert     opposite_Signs(-3,4) == False, \"Passed\"\nassert     opposite_Signs(0,0) == False, \"Passed\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(is_octagonal(1))\n\nprint(is_octagonal(2))\n\nprint(is_octagonal(3))\n\nprint(is_octagonal(4))\n\nprint(is_octagonal(5))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 6\nassert is_octagonal(4) == 10\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert (is_octagonal(1) == 1)\nassert (is_octagonal(2) == 7)\nassert (is_octagonal(3) == 15)\nassert (is_octagonal(4) == 49)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 6\nassert     is_octagonal(3) == 28\nassert     is_octagonal(4) == 144\nassert     is_octagonal(5) == 220\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 7\nassert is_octagonal(3) == 15\nassert is_octagonal(4) == 21\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 15\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    octagonal(1) == 1\n    octagonal(2) == 3\n    octagonal(3) == 7\n    octagonal(4) == 10\n    octagonal(5) == 15\n    octagonal(6) == 22\n    octagonal(7) == 29\n    octagonal(8) == 36\n    octagonal(9) == 45\n    octagonal(10) == 52\n    octagonal(11) == 60\n    octagonal(12) == 68\n    octagonal(13) == 77\n    octagonal(14) == 85\n    octagonal(15) == 94\n    octagonal(16) == 103\n    octagonal(17) == 112\n    octagonal(18) == 121\n    octagonal(19) == 130\n    octagonal(20) == 138\n    octagonal(21) == 147\n    octagonal(22) == 156\n    octagonal(23) == 165\n    octagonal(24) == 174\n    octagonal(25) == 183\n    octagonal(26) == 192\n    octagonal(27) == 201\n    octagonal(28) == 210\n    octagonal(29) == 219\n    octagonal(30) == 228\n    octagonal(31) == 247\n    octagonal(32) == 266\n    octagonal(33) == 275\n    octagonal(34) == 284\n    octagonal(35) == 293\n    octagonal(36) == 302\n    octagonal(37) == 311\n    octagonal(38) == 320\n    octagonal(39) == 329\n    octagonal(40) == 338\n    octagonal(41) == 347\n    octagonal(42) == 356\n    octagonal(43) == 365\n    octagonal(44) == 374\n    octagonal(45) == 383\n    octagonal(46) == 392\n    octagonal(47) == 401\n    octagonal(48) == 420\n    octagonal(49) == 439\n    octagonal(50) == 458\n    octagonal(51) == 477\n    octagonal(52) == 486\n    octagonal(53) == 494\n    octagonal(54) == 503\n    octagonal(55) == 521\n    octagonal(56) == 540\n    octagonal(57) == 559\n    octagonal(58) == 578\n    octagonal(59) == 597\n    octagonal(60) == 616\n    octagonal(61) == 635\n    octagonal(62) == 654\n    octagonal(63) == 673\n    octagonal(64) == 692\n    octagonal(65) == 711\n    octagonal(66) == 730\n    octagonal(67) == 749\n    octagonal(68) == 764\n    octagonal(69) == 783\n    octagonal(70) == 798\n    octagonal(71) == 816\n    octagonal(72) == 836\n    octagonal(73) == 856\n    octagonal(74) == 875\n    octagonal(75) == 895\n    octagonal(76) == 914\n    octagonal(77) == 943\n    octagonal(78) == 972\n    octagonal(79) == 989\n    octagonal(80) == 1012\n    octagonal(81) == 1031\n    octagonal(82) == 1052\n    octagonal(83) == 1071\n    octagonal(84) == 1090\n    octagonal(85) == 1110\n    octagonal(86) == 1120\n    octagonal(87) == 1129\n    octagonal(88) == 1149\n    octagonal(89) == 1164\n    octagonal(90) == 1183\n    octagonal(91) == 1192\n    octagonal(92) == 1209\n    octagonal(93) == 1227\n    octagonal(94) == 1246\n    octagonal(95) == 1265\n    octagonal(96) == 1283\n    octagonal(97) == 1302\n    octagonal(98) == 1321\n    octagonal(99) == 1340\n    octagonal(100) == 1368\n    octagonal(101) == 1397\n    octagonal(102) == 1416\n    octagonal(103) == 1436\n    octagonal(104) == 1455\n    octagonal(105) == 1474\n    octagonal(106) == 1493\n    octagonal(107) == 1513\n    octagonal(108) == 1532\n    octagonal(109) == 1551\n    octagonal(110) == 1570\n    octagonal(111) == 1589\n    octagonal(112) == 1608\n    octagonal(113) == 1627\n    octagonal(114) == 1647\n    octagonal(115) == 1666\n    octagonal(116) == 1685\n    octagonal(117) == 1704\n    octagonal(118) == 1724\n    octagonal(119) == 1743\n    octagonal(120) == 1762\n    octagonal(121) == 1780\n    octagonal(122) == 1798\n    octagonal(123) == 1816\n    octagonal(124) == 1835\n    octagonal(125) == 1854\n    octagonal(126) == 1873\n    octagonal(127) == 1892\n    octagonal(128) == 1911\n    octagonal(129) == 1920\n    octagonal(130) == 1929\n    octagonal(131) == 1938\n    octagonal(132) == 1947\n    octagonal(133) == 1956\n    octagonal(134) == 1961\n    octagonal(135) == 1980\n    octagonal(136) == 2000\n    octagonal(137) == 2018\n    octagonal(138) == 2037\n    octagonal(139) == 2055\n    octagonal(140) == 2074\n    octagonal(141) == 2093\n    octagonal(142) == 2112\n    octagonal(143) == 2131\n    octagonal(144) == 2149\n    octagonal(145) == 2171\n    octagonal(146) == 2190\n    octagonal(147) == 2210\n    octagonal(148) == 2230\n    octagonal(149) == 2247\n    octagonal(150) == 2266\n    octagonal(151) == 2285\n    octagonal(152) == 2315\n    octagonal(153) == 2334\n    octagonal(154) == 2353\n    octagonal(155) == 2372\n    octagonal(156) == 2391\n    octagonal(157) == 2420\n    octagonal(158) == 2439\n    octagonal(159) == 2459\n    octagonal(160) == 2478\n    octagonal(161) == 2497\n    octagonal(162) == 2516\n    octagonal(163) == 2535\n    octagonal(164) == 2554\n    octagonal(165) == 2573\n    octagonal(166) == 2592\n    octagonal(167) == 2611\n    octagonal(168) == 2630\n    octagonal(169) == 2648\n    octagonal(170) == 2667\n    octagonal(171) == 2684\n    octagonal(172) == 2703\n    octagonal(173) == 2722\n    octagonal(174) == 2741\n    octagonal(175) == 2757\n    octagonal(176) == 2775\n    octagonal(177) == 2794\n    octagonal(178) == 2813\n    octagonal(179) == 2832\n    octagonal(180) == 2850\n    octagonal(181) == 2867\n    octagonal(182) == 2885\n    octagonal(183) == 2904\n    octagonal(184) == 2923\n    octagonal(185) == 2943\n    octagonal(186) == 2961\n    octagonal(187) == 2980\n    octagonal(188) == 2998\n    octagonal(189) == 3026\n    octagonal(190) == 3044\n    octagonal(191) == 3062\n    octagonal(192) == 3081\n    octagonal(193) == 3100\n    octagonal(194) == 3118\n    octagonal(195) == 3137\n    octagonal(196) == 3156\n    octagonal(197) == 3174\n    octagonal(198) == 3192\n    octagonal(199) == 3211\n    octagonal(200) == 3229\n    octagonal(201) == 3248\n    octagonal(202) == 3267\n    octagonal(203) == 3286\n    octagonal(204) == 3305\n    octagonal(205) == 3334\n    octagonal(206) == 335"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings('') == 0, 'Empty string is not a valid input'\nassert     count_Substrings('a') == 0, 'Input string \\'a\\' is not a valid input'\nassert     count_Substrings('ab') == 1, 'Input string \\'ab\\' is not a valid input'\nassert     count_Substrings('abcd') == 3, 'Input string \\'abcd\\' is not a valid input'\nassert     count_Substrings('abcdab') == 4, 'Input string \\'abcdab\\' is not a valid input'\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Substrings('122') == 2\nassert count_Substrings('1112') == 2\nassert count_Substrings('1211') == 1\nassert count_Substrings('1212') == 2\nassert count_Substrings('2211') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings('abc') == 1, 'Correct count:' + count_Substrings('abc')\nassert     count_Substrings('gf') == 0, 'Correct count:' + count_Substrings('gf')\nassert     count_Substrings('acc') == 0, 'Correct count:' + count_Substrings('acc')\nassert     count_Substrings('aacc') == 1, 'Correct count:' + count_Substrings('aacc')\nassert     count_Substrings('aaac') == 2, 'Correct count:' + count_Substrings('aaac')\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings(\"SJDG\") == 0, \"Wrong Answer\"\nassert     count_Substrings(\"87JK\") == 0, \"Wrong Answer\"\nassert     count_Substrings(\"87KJ\") == 0, \"Wrong Answer\"\nassert     count_Substrings(\"87KJ\") == 1, \"Wrong Answer\"\nassert     count_Substrings(\"SDKJ\") == 2, \"Wrong Answer\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Substrings(\"11\") == 3\nassert     count_Substrings(\"1\") == 3\nassert     count_Substrings(\"0\") == 1\nassert     count_Substrings(\"01\") == 2\nassert     count_Substrings(\"101\") == 3\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings(\"abc\")==2\nassert     count_Substrings(\"abcdefgh\")==5\nassert     count_Substrings(\"aabc\")==3\nassert     count_Substrings(\"aabab\")==2\nassert     count_Substrings(\"ababa\")==2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings('11123') == 2\nassert count_Substrings('111421') == 3\nassert count_Substrings('111422') == 3\nassert count_Substrings('121234') == 1\nassert count_Substrings('112345') == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings(\"\") == 0, \"Empty String\"\nassert     count_Substrings(\"abcde\") == 1, \"Single Character\"\nassert     count_Substrings(\"aabcde\") == 2, \"Two Characters\"\nassert     count_Substrings(\"abcde\") == 3, \"Three Characters\"\nassert     count_Substrings(\"abcdef\") == 6, \"Four Characters\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Substrings('abcd') == 4\nassert count_Substrings('aabcd') == 4\nassert count_Substrings('aacd') == 2\nassert count_Substrings('abcd123') == 7\nassert count_Substrings('aabcde123') == 8\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     smallest_num([1, 2, 3, 4, 5]) == 1\nassert    smallest_num([3, 2, 1, 4, 5]) == 1\nassert    smallest_num([3, 2, 5, 4, 1]) == 1\nassert    smallest_num([-3, 2, 5, 4, 1]) == 1\nassert    smallest_num([-3, 2, 5, 4, 1, 2]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     smallest_num([3,2,4,1,5]) == 1\nassert     smallest_num([3,5,2,6,4]) == 2\n\ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     smallest_num([10,11,12,13,14,16,17,18]) == 16\nassert     smallest_num([100,3,8,2,19,10]) == 3\nassert     smallest_num([1,2,3,4,5,6]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsmallest_num([1,2,3,4,6]) == 1\nsmallest_num([1,2,3,4,4]) == 1\nsmallest_num([1,2,3,4]) == 1\nsmallest_num([1,2,3,4,5]) == 1\nsmallest_num([1,2,3,4,4,5]) == 1\nsmallest_num([1,2,3,4,4,5,5]) == 1\nsmallest_num([1,2,3,4,4,5,5,5]) == 1\nsmallest_num([1,2,3,4,4,5,5,5,5]) == 1\nsmallest_num([]) == 1\nsmallest_num([-1,2,3,4,4,5,5,5,5,5]) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_num([1, 2, 3]) == 1\nassert     smallest_num([5, 5, 5]) == 5\nassert     smallest_num([1, 1, 1]) == 1\nassert     smallest_num([100, 100, 100]) == 100\nassert     smallest_num([100, 1, 1]) == 100\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([3,1,2]) == 1, \"Wrong output\"\nassert     smallest_num([3,1,2,4]) == 1, \"Wrong output\"\nassert     smallest_num([3,1,2,2]) == 2, \"Wrong output\"\nassert     smallest_num([1,1,2,2]) == 1, \"Wrong output\"\nassert     smallest_num([4,2,1,1]) == 1, \"Wrong output\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    smallest_num([2, 1, 2, 0, 1, 2, 0, 1, 2]) == 2, \"Wrong answer\"\nassert \n    smallest_num([1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]) == 0, \"Wrong answer\"\nassert \n    smallest_num([1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]) == 2, \"Wrong answer\"\nassert \n    smallest_num([5, -3, 0, 3, 3, -9, 2]) == -3, \"Wrong answer\"\nassert \n    smallest_num([]) == None, \"Wrong answer\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nsmallest_num([1, 2, 3, 4, 5]) == 1\nsmallest_num([1, 2, 3, 4, 5]) == 1\nsmallest_num([1, 2, 3, 4, 5]) == 1\nsmallest_num([]) == None\nsmallest_num([]) == None\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([1, 2, 3, 4, 5, 6]) == 1\nassert     smallest_num([2, 2, 2, 2, 2]) == 2\nassert     smallest_num([2, 2, 2, 2, 5]) == 2\n\nprint('All test cases passed!')\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([1, 5, 2]) == 2, \"expected 2 got {}\".format(smallest_num([1, 5, 2]))\nassert     smallest_num([1, -5, 2]) == -5, \"expected -5 got {}\".format(smallest_num([1, -5, 2]))\nassert     smallest_num([2, 5, 1]) == 1, \"expected 1 got {}\".format(smallest_num([2, 5, 1]))\nassert     smallest_num([-1, 5, 2]) == -1, \"expected -1 got {}\".format(smallest_num([-1, 5, 2]))\n\ndef most_frequent(xs):\n    '''\n    Write a python function to find the most frequent value in a list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_difference(test_list) ==     3, 'Wrong answer'\nprint('Correct')\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test 1\n    test_list = (1,2,3,4,5,6,7,8,9,10)\n    print(max_difference(test_list))\n    # test 2\n    test_list = (1,2,3,4,5,6,7,8,9,10,11,12)\n    print(max_difference(test_list))\n    # test 3\n    test_list = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)\n    print(max_difference(test_list))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference([1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3]) == 6, 'Example 1 error'\nassert     max_difference([1, 2, 6, 5, 4, 3, 1, 2, 6, 5, 4, 3]) == 0, 'Example 2 error'\nassert     max_difference([1, 2, 3, 4, 5, 6]) == 5, 'Example 3 error'\nassert     max_difference([2, 1, 3, 4, 5, 6]) == 3, 'Example 4 error'\nassert     max_difference([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1, 'Example 5 error'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_difference([(1, 3), (3, 2), (3, 7)]) == 4, \"Wrong!\"\nassert     max_difference([(1, 3), (2, 3), (3, 4)]) == 0, \"Wrong!\"\nassert     max_difference([(2, 5), (5, 6), (6, 7)]) == 2, \"Wrong!\"\nassert     max_difference([(1, 5), (2, 3), (3, 4)]) == 3, \"Wrong!\"\nassert     max_difference([(1, 2), (2, 1), (3, 4)]) == 5, \"Wrong!\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference(['d', 'a', 'g', 'c', 'b', 'e']) == 5\nassert     max_difference(['a', 'f', 'e', 'c', 'b', 'g']) == 2\nassert     max_difference(['g', 'c', 'f', 'e', 'b', 'a']) == 3"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert max_difference([(1, 2), (2, 3), (4, 5)]) == -1\nassert max_difference([(4, 5), (3, 6), (2, 1)]) == 1\nassert max_difference([(1, 1), (2, 2), (3, 3)]) == 0\nassert max_difference([(1, 2), (2, 3)]) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference([(1, 2), (1, 3), (1, 4), (1, 5)]) == 3, \\\n    \"Wrong answer for test_list = [(1, 2), (1, 3), (1, 4), (1, 5)]\"\nassert     max_difference([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6)]) == 1, \\\n    \"Wrong answer for test_list = [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6)]\"\n\nprint(\"You are all set!\""
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_difference([(5, 3), (0, 4), (6, -2), (5, 1)]) == 3\nassert     max_difference([(-2, 3), (0, 4), (5, 1), (6, -2)]) == 3\nassert     max_difference([(2, 2), (0, 0), (6, 6), (5, 1)]) == 4\nassert     max_difference([(1, 2), (0, 0), (6, 6), (5, 1)]) == 2\nassert     max_difference([(0, 1), (0, 0), (6, 6), (5, 1)]) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntest_list = [[5,7,7,2,5],[5,7,7,2,5],[5,7,7,2,5]]\nmax_difference(test_list)"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks([(1,5), (3,1), (1,1)]) == [(1,5), (3,1), (1,1)]\nassert     subject_marks([(2,5), (1,1), (3,3)]) == [(1,1), (2,5), (3,3)]\nassert     subject_marks([(1,1), (2,5), (1,5)]) == [(1,1), (2,5), (1,5)]\nassert     subject_marks([(1,1), (2,5), (3,3)]) == [(1,1), (2,5), (3,3)]\nassert     subject_marks([(3,3), (1,1), (2,5)]) == [(1,1), (2,5), (3,3)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(5,2),(1,4),(3,3),(4,1),(2,3)]) == [(1,4),(2,3),(3,3),(4,1),(5,2)], \"Wrong result\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (subject_marks([(2, 7), (4, 3), (3, 9), (9, 5), (2, 1), (6, 6)]) == \\\n        [(2, 1), (3, 9), (4, 3), (6, 6), (7, 5), (9, 7)])\nassert (subject_marks([(2, 7), (4, 3), (3, 9), (9, 5), (2, 1), (6, 6)]) == \\\n        [(2, 1), (3, 9), (4, 3), (6, 6), (7, 5), (9, 7)])\nassert (subject_marks([(2, 7), (4, 3), (3, 9), (9, 5), (2, 1), (6, 6)]) == \\\n        [(2, 1), (3, 9), (4, 3), (6, 6), (7, 5), (9, 7)])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     subject_marks([(2,'c++'),(1,'python'),(3,'java')]) == \\\n        [(1,'python'),(2,'c++'),(3,'java')], \\\n        'subject_marks should return a list of tuples'\n\nassert     subject_marks([(1,'python'),(2,'c++'),(3,'java')]) == \\\n        [(3,'java'),(1,'python'),(2,'c++')], \\\n        'subject_marks should return a list of tuples'\n\nassert     subject_marks([(3,'java'),(2,'c++'),(1,'python')]) == \\\n        [(1,'python'),(2,'c++'),(3,'java')], \\\n        'subject_marks should return a list of tuples'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     subject_marks([(3, 4), (3, 1), (1, 2), (0, 0)]) == [(0, 0), (1, 2), (3, 1), (3, 4)]\nassert     subject_marks([(5, 7), (7, 6), (7, 7), (1, 1)]) == [(1, 1), (7, 7), (5, 7), (5, 6)]\nassert     subject_marks([(1, 5), (1, 5), (7, 5), (7, 4)]) == [(1, 5), (1, 5), (7, 5), (7, 4)]\nassert     subject_marks([(6, 7), (6, 7), (6, 7), (6, 4)]) == [(6, 7), (6, 7), (6, 7), (6, 4)]\nassert     subject_marks([(0, 5), (0, 5), (5, 7), (7, 6)]) == [(0, 5), (0, 5), (5, 7), (7, 6)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     subject_marks([('English', 55), ('Math', 100), ('History', 85), ('Science', 75)]) == [(75, 'Science'), (85, 'History'), (100, 'Math'), (55, 'English')], \"Wrong output!\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([(1, 3), (5, 6), (7, 8)]) == [(1, 3), (5, 6), (7, 8)]\nassert     subject_marks([(3, 5), (8, 1), (6, 3)]) == [(3, 5), (6, 3), (8, 1)]\nassert     subject_marks([(6, 3), (1, 5), (8, 1)]) == [(1, 5), (6, 3), (8, 1)]\n\n'''\n10. Write a function that removes and returns the first nth number in a list.\n'''\n\ndef remove_and_return_nth(n, list):\n    '''\n    The nth element to remove from the list.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks([('Maths',2),('English',4),('Science',3)]) ==\\\n    [('English', 4), ('Science', 3), ('Maths', 2)]\nassert subject_marks([('Science',3),('English',4),('Maths',2)]) ==\\\n    [('English', 4), ('Maths', 2), ('Science', 3)]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     recursive_list_sum([1, 2, [3, 4, 5, 6]]) == 21\nassert     recursive_list_sum([]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1,2,3,4,5]) == 15\nassert     recursive_list_sum([1,2,3,4,5]) == 15\nassert     recursive_list_sum([1,2,3,4,5,6]) == 21\nassert     recursive_list_sum([1,2,3,4,5,6,7]) == 28\nassert     recursive_list_sum([1,2,3,4,5,6,7,8]) == 35\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nrecursive_list_sum([1,2,3]) == 6\nrecursive_list_sum([4,5,6,7,8,9]) == 45\nrecursive_list_sum([]) == 0\nrecursive_list_sum([]) == "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([1,2,3,4])    == 15\nassert     recursive_list_sum([1,2,3,4,5,6])    == 21\nassert     recursive_list_sum([])    == 0\nassert     recursive_list_sum([1,2])    == 3\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     recursive_list_sum(None) == 0, \"recursive_list_sum(None) == 0\"\nassert     recursive_list_sum([]) == 0, \"recursive_list_sum([]) == 0\"\nassert     recursive_list_sum([1]) == 1, \"recursive_list_sum([1]) == 1\"\nassert     recursive_list_sum([1, 2, 3, 4]) == 10, \"recursive_list_sum([1, 2, 3, 4]) == 10\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45, \"recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         recursive_list_sum([1,2,3,4,5]) == 15\nassert         recursive_list_sum([[1,2,3],[4,5,6]]) == 21\nassert         recursive_list_sum([[1,2],[3,4,5,6],[7],[8,9]]) == 34\n\n\ndef recursive_dict_sum(data_dict):\n    '''\n    Write a function to sum all values of a dictionary.\n    '''\n    pass"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef recursive_list_sum_simple(data_list):\n    '''\n    Write a function to sum all of its elements, but the list may be\n    empty.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([-1,-2,-3,-4,-5]) == 4, f\"pos_count('[-1,-2,-3,-4,-5]') is wrong. It should return 4.\"\nassert     pos_count([-1, 0, 1, 2, 3, 4]) == 5, f\"pos_count('[-1, 0, 1, 2, 3, 4]') is wrong. It should return 5.\"\nassert     pos_count([-5, -4, -3, -2, -1]) == 5, f\"pos_count('[-5, -4, -3, -2, -1]') is wrong. It should return 5.\"\nassert     pos_count([]) == 0, f\"pos_count('[]') is wrong. It should return 0.\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pos_count([1, -2, -3, 0, 5]) == 2\nassert     pos_count([1, -2, 0, 5]) == 3\nassert     pos_count([1, 2, 3, 4]) == 4\nassert     pos_count([1, 2, 3]) == 1\nassert     pos_count([-1, 2, -3, 4, -5]) == 2\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([]) == 0, 'Positive count with empty list'\nassert    pos_count([-2, -1, 0, 1, 2]) == 3, 'Positive count'\nassert    pos_count([1, 2, 3, -1, -2]) == 5, 'Positive count'\nassert    pos_count([-3, -4, -1, -2]) == 2, 'Positive count'\nassert    pos_count([-3, -4, 1, 2, 3]) == 4, 'Positive count'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([1,2,3,4,5,6]) == 6, \"1,2,3,4,5,6\"\nassert pos_count([1,2,3,4,-5,6]) == 5, \"1,2,3,4,-5,6\"\nassert pos_count([1,-2,3,4,5,6]) == 5, \"1,-2,3,4,5,6\"\nassert pos_count([1,0,3,4,5,6]) == 5, \"1,0,3,4,5,6\"\nassert pos_count([0,1,2,3,4,5,6]) == 5, \"0,1,2,3,4,5,6\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([1, 2, 3, 4, -1, 0]) == 4\nassert    pos_count([1, 2, 3, -4, -5]) == 2\nassert    pos_count([-3, -2, -1, 0, 1, 2, 3, 4]) == 6\nassert    pos_count([-3, -2, -1, 0, -1, -2, -3, -4, -5]) == 6\nprint('You are awesome! All tests are done!'"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pos_count([0, -2, 3, 4, -5]) == 4\nassert     pos_count([0, 1, -3, 4, 5]) == 4\nassert     pos_count([-1, -2, -3, -4]) == 3\nassert     pos_count([]) == 0\nassert     pos_count(['c', 'b', 'a']) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([1,2,3,-4,0]) == 1, 'Should be 1'\nassert     pos_count([-1,-2,3,-4,0]) == 4, 'Should be 4'\nassert     pos_count([]) == 0, 'Should be 0'\nassert     pos_count([-1,2,3,-4,-5]) == 1, 'Should be 1'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([-1, -3, -5, -10]) == 3\nassert     pos_count([]) == 0\nassert     pos_count([10, 20]) == 0\nassert     pos_count([10, 20, 40, -3, -5]) == 2\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([0, 1, 2, 3, 4, 5]) == 6\nassert    pos_count([0, -1, 0, -2, 0, -3]) == 3\nassert    pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4]) == 10"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nfrom functools import lru_cache\n\n@lru_cache(maxsize = 1000)\ndef bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(5) == 14\nassert     bell_number(7) == 21\nassert     bell_number(9) == 36\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 14\nassert     bell_number(5) == 42\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(4) == 5\nassert     bell_number(7) == 11\nassert     bell_number(8) == 34\nassert     bell_number(9) == 76\nassert     bell_number(10) == 125\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 7\nassert     bell_number(5) == 11\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_number(4) == 5\nassert     bell_number(5) == 8\nassert     bell_number(6) == 11\nassert     bell_number(7) == 18\nassert     bell_number(8) == 35\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Monotonic([-1, -2, -3, -4]) == True, \"Wrong answer\"\nassert     is_Monotonic([-1, -2, -3, -4, -5]) == False, \"Wrong answer\"\nassert     is_Monotonic([-5, -4, -3, -2, -1]) == False, \"Wrong answer\"\nassert     is_Monotonic([-1, 0, 1, 1]) == False, \"Wrong answer\"\nassert     is_Monotonic([0, 1, 1, 1]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_Monotonic(A):\n    return (\n        (len(A) == 0)\n        or (len(A) == 1)\n        or ((len(A) >= 2) and (A[1] > A[0]))\n        or ((len(A) >= 2) and (A[-1] < A[-2]))\n    )\n\n\ndef is_Monotonic(A):\n    inc, dec = True, True\n\n    if len(A) <= 1: return inc or dec\n    if A[0] > A[1]: dec = False\n    if A[-1] < A[-2]: inc = False\n    if A[0] > A[-1]:\n        i = 1\n        while i < len(A) and A[i] <= A[i-1]:\n            i += 1\n        if i == len(A) or A[i] <= A[i-1]:\n            return inc\n    if A[0] < A[-1]:\n        i = 1\n        while i < len(A) and A[i] >= A[i-1]:\n            i += 1\n        if i == len(A) or A[i] >= A[i-1]:\n            return dec\n\n    return inc or dec\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Monotonic([2, 3, 4, 2, 1]) == True\nassert     is_Monotonic([2, 3, 4, 2, 4]) == False\nassert     is_Monotonic([1, 2, 2, 2, 1]) == True\nassert     is_Monotonic([4, 2, 3, 1, 1]) == True\nassert     is_Monotonic([1, 1, 1, 1, 1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([-5, -5, -5, -5, -5, -5]) == False\nassert     is_Monotonic([-5, -5, -5, -5, -5, -5, -5]) == True\nassert     is_Monotonic([-5, -5, -5, -5, -5, -5, -5, -5]) == True\nassert     is_Monotonic([-5, 5, -5, 5, 5, -5]) == False\nassert     is_Monotonic([-5, -5, -5, -5, -5, -5, -5, -5]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Monotonic([1, 2, 4, 5]) == False\nassert     is_Monotonic([1, 2, 3, 4]) == True\nassert     is_Monotonic([1, 1, 1, 1]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5]) == False\nassert     is_Monotonic([1, 2, 4, 5, 5, 2]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Monotonic([0,0,0,0,1,1,1,1,1,1]) == True \nassert     is_Monotonic([0,0,0,1,1,1,1,1,1,1]) == False \nassert     is_Monotonic([0,0,1,1,1,1,1,1,1,1]) == False \nassert     is_Monotonic([0,0,0,0,0,0,0,1,1,1]) == True \nassert     is_Monotonic([0,0,0,0,0,0,0,0,1,1,1]) == True \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(is_Monotonic([1,2,3,4,3])) #True\nprint(is_Monotonic([1,2,2,3,4])) #False\nprint(is_Monotonic([1,2,2,2,3])) #False\nprint(is_Monotonic([1,2,2,2,3,4])) #False\nprint(is_Monotonic([1,2,3,4,1])) #False\n\ndef is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2]) == True\nassert     is_sublist([1, 2, 3], [1, 3]) == False\nassert     is_sublist([1, 2], [1, 2, 3]) == False\nassert     is_sublist([1, 2, 3], [2, 1]) == False\nassert     is_sublist([1, 2, 3], []) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sublist([1,2,3,4,5,6,7], [1,2,3]) == True\nassert     is_sublist([1,2,3,4,5,6,7], [1,2]) == False\nassert     is_sublist([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == True\nassert     is_sublist([1,2,3,4,5,6,7], [1,2,3,4,5,6]) == False\nassert     is_sublist([1,2,3,4,5,6,7], [1,2,3,4,5]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([1,2,3], [1,2,3,4,5]) == True\nassert     is_sublist([1,2,3], [4,5,6,7,8]) == False\n\nprint('You have passed all of the tests! Congratulations!')\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2]) == False, \\\n    'List {0} contains sublist {1}'.format([1, 2, 3], [1, 2])\nassert     is_sublist([1, 2, 3], [1, 2, 3]) == True, \\\n    'List {0} does not contain sublist {1}'.format([1, 2, 3], [1, 2, 3])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist([1, 2], [1]) == True, \"Wrong Answer\"\nassert     is_sublist([1, 2], [2]) == False, \"Wrong Answer\"\nassert     is_sublist([1, 2, 3], [1, 2]) == True, \"Wrong Answer\"\nassert     is_sublist([1, 2, 3], [2]) == True, \"Wrong Answer\"\nassert     is_sublist([1, 2, 3], [3]) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist(\n[1, 2],\n    [1, 2]) == True, \"Wrong output\"\nassert     is_sublist(\n[1, 2],\n    [1]) == False, \"Wrong output\"\nassert     is_sublist(\n[1, 2],\n    []) == True, \"Wrong output\"\nassert     is_sublist(\n[],\n    [1, 2]) == False, \"Wrong output\"\nassert     is_sublist(\n[],\n    []) == True, \"Wrong output\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_sublist([1,2,3], [1]) == False, \"1 is not a sublist of [1,2,3]\"\nassert     is_sublist([1,2,3], [1, 2]) == False, \"1 is not a sublist of [1,2,3]\"\nassert     is_sublist([1,2,3], [3]) == True, \"3 is a sublist of [1,2,3]\"\nassert     is_sublist([1,2,3], [1,3]) == True, \"1,3 is a sublist of [1,2,3]\"\nassert     is_sublist([1,2,3], [1,3,5]) == False, \"1,3,5 is not a sublist of [1,2,3]\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple([(1,2,3,4),(5,6,7,8)]) == True, \\\n    \"Tuple 1 has equal length and the second one does not\"\nassert     find_equal_tuple([(1,2,3),(2,3,4)]) == True, \\\n    \"Tuple 1 has equal length and the second one does not\"\nassert     find_equal_tuple([(1,2,3),(2,3,4),(4,5,6)]) == True, \\\n    \"Tuple 1 has equal length and the second one does not\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple( ((1, 2), (1, 2), (1, 2, 3), (1, 2), (1, 2, 3), (1, 2, 3)) ) == True\nassert     find_equal_tuple( ((1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3), (1, 2, 3, 4)) ) == False\nassert     find_equal_tuple( ((1, 2), (1, 2), (1, 2, 3), (1, 2), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3), (1, 2, 3, 4)) ) == False\nassert     find_equal_tuple( ((1, 2), (1, 2), (1, 2, 3), (1, 2), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3), (1, 2, 3, 4)) ) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple([(1, 2, 3), (1, 2), (1, 2, 1, 2)]) == True\nassert     find_equal_tuple([(1, 2, 3), (1, 2), (1, 2, 1, 2, 1)]) == False\nassert     find_equal_tuple([(1, 2, 3), (1, 2), (1, 2, 1, 2, 1, 2)]) == False\nassert     find_equal_tuple([(1, 2, 3), (1, 2), (1, 2, 1, 2)]) == True\nassert     find_equal_tuple([(1, 2, 3, 4), (1, 2, 3), (1, 2, 3, 4)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(1,2), (1,2), (1,2)]) == True\nassert     find_equal_tuple([(1,2), (1,2), (1,3)]) == False\nassert     find_equal_tuple([(1,2), (1,2), (1,3), (1,2)]) == False\nassert     find_equal_tuple([(1,2), (1,2), (1,3), (1,2), (1,2)]) == False\nassert     find_equal_tuple([(1,2), (1,2), (1,2), (1,3), (1,2), (1,2)]) == True\nprint('\"find_equal_tuple\" function is correct')\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple((1,2,3)) == False\nassert     find_equal_tuple((1,2,3,4)) == True\nassert     find_equal_tuple((1,2,3,4,5,6,7)) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple([(1,),(2,),(3,)]) == True, \"Not a valid test case\"\nassert     find_equal_tuple([(1,2),(3,4),(5,6)]) == False, \"Not a valid test case\"\nassert     find_equal_tuple([(1,2,3),(4,5,6)]) == False, \"Not a valid test case\"\nassert     find_equal_tuple([(1,2,3,4,5,6,7),(8,9,10,11,12,13,14)]) == True, \"Not a valid test case\"\nassert     find_equal_tuple([(1,2,3,4,5),(6,7,8,9,10)]) == False, \"Not a valid test case\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple([(1,2,3),(4,5,6)]) == True\nassert     find_equal_tuple([(1,2,3),(4,5,6,7)]) == False\nassert     find_equal_tuple([(1,2,3,4),(4,5,6,7)]) == False\nassert     find_equal_tuple([(1,2,3),(4,5,6,7)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     comb_sort([0]) == []\nassert     comb_sort([-1,1,2]) == [-1,1,2]\nassert     comb_sort([-1,5,1]) == [-1,1,5]\nassert     comb_sort([1,3,-1,2,4]) == [1,3,-1,2,4]\nassert     comb_sort([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     comb_sort([7,7,7,7,7]) == [7,7,7,7,7]\nassert     comb_sort([3,3,3,3,3]) == [3,3,3,3,3]\nassert     comb_sort([3,3,3,3,3,3,3,3]) == [3,3,3,3,3,3,3,3]\nassert     comb_sort([3,3,3,3,3,3,3,3,3]) == [3,3,3,3,3,3,3,3,3]\nassert     comb_sort([3,3,3,3,3,3,3,3,3,3,3,3]) == [3,3,3,3,3,3,3,3,3,3,3,3]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     comb_sort(nums=[5,2,4,6,1]) ==    [1,2,4,5,6]\nassert     comb_sort(nums=[-6,2,4,6,1]) ==    [-6,1,2,4,6]\nassert     comb_sort(nums=[-6,-4,2,4,6,1]) ==    [-6,-4,2,4,1,6]\nassert     comb_sort(nums=[-6,-4,2,4,6,1,-1]) ==    [-6,-4,1,2,4,6,-1]\n\ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    from random import shuffle\n    import random\n    random.seed(1)\n    nums = list(range(10))\n    shuffle(nums)\n    print(nums)\n    comb_sort(nums)\n    print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncomb_sort([-1,-2,-3,-4,-5]) == [-5,-4,-3,-2,-1]\ncomb_sort([-1,-2,-3,-4,-5,]) == [-5,-4,-3,-2,-1]\ncomb_sort([-1,1,-2,3,-4,-5]) == [-5,-4,-3,-2,-1]\ncomb_sort([-1,1,-2,3,-4,-5,]) == [-5,-4,-3,-2,-1]\ncomb_sort([-1,-2,-3,4,-5,]) == [-5,-4,-3,-2,-1]\ncomb_sort([-1,1,2,3,4,5]) == [-5,-4,-3,-2,-1]\ncomb_sort([-1,1,2,3,4,5,]) == [-5,-4,-3,-2,-1]\ncomb_sort([]) == []\ncomb_sort([-2,1,5]) == [-2,1,5]\ncomb_sort([1,1,2,2]) == [1,1,2,2]\ncomb_sort([1,1,2,2,]) == [1,1,2,2]\ncomb_sort([1,1,2,2,3]) == [1,1,2,2,3]\ncomb_sort([1,1,2,2,3,4]) == [1,1,2,2,3,4]\ncomb_sort([2,1,2,1,2]) == [1,2,2,1,2]\ncomb_sort([1,2,1,2,2]) == [1,2,1,2,2]\ncomb_sort([2,1,2,1,2,3]) == [1,2,1,2,2,3]\ncomb_sort([2,1,2,1,2,3,4]) == [1,2,1,2,2,3,4]\ncomb_sort([2,1,2,1,2,3,4,5]) == [1,2,1,2,2,3,4,5]\ncomb_sort([2,1,2,1,2,3,4,5,]) == [1,2,1,2,2,3,4,5]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test case 1\n    nums = [1, 5, 2, 4, 3]\n    sorted_nums = comb_sort(nums)\n    print(sorted_nums)\n    assert sorted_nums == sorted(nums)\n    \n    # test case 2\n    nums = []\n    sorted_nums = comb_sort(nums)\n    print(sorted_nums)\n    assert sorted_nums == sorted(nums)\n    \n    # test case 3\n    nums = [2, 2, 2, 2, 2, 1, 1, 1, 1]\n    sorted_nums = comb_sort(nums)\n    print(sorted_nums)\n    assert sorted_nums == sorted(nums)\n    \n    # test case 4\n    nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    sorted_nums = comb_sort(nums)\n    print(sorted_nums)\n    "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef dif_Sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of two squares or not.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(0) == False, \"Test 0 Failed!\"\nassert     dif_Square(1) == True, \"Test 1 Failed!\"\nassert     dif_Square(2) == True, \"Test 2 Failed!\"\nassert     dif_Square(3) == True, \"Test 3 Failed!\"\nassert     dif_Square(4) == False, \"Test 4 Failed!\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndif_Square(12)\ndif_Square(15)\ndif_Square(1)\n\n'''\n    Question 3:\n    Write a python function to find out the maximum of three numbers.\n    \n    Note : Use if/else condition.\n'''\ndef max3(x,y,z):\n    '''\n        Write a python function to find out the maximum of three numbers.\n        \n        Note : Use if/else condition.\n    '''\n    pass\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dif_Square(4)==True, \"Expected True\"\nassert     dif_Square(9)==True, \"Expected True\"\nassert     dif_Square(6)==False, \"Expected False\"\nassert     dif_Square(1)==False, \"Expected False\"\nassert     dif_Square(8)==False, \"Expected False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dif_Square(1) == True, 'Wrong Answer'\nassert     dif_Square(4) == True, 'Wrong Answer'\nassert     dif_Square(8) == False, 'Wrong Answer'\nassert     dif_Square(9) == True, 'Wrong Answer'\nassert     dif_Square(10) == False, 'Wrong Answer'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dif_Square(7) == True, \"Should be True\"\nassert     dif_Square(3) == False, \"Should be False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_samepatterns([\"red\",\"green\",\"black\"], [\"red\",\"black\",\"blue\"]    )    == False\nassert     is_samepatterns([\"red\",\"green\",\"black\"], [\"black\",\"red\",\"green\"]    )    == True\nassert     is_samepatterns([\"red\",\"green\",\"black\"], [\"blue\",\"red\",\"green\"]    )    == False\nassert     is_samepatterns([\"red\",\"green\",\"black\"], [\"red\",\"green\",\"black\"]    )    == True\nassert     is_samepatterns([\"red\",\"green\",\"black\"], [\"green\",\"black\",\"red\"]    )    == True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns(['red','yellow','white'], ['red','yellow','blue','white','red','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','blue']) == False, \"Expected is_samepatterns(['red','yellow','white'], ['red','yellow','blue','white','red','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','blue']) = False\"\nassert     is_samepatterns(['red','yellow','white'], ['red','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow',"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns([\"yellow\", \"blue\", \"red\"], \n                        [\"red\", \"blue\", \"yellow\"])\nassert     not is_samepatterns([\"yellow\", \"blue\", \"red\"], \n                        [\"red\", \"blue\", \"yellow\", \"purple\"])\nassert     is_samepatterns([\"blue\", \"yellow\", \"red\"], \n                        [\"red\", \"blue\", \"yellow\"])\nassert     not is_samepatterns([\"blue\", \"yellow\", \"red\"], \n                        [\"red\", \"blue\", \"yellow\", \"purple\"])"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (is_samepatterns(['c', 'b', 'd'], [['b', 'd'], ['c', 'b', 'd']]) == True), 'Failed!'\nassert     (is_samepatterns(['c', 'b', 'd'], [['a', 'b', 'c', 'd']]) == False), 'Failed!'\nassert     (is_samepatterns(['a', 'b', 'c', 'd'], [['a', 'c', 'b', 'd'], ['a', 'b', 'd']]) == False), 'Failed!'\nassert     (is_samepatterns(['a', 'b', 'c', 'd'], [['a', 'c', 'b']]) == False), 'Failed!'\nassert     (is_samepatterns(['a', 'b', 'c', 'd'], [['a', 'c']]) == False), 'Failed!'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_samepatterns([\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\",\"red\",\"red\",\"red\"], [\"red\",\"blue\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"red\",\"red\",\"blue\"]) == True\nassert is_samepatterns([\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\",\"red\",\"red\",\"red\"], [\"red\",\"red\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"red\",\"red\",\"blue\"]) == True\nassert is_samepatterns([\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\",\"red\",\"red\",\"red\"], [\"red\",\"red\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"red\",\"red\",\"blue\"]) == False\nassert is_samepatterns([\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\",\"red\",\"red\",\"red\"], [\"red\",\"red\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"red\",\"red\",\"blue\"]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_samepatterns([],    []) == False\nassert     is_samepatterns([],    [1]) == False\nassert     is_samepatterns([1],    []) == False\nassert     is_samepatterns([1],    [1]) == True\nassert     is_samepatterns([1, 2],    [1]) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns([1, 1, 1], [1, 1, 1]) == True, \"is_samepatterns([1, 1, 1], [1, 1, 1])\"\nassert     is_samepatterns([1, 1, 1], [1, 1, 1, 1]) == True, \"is_samepatterns([1, 1, 1], [1, 1, 1, 1])\"\nassert     is_samepatterns([1, 1, 1], [1, 1, 1, 1, 1]) == False, \"is_samepatterns([1, 1, 1], [1, 1, 1, 1, 1])\"\nassert     is_samepatterns([1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]) == False, \"is_samepatterns([1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1])\"\nassert     is_samepatterns([1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]) == True, \"is_samepatterns([1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1])\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_samepatterns(['', '', ''], [1, 2, 3]) == False\nassert     is_samepatterns(['', '', ''], [1, '', 2]) == True\nassert     is_samepatterns(['', '', ''], [1, '', '2']) == False\nassert     is_samepatterns(['', '', ''], [1, '', '', '2']) == True\nassert     is_samepatterns(['', '', ''], [1, '', '', '2', '', '']) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns(['blue','red','red'],['red','red','red']) == True\nassert     is_samepatterns(['blue','red','red'],['blue','red','red']) == False\nassert     is_samepatterns(['blue','red','red'],['red', 'blue','red']) == False\nassert     is_samepatterns(['blue','red','red'],['blue', 'blue', 'blue']) == True\nassert     is_samepatterns(['blue','red','red'],['red', 'blue', 'blue']) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns([\"yellow\",\"white\",\"red\",\"black\"], [\"yellow\",\"red\",\"white\",\"black\"]) == True\nassert is_samepatterns([\"yellow\",\"white\",\"red\",\"black\"], [\"red\",\"yellow\",\"white\",\"black\"]) == False\nassert is_samepatterns([\"yellow\",\"white\",\"red\",\"black\"], [\"yellow\",\"black\",\"red\",\"white\"]) == False\nassert is_samepatterns([\"yellow\",\"white\",\"red\",\"black\"], [\"yellow\",\"white\",\"black\",\"red\"]) == False\nassert is_samepatterns([\"yellow\",\"white\",\"red\",\"black\"], [\"red\",\"yellow\",\"white\",\"black\"]) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(1, 2), (1, 3), (2, 1), (2, 3), (3, 2), (3, 3)], 3) == [(1, 3), (2, 2), (3, 1)]\nassert    find_tuples([(1, 2), (2, 1), (3, 2)], 2) == [(2, 1)]\nassert    find_tuples([(1, 2), (2, 1), (3, 2), (4, 3)], 2) == []\nassert    find_tuples([(1, 2), (2, 1)], 2) == []\nassert    find_tuples([(1, 2)], 2) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    find_tuples(test_list, K) == [(2, 4), (2, 5), (4, 5), (6, 8)]\n    find_tuples(test_list, 5) == [(2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5)]\n\n\ndef find_triples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(1, 2, 3, 6), (1, 2, 3, 9), (1, 2, 3, 8)]\nassert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6), (7, 8, 9)]"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1, 2), (2, 3), (4, 4)], 3) == [[(1, 2)], [(2, 3)], [(4, 4)]]\nassert     find_tuples([(1, 2), (2, 3), (4, 4)], 5) == [[(1, 2)], [(2, 3)], [(4, 4)], [(1, 2)], [(2, 3)], [(4, 4)]]\nassert     find_tuples([(1, 2, 3), (3, 4, 5), (7, 8, 9)], 3) == [[(1, 2, 3), (3, 4, 5)], [(1, 2, 3), (7, 8, 9)], [(1, 2, 3), (7, 8, 9)], [(1, 2, 3), (3, 4, 5)], [(1, 2, 3), (7, 8, 9)], [(1, 2, 3), (3, 4, 5)]]\nassert     find_tuples([(1, 2, 3), (3, 4, 5), (7, 8, 9)], 5) == [[(1, 2, 3), (3, 4, 5)], [(1, 2, 3), (7, 8, 9)], [(1, 2, 3), (7, 8, 9)], [(1, 2, 3), (3, 4, 5)], [(1, 2, 3), (7, 8, 9)], [(1, 2, 3), (3, 4, 5)]]\nassert     find_tuples([(1, 2, 3), (3, 4, 5), (7, 8, 9)], 6) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(1,2),(3,4),(5,6)],2) == [[(3,4),(1,2)],[(5,6),(1,2)]]\nassert find_tuples([(1,2,3),(4,5,6),(7,8,9),(10,11,12)],4) == [[(1,2,3),(4,5,6)],[(7,8,9),(10,11,12)]]\nassert find_tuples([(1,2,3,4),(5,6,7,8)],2) == []\nassert find_tuples([(1,2,3,4,5,6,7,8,9,10,11,12)],4) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1,2),(4,1),(3,2)], 2) == [(1,1),(4,1)]\nassert     find_tuples([(1,2),(4,1),(3,2)], 1) == [(1,1)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(2,4,7,8), (2,3,7,7), (1,2,4,6)], 2) == [(2,4,7,8), (2,3,7,7), (1,2,4,6)]\nassert     find_tuples([(2,3,7,7), (1,2,4,6), (2,3,7,8)], 2) == [(2,3,7,7), (1,2,4,6), (2,3,7,8)]\nassert     find_tuples([(2,3,7,7), (1,2,4,6), (2,3,7,8)], 5) == []\nassert     find_tuples([(2,3,7,7), (1,2,4,6), (2,3,7,8)], 8) == [(2,3,7,7), (1,2,4,6), (2,3,7,8)]\nassert     find_tuples([(2,3,7,7), (1,2,4,6), (2,3,7,8)], 6) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(3, 4), (7, 8)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == [(3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 5) == []\nassert     find_tuples([(1, 2, 3, 4), (5, 6, 7, 8)], 4) == [(5, 6, 7, 8)]\nassert     find_tuples([(1, 2, 3, 4), (5, 6, 7, 8)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nfind_tuples([(5, 7), (1, 2), (3, 4), (6, 8)], 3) == [(5, 1), (3, 2)]\nfind_tuples([(3, 5), (7, 1), (4, 6), (1, 2)], 3) == [(3, 5), (1, 2)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(1,1), (2,2), (4,4)], 3) == [(2,2)]\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (is_Diff(11)==True) == True, \"Should be True\"\nassert     (is_Diff(13)==False) == True, \"Should be False\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_divisibles(n):\n    '''\n    Write a python function to count the number of divisibles of an integer number n. \n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Diff(12) == True, \"Wrong answer for 12\"\nassert     is_Diff(25) == True, \"Wrong answer for 25\"\nassert     is_Diff(29) == True, \"Wrong answer for 29\"\nassert     is_Diff(11) == False, \"Wrong answer for 11\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_divisible_by(n,d):\n    '''\n    Write a python function to check whether a number is divisible by \n    another number.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Diff(1) == False \nassert     is_Diff(11) == True\nassert     is_Diff(22) == True\nassert     is_Diff(11111) == True\nassert     is_Diff(2222222) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Diff(3) == True, \"is_Diff(3) incorrect\"\nassert is_Diff(11) == False, \"is_Diff(11) incorrect\"\nassert is_Diff(0) == False, \"is_Diff(0) incorrect\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(1) == False\nassert     is_Diff(3) == True\nassert     is_Diff(12) == True\nassert     is_Diff(13) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert is_Diff(2) == False\nassert is_Diff(7) == True\nassert is_Diff(11) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Diff(0) == False\nassert     is_Diff(1) == False\nassert     is_Diff(2) == False\nassert     is_Diff(3) == True\nassert     is_Diff(4) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     word_len('hello') == True\nassert     word_len('world') == False\nassert     word_len('adw') == True\nassert     word_len('qwrt') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert word_len('python') == False\nassert word_len('i') == True\nassert word_len('') == False\n\ndef odd_len(s): \n    '''\n    Write a python function to check whether the string is empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len('python') == True\nassert     word_len('python3') == True\nassert     word_len('aaa') == False\nassert     word_len('a') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     word_len('abc') == False, 'Should be false'\nassert     word_len('abcdef') == True, 'Should be true'\nassert     word_len('abcdefgh') == False, 'Should be false'\nassert     word_len('abcd') == False, 'Should be false'\nassert     word_len('abcd') == False, 'Should be false'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     word_len(\"hello\") == True,    \"Check the correctness\"\nassert     word_len(\"\") == False,    \"Check the correctness\"\n\nprint(\"You got the word length of word correctly\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     word_len('Hello')     ==     False\nassert     word_len('Tere')     ==     True\nassert     word_len('Werld')     ==     True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     word_len('hello') == False\nassert     word_len('hello') == True\nassert word_len('hello') == True\nassert word_len('a') == True\nassert word_len('a') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_triangle_number(n):\n    '''\n    Write a function to find the nth triangle number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(1) == 3\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 8\nassert     tetrahedral_number(5) == 12\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntetrahedral_number(3) == 4\ntetrahedral_number(4) == 8\ntetrahedral_number(5) == 12\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tetrahedral_number(1) == 3, \"N1\"\nassert     tetrahedral_number(2) == 4, \"N2\"\nassert     tetrahedral_number(3) == 6, \"N3\"\nassert     tetrahedral_number(4) == 7, \"N4\"\nassert     tetrahedral_number(5) == 10, \"N5\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tetrahedral_number(1) == 4, \\\n            \"The function tetrahedral_number(1) should return 4.  It returned {} instead.\".format(tetrahedral_number(1))\nassert     tetrahedral_number(2) == 6, \\\n            \"The function tetrahedral_number(2) should return 6.  It returned {} instead.\".format(tetrahedral_number(2))\nassert     tetrahedral_number(3) == 10, \\\n            \"The function tetrahedral_number(3) should return 10.  It returned {} instead.\".format(tetrahedral_number(3))\nassert     tetrahedral_number(4) == 12, \\\n            \"The function tetrahedral_number(4) should return 12.  It returned {} instead.\".format(tetrahedral_number(4))\nassert     tetrahedral_number(5) == 14, \\\n            \"The function tetrahedral_number(5) should return 14.  It returned {} instead.\".format(tetrahedral_number(5))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(1) == 1, \"tetrahedral_number(1) = 1\"\nassert     tetrahedral_number(2) == 6, \"tetrahedral_number(2) = 6\"\nassert     tetrahedral_number(3) == 18, \"tetrahedral_number(3) = 18\"\nassert     tetrahedral_number(4) == 60, \"tetrahedral_number(4) = 60\"\nassert     tetrahedral_number(5) == 252, \"tetrahedral_number(5) = 252\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(10) == 27, 'Wrong result!'\n\n\ndef is_prime(n): \n    '''\n    Write a function to check whether a number is prime.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nvolume_sphere(1) == 4.1886792452830145 # correct answer is 4.1886792452830145\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_sphere(1)==math.pi*4, 'The result is incorrect'\nassert volume_sphere(0)==math.pi, 'The result is incorrect'\n\ndef number_sphere(n):\n    '''\n    Write a function that calculates the surface area of a sphere\n    for given radius.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_sphere(2.5) == 78.534, \\\n    'Wrong value.'\n\nprint('''\nTest passed:\n\nYour function is correct.\n''')\n\nprint('''\nIf you want to try to understand how to write a function, \nplease refer to the example below:''')\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert volume_sphere(1) == math.pi * 4, 'wrong value of volume_sphere'\nassert volume_sphere(0) == 0, 'wrong value of volume_sphere'\nassert volume_sphere(2.1) == 0, 'wrong value of volume_sphere'\nassert volume_sphere(-1) == 0, 'wrong value of volume_sphere'\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_sphere(2) == 108.958, \n        \"Expected: 108.958, got: {}\".format(volume_sphere(2))\nassert     volume_sphere(3) == 5235.912, \n        \"Expected: 5235.912, got: {}\".format(volume_sphere(3))\nassert     volume_sphere(4) == 5038.037, \n        \"Expected: 5038.037, got: {}\".format(volume_sphere(4))\nassert     volume_sphere(5) == 2143.923, \n        \"Expected: 2143.923, got: {}\".format(volume_sphere(5))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_sphere(5) == 100\nassert     volume_sphere(3.0) == 27.841\nassert     volume_sphere(0.1) == 0\nassert     volume_sphere(-5) == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert volume_sphere(0) == 0, 'Expected zero, got %g.' % volume_sphere(0)\nassert volume_sphere(1) == 4./3.*math.pi, 'Expected 4/3*pi, got %g.' % volume_sphere(1)\nassert volume_sphere(2) == 4./3.*math.pi*2, 'Expected 4/3*pi*2, got %g.' % volume_sphere(2)\nassert volume_sphere(3) == 4./3.*math.pi*3, 'Expected 4/3*pi*3, got %g.' % volume_sphere(3)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char('python') == 'p'\nassert     get_Char('hello') == 'h'\nassert     get_Char('world') == 'w'\nassert     get_Char('spam') =='s'\nassert     get_Char('py') == 'y'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"Hello World\") == 1001101011101110111011\nassert     get_Char(\"John Smith\") == 1240\nassert     get_Char(\"Able was I, ere I saw Elba\") == 109194\nassert     get_Char(\"\") == None\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"Hello\") == 57\nassert     get_Char(\"The\") == 97\nassert     get_Char(\"Sasha\") == 104\nassert     get_Char(\"Shubham\") == 104\nassert     get_Char(\"\") == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char('Armenia') ==  208\nassert     get_Char('hello') ==  148\nassert     get_Char('') ==     None\nassert     get_Char(123) ==     None"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char('abcdefghijklmnopqrstuvwxyz') == 'a0b1c2d3e4f5g6h7i8j9k10m11n12o13p14q15r16s17u18v19w20x21y22z23aa', 'get_Char() failed'\nassert     get_Char('abcdefghijklmnopqrstuvwxyz') == 'a3b4c5d6e7f8g9h10i11j12k13l14m15n16o17p18q19r20s21u22v23w24x25y26z27aa', 'get_Char() failed'"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char('abc') == 5\nassert     get_Char('aac') == 0\nassert     get_Char('aacac') == 12\nassert     get_Char('aacacba') == 12\nassert     get_Char('a') == 27\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char(\"hello\") == 26, \"Test 1 Failed\"\nassert     get_Char(\"love\") == 23, \"Test 2 Failed\"\nassert     get_Char(\"\") == 0, \"Test 3 Failed\"\nassert     get_Char(\"A\") == 13, \"Test 4 Failed\"\nassert     get_Char(\"a\") == 6, \"Test 5 Failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(\"AA\") == (97+65) % 26 == 97\nassert     get_Char(\"AB\") == (97+66) % 26 == 97\nassert     get_Char(\"abc\") == (97+66+65) % 26 == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char(\"Hello\") == 93\nassert     get_Char(\"z\") == 25\nassert     get_Char(\"m\") == 109\nassert     get_Char(\"a\") == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char('a')== 97\nassert     get_Char('b')== 98\nassert     get_Char('c')== 99\nassert     get_Char('d')== 100\nassert     get_Char('e')== 101\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 4\nassert     sequence(4) == 7\nassert     sequence(5) == 14\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequence(1) == 1, 'Wrong output'\nassert     sequence(2) == 4, 'Wrong output'\nassert     sequence(3) == 7, 'Wrong output'\nassert     sequence(4) == 10, 'Wrong output'\nassert     sequence(5) == 13, 'Wrong output'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert sequence(1) == 1\nassert sequence(2) == 2\nassert sequence(3) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('Test for sequence()')\nprint('sequence(0) = 0, Expected: 0, Actual: {}'.format(sequence(0)))\nprint('sequence(1) = 1, Expected: 1, Actual: {}'.format(sequence(1)))\nprint('sequence(2) = 2, Expected: 2, Actual: {}'.format(sequence(2)))\nprint('sequence(10) = 99, Expected: 99, Actual: {}'.format(sequence(10)))\nprint('sequence(12) = 216, Expected: 216, Actual: {}'.format(sequence(12)))\nprint('sequence(20) = 34567, Expected: 34567, Actual: {}'.format(sequence(20)))\nprint('sequence(30) = 7856, Expected: 7856, Actual: {}'.format(sequence(30)))\nprint('sequence(40) = 123450, Expected: 123450, Actual: {}'.format(sequence(40)))\nprint('sequence(50) = 154396, Expected: 154396, Actual: {}'.format(sequence(50)))\nprint('sequence(60) = 246850, Expected: 246850, Actual: {}'.format(sequence(60)))\nprint('sequence(70) = 382856, Expected: 382856, Actual: {}'.format(sequence(70)))\nprint('sequence(80) = 487456, Expected: 487456, Actual: {}'.format(sequence(80)))\nprint('sequence(90) = 587856, Expected: 587856, Actual: {}'.format(sequence(90)))\nprint('sequence(100) = 6879856, Expected: 6879856, Actual: {}'.format(sequence(100)))\nprint('sequence(110) = 8597856, Expected: 8597856, Actual: {}'.format(sequence(110)))\nprint('sequence(120) = 9397856, Expected: 9397856, Actual: {}'.format(sequence(120)))\nprint('sequence(130) = 10297856, Expected: 10297856, Actual: {}'.format(sequence(130)))\nprint('sequence(140) = 11497856, Expected: 11497856, Actual: {}'.format(sequence(140)))\nprint('sequence(150) = 12997856, Expected: 12997856, Actual: {}'.format(sequence(150)))\nprint('sequence(160) = 13797856, Expected: 13797856, Actual: {}'.format(sequence(160)))\nprint('sequence(170) = 14597856, Expected: 14597856, Actual: {}'.format(sequence(170)))\nprint('sequence(180) = 15397856, Expected: 15397856, Actual: {}'.format(sequence(180)))\nprint('sequence(190) = 16297856, Expected: 16297856, Actual: {}'.format(sequence(190)))\nprint('sequence(200) = 17197856, Expected: 17197856, Actual: {}'.format(sequence(200)))\nprint('sequence(210) = 18107856, Expected: 18107856, Actual: {}'.format(sequence(210)))\nprint('sequence(220) = 19197856, Expected: 19197856, Actual: {}'.format(sequence(220)))\nprint('sequence(230) = 21897856, Expected: 21897856, Actual: {}'.format(sequence(230)))\nprint('sequence(240) = 23797856, Expected: 23797856, Actual: {}'.format(sequence(240)))\nprint('sequence(250) = 24597856, Expected: 24597856, Actual: {}'.format(sequence(250)))\nprint('sequence(260) = 25397856, Expected: 25397856, Actual: {}'.format(sequence(260)))\nprint('sequence(270) = 26297856, Expected: 26297856, Actual: {}'.format(sequence(270)))\nprint('sequence(280) = 27197856, Expected: 27197856, Actual: {}'.format(sequence(280)))\nprint('sequence(290) = 28107856, Expected: 28107856, Actual: {}'.format(sequence(290)))\nprint('sequence(300) = 29107856, Expected: 29107856, Actual: {}'.format(sequence(300)))\nprint('sequence(310) = 299797856, Expected: 299797856, Actual: {}'.format(sequence(310)))\nprint('sequence(320) = 30797856, Expected: 30797856, Actual: {}'.format(sequence(320)))\nprint('sequence(330) = 31597856, Expected: 31597856, Actual: {}'.format(sequence(330)))\nprint('sequence(340) = 32397856, Expected: 32397856, Actual: {}'.format(sequence(340)))\nprint('sequence(350) = 34297856, Expected: 34297856, Actual: {}'.format(sequence(350)))\nprint('sequence(360) = 35197856, Expected: 35197856, Actual: {}'.format(sequence(360)))\nprint('sequence(370) = 36097856, Expected: 36097856, Actual: {}'.format(sequence(370)))\nprint('sequence(380) = 37897856, Expected: 37897856, Actual: {}'.format(sequence(380)))\nprint('sequence(390) = 38797856, Expected: 38797856, Actual: {}'.format(sequence(390)))\nprint('sequence(400) = 39597856, Expected: 39597856, Actual: {}'.format(sequence(400)))\nprint('sequence(410) = 39997856, Expected: 39997856, Actual: {}'.format(sequence(410)))\nprint('sequence(420) = 40797856, Expected: 40797856, Actual: {}'.format(sequence(420)))\nprint('sequence(430) = 41597856, Expected: 41597856, Actual: {}'.format(sequence(430)))\nprint('sequence(440) = 42397856, Expected: 42397856, Actual: {}'.format(sequence(440)))\nprint('sequence(450) = 44297856, Expected: 44297856, Actual: {}'.format(sequence(450)))\nprint('sequence(460) = 45197856, Expected: 45197856, Actual: {}'.format(sequence(460)))\nprint('sequence(470) = 46097856, Expected: 46097856, Actual: {}'.format(sequence(470)))\nprint('sequence(480) = 47897856, Expected: 47897856, Actual: {}'.format(sequence(480)))\nprint('sequence(490) = 48797856, Expected: 48797856, Actual: {}'.format(sequence(490)))\nprint('sequence(500) = 4997856, Expected: 4997856, Actual: {}'.format(sequence(500)))\nprint('sequence(510) = 50797856, Expected: 50797856, Actual: {}'.format(sequence(510)))\nprint('sequence(520) = 51597856, Expected: 51597856, Actual: {}'.format(sequence(520)))\nprint('sequence(530) = 52397856, Expected: 52397856, Actual: {}'.format(sequence(530)))\nprint('sequence(540) = 54297856, Expected: 54297856, Actual: {}'.format(sequence(540)))\nprint('sequence(550) = 55197856, Expected: 55197856, Actual: {}'.format(sequence(550)))\nprint('sequence(560) = 56097856, Expected: 56097856, Actual: {}'.format(sequence(560)))\nprint('sequence(570) = 57897856, Expected: 57897856, Actual: {}'.format(sequence(570)))\nprint('sequence(580) = 5797856, Expected: 5797856, Actual: {}'.format(sequence(580)))\nprint('sequence(590) = 5897856, Expected: 5897856, Actual: {}'.format(sequence(590)))\nprint('sequence(600) = 5997856, Expected: 5997856, Actual: {}'.format(sequence(600)))\nprint('sequence(610) = 6097856, Expected: 6097856, Actual: {}'.format(sequence(610)))\nprint('sequence(620) = 61597856, Expected: 61597856, Actual: {}'.format(sequence(620)))\nprint('sequenc"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sequence(2) == 2\nassert     sequence(5) == 5\nassert     sequence(10) == 25\nassert     sequence(20) == 115\nassert     sequence(100) == 1025\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    sequence(0) == 1\nassert \n    sequence(1) == 2\nassert \n    sequence(2) == 4\nassert \n    sequence(3) == 7\nassert \n    sequence(4) == 10\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(5) == 8\nassert     sequence(10) == 12\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi\nassert surfacearea_sphere(2) == 4 * math.pi\nassert surfacearea_sphere(3) == 4 * math.pi\nassert surfacearea_sphere(4) == 4 * math.pi\nassert surfacearea_sphere(5) == 4 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef volume_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(3.5) == 56, \"incorrect\"\nassert     surfacearea_sphere(2.5) == 33, \"incorrect\"\nassert     surfacearea_sphere(1) == 28, \"incorrect\"\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(4) == (56.0)\nassert     surfacearea_sphere(3.4) == (61.0664)\nassert     surfacearea_sphere(0.5) == (12.566370614359172)\nassert     surfacearea_sphere(1) == (28.566370614359172)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"Success\")"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(2) == 28, 'incorrect surface area for sphere'\nassert surfacearea_sphere(3) == 50, 'incorrect surface area for sphere'\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(1) == 4, \"surfacearea_sphere is wrong\"\nassert     surfacearea_sphere(2) == 12, \"surfacearea_sphere is wrong\"\nassert     surfacearea_sphere(3) == 48, \"surfacearea_sphere is wrong\"\nassert     surfacearea_sphere(4) == 132, \"surfacearea_sphere is wrong\"\nassert     surfacearea_sphere(5) == 196, \"surfacearea_sphere is wrong\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef vol_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sphere_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef volume_pyramid(l, b, h):\n    '''\n    Write a function to find the volume of a pyramid\n    with lengths l, b, h.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     centered_hexagonal_number(0) == 1, \\\n        'centered_hexagonal_number(0) == 1 should be True'\nassert     centered_hexagonal_number(1) == 4, \\\n        'centered_hexagonal_number(1) == 4 should be True'\nassert     centered_hexagonal_number(2) == 7, \\\n        'centered_hexagonal_number(2) == 7 should be True'\nassert     centered_hexagonal_number(3) == 10, \\\n        'centered_hexagonal_number(3) == 10 should be True'\nassert     centered_hexagonal_number(4) == 15, \\\n        'centered_hexagonal_number(4) == 15 should be True'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 4\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(5) == 6\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 5\ncentered_hexagonal_number(3) == 11\ncentered_hexagonal_number(4) == 29\ncentered_hexagonal_number(5) == 65\ncentered_hexagonal_number(6) == 125\ncentered_hexagonal_number(7) == 217\ncentered_hexagonal_number(8) == 441\ncentered_hexagonal_number(9) == 765\ncentered_hexagonal_number(10) == 1201\ncentered_hexagonal_number(11) == 3185\ncentered_hexagonal_number(12) == 6497\ncentered_hexagonal_number(13) == 12349\ncentered_hexagonal_number(14) == 38839\ncentered_hexagonal_number(15) == 87089\ncentered_hexagonal_number(16) == 167499\ncentered_hexagonal_number(17) == 549237\ncentered_hexagonal_number(18) == 109857\ncentered_hexagonal_number(19) == 438621\ncentered_hexagonal_number(20) == 973341\ncentered_hexagonal_number(21) == 5654729\ncentered_hexagonal_number(22) == 154130805\ncentered_hexagonal_number(23) == 62223829\ncentered_hexagonal_number(24) == 126264969\ncentered_hexagonal_number(25) == 644477829\ncentered_hexagonal_number(26) == 1327833807\ncentered_hexagonal_number(27) == 617747829\ncentered_hexagonal_number(28) == 1063754633\ncentered_hexagonal_number(29) == 4084678889\ncentered_hexagonal_number(30) == 9457923623\ncentered_hexagonal_number(31) == 3912181167\ncentered_hexagonal_number(32) == 8789327229\ncentered_hexagonal_number(33) == 3185380217\ncentered_hexagonal_number(34) == 6182229227\ncentered_hexagonal_number(35) == 1089756561\ncentered_hexagonal_number(36) == 438540843\ncentered_hexagonal_number(37) == 973339987\ncentered_hexagonal_number(38) == 565447409\ncentered_hexagonal_number(39) == 1541307809\ncentered_hexagonal_number(40) == 622239601\ncentered_hexagonal_number(41) == 1262653789\ncentered_hexagonal_number(42) == 644477621\ncentered_hexagonal_number(43) == 1327807633\ncentered_hexagonal_number(44) == 617771821\ncentered_hexagonal_number(45) == 1096328923\ncentered_hexagonal_number(46) == 399154093\ncentered_hexagonal_number(47) == 878987929\ncentered_hexagonal_number(48) == 318532841\ncentered_hexagonal_number(49) == 618258729\ncentered_hexagonal_number(50) == 1089756509\ncentered_hexagonal_number(51) == 4084502737\ncentered_hexagonal_number(52) == 973339987\ncentered_hexagonal_number(53) == 565446421\ncentered_hexagonal_number(54) == 154130805\ncentered_hexagonal_number(55) == 622239601\ncentered_hexagonal_number(56) == 1262653789\ncentered_hexagonal_number(57) == 644477621\ncentered_hexagonal_number(58) == 1327807633\ncentered_hexagonal_number(59) == 617747829\ncentered_hexagonal_number(60) == 1063754633\ncentered_hexagonal_number(61) == 3912181167\ncentered_hexagonal_number(62) == 8789327229\ncentered_hexagonal_number(63) == 3185380217\ncentered_hexagonal_number(64) == 6182229227\ncentered_hexagonal_number(65) == 1089756561\ncentered_hexagonal_number(66) == 408450843\ncentered_hexagonal_number(67) == 973339987\ncentered_hexagonal_number(68) == 565447409\ncentered_hexagonal_number(69) == 1541307809\ncentered_hexagonal_number(70) == 622239601\ncentered_hexagonal_number(71) == 1262654709\ncentered_hexagonal_number(72) == 644477829\ncentered_hexagonal_number(73) == 1327833807\ncentered_hexagonal_number(74) == 617747829\ncentered_hexagonal_number(75) == 1063754633\ncentered_hexagonal_number(76) == 3912181167\ncentered_hexagonal_number(77) == 8789327229\ncentered_hexagonal_number(78) == 3185380217\ncentered_hexagonal_number(79) == 6182229227\ncentered_hexagonal_number(80) == 1089756561\ncentered_hexagonal_number(81) == 408450843\ncentered_hexagonal_number(82) == 973339987\ncentered_hexagonal_number(83) == 565447409\ncentered_hexagonal_number(84) == 1541307809\ncentered_hexagonal_number(85) == 622239601\ncentered_hexagonal_number(86) == 1262653789\ncentered_hexagonal_number(87) == 644477621\ncentered_hexagonal_number(88) == 1327807633\ncentered_hexagonal_number(89) == 617747829\ncentered_hexagonal_number(90) == 1063754633\ncentered_hexagonal_number(91) == 3912181167\ncentered_hexagonal_number(92) == 8789327229\ncentered_hexagonal_number(93) == 3185380217\ncentered_hexagonal_number(94) == 6182229227\ncentered_hexagonal_number(95) == 1089756561\ncentered_hexagonal_number(96) == 408450843\ncentered_hexagonal_number(97) == 973339987\ncentered_hexagonal_number(98) == 565447409\ncentered_hexagonal_number(99) == 1541307809\ncentered_hexagonal_number(100) == 622239601\ncentered_hexagonal_number(101) == 1262654709\ncentered_hexagonal_number(102) == 644477829\ncentered_hexagonal_number(103) == 1327833807\ncentered_hexagonal_number(104) == 617747829\ncentered_hexagonal_number(105) == 1063754633\ncentered_hexagonal_number(106) == 3912181167\ncentered_hexagonal_number(107) == 8789327229\ncentered_hexagonal_number(108) == 3185380217\ncentered_hexagonal_number(109) == 6182229227\ncentered_hexagonal_number(110) == 1089756561\ncentered_hexagonal_number(111) == 408450843\ncentered_hexagonal_number(112) == 973339987\ncentered_hexagonal_number(113) == 565447409\ncentered_hexagonal_number(114) == 1541307809\ncentered_hexagonal_number(115) == 622239601\ncentered_hexagonal_number(116) == 1262653789\ncentered_hexagonal_number(117) == 644477621\ncentered_hexagonal_number(118) == 1327833807\ncentered_hexagonal_number(119) == 617747829\ncentered_hexagonal_number(120) == 1063754633\ncentered_hexagonal_number(121) == 3912181167\ncentered_hexagonal_number(122) == 8789327229\ncentered_hexagonal_number(123) == 3185380217\ncentered_hexagonal_number(124) == 6182229227\ncentered_hexagonal_number(125) == 1089756561\ncentered_hexagonal_number(126) == 408450843\ncentered_hexagonal_number(127) == 973339987\ncentered_hexagonal_number(128) == 565447409\ncentered_hexagonal_number(129) == 1541307809\ncentered_hexagonal_number(130) == 622239601\ncentered_hexagonal_number(131) == 1262654709\ncentered_hexagonal_number(132) == 64447782"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 3\ncentered_hexagonal_number(3) == 5\ncentered_hexagonal_number(4) == 7\ncentered_hexagonal_number(5) == 11\ncentered_hexagonal_number(6) == 13\ncentered_hexagonal_number(7) == 15\ncentered_hexagonal_number(8) == 19\ncentered_hexagonal_number(9) == 23\ncentered_hexagonal_number(10) == 27\ncentered_hexagonal_number(11) == 31\ncentered_hexagonal_number(12) == 37\ncentered_hexagonal_number(13) == 41\ncentered_hexagonal_number(14) == 45\ncentered_hexagonal_number(15) == 49\ncentered_hexagonal_number(16) == 53\ncentered_hexagonal_number(17) == 57\ncentered_hexagonal_number(18) == 61\ncentered_hexagonal_number(19) == 65\ncentered_hexagonal_number(20) == 69\ncentered_hexagonal_number(21) == 73\ncentered_hexagonal_number(22) == 77\ncentered_hexagonal_number(23) == 81\ncentered_hexagonal_number(24) == 85\ncentered_hexagonal_number(25) == 89\ncentered_hexagonal_number(26) == 93\ncentered_hexagonal_number(27) == 97\ncentered_hexagonal_number(28) == 101\ncentered_hexagonal_number(29) == 105\ncentered_hexagonal_number(30) == 109\ncentered_hexagonal_number(31) == 113\ncentered_hexagonal_number(32) == 117\ncentered_hexagonal_number(33) == 121\ncentered_hexagonal_number(34) == 125\ncentered_hexagonal_number(35) == 129\ncentered_hexagonal_number(36) == 133\ncentered_hexagonal_number(37) == 137\ncentered_hexagonal_number(38) == 141\ncentered_hexagonal_number(39) == 145\ncentered_hexagonal_number(40) == 149\ncentered_hexagonal_number(41) == 153\ncentered_hexagonal_number(42) == 157\ncentered_hexagonal_number(43) == 161\ncentered_hexagonal_number(44) == 165\ncentered_hexagonal_number(45) == 169\ncentered_hexagonal_number(46) == 173\ncentered_hexagonal_number(47) == 177\ncentered_hexagonal_number(48) == 181\ncentered_hexagonal_number(49) == 185\ncentered_hexagonal_number(50) == 189\ncentered_hexagonal_number(51) == 193\ncentered_hexagonal_number(52) == 197\ncentered_hexagonal_number(53) == 201\ncentered_hexagonal_number(54) == 205\ncentered_hexagonal_number(55) == 209\ncentered_hexagonal_number(56) == 213\ncentered_hexagonal_number(57) == 217\ncentered_hexagonal_number(58) == 221\ncentered_hexagonal_number(59) == 225\ncentered_hexagonal_number(60) == 229\ncentered_hexagonal_number(61) == 233\ncentered_hexagonal_number(62) == 237\ncentered_hexagonal_number(63) == 241\ncentered_hexagonal_number(64) == 245\ncentered_hexagonal_number(65) == 249\ncentered_hexagonal_number(66) == 253\ncentered_hexagonal_number(67) == 257\ncentered_hexagonal_number(68) == 261\ncentered_hexagonal_number(69) == 265\ncentered_hexagonal_number(70) == 269\ncentered_hexagonal_number(71) == 273\ncentered_hexagonal_number(72) == 277\ncentered_hexagonal_number(73) == 281\ncentered_hexagonal_number(74) == 285\ncentered_hexagonal_number(75) == 289\ncentered_hexagonal_number(76) == 293\ncentered_hexagonal_number(77) == 297\ncentered_hexagonal_number(78) == 301\ncentered_hexagonal_number(79) == 305\ncentered_hexagonal_number(80) == 309\ncentered_hexagonal_number(81) == 313\ncentered_hexagonal_number(82) == 317\ncentered_hexagonal_number(83) == 321\ncentered_hexagonal_number(84) == 325\ncentered_hexagonal_number(85) == 329\ncentered_hexagonal_number(86) == 333\ncentered_hexagonal_number(87) == 337\ncentered_hexagonal_number(88) == 341\ncentered_hexagonal_number(89) == 345\ncentered_hexagonal_number(90) == 349\ncentered_hexagonal_number(91) == 353\ncentered_hexagonal_number(92) == 357\ncentered_hexagonal_number(93) == 361\ncentered_hexagonal_number(94) == 365\ncentered_hexagonal_number(95) == 369\ncentered_hexagonal_number(96) == 373\ncentered_hexagonal_number(97) == 377\ncentered_hexagonal_number(98) == 381\ncentered_hexagonal_number(99) == 385\ncentered_hexagonal_number(100) == 389\ncentered_hexagonal_number(101) == 393\ncentered_hexagonal_number(102) == 397\ncentered_hexagonal_number(103) == 401\ncentered_hexagonal_number(104) == 405\ncentered_hexagonal_number(105) == 409\ncentered_hexagonal_number(106) == 413\ncentered_hexagonal_number(107) == 417\ncentered_hexagonal_number(108) == 421\ncentered_hexagonal_number(109) == 425\ncentered_hexagonal_number(110) == 429\ncentered_hexagonal_number(111) == 433\ncentered_hexagonal_number(112) == 437\ncentered_hexagonal_number(113) == 441\ncentered_hexagonal_number(114) == 445\ncentered_hexagonal_number(115) == 449\ncentered_hexagonal_number(116) == 453\ncentered_hexagonal_number(117) == 457\ncentered_hexagonal_number(118) == 461\ncentered_hexagonal_number(119) == 465\ncentered_hexagonal_number(120) == 469\ncentered_hexagonal_number(121) == 473\ncentered_hexagonal_number(122) == 477\ncentered_hexagonal_number(123) == 481\ncentered_hexagonal_number(124) == 485\ncentered_hexagonal_number(125) == 489\ncentered_hexagonal_number(126) == 493\ncentered_hexagonal_number(127) == 497\ncentered_hexagonal_number(128) == 501\ncentered_hexagonal_number(129) == 505\ncentered_hexagonal_number(130) == 509\ncentered_hexagonal_number(131) == 513\ncentered_hexagonal_number(132) == 517\ncentered_hexagonal_number(133) == 521\ncentered_hexagonal_number(134) == 525\ncentered_hexagonal_number(135) == 529\ncentered_hexagonal_number(136) == 533\ncentered_hexagonal_number(137) == 537\ncentered_hexagonal_number(138) == 541\ncentered_hexagonal_number(139) == 545\ncentered_hexagonal_number(140) == 549\ncentered_hexagonal_number(141) == 553\ncentered_hexagonal_number(142) == 557\ncentered_hexagonal_number(143) == 561\ncentered_hexagonal_number(144) == 565\ncentered_hexagonal_number(145) == 569\ncentered_hexagonal_number(146) == 573\ncentered_hexagonal_number(147) == 577\ncentered_hexagonal_number(148) == 581\ncentered_hexagonal_number(149) == 585\ncentered_hexagonal_number(150) == 589\ncentered_hexagonal_number(151) == 593\ncentered_hexagonal_number(152) == 597\ncentered_hexagonal_number(153) == 601\ncentered_hexagonal_number(154) == 605\ncentered_hexagonal_number(155) == 609\ncentered_hexagonal_number(156) == 613\ncentered_hexagonal_number(157) == 617\ncentered_hexagonal_number(158) == 621\ncentered_hexagonal_number(159) == 625\ncentered_hexagonal_number(160) == 629\ncentered_hexagonal_number(161) == 633\ncentered_hexagonal_number(162) == 637\ncentered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 5\nassert     centered_hexagonal_number(4) == 7\nassert     centered_hexagonal_number(5) == 9\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncentered_hexagonal_number(0) == 1\ncentered_hexagonal_number(1) == 3\ncentered_hexagonal_number(2) == 5\ncentered_hexagonal_number(3) == 7\ncentered_hexagonal_number(4) == 9\n\nprint(\"All tests passed for centered_hexagonal_number()\")\n\ndef centered_hexagonal_number2(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(1) == 0\nassert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(3) == 1\nassert     centered_hexagonal_number(4) == 2\nassert     centered_hexagonal_number(5) == 3\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    centered_hexagonal_number(10) == 28\n    centered_hexagonal_number(20) == 92\n    centered_hexagonal_number(30) == 162\n    centered_hexagonal_number(40) == 284\n    centered_hexagonal_number(50) == 448\n    centered_hexagonal_number(60) == 680\n    centered_hexagonal_number(70) == 896\n    centered_hexagonal_number(80) == 1680\n    centered_hexagonal_number(90) == 2560\n    centered_hexagonal_number(100) == 4032\n    centered_hexagonal_number(1000) == 48384\n    centered_hexagonal_number(10000) == 9270480\n    centered_hexagonal_number(100000) == 98784288\n    centered_hexagonal_number(1000000) == 1026731200\n    centered_hexagonal_number(10000000) == 10282015872000\n    centered_hexagonal_number(100000000) == 102918975281344\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    import sys\n    import io\n    def readlines():\n        for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):\n            yield line.strip('\\n')\n\n    lines = readlines()\n    while True:\n        try:\n            line = next(lines)\n            n = int(line);\n\n            ret = centered_hexagonal_number(n)\n\n            out = str(ret);\n            print(out)\n        except StopIteration:\n            brea"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncentered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(2) == 3\nassert centered_hexagonal_number(3) == 7\nassert centered_hexagonal_number(4) == 15\nassert centered_hexagonal_number(5) == 28\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({1: 10, 2: 20, 3: 30},{4: 40, 5: 50, 6: 60}, {7: 70, 8: 80, 9: 90}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60, 7: 70, 8: 80, 9: 90}\nassert     merge_dictionaries_three({1: 10, 2: 20},{3: 30, 4: 40}, {5: 50, 6: 60}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\nassert     merge_dictionaries_three({1: 10, 2: 20, 3: 30},{4: 40, 5: 50, 6: 60}, {7: 70, 8: 80, 9: 90}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60, 7: 70, 8: 80, 9: 90}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({'x':1,'y':2},{'x':1,'y':2},{'z':2}) == {'x':1,'y':2,'z':2},'should merge 3 dictionaries and return' \\\n            ' new dictionary'\nassert     merge_dictionaries_three({'x':1,'y':2},{'x':1,'y':2},{'x':2}) == {'x':2,'y':2},'should merge 3 dictionaries and return' \\\n            ' new dictionary'\nassert     merge_dictionaries_three({'x':1,'y':2},{'x':2,'y':2},{'z':2}) == {'x':2,'y':2,'z':2},'should merge 3 dictionaries and return' \\\n            ' new dictionary'\nassert     merge_dictionaries_three({'x':1,'y':2},{'x':2,'y':2},{'x':1,'z':2}) == {'x':1,'y':2,'z':2},'should merge 3 dictionaries and return' \\\n            ' new dictionary'\n\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({\"a\":1,\"b\":2}, {\"c\":3}, {\"d\":4, \"e\":5}) == {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}, \"fail\"\nassert     merge_dictionaries_three({\"a\":1, \"b\":2}, {\"c\":3, \"d\":4}, {\"e\":5}) == {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}, \"fail\"\nassert     merge_dictionaries_three({\"a\":1}, {\"c\":3}, {\"b\":2, \"d\":4, \"e\":5}) == {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}, \"fail\"\nassert     merge_dictionaries_three({\"a\":1, \"b\":2}, {\"c\":3}, {\"d\":4, \"e\":5}) == {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}, \"fail\"\nassert     merge_dictionaries_three({\"a\":1, \"b\":2}, {\"c\":3}, {\"d\":4, \"e\":5, \"f\":6}) == {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6}, \"fail\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({1:1, 2:2, 3:3}, {2:2, 3:3, 4:4}, {3:3, 4:4, 5:5}) == {1:1, 2:2, 3:3, 4:4, 5:5}\n\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({'a':1,'b':2},{'b':2,'c':3},{'a':1,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three(dict1 = {\"a\":1,\"b\":2}, dict2 = {\"c\":3,\"d\":4}, dict3 = {\"e\":5,\"f\":6}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}\nassert     merge_dictionaries_three(dict1 = {\"a\":1,\"b\":2}, dict2 = {\"c\":3,\"d\":4}, dict3 = {\"c\": 5, \"d\": 6}) == {\"a\": 1, \"b\": 2, \"c\": 5, \"d\": 6}\n\ndef find_key_value_pairs_sum_of_two_dictionaries(dict1,dict2):\n    '''\n    Write a function to find all key-value pairs in both dictionaries.\n    '''\n    pass\n\nassert     find_key_value_pairs_sum_of_two_dictionaries(dict1 = {\"a\":1,\"b\":2}, dict2 = {\"c\":3,\"d\":4}) == {\"a\": 1, \"b\": 2, \"d\": 4}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({\"a\":1}, {\"b\":2}, {\"c\":3}) == {\"a\":1, \"b\":2, \"c\":3}\nassert     merge_dictionaries_three({\"a\":1}, {\"b\":2, \"c\":3}, {\"b\":4, \"d\":5}) == {\"a\":1, \"b\":2, \"c\":3, \"b\":4, \"d\":5}\nassert     merge_dictionaries_three({\"a\":1, \"b\":2}, {\"c\":3, \"b\":4}, {\"a\":1, \"c\":3, \"d\":5}) == {\"a\":1, \"b\":2, \"c\":3, \"b\":4, \"d\":5}\nassert     merge_dictionaries_three({\"a\":1, \"b\":2}, {\"c\":3, \"b\":4}, {\"a\":1, \"c\":3, \"d\":5, \"e\":6}) == {\"a\":1, \"b\":2, \"c\":3, \"b\":4, \"d\":5, \"e\":6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({1: \"A\", 2: \"B\", 3: \"C\"}, {1: \"D\", 2: \"E\"}, {1: \"F\", 2: \"G\"}) == {1: \"A\", 2: \"B\", 3: \"C\", 1: \"D\", 2: \"E\", 3: \"F\", 4: \"G\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({1: 2, 3: 4}, {2: 5, 4: 6, 7: 8},{7: 9, 8: 10, 6: 11, 5: 12}) == {1: 2, 3: 4, 2: 5, 4: 6, 7: 9, 8: 10, 6: 11, 5: 12}\nassert     merge_dictionaries_three({1: 2, 3: 4}, {5: 6, 7: 8},{7: 9, 8: 10, 6: 11, 5: 12}) == {1: 2, 3: 4, 5: 6, 7: 9, 8: 10, 6: 11, 5: 12}\nassert     merge_dictionaries_three({1: 2, 3: 4}, {5: 6, 7: 8},{7: 9, 8: 10, 6: 11}) == {1: 2, 3: 4, 5: 6, 7: 9, 8: 10, 6: 11}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     freq_count([1,2,2,2,3,4]) == {1:2, 2:3, 3:2, 4:1}\nassert     freq_count([]) == {}\nassert     freq_count([1,1]) == {1:2}\nassert     freq_count([1,1,1,1,1,2,2,2]) == {1:6, 2:5}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert freq_count([1,2,3,4,5]) == {1:1,2:1,3:1,4:1,5:1}\nassert freq_count(['a','a','b','c']) == {'a':2, 'b':1, 'c':1}\nassert freq_count([1,2,3,4,5,5,3,2,1,1,3,5,4,5,2,2,4,5,5,2,1,2,3,3]) == {1:6, 2:5, 3:4, 4:3, 5:2}\nassert freq_count([1,2,3,4,5,1,1,3,1,2,1,1,1,1,1,1]) == {1:7, 2:6, 3:5, 4:4, 5:3}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count(['apple', 'apple', 'pear', 'pear', 'apple']) == {'apple': 3, 'pear': 2}\nassert     freq_count(['apple', 'apple', 'pear', 'pear', 'apple', 'orange', 'orange', 'pear']) == {'pear': 3, 'apple': 2, 'orange': 2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count([1,2,2,2,2,3]) == {2: 3, 3: 2, 2: 2, 1: 1, 4: 1}\n\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     freq_count([1,2,2,3,3,3,4,4,4,4,5]) == {1:2,2:3,3:3,4:4,5:1}\nassert     freq_count([]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     freq_count([3, 1, 3, 3, 3, 1, 3, 2]) == collections.Counter({3: 5, 1: 4, 2: 3})\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count([1,1,1,2,2,2,3]) == {1: 3, 2: 3, 3: 1}\n\ndef freq_count1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     freq_count([]) == {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0} == freq_count(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == True\nassert     freq_count([]) == {'a': 1, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0} == freq_count(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == True\n\ndef find_item(tup, item):\n    '''\n    Write a function that takes a tuple and an item and returns whether the item is in the tuple.\n    '''\n    pass\n\nassert find_item((1,2,3,4,5), 1) == True\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,2,3]) == {1:1, 2:1, 3:1}\nassert     freq_count([1,1,1]) == {1:3}\nassert     freq_count([1,2,3,3,3,3]) == {1:3, 2:3, 3:3}\nassert     freq_count([1,2,1,1,1,2,2,2]) == {1:6, 2:6}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count([1,2,3,4,5,6,7,7]) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1}\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef closest_num(N):\n    '''\n    This function will take an integer as input and return the closest smaller \n    number than N.\n    '''\n    if N == 0:\n        return N\n    if N < 0:\n        return 0\n    elif N <= 2:\n        return N - 1\n    else:\n        lst = []\n        for i in range(2, N + 1):\n            lst.append(i)\n        return min(lst, key=lambda x: abs(x - N))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_num(1) == 0\nassert     closest_num(10) == 1\nassert     closest_num(3) == 2\nassert     closest_num(4) == 2\nassert     closest_num(7) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_num(1)    == 0, 'Wrong result for 1.'\nassert     closest_num(3)    == 1, 'Wrong result for 3.'\nassert     closest_num(10)    == 2, 'Wrong result for 10.'\nassert     closest_num(12)    == 1, 'Wrong result for 12.'\nassert     closest_num(16)    == 3, 'Wrong result for 16.'\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_num(0) == 0\nassert     closest_num(1) == 1\nassert     closest_num(5) == 1\nassert     closest_num(10) == 2\nassert     closest_num(15) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    closest_num(1) == 0\n    closest_num(3) == 1\n    closest_num(4) == 1\n    closest_num(7) == 1\n    closest_num(6) == 2\n    closest_num(9) == 2\n    closest_num(100) == 3\n    closest_num(101) == 3\n    closest_num(10000) == 4\n    closest_num(10001) == 5\n    closest_num(100001) == 6\n    closest_num(1000001) == 7\n    closest_num(1000000) == 1\n    closest_num(100000000) == 2\n    closest_num(999999) == 2\n    closest_num(999999) == 2"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_num(8) == 7\nassert     closest_num(21) == 19\nassert     closest_num(15) == 14\nassert     closest_num(10) == 9\nassert     closest_num(3) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_num(0) == 0\nassert     closest_num(1) == 1\nassert     closest_num(3) == 1\nassert     closest_num(4) == 2\nassert     closest_num(5) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Use the main function here to test your implementation\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     len_log([]) == 0, \"Empty list\"\nassert     len_log([1, 2, 3]) == 3, \"Longest word is of length 3\"\nassert     len_log([]) == 0, \"Empty list\"\nassert     len_log([1, 2, 3, 4, 5]) == 4, \"Longest word is of length 4\"\nassert     len_log([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, \"Longest word is of length 10\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log([]) == 0, 'Empty List'\nassert     len_log([1]) == 1, 'One Element'\nassert     len_log(['a', 'b', 'c']) == 3, 'All Elements'\nassert     len_log(['a', 'b', 'c', 'd', 'e']) == 5, 'All Elements'\nassert     len_log(['a', 'b', 'c', 'd', 'e', 'f']) == 6, 'All Elements'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log([]) == 0, 'You should return 0 for the empty sequence'\nassert len_log([1,2,3,4]) == 4, 'Your function should return the length of the longest word'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log([]) == 0, 'Empty list'\nassert     len_log(['hello']) == 1, 'Single word'\nassert     len_log(['hello', 'hi']) == 2, 'Two words'\nassert     len_log(['hello', 'hi', '', 'coco']) == 3, 'Three words'\nassert     len_log(['hello', 'hi', '', 'coco', '', '', 'dog', '', 'cat']) == 6, 'All words'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     len_log([]) == 0, 'The list is empty'\nassert     len_log([1,2,3,4]) == 4, 'The list contains 4 elements'\nassert     len_log([]) == 0, 'The list is empty'\nassert     len_log([1]) == 1, 'The list contains only 1 element'\nassert     len_log([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 13, 'The list contains 13 elements'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     len_log([]) == 0\nassert    len_log([1,1,1]) == 3\nassert    len_log([1,'2',1]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([]) == 0, \"Expected 0, got 0\"\nassert     len_log(['it', 'is', 'the', 'best', 'programming', 'language']) == 7, \"Expected 7, got 7\"\nassert     len_log([\n        'it', 'is', 'the', 'best', 'programming', 'language',\n        'it', 'is', 'the', 'best', 'programming', 'language'\n    ]) == 9, \"Expected 9, got 9\"\nassert     len_log([\n        'it', 'is', 'the', 'best', 'programming', 'language',\n        'it', 'is', 'the', 'best', 'programming', 'language',\n        'it', 'is', 'the', 'best', 'programming', 'language'\n    ]) == 11, \"Expected 11, got 11\"\nassert     len_log([\n        'it', 'is', 'the', 'best', 'programming', 'language',\n        'it', 'is', 'the', 'best', 'programming', 'language',\n        'it', 'is', 'the', 'best', 'programming', 'language',\n        'it', 'is', 'the', 'best', 'programming', 'language'\n    ]) == 13, \"Expected 13, got 13\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     len_log([\"abc\", \"aba\", \"aaba\", \"ababa\"]) == 4, \"incorrect output\"\nassert     len_log([\"aa\", \"aa\"]) == 2, \"incorrect output\"\nassert     len_log([]) == 0, \"incorrect output\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring(\"this is a test string\",\"test\") == True, \"Error in function find_substring\"\nassert     find_substring(\"this is a test string\",\"is\") == False, \"Error in function find_substring\"\nassert     find_substring(\"this is a test string\",\"string\") == False, \"Error in function find_substring\"\nassert     find_substring(\"this is a test string\",\"t\") == False, \"Error in function find_substring\"\nassert     find_substring(\"this is a test string\",\"string\") == False, \"Error in function find_substring\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring(\"Hello\", \"he\") == True, \"Should return True\"\nassert     find_substring(\"Hello\", \"el\") == False, \"Should return False\"\nassert     find_substring(\"Hello\", \"hello\") == True, \"Should return True\"\nassert     find_substring(\"Hello\", \"Hell\") == False, \"Should return False\"\nassert     find_substring(\"Hello\", \"Helo\") == True, \"Should return True\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring('the', 'the') == True\nassert     find_substring('aa', 'a') == False\nassert     find_substring('the', 't') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring(str1 = 'a', sub_str = 'ab') == True\nassert     find_substring(str1 = 'a', sub_str = 'c') == False\nassert     find_substring(str1 = 'abc', sub_str = 'b') == True\nassert     find_substring(str1 = 'abc', sub_str = 'abc') == True\nassert     find_substring(str1 = 'abc', sub_str = 'bc') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_substring('bca', 'ab') == False\nassert     find_substring('bca', 'abc') == True\nassert     find_substring('bca', 'c') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_substring2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring('acvnjf', 'nf') == True\nassert     find_substring('acvnjf', 'vn') == False\nassert     find_substring('acvnjf', 'u') == False\n\ndef find_substring_lazy(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    Hints:\n        It is not a must that you use the index(), index() function in your solution, but if you need to use the index() function, please refer the following:\n        https://docs.python.org/3/library/stdtypes.html#string-methods\n    '''\n    pass"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_substring('abc','a') == True\nassert     find_substring('abc','abc') == True\nassert     find_substring('abc','ab') == False\nassert     find_substring('abc','abcd') == False\nassert     find_substring('abc','abcdc') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not find_substring(\"abc\",\"abc\")\nassert find_substring(\"abc\",\"abcd\")\nassert find_substring(\"abc\",\"abab\")\n\nprint(\"CORRECT\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_substring('hello', 'll') == True\nassert     find_substring('hello', 'goodbye') == False\nassert     find_substring('hello', 'hello') == True\nassert     find_substring('hello', 'helo') == False\nassert     find_substring('hello', 'hello world') == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_undulating(1) == True\nassert     is_undulating(2) == False\nassert     is_undulating(3) == True\nassert     is_undulating(4) == True\nassert     is_undulating(5) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(is_undulating(7))\nprint(is_undulating(12))\nprint(is_undulating(34))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not is_undulating(1)\nassert not is_undulating(2)\nassert is_undulating(3)\nassert is_undulating(4)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_undulating(2)    == True\nassert     is_undulating(4)    == True\nassert     is_undulating(5)    == False\nassert     is_undulating(10)    == True\nassert     is_undulating(11)    == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    is_undulating(5) == True\n    is_undulating(6) == True\n    is_undulating(1) == False\n    is_undulating(100) == False\n    is_undulating(300) == True\n    is_undulating(-5) == False\n    is_undulating(0) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(is_undulating(1))\nprint(is_undulating(2))\nprint(is_undulating(2.5))\nprint(is_undulating(3))\nprint(is_undulating(4))\nprint(is_undulating(4.5))\nprint(is_undulating(5))\nprint(is_undulating(6))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_undulating(12) == True\nassert is_undulating(-12) == False\nassert is_undulating(11) == True\nassert is_undulating(-11) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \npower(2, 3) == 8\nassert\npower(3, 2) == 9\nassert \n\ndef power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        result *= a\n        b -= 1\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(1,2) == 1*1\nassert     power(2,1) == 2*2\nassert     power(2,0) == 2*1\nassert     power(1,1) == 1*1\nassert     power(0,1) == 0*1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    power(2, 1) == 4\n    power(2, 2) == 4\n    power(2, 3) == 8\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power(2,1) == 2, \"2**1 = 2\"\nassert     power(2,2) == 4, \"2**2 = 4\"\nassert     power(2,3) == 8, \"2**3 = 8\"\nassert     power(2,4) == 16, \"2**4 = 16\"\nassert     power(3,1) == 3, \"3**1 = 3\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(2,3) == 8\nassert     power(2,3) == 8\nassert     power(2,0) == 1\nassert     power(2,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(2,3) == 8\nassert     power(4,3) == 64\nassert     power(2,1) == 2\nassert     power(5,1) == 5\nassert     power(8,1) == 8\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (power(2,3) == 8), \"power function is not working\"\nassert     (power(2,3) == 8), \"power function is not working\"\nassert     (power(2,3) == 8), \"power function is not working\"\nassert     (power(2,3) == 8), \"power function is not working\"\nassert     (power(2,3) == 8), \"power function is not working\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('\\n\\nPower function')\n\ndef power(a,b):\n    if b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n\nassert power(1,1) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(1,1) == 1\nassert     power(1,2) == 1\nassert     power(2,1) == 2\nassert     power(2,2) == 4\nassert     power(2,3) == 8\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power(2,3) == 8, \"2^3 = 8\"\nassert     power(0.5,2) == 1, \"0.5^2 = 1\"\nassert     power(0,2) == 0, \"0^2 = 0\"\nassert     power(2.1,2) == 4.4, \"2.1^2 = 4.4\"\nassert     power(2,2) == 4, \"2^2 = 4\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_minimum([(1, 3), (2, 2), (3, 1)]) == (1, 1)\nassert     index_minimum([(1, 3), (2, 2), (3, 2)]) == (1, 2)\nassert     index_minimum([(1, 3), (2, 2), (3, 3)]) == (1, 3)\nassert     index_minimum([(1, 3), (2, 2), (3, 2)]) == (2, 2)\nassert     index_minimum([(1, 3), (2, 2), (3, 2)]) == (3, 3)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_minimum([(1,2), (3,3), (1,1)]) == (1,1)\nassert     index_minimum([(3,2), (3,3), (1,1)]) == (3,2)\nassert     index_minimum([(2,3), (3,3), (1,1)]) == (2,3)\nassert     index_minimum([(1,3), (3,3), (1,1)]) == (1,3)\nassert     index_minimum([(2,3), (2,3), (1,1)]) == (2,3)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_minimum([('A', 2), ('B', 1), ('C', 1)]) == ('B', 1), 'Should return the smallest tuple'\nassert index_minimum([('B', 2), ('A', 1), ('C', 1)]) == ('B', 1), 'Should return the smallest tuple'\nassert index_minimum([('A', 1), ('B', 1), ('C', 1)]) == ('A', 1), 'Should return the smallest tuple'\nassert index_minimum([('A', 1), ('C', 1), ('B', 1)]) == ('A', 1), 'Should return the smallest tuple'\nassert index_minimum([('A', 2), ('B', 1), ('C', 1)], ('A', 2)) == ('A', 2), 'Should return the smallest tuple'\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_minimum(    [(1,4),(4,2),(2,1),(3,4),(4,1)])     == (1,1)\nassert     index_minimum(    [(1,4),(4,2),(2,1),(3,4),(4,1)])     == (4,1)\nassert     index_minimum(    [(1,4),(4,2),(2,1),(3,4),(4,1),(5,6)])     == (4,1)\nassert     index_minimum(    [(1,4),(4,2),(2,1),(3,4),(4,1),(5,6)])     == (4,1)\nassert     index_minimum(    [(1,4),(4,2),(2,1),(3,4),(4,1),(5,6),(6,8)])     == (4,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum(\n    [('A', 5), ('B', 2), ('C', 3), ('D', 4), ('E', 1), ('F', 2), ('G', 3)]) == ('E', 1), \"Fail\"\nassert     index_minimum(\n    [('A', 5), ('B', 2), ('C', 3), ('D', 4), ('E', 1), ('F', 2), ('G', 3)]) == ('A', 5), \"Fail\"\nassert     index_minimum(\n    [('A', 5), ('B', 2), ('C', 3), ('D', 4), ('E', 1), ('F', 2), ('G', 3)]) == ('G', 3), \"Fail\"\nassert     index_minimum(\n    [('A', 5), ('B', 2), ('C', 3), ('D', 4), ('E', 1), ('F', 2), ('G', 3)]) == ('F', 2), \"Fail\"\nassert     index_minimum(\n    [('A', 5), ('B', 2), ('C', 3), ('D', 4), ('E', 1), ('F', 2), ('G', 3)]) == ('C', 3), \"Fail\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nindex_minimum([(1,2), (2,0), (3,2), (5,2), (7,2), (8,1)]) == (2, 0)\nassert index_minimum([(1,2), (2,1), (3,2), (5,2), (7,2), (8,1)]) == (2, 0)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([(1,2),(2,3),(3,4)]) == (1,2)\nassert     index_minimum([(3,2),(2,1),(1,4)]) == (1,4)\nassert     index_minimum([(4,2),(2,3),(3,4)]) == (3,4)\nassert     index_minimum([(2,2),(2,3),(3,4)]) == (2,2)\nassert     index_minimum([(2,1),(2,3),(3,4)]) == (2,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    test_list = [(0, 10), (2, 0), (3, 3), (4, 4), (5, 5), (6, 6)]\n    assert index_minimum(test_list) == (4,4)\n    print('You are a smart cookie!')\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_minimum([(\"A\", 1), (\"B\", 1), (\"C\", 2), (\"D\", 2)]) ==     (\"A\", 1) \nassert     index_minimum([(\"A\", 1), (\"B\", 1), (\"C\", 2), (\"D\", 3)]) ==     (\"A\", 1) \nassert     index_minimum([(\"A\", 1), (\"B\", 1), (\"C\", 1), (\"D\", 2)]) ==     (\"A\", 1) \nassert     index_minimum([(\"A\", 1), (\"B\", 2), (\"C\", 2), (\"D\", 2)]) ==     (\"A\", 1) \nassert     index_minimum([(\"A\", 1), (\"B\", 1), (\"C\", 2), (\"D\", 3)]) ==     (\"B\", 2) \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([[1,2,3], [2,3,4], [3,4,5]]) == 1, 'find the length of the smallest list in a list of lists'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([]) == 0, \"find_min_length([]): returned %s (should be 0)\" % (Find_Min_Length([]))\nassert     Find_Min_Length([[]]) == 0, \"find_min_length([[]]): returned %s (should be 0)\" % (Find_Min_Length([[]]))\nassert     Find_Min_Length([[1,2,3,4]]) == 4, \"find_min_length([[1,2,3,4]]): returned %s (should be 4)\" % (Find_Min_Length([[1,2,3,4]]))\nassert     Find_Min_Length([[1,2,3,4], [5,6,7,8]]) == 2, \"find_min_length([[1,2,3,4], [5,6,7,8]]): returned %s (should be 2)\" % (Find_Min_Length([[1,2,3,4], [5,6,7,8]]))\nassert     Find_Min_Length([[1,2,3], [4,5,6], [7,8,9]]) == 2, \"find_min_length([[1,2,3], [4,5,6], [7,8,9]]): returned %s (should be 2)\" % (Find_Min_Length([[1,2,3], [4,5,6], [7,8,9]]))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min_Length([[],[[[]]],[[]]]) == 0\nassert     Find_Min_Length([[],[],[]]) == 0\nassert     Find_Min_Length([[],[[]],[[]]]) == 0\nassert     Find_Min_Length([[[[]]],[[]]]) == 0\nassert     Find_Min_Length([[[[]]],[[],[]]]) == 0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[2], [3], [1], [4]]) == 1\nassert     Find_Min_Length([[], [], []]) == 0\nassert     Find_Min_Length([[], [1]]) == 1\nassert     Find_Min_Length([[4], [3]]) == 1\nassert     Find_Min_Length([[4], [3,1]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[1,2,3],    [4,5],    [6,7,8]]    ) == 2\nassert    Find_Min_Length([[1,2],    [4],    [6,7,8]]) == 1\nassert    Find_Min_Length([[1,2],    [4,5],    [6,7,8]]    ) == 2\nassert Find_Min_Length([[1,2,3],    [4,5,6],    [7,8,9]]    ) == 1\nassert Find_Min_Length([[1,2],    [4,5,6],    [7,8,9]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1,2,3],[4,5,6,7],[8,9,10]]) == 3, 'Wrong answer'\nassert Find_Min_Length([[1,2,3],[4,5],[6,7,8]]) == 2, 'Wrong answer'\nassert Find_Min_Length([[1,2],[3,4,5],[6,7,8],[9,10,11,12]]) == 1, 'Wrong answer'\nassert Find_Min_Length([[1,2],[3,4,5,6,7,8]]) == 3, 'Wrong answer'\nassert Find_Min_Length([[1,2,3],[4,5,6]]) == 2, 'Wrong answer'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length( [[1, 2], [2], [5], [3]]) == 2\nassert     Find_Min_Length( [[1, 2, 3], [2], [5], [3]]) == 2\nassert     Find_Min_Length( [[1, 2], [1, 2], [5], [3]]) == 1\nassert     Find_Min_Length( [[2], [1], [5], [3]]) == 1\nassert     Find_Min_Length( [[1, 2], [1, 2, 3], [5], [3]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([[]]) == 0\nassert     Find_Min_Length([[1,2],[3,4],[5,6]]) == 3\nassert     Find_Min_Length([[1,2],[3,4],[5,6],[7,8]]) == 2\nassert     Find_Min_Length([[1,2,3,4],[5,6,7,8,9]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisor(0) == 1, \"divisor returns 0\"\nassert     divisor(1) == 1, \"divisor returns 1\"\nassert     divisor(2) == 2, \"divisor returns 2\"\nassert     divisor(3) == 2, \"divisor returns 2\"\nassert     divisor(4) == 3, \"divisor returns 3\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    divisor(100) == 4, \"should be 4\"\n    divisor(1) == 1, \"should be 1\"\n    divisor(2) == 1, \"should be 1\"\n    divisor(3) == 2, \"should be 2\"\n    divisor(4) == 2, \"should be 2\"\n    divisor(5) == 3, \"should be 3\"\n    divisor(6) == 3, \"should be 3\"\n    divisor(7) == 4, \"should be 4\"\n    divisor(8) == 4, \"should be 4\"\n    divisor(9) == 4, \"should be 4\"\n    divisor(10) == 5, \"should be 5\"\n    divisor(11) == 5, \"should be 5\"\n    divisor(12) == 6, \"should be 6\"\n    divisor(13) == 6, \"should be 6\"\n    divisor(14) == 6, \"should be 6\"\n    divisor(15) == 7, \"should be 7\"\n    divisor(16) == 7, \"should be 7\"\n    divisor(17) == 7, \"should be 7\"\n    divisor(18) == 8, \"should be 8\"\n    divisor(19) == 8, \"should be 8\"\n    divisor(20) == 8, \"should be 8\"\n    divisor(21) == 9, \"should be 9\"\n    divisor(22) == 9, \"should be 9\"\n    divisor(23) == 9, \"should be 9\"\n    divisor(24) == 10, \"should be 10\"\n    divisor(25) == 10, \"should be 10\"\n    divisor(26) == 10, \"should be 10\"\n    divisor(27) == 11, \"should be 11\"\n    divisor(28) == 11, \"should be 11\"\n    divisor(29) == 11, \"should be 11\"\n    divisor(30) == 12, \"should be 12\"\n    divisor(31) == 12, \"should be 12\"\n    divisor(32) == 12, \"should be 12\"\n    divisor(33) == 13, \"should be 13\"\n    divisor(34) == 13, \"should be 13\"\n    divisor(35) == 13, \"should be 13\"\n    divisor(36) == 14, \"should be 14\"\n    divisor(37) == 14, \"should be 14\"\n    divisor(38) == 14, \"should be 14\"\n    divisor(39) == 15, \"should be 15\"\n    divisor(40) == 15, \"should be 15\"\n    divisor(41) == 15, \"should be 15\"\n    divisor(42) == 16, \"should be 16\"\n    divisor(43) == 16, \"should be 16\"\n    divisor(44) == 16, \"should be 16\"\n    divisor(45) == 17, \"should be 17\"\n    divisor(46) == 17, \"should be 17\"\n    divisor(47) == 17, \"should be 17\"\n    divisor(48) == 18, \"should be 18\"\n    divisor(49) == 18, \"should be 18\"\n    divisor(50) == 18, \"should be 18\"\n    divisor(51) == 19, \"should be 19\"\n    divisor(52) == 19, \"should be 19\"\n    divisor(53) == 19, \"should be 19\"\n    divisor(54) == 20, \"should be 20\"\n    divisor(55) == 20, \"should be 20\"\n    divisor(56) == 20, \"should be 20\"\n    divisor(57) == 21, \"should be 21\"\n    divisor(58) == 21, \"should be 21\"\n    divisor(59) == 21, \"should be 21\"\n    divisor(60) == 22, \"should be 22\"\n    divisor(61) == 22, \"should be 22\"\n    divisor(62) == 22, \"should be 22\"\n    divisor(63) == 23, \"should be 23\"\n    divisor(64) == 23, \"should be 23\"\n    divisor(65) == 23, \"should be 23\"\n    divisor(66) == 24, \"should be 24\"\n    divisor(67) == 24, \"should be 24\"\n    divisor(68) == 24, \"should be 24\"\n    divisor(69) == 25, \"should be 25\"\n    divisor(70) == 25, \"should be 25\"\n    divisor(71) == 25, \"should be 25\"\n    divisor(72) == 26, \"should be 26\"\n    divisor(73) == 26, \"should be 26\"\n    divisor(74) == 26, \"should be 26\"\n    divisor(75) == 27, \"should be 27\"\n    divisor(76) == 27, \"should be 27\"\n    divisor(77) == 27, \"should be 27\"\n    divisor(78) == 28, \"should be 28\"\n    divisor(79) == 28, \"should be 28\"\n    divisor(80) == 28, \"should be 28\"\n    divisor(81) == 29, \"should be 29\"\n    divisor(82) == 29, \"should be 29\"\n    divisor(83) == 29, \"should be 29\"\n    divisor(84) == 30, \"should be 30\"\n    divisor(85) == 30, \"should be 30\"\n    divisor(86) == 30, \"should be 30\"\n    divisor(87) == 31, \"should be 31\"\n    divisor(88) == 31, \"should be 31\"\n    divisor(89) == 31, \"should be 31\"\n    divisor(90) == 32, \"should be 32\"\n    divisor(91) == 32, \"should be 32\"\n    divisor(92) == 32, \"should be 32\"\n    divisor(93) == 33, \"should be 33\"\n    divisor(94) == 33, \"should be 33\"\n    divisor(95) == 33, \"should be 33\"\n    divisor(96) == 34, \"should be 34\"\n    divisor(97) == 34, \"should be 34\"\n    divisor(98) == 34, \"should be 34\"\n    divisor(99) == 35, \"should be 35\"\n    divisor(100) == 35, \"should be 35\"\n    divisor(101) == 35, \"should be 35\"\n    divisor(102) == 36, \"should be 36\"\n    divisor(103) == 36, \"should be 36\"\n    divisor(104) == 36, \"should be 36\"\n    divisor(105) == 37, \"should be 37\"\n    divisor(106) == 37, \"should be 37\"\n    divisor(107) == 37, \"should be 37\"\n    divisor(108) == 38, \"should be 38\"\n    divisor(109) == 38, \"should be 38\"\n    divisor(110) == 38, \"should be 38\"\n    divisor(111) == 39, \"should be 39\"\n    divisor(112) == 39, \"should be 39\"\n    divisor(113) == 39, \"should be 39\"\n    divisor(114) == 40, \"should be 40\"\n    divisor(115) == 40, \"should be 40\"\n    divisor(116) == 40, \"should be 40\"\n    divisor(117) == 41, \"should be 41\"\n    divisor(118) == 41, \"should be 41\"\n    divisor(119) == 41, \"should be 41\"\n    divisor(120) == 42, \"should be 42\"\n    divisor(121) == 42, \"should be 42\"\n    divisor(122) == 42, \"should be 42\"\n    divisor(123) == 43, \"should be 43\"\n    divisor(124) == 43, \"should b"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisor(12) == 3\nassert     divisor(64) == 6\nassert     divisor(36) == 4\nassert     divisor(18) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisor(4) == 2\nassert     divisor(1) == 1\nassert     divisor(2) == 1\nassert     divisor(3) == 1\nassert     divisor(4) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('All the test cases are correct')"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndivisor(0) == 1, 'incorrect'\nassert divisor(1) == 1, 'incorrect'\nassert divisor(2) == 1, 'incorrect'\nassert divisor(3) == 1, 'incorrect'\nassert divisor(4) == 1, 'incorrect'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(12) == 4, 'incorrect output'\nassert     divisor(20) == 5, 'incorrect output'\nassert     divisor(25) == 6, 'incorrect output'\n\nprint('Success: test_divisor.py')\n\n'''\nIn the above example, the number of divisors is 4.\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndivisor(12) == 6, 'Function not working'\nprint('Assertion passes')\n\ndef square(n):\n    '''\n    Write a python function to find the smallest number that is a perfect square and the sum of all its square divisors.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists(['cat','cat','cat','cat','dog','dog','dog','dog']) == {'cat': 4, 'dog': 4}\nassert     frequency_lists(['cat','cat','cat','cat','dog','dog','dog','dog','cat','cat','cat','cat','dog','dog','dog','dog','cat','cat']) == {'cat': 6, 'dog': 6}\nassert     frequency_lists([['cat','cat','cat','cat','dog','dog','dog','dog'],['cat','cat','cat','cat','dog','dog','dog','dog'],['cat','cat','cat','cat','dog','dog','dog','dog']]) == {'cat': 4, 'dog': 4}\nassert     frequency_lists([['cat','cat','cat','cat','dog','dog','dog','dog'],['cat','cat','cat','cat','dog','dog','dog','dog'],['cat','cat','cat','cat','dog','dog','dog','dog']]) == {'cat': 6, 'dog': 6}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef flatten_list(list2):\n    '''\n    Write a function to flatten a list of list by appending elements of each list one after another.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1,2,3,4,5],[1,2,3,4,5,6]]) == {1: 2, 2: 2, 3: 1, 4: 2, 5: 2, 6: 1}\nassert     frequency_lists([[1,2,3,4,5]]) == {1: 2, 2: 2, 3: 1, 4: 2, 5: 1}\nassert     frequency_lists([[1,2,3],[2,3,4,5]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\nassert     frequency_lists([[1,2,3,4],[5,6,7,8,9]]) == {1: 3, 2: 3, 3: 1, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert     frequency_lists([[1,2,3,4]]) == {1: 2, 2: 2, 3: 1, 4: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([1,2,3,3,4,4]) == {1:4, 2:3, 3:3, 4:2}\nassert     frequency_lists([1,2,2,3,4,4,4]) == {1:4, 2:3, 3:2, 4:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1, 2, 3], [4, 5, 6]]) == {1: 2, 2: 1, 3: 2, 4: 1, 5: 1, 6: 1}\nassert frequency_lists([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == {1: 3, 2: 2, 3: 3, 4: 1, 5: 1, 6: 1}\nassert frequency_lists([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == {1: 3, 2: 2, 3: 3, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == {1: 3, 2: 2, 3: 3, 4: 1, 5: 1, 6: 1}\n\ndef nested_lists(list1):\n    '''\n    Write a function to return the sum of the values in a nested list.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1,2,3,4,5,5], [2,2,2,2], ['a', 'b', 'c', 'd']]) == {1:3, 2:2, 'c':1, 'd':1, 'b':1}\n\n\ndef nested_tuples(list1):\n    '''\n    Write a function to return a nested tuple with nested level 0 having all the items in list1 and all the items in list2, returned in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1,1,1], [1,1,1], [1,2,1]]    ==    {1:3, 2:1}\nassert     frequency_lists([[1,1,2,1], [1,1,2,2], [1,2,3,2]]    ==    {1:4, 2:3, 3:2}\nassert     frequency_lists([[2], [3,4], [1,2,1,3,4]]    ==    {1:2, 2:4, 3:2, 4:1}\nassert     frequency_lists([[2], [], [1,2]]    ==    {1:2, 2:1}\nassert     frequency_lists([[2,4]]    ==    {2:1, 4:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1,2,3],[2,3],[3],[3]]) == {1: 1, 2: 2, 3: 2}\nassert     frequency_lists([[1,2],[2,3],[3],[3]]) == {1: 1, 2: 2, 3: 2}\nassert     frequency_lists([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_num([2,4,6,8]) == 32, '2*4*6*8 = 32'\nassert     multiply_num([8,16,32,64]) == 128, '8*16*32*64 = 128'\nassert     multiply_num([32,64,128,256]) == 512, '32*64*128*256 = 512'\nassert     multiply_num([64,256,1024,4096]) == 1024, '64*256*1024*4096 = 1024'\nassert     multiply_num([256,1024,4096,8192]) == 8192, '256*1024*4096*8192 = 8192'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([1,2,3,4]) == 24, \"It should return 24.\"\nassert     multiply_num([]) == 1, \"It should return 1.\"\nassert     multiply_num([1,2,3,4,5]) == 120, \"It should return 120.\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([]) == 1, \"Empty list!\"\nassert     multiply_num([2]) == 4, \"Single number!\"\nassert     multiply_num([2,3]) == 6, \"Two numbers!\"\nassert     multiply_num([2,3,4,5]) == 120, \"Numbers and numbers!\"\nassert     multiply_num([2,3,4,5,6,7]) == 336, \"Numbers and numbers!\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef merge_lists(list1, list2):  \n    '''\n    Write a function to merge two lists into one list. \n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_num([1, 2, 3, 4, 5, 6]) == 60\nassert multiply_num([1, 2, 3, 4, 5, 6]) == 240\nassert multiply_num([1, 2, 3, 4, 5]) == 120\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24, \"Wrong Answer\"\nassert multiply_num([2, 3, 4]) == 24, \"Wrong Answer\"\nassert multiply_num([3, 4]) == 24, \"Wrong Answer\"\nassert multiply_num([1, 2, 3]) == 6, \"Wrong Answer\"\nassert multiply_num([1, 2, 3, 4]) == 120, \"Wrong Answer\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(3) == '101'\nassert     decimal_to_binary(5) == '101101'\nassert     decimal_to_binary(6) == '1010101'\nassert     decimal_to_binary(7) == '10101'\nassert     decimal_to_binary(8) == '1010'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(11) == \"1101\"\nassert     decimal_to_binary(8) == \"1000\"\nassert     decimal_to_binary(9) == \"1001\"\nassert     decimal_to_binary(10) == \"1010\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nConvert a given decimal number to its binary equivalent, represented as a string with no leading zeros.\nInput Format:\nThe first line contains an integer T, the number of test cases.\nThe next T lines contain the decimal number to convert.\nOutput Format:\nFor each test case, output the binary equivalent of the decimal number.\nConstraints:\n1 <= T <= 1000\n1 <= N <= 10^4\n'''\n\ndef binary_to_decimal(a):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(4) == '100'\nassert     decimal_to_binary(6) == '110'\nassert     decimal_to_binary(10) == '1010'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return '0'\n    result = ''\n    while n > 0:\n        result = str(n%2) + result\n        n = n//2\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert next_smallest_palindrome(10) == 11\nassert next_smallest_palindrome(121) == 125\nassert next_smallest_palindrome(1212) == 1213\nassert next_smallest_palindrome(1245) == 1256\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(2) == 3\nassert     next_smallest_palindrome(4) == 5\nassert     next_smallest_palindrome(6) == 7\nassert     next_smallest_palindrome(9) == 10\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(next_smallest_palindrome(121))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert next_smallest_palindrome(121) == 131\n    "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(12336) == 49866\nassert     next_smallest_palindrome(9674) == 9678\nassert     next_smallest_palindrome(9678) == 9678\nassert     next_smallest_palindrome(9984) == 9984\nassert     next_smallest_palindrome(9678) == 9678\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(123456) == 484321\nassert     next_smallest_palindrome(101) == 101\nassert     next_smallest_palindrome(1234) == 1234\n\ndef next_greatest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef has_adjacent_digits(num):\n    '''\n    Write a function to find if a number has any adjacent equal digits. \n    For example, the number 12343 has adjacent equal digits\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnext_smallest_palindrome(1) == 2\nassert \nnext_smallest_palindrome(4) == 5\nassert \nnext_smallest_palindrome(8) == 10\nassert \nnext_smallest_palindrome(100) == 101\nassert \nnext_smallest_palindrome(13) == 14\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(111) == 111\nassert next_smallest_palindrome(91234) == 91234\nassert next_smallest_palindrome(999) == 998\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(21) == 12, next_smallest_palindrome(21)\nassert     next_smallest_palindrome(12) == 21, next_smallest_palindrome(12)\nassert     next_smallest_palindrome(10) == 11, next_smallest_palindrome(10)\n\ndef longest_palindrome(s):\n    '''\n    Write a function to find the longest palindrome in a specified string, returned as a string.\n    '''\n    if not s:\n        return ''\n    start_index = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            start_index = i\n            break\n    if start_index == 0:\n        start_index = 1\n        \n    i, j = start_index, start_index+1\n    max_len = 1\n    while True:\n        if i < 0 or j >= len(s) or s[i]!= s[j]:\n            break\n        if j - i + 1 > max_len:\n            start_index = i\n            max_len = j - i + 1\n        i += 1\n        j += 1\n    \n    return s[start_index:start_index+max_len]"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_min_max(nums):\n    '''\n    You are given an array of integers. Find the minimum and maximum values in the array.\n\n    Note: The built-in min() and max() functions will accept array as an argument and will return the minimum and maximum values respectively.\n    '''\n    pass"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     kth_element([], 1) == None\nassert     kth_element([1], 1) == 1\nassert     kth_element([1,2], 1) == 1\nassert     kth_element([1,2,3], 1) == 1\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 3) == 4\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('\\nCheck correctness of kth_element function:')\nprint('arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5 => 9\\n')\nprint('arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 6 => 7\\n')\nprint('arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 9 => 8\\n')\nprint('arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 10 => IndexError\\n')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     kth_element([0,1,2,3,4], 2) == 3\nassert     kth_element([0,1,2,3,4], 0) == 0\nassert     kth_element([0,1,2,3,4], 1) == 1\nassert     kth_element([0,1,2,3,4], 2) == 2\nassert     kth_element([0,1,2,3,4], 3) == 3\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     kth_element([1, 5, 8, 7, 2, 6], 6) == 8\nassert     kth_element([1, 5, 8, 7, 2, 6], 2) == 5\nassert     kth_element([1, 5, 8, 7, 2, 6], 5) == 2\nassert     kth_element([1, 5, 8, 7, 2, 6], 7) == 6\nassert     kth_element([1, 5, 8, 7, 2, 6], 1) == 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     kth_element([1,2,3,4], 1) == 1\nassert     kth_element([1,2,3,4], 2) == 2\nassert     kth_element([1,2,3,4], 4) == 4\nassert     kth_element([1,2,3,4], 5) == None\nassert     kth_element([], 1) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([1,2,3], 3) == 2\nassert kth_element([1,2,3], 1) == 1\nassert kth_element([1,2,3], 3) == 1\nassert kth_element([1,2,3], 10) == None\nassert kth_element([1,2,3,4], 3) == 3\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('my_snake_case') =='mySnakeCase', 'Should be mySnakeCase'\nassert snake_to_camel('my_snake_case') =='mySnakeCase', 'Should be mySnakeCase'\nassert snake_to_camel('my_snake_case') =='mySnakeCase', 'Should be mySnakeCase'\nassert snake_to_camel('my_snake_case') =='mySnakeCase', 'Should be mySnakeCase'\nassert snake_to_camel('my_snake_case') =='mySnakeCase', 'Should be mySnakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake_case_word') =='snakeCaseWord', \"incorrect\"\nassert snake_to_camel('snake_case_word') =='snakeCaseWord', \"incorrect\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsnake_to_camel('snake_case') =='snake_case'\nsnake_to_camel('i_am_a_snake') == 'i_am_a_snake'\nsnake_to_camel('am_i_a_snake') == 'am_i_a_snake'\nsnake_to_camel('i_am_am_i_am_a_snake') == 'i_am_am_i_am_a_snake'\nsnake_to_camel('i_am_a_s_snake') == 'i_am_a_s_snake'\nsnake_to_camel('i_am_a_s_snake') == 'i_am_a_s_snake'\nsnake_to_camel('i_am_a_s_snake_') == 'i_am_a_s_snake_'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCamelCase','snake_to_camel should convert snake case to camel case'\nassert     snake_to_camel('snake_camel_case') =='snakeCamelCase','snake_to_camel should convert snake case to camel case'\nassert     snake_to_camel('snake_snake_case') =='snakeSnakeCase','snake_to_camel should convert snake case to camel case'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_camel') == 'SnakeCamel', 'incorrect'\nassert     snake_to_camel('snake_camel_') == 'SnakeCamel', 'incorrect'\nassert     snake_to_camel('snake_camel_snake') == 'SnakeCamelSnake', 'incorrect'\nassert     snake_to_camel('snake_camel_snake_') == 'SnakeCamelSnake', 'incorrect'\nassert     snake_to_camel('snake_camel_snake_snake') == 'SnakeCamelSnakeSnake', 'incorrect'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', \"error\"\nassert     snake_to_camel('snake_case') =='snakeCase', \"error\"\nassert     snake_to_camel('snake-case') =='snakeCase', \"error\"\nassert     snake_to_camel('snake_case') =='snakeCase', \"error\"\nassert     snake_to_camel('snake_case') =='snakeCase', \"error\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel(\"test_snake_camel_case\") == \"testTestSnakeCaseCamelCase\"\nassert     snake_to_camel(\"test_snake_camel_case_2\") == \"testTestSnakeCaseCamelCase2\"\nassert     snake_to_camel(\"test_snake_camel_case_3\") == \"testTestSnakeCaseCamelCase3\"\nassert     snake_to_camel(\"test_snake_camel_case_4\") == \"testTestSnakeCaseCamelCase4\"\nassert     snake_to_camel(\"test_snake_camel_case_5\") == \"testTestSnakeCaseCamelCase5\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert snake_to_camel('snake') =='snake'\nassert snake_to_camel('snake_case') =='snakeCase'\nassert snake_to_camel('snake_case_') =='snakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel(\"snake_case_function\") == \"snakeCaseFunction\", \\\n                \"Expected snake_case_function to be snakeCaseFunction\"\n\nassert     snake_to_camel(\"snake_case_function_2\") == \"snakeCaseFunction2\", \\\n                \"Expected snake_case_function_2 to be snakeCaseFunction2\"\n\nassert     snake_to_camel(\"snake_case_function_3\") == \"snakeCaseFunction3\", \\\n                \"Expected snake_case_function_3 to be snakeCaseFunction3\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neulerian_num(2, 2) == 3\neulerian_num(3, 3) == 6\neulerian_num(4, 4) == 7\neulerian_num(5, 5) == 10\neulerian_num(6, 6) == 12\neulerian_num(7, 7) == 14\neulerian_num(8, 8) == 20\neulerian_num(9, 9) == 36\neulerian_num(10, 10) == 40\neulerian_num(11, 11) == 45\neulerian_num(12, 12) == 60\neulerian_num(13, 13) == 72\neulerian_num(14, 14) == 84\neulerian_num(15, 15) == 90\neulerian_num(16, 16) == 96\neulerian_num(17, 17) == 100\neulerian_num(18, 18) == 108\neulerian_num(19, 19) == 120\neulerian_num(20, 20) == 144\neulerian_num(21, 21) == 168\neulerian_num(22, 22) == 180\neulerian_num(23, 23) == 192\neulerian_num(24, 24) == 216\neulerian_num(25, 25) == 240\neulerian_num(26, 26) == 288\neulerian_num(27, 27) == 300\neulerian_num(28, 28) == 336\neulerian_num(29, 29) == 360\neulerian_num(30, 30) == 432\neulerian_num(31, 31) == 484\neulerian_num(32, 32) == 528\neulerian_num(33, 33) == 576\neulerian_num(34, 34) == 624\neulerian_num(35, 35) == 672\neulerian_num(36, 36) == 768\neulerian_num(37, 37) == 880\neulerian_num(38, 38) == 896\neulerian_num(39, 39) == 912\neulerian_num(40, 40) == 944\neulerian_num(41, 41) == 972\neulerian_num(42, 42) == 984\neulerian_num(43, 43) == 1020\neulerian_num(44, 44) == 1056\neulerian_num(45, 45) == 1092\neulerian_num(46, 46) == 1124\neulerian_num(47, 47) == 1160\neulerian_num(48, 48) == 1197\neulerian_num(49, 49) == 1224\neulerian_num(50, 50) == 1256\neulerian_num(51, 51) == 1294\neulerian_num(52, 52) == 1323\neulerian_num(53, 53) == 1359\neulerian_num(54, 54) == 1396\neulerian_num(55, 55) == 1433\neulerian_num(56, 56) == 1466\neulerian_num(57, 57) == 1495\neulerian_num(58, 58) == 1532\neulerian_num(59, 59) == 1568\neulerian_num(60, 60) == 1596\neulerian_num(61, 61) == 1633\neulerian_num(62, 62) == 1666\neulerian_num(63, 63) == 1691\neulerian_num(64, 64) == 1720\neulerian_num(65, 65) == 1747\neulerian_num(66, 66) == 1785\neulerian_num(67, 67) == 1821\neulerian_num(68, 68) == 1853\neulerian_num(69, 69) == 1891\neulerian_num(70, 70) == 1922\neulerian_num(71, 71) == 1946\neulerian_num(72, 72) == 1994\neulerian_num(73, 73) == 2131\neulerian_num(74, 74) == 2165\neulerian_num(75, 75) == 2197\neulerian_num(76, 76) == 2224\neulerian_num(77, 77) == 2263\neulerian_num(78, 78) == 2288\neulerian_num(79, 79) == 2319\neulerian_num(80, 80) == 2347\neulerian_num(81, 81) == 2387\neulerian_num(82, 82) == 2422\neulerian_num(83, 83) == 2459\neulerian_num(84, 84) == 2490\neulerian_num(85, 85) == 2526\neulerian_num(86, 86) == 2561\neulerian_num(87, 87) == 2596\neulerian_num(88, 88) == 2631\neulerian_num(89, 89) == 2670\neulerian_num(90, 90) == 2697\neulerian_num(91, 91) == 2733\neulerian_num(92, 92) == 2773\neulerian_num(93, 93) == 2808\neulerian_num(94, 94) == 2845\neulerian_num(95, 95) == 2879\neulerian_num(96, 96) == 2916\neulerian_num(97, 97) == 2953\neulerian_num(98, 98) == 2994\neulerian_num(99, 99) == 3031\neulerian_num(100, 100) == 3073\neulerian_num(101, 101) == 3108\neulerian_num(102, 102) == 3145\neulerian_num(103, 103) == 3185\neulerian_num(104, 104) == 3217\neulerian_num(105, 105) == 3253\neulerian_num(106, 106) == 3289\neulerian_num(107, 107) == 3305\neulerian_num(108, 108) == 3341\neulerian_num(109, 109) == 3385\neulerian_num(110, 110) == 3413\neulerian_num(111, 111) == 3444\neulerian_num(112, 112) == 3488\neulerian_num(113, 113) == 3519\neulerian_num(114, 114) == 3562\neulerian_num(115, 115) == 3593\neulerian_num(116, 116) == 3626\neulerian_num(117, 117) == 3667\neulerian_num(118, 118) == 3703\neulerian_num(119, 119) == 3741\neulerian_num(120, 120) == 3774\neulerian_num(121, 121) == 3806\neulerian_num(122, 122) == 3851\neulerian_num(123, 123) == 3890\neulerian_num(124, 124) == 3928\neulerian_num(125, 125) == 3969\neulerian_num(126, 126) == 4000\neulerian_num(127, 127) == 4037\neulerian_num(128, 128) == 4074\neulerian_num(129, 129) == 4114\neulerian_num(130, 130) == 4156\neulerian_num(131, 131) == 4192\neulerian_num(132, 132) == 4227\neulerian_num(133, 133) == 4264\neulerian_num(134, 134) == 4303\neulerian_num(135, 135) == 4340\neulerian_num(136, 136) == 4377\neulerian_num(137, 137) == 4403\neulerian_num(138, 138) == 4440\neulerian_num(139, 139) == 4481\neulerian_num(140, 140) == 4523\neulerian_num(141, 141) == 4561\neulerian_num(142, 142) == 4587\neulerian_num(143, 143) == 4616\neulerian_num(144, 144) == 4664\neulerian_num(145, 145) == 4690\neulerian_num(146, 14"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neulerian_num(1,1) == 1\nassert eulerian_num(2,2) == 3\nassert eulerian_num(3,3) == 6\nassert eulerian_num(4,4) == 10\nassert eulerian_num(5,5) == 15\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eulerian_num(1, 1) == 1 \nassert     eulerian_num(2, 1) == 0\nassert     eulerian_num(2, 2) == 1 \nassert     eulerian_num(3, 1) == 0 \nassert     eulerian_num(3, 2) == 1 \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eulerian_num(2, 0) == 4\nassert     eulerian_num(1, 2) == 2\nassert     eulerian_num(2, 1) == 4\nassert     eulerian_num(3, 1) == 6\n\ndef eulerian_path(n, m, edges):\n    '''\n    Write a function to find the Eulerian path a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef eulerian_path(n, m):\n    '''\n    Write a function to find the Eulerian path in a tree, where the path is defined in a form of \n    a sequence of nodes.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eulerian_num(3, 2) == 3\nassert     eulerian_num(4, 2) == 4\nassert     eulerian_num(3, 3) == 6\nassert     eulerian_num(4, 3) == 24\nassert     eulerian_num(5, 3) == 60\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eulerian_num(5, 7) == 10\nassert     eulerian_num(5, 5) == 15\nassert     eulerian_num(5, 4) == 20\nassert     eulerian_num(5, 3) == 30\nassert     eulerian_num(6, 5) == 30\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(eulerian_num(5, 5))\nprint(eulerian_num(10, 10))\nprint(eulerian_num(20, 20))\nprint(eulerian_num(1000, 1000))\nprint(eulerian_num(1000000, 1000000))\nprint(eulerian_num(10000000, 10000000))\nprint(eulerian_num(1000000000000, 100000000000000))\nprint(eulerian_num(1000000000000000, 10000000000000000000))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(2, 3) == 2\nassert     eulerian_num(3, 3) == 3\nassert     eulerian_num(5, 5) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eulerian_num(2, 2) == 1\nassert eulerian_num(1, 3) == 1\nassert eulerian_num(2, 4) == 2\nassert eulerian_num(3, 4) == 5\nassert eulerian_num(3, 5) == 3\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists(['b', 'a', 'z', 'y', 'x']) == [['x', 'y', 'z', 'b', 'a'], ['a', 'b', 'z', 'y', 'x']]\nassert     sort_sublists(['a', 'c', 'b', 'x', 'd', 'y']) == [['d', 'b', 'c', 'x', 'a'], ['a', 'b', 'c', 'd', 'x', 'y']]\nassert     sort_sublists([]) == []\nassert     sort_sublists([1,2,3]) == [[1,2,3]]\n\ndef remove_dups(input_list):\n    '''\n    Write a function that returns a sorted list with the same elements as input_list, but without any duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['b', 'c', 'd'], ['c', 'd', 'a'], ['a', 'b', 'c']]) == [['a', 'b', 'c'], ['c', 'd', 'a'], ['b', 'c', 'd'], ['a', 'b', 'c']]\n\ndef flip_list(input_list):\n    '''\n    Write a function to reverse the order of elements in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([[],['a'],['b'],['c']]) == [[],['a'],['b'],['c']]\nassert     sort_sublists([[],['a'],['a'],['a']]) == [[],['a'],['a'],['a']]\nassert     sort_sublists([['b'],['a'],['b'],['b'],['a']]) == [[],['a'],['b'],['b'],['a']]\nassert     sort_sublists([['b','a'],['b','a'],['a','b'],['a','b'],['b','a']]) == [['a', 'a'], ['a', 'b'], ['b', 'b'], ['b', 'a'], ['a', 'a']]\nassert     sort_sublists([['a','b'],['a','b'],['b','a'],['b','a'],['a','b']]) == [['a','a'],['a','b'],['b','a'],['b','a'],['a','b']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([['g','e','e','k','s','f'],\n                        ['a','c','k','b'],\n                        ['i','l','o','d']]    )    == [['a','b','c','d','e','e','f','g','i','k','l','o','s'],\n                                ['k','b','c','a','d','e'],\n                                ['i','o','l','k','d','f']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists(input_list=[[\"a\",\"c\",\"b\"], [\"e\",\"h\",\"i\"], [\"g\",\"f\",\"d\"]]) == \\\n            [[\"a\",\"c\",\"b\"], [\"g\",\"f\",\"d\"], [\"e\",\"h\",\"i\"]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists(['hello', 'world', 'Apple', 'apple']) == [['Apple', 'hello', 'world'], ['Apple', 'apple'], ['hello', 'apple', 'Apple'], ['hello', 'Apple', 'Apple']]\nassert     sort_sublists(['hello', 'world', 'Apple', 'apple']) == [['Apple', 'hello', 'world'], ['Apple', 'apple'], ['hello', 'Apple', 'Apple'], ['hello', 'Apple', 'Apple']]\nassert     sort_sublists(['hello', 'world', 'Apple', 'apple']) == [['Apple', 'hello', 'world'], ['Apple', 'apple'], ['hello', 'Apple', 'Apple'], ['hello', 'Apple', 'Apple']]\nassert     sort_sublists(['hello', 'world', 'Apple', 'apple']) == [['Apple', 'hello', 'world'], ['Apple', 'apple'], ['hello', 'Apple', 'Apple'], ['hello', 'Apple', 'Apple']]\nassert     sort_sublists([]) == [[]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sort_sublists_by_length(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists in ascending order\n    of length of the string.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists(['d', 'a', 'b', 'c']) == [['a', 'b', 'c'], ['d']]\nassert     sort_sublists(['c', 'b', 'd', 'a']) == [['a'], ['b', 'd'], ['c']]\nassert     sort_sublists(['a', 'b', 'c', 'd']) == [['a', 'b', 'c'], ['d']]\nassert     sort_sublists(['d', 'a', 'b', 'c']) == [['a', 'b', 'c'], ['d']]\nassert     sort_sublists(['c', 'b', 'd', 'a']) == [['a'], ['b', 'd'], ['c']]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count([True, True, False, True, True]) == 5\n\n\ndef findMax(lst):\n    '''\n    Write a python function to find the maximum integer in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count([1,False,True,True,False,False,True]) == 2, \"Wrong output!\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([True, False, True, False]) == 4\nassert count([]) == 0\nassert count([True, True]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([False, True, True, True, False, False, False, False, True, False, True, False, True, True, False, True, False]) == 5\nassert     count([False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]) == 10\nassert     count([False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]) == 0\nassert count([]) == 0\n\n'''\nYou are required to write a function that accepts a list of strings as an argument and returns a dictionary where each of the strings is assigned a value of 1 or 0, depending on whether it is a present or absent of that word in the given list.\n'''\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([True, True, True]) == 3\nassert     count([False, True, False]) == 2\nassert     count([False, True, False, True]) == 1\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([0, 0, 1, 0, 0, 0, 1, 1]) == 5, 'Wrong output'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount([True, True, False, True, True, False, True, True]) == 4, \"count(True) is wrong\"\nassert \ncount([False, False, False, False, False, False, False, False]) == 8, \"count(False) is wrong\"\nassert count([True, True, False, True, False]) == 2, \"count(True, True) is wrong\"\nassert count([True, True, False, True, False]) == 0, \"count(True, False) is wrong\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count([True, False, True, False, True]) == 2\nassert     count([True, True, False, False]) == 1\nassert     count([True, True, True]) == 0\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"Test case 1\")\nadd_lists([1, 2, 3], (1, 2))\n\nassert \nprint(\"Test case 2\")\nadd_lists([], (1, 2))\n\nassert \nprint(\"Test case 3\")\nadd_lists([1, 2, 3], ())\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_lists([1,3], (2,4)) == ([1,3], (2,4))\nassert     add_lists([1,3], (2,4,5)) == ([1,3], (2,4,5))\nassert     add_lists([1,3], (2,4,5,6)) == ([1,3], (2,4,5,6))\nassert     add_lists([1,3,4], (2,4,5,6)) == ([1,3,4], (2,4,5,6))\nassert     add_lists([1,3,4,5], (2,4,5,6)) == ([1,3,4,5], (2,4,5,6))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([], (1, 2, 3)) == (1, 2, 3)\nassert     add_lists([1, 2, 3], (1, 2, 3)) == (1, 2, 3)\nassert     add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     add_lists([1, 2, 3], (4, 5)) == (1, 2, 3, 4, 5)\nassert     add_lists([1, 2, 3], (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists(['a', 'b'], ('c', 'd')) == [('a', 'c'), ('b', 'd')], 'incorrect'\nassert     add_lists([], ()) == [], 'incorrect'\nassert     add_lists(['a', 'b'], ['c']) == [('a', 'c'), ('b', 'c')], 'incorrect'\nassert     add_lists(['a', 'b'], ['c', 'd']) == [('a', 'c'), ('b', 'd')], 'incorrect'\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert add_lists([1,2], (3,4)) == [(1,2),(3,4)]\nassert add_lists([], (3,4)) == [(3,4)]\nassert add_lists([1], (2,3)) == [(1,2),(3,)]\nassert add_lists([1,2,3], (4,)) == [(1,2,3),(4,)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([1,2,3], (0,0,0)) == ([1,2,3], (0,0,0))\nassert     add_lists([1,2], (0,0)) == ([1,2], (0,0))\nassert     add_lists([], (0,0)) == ([], (0,0))\nassert     add_lists([], ()) == ([], ())\n\ndef add_list_const_time(test_list, time_constant):\n    '''\n    Write a function to add the given list to itself at constant time.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert add_lists([], (1, 2)) == [(1, 2)]\nassert add_lists([], (1,)) == [(1,)]\nassert add_lists([], (1,)) == [(1,)]\nassert add_lists([1,2,3], ()) == [(1, 2), (1, 2), (1, 2)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_lists([1,2,3], (4,5,6)) ==     [1,2,3,4,5,6]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef merge_sort_list(num1):\n    '''\n    Write a function that takes as input a list and returns a sorted version\n    of the list.\n\n    Hint: To solve this problem, you can use divide and conquer approach.\n          - Divide the array into two halves (left and right)\n          - Sort the left half\n          - Sort the right half\n          - Merge the two sorted halves\n    '''\n    if len(num1) == 1:\n        return num1\n    mid = len(num1) // 2\n    left = num1[:mid]\n    right = num1[mid:]\n    \n    # recursive\n    # left = merge_sort_list(left)\n    # right = merge_sort_list(right)\n    return merge(left, right)"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    '''\n    Find the second smallest number from the sorted list.\n    '''\n    num1 = [1,4,7,10,11,15,16,19,22]\n    num2 = []\n    num3 = [-5,-1,0,0,0,0,0,0,0,0]\n    print(merge_sorted_list(num1,num2,num3))\n    \n    "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1, 3, 5, 7], [2, 4, 6, 8, 10], [0, 1, 2, 3, 4, 5]) == sorted([0, 1, 2, 3, 4, 5, 3, 4, 5, 7, 8, 9, 10])\nassert     merge_sorted_list([1, 3, 5, 7], [2, 4, 6, 8], [0, 1, 2, 3, 4, 5]) == sorted([0, 1, 2, 3, 4, 5, 3, 4, 5, 7, 8])\nassert     merge_sorted_list([], [], []) == []\n\ndef merge_two_sorted_list(num1,num2):\n    '''\n    Write a function to merge two sorted list into a single sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_sorted_list([1,2,3,4], [5,6,7,8], [0,9,10,11,12]) == [0,1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nnum1 = [-1,2,3]\nnum2 = [-4,5,6]\nnum3 = [-7,8,9]\nmerge_sorted_list(num1,num2,num3) == [-1,-4,2,5,3,6,7,8,9]\nnum1 = [-1,2,3]\nnum2 = [-4,5,6]\nnum3 = [-7,8,9]\nmerge_sorted_list(num1,num2,num3) == [-1,-4,2,5,3,6,7,8,9]\nnum1 = [-1,2,3]\nnum2 = [1,4,6]\nnum3 = [3,5,7]\nmerge_sorted_list(num1,num2,num3) == [-1,1,2,3,4,5,6,7]\nnum1 = [1,2,3]\nnum2 = [4,5,6]\nnum3 = [7,8,9]\nmerge_sorted_list(num1,num2,num3) == [1,4,5,6,7,8,9]\nnum1 = [-3,2,3]\nnum2 = [1,4,6]\nnum3 = [7,8,9]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,4,6,7,8,9]\nnum1 = [3]\nnum2 = []\nnum3 = [1,2,3]\nmerge_sorted_list(num1,num2,num3) == [3,1,2,3]\nnum1 = [2]\nnum2 = []\nnum3 = [1,2,3]\nmerge_sorted_list(num1,num2,num3) == [2,1,3]\nnum1 = [1,2,3]\nnum2 = [4]\nnum3 = [5,6,7,8]\nmerge_sorted_list(num1,num2,num3) == [1,2,3,4,5,6,7,8]\nnum1 = [1,2,3]\nnum2 = [4,5,6]\nnum3 = []\nmerge_sorted_list(num1,num2,num3) == [1,2,3,4,5,6]\nnum1 = [1]\nnum2 = [4,5,6]\nnum3 = []\nmerge_sorted_list(num1,num2,num3) == [1,4,5,6]\nnum1 = []\nnum2 = [4,5,6]\nnum3 = []\nmerge_sorted_list(num1,num2,num3) == []\nnum1 = []\nnum2 = []\nnum3 = []\nmerge_sorted_list(num1,num2,num3) == []\nnum1 = []\nnum2 = [1]\nnum3 = []\nmerge_sorted_list(num1,num2,num3) == [1]\nnum1 = []\nnum2 = []\nnum3 = [1]\nmerge_sorted_list(num1,num2,num3) == [1]\nnum1 = []\nnum2 = []\nnum3 = []\nmerge_sorted_list(num1,num2,num3) == []\nnum1 = [1]\nnum2 = [1]\nnum3 = [1]\nmerge_sorted_list(num1,num2,num3) == [1,1]\nnum1 = [-3,1,2,3]\nnum2 = [-1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,-1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [-1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,-1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnum1 = [-3,1,2,3]\nnum2 = [1,2,3]\nnum3 = [-4,5,6]\nmerge_sorted_list(num1,num2,num3) == [-3,1,2,3,1,2,3,-4,5,6]\nnu"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef merge_sorted_list_helper(num1,num2,num3):\n    '''\n    Recursion\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef three_sorted_merge(num1,num2,num3):\n    '''\n    Write a function to merge 3 sorted lists into one sorted list.\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef merge_sort(list):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_Equivalent(s=\"100\", n=2) == 4\nodd_Equivalent(s=\"010\", n=2) == 3\nodd_Equivalent(s=\"1010\", n=2) == 5\nodd_Equivalent(s=\"0101\", n=2) == 4\nodd_Equivalent(s=\"10101\", n=2) == 6\nodd_Equivalent(s=\"110101\", n=2) == 6\nodd_Equivalent(s=\"01010001\", n=2) == 8\nodd_Equivalent(s=\"101010001\", n=2) == 9\nodd_Equivalent(s=\"1101010001\", n=2) == 9\nodd_Equivalent(s=\"0101010101\", n=2) == 10\nodd_Equivalent(s=\"10101010101\", n=2) == 10\nodd_Equivalent(s=\"110101010101\", n=2) == 10\nodd_Equivalent(s=\"010101010101\", n=3) == 11\nodd_Equivalent(s=\"1010101010101\", n=3) == 13\nodd_Equivalent(s=\"11010101010101\", n=3) == 13\nodd_Equivalent(s=\"0101010101010101\", n=4) == 14\nodd_Equivalent(s=\"10101010101010101\", n=4) == 18\nodd_Equivalent(s=\"110101010101010101\", n=4) == 18\nodd_Equivalent(s=\"01010101010101010101\", n=5) == 19\nodd_Equivalent(s=\"101010101010101010101\", n=5) == 21\nodd_Equivalent(s=\"1101010101010101010101\", n=5) == 21\nodd_Equivalent(s=\"010101010101010101010101\", n=6) == 22\nodd_Equivalent(s=\"1010101010101010101010101\", n=6) == 24\nodd_Equivalent(s=\"11010101010101010101010101\", n=6) == 24\nodd_Equivalent(s=\"0101010101010101010101010101\", n=7) == 25\nodd_Equivalent(s=\"101010101010101010101010101\", n=7) == 27\nodd_Equivalent(s=\"1101010101010101010101010101\", n=7) == 27\nodd_Equivalent(s=\"010101010101010101010101010101\", n=8) == 28\nodd_Equivalent(s=\"10101010101010101010101010101\", n=8) == 30\nodd_Equivalent(s=\"1101010101010101010101010101\", n=8) == 30\nodd_Equivalent(s=\"010101010101010101010101010101\", n=9) == 31\nodd_Equivalent(s=\"10101010101010101010101010101\", n=9) == 33\nodd_Equivalent(s=\"1101010101010101010101010101\", n=9) == 33\nodd_Equivalent(s=\"010101010101010101010101010101\", n=10) == 34\nodd_Equivalent(s=\"10101010101010101010101010101\", n=10) == 36\nodd_Equivalent(s=\"1101010101010101010101010101\", n=10) == 36\nodd_Equivalent(s=\"010101010101010101010101010101\", n=11) == 37\nodd_Equivalent(s=\"10101010101010101010101010101\", n=11) == 39\nodd_Equivalent(s=\"1101010101010101010101010101\", n=11) == 39\nodd_Equivalent(s=\"010101010101010101010101010101\", n=12) == 40\nodd_Equivalent(s=\"10101010101010101010101010101\", n=12) == 42\nodd_Equivalent(s=\"1101010101010101010101010101\", n=12) == 42\nodd_Equivalent(s=\"010101010101010101010101010101\", n=13) == 43\nodd_Equivalent(s=\"10101010101010101010101010101\", n=13) == 45\nodd_Equivalent(s=\"1101010101010101010101010101\", n=13) == 45\nodd_Equivalent(s=\"010101010101010101010101010101\", n=14) == 46\nodd_Equivalent(s=\"10101010101010101010101010101\", n=14) == 48\nodd_Equivalent(s=\"1101010101010101010101010101\", n=14) == 48\nodd_Equivalent(s=\"010101010101010101010101010101\", n=15) == 49\nodd_Equivalent(s=\"10101010101010101010101010101\", n=15) == 51\nodd_Equivalent(s=\"1101010101010101010101010101\", n=15) == 51\nodd_Equivalent(s=\"010101010101010101010101010101\", n=16) == 52\nodd_Equivalent(s=\"10101010101010101010101010101\", n=16) == 54\nodd_Equivalent(s=\"1101010101010101010101010101\", n=16) == 54\nodd_Equivalent(s=\"010101010101010101010101010101\", n=17) == 55\nodd_Equivalent(s=\"10101010101010101010101010101\", n=17) == 57\nodd_Equivalent(s=\"1101010101010101010101010101\", n=17) == 57\nodd_Equivalent(s=\"010101010101010101010101010101\", n=18) == 58\nodd_Equivalent(s=\"10101010101010101010101010101\", n=18) == 60\nodd_Equivalent(s=\"1101010101010101010101010101\", n=18) == 60\nodd_Equivalent(s=\"010101010101010101010101010101\", n=19) == 61\nodd_Equivalent(s=\"10101010101010101010101010101\", n=19) == 63\nodd_Equivalent(s=\"1101010101010101010101010101\", n=19) == 63\nodd_Equivalent(s=\"010101010101010101010101010101\", n=20) == 64\nodd_Equivalent(s=\"10101010101010101010101010101\", n=20) == 66\nodd_Equivalent(s=\"1101010101010101010101010101\", n=20) == 66\nodd_Equivalent(s=\"010101010101010101010101010101\", n=21) == 67\nodd_Equivalent(s=\"10101010101010101010101010101\", n=21) == 69\nodd_Equivalent(s=\"1101010101010101010101010101\", n=21) == 69\nodd_Equivalent(s=\"010101010101010101010101010101\", n=22) == 70\nodd_Equivalent(s=\"10101010101010101010101010101\", n=22) == 72\nodd_Equivalent(s=\"1101010101010101010101010101\", n=22) == 72\nodd_Equivalent(s=\"010101010101010101010101010101\", n=23) == 73\nodd_Equivalent(s=\"10101010101010101010101010101\", n=23) == 75\nodd_Equivalent(s=\"11010"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_Equivalent(\"1010\", 1) == 2\nassert     odd_Equivalent(\"10101\", 1) == 6\nassert     odd_Equivalent(\"101\", 1) == 1\n\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent('101',1) == 0\nodd_Equivalent('101',2) == 1\nodd_Equivalent('101',3) == 1\nodd_Equivalent('101',4) == 0\nodd_Equivalent('101',5) == 1\nodd_Equivalent('101',6) == 2\nodd_Equivalent('101',7) == 1\nodd_Equivalent('101',8) == 1\nodd_Equivalent('101',9) == 1\nodd_Equivalent('101',10) == 0\nodd_Equivalent('101',11) == 0\nodd_Equivalent('101',12) == 1\nodd_Equivalent('101',13) == 1\nodd_Equivalent('101',14) == 1\nodd_Equivalent('101',15) == 2\nodd_Equivalent('101',16) == 2\nodd_Equivalent('101',17) == 2\nodd_Equivalent('101',18) == 2\nodd_Equivalent('101',19) == 3\nodd_Equivalent('101',20) == 2\nodd_Equivalent('101',21) == 2\nodd_Equivalent('101',22) == 2\nodd_Equivalent('101',23) == 3\nodd_Equivalent('101',24) == 2\nodd_Equivalent('101',25) == 3\nodd_Equivalent('101',26) == 3\nodd_Equivalent('101',27) == 3\nodd_Equivalent('101',28) == 3\nodd_Equivalent('101',29) == 3\nodd_Equivalent('101',30) == 3\nodd_Equivalent('101',31) == 3\nodd_Equivalent('101',32) == 3\nodd_Equivalent('101',33) == 3\nodd_Equivalent('101',34) == 3\nodd_Equivalent('101',35) == 3\nodd_Equivalent('101',36) == 3\nodd_Equivalent('101',37) == 3\nodd_Equivalent('101',38) == 3\nodd_Equivalent('101',39) == 3\nodd_Equivalent('101',40) == 3\nodd_Equivalent('101',41) == 3\nodd_Equivalent('101',42) == 3\nodd_Equivalent('101',43) == 3\nodd_Equivalent('101',44) == 3\nodd_Equivalent('101',45) == 3\nodd_Equivalent('101',46) == 3\nodd_Equivalent('101',47) == 3\nodd_Equivalent('101',48) == 3\nodd_Equivalent('101',49) == 3\nodd_Equivalent('101',50) == 3\nodd_Equivalent('101',51) == 3\nodd_Equivalent('101',52) == 3\nodd_Equivalent('101',53) == 3\nodd_Equivalent('101',54) == 3\nodd_Equivalent('101',55) == 3\nodd_Equivalent('101',56) == 3\nodd_Equivalent('101',57) == 3\nodd_Equivalent('101',58) == 3\nodd_Equivalent('101',59) == 3\nodd_Equivalent('101',60) == 3\nodd_Equivalent('101',61) == 3\nodd_Equivalent('101',62) == 3\nodd_Equivalent('101',63) == 3\nodd_Equivalent('101',64) == 3\nodd_Equivalent('101',65) == 3\nodd_Equivalent('101',66) == 3\nodd_Equivalent('101',67) == 3\nodd_Equivalent('101',68) == 3\nodd_Equivalent('101',69) == 3\nodd_Equivalent('101',70) == 3\nodd_Equivalent('101',71) == 3\nodd_Equivalent('101',72) == 3\nodd_Equivalent('101',73) == 3\nodd_Equivalent('101',74) == 3\nodd_Equivalent('101',75) == 3\nodd_Equivalent('101',76) == 3\nodd_Equivalent('101',77) == 3\nodd_Equivalent('101',78) == 3\nodd_Equivalent('101',79) == 3\nodd_Equivalent('101',80) == 3\nodd_Equivalent('101',81) == 3\nodd_Equivalent('101',82) == 3\nodd_Equivalent('101',83) == 3\nodd_Equivalent('101',84) == 3\nodd_Equivalent('101',85) == 3\nodd_Equivalent('101',86) == 3\nodd_Equivalent('101',87) == 3\nodd_Equivalent('101',88) == 3\nodd_Equivalent('101',89) == 3\nodd_Equivalent('101',90) == 3\nodd_Equivalent('101',91) == 3\nodd_Equivalent('101',92) == 3\nodd_Equivalent('101',93) == 3\nodd_Equivalent('101',94) == 3\nodd_Equivalent('101',95) == 3\nodd_Equivalent('101',96) == 3\nodd_Equivalent('101',97) == 3\nodd_Equivalent('101',98) == 3\nodd_Equivalent('101',99) == 3\nodd_Equivalent('101',100) == 3\nodd_Equivalent('101',101) == 0\nodd_Equivalent('101',102) == 1\nodd_Equivalent('101',103) == 1\nodd_Equivalent('101',104) == 1\nodd_Equivalent('101',105) == 1\nodd_Equivalent('101',106) == 1\nodd_Equivalent('101',107) == 1\nodd_Equivalent('101',108) == 2\nodd_Equivalent('101',109) == 1\nodd_Equivalent('101',110) == 1\nodd_Equivalent('101',111) == 1\nodd_Equivalent('101',112) == 1\nodd_Equivalent('101',113) == 1\nodd_Equivalent('101',114) == 1\nodd_Equivalent('101',115) == 1\nodd_Equivalent('101',116) == 1\nodd_Equivalent('101',117) == 1\nodd_Equivalent('101',118) == 1\nodd_Equivalent('101',119) == 1\nodd_Equivalent('101',120) == 1\nodd_Equivalent('101',121) == 1\nodd_Equivalent('101',122) == 1\nodd_Equivalent('101',123) == 1\nodd_Equivalent('101',124) == 1\nodd_Equivalent('101',125) == 1\nodd_Equivalent('101',126) == 1\nodd_Equivalent('101',127) == 1\nodd_Equivalent('101',128) == 1\nodd_Equivalent('101',129) == 1\nodd_Equivalent('101',130) == 1\nodd_Equivalent('101',131) == 1\nodd_Equivalent('101',132) == 1\nodd_Equivalent('101',133) == 1\nodd_Equivalent('101',134) == 1\nodd_Equivalent('101',135) == 1\nodd_Equivalent('101',136) == 1\nodd_Equivalent('101',137) == 1\nodd_Equivalent('101',138) == 1\nodd_Equivalent('101',139) == 1\nodd_Equivalent('101',140) == 1\nodd_Equivalent('101',141) == 1\nodd_Equivalent('101',142) == 1\nodd_Equivalent('101',143) == 1\nodd_Equivalent('101',144) == 1\nodd_Equivalent('101',145) == 1\nodd_Equivalent('101',146) == 1\nodd_Equivalent('101',147) == 1\nodd_Equivalent('101',148) == 1\nodd_Equivalent('101',149) == 1\nodd_Equivalent('101',150) == 1\nodd_Equivalent('101',151) == 1\nodd_Equivalent('101',152) == 1\nodd_Equivalent('101',153) == 1\nodd_Equivalent('101',154) == 1\nodd_Equivalent('101',155) == 1\nodd_Equivalent('101',156) == 1\nodd_Equivalent('101',157) == 1\nodd_Equivalent('101',158) == 1\nodd_Equivalent('101',159) == 1\nodd_Equivalent('101',160) == 1\nodd_Equivalent('101',161) == 1\nodd_Equivalent('101',162) == 1\nodd_Equivalent('101',163) == 1\nodd_Equivalent('101',164) == 1\nodd_Equivalent('101',165) == 1\nodd_Equivalen"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_Equivalent('10', 1) == 2\nassert odd_Equivalent('100', 1) == 2\nassert odd_Equivalent('001', 1) == 2\nassert odd_Equivalent('00100', 1) == 2\nassert odd_Equivalent('00010', 1) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_Equivalent(\"1101\",\"0\")==3 \nassert odd_Equivalent(\"0000\",\"1\")==7 \nassert odd_Equivalent(\"1011\",\"1\")==6\nassert odd_Equivalent(\"0111\",\"1\")==3\nassert odd_Equivalent(\"0001\",\"0\")==8\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_Equivalent('1011',2) == 6\nassert     odd_Equivalent('1011',3) == 8\nassert     odd_Equivalent('1011',4) == 10\nassert     odd_Equivalent('1011',5) == 12\nassert     odd_Equivalent('1011',6) == 14\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_Equivalent(\"101\",1) == 1\nodd_Equivalent(\"010\",1) == 0\nodd_Equivalent(\"111\",1) == 3\nodd_Equivalent(\"011\",1) == 2\nodd_Equivalent(\"100\",1) == 1\nodd_Equivalent(\"100\",2) == 2\nodd_Equivalent(\"101\",2) == 3\nodd_Equivalent(\"111\",2) == 6\nodd_Equivalent(\"011\",2) == 3\nodd_Equivalent(\"100\",3) == 3\nodd_Equivalent(\"100\",4) == 5\nodd_Equivalent(\"101\",4) == 7\nodd_Equivalent(\"111\",4) == 10\nodd_Equivalent(\"011\",4) == 6\nodd_Equivalent(\"100\",5) == 5\nodd_Equivalent(\"100\",6) == 8\nodd_Equivalent(\"101\",6) == 11\nodd_Equivalent(\"111\",6) == 14\nodd_Equivalent(\"011\",6) == 9\nodd_Equivalent(\"100\",7) == 7\nodd_Equivalent(\"100\",8) == 11\nodd_Equivalent(\"101\",8) == 13\nodd_Equivalent(\"111\",8) == 20\nodd_Equivalent(\"011\",8) == 14\nodd_Equivalent(\"100\",9) == 9\nodd_Equivalent(\"100\",10) == 13\nodd_Equivalent(\"101\",10) == 17\nodd_Equivalent(\"111\",10) == 26\nodd_Equivalent(\"011\",10) == 17\nodd_Equivalent(\"100\",11) == 13\nodd_Equivalent(\"100\",12) == 15\nodd_Equivalent(\"101\",12) == 19\nodd_Equivalent(\"111\",12) == 32\nodd_Equivalent(\"011\",12) == 15\nodd_Equivalent(\"100\",13) == 13\nodd_Equivalent(\"100\",14) == 16\nodd_Equivalent(\"101\",14) == 21\nodd_Equivalent(\"111\",14) == 42\nodd_Equivalent(\"011\",14) == 21\nodd_Equivalent(\"100\",15) == 15\nodd_Equivalent(\"100\",16) == 19\nodd_Equivalent(\"101\",16) == 23\nodd_Equivalent(\"111\",16) == 50\nodd_Equivalent(\"011\",16) == 23\nodd_Equivalent(\"100\",17) == 19\nodd_Equivalent(\"100\",18) == 23\nodd_Equivalent(\"101\",18) == 27\nodd_Equivalent(\"111\",18) == 63\nodd_Equivalent(\"011\",18) == 27\nodd_Equivalent(\"100\",19) == 23\nodd_Equivalent(\"100\",20) == 28\nodd_Equivalent(\"101\",20) == 31\nodd_Equivalent(\"111\",20) == 76\nodd_Equivalent(\"011\",20) == 31\nodd_Equivalent(\"100\",21) == 28\nodd_Equivalent(\"100\",22) == 34\nodd_Equivalent(\"101\",22) == 37\nodd_Equivalent(\"111\",22) == 84\nodd_Equivalent(\"011\",22) == 37\nodd_Equivalent(\"100\",23) == 34\nodd_Equivalent(\"100\",24) == 41\nodd_Equivalent(\"101\",24) == 45\nodd_Equivalent(\"111\",24) == 94\nodd_Equivalent(\"011\",24) == 45\nodd_Equivalent(\"100\",25) == 41\nodd_Equivalent(\"100\",26) == 44\nodd_Equivalent(\"101\",26) == 47\nodd_Equivalent(\"111\",26) == 108\nodd_Equivalent(\"011\",26) == 47\nodd_Equivalent(\"100\",27) == 44\nodd_Equivalent(\"100\",28) == 43\nodd_Equivalent(\"101\",28) == 47\nodd_Equivalent(\"111\",28) == 104\nodd_Equivalent(\"011\",28) == 47\nodd_Equivalent(\"100\",29) == 43\nodd_Equivalent(\"100\",30) == 42\nodd_Equivalent(\"101\",30) == 47\nodd_Equivalent(\"111\",30) == 106\nodd_Equivalent(\"011\",30) == 47\nodd_Equivalent(\"100\",31) == 42\nodd_Equivalent(\"100\",32) == 41\nodd_Equivalent(\"101\",32) == 49\nodd_Equivalent(\"111\",32) == 128\nodd_Equivalent(\"011\",32) == 49\nodd_Equivalent(\"100\",33) == 41\nodd_Equivalent(\"100\",34) == 40\nodd_Equivalent(\"101\",34) == 47\nodd_Equivalent(\"111\",34) == 97\nodd_Equivalent(\"011\",34) == 47\nodd_Equivalent(\"100\",35) == 40\nodd_Equivalent(\"100\",36) == 39\nodd_Equivalent(\"101\",36) == 48\nodd_Equivalent(\"111\",36) == 112\nodd_Equivalent(\"011\",36) == 48\nodd_Equivalent(\"100\",37) == 39\nodd_Equivalent(\"100\",38) == 38\nodd_Equivalent(\"101\",38) == 43\nodd_Equivalent(\"111\",38) == 114\nodd_Equivalent(\"011\",38) == 43\nodd_Equivalent(\"100\",39) == 38\nodd_Equivalent(\"100\",40) == 37\nodd_Equivalent(\"101\",40) == 44\nodd_Equivalent(\"111\",40) == 116\nodd_Equivalent(\"011\",40) == 44\nodd_Equivalent(\"100\",41) == 37\nodd_Equivalent(\"100\",42) == 36\nodd_Equivalent(\"101\",42) == 44\nodd_Equivalent(\"111\",42) == 126\nodd_Equivalent(\"011\",42) == 44\nodd_Equivalent(\"100\",43) == 36\nodd_Equivalent(\"100\",44) == 35\nodd_Equivalent(\"101\",44) == 43\nodd_Equivalent(\"111\",44) == 143\nodd_Equivalent(\"011\",44) == 43\nodd_Equivalent(\"100\",45) == 35\nodd_Equivalent(\"100\",46) == 34\nodd_Equivalent(\"101\",46) == 37\nodd_Equivalent(\"111\",46) == 105\nodd_Equivalent(\"011\",46) == 37\nodd_Equivalent(\"100\",47) == 34\nodd_Equivalent(\"100\",48) == 33\nodd_Equivalent(\"101\",48) == 36\nodd_Equivalent(\"111\",48) == 113\nodd_Equivalent(\"011\",48) == 36\nodd_Equivalent(\"100\",49) == 33\nodd_Equivalent(\"100\",50) == 32\nodd_Equivalent(\"101\",50) == 36\nodd_Equivalent(\"111\",50) == 112\nodd_Equivalent(\"011\",50) == 36\nodd_Equivalent(\"100\",51) == 32\nodd_Equivalent(\"100\",52) == 31\nodd_Equivalent(\"101\",52) == 37\nodd_Equivalent(\"111\",52) == 124\nodd_Equivalent(\"011\",52) == 37\nodd_Equivalent(\"100\",53) == 31\nodd_Equivalent(\"100\",54) == 30\nodd_Equivalent(\"101\",54) == 35\nodd_Equivalent(\"111\",54) == 143\nodd_Equivalent(\"011\",54) == 35\nodd_Equivalent(\"100\",55) == 30\nodd_Equivalent(\"100\",56) == 29\nodd_Equivalent(\"101\",56) == 37\nodd_Equivalent(\"111\",56) == 126\nodd_Equivalent(\"011\",56) == 37\nodd_Equivalent(\"100\",57) == 29\nodd_Equivalent(\"100\",58) == 28\nodd_Equivalent(\"101\",58) == 30\nodd_Equivalent(\"111\",58) == 107\nodd_Equivalent(\"011\",58) == 30\nodd_Equivalent(\"100\",59) == 28\nodd_Equivalent(\"100\",60) == 27\nodd_Equivalent(\"101\",60) == 31\nodd_Equivalent(\"111\",60) == 112\nodd_Equivalent(\"011\",60) == 31\nodd_Equivalent(\"100\",61) == 27\nodd_Equivalent(\"100\",62) == 26\nodd_Equivalent(\"101\",62) == 30\nodd_Equivalent(\"111\",62) == 143\nodd_Equivalent(\"011\",62) == 30\nodd_Equivalent(\"100\",63) == 26\nodd_Equivalent(\"100\",64) == 25\nodd_Equivalent(\"101\",64) == 27\nodd_Equivalent(\"111\",64) == 124\nodd_Equivalent(\"011\",64) == 27\nodd_Equivalent(\"100\",65) == 25\nodd_Equivalen"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_Equivalent(\"0111\", 0) == 5\nassert odd_Equivalent(\"0111\", 1) == 6\nassert odd_Equivalent(\"0111\", 2) == 7\nassert odd_Equivalent(\"0111\", 3) == 6\nassert odd_Equivalent(\"0111\", 4) == 7\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[0], [1], [2], [3]]) ==     [0, 1, 2]\nassert     common_in_nested_lists([[0, 1], [1, 2], [1, 2]]) ==     [1]\nassert     common_in_nested_lists([[1], [2], [3]]) ==     [1, 2, 3]\nassert     common_in_nested_lists([[0], [1], [2]]) ==     [0, 1, 2]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not common_in_nested_lists([[],[]])\nassert not common_in_nested_lists([[1,2,3],[4,5,6]])\nassert common_in_nested_lists([[1,2,3],[2,4,6]])\nassert common_in_nested_lists([[1],[2],[3],[4],[5]])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert common_in_nested_lists([[1], [[2]], [[3]]]) == [[2]]\nassert common_in_nested_lists([[1, 2], [[2]], [[3]]]) == [[2]]\nassert common_in_nested_lists([[1, 2, 3], [[2]], [[3]]]) == [[2, 3]]\nassert common_in_nested_lists([[1, 2, 3], [[2]], [[3]]]) == [[2, 3]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([[1, 2], [[3], [4]], [[1, 2]]]) == [[1, 2], [1, 2]]\nassert common_in_nested_lists([[], [[]], []]) == [[]]\nassert common_in_nested_lists([[], [[]], [1, 2]]) == [[1, 2]]\nassert common_in_nested_lists([[1], [[1, 2]], [[1, 2]]]) == [[1]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [1, 2], [3]]) == 1, \"1, 2\"\nassert     common_in_nested_lists([[1, 2], [1, 2, 3], [3]]) == 3, \"1, 2, 3\"\nassert     common_in_nested_lists([[1, 2], [1], [1, 2, 3]]) == 2, \"1, 1\"\nassert     common_in_nested_lists([[1, 2, 3], [1, 2], [3]]) == 1, \"1, 2\"\nassert     common_in_nested_lists([[1], [1, 2, 3], [1, 2], [3]]) == 1, \"1, 2, 3\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[1],2,[3],[4,5,6]]) == {1, 2, 3, 4, 5, 6}\nassert     common_in_nested_lists([[1,2,3],[4,5],[6]]) == {1, 2, 3, 4, 5, 6}\nassert     common_in_nested_lists([[[1],2],[3]]) == {1, 2, 3}\nassert     common_in_nested_lists([[1,2,3],[4,5,6]]) == {1, 2, 3, 4, 5, 6}\nassert     common_in_nested_lists([[],[],[],[]]) == set()\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[], [[]], [[]]]) == []\nassert     common_in_nested_lists([[], [[1]], [[1]]]) == [1]\nassert     common_in_nested_lists([[], [[1], [1]], [[1], [1]]]) == [1]\nassert     common_in_nested_lists([[], [[1], [1]], [[1], [1]]]) == [1]\nassert     common_in_nested_lists([[], [[1], [1], [1]], [[1], [1], [1]]]) == [1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists([[1, 2], [3], [[4], 5, 6]]) == [[4], 5, 6]\nassert     common_in_nested_lists([[1, 2], [[[3]], [[4], 5, 6]]]) == [[4], 5, 6]\nassert     common_in_nested_lists([[[[3]], [[4], 5, 6]]]) == [[4], 5, 6]\nassert     common_in_nested_lists([[[3], [[4], 5, 6]]]) == [[4], 5, 6]\nassert     common_in_nested_lists([[[3]], [[4]], [[5], 6]]) == [[4], 5, 6]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer('12')     == True,'string does not represent an integer'\nassert     check_integer('12.5')    == False,'string does not represent an integer'\nassert     check_integer('0')        == True,'string does not represent an integer'\nassert     check_integer('1.2')    == False,'string does not represent an integer'\nassert     check_integer('1.2.3')    == False,'string does not represent an integer'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer('2')     ==     True\nassert     check_integer('Hello World')     ==     False\nassert     check_integer('A')     ==     True\nassert     check_integer('-2')     ==     True\nassert     check_integer('3.2')     ==     False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('a') == False, 'a is not an integer'\nassert     check_integer('a5') == False, 'a5 is not an integer'\nassert     check_integer('1.4') == False, '1.4 is an integer'\nassert     check_integer('1e3') == False, '1e3 is not an integer'\nassert     check_integer('a4.5') == False, 'a4.5 is not an integer'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_integer('123') == True\nassert     check_integer('123.123') == False\nassert     check_integer('abc') == False\nassert     check_integer('-123') == False\nassert     check_integer('123.a') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer('abc') == False\nassert     check_integer('123') == True\nassert     check_integer('123.34') == False\nassert     check_integer('-1') == True\nassert     check_integer(2) == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('Check_integer: check_integer(123) = {}'.format(check_integer('123')))\nprint('Check_integer: check_integer(123.123) = {}'.format(check_integer('123.123')))\nprint('Check_integer: check_integer(1.23) = {}'.format(check_integer('1.23')))\nprint('Check_integer: check_integer(1.23.3) = {}'.format(check_integer('1.23.3')))\nprint('Check_integer: check_integer(5) = {}'.format(check_integer('5')))\nprint('Check_integer: check_integer(5.2) = {}'.format(check_integer('5.2')))\nprint('Check_integer: check_integer(5.5) = {}'.format(check_integer('5.5')))\nprint('Check_integer: check_integer(-2) = {}'.format(check_integer('-2')))\nprint('Check_integer: check_integer(-1.2) = {}'.format(check_integer('-1.2')))\nprint('Check_integer: check_integer(0) = {}'.format(check_integer('0')))\nprint('Check_integer: check_integer(1) = {}'.format(check_integer('1')))\nprint('Check_integer: check_integer(2) = {}'.format(check_integer('2')))\nprint('Check_integer: check_integer(5.2) = {}'.format(check_integer('5.2')))\nprint('Check_integer: check_integer(5.2.3) = {}'.format(check_integer('5.2.3')))\nprint('Check_integer: check_integer(-2.1) = {}'.format(check_integer('-2.1')))\nprint('Check_integer: check_integer(-2.1.2) = {}'.format(check_integer('-2.1.2')))\nprint('Check_integer: check_integer(3.3) = {}'.format(check_integer('3.3')))\nprint('Check_integer: check_integer(3.3.3) = {}'.format(check_integer('3.3.3')))\nprint('Check_integer: check_integer(1.1) = {}'.format(check_integer('1.1')))\nprint('Check_integer: check_integer(1.1.1) = {}'.format(check_integer('1.1.1')))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_integer(\"42\") == True\nassert     check_integer(\"qwe\") == False\nassert     check_integer(\"0\") == True\nassert     check_integer(\"1.2\") == False\nassert     check_integer(\"-1\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('-2') == True\nassert     check_integer('0') == False\nassert     check_integer('xyz') == False\nassert     check_integer('4.2') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('2') == True\nassert     check_integer('12345') == True\nassert     check_integer('-12345') == True\nassert     check_integer('123') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_integer(\"1\") == True\nassert check_integer(\"3.4\") == False\nassert check_integer(\"-3.4\") == True\nassert check_integer(\"-0.1\") == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([]) is True, \"Empty list should return True\"\nassert     empty_dit([{}]) is True, \"List of empty dictionaries should return True\"\nassert     empty_dit([{1:2}]) is True, \"List of dictionaries with one key value pair should return True\"\nassert     empty_dit([{1:2, 2:3}, {1:2, 3:4}, {1:2, 3:4}, {1:2}]) is False, \"List with several dictionaries should return False\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1,2,3,4},{},{}]) == True\nassert     empty_dit([{},{1,2,3,4},{},{}]) == False"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_dit([]) == True, \"Wrong result\"\nassert     empty_dit([{\"A\":1,\"B\":2},{\"C\":3},{\"D\":4}]) == True, \"Wrong result\"\nassert     empty_dit([{\"A\":1},{}]) == False, \"Wrong result\"\nassert     empty_dit([]) == True, \"Wrong result\"\nassert     empty_dit([{\"A\":1}]) == True, \"Wrong result\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit([{}, {}, {}, {}, {}])\nassert     empty_dit([{}, {}, {}, {}, {}]) == False\n\ndef empty_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_dit(\n        [\n            {},\n            {1: 1},\n            {'A': 1},\n            {1: 2, 'A': 2},\n        ]\n    ) == True\nassert     empty_dit(\n        [\n            {},\n            {1: 1},\n            {'A': 1},\n            {1: 2, 'A': 2},\n        ]\n    ) == False\nassert     empty_dit(\n        [\n            {},\n            {},\n            {1: 1},\n            {'A': 1},\n            {1: 2, 'A': 2},\n        ]\n    ) == False\nassert     empty_dit(\n        [\n            {},\n            {},\n            {},\n            {'A': 1},\n            {1: 2, 'A': 2},\n        ]\n    ) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_items_of_type(item, l):\n    '''\n    Write a function that counts the number of items in a given list having a given type.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_dit([{},{},{},{},{}]) == True\nassert     empty_dit([{1,2,3},{4,5,6},{7},{},{}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_dit([{}]) == True, \"Test case 1 failed\"\nassert empty_dit([{'name':'John','salary':1.5}]) == False, \"Test case 2 failed\"\nassert empty_dit([{'name':'John'}, {'name':'Tom','salary':3.5}]) == False, \"Test case 3 failed\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_dit([{}, {}, {}])    == True, \\\n        \"Empty dictionary\"\nassert     empty_dit([{1}, {}, {}])    == False, \\\n        \"Non-empty dictionary\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit(    [{}, {}, {}]    ) == True\nassert     empty_dit(    []    ) == True\nassert     empty_dit(    [{1:1}, {2:2}, {3:3}]    ) == False\nassert     empty_dit(    [{}, {}, {1:1}, {2:2}, {3:3}]    ) == False\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 24, 'WRONG'\nassert     tuple_to_int((0,0,0)) == 0, 'WRONG'\nassert     tuple_to_int((0,0)) == 0, 'WRONG'\nassert     tuple_to_int((1,)) == 1, 'WRONG'\nassert     tuple_to_int((1,1,1,1,1,1,1)) == 14, 'WRONG'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 12\nassert     tuple_to_int((6, 8)) == 24\nassert     tuple_to_int((-1, -2, -3, -4)) == -10\nassert     tuple_to_int((1, -2, 3, -4)) == -12\nassert     tuple_to_int((2, 2, 2, 2)) == 4\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 6\nassert tuple_to_int((4, 3, 2, 1)) == 10\nassert tuple_to_int((1,)) == 1\nassert tuple_to_int((2,3)) == 6\nassert tuple_to_int((0,0,0)) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntuple_to_int((0, 1, 2, 3)) == 6\ntuple_to_int((1, 2, 3)) == 9\ntuple_to_int((1, 2, 3, 4)) == 18\ntuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 5015\ntuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 5020\ntuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == 5030"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int(('1', '2', '3', '4')) == 123, \\\n        'This should be 123'\nassert     tuple_to_int(('2', '4')) == 24, \\\n        'This should be 24'\nassert     tuple_to_int(('1', '0', '1', '0')) == 11, \\\n        'This should be 11'\nassert     tuple_to_int(('1', '2', '2', '1')) == 123, \\\n        'This should be 123'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1,2,3)) == 6, \"Wrong answer\"\nassert     tuple_to_int((1,2)) == 2, \"Wrong answer\"\nassert     tuple_to_int((1,)) == 1, \"Wrong answer\"\nassert     tuple_to_int((3,4,5)) == 15, \"Wrong answer\"\nassert     tuple_to_int((6,7,8)) == 24, \"Wrong answer\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6, \"Wrong value\"\n\n'''\nGiven a list of positive integers, return the number of pairs of integers in the list whose absolute difference is not equal to 1.\n\n\n\nExample 1:\n\nInput: arr = [1,7,5]\nOutput: 2\nExplanation: \nThe absolute difference of 7-5 is 5.\n7 is with 7-5 difference of 1.\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 123, \\\n        \"FAILED: tuple_to_int(('1', '2', '3', '4', '5'))\"\nassert     tuple_to_int((1,)) == 1, \\\n        \"FAILED: tuple_to_int(('1',))\"\nassert     tuple_to_int((2,)) == 2, \\\n        \"FAILED: tuple_to_int(('2',))\"\nassert     tuple_to_int((-1,)) == -1, \\\n        \"FAILED: tuple_to_int((-1,))\"\nassert     tuple_to_int((1,2,3)) == 123, \\\n        \"FAILED: tuple_to_int((1,2,3))\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int([1,3,2]) == 12\nassert     tuple_to_int((1,2,3)) == 12\nassert     tuple_to_int((3,2,1)) == 12\nassert     tuple_to_int((1,2,3,4)) == 24\nassert     tuple_to_int((2,3,4,5,6,7,8,9,10,11,12)) == 21212\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for n in nums:\n        total = total * 10 + n\n    return total\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float(test_list) == [3.14, 4.2, \"a\", \"b\", True]\nassert    list_to_float([[\"a\", \"b\", \"c\"]]) == [[3.14, 4.2, \"a\"], [3.14, 4.2, \"b\"], [3.14, 4.2, \"c\"]]\nassert    list_to_float([[\"a\", \"b\"], [\"c\", \"d\", \"e\"]]) == [[3.14, 4.2, \"a\", \"b\"], [\"c\", \"d\", \"e\", 3.14, 4.2, \"a\"]]\nassert    list_to_float([[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]) == [[3.14, 4.2, \"a\", \"b\", \"c\"], [\"d\", \"e\", 3.14, 4.2, \"a\"]]\nassert    list_to_float([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\"]]) == [[3.14, 4.2, \"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\", 3.14, 4.2, \"a\"]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_to_float([[1.2], ['hello']]) == [[1.2], [1.2]]\nassert list_to_float([[1, 2], ['hello']]) == [[1., 2.], [1.0, 2.0]]\nassert list_to_float([['hello'], ['hello']]) == [[1.2], [1.2]]\nassert list_to_float([['hello'], ['hello'], ['world']]) == [[1.2], [1.2], [2.]]\nassert list_to_float([[1, 2, 'hello'], ['hello'], ['world']]) == [[1., 2., 1.2], [1.0, 2.0, 1.0], [2.0, 1.2, 2.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_to_float([[\"a\", 1, 3], [\"b\", 2, 4]]) == [[1.0, 3.0, 4.0], [2.0, 4.0, 6.0]]\nassert     list_to_float([[\"a\", 1.1, 3.1], [\"b\", 2.2, 4.2]]) == [[1.1, 3.1, 4.2], [2.2, 4.2, 6.2]]\nassert     list_to_float([[\"a\", 1, 3], [\"b\", \"2\", 4]]) == [[1.0, 3.0, 4.0], [\"2.0\", \"4.0\", 6.0]]\n\ndef list_to_string(test_list):\n    '''\n    Write a function that converts a list of lists to a string of the form \"[element1][element2]\"\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_to_float( [[1,2],\n                          [1.1,2.2],\n                          [2.1,4.1],\n                          [2,4.1],\n                          [-1,2] ]) == [[1.0,2.0],\n                                            [1.1,2.2],\n                                            [2.0,4.0],\n                                            [2.0,4.0],\n                                            [-1.0,2.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_to_float([[1,2,3], \n                        [4,5,6]]) == [[1,2,3], \n                            [4,5,6]]\nassert list_to_float([[1,2,3],\n                      [4,5,6]]) == [[1.0,2.0,3.0],\n                            [4.0,5.0,6.0]]\nassert list_to_float([[1,2,3],\n                      [4,5,6]]) == [[1.0,2.0,3.0],\n                            [4.0,5.0,6.0]]\nassert list_to_float([[1,2,3],\n                      [4,5,6],\n                      [7,8,9]]) == [[1.0,2.0,3.0],\n                            [4.0,5.0,6.0],\n                            [7.0,8.0,9.0]]\nassert list_to_float([[1,2,3],\n                      [4,5,6],\n                      [7,8,9]]) == [[1.0,2.0,3.0],\n                            [4.0,5.0,6.0],\n                            [7.0,8.0,9.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([[1],['1'],['1.2']]) == [[1],['1.0'],['1.2']]\nassert     list_to_float([['1', '1.2'], ['1.2'], ['1.2']]) == [['1.0', '1.2'], ['1.2'], ['1.2']]\nassert     list_to_float([[1, 2], ['1.2'], ['1.2']]) == [[1.0, 2.0], ['1.2'], ['1.2']]\nassert     list_to_float([[1, 2], ['1.2'], ['1.2', 1, 2]]) == [[1.0, 2.0], ['1.2'], ['1.2', 1.0, 2.0]]\nassert     list_to_float([[1, 2], ['1.2', 1, 2], ['1.2']]) == [[1.0, 2.0], ['1.2', 1.0, 2.0], ['1.2']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1, 2], [3, 4.0]]) == [[1.0, 2.0], [3.0, 4.0]]\nassert     list_to_float([[1, '2'], [3, '4.0']]) == [[1.0, 2.0], [3.0, 4.0]]\nassert     list_to_float([[1, False], [3, True]]) == [[1.0, False], [3.0, True]]\nassert     list_to_float([[1, False], [3, True], [4.0, False]]) == [[1.0, False], [3.0, True], [4.0, False]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef list_to_int(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to ints.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_year_leap(year): \n    '''\n    Write a function to check whether the year is leap or not.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_list('hello') == ['h','e','l','l','o'], 'Wrong'\nassert     string_to_list('hello world') == ['h','e','l','l','o',' ','w','o','r','l','d'], 'Wrong'\nassert     string_to_list('hello!') == ['h','e','l','l','o','!'], 'Wrong'\nassert     string_to_list('hello how are you') == ['h','e','l','l','o','h','a','r','e','!'], 'Wrong'\nassert     string_to_list('hello how are you') == ['h','e','l','l','o','h','a','r','e','!'], 'Wrong'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_list('hello world') == ['hello', 'world'], \"First test fails\"\nassert     string_to_list('foo bar') == ['foo', 'bar'], \"Second test fails\"\nassert     string_to_list('   ') == ['', ''], \"Third test fails\"\nassert     string_to_list('   world') == ['', 'world'], \"Fourth test fails\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_list('1 2 3 4 5') == ['1', '2', '3', '4', '5']\nassert     string_to_list('1 2 3 4 5') == ['1', '2', '3', '4', '5']\nassert     string_to_list('1 2 3 4 5') == ['1', '2', '3', '4', '5']\nassert     string_to_list('1,2,3,4,5') == ['1', '2', '3', '4', '5']\nassert     string_to_list('1 2 3 4 5') == ['1', '2', '3', '4', '5']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_list('a b c d') == ['a', 'b', 'c', 'd']\nassert     string_to_list('a b c') == ['a', 'b', 'c']\nassert     string_to_list('a b') == ['a', 'b']\nassert     string_to_list('a') == ['a']\nassert     string_to_list('') == []\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__': \n    string_to_list(\"a b c\") \n    # Expected output: ['a', 'b', 'c']\n    string_to_list(\"a, b, c\") \n    # Expected output: ['a', ',', 'b', ',', 'c']\n    string_to_list(\"a,,, b, c\") \n    # Expected output: ['a', ',', '', ',', 'b', ',', 'c']\n    string_to_list(\"a
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_list(\"a b c\") == ['a', 'b', 'c']\nassert     string_to_list(\" a b c \") == ['a', 'b', 'c']\nassert     string_to_list(\"a b c  \") == ['a', 'b', 'c']\nassert     string_to_list(\"   a b c \") == ['a', 'b', 'c']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_list('j') == ['j']\nassert     string_to_list('j hi') == ['j', 'hi']\nassert     string_to_list('j hi k') == ['j', 'hi', 'k']\nassert     string_to_list('j hi k i') == ['j', 'hi', 'k', 'i']\nassert     string_to_list('j hi k i m') == ['j', 'hi', 'k', 'i','m']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef add_header_to_list(list):\n    '''\n    Write a function to add a header row to a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1, 2, 2, 3, 4, 4]) == 2, \"Error\"\nassert     search([1, 2, 2, 3, 4, 4, 5, 6, 8]) == 2, \"Error\"\nassert     search([0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5]) == 3, \"Error\"\nassert     search([1, 2, 2, 3, 4, 4, 5, 6, 8]) == None, \"Error\"\nassert     search([1, 2, 2, 3, 4, 4, 5, 6, 8, 2]) == 2, \"Error\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([1, 2, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12]) == 5, \"search not working\"\nassert     search([1, 2, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12]) == 5, \"search not working\"\nassert     search([1, 2, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12]) == 5, \"search not working\"\nassert     search([1, 2, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12]) == 5, \"search not working\"\nassert     search([1, 2, 4, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12]) == 5, \"search not working\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsearch([2, 3, 5, 2, 1, 2]) == 3\nassert \nsearch([2, 3, 5, 2, 1, 1]) == 2\nassert \nsearch([1, 2, 3, 3, 5, 5, 5, 5, 5, 5]) == None"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([1,2,1]) == 1, 'Test 1 failed'\nassert     search([1,2,1,4]) == 1, 'Test 2 failed'\nassert     search([1,2,1,4,2,5]) == 1, 'Test 3 failed'\nassert     search([1,2,2]) == 2, 'Test 4 failed'\nassert     search([2,2,2]) == 2, 'Test 5 failed'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([1,2,3,3,3,3,4,5,5]) == 3\nassert     search([1,2,3,4,5,5,5,5,5,5]) == 5\nassert     search([1,2,2,3,4,5,5]) == 2\nassert     search([1,2,2,3,4,5,3]) == 3\nassert     search([1,2,2,3,4,5,3,3,3,3,3]) == 3\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    search([1,2,3,4,5,5,5,5,6,7,8,9,10,10,10,10,10,11]) == 5\n    search([1,2,3,4,5,5,5,5,6,7,8,9,10,10,10,10,10,11]) == 5\n    search([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([2,2,3,3,4,4,4,4,4,6])==4, \"should return 4\"\nassert     search([1,1,1,2,2,2,2])==2, \"should return 2\"\nassert     search([1,2,3,4,5,6,7,8])==-1, \"should return -1\"\nassert     search([1,2,3,4,5,6,7,8])==-1, \"should return -1\"\nassert     search([1,2,3,4,5,6,7,8])==-1, \"should return -1\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(1, 2), (-1, -2), (-1, 1)]) == (1, 2)\nassert max_product_tuple([(1, 2), (1, -2), (1, 1)]) == (1, 2)\nassert max_product_tuple([(-1, 2), (-1, -2), (-1, 1)]) == (-1, -2)\nassert max_product_tuple([(1, -2), (1, -1), (1, 1)]) == (1, -1)\nassert max_product_tuple([(1, -2), (-1, 1), (1, -1)]) == (1, -1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert max_product_tuple(\n    [(5, -3), (-2, 2), (3, 4), (0, 0), (8, 6), (9, 9)]\n) == (-8, 12)\n\nassert max_product_tuple(\n    [(5, -3), (0, 0), (8, 6), (9, 9)]\n) == (9, 9)"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nimport unittest\n\nclass Test(unittest.TestCase):\n    ''' Test Cases '''\n\n    def test_max_product_tuple(self):\n        self.assertEqual(max_product_tuple([(2,5),(3,10),(4,7),(1,2)]), (24,40))\n        self."
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_product_tuple(list1) == (10, 20)\nassert     max_product_tuple(list2) == (10, 20)\nassert     max_product_tuple(list3) == (1, 5)\nassert     max_product_tuple(list4) == (0, 0)\nassert     max_product_tuple(list5) == (-1, -1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(10) == 55\nassert     amicable_numbers_sum(100) == 233\nassert     amicable_numbers_sum(1000) == 233168\nassert     amicable_numbers_sum(10000) == 2445153\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(100) == 30, \"Wrong Answer\"\nassert     amicable_numbers_sum(1000) == 233, \"Wrong Answer\"\nassert     amicable_numbers_sum(2000) == 2365, \"Wrong Answer\"\n\ndef sum_of_amicables(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(100) == 5050\nassert     amicable_numbers_sum(50) == 3060\nassert     amicable_numbers_sum(90) == 5040\nassert     amicable_numbers_sum(1000) == 6175\nassert     amicable_numbers_sum(10000) == 127075\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(1000000) == 2468141, 'Error in amicable_numbers_sum()'\nassert     amicable_numbers_sum(1000) == 342830, 'Error in amicable_numbers_sum()'\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(1) == 1\nassert     amicable_numbers_sum(2) == 1\nassert     amicable_numbers_sum(3) == 2\nassert     amicable_numbers_sum(4) == 3\nassert     amicable_numbers_sum(5) == 5\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    amicable_numbers_sum(1) == 0\n    assert amicable_numbers_sum(2) == 1\n    assert amicable_numbers_sum(3) == 2\n    assert amicable_numbers_sum(4) == 3\n    assert amicable_numbers_sum(5) == 3\n    "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(1000) == 748, \"Expected 748\"\nassert     amicable_numbers_sum(20) == 30, \"Expected 30\"\n\n\n\ndef amicable_numbers_sum_2(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(1) == 0, \"Please, fix this bug!\"\nassert     amicable_numbers_sum(2) == 1, \"Please, fix this bug!\"\nassert     amicable_numbers_sum(5) == 2, \"Please, fix this bug!\"\nassert     amicable_numbers_sum(10) == 6, \"Please, fix this bug!\"\nassert     amicable_numbers_sum(20) == 6, \"Please, fix this bug!\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     amicable_numbers_sum(10) == 7, 'incorrect result'\nassert     amicable_numbers_sum(1) == 0, 'incorrect result'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(3+4j,2+3j) == 45\nassert     angle_complex(-1,1) == 90\nassert     angle_complex(1,1) == 90\nassert     angle_complex(1,-1) == -90\nassert     angle_complex(0,0) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     angle_complex(3+4j,1+2j) == 45+36j, \"Wrong!\"\nassert     angle_complex(-1+2j,3+4j) == -11+16j, \"Wrong!\"\nassert     angle_complex(1+2j,1+2j) == 45+0j, \"Wrong!\"\nassert     angle_complex(0+0j,0+0j) == 0, \"Wrong!\"\nassert     angle_complex(0+0j,0+0j) == 0, \"Wrong!\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(0,0) == 0, \"Passing 0 and 0 should be 0\"\nassert     angle_complex(3,4) == cmath.pi/2, \"Passing 3,4 should be pi/2\"\nassert     angle_complex(0,0) == 0, \"Passing 0 and 0 should be 0\"\nassert     angle_complex(0,1) == -1*cmath.pi/2, \"Passing 0,1 should be -pi/2\"\nassert     angle_complex(-2,3) == -cmath.pi/4, \"Passing -2,3 should be -pi/4\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nangle_complex(1+1j,1-1j) == (0.0 + -1.0j)\nangle_complex(1+1j,1+1j) == (0.0 + -1.0j)\nangle_complex(0+1j,1+1j) == (1.0 - 1.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (1.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 + 0.0j)\nangle_complex(-1+1j,1+1j) == (1.0 - 1.0j)\nangle_complex(-1+1j,0+1j) == (1.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(-1+1j,1-1j) == (1.0 + 1.0j)\nangle_complex(-1+1j,0-1j) == (1.0 + 1.0j)\nangle_complex(1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(0-1j,0-1j) == (-1.0 + 0.0j)\nangle_complex(1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(0-1j,0-1j) == (-1.0 + 0.0j)\nangle_complex(-1+1j,1+1j) == (1.0 - 1.0j)\nangle_complex(-1+1j,0+1j) == (1.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(-1+1j,1-1j) == (1.0 + 1.0j)\nangle_complex(-1+1j,0-1j) == (1.0 + 1.0j)\nangle_complex(1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(0-1j,0-1j) == (0.0 - 0.0j)\nangle_complex(1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(0-1j,0-1j) == (0.0 - 0.0j)\nangle_complex(-1+1j,1+1j) == (1.0 - 1.0j)\nangle_complex(-1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(1+1j,0+1j) == (1.0 + 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 + 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(-1+1j,1-1j) == (1.0 + 1.0j)\nangle_complex(-1+1j,0-1j) == (1.0 + 1.0j)\nangle_complex(1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(0-1j,0-1j) == (-1.0 + 0.0j)\nangle_complex(1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(0-1j,0-1j) == (-1.0 + 0.0j)\nangle_complex(-1+1j,1+1j) == (1.0 - 1.0j)\nangle_complex(-1+1j,0+1j) == (1.0 + 1.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(-1+1j,1-1j) == (1.0 + 1.0j)\nangle_complex(-1+1j,0+1j) == (1.0 + 1.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(-1+1j,1+1j) == (1.0 + 1.0j)\nangle_complex(-1+1j,0+1j) == (1.0 + 1.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(1+1j,0+1j) == (1.0 - 1.0j)\nangle_complex(0+1j,0+1j) == (0.0 + 0.0j)\nangle_complex(-1+1j,1-1j) == (1.0 - 1.0j)\nangle_complex(-1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(1+1j,0-1j) == (1.0 + 1.0j)\nangle_complex(0-1j,0-1j) == (-1.0 + 0.0j)\nangle_complex(1+1j,0-1j) == (1.0 + 1.0j)\nangle_complex(0-1j,0-1j) == (-1.0 + 0.0j)\nangle_complex(-1+1j,1+1j) == (1.0 - 1.0j)\nangle_complex(-1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(1+1j,0-1j) == (1.0 + 1.0j)\nangle_complex(0+1j,0-1j) == (0.0 + 0.0j)\nangle_complex(1+1j,0-1j) == (1.0 + 1.0j)\nangle_complex(0-1j,0-1j) == (0.0 + 0.0j)\nangle_complex(-1+1j,1+1j) == (1.0 - 1.0j)\nangle_complex(-1+1j,0-1j) == (1.0 - 1.0j)\nangle_complex(1+1j,0-1j) == (1.0 + 1.0j)\nangle_complex(0+1j,0-1j) == (0.0 + 0.0j)\nangle_complex(1+1j,0-1j) == (1"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex(1,3+4j) == 0\nassert     angle_complex(1,-3+4j) ==     cmath.pi/2\nassert     angle_complex(3,4) ==         cmath.pi/4\nassert     angle_complex(3,-4) ==         cmath.pi/4\nassert     angle_complex(3,4+3j) ==     cmath.pi/4\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_complex_number(A,B,C):\n    '''\n    Write a function to get the complex number.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_length(0b111111111) == 6, 'Wrong output'\nassert     find_length(0b1) == 0, 'Wrong output'\nassert     find_length(0b1) == 0, 'Wrong output'\nassert     find_length(0b0011) == 5, 'Wrong output'\nassert     find_length(0b111) == 5, 'Wrong output'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_length(\"110101\") == 2, \"Not working as expected\"\nassert     find_length(\"1001101\") == 3, \"Not working as expected\"\nassert     find_length(\"1100110\") == 3, \"Not working as expected\"\nassert     find_length(\"1100110\") == 3, \"Not working as expected\"\nassert     find_length(\"1001101\") == 3, \"Not working as expected\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_length('10101') == 1\nassert     find_length('1110110011') == 3\nassert     find_length('01011110001') == 3\nassert     find_length('01011110001111010101110101010101010101') == 9\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_length('') == 0, \"Empty string\"\nassert     find_length('0000') == 0, \"1s + 0s\"\nassert     find_length('00001101') == 1, \"1s + 1s + 0s\"\nassert     find_length('11000001') == 1, \"1s + 0s + 1s + 0s\"\nassert     find_length('11000100') == 2, \"1s + 0s + 1s + 0s\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_length('101') == 1\n    find_length('1011') == 2\n    find_length('101011101') == 3\n    find_length('10111101') == 3\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length(\"110101101101\") == 2\nassert     find_length(\"101010101\") == 3\nassert     find_length(\"\") == 0\nassert     find_length(\"0101\") == 2\nassert     find_length(\"1101\") == 1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_length('00110101') == 0\nassert     find_length('11111') == 0\nassert     find_length('100110101') == 0\nassert     find_length('1111111') == 3\nassert     find_length('11100011') == 6\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"***********Assignment 5***********\")\nprint(\"***********Problem 1 ***********\")\n\ndef divisible(n): \n    '''\n    Write a python function to check if a number is divisible by another number or not.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum(1,1) == 1\nassert     sum(3,4) == 3\nassert     sum(10,6) == 9\nassert     sum(20,10) == 10\nassert     sum(7,2) == 3\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum(1,3)==1, \"You did not write a function that sums the numbers 1 and 3\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum(2,2) == 4, 'Test 1 failed'\nassert     sum(6,8) == 14, 'Test 2 failed'\n\nprint('All test cases passed!!')"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum(12,6) == 4, \"the result is wrong\"\nassert     sum(8,8) == 8, \"the result is wrong\"\nassert     sum(2,2) == 2, \"the result is wrong\"\nassert     sum(6,6) == 8, \"the result is wrong\"\n\nprint (\"Your function is correct!\")\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum(12,25) == 20\nassert sum(15,25) == 30\n\ndef print_args(a, b): \n    '''\n    Write a python function to print the common divisors of two given numbers.\n    '''\n    pass"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum(60,16) == 4\nassert     sum(30,25) == 5\nassert     sum(8,12) == 5\nassert     sum(24,24) == 24\nassert     sum(50,25) == 12\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum(2,3) == 6, \"error: sum(2,3) should be 6\"\nassert     sum(3,4) == 7, \"error: sum(3,4) should be 7\"\nassert     sum(10,20) == 30, \"error: sum(10,20) should be 30\"\nassert     sum(5,10) == 15, \"error: sum(5,10) should be 15\"\nassert     sum(15,10) == 15, \"error: sum(15,10) should be 15\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum(2,4) == 1, \"Error\"\nassert     sum(5,5) == 10, \"Error\"\n\ndef sum_divisors(n): \n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum(4,8) == 0\nassert sum(4,9) == 1\nassert sum(4,20) == 2\nassert sum(4,24) == 7\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert multiply_int(1,2) == 2\nassert multiply_int(1,3) == 3\nassert multiply_int(2,4) == 8\n\ndef multiply_float(x, y):\n    '''\n    Write a function to multiply two floats.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (multiply_int(2, 5) == 10), 'wrong result'\nassert     (multiply_int(2, 5) == 10), 'wrong result'\nassert     (multiply_int(1, 2) == 2), 'wrong result'\nassert     (multiply_int(1, 2) == 2), 'wrong result'\nassert     (multiply_int(1, -2) == -2), 'wrong result'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(3, 5) == 15\nassert     multiply_int(0, 3) == 0\nassert     multiply_int(-3, -2) == -6\nassert     multiply_int(100000000000000, 9) == 900000000000000\nassert     multiply_int(-1000000000000000, -3) == 3000000000000000\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(2, 5) == 10\nassert     multiply_int(10, 10) == 100\nassert     multiply_int(2, -5) == -20\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(123456789, 123456789) == 123456789\nassert     multiply_int(123456789, -123456789) == -123456789\nassert     multiply_int(-123456789, 123456789) == -123456789\nassert     multiply_int(-123456789, -123456789) == 123456789\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(2, 3) == 6, \"test 1 failed\"\nassert     multiply_int(-2, -3) == -6, \"test 2 failed\"\nassert     multiply_int(0, 0) == 0, \"test 3 failed\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_int(3, 4) == 12\nassert     multiply_int(-3, 4) == -12\nassert     multiply_int(3.0, 4.0) == 12.0\nassert     multiply_int(3, -4.0) == -12.0\nassert     multiply_int(3.0, -4) == -12.0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_int(1,1) == 1\nassert     multiply_int(2,2) == 4\nassert     multiply_int(9,9) == 81\n\nprint('\\nCorrect')\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_int(3, 2) == 6\nassert     multiply_int(7, 5) == 49\nassert     multiply_int(-1, 1) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     long_words(3, [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abv\", \"a\", \"a\", \"ab\"]) == ['abcde', 'abv', 'ab', 'a']\nassert long_words(2, [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abv\", \"a\", \"a\", \"ab\"]) == ['abc', 'ab', 'a']\n\ndef common_chars(s1, s2):\n    '''\n    Write a function to find the characters that are common in both the given strings.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     long_words(4, [\"python\", \"java\", \"python\", \"cpp\"]) == [\"python\", \"java\"]\nassert     long_words(4, [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"]) == [\"i\", \"love\", \"leetcode\"]\nassert     long_words(3, [\"a\", \"aa\", \"aaa\", \"aaaa\"]) == [\"aaa\"]\nassert     long_words(2, [\"bb\", \"aa\"]) == [\"aa\"]\nassert     long_words(1, [\"a\"]) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     long_words(2, ['an', 'banana']) == ['banana']\nassert     long_words(2, ['bear', 'bear', 'banana', 'dog']) == ['bear']\nassert     long_words(3, ['hello', 'world', 'everything']) == []\nassert     long_words(1, ['a', 'apple', 'apple', 'apple', 'apple', 'apple']) == ['apple']\nassert     long_words(3, ['hello', 'world', 'everything', 'hello']) == ['hello']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     long_words(4, ['hello', 'world', 'of', 'a', 'b']) == ['hello', 'world']\nassert     long_words(4, ['hello', 'world', 'of', 'a', 'b', 'c']) == ['hello', 'world']\nassert     long_words(4, ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd']\nassert     long_words(3, ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c']\nassert     long_words(3, ['a', 'b', 'c']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert long_words(3, ['amazing', 'affection', 'nice']) == ['amazing', 'affection', 'nice']\nassert long_words(5, ['amazing', 'affection', 'nice', 'fun']) == ['amazing', 'affection', 'nice', 'fun']\nassert long_words(5, ['amazing', 'affection', 'nice', 'fun','much']) == ['amazing', 'affection', 'nice', 'fun','much']\nassert long_words(2, ['amazing', 'affection', 'nice', 'fun','much']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     long_words(2, ['cat', 'dog', 'hello', 'how', 'are', 'you']) ==     ['how', 'are']\nassert     long_words(3, ['cat', 'dog', 'hello', 'how', 'are', 'you']) ==     ['hello', 'are', 'how']\nassert     long_words(4, ['cat', 'dog', 'hello', 'how', 'are', 'you']) ==     []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     long_words(3, ['python','django','ruby','kotlin','javascript']) == ['python','django']\nassert     long_words(5, ['python','django','ruby','kotlin','javascript']) == ['python','django','ruby']\nassert     long_words(3, ['python','django','ruby','kotlin','javascript','c','c#']) == ['python','django','ruby']\nassert     long_words(6, ['python','django','ruby','kotlin','javascript','c','c#']) == []\nassert     long_words(1, ['python','django','ruby','kotlin','javascript','c','c#']) == ['python','django','ruby','kotlin','javascript','c','c#']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     long_words(3, ['hi', 'hello', 'a', 'world', 'goodbye']) == ['hello', 'world']\nassert     long_words(5, ['flower', 'flow', 'flight']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     long_words(4, ['Python', 'is', 'a', 'programing', 'language']) == ['programing']\nassert     long_words(3, ['a', 'programming', 'language']) == ['programming']\nassert     long_words(4, ['Python']) == []\nassert     long_words(2, ['Python', 'programing']) == ['programing']\nassert     long_words(3, ['Python', 'programing']) == ['programing']\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\n    \"\"\"\nCorrect answers\nTrue\nFalse\nFalse\nTrue\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTru"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     magic_square_test([[2, 3, 4], [3, 5, 6], [4, 6, 1]]) == False, \"Wrong output for [[2, 3, 4], [3, 5, 6], [4, 6, 1]]\"\nassert     magic_square_test([[1, 2, 3], [3, 6, 7], [4, 5, 6]]) == False, \"Wrong output for [[1, 2, 3], [3, 6, 7], [4, 5, 6]]\"\nassert     magic_square_test([[1, 5, 8], [1, 5, 8], [1, 5, 8]]) == False, \"Wrong output for [[1, 5, 8], [1, 5, 8], [1, 5, 8]]\"\nassert     magic_square_test([[1, 2, 3], [2, 3, 4], [3, 4, 1]]) == True, \"Wrong output for [[1, 2, 3], [2, 3, 4], [3, 4, 1]]\"\nassert     magic_square_test([[1, 5, 8], [1, 5, 8], [1, 5, 8]]) == False, \"Wrong output for [[1, 5, 8], [1, 5, 8], [1, 5, 8]]\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                [3, 5, 7],\n                [8, 1, 6]]) == True, \"Not a magic square\"\nassert     magic_square_test([[1, 2, 3],\n                [2, 3, 4],\n                [3, 4, 5]]) == False, \"Not a magic square\"\nassert     magic_square_test([[4, 9, 2],\n                [3, 5, 7],\n                [8, 1, 6],\n                [7, 5, 3]]) == True, \"Not a magic square\"\nassert     magic_square_test([[1, 2, 3],\n                [2, 3, 4],\n                [3, 4, 5],\n                [6, 7, 8]]) == False, \"Not a magic square\"\nassert     magic_square_test([[1, 2, 3],\n                [2, 3, 4],\n                [3, 4, 5],\n                [6, 7, 8],\n                [7, 5, 3]]) == False, \"Not a magic square\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nmy_matrix = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]\n\nprint(magic_square_test(my_matrix)"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]])    == True,\\\n        \"Wrong\"\nassert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]])    == False,\\\n        \"Wrong\"\nassert     magic_square_test([[8,3,4],[1,5,9],[6,7,2]])    == False,\\\n        \"Wrong\"\nassert     magic_square_test([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]])    == True,\\\n        \"Wrong\"\n\ndef magic_square_test_solution(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # first check the size of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     magic_square_test([\n                    [1, 2, 3],\n                    [4, 5, 6],\n                    [7, 8, 9]\n                ]    ==    True), \"Wrong\"\nassert     magic_square_test([\n                    [1, 3, 2],\n                    [6, 5, 4],\n                    [8, 7, 9]\n                ]    ==    False), \"Wrong\"\nassert     magic_square_test([\n                    [1, 2, 3],\n                    [2, 3, 1],\n                    [3, 1, 2]\n                ]    ==    True), \"Wrong\"\nassert     magic_square_test([\n                    [1, 4, 6],\n                    [2, 5, 9],\n                    [3, 8, 7]\n                ]    ==    True), \"Wrong\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     magic_square_test([[8,3,4],[1,5,9],[6,7,2]]) == True, \"Should return True\"\nassert magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) == False, \"Should return False\"\nassert     magic_square_test([[4,9,2],[3,5,7]]) == False, \"Should return False\"\nassert magic_square_test([[1,2],[3,4]]) == False, \"Should return False\"\nassert magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == False, \"Should return False\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     magic_square_test([\n    [2, 6, 4],\n    [5, 1, 7],\n    [9, 3, 8]\n]) == True, 'Wrong!'\n\nassert     magic_square_test([\n    [2, 6, 4],\n    [5, 1, 7],\n    [9, 3, 8]\n]) == False, 'Wrong!'\n\nassert     magic_square_test([\n    [1, 2, 4],\n    [5, 1, 7],\n    [9, 3, 8]\n]) == False, 'Wrong!'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     magic_square_test([[8, 1, 6],\n                            [3, 5, 7],\n                            [4, 9, 2]]) == True\nassert     magic_square_test([[6, 7, 4],\n                            [9, 5, 1],\n                            [2, 8, 3]]) == False\nassert     magic_square_test([[2, 7, 4],\n                            [9, 5, 1],\n                            [6, 8, 3]]) == True\nassert     magic_square_test([[6, 7, 4],\n                            [9, 5, 1],\n                            [2, 8, 3]]) == True\nassert     magic_square_test([[2, 6, 7],\n                            [5, 5, 1],\n                            [9, 8, 4]]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) == True, \"failed, square with one side\"\nassert     magic_square_test([[0, 4, 6],\n                            [2, 5, 3],\n                            [8, 7, 1]]) == False, \"failed, non-square\"\nassert     magic_square_test([[5, 3, 4],\n                            [6, 7, 2],\n                            [4, 1, 8]]) == False, \"failed, non-square\"\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) == False, \"failed, non-square\"\nassert     magic_square_test([[2, 6, 4],\n                            [8, 1, 7],\n                            [3, 5, 9]]) == False, \"failed, non-square\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_occurrences([1, 2, 2, 3, 3, 4, 4]) == 4\nassert     max_occurrences([1, 1, 2, 2, 3, 3, 3, 3, 4, 4]) == 4\nassert     max_occurrences([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4]) == 4\nassert     max_occurrences([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4]) == 4\nassert     max_occurrences([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_occurrences([5, 3, 3, 3, 2, 1, 1, 1, 3, 3, 3, 3, 4, 4, 4, 4, 4]) == 5\nassert max_occurrences([5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert max_occurrences([5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_counter = defaultdict(int)\n    max_freq = 0\n\n    for num in nums:\n        freq_counter[num] += 1\n        if freq_counter[num] > max_freq:\n            max_freq = freq_counter[num]\n    return freq_counter[max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_occurrences([1,2,2,3,3,3]) == 3\nassert     max_occurrences([1,1,1,1,1]) == 1\nassert     max_occurrences([1,1,2,2,3,3,3,3]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_occurrences_optimized(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_idx = -1\n    occurrences = defaultdict(int)\n    for i,v in enumerate(nums):\n        occurrences[v] += 1\n        if occurrences[v] > max_freq:\n            max_freq = occurrences[v]\n            max_idx = i\n    return max_idx"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_occurrences([1,1,1,1,2,2,2,2]) == 2\nassert     max_occurrences([1,1,1,1,2,2,2,2,1,2,2,1,1,1,1,1]) == 1\nassert     max_occurrences([]) == None\nassert     max_occurrences([1,1,1,1,2,2,2,2,1,2,2,1,1,1,1,1,2,2,2,2,1,1,1,1]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # O(N) where N is the number of elements in the given list\n    # O(N)\n    # O(N)\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    res = max(d.values())\n    return min(d.keys(), key = lambda x : d[x] )\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_vowels('hello')== 'olleh'\nassert     reverse_vowels('omkar')== 'koorom'\nassert     reverse_vowels('guru')== 'guur'\nassert     reverse_vowels('lang')== 'gulng'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"failed test\"\nassert     reverse_vowels(\"computer\") == \"erpocm\", \"failed test\"\nassert     reverse_vowels(\"hieeel\") == \"eelhie\", \"failed test\"\nassert     reverse_vowels(\"hooo\") == \"oooohh\", \"failed test\"\nassert     reverse_vowels(\"ghij\") == \"gihj\", \"failed test\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_vowels('') == ''\nassert     reverse_vowels('A') == 'A'\nassert     reverse_vowels('ab') == 'ab'\nassert     reverse_vowels('aac') == 'cba'\n\n'''\nWrite a python function to find the even numbers in a given list.\n'''\ndef find_even_numbers(list_var):\n    '''\n    Write a python function to find even numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_vowels('helloworld') == 'dlroworldh', 'Wrong output'\nassert     reverse_vowels('hello') == 'lo', 'Wrong output'\nassert     reverse_vowels('harsh') == 'hsh', 'Wrong output'\nassert     reverse_vowels('aeiou') == 'uoiea', 'Wrong output'\nassert     reverse_vowels('aeiou') == 'uoiea', 'Wrong output'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_vowels(\"hacker\") == \"ackcrh\"\nassert     reverse_vowels(\"code\") == \"cde\"\nassert     reverse_vowels(\"abci\") == \"dab\"\nassert     reverse_vowels(\"Bilbo\") == \"Bilbo\"\nassert     reverse_vowels(\"\") == \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(reverse_vowels('hello'))\nprint(reverse_vowels('awesome'))\n\n'''\nTesting:\n>>> reverse_vowels('hello')\n'holle'\n>>> reverse_vowels('awesome')\n'emawose'\n>>> reverse_vowels('d')\n'b'\n'''\n\n\ndef reverse_string(str1):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    str1 = str1.lower()\n    str2 = list(str1)\n    for i in range(len(str2)//2):\n        str2[i],str2[len(str2)-1-i] = str2[len(str2)-1-i], str2[i]\n    str2 = ''.join(str2)\n    str2 = str2.capitalize()\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels('hieeelalaooo') == 'oohlalaeeellah','should be: oohlalaeeellah'\nassert     reverse_vowels('tcheeete') == 'tcheeetee','should be: tcheeetee'\nassert     reverse_vowels('aeouio') == 'uoiea','should be: uoiea'\nassert     reverse_vowels('aeiou') == '','should be: '\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels(input(\"Enter a string: \")) == \"owivs y\"\nassert     reverse_vowels(input(\"Enter a string: \") ) == \"emvo y\"\nassert     reverse_vowels(input(\"Enter a string: \") ) == \"krmvo y\"\nassert     reverse_vowels(input(\"Enter a string: \") ) == \"orvo y\"\nassert     reverse_vowels(input(\"Enter a string: \") ) == \"zevvo y\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string((1, 2, 3, 4, 5, 6)) == \"1, 2, 3, 4, 5, 6\"\nassert not tup_string((1, 2, 3, 4, 5, 6)) == \"1, 2, 3, 4, 5, 6\""
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tup_string((1, 2, 3)) == '1, 2, 3', \"Example #1\"\nassert     tup_string((10, 20, 30, 40, 50, 60)) == '10, 20, 30, 40, 50, 60', \"Example #2\"\nassert     tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9)) == '1, 2, 3, 4, 5, 6, 7, 8, 9', \"Example #3\"\nassert     tup_string((-1, -2, -3, -4, -5, -6, -7, -8, -9)) == '-1, -2, -3, -4, -5, -6, -7, -8, -9', \"Example #4\"\n\nprint('All tests passed')"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tup_string(()) == \"\",'returning empty string for the empty tuple'\nassert     tup_string((1, 2)) == \"1, 2\",'returning the string for the tup with value 1 and 2'\nassert     tup_string((2, 3)) == \"2, 3\",'returning the string for the tup with value 2 and 3'\nassert     tup_string((3, 4)) == \"3, 4\",'returning the string for the tup with value 3 and 4'\nassert     tup_string((5, 6)) == \"5, 6\",'returning the string for the tup with value 5 and 6'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string((1, 2, 3)) == '1, 2, 3'\nassert not tup_string((1, 2, 3, 4)) == '1, 2, 3, 4'\nassert tup_string((1, 2, 3, 4, 5, 6, 7)) == '1, 2, 3, 4, 5, 6, 7'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((1, 2, 3)) == '1 2 3'\nassert     tup_string((5, 7, 'hello')) == '5 7 hello'\nassert     tup_string((True, False, False, True)) == 'True False False True'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string((10, 20, 30, 40)) == '10, 20, 30, 40'\nassert     tup_string((10, 20, 30, 40, 'test')) == '10, 20, 30, 40, test'\nassert     tup_string((10, 20, 30, 40, 'test', 123)) == '10, 20, 30, 40, test, 123'\nassert     tup_string((10, 20, 30, 40, 'test', 123, 'asdf', 'fsdf')) == '10, 20, 30, 40, test, 123, asdf, fsdf'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef tuple_to_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tup_string( (1,2,3) ) == '1,2,3'\n\ndef tup_number(tup1):\n    '''\n    Write a function to convert a tuple to a number.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string(('c', 'd', 'e')) == 'cde', 'Error in converting a tuple to a string'\nassert     tup_string(('c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')) == 'cdefghijk', 'Error in converting a tuple to a string'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert tup_string([1,2,3]) == '1 2 3'\nassert tup_string((1,2,3)) == '1 2 3'\nassert tup_string({1,2,3}) == '1 2 3'\nassert tup_string((1,2,3)) == '1 2 3'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_negativenum([1, -2, 3, 4, -5, -6]) == -6, 'Fail'\nassert     sum_negativenum([1, -2, 3, -4, -5, -6]) == -12, 'Fail'\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6]) == -15, 'Fail'\nassert     sum_negativenum([1, 2, 3, -4, -5, 6]) == -6, 'Fail'\nprint('Success: sum_negativenum')\n\ndef is_pangram(sentence, alphabet):\n    '''\n    Write a function to check if a sentence is a pangram or not.\n    A pangram is a sentence using all the letters in the alphabet\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_negativenum([1, -2, -3, 4, 5]) == -1, 'The sum is incorrect'\nsum_negativenum([-1, -2, -3, -4, -5]) == -6, 'The sum is incorrect'\nsum_negativenum([-2, -2, -2, -2, -2]) == -8, 'The sum is incorrect'\nsum_negativenum([1, -2, -3, -4, -5, -6]) == -10, 'The sum is incorrect'"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_negativenum([-3, -2, -1, 0, 1, 2, 3]) == -6\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1]) == -1\nassert     sum_negativenum([-5, -6, -10, -11]) == -21\nassert     sum_negativenum([1, -2, -1, 0, 1, 2, 3]) == -6\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_negativenum([1,2,3,4]) == 5\nassert sum_negativenum([-1,-2,-3,-4]) == -1\nassert sum_negativenum([-1,-2,-3,-4,-5]) == -10\nassert sum_negativenum([1,-2,3,-4,5]) == 0\nassert sum_negativenum([-1,2,3,4,-5]) == 6\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_negativenum([-2,-1,0,1,2]) == 2\nassert     sum_negativenum([-1,-2,3,0,2]) == 3\nassert     sum_negativenum([1,-1,-2,-3,-4]) == 4\nassert     sum_negativenum([-1]) == 1\nassert     sum_negativenum([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == 2,'sum_negativenum should return 2, -1 and -3'\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -1,'sum_negativenum should return -1, -2 and -5'\nassert     sum_negativenum([-100, -50, -20, -10, -5, -1]) == -90,'sum_negativenum should return -90, -50, -20, -10 and -5'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([1, -2, 3, -4]) == -5, \"fail\"\nassert     sum_negativenum([-2, -1, -4]) == -5, \"fail\"\nassert     sum_negativenum([1]) == 0, \"fail\"\nassert     sum_negativenum([]) == 0, \"fail\"\nassert     sum_negativenum([1, 2, -3]) == -2, \"fail\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nhexagonal_num(1) == 1\nassert hexagonal_num(2) == 3\nassert hexagonal_num(3) == 5\nassert hexagonal_num(4) == 7\nassert hexagonal_num(5) == 11\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_pentagonal(n): \n    '''\n    Write a function to find if a number is pentagonal or not.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     hexagonal_num(1) == 3\nassert hexagonal_num(2) == 5\nassert hexagonal_num(3) == 8\nassert hexagonal_num(4) == 13\nassert hexagonal_num(5) == 21\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     hexagonal_num(1) == 0\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 12\nassert     hexagonal_num(4) == 28\nassert     hexagonal_num(5) == 61\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     hexagonal_num(1) == 3\nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 8\nassert     hexagonal_num(4) == 15\nassert     hexagonal_num(5) == 25\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nhexagonal_num(10) == 30\nassert \nhexagonal_num(12) == 56\nassert \nhexagonal_num(23) == 98\nassert \nhexagonal_num(50) == 159\nassert \nhexagonal_num(100) == 300\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_dups(nums):\n    '''\n    Write a function to remove duplicates from an unsorted array. Return the length of the final sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     zero_count([-1,0,1,0,2,3,0]) == 1, \"expected 1\"\nassert     zero_count([0,0,0,0,0,1]) == 1, \"expected 1\"\nassert     zero_count([0,0,0,1,0,0,0]) == 0.25, \"expected 0.25\"\nassert     zero_count([0,0,0,1,0,0,0,0,0,0]) == 0.5, \"expected 0.5\"\nassert     zero_count([0,0,0,0,1,0,0,0,0,0,0,0]) == 1, \"expected 1\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     zero_count([0,1,1,1,0,0]) == 3/5\nassert     zero_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == 1/30\nassert     zero_count([0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    import random\n    n = 20\n    # generate random integer array\n    a = array('i', [])\n    for i in range(n):\n        a.append(random.randint(0, 100))\n    print(a)\n    # test zero_count\n    assert zero_count(a) == 0.5*(1 + n)*n/n**2\n    "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     zero_count([0, 1, 0, 1, 0, 1, 0, 1, 0, 1]) == 0.8\nassert     zero_count([1, 0, 0, 1, 0, 1, 0, 1, 0, 1]) == 0.2\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert zero_count([]) == 0\nassert zero_count([1]) == 0\nassert zero_count([0,1]) == 0.5\nassert zero_count([0,0,1]) == 0.25\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    num_array = array('i', range(0, 10))\n    print(num_array)\n    num_array.reverse()\n    print(num_array)\n    assert num_array == array('i', range(9, 0, -1))\n    print(zero_count(num_array))\n    \n    "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     zero_count([0,1,0,1,0,1,0,1,0,1]) == 1/3\nassert zero_count([1,1,0,0,1,0,1,0,1,1]) == 2/5\nassert zero_count([0,0,0,1,1,1]) == 2/5\n\n'''\nWrite a function to find the number of times that the number 9 appears in a given array.\n'''\ndef count_nine(nums):\n    '''\n    Write a function to find the number of times that the number 9 appears in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True, 'passed'\nassert     is_Sum_Of_Powers_Of_Two(0) == False, 'passed'\nassert     is_Sum_Of_Powers_Of_Two(1) == False, 'passed'\nassert     is_Sum_Of_Powers_Of_Two(3) == True, 'passed'\nassert     is_Sum_Of_Powers_Of_Two(4) == True, 'passed'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True, \"2 should be a sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(3) == True, \"3 should be a sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(10) == True, \"10 should be a sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(15) == True, \"15 should be a sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(16) == False, \"16 should not be a sum of powers of 2\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(5) == False\nassert     is_Sum_Of_Powers_Of_Two(6) == True\nassert     is_Sum_Of_Powers_Of_Two(9) == True\n\n'''\nQuestion 8\nWrite a python function that returns true if the given number is a perfect number or not.\n'''\ndef is_Perfect_Number(n): \n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(10) == False, \\\n    'Your is_Sum_Of_Powers_Of_Two function is not correct'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(12) == True\nassert     is_Sum_Of_Powers_Of_Two(27) == False\nassert     is_Sum_Of_Powers_Of_Two(24) == True\n\ndef is_Sum_Of_Powers_Of_Two_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == False, 'Example 1: 1'\nassert     is_Sum_Of_Powers_Of_Two(1) == False, 'Example 2: 0'\nassert     is_Sum_Of_Powers_Of_Two(4) == True, 'Example 3: 4'\nassert     is_Sum_Of_Powers_Of_Two(27) == True, 'Example 4: 27'\nassert     is_Sum_Of_Powers_Of_Two(256) == True, 'Example 5: 256'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(9)    == True,    \"Should return true for 9\"\nassert     is_Sum_Of_Powers_Of_Two(7)    == False,    \"Should return false for 7\"\nassert     is_Sum_Of_Powers_Of_Two(0)    == False,    \"Should return false for 0\"\nassert     is_Sum_Of_Powers_Of_Two(2147483647)    == False,    \"Should return false for 2147483647\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circle_circumference(1) == 2*pi\nassert     circle_circumference(0) == pi\nassert     circle_circumference(2) == 2*pi*2\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     circle_circumference(0.1) == pi*0.1\nassert     circle_circumference(1) == pi*2\nassert     circle_circumference(3.141592) == 2*pi*3.141592\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert circle_circumference(2) == 3.14\n\nprint(circle_circumference(2)"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     circle_circumference(1) == 2 * math.pi\nassert     circle_circumference(2) == 2 * math.pi + 2 * math.pi + 2 * math.pi\nassert     circle_circumference(3) == 2 * math.pi * 3\nassert     circle_circumference(4) == 2 * math.pi * 3 + 2 * math.pi * 2 + 2 * math.pi\nassert     circle_circumference(5) == 2 * math.pi * 3 + 2 * math.pi * 2 + 2 * math.pi * 1 + 2 * math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(1) ==     1.5707963267948966, \"Wrong Answer\"\nassert     circle_circumference(2) ==     2*pi, \"Wrong Answer\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circle_circumference(1)    == 3.14\nassert     circle_circumference(0)    == 3.14\nassert     circle_circumference(-1)    == 3.14\nassert     circle_circumference(-2)    == 3.14\nassert     circle_circumference(3)    == 6.28\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circle_circumference(3) == 12.566370614359172\nassert     circle_circumference(4) == 15.126025403784439\nassert     circle_circumference(5) == 22.1313471821875\nassert     circle_circumference(6) == 29.26530612244898\nassert     circle_circumference(7) == 38.37837837837838\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert extract_singly([[[1,2,3,4,5,6,7,8],2],[[2,3,4,5,6,7,8,9],3],[[3,4,5,6,7,8,9,10],[4]]]) == [1,2,3,4,5,6,7,8,2,3,4,5,6,7,8,9,3,4,5,6,7,8,9,10]\nassert extract_singly([[[1,2,3,4,5,6,7,8],2],[[2,3,4,5,6,7,8,9],3],[[3,4,5,6,7,8,9,10],[4]]]) == [1,2,3,4,5,6,7,8,2,3,4,5,6,7,8,9,3,4,5,6,7,8,9,10]"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[1,2],[3,4]]) == [1,2,3,4]\nassert     extract_singly([[1,2],[3,4],[5,6]]) == [1,2,3,4,5,6]\nassert     extract_singly([[1,2],[3,4],[5,6],[7,8]]) == [1,2,3,4,5,6,7,8]\nassert     extract_singly([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[1,2,3,4],[1,2,3,4],[1,2,3,4]]) == [1,2,3,4,1,2,3,4]\nassert     extract_singly([[1,2,3,4]]) == [1,2,3,4]\nassert     extract_singly([[1,2,3,4],[1,2,3,4],[1,2,3,4]]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[[[1,2,3]],[[1,2,3]]]) ==     [1,2,3]\nassert     extract_singly([[[[1,2,3]],[[1,2,3]]]) ==     [1,2,3]\nassert     extract_singly([[[[1,2,3]],[[1,2,3]]]) ==     [1,2,3]\nassert     extract_singly([[[[1,2,3]],[[1,2,3]]]) ==     [1,2,3]\nassert     extract_singly([[[[1,2,3]],[[1,2,3]]]) ==     [1,2,3]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[[[[[1, 2], 3]]]], [[[1, 2], 3]]]) == {1, 2, 3}\nassert     extract_singly([[[[1, 2], 3]]]) == {1, 2, 3}\nassert     extract_singly([[[[1], 2]]]) == {1, 2}\nassert     extract_singly([[1], 2]) == {1, 2}\nassert     extract_singly([[1], 2, 3]) == {1, 2, 3}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1,2],[3,4]]) == {1,2,3,4}\nassert     extract_singly([[1,2,3,4],[5,6,7,8]]) == {1,2,3,4,5,6,7,8}\nassert     extract_singly([[1,2],[3,4],[5,6]]) == {1,2,3,4,5,6}\nassert     extract_singly([[1],[2],[3],[4]]) == {1,2,3,4}\nassert     extract_singly([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_singly([[[1], 2, 3], [[2], 3]]) == {1, 2, 3, 2, 3}\nassert     extract_singly([[[1, 2], 2, 3], [[2], 3]]) == {1, 2, 2, 2, 3, 3}\nassert     extract_singly([[[1]], 2, 3]) == {1, 2, 3}\nassert     extract_singly([[[1], 2, 3], [[2], 3]]) == {1, 2, 2, 2, 3, 3}\nassert     extract_singly([[1, 2, 3, 4], 2, 3, 1]) == {1, 2, 3, 4, 1, 2, 3, 4}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_singly(1,2,3,4,5) == set([1,2,3,4,5])\nassert extract_singly(1,2,3,4) == set([1,2,3,4])\nassert extract_singly(1,2) == set([1,2])\nassert extract_singly([1,2]) == set([1,2])\nassert extract_singly([1]) == set([1])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5], \n                [6, 7, 8]]) == {1, 2, 3, 4, 5, 6, 7, 8}\nassert     extract_singly([[9, 8, 7], \n                [6, 5, 4, 3, 2],\n                [1, 0]]) == {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\nassert     extract_singly([]) == set()\nassert     extract_singly([[]]) == set()\nassert     extract_singly([[]]) == set()\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pancake_sort([]) == []\nassert     pancake_sort([7]) == [7]\nassert     pancake_sort([7,7,7]) == [7,7,7]\nassert     pancake_sort([1,2,3,4,5]) == [5,4,3,2,1]\nassert     pancake_sort([2,1,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pancake_sort([3,7,5,8,6,2,4,1,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     pancake_sort([3,7,5,8,6,2,4,1,9,3,5,4,7,8,6,3,2,1,9,3]) == [3,1,2,5,6,3,4,7,8,9,1,3,5,2,6,4,7,3,8,9]\nassert     pancake_sort([3,7,5,8,6,2,4,1,9,3,5,4,7,8,6,3,2,1,9,3,4,7,8,6,3,2,1,9,3]) == [3,1,2,5,6,3,4,7,8,9,1,3,5,2,6,4,7,3,8,9]\nassert     pancake_sort([3,7,5,8,6,2,4,1,9,3,5,4,7,8,6,3,2,1,9,3,4,7,8,6,3,2,1,9,3]) == [3,1,2,5,6,3,4,7,8,9,1,3,5,2,6,4,7,3,8,9]\nassert     pancake_sort([3,7,5,8,6,2,4,1,9,3,5,4,7,8,6,3,2,1,9,3,4,7,8,6,3,2,1,9,3]) == [3,1,2,5,6,3,4,7,8,9,1,3,5,2,6,4,7,3,8,9]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    '''\n    Test your function above.\n    '''\n    print(\"### Test 1 ###\")\n    nums = [3, 2, 1]\n    pancake_sort(nums)\n    assert nums == [1, 2, 3]\n\n    print(\"### Test 2 ###\")\n    nums = [1, 2, 3]\n    pancake_sort(nums)\n    assert nums == [1, 2, 3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # convert the input list to list of indexes\n    indexes = get_indexes(nums)\n    # sort the list using the indexes\n    nums = sort_by_indexes(nums, indexes)\n    # convert the sorted list back to list of indexes\n    indexes = get_indexes(nums)\n    # return the sorted list\n    return indexes\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"------------------------- Test case 1 -------------------------\")\nprint(\"The count of items that are identical in the same position of three given lists:\")\nprint(\"\\tExpected: 2\")\nprint(\"\\tActual: \", count_samepair([1,1,2],[2,1,3],[2,3,3]))\nprint(\"-----------------------------------------------------------------\")\n\nprint(\"------------------------- Test case 2 -------------------------\")\nprint(\"The count of items that are identical in the same position of three given lists:\")\nprint(\"\\tExpected: 0\")\nprint(\"\\tActual: \", count_samepair([1,1,2],[1,1,2],[1,1,2]))\nprint(\"-----------------------------------------------------------------\")\n\nprint(\"------------------------- Test case 3 -------------------------\")\nprint(\"The count of items that are identical in the same position of three given lists:\")\nprint(\"\\tExpected: 3\")\nprint(\"\\tActual: \", count_samepair([1,1,2],[1,1,3],[1,1,3]))\nprint(\"-----------------------------------------------------------------\")\n\nprint(\"------------------------- Test case 4 -------------------------\")\nprint(\"The count of items that are identical in the same position of three given lists:\")\nprint(\"\\tExpected: 0\")\nprint(\"\\tActual: \", count_samepair([1,2,2],[2,2,2],[2,2,2]))\nprint(\"-----------------------------------------------------------------\")\n\nprint(\"------------------------- Test case 5 -------------------------\")\nprint(\"The count of items that are identical in the same position of three given lists:\")\nprint(\"\\tExpected: 1\")\nprint(\"\\tActual: \", count_samepair([1,2,2],[2,2,3],[2,2,3]))\nprint(\"-----------------------------------------------------------------\")\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_samepair([1,2,1],[3,4,1],[5,6,1]) == 0\nassert count_samepair([1,2,2],[3,4,3],[5,6,5]) == 1\nassert count_samepair([1,1,1],[3,3,3],[5,5,5]) == 2\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    count_samepair([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]) == 1, \"Output should be 1\"\nassert \n    count_samepair([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]) == 5, \"Output should be 5\"\nassert \n    count_samepair([1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]) == 1, \"Output should be 1\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3,2,4],['a','b','c','d','e'],['e','a','c','d','e']) == 6\nassert     count_samepair([1,2,3,2,4],['a','b','c','d','e'],['d','e','a','c','b']) == 2\nassert     count_samepair([1,2,3,2,4],['a','b','c','d','e'],['c','b','e','a','c']) == 0\n\n\ndef count_list(list1,list2,list3):\n    '''\n    Write a function to count number items in the same position of all three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_samepair([1,1,1],[1,2,1],[1,1,1])==3\nassert     count_samepair([1,2,1],[1,2,1],[1,1,1])==3\nassert     count_samepair([1,2,1],[1,2,1],[1,1,2])==1\nassert     count_samepair([1,1,1],[1,2,1],[1,1,1])==0\nassert     count_samepair([1,1,1],[1,2,1],[1,1,2])==0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([1,2,3,1],[\"a\",\"b\",\"c\",\"a\"],[\"a\",\"b\",\"c\",\"a\"]) == 2\n\ndef is_power_of_two(n):\n    '''\n    Write a function that takes an integer parameter and returns True if it is a power of 2, False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_samepair([1, 1, 1],[1, 1, 1],[1, 1, 1]) == 4\nassert     count_samepair([1, 2, 3],[1, 2, 3],[1, 2, 3]) == 1\nassert     count_samepair([1, 2, 3],[1, 2, 3],[2, 3, 4]) == 1\nassert     count_samepair([1, 2, 3],[1, 2, 3],[2, 3, 4, 5]) == 1\nassert     count_samepair([1, 1, 1],[1, 2, 3],[2, 3, 4]) == 4\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_samepair([1,1,1,1], [1,2,2,2], [1,1,1,1]) == 2, \"Should be 2\"\nassert     count_samepair([1,1,1,1], [1,2,2,2], [1,1,1,1]) == 3, \"Should be 3\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair([1,2,3],    [1,2,3],    [1,2,3]) == 3,    \"Should return 3\"\nassert     count_samepair([1,1,1],    [1,1,1],    [1,1,1]) == 0,    \"Should return 0\"\nassert     count_samepair([1,2,3,4,5],    [1,2,3,4,5],    [1,2,3,4,5]) == 1,    \"Should return 1\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_samepair([1,2,1],[1,2,2],[1,2,1]) == 2\nassert     count_samepair([1,2,1],[1,1,2],[1,2,1]) == 0\nassert     count_samepair([1,2,1],[1,2,3],[1,2,1]) == 0\nassert     count_samepair([1,2,1],[1,2,2],[1,2,1]) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(('this','is',[4,3,2,1,2],'is','a','nice','list')) == 5\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == 2\nassert     find_lists(('x', 'y', 'z')) == 0\nassert     find_lists(()) == 0\nassert     find_lists(('f', 'b', 'a', 'a', 'g', 'd', 'f', 'x', 'g')) == 3\nassert     find_lists(('b', 'c', 'a', 'b')) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_lists([1,2,3]) == 2\nassert find_lists((1,2,3)) == 2\nassert find_lists([\"a\",\"b\"]) == 1\nassert find_lists((\"a\",\"b\")) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists((\"apple\", \"orange\", \"lemon\", \"cherry\")) == 1\nassert     find_lists((1, 2, 3, 4, 5, 6)) == 0\nassert     find_lists((1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6)) == 2\nassert     find_lists((1, 2, 3, 4, 5, 6, \"cat\", \"dog\", \"cat\", \"mouse\", \"cat\", \"cow\", \"cat\")) == 3"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_lists(\n    (1, 2, 3),\n    (5, 6),\n    (8, 9, 10)\n) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_dict(Input): \n    '''\n    Write a function to find number of dictionaries in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) \nassert     find_lists(('', '', '', '', '', '', '', '')) \nassert     find_lists(('abcd', 'abc', 'abcde', 'abd', '', '', '', '', 'g')) \nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0')) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists(())==0, f\"wrong answer {find_lists((1,2,3))}\"\nassert     find_lists((1,2,3))==1, f\"wrong answer {find_lists((1,2,3))}\"\nassert     find_lists((1,2,[3,4,5],6))==1, f\"wrong answer {find_lists((1,2,[3,4,5],6))}\"\nassert     find_lists((1,2,[3,4,5],6,[7,8,9],10))==2, f\"wrong answer {find_lists((1,2,[3,4,5],6,[7,8,9],10))}\"\nassert     find_lists((1,2,[3,4,5],6,[7,8,9],10,[11,12,13],14)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists(tuple()) == 0, \"tuple must be empty.\"\nassert     find_lists((2,3,4,5,6)) == 1, \"5 is in the tuple.\"\nassert     find_lists((1,2,3,4,5,6)) == 3, \"6 is in the tuple.\"\nassert     find_lists((4,6,8,10)) == 2, \"4 and 8 are in the tuple.\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13)) == 4, \"All the numbers are in the tuple.\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Abs_Diff([3, 1, 4, 4, 1]) == 6\nassert     max_Abs_Diff([1, 2, 1, 2, 1, 2, 1]) == 3\nassert     max_Abs_Diff([3, 3, 3, 3, 3, 3, 3, 3]) == 0\nassert     max_Abs_Diff([1, -1, -3, -4, -3, -2]) == 3\nassert     max_Abs_Diff([1, 1, 1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\narr = [-2, -1, 0, 2, 3, 4]\nassert max_Abs_Diff(arr) == 2\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([10, -2, -5, 6, 7, 1, 2, 2]) == 13\nassert max_Abs_Diff([-1, -2, -3, -4]) == 4\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Abs_Diff([3, -3, -10, 2]) == 10\nassert     max_Abs_Diff([1, 3, -2, 5, 10]) == 5\nassert     max_Abs_Diff([-100, -3, -2, 5, 10]) == 50\nassert     max_Abs_Diff([]) == 0\nassert     max_Abs_Diff([1, 2]) == 3\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Abs_Diff([0, -2, 3, 4, -5, -4]) == 5\nassert     max_Abs_Diff([0, -2, -3, -4, -5, -4]) == 0\nassert     max_Abs_Diff([0, -2, 3, 4, -5, -4, -3, -2, -1, -1]) == 8\nassert     max_Abs_Diff([0, -2, 3, 4, -5, -4, -3, -2, -1, -1, -2]) == 5\nassert     max_Abs_Diff([0, -2, 3, 4, -5, -4, -3, -2, -1, -1, -3]) == 2\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([1, 2, 3, 4, -2]) == 6\nassert max_Abs_Diff([1, 2, 3, 4, -3]) == 5\nassert max_Abs_Diff([0, -1, 2, -3]) == 3\nassert max_Abs_Diff([-4, -2, -1]) == 2\nassert max_Abs_Diff([]) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmax_Abs_Diff([-10, -5, 10, 15, 10]) == 5\nassert \nmax_Abs_Diff([-10, -5, 10, 15, 10, 10]) == 5\nassert \nmax_Abs_Diff([-10, -5, 10, 15, 10, -10]) == 5\nassert \nmax_Abs_Diff([-10, -5, 10, 15, 10, -10, -10]) == 5\nassert \nmax_Abs_Diff([-10, -5, 10, 15, -10]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_Abs_Diff([0, 1, 4, 9, 2]) == 4\nassert     max_Abs_Diff([0, 1, -4, 9, 2]) == 5\nassert     max_Abs_Diff([9, -4, 0, 1, 2]) == 5\nassert     max_Abs_Diff([9, 9]) == 9\nassert     max_Abs_Diff([9, -9]) == 9\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([-3, 2, 4]) == -3\nassert     max_Abs_Diff([3, -5, 1]) == 5\nassert     max_Abs_Diff([3, 1, 5]) == 5\nassert     max_Abs_Diff([1, 3, 5]) == 4\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(1, 1, 1) == None, 'Wrong answer for this input'\nassert     find_solution(1, 1, 2) == (1, 1), 'Wrong answer for this input'\nassert     find_solution(2, 1, 4) == (2, 2), 'Wrong answer for this input'\nassert     find_solution(4, 1, 14) == (4, 5), 'Wrong answer for this input'\nassert     find_solution(6, 2, 16) == (3, 7), 'Wrong answer for this input'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_solution(3, 4, 6) == (1, 2)\nassert find_solution(1, 1, 2) == None\nassert find_solution(2, 1, 2) == None\nassert find_solution(2, 2, 2) == (2, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_solution(2, -3, 13) == (3, 2)\nassert     find_solution(-2, -3, 13) == (0, 0)\nassert     find_solution(4, -4, 13) == (1, 1)\nassert     find_solution(-4, -4, 13) == (0, 0)\nassert     find_solution(1, -4, 13) == (0, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_solution(5, 5, 15) == (1, 2)\nassert find_solution(5, 4, 15) == (2, -1)\nassert find_solution(3, 5, 15) == None\nassert find_solution(10, 10, 20) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_solution(3, 2, 6) == (1, 3), 'Wrong result'\nassert     find_solution(3, 2, 8) == (1, 3), 'Wrong result'\nassert     find_solution(3, 2, 7) is None, 'Wrong result'\nassert     find_solution(5, 4, 10) is None, 'Wrong result'\nassert     find_solution(4, 1, 7) == (3, 1), 'Wrong result'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution(1, 1, 5) == (1, 1)\nassert     find_solution(0, 1, 5) == (1, 1)\nassert     find_solution(1, -1, 5) == (1, 1)\nassert     find_solution(1, 1, 6) == None\nassert     find_solution(2, 1, 4) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_solution(1, 4, 5) == (1, -1)\nfind_solution(1, 2, 4) == (1, 1)\nfind_solution(1, 5, 4) == (1, 2)\nfind_solution(1, 1, 5) == (2, 1)\nfind_solution(2, 1, 5) == (2, 2)\nfind_solution(2, 5, 5) == (2, -1)\nfind_solution(2, 1, 6) == None\nfind_solution(1, 1, 1) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_solution(5, 10, 15) == (3, 5)\nassert     find_solution(2, 4, 8) == None\nassert     find_solution(1, 1, 1) == None\nassert     find_solution(5, 5, 25) == None\nassert     find_solution(4, 8, 32) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_solution(2,5,7) == (3,2), 'Wrong result'\nassert     find_solution(2,1,7) == (2,1), 'Wrong result'\nassert     find_solution(10,11,12) == (11,10), 'Wrong result'\nassert     find_solution(10,9,12) == (11,10), 'Wrong result'\nassert     find_solution(10,7,12) == (9,7), 'Wrong result'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([], [1, 2, 3, 4, 5]) == []\nassert     remove_elements([5], [1, 2, 3, 4, 5]) == []\nassert     remove_elements([1, 2, 3, 4, 5], []) == []\nassert     remove_elements([1, 2, 3, 4, 5], [1, 2, 3]) == [5]\nassert     remove_elements([1, 2, 3, 4, 5], [1, 4, 5]) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_elements([1,2,3,4,5], [5,6,7,8,9]) ==     [1,2,3,4]\nassert     remove_elements([1,2,3,4,5], [4,6,7,8,9]) ==     [1,2,3,5]\nassert     remove_elements([1,2,3,4,5], [1,2,3]) ==     [4,5]\nassert     remove_elements([1,2,3,4], [5,6,7,8,9]) ==     [1,2,3,4]\nassert     remove_elements([], [1,2,3,4]) ==     []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4], [4,2,3,1]) ==  [1,3,4]\nassert     remove_elements([1,2,3,4], [1,2]) ==  [3,4]\nassert     remove_elements([1,2,3,4], []) ==  [1,2,3,4]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef rotate(lst, k):\n    '''\n    Given an array, rotate the array to the right by k elements (where k is non-negative).\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([1,2,2,2,3,4,5], [2,2,2,2,3]) == 5, \"Wrong\"\nassert     remove_elements([1,2,2,2,3,4,5], [2,3,4]) == 5, \"Wrong\"\nassert     remove_elements([], [2,3,4]) == 0, \"Wrong\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,2,3,4,5,6,7,8,9], [2,3,5,8]) == ([1,4,6,7,9]), \"Failed\"\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [2,5,6,7,8]) == ([1,3,4,5,6,7,9]), \"Failed\"\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [3,4,5,8]) == ([1,2,6,7,9]), \"Failed\"\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [9]) == ([1,2,3,4,5,6,7,8]), \"Failed\"\nassert     remove_elements([1,2,3,4,5,6,7,8,9], []) == ([1,2,3,4,5,6,7,8,9]), \"Failed\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements([1, 2, 3], [1, 2, 2]) == [], \"should return empty list\"\nassert     remove_elements([], [1, 2, 2]) == [], \"should return empty list\"\nassert     remove_elements([1, 2, 3], []) == [1, 2, 3], \"should return [1, 2, 3]\"\nassert     remove_elements([], []) == [], \"should return empty list\"\nassert     remove_elements([1, 2, 3, 4], [4, 5]) == [1, 2, 3, 4], \"should return [1, 2, 3]\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_elements([1, 2, 3], [2, 3]) == [], 'x'\nassert     remove_elements([1, 2, 3], [2, 4]) == [[1, 2], 3], 'x'\nassert     remove_elements([1, 2, 3], [3]) == [[1, 2], 3], 'x'\nassert     remove_elements([1, 2, 3], []) == [], 'x'\nassert     remove_elements([], [2, 3]) == [], 'x'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements([1,2,3],[2]) ==     [1]\nassert     remove_elements([1,2,2,3],[2,2]) ==     [1,3]\nassert     remove_elements([1,2,2,2,3],[2,2]) ==     [1,3]\nassert     remove_elements([1,2,2,2,2,3],[2,2]) ==     [1,3]\nassert     remove_elements([1,2,2,2,2,3],[2,2]) ==     [1,3]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    res = 0\n    for i in range(n // 2):\n        res += i\n        res += (n - 2 * i)\n    return res\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef fib_series(n):\n    '''\n    Write a function to calculate the Fibonacci Series from 0 to n.\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_series(n):\n    '''\n    Write a function that takes in a number and returns the sum of the series (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_series(1) == 1\nassert     sum_series(2) == 3\nassert     sum_series(3) == 6\nassert     sum_series(4) == 10\nassert     sum_series(5) == 15\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_series(0) == 0,     'Wrong sum_series result (0)!'\nassert     sum_series(1) == 1,     'Wrong sum_series result (1)!'\nassert     sum_series(2) == 2,     'Wrong sum_series result (2)!'\nassert     sum_series(3) == 5,     'Wrong sum_series result (5)!'\nassert     sum_series(4) == 10,     'Wrong sum_series result (10)!'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_series(4) == 10\nassert     sum_series(3) == 7\nassert     sum_series(2) == 3\nassert     sum_series(1) == 1\nassert     sum_series(0) == 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_series(2) == 2 + 0 + -2\nassert sum_series(3) == 2 + 0 + -2 + 1 + -1 + -2\nassert sum_series(5) == 2 + 0 + -2 + 1 + -1 + -2 + 3 + -3\nassert sum_series(12) == 2 + 0 + -2 + 1 + -1 + -2 + 3 + -3 + 4 + -4 + 5 + -5\nassert sum_series(18) == 2 + 0 + -2 + 1 + -1 + -2 + 3 + -3 + 4 + -4 + 5 + -5 + 6 + -6\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\n5. Write a function that takes a positive integer argument and returns an integer value, so the integer value of the output is an integer value that represents the factorial of the argument.\n'''\ndef factorial(num):\n    '''\n    Write a function that takes a positive integer argument and returns an integer value, so the integer value of the output is an integer value that represents the factorial of the argument.\n    '''\n    pass"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_polygon(3, 4) == 12.5\nassert     area_polygon(2, 3) == 8\nassert     area_polygon(3, 3) == 12\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_polygon(1, 2) == 2\nassert     area_polygon(2, 5) == 5\nassert     area_polygon(5, 2) == 10\n\ndef area_rectangle(a, b):\n    '''\n    Write a function that returns the area of a rectangular (square) shape.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round(area_polygon(2, 3), 5) == 11.53907\nassert     round(area_polygon(3, 3), 5) == 14.61923\nassert     round(area_polygon(4, 5), 5) == 22.57194\nassert     round(area_polygon(5, 2), 5) == 5.62500\nassert     round(area_polygon(4, 6), 5) == 28.52508\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef polygon_area(l,s):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     area_polygon(1, 3) == 3.14, \"area_polygon(1, 3) is wrong\"\nassert     area_polygon(5, 6) == 78.5, \"area_polygon(5, 6) is wrong\"\n\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given its length and its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef polygon_area(s, l):\n    '''\n    Write a function that returns the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     area_polygon(3, 5) == 20.0\nassert area_polygon(1, 2) == 1.0\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef split(s):\n    '''\n    Write a function to split a given string s into all possible substring of length \n    at least 2.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef list_to_dict(list_a):\n    '''\n    Write a function to convert a list into a dictionary where the index of the key represents \n    the number of the item and the value of the key represents the index of the item. \n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     div_sum(11) == True, '11 is correct.'\nassert     div_sum(12) == False, '12 is incorrect.'\nassert     div_sum(14) == True, '14 is correct.'\nassert     div_sum(13) == True, '13 is correct.'\nassert     div_sum(1) == False, '1 is incorrect.'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     div_sum(9) == False\nassert     div_sum(12) == True\nassert     div_sum(15) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndiv_sum(7) == True, \"7\"\nassert \ndiv_sum(8) == False, \"8\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_sum(6) == True, \"The function must return True if the sum of the divisors is the same.\"\nassert     div_sum(7) == False, \"The function must return False if the sum of the divisors is the same.\"\nassert     div_sum(11) == True, \"The function must return True if the sum of the divisors is the same.\"\nassert     div_sum(12) == False, \"The function must return False if the sum of the divisors is the same.\"\nassert     div_sum(17) == True, \"The function must return True if the sum of the divisors is the same.\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     div_sum(10) == True \nassert     div_sum(11) == False \nassert     div_sum(20) == True \nassert     div_sum(21) == False \nassert     div_sum(4) == True \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndiv_sum(1) == False\nassert \ndiv_sum(3) == True\nassert \ndiv_sum(10) == True\nassert \ndiv_sum(10.9) == True\nassert \ndiv_sum(0) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function to check if a positive integer is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_char_position('abcabc') == {'a': 2, 'b': 2, 'c': 2}\nassert count_char_position('ABCabc') == {'a': 3, 'b': 2, 'c': 2}\nassert count_char_position('abcABC') == {'a': 1, 'b': 2, 'c': 1}\nassert count_char_position('abcABC123') == {'a': 1, 'b': 2, 'c': 1}\nassert count_char_position('a') == {'a': 1}\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].upper() in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not\nassert not\nassert not\nassert not\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_char_position('abracadabra') == 8\nassert     count_char_position('abbra') == 5\nassert     count_char_position('a') == 1\nassert     count_char_position('') == 0\nassert     count_char_position('a') == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_char_position(\"a\") == 0\nassert     count_char_position(\"A\") == 0\nassert     count_char_position(\"ab\") == 0\nassert     count_char_position(\"aB\") == 0\nassert     count_char_position(\"abc\") == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_char_position(\"a\") == 1\nassert count_char_position(\"aa\") == 2\nassert count_char_position(\"aaaaa\") == 4\nassert count_char_position(\"AAAAAAAA\") == 4\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_char_position('Tact Coa') == 5\nassert     count_char_position('ACECAAAAA') == 9\nassert     count_char_position('AAAaaAAA') == 10\nassert     count_char_position('AacCdef') == 0\nassert     count_char_position('AAAaAAA') == 10\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_even_pair([1,2,3,4,5,6,7]) == 3\nassert     find_even_pair([1,3,3,4,6,7]) == 2\nassert     find_even_pair([0,1,2,3,4,5,6,7]) == 4\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_even_pair([])    == 0, 'no pairs of even xor'\nassert     find_even_pair([0])    == 0, 'only even xor pairs'\nassert     find_even_pair([1])    == 0, 'only even xor pairs'\nassert     find_even_pair([1,1])    == 2, 'two even xor pairs'\nassert     find_even_pair([1,2])    == 2, 'two even xor pairs'\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_even_pair([1,4,2,3]) == 1\nassert     find_even_pair([1,6,2,3,4]) == 2\nassert     find_even_pair([1,6,2,3,4,5]) == 3\nassert     find_even_pair([1,4,2,3,5]) == 0\nassert     find_even_pair([1,6,2,3,5,4]) == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_even_pair([4,2,3,6]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_even_pair([1,2,3,4,5]) == 1, \"Input: 1,2,3,4,5; output: 1\"\nassert     find_even_pair([4,1,2,3,5]) == 0, \"Input: 4,1,2,3,5; output: 0\"\nassert     find_even_pair([3,3,3,3,3]) == 0, \"Input: 3,3,3,3,3; output: 0\"\nassert     find_even_pair([4,2,3,4,5]) == 1, \"Input: 4,2,3,4,5; output: 1\"\nassert     find_even_pair([-1,-2,-3,-4,-5]) == 2, \"Input: -1,-2,-3,-4,-5; output: 2\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_even_pair(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == 2\nassert     find_even_pair(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == 0\nassert     find_even_pair(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == 0\nassert     find_even_pair(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']) == 2\nassert     find_even_pair
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_even_pair([3,5,6,9,10,15]) == 2\nassert     find_even_pair([3,5,6,9,10,7]) == 4\nassert     find_even_pair([3,5,6,9,10,7,4]) == 3"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(0) == 1\nassert next_power_of_2(1) == 2\nassert next_power_of_2(2) == 4\nassert next_power_of_2(3) == 8\nassert next_power_of_2(4) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_power_of_2(15) == 2\nassert     next_power_of_2(13) == 2\nassert     next_power_of_2(125) == 2\nassert     next_power_of_2(18) == 4\nassert     next_power_of_2(54) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nnext_power_of_2(3) == 2\nassert \nnext_power_of_2(5) == 2\nassert \nnext_power_of_2(6) == 4\nassert \nnext_power_of_2(9) == 2\nassert \nnext_power_of_2(10) == 2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_power_of_2(16) == 2\nassert next_power_of_2(4) == 4\nassert next_power_of_2(27) == 8\nassert next_power_of_2(0) == 0\nassert next_power_of_2(15) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnext_power_of_2(1) == 1\nassert \nnext_power_of_2(8) == 2\nassert\nnext_power_of_2(9) == 3\nassert \nnext_power_of_2(17) == 4\nassert \nnext_power_of_2(21) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_power_of_2(2) == 4\nassert     next_power_of_2(8) == 8\nassert     next_power_of_2(16) == 16\nassert     next_power_of_2(64) == 8\nassert     next_power_of_2(100) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_power_of_2(0) == 1\nassert next_power_of_2(1) == 2\nassert next_power_of_2(2) == 4\nassert next_power_of_2(3) == 8\nassert next_power_of_2(4) == 16\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    frequency(\n        [\n            1,3,5,7,9,11,11,11,11,12,13,13,13,14,15,16,16,17,18,18,19,19,19,20,20,21,22,23,23,24,25,26,27,28,29,29,29,29,30,31,31,32,33,34,34,35,36,37,37,37,38,38,39,40,41,41,42,43,44,45,45,46,47,47,48,48,49,50,51,51,52,52,53,53,54,55,55,56,57,57,58,58,59,60,61,61,62,63,64,65,66,67,67,68,69,70,71,71,72,73,73,74,74,75,76,76,77,78,78,79,80,81,81,82,83,83,84,84,85,85,86,87,87,88,89,89,90,91,91,92,93,94,95,95,96,97,97,98,99,99,100\n        ], 13) == \n    [\n        0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency([1,2,3,1],1) == 2, 'Frequency function fails'\nassert     frequency([1,2,3,1],2) == 1, 'Frequency function fails'\nassert     frequency([1,2,3,1],3) == 0, 'Frequency function fails'\nassert     frequency([1,2,3,4],1) == 1, 'Frequency function fails'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency([1,1,1,1], 1) == 1\nassert     frequency([1,2,3,4], 1) == 1\nassert     frequency([1,1,1,1], 2) == 2\nassert     frequency([1,2,3,4], 2) == 2\nassert     frequency([1,1,1,1], 3) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency(a,2) == 1, \"error\"\nassert     frequency(a,3) == 2, \"error\"\nassert     frequency(a,4) == 2, \"error\"\nassert     frequency(a,5) == 1, \"error\"\nassert     frequency(a,6) == 0, \"error\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency([1,2,3,4,5,6,7],3) == 2\nassert     frequency([1,2,3,4,5,6,7],1) == 1\nassert     frequency([1,2,3,4,5,6,7],4) == 1\nassert     frequency([1,2,3,4,5,6,7],6) == 1\nassert     frequency([1,2,3,4,5,6,7],7) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Pass\" if frequency([],5) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5],5) == 1 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,5],5) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,5],2) == 1 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,5],1) == 4 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,5],0) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1],5) == 1 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1],2) == 2 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1],1) == 3 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1],0) == 1 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,4,5],3) == 1 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,4,5],4) == 1 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,4,5],5) == 1 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,4,5],1) == 5 else \"Fail\")\nprint(\"Pass\" if frequency([1,2,3,4,5],0) == 5 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],1) == 2 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],0) == 2 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],3) == 2 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],4) == 2 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],5) == 2 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],6) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],7) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],8) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],9) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],10) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],11) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],12) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],13) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],14) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],15) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],16) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],17) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],18) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],19) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],20) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],21) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],22) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],23) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],24) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],25) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],26) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],27) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],28) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],29) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],30) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],31) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],32) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],33) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],34) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],35) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],36) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],37) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],38) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],39) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],40) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],41) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],42) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],43) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],44) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],45) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],46) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],47) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],48) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],49) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],50) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],51) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],52) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],53) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],54) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],55) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],56) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],57) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],58) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],59) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],60) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],61) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],62) == 0 else \"Fail\")\nprint(\"Pass\" if frequency([5,2,3,1,1],63) == 0 else \"Fail\")\nprint("
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([2,4,3,4,4,4],4) == 3\nassert     frequency([1,2,3,2,1,3],1) == 3\nassert     frequency([1,2,3,2,1,3],5) == 0\nassert     frequency([1,2,3,2,1,3],6) == 4\nassert     frequency([1,2,3,2,1,3],10) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_increasing(a):\n    '''\n    Write a function to determine if a list is in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nif __name__ == '__main__':\n    print('Test case 1:')\n    test_1 = sum_range_list([1,2,3,4,5], 0, 2)\n    assert (test_1 == 15), 'Expected 15, got %d' % (test_1)\n    test_2 = sum_range_list([1,2,3,4,5], 1, 4)\n    assert (test_2 == 12), 'Expected 12, got %d' % (test_2)\n    test_3 = sum_range_list([1,2,3,4,5], 0, 5)\n    assert (test_3 == 15), 'Expected 15, got %d' % (test_3)\n    print('\\nAll test cases passed.'"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_range_list([10,20,30], 0, 2) == 60\nassert     sum_range_list([10,20,30], 1, 2) == 60\nassert     sum_range_list([10,20,30], 0, 3) == 60\nassert     sum_range_list([10,20,30], 1, 3) == 120\nassert     sum_range_list([10,20,30], 2, 3) == 150\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_range_list([1,2,3,4,5], 1, 4) == 9, 'Wrong answer'\nassert     sum_range_list([1,2,3,4,5], 0, 4) == 15, 'Wrong answer'\nassert     sum_range_list([1,2,3,4,5], 0, 5) == 20, 'Wrong answer'\nassert     sum_range_list([1,2,3,4,5], 2, 4) == 9, 'Wrong answer'\nassert     sum_range_list([1,2,3,4,5], 5, 5) == 5, 'Wrong answer'\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9, \"Wrong result\"\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9, \"Wrong result\"\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15, \"Wrong result\"\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 5) == 14, \"Wrong result\"\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 6) == 16, \"Wrong result\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_range_list([1, 2, 4, 6, 7, 8], 2, 4) == 23\nassert     sum_range_list([1, 2, 4, 6, 7, 8], 1, 5) == 17\nassert     sum_range_list([1, 2, 4, 6, 7, 8], 0, 5) == 24\nassert     sum_range_list([1, 2, 4, 6, 7, 8], -3, 3) == 17\nassert     sum_range_list([1, 2, 4, 6, 7, 8], -5, -1) == 8\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_list(arr, m, n):                                                                                                                                                                                        \n    '''\n    Write a function that finds the sum of all elements in the list.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 3) == 5, 'incorrect'\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 1) == 1, 'incorrect'\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 2) == 3, 'incorrect'\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 3) == 4, 'incorrect'\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 5) == 10, 'incorrect'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (perimeter_pentagon(5) == 15), \"It should be 15\"\nassert     (perimeter_pentagon(10) == 25), \"It should be 25\"\nassert     (perimeter_pentagon(100) == 250), \"It should be 250\"\nassert     (perimeter_pentagon(1) == 0), \"It should be 0\"\nassert     (perimeter_pentagon(3) == 10), \"It should be 10\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(6) == 12\nassert     perimeter_pentagon(12) == 18\nassert     perimeter_pentagon(23) == 18\nassert     perimeter_pentagon(24) == 18\nassert     perimeter_pentagon(35) == 18\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(5) == 10\nassert     perimeter_pentagon(2) == 8\nassert     perimeter_pentagon(3) == 13\nassert     perimeter_pentagon(10) == 60\nassert     perimeter_pentagon(100) == 5400\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(1)    == 5, '1'\nassert     perimeter_pentagon(2)    == 10, '2'\nassert     perimeter_pentagon(3)    == 15, '3'\nassert     perimeter_pentagon(4)    == 20, '4'\nassert     perimeter_pentagon(5)    == 30, '5'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef circle_area(radius):\n    '''\n    Write a function to compute the area of a circle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndef area_triangle(a,b):\n    '''\n    Write a function to find the area of a triangle from the lengths of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef area_pentagon(b):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(perimeter_pentagon(1))\nprint(perimeter_pentagon(2))\nprint(perimeter_pentagon(3))\nprint(perimeter_pentagon(4))\nprint(perimeter_pentagon(5))\nprint(perimeter_pentagon(6))\nprint(perimeter_pentagon(7))\nprint(perimeter_pentagon(8))\nprint(perimeter_pentagon(9))\nprint(perimeter_pentagon(10))\nprint(perimeter_pentagon(11))\nprint(perimeter_pentagon(12))\nprint(perimeter_pentagon(13))\nprint(perimeter_pentagon(14))\nprint(perimeter_pentagon(15))\nprint(perimeter_pentagon(16))\nprint(perimeter_pentagon(17))\nprint(perimeter_pentagon(18))\nprint(perimeter_pentagon(19))\nprint(perimeter_pentagon(20))\nprint(perimeter_pentagon(21))\nprint(perimeter_pentagon(22))\nprint(perimeter_pentagon(23))\nprint(perimeter_pentagon(24))\nprint(perimeter_pentagon(25))\nprint(perimeter_pentagon(26))\nprint(perimeter_pentagon(27))\nprint(perimeter_pentagon(28))\nprint(perimeter_pentagon(29))\nprint(perimeter_pentagon(30))\nprint(perimeter_pentagon(31))\nprint(perimeter_pentagon(32))\nprint(perimeter_pentagon(33))\nprint(perimeter_pentagon(34))\nprint(perimeter_pentagon(35))\nprint(perimeter_pentagon(36))\nprint(perimeter_pentagon(37))\nprint(perimeter_pentagon(38))\nprint(perimeter_pentagon(39))\nprint(perimeter_pentagon(40))\nprint(perimeter_pentagon(41))\nprint(perimeter_pentagon(42))\nprint(perimeter_pentagon(43))\nprint(perimeter_pentagon(44))\nprint(perimeter_pentagon(45))\nprint(perimeter_pentagon(46))\nprint(perimeter_pentagon(47))\nprint(perimeter_pentagon(48))\nprint(perimeter_pentagon(49))\nprint(perimeter_pentagon(50))\nprint(perimeter_pentagon(51))\nprint(perimeter_pentagon(52))\nprint(perimeter_pentagon(53))\nprint(perimeter_pentagon(54))\nprint(perimeter_pentagon(55))\nprint(perimeter_pentagon(56))\nprint(perimeter_pentagon(57))\nprint(perimeter_pentagon(58))\nprint(perimeter_pentagon(59))\nprint(perimeter_pentagon(60))\nprint(perimeter_pentagon(61))\nprint(perimeter_pentagon(62))\nprint(perimeter_pentagon(63))\nprint(perimeter_pentagon(64))\nprint(perimeter_pentagon(65))\nprint(perimeter_pentagon(66))\nprint(perimeter_pentagon(67))\nprint(perimeter_pentagon(68))\nprint(perimeter_pentagon(69))\nprint(perimeter_pentagon(70))\nprint(perimeter_pentagon(71))\nprint(perimeter_pentagon(72))\nprint(perimeter_pentagon(73))\nprint(perimeter_pentagon(74))\nprint(perimeter_pentagon(75))\nprint(perimeter_pentagon(76))\nprint(perimeter_pentagon(77))\nprint(perimeter_pentagon(78))\nprint(perimeter_pentagon(79))\nprint(perimeter_pentagon(80))\nprint(perimeter_pentagon(81))\nprint(perimeter_pentagon(82))\nprint(perimeter_pentagon(83))\nprint(perimeter_pentagon(84))\nprint(perimeter_pentagon(85))\nprint(perimeter_pentagon(86))\nprint(perimeter_pentagon(87))\nprint(perimeter_pentagon(88))\nprint(perimeter_pentagon(89))\nprint(perimeter_pentagon(90))\nprint(perimeter_pentagon(91))\nprint(perimeter_pentagon(92))\nprint(perimeter_pentagon(93))\nprint(perimeter_pentagon(94))\nprint(perimeter_pentagon(95))\nprint(perimeter_pentagon(96))\nprint(perimeter_pentagon(97))\nprint(perimeter_pentagon(98))\nprint(perimeter_pentagon(99))\nprint(perimeter_pentagon(100))\nprint(perimeter_pentagon(101))\nprint(perimeter_pentagon(102))\nprint(perimeter_pentagon(103))\nprint(perimeter_pentagon(104))\nprint(perimeter_pentagon(105))\nprint(perimeter_pentagon(106))\nprint(perimeter_pentagon(107))\nprint(perimeter_pentagon(108))\nprint(perimeter_pentagon(109))\nprint(perimeter_pentagon(110))\nprint(perimeter_pentagon(111))\nprint(perimeter_pentagon(112))\nprint(perimeter_pentagon(113))\nprint(perimeter_pentagon(114))\nprint(perimeter_pentagon(115))\nprint(perimeter_pentagon(116))\nprint(perimeter_pentagon(117))\nprint(perimeter_pentagon(118))\nprint(perimeter_pentagon(119))\nprint(perimeter_pentagon(120))\nprint(perimeter_pentagon(121))\nprint(perimeter_pentagon(122))\nprint(perimeter_pentagon(123))\nprint(perimeter_pentagon(124))\nprint(perimeter_pentagon(125))\nprint(perimeter_pentagon(126))\nprint(perimeter_pentagon(127))\nprint(perimeter_pentagon(128))\nprint(perimeter_pentagon(129))\nprint(perimeter_pentagon(130))\nprint(perimeter_pentagon(131))\nprint(perimeter_pentagon(132))\nprint(perimeter_pentagon(133))\nprint(perimeter_pentagon(134))\nprint(perimeter_pentagon(135))\nprint(perimeter_pentagon(136))\nprint(perimeter_pentagon(137))\nprint(perimeter_pentagon(138))\nprint(perimeter_pentagon(139))\nprint(perimeter_pentagon(140))\nprint(perimeter_pentagon(141))\nprint(perimeter_pentagon(142))\nprint(perimeter_pentagon(143))\nprint(perimeter_pentagon(144))\nprint(perimeter_pentagon(145))\nprint(perimeter_pentagon(146))\nprint(perimeter_pentagon(147))\nprint(perimeter_pentagon(148))\nprint(perimeter_pentagon(149))\nprint(perimeter_pentagon(150))\nprint(perimeter_pentagon(151))\nprint(perimeter_pentagon(152))\nprint(perimeter_pentagon(153))\nprint(perimeter_pentagon(154))\nprint(perimeter_pentagon(155))\nprint(perimeter_pentagon(156))\nprint(perimeter_pentagon(157))\nprint(perimeter_pentagon(158))\nprint(perimeter_pentagon(159))\nprint(perimeter_pentagon(160))\nprint(perimeter_pentagon(161))\nprint(perimeter_pentagon(162))\nprint(perimeter_pentagon(163))\nprint(perimeter_pentagon(164))\nprint(perimeter_pentagon(165))\nprint(perimeter_pentagon(166))\nprint(perimeter_pentagon(167))\nprint(perimeter_pentagon(168))\nprint(perimeter_pentagon(169))\nprint(perimeter_pentagon(170))\nprint(perimeter_pentagon(171))\nprint(perimeter_pentagon(172))\nprint(perimeter_pentagon(173))\nprint(perimeter_pentagon(174))\nprint(perimeter_pentagon(175))\nprint(perimeter_pentagon(176))\nprint(perimeter_pentagon(177))\nprint(perimeter_pentagon(178))\nprint(perimeter_pentagon(179))\nprint(perimeter_pentagon(180))\nprint(perimeter_pentagon(18"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    perimeter_pentagon(2) == 5\n    perimeter_pentagon(3) == 7\n    perimeter_pentagon(4) == 10\n    perimeter_pentagon(5) == 12\n    perimeter_pentagon(6) == 15\n    perimeter_pentagon(7) == 21\n    perimeter_pentagon(8) == 28\n    perimeter_pentagon(9) == 35\n    perimeter_pentagon(10) == 45\n    perimeter_pentagon(11) == 55\n    perimeter_pentagon(12) == 65\n    perimeter_pentagon(13) == 76\n    perimeter_pentagon(14) == 87\n    perimeter_pentagon(15) == 105\n    perimeter_pentagon(16) == 116\n    perimeter_pentagon(17) == 117\n    perimeter_pentagon(18) == 128\n    perimeter_pentagon(19) == 135\n    perimeter_pentagon(20) == 144\n    perimeter_pentagon(21) == 153\n    perimeter_pentagon(22) == 162\n    perimeter_pentagon(23) == 168\n    perimeter_pentagon(24) == 190\n    perimeter_pentagon(25) == 200\n    perimeter_pentagon(26) == 210\n    perimeter_pentagon(27) == 217\n    perimeter_pentagon(28) == 230\n    perimeter_pentagon(29) == 238\n    perimeter_pentagon(30) == 239\n    perimeter_pentagon(31) == 247\n    perimeter_pentagon(32) == 252\n    perimeter_pentagon(33) == 261\n    perimeter_pentagon(34) == 268\n    perimeter_pentagon(35) == 276\n    perimeter_pentagon(36) == 288\n    perimeter_pentagon(37) == 295\n    perimeter_pentagon(38) == 296\n    perimeter_pentagon(39) == 300\n    perimeter_pentagon(40) == 303\n    perimeter_pentagon(41) == 303\n    perimeter_pentagon(42) == 309\n    perimeter_pentagon(43) == 312\n    perimeter_pentagon(44) == 316\n    perimeter_pentagon(45) == 317\n    perimeter_pentagon(46) == 318\n    perimeter_pentagon(47) == 318\n    perimeter_pentagon(48) == 322\n    perimeter_pentagon(49) == 322\n    perimeter_pentagon(50) == 324\n    perimeter_pentagon(51) == 326\n    perimeter_pentagon(52) == 327\n    perimeter_pentagon(53) == 329\n    perimeter_pentagon(54) == 332\n    perimeter_pentagon(55) == 333\n    perimeter_pentagon(56) == 335\n    perimeter_pentagon(57) == 336\n    perimeter_pentagon(58) == 337\n    perimeter_pentagon(59) == 338\n    perimeter_pentagon(60) == 340\n    perimeter_pentagon(61) == 341\n    perimeter_pentagon(62) == 342\n    perimeter_pentagon(63) == 345\n    perimeter_pentagon(64) == 346\n    perimeter_pentagon(65) == 347\n    perimeter_pentagon(66) == 348\n    perimeter_pentagon(67) == 349\n    perimeter_pentagon(68) == 352\n    perimeter_pentagon(69) == 356\n    perimeter_pentagon(70) == 357\n    perimeter_pentagon(71) == 358\n    perimeter_pentagon(72) == 360\n    perimeter_pentagon(73) == 361\n    perimeter_pentagon(74) == 365\n    perimeter_pentagon(75) == 365\n    perimeter_pentagon(76) == 364\n    perimeter_pentagon(77) == 366\n    perimeter_pentagon(78) == 367\n    perimeter_pentagon(79) == 368\n    perimeter_pentagon(80) == 375\n    perimeter_pentagon(81) == 375\n    perimeter_pentagon(82) == 376\n    perimeter_pentagon(83) == 377\n    perimeter_pentagon(84) == 378\n    perimeter_pentagon(85) == 384\n    perimeter_pentagon(86) == 385\n    perimeter_pentagon(87) == 386\n    perimeter_pentagon(88) == 388\n    perimeter_pentagon(89) == 390\n    perimeter_pentagon(90) == 393\n    perimeter_pentagon(91) == 393\n    perimeter_pentagon(92) == 394\n    perimeter_pentagon(93) == 396\n    perimeter_pentagon(94) == 395\n    perimeter_pentagon(95) == 395\n    perimeter_pentagon(96) == 394\n    perimeter_pentagon(97) == 394\n    perimeter_pentagon(98) == 394\n    perimeter_pentagon(99) == 395\n    perimeter_pentagon(100) == 395\n    perimeter_pentagon(101) == 394\n    perimeter_pentagon(102) == 394\n    perimeter_pentagon(103) == 395\n    perimeter_pentagon(104) == 394\n    perimeter_pentagon(105) == 395\n    perimeter_pentagon(106) == 396\n    perimeter_pentagon(107) == 396\n    perimeter_pentagon(108) == 393\n    perimeter_pentagon(109) == 393\n    perimeter_pentagon(110) == 394\n    perimeter_pentagon(111) == 395\n    perimeter_pentagon(112) == 396\n    perimeter_pentagon(113) == 396\n    perimeter_pentagon(114) == 394\n    perimeter_pentagon(115) == 394\n    perimeter_pentagon(116) == 396\n    perimeter_pentagon(117) == 396\n    perimeter_pentagon(118) == 394\n    perimeter_pentagon(119) == 396\n    perimeter_pentagon(120) == 396\n    perimeter_pentagon(121) == 394\n    perimeter_pentagon(122) == 396\n    perimeter_pentagon(123) == 394\n    perimeter_pentagon(124) == 393\n    perimeter_pentagon(125) == 394\n    perimeter_pentagon(126) == 394\n    perimeter_pentagon(127) == 395\n    perimeter_pentagon(128) == 396\n    perimeter_pentagon(129) == 394\n    perimeter_pentagon(130) == 396\n    perimeter_pentagon(131) == 394\n    perimeter_pentagon(132) == 395\n    perimeter_pentagon(133) == 396\n    perimeter_pentagon(134) == 394\n    perimeter_pentagon(135) == 394\n    perimeter_pentagon(136) == 396\n    perimeter_pentagon(137) == 396\n    perimeter_pentagon(138) == 394\n    perimeter_pentagon(139) == 395\n    perimeter_pentagon(140) == 396\n    perimeter_pentagon(141) == 396\n    perimeter_pentagon(142) == 394\n    perimeter_pentagon(143) == 396\n    perimeter_pentagon(144) == 394\n    perimeter_pentagon(145) == 394\n    perimeter_pentagon(146) == 394\n    perimeter_pentagon(147) == 394\n    perimeter_pentagon(148) == 396\n    perimeter_pentagon(149) == 396\n    perimeter_pentagon(150) == 396\n    perimeter_pentagon(151) == 394\n    perimeter_pentagon(152) == 395\n    perimeter_pentagon(153) == 394\n    perimeter_pentagon(154) == 394\n    perimeter_pentagon(155) == 396\n    perimeter_pentagon(156) == 396\n    perimeter_pentagon(157) == 394\n    perimeter_pentagon(158) == 396\n    perimeter_pentagon(159) == 396\n    perimeter_pentagon(160) == 396\n    perimeter_pentagon(161) == 396\n    perimeter_pentagon(162) == 396\n    perimeter_pentagon(163) == 394\n    perimeter_pentagon(164) == 39"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(4) == 12\nassert     perimeter_pentagon(3) == 12\nassert     perimeter_pentagon(5) == 22\nassert     perimeter_pentagon(2) == 4\nassert     perimeter_pentagon(3.3) == 8.5\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance(\"A\") == 0\nassert     count_occurance(\"A\") == 1\nassert     count_occurance(\"aa\") == 1\nassert     count_occurance(\"BB\") == 2\nassert     count_occurance(\"abcddee\") == 5\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance(\"Hello World\") == 1, \"Should be 1\"\nassert     count_occurance(\"Hello World Hello World\") == 2, \"Should be 2\"\nassert     count_occurance(\"Hello World Hello World Hello World\") == 3, \"Should be 3\"\n\nprint(\"TESTS SUCCESSFUL\")\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_occurance('abc') == 0, 'cannot find the count of the string'\nassert     count_occurance('abcccc') == 1, 'cannot find the count of the string'\nassert     count_occurance('abcccccd') == 1, 'cannot find the count of the string'\nassert     count_occurance('abcdefghijklmn') == 1, 'cannot find the count of the string'\nassert     count_occurance('abcdefghijklmnop') == 4, 'cannot find the count of the string'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance('std') == 2, \"Expected 2 but got {}\".format(count_occurance('std'))\nassert     count_occurance('string') == 0, \"Expected 0 but got {}\".format(count_occurance('string'))\nassert     count_occurance('') == 0, \"Expected 0 but got {}\".format(count_occurance(''))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_occurance('aaabbbcccdddde') == 3\n\ndef count_occurance_rec(s, i, j):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    if i > j:\n        return 0\n    if i == j:\n        if s[i] == 't':\n            return 1\n        else:\n            return 0\n    if s[i] == 't':\n        return 1 + count_occurance_rec(s, i+1, j)\n    else:\n        return count_occurance_rec(s, i+1, j)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance('hello world, how are you doing') == 2\n\n\ndef count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'cse' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_occurance('i am a student') == 3\n\n\ndef count_occurance_char_n(s, n):\n    '''\n    Write a function to count the number of occurence of the string 'n' in a given string.\n    '''\n    pass\n\nassert count_occurance_char_n('i am a student', 'a') == 2\nassert count_occurance_char_n('i am a student', 'i') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_occurance('Geeks for Geeks') == 1\nassert \ncount_occurance('Geeks for Geeks for Geeks') == 3\nassert \ncount_occurance('Geeks for Geeks ') == 1\nassert \ncount_occurance('Geeks for Geeks   ') == 1\nassert \ncount_occurance('Geeks for Geeks   Geeks') == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance('This is a test') == 2\nassert     count_occurance('This is a test') == 1\nassert     count_occurance('test') == 1\nassert     count_occurance('Test') == 1\nassert     count_occurance('') == 0\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type([1, 2, 3]) == False, 'Tuple is not having data type correctly.'\nassert     check_type((1, 2, 3)) == True, 'Tuple is having data type correctly.'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type((3,5,3,3,3)) == False, \\\n        'Check if all the elements in tuple have same data type or not.'\nassert     check_type((3.4,5.4,3.4,3.4,3.4)) == True, \\\n        'Check if all the elements in tuple have same data type or not.'\nassert     check_type((3,4,5,6,7)) == False, \\\n        'Check if all the elements in tuple have same data type or not.'\n\n\ndef div_by_zero(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple are divisible by 5 or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type(('hi', 'bye', 1, 2.0, 3.5, True)) == True, \"All elements should be same type\"\nassert     check_type((1, 2, 3, 4, 5)) == True, \"All elements should be same type\"\nassert     check_type((1, 2.0, 'hi', True, 'bye')) == False, \"All elements should be same type\"\nassert     check_type((1, 2.0, 'hi', 'bye', 5)) == False, \"All elements should be same type\"\nassert     check_type((1, 2.0, 'hi', 'bye', '5')) == False, \"All elements should be same type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type( (1, 2, 3, 3.3, 'abcd') ) == True, \\\n                \"Error: Wrong return type\"\nassert     check_type( (1, 2, 3, 3, 'abcd') ) == False, \\\n                \"Error: Wrong return type\"\nassert     check_type( (1, 2, 3, 3, 3.3, 'abcd') ) == False, \\\n                \"Error: Wrong return type\"\nassert     check_type( (1, 2, 3, 3.3, 3.3, 'abcd') ) == False, \\\n                \"Error: Wrong return type\"\nassert     check_type( (1, 2, 3, 3.3, 'abcd', 3.3) ) == False, \\\n                \"Error: Wrong return type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type((1, 2.5, 'abc', True)) == True\nassert     check_type((1, True)) == False\n\ndef check_value(test_tuple):\n    '''\n    Write a function to check if the minimum and maximum value of the tuple is between 0 and 9 or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_type([True, \"hello\", 3.14]) == True\nassert check_type([1, \"hello\", 3.14]) == False\nassert check_type([True, \"hello\", \"3.14\"]) == False\nassert check_type([True, 1, \"hello\"]) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type((1,2,3)) ==     True, 'tuple of different type'\nassert     check_type((1,2,3.0)) ==     True, 'tuple of different type'\nassert     check_type((1,2,1.0)) ==     False, 'tuple of different type'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type((1,2,3)) == True, \"Type of 1st element is not same\"\nassert     check_type((1,'2','3')) == False, \"Type of 2nd element is not same\"\nassert     check_type((1,2,'3')) == False, \"Type of 3rd element is not same\"\nassert     check_type((1,2,3,'4')) == False, \"Type of 4th element is not same\"\nassert     check_type((1,'2',3,4,5)) == False, \"Type of 5th element is not same\"\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('is_majority')\nprint('testing')\n\nassert is_majority([1, 2, 3, 4, 4], 5, 2) == True\nassert is_majority([1, 2, 3, 4, 4], 5, 3) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_majority([1, 1, 1, 1], 3, 1) == True\nassert     is_majority([1, 1, 1, 2], 3, 1) == False\nassert     is_majority([1, 1, 1, 2], 5, 1) == False\nassert     is_majority([1, 1, 1, 2, 2, 2, 2, 2, 2, 2], 6, 1) == True\nassert     is_majority([1, 1, 1, 2, 2, 2, 2, 2, 2, 2], 10, 1) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_majority_element(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and returns an element that occurs more than n/2 times in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_majority([1, 3, 5, 1, 3, 5, 7], 7, 5) == True\nassert     is_majority([1, 2, 3, 4, 5, 6], 5, 3) == False\nassert     is_majority([2, 4, 6, 8], 4, 6) == True\nassert     is_majority([1, 1, 1, 2, 2, 2], 4, 1) == False\nassert     is_majority([2, 2, 2, 2], 3, 2) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_majority([1,2,3,4,5,1], 6, 3) == True\nassert     is_majority([1,2,3,4,5,1], 5, 3) == False\nassert     is_majority([1,2,3,4,5,1], 4, 3) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef majority_element(nums, k):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if k >= len(nums):\n        return -1\n    if k <= 0:\n        return -1\n    if k == 1:\n        return nums[0]\n    \n    count = 1\n    target = nums[k - 1]\n    \n    for i in range(k, len(nums)):\n        if nums[i] == target:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            target = nums[i]\n            count = 1\n    \n    return target\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_majority([1,2,3,4,1,4,4], 6, 4) == True\n\nassert \nis_majority([1,1,2,3,4,4,4], 6, 4) == False\n\nassert \nis_majority([1,2,3,4,1,4,4], 6, 5) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(5) == 1\nassert count_Set_Bits(8) == 2\nassert count_Set_Bits(11) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Pass\" if (5 == count_Set_Bits(11)) else \"Fail\")\nprint(\"Pass\" if (0 == count_Set_Bits(0)) else \"Fail\")\nprint(\"Pass\" if (7 == count_Set_Bits(111)) else \"Fail\")\nprint(\"Pass\" if (0 == count_Set_Bits(-9)) else \"Fail\")\nprint(\"Pass\" if (11 == count_Set_Bits(-101)) else \"Fail\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_Set_Bits_naive(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    Assume that n is always a positive integer.\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_Set_Bits(10) == 5\nassert count_Set_Bits(1010) == 6\nassert count_Set_Bits(0) == 0\nassert count_Set_Bits(7) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(4) == 0, 'test case failed'\nassert     count_Set_Bits(5) == 1, 'test case failed'\nassert     count_Set_Bits(20) == 1, 'test case failed'\nassert     count_Set_Bits(0) == 0, 'test case failed'\nassert     count_Set_Bits(-1) == 0, 'test case failed'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(2) == 0, 'The number of set bits should be 0'\nassert     count_Set_Bits(7) == 1, 'The number of set bits should be 1'\nassert     count_Set_Bits(8) == 1, 'The number of set bits should be 1'\nassert     count_Set_Bits(9) == 2, 'The number of set bits should be 2'\nassert     count_Set_Bits(10) == 2, 'The number of set bits should be 2'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_Set_Bits(1) == 0\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(10) == 2\nassert count_Set_Bits(100) == 3\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_values_string(\"Hello World\") == \"dlrow\", \"Example 1\"\nassert     odd_values_string(\"Hello World\") == \"dlrow\", \"Example 2\"\nassert     odd_values_string(\"Hello World\") == \"dlrow\", \"Example 3\"\nassert     odd_values_string(\"Hello World\") == \"dlrow\", \"Example 4\"\nassert     odd_values_string(\"Hello World\") == \"dlrow\", \"Example 5\"\nprint('\"Run\" is good. How is \"Check\"?')\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string('aba') == 'bab'\nassert     odd_values_string('abab') == 'bbaa'\nassert     odd_values_string('abaaaaa') == 'bbaaa'\nassert     odd_values_string('aaaaaaaa') == 'aaa'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string(\"This is a test string\") == \"s a ti st\"\nassert     odd_values_string(\"test\") == \"s\"\nassert     odd_values_string(\"\") == \"\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string('abcdeffedcba') == 'edcba'\nassert     odd_values_string('abcdefghijklmnopqrstuvwxyz') == ''\nassert     odd_values_string('dasfghjklsafghjkl') == 'dasfghjklsafghjkl'\nassert odd_values_string('adfgfeqwrtcsc') == 'qrstc'\nassert odd_values_string('adfgfeqwrtcsc') == ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string(\"Python\")     == 'Ytho'\nassert     odd_values_string(\"Python12\") == 'ytho'\nassert     odd_values_string(\"Python12345\") == 'ytho'\nassert     odd_values_string(\"Python1314151617\") == 'ytho'\nassert     odd_values_string(\"python\")     == 'ytho'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string('hello') == 'lh'\nassert     odd_values_string('abc') == 'ac'\nassert     odd_values_string('ghi') == 'gh'\nassert     odd_values_string('jkl') == 'kl'\nassert     odd_values_string('mnop') =='mp'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_values_string('abcdabcd') == 'abcd', \"Error in test case 1\"\nassert     odd_values_string('abcd') == '', \"Error in test case 2\"\nassert     odd_values_string('abcdabcd') == '', \"Error in test case 3\"\nassert     odd_values_string('dasfasdfad') == 'asdf', \"Error in test case 4\"\nassert     odd_values_string('sdfsdfsdf') == '', \"Error in test case 5\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string('abcdefghi') == 'bdefghi'\nassert     odd_values_string('abcdefg') == 'bdefg'\nassert     odd_values_string('abc') == 'b'\nassert     odd_values_string('a') == 'a'\nassert     odd_values_string('abcd') == 'bcd'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string(\"ABCDEFG\") == \"CEFG\", \"First Test Case is wrong.\"\nassert     odd_values_string(\"AB\") == \"AB\", \"Second Test Case is wrong.\"\nassert     odd_values_string(\"ABC\") == \"ABC\", \"Third Test Case is wrong.\"\nprint(\"All test cases passed.\")\n\ndef count_even_odd(number):\n    '''\n    Write a python function to count the even and odd numbers from an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_values_string('hello') == 'hlo'\nassert     odd_values_string('parrot') == 'par'\nassert     odd_values_string('hello world') == 'hdlw'\nassert     odd_values_string('python') == 'pyth'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(10, 20, 30)     == 30\nassert     min_of_three(50, 100, 150)     == 50\nassert     min_of_three(-20, 100, 15)     == -20\n\n'''\nProblem 3.1 (3.4)\nWrite a function that takes in two lists and returns a list of the \nintersecting and union of those lists. You should assume that you are only \nallowed to add and remove elements from the lists.\n'''\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(-1,-2,-3) == -1\nassert     min_of_three(10,10,10) == 10\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,2,2) == 2\nassert     min_of_three(2,2,1) == 1\nassert     min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_of_three(3,6,9) == 3\nassert     min_of_three(6,3,9) == 3\nassert     min_of_three(3,9,6) == 3\nassert     min_of_three(9,3,6) == 3\nassert     min_of_three(9,6,3) == 3\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(3,4,5) == 3, \"WRONG!\"\nassert min_of_three(5,1,2) == 1, \"WRONG!\"\nassert min_of_three(3,2,5) == 2, \"WRONG!\"\nprint(\"min_of_three: Correct\")\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_of_three(7,8,9) == 7\nassert min_of_three(7,8,10) == 7\nassert min_of_three(7,7,7) == 7\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,1,5) == True, \"Wrong Answer\"\nassert     all_Bits_Set_In_The_Given_Range(5,1,4) == False, \"Wrong Answer\"\nassert     all_Bits_Set_In_The_Given_Range(5,1,1) == True, \"Wrong Answer\"\nassert     all_Bits_Set_In_The_Given_Range(0,1,1) == True, \"Wrong Answer\"\nassert     all_Bits_Set_In_The_Given_Range(0,1,0) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(3,1,3) == True, 'Should be True'\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == False, 'Should be False'\nassert     all_Bits_Set_In_The_Given_Range(4,0,2) == False, 'Should be False'\nassert     all_Bits_Set_In_The_Given_Range(1,2,3) == False, 'Should be False'\nassert     all_Bits_Set_In_The_Given_Range(5,0,8) == True, 'Should be True'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>1:\n        return (l<=all_Bits_Set_In_The_Given_Range(n-1,l,r) and r<=all_Bits_Set_In_The_Given_Range(n-1,l,r))\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,3) == True\nassert     all_Bits_Set_In_The_Given_Range(5,0,7) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=7,l=0,r=4) == True, 'Wrong Output'\nassert     all_Bits_Set_In_The_Given_Range(n=9,l=0,r=5) == False, 'Wrong Output'\nassert     all_Bits_Set_In_The_Given_Range(n=12,l=0,r=5) == False, 'Wrong Output'\nassert     all_Bits_Set_In_The_Given_Range(n=9,l=0,r=6) == True, 'Wrong Output'\nassert     all_Bits_Set_In_The_Given_Range(n=15,l=0,r=7) == True, 'Wrong Output'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=7,l=3,r=7) == False\nassert     all_Bits_Set_In_The_Given_Range(n=7,l=3,r=6) == False\nassert     all_Bits_Set_In_The_Given_Range(n=6,l=3,r=6) == True\nassert     all_Bits_Set_In_The_Given_Range(n=0,l=0,r=0) == False\nassert     all_Bits_Set_In_The_Given_Range(n=1,l=0,r=0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(100,1,3) == True\nassert     all_Bits_Set_In_The_Given_Range(100,100,100) == False\nassert     all_Bits_Set_In_The_Given_Range(8,0,100) == False\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(13,1,4) == False\nassert     all_Bits_Set_In_The_Given_Range(13,1,5) == True\nassert     all_Bits_Set_In_The_Given_Range(17,1,5) == True\nassert     all_Bits_Set_In_The_Given_Range(16,0,5) == False\nassert     all_Bits_Set_In_The_Given_Range(3,0,3) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0, 0, 1) == True\nassert     all_Bits_Set_In_The_Given_Range(1, 0, 1) == True\nassert     all_Bits_Set_In_The_Given_Range(0, 1, 1) == True\nassert     all_Bits_Set_In_The_Given_Range(1, 1, 1) == True\nassert     all_Bits_Set_In_The_Given_Range(0, 2, 1) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     re_arrange_array([-1, 2, -3, 4, -5, 6, -7, 8], 5) == [-7, -5, -3, 2, 4, 6, -1, -8]\nassert re_arrange_array([-1, 2, -3, 4, -5, 6, -7, 8], 4) == [-7, -5, -3, 4, -1, 2, 6, 8]\nassert re_arrange_array([-1, 2, -3, 4, -5, 6, -7, 8], 3) == [-1, -3, -5, -7, -8, 2, 4, 6]\nassert re_arrange_array([-1, 2, -3, 4, -5, 6, -7, 8], 2) == [-1, -3, -5, 2, -7, -8, 4, 6]\nassert re_arrange_array([-1, 2, -3, 4, -5, 6, -7, 8], 1) == [-1, 2, -3, -5, -7, -8, 4, 6]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     re_arrange_array([1,2,3,4,5,6], 3) == [1,2,3,4,5,6]\nassert     re_arrange_array([-1,3,1,0,2,-4], 2) == [-1,0,1,2,3,4]\nassert     re_arrange_array([5,-6,7,-8], 2) == [-6,-8,5,7]\nassert     re_arrange_array([1,2,3,4,5], 1) == [1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5], 0) == [1,2,3,4,5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, -5]\nassert re_arrange_array([1, -2, 3, -4, 5], 5) == [-1, -2, 3, -4, -5]\nassert re_arrange_array([-1, -2, -3, -4, 5], 5) == [-5, -4, -3, -2, -1]\n\ndef re_arrange_array2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert re_arrange_array([1, 2, -1, 4, -2, -5], 5) == [-5, 4, -1, 1, -2, 2]\nassert re_arrange_array([1, 2, -1, 4, -2, -5], 4) == [-5, 4, -1, 1, -2]\nassert re_arrange_array([1, 2, 3, -1, -2, -5], 5) == [-5, 1, 2, 3, -1, -2]\nassert re_arrange_array([1, 2, 3, -1, -2, -5], 4) == [-5, 1, 2, 3, -1]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5], 4) == [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5]\nassert     re_arrange_array([1, -2, 3, 4, -5, -6, 7, -8, 9, 10], 10) == [-10, -11, -12, 1, -2, 3, -4, -5, -6, 7, -8, 9]\nassert     re_arrange_array([-10, -11, -12, 1, -2, 3, -4, -5, -6, 7, -8, 9], 10) == [-10, -11, -12, 1, -2, 3, -4, -5, -6, 7, -8, 9]\nassert     re_arrange_array([10, 20, 30, 40], 2) == [-20, 10, -30, -40]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 73"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([1,3,4,5,6], 3) == [1,-3,4,-5,6], \"Wrong\"\nassert re_arrange_array([1,4,3,5,2], 3) == [-1,-4,-3,1,2], \"Wrong\"\nassert re_arrange_array([1,2,3,4,5], 2) == [-1,1,2,3,4,5], \"Wrong\"\n\n\n\ndef re_arrange_array_optimized(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     re_arrange_array([1,2,3,4,5,-6,7,8,9,10,11,12,13,14], 5) == [-6,-7,1,2,3,4,5,10,11,12,13,14,9,8,7]\nassert re_arrange_array([1,2,3,4,5,-6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 5) == [-6,-7,1,2,3,4,5,10,11,12,13,14,15,16,17,20,19,18,8,7]\n\ndef split_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and splits the array into two subarrays of equal size such that the absolute difference between the sum of the two subarrays is minimized.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9]\n    n = 5\n    re_arrange_array(arr, n)\n\n    print(arr"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef reverse_sorted_array(arr,n):\n    '''\n    Write a function that takes in an array and a number n, and reverses the order of the first n elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_blank('to be or not to be ','') == 'to be or not to be'\nassert replace_blank('to be or not to be ','') == 'to be or not to be'\nassert replace_blank('','') == ''\nassert replace_blank('','') == ''\nassert replace_blank('hello world','') == 'hello world'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_every_other(str1):\n    '''\n    Write a function that takes a string, and returns a string with every other character removed, so the length of the string is half the length of the original string.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert replace_blank('ab', 'a') == 'a'\nassert replace_blank('', 'a') == 'a'\nassert replace_blank('', '') == ''\n\nprint('correct')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_blank(\"Is this my first sentence?\", \" \") == \"Is this my first sentence?\", \"The replace_blank function should return the string unchanged if no blank spaces are found.\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank('Hello,World!','') == 'Hello,World!'\nassert     replace_blank('','') == ''\nassert     replace_blank('Hello,World!', '') == 'Hello,World!'\nassert     replace_blank('Hello,World!','') == 'Hello,World!'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank(\"hello, world!\",' ') == \"hello, world!\", \"fails 1\"\nassert     replace_blank(\"hello, world!\",'a') == \"h,o,rld\", \"fails 2\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_blank('   ',' ')==' ', 'FAILED'\nassert     replace_blank('Opa',' ')=='Opa', 'FAILED'\nassert     replace_blank(' ',' ')==' ', 'FAILED'\nassert     replace_blank('','')=='', 'FAILED'\nassert     replace_blank('',' ')==' ', 'FAILED'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank(\"sdf\", \"\") == \"sdf\"\nassert     replace_blank(\"sdf\", \"b\") == \"bdf\"\nassert     replace_blank(\"sdf\", \" \") == \"sdf\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_swap(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if they swap places, and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlarg_nnum([0,1,2,4,5,3],2) == [4,5]\nassert\nlarg_nnum([0,1,2,4,5,3],5) == [0,1,2,3,4]\nassert\nlarg_nnum([0,1,2,4,5,3],1) == [0]\nassert\nlarg_nnum([0,1,2,4,5,3],3) == [1,2,3]\nassert\nlarg_nnum([0,1,2,4,5,3],4) == [1,2,3,4]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     larg_nnum([1,2,3,4,5],2) == [3,4]\nassert larg_nnum([1,2,3,4,5],3) == [4,5]\nassert larg_nnum([1,2,3,4,5],0) == []\nassert larg_nnum([1,2,3,4,5],4) == [1,2,3,4]\nassert larg_nnum([1,2,3,4,5],5) == [1,2,3,4,5]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\ndef string_match(str1, str2):\n    '''\n    Given 2 strings, str1 and str2,\n    return a string containing all the positions \n    at which one string appears in the other string.\n    '''\n    pass\n\n\ndef bag(n, k, w, v, used, todo):\n    '''\n    Write a function that takes in 4 integers\n    and returns a list representing the capacity and cost\n    of a bag of the specified size and type.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert larg_nnum([9,0,6,3,2,1,5,4],5) == [9,6,3,2,1]\nassert larg_nnum([1,2,5,0,3,7],2) == [5,3]"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nlarg_nnum(['cat', 'dog', 'rat', 'elephant', 'rat', 'elephant','mouse'], 4) == ['cat', 'elephant','mouse', 'rat']\nprint('Success')"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     larg_nnum([1, 2, 3, 4], 2) == [4, 3]\nassert     larg_nnum([1, 2, 3, 4], 1) == [4, 3]\nassert     larg_nnum([1, 2, 3, 4, 5], 1) == [5, 4, 3]\nassert     larg_nnum([1, 2, 3, 4, 5, 6], 1) == [6, 5, 4, 3]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     larg_nnum([0, -1, 2, 10], 3) == [-1, 2, 10]\nassert     larg_nnum([0, -1, 2, 10], 0) == []\nassert     larg_nnum([], 0) == []\nassert     larg_nnum([], 1) == []\nassert     larg_nnum([1, -2, -3, 0], 2) == [1, -2]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlarg_nnum([1,2,3,4,5],4) == [4,5,3,2]\n\ndef check_output(output, expected_output):\n    \"\"\"\n    Return True if output is as expected_output.\n    \"\"\"\n    return expected_output == output\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef get_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nlarg_nnum([1,2,3,4,5],1) == [5]\nassert \nlarg_nnum([1,2,3,4,5,6],1) == [5]\nassert \nlarg_nnum([1,2,3,4,5,6],2) == [6,5]\nassert \nlarg_nnum([1,2,3,4,5,6],3) == [6,5,4]\nassert \nlarg_nnum([1,2,3,4,5,6],4) == [6,5,4,3]\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsuface_cylinder(3,4) == 6\nassert     lateralsuface_cylinder(2,4) == 8\nassert     lateralsuface_cylinder(6,4) == 16\nassert     lateralsuface_cylinder(5,4) == 20\nassert     lateralsuface_cylinder(4,4) == 24\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlateralsuface_cylinder(1,1) == 4\nlateralsuface_cylinder(2,1) == 8\nlateralsuface_cylinder(3,1) == 10\nlateralsuface_cylinder(5,1) == 12\nlateralsuface_cylinder(2,2) == 16\nlateralsuface_cylinder(3,2) == 20\nlateralsuface_cylinder(4,2) == 24\nlateralsuface_cylinder(6,2) == 28\nlateralsuface_cylinder(2,3) == 32\nlateralsuface_cylinder(3,3) == 36\nlateralsuface_cylinder(4,3) == 40\nlateralsuface_cylinder(6,3) == 44\nlateralsuface_cylinder(2,4) == 48\nlateralsuface_cylinder(3,4) == 52\nlateralsuface_cylinder(4,4) == 56\nlateralsuface_cylinder(6,4) == 60\nlateralsuface_cylinder(2,5) == 64\nlateralsuface_cylinder(3,5) == 68\nlateralsuface_cylinder(4,5) == 72\nlateralsuface_cylinder(6,5) == 76\nlateralsuface_cylinder(2,6) == 80\nlateralsuface_cylinder(3,6) == 84\nlateralsuface_cylinder(4,6) == 88\nlateralsuface_cylinder(6,6) == 92\nlateralsuface_cylinder(2,7) == 96\nlateralsuface_cylinder(3,7) == 100\nlateralsuface_cylinder(4,7) == 104\nlateralsuface_cylinder(6,7) == 108\nlateralsuface_cylinder(2,8) == 112\nlateralsuface_cylinder(3,8) == 116\nlateralsuface_cylinder(4,8) == 120\nlateralsuface_cylinder(6,8) == 124\nlateralsuface_cylinder(2,9) == 128\nlateralsuface_cylinder(3,9) == 132\nlateralsuface_cylinder(4,9) == 136\nlateralsuface_cylinder(6,9) == 140\nlateralsuface_cylinder(2,10) == 144\nlateralsuface_cylinder(3,10) == 148\nlateralsuface_cylinder(4,10) == 152\nlateralsuface_cylinder(6,10) == 156\nlateralsuface_cylinder(2,11) == 160\nlateralsuface_cylinder(3,11) == 164\nlateralsuface_cylinder(4,11) == 168\nlateralsuface_cylinder(6,11) == 172\nlateralsuface_cylinder(2,12) == 176\nlateralsuface_cylinder(3,12) == 180\nlateralsuface_cylinder(4,12) == 184\nlateralsuface_cylinder(6,12) == 188\nlateralsuface_cylinder(2,13) == 192\nlateralsuface_cylinder(3,13) == 196\nlateralsuface_cylinder(4,13) == 200\nlateralsuface_cylinder(6,13) == 204\nlateralsuface_cylinder(2,14) == 208\nlateralsuface_cylinder(3,14) == 212\nlateralsuface_cylinder(4,14) == 216\nlateralsuface_cylinder(6,14) == 220\nlateralsuface_cylinder(2,15) == 224\nlateralsuface_cylinder(3,15) == 228\nlateralsuface_cylinder(4,15) == 232\nlateralsuface_cylinder(6,15) == 236\nlateralsuface_cylinder(2,16) == 240\nlateralsuface_cylinder(3,16) == 244\nlateralsuface_cylinder(4,16) == 248\nlateralsuface_cylinder(6,16) == 252\nlateralsuface_cylinder(2,17) == 256\nlateralsuface_cylinder(3,17) == 260\nlateralsuface_cylinder(4,17) == 264\nlateralsuface_cylinder(6,17) == 268\nlateralsuface_cylinder(2,18) == 272\nlateralsuface_cylinder(3,18) == 276\nlateralsuface_cylinder(4,18) == 280\nlateralsuface_cylinder(6,18) == 284\nlateralsuface_cylinder(2,19) == 288\nlateralsuface_cylinder(3,19) == 292\nlateralsuface_cylinder(4,19) == 296\nlateralsuface_cylinder(6,19) == 300\nlateralsuface_cylinder(2,20) == 304\nlateralsuface_cylinder(3,20) == 308\nlateralsuface_cylinder(4,20) == 312\nlateralsuface_cylinder(6,20) == 316\nlateralsuface_cylinder(2,21) == 320\nlateralsuface_cylinder(3,21) == 324\nlateralsuface_cylinder(4,21) == 328\nlateralsuface_cylinder(6,21) == 332\nlateralsuface_cylinder(2,22) == 336\nlateralsuface_cylinder(3,22) == 340\nlateralsuface_cylinder(4,22) == 344\nlateralsuface_cylinder(6,22) == 348\nlateralsuface_cylinder(2,23) == 352\nlateralsuface_cylinder(3,23) == 356\nlateralsuface_cylinder(4,23) == 360\nlateralsuface_cylinder(6,23) == 364\nlateralsuface_cylinder(2,24) == 368\nlateralsuface_cylinder(3,24) == 372\nlateralsuface_cylinder(4,24) == 376\nlateralsuface_cylinder(6,24) == 380\nlateralsuface_cylinder(2,25) == 384\nlateralsuface_cylinder(3,25) == 388\nlateralsuface_cylinder(4,25) == 392\nlateralsuface_cylinder(6,25) == 396\nlateralsuface_cylinder(2,26) == 400\nlateralsuface_cylinder(3,26) == 404\nlateralsuface_cylinder(4,26) == 408\nlateralsuface_cylinder(6,26) == 412\nlateralsuface_cylinder(2,27) == 416\nlateralsuface_cylinder(3,27) == 420\nlateralsuface_cylinder(4,27) == 424\nlateralsuface_cylinder(6,27) == 428\nlateralsuface_cylinder(2,28) == 432\nlateralsuface_cylinder(3,28) == 436\nlateralsuface_cylinder(4,28) == 440\nlateralsuface_cylinder(6,28) == 444\nlateralsuface_cylinder(2,29) == 448\nlateralsuface_cylinder(3,29) == 452\nlateralsuface_cylinder(4,29) == 456\nlateralsuface_cylinder(6,29) == 460\nlateralsuface_cylinder(2,30) == 464\nlateralsuface_cylinder(3,30) == 468\nlateralsuface_cylinder(4,30) == 472\nlateralsuface_cylinder(6,30) == 476\nlateralsuface_cylinder(2,31) == 480\nlateralsuface_cylinder(3,31) == 484\nlateralsuface_cylinder(4,31) == 488\nlateralsuface_cylinder(6,31) == 492\nlateralsuface_cylinder(2,32) == 496\nlateralsuface_cylinder(3,32) == 500\nlateralsuface_cylinder(4,32) == 504\nlateralsuface_cylinder(6,32) == 508\nlateralsuface_cylinder(2,33) == 512\nlateralsuface_cylinder(3,33) == 516\nlateralsuface_cylinder(4,33) == 520\nlateralsuface_cylinder(6,33) ="
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsuface_cylinder(r=3,h=2) == 2*pi*r*r, 'Wrong result'\nassert     lateralsuface_cylinder(r=0,h=0) == 0, 'Wrong result'\nassert     lateralsuface_cylinder(r=0.3,h=0.3) == pi*0.3*0.3, 'Wrong result'\n\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(3,4) == 90\nassert     lateralsuface_cylinder(3,4.5) == 165\nassert     lateralsuface_cylinder(3,0) == 0\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(volume_cube(1)) == 1\nprint(volume_cube(3)) == 27\nprint(volume_cube(4)) == 64\nprint(volume_cube(5)) == 125"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cube(3) == 27, 'Volume of a cube should be 27.'\nassert     volume_cube(2) == 8, 'Volume of a cube should be 8.'\nassert     volume_cube(1) == 1, 'Volume of a cube should be 1.'\nassert     volume_cube(0) == 1, 'Volume of a cube should be 1.'\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n >= 0:\n        return ((n | (n + 1)) & -(n + 1))\n    else:\n        return -(((~n | (~n + 1)) & -(~n + 1)) + 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_bit_set_number(9) == True\neven_bit_set_number(11) == False\neven_bit_set_number(21) == False\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(0b101) == 0b100\nassert     even_bit_set_number(0b1010) == 0b100\nassert     even_bit_set_number(0b10111) == 0b101\nassert     even_bit_set_number(0b11001) == 0b100\nassert     even_bit_set_number(0b11001100) == 0b100\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(15) == 5, 'Should be 5'\nassert     even_bit_set_number(64) == 0, 'Should be 0'\nassert     even_bit_set_number(225) == 10, 'Should be 10'\nassert     even_bit_set_number(256) == 4, 'Should be 4'\nassert     even_bit_set_number(65536) == 256, 'Should be 256'\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n | 0x10)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_bit_set_number(9) == 8\nassert     even_bit_set_number(11) == 10\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_bit_set_number(1) == 1 \nassert even_bit_set_number(2) == 2\nassert even_bit_set_number(4) == 4\nassert even_bit_set_number(8) == 8\nassert even_bit_set_number(10) == 10\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_bit_set_number(0xabcd) == 0\nassert     even_bit_set_number(0x0) == 0\nassert     even_bit_set_number(0x0a0) == 0\nassert     even_bit_set_number(0xffffffff) == 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_list = [(1,2,3), (2,3), (4,5,6), (6,6), (4,4), (4,5)]\nassert check_occurences(test_list) == {(1,2,3):3, (2,3):1, (4,5,6):2, (6,6):1, (4,4):1, (4,5):1}\nassert check_occurences(test_list) == {(1,2,3):3, (2,3):1, (4,5,6):2, (6,6):1, (4,4):1, (4,5):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntest_list = [(1, 2), (3, 4), (5, 6)]\noccurences_test = {}\noccurences_test = check_occurences(test_list)\nassert occurences_test == {(1, 2): 1, (3, 4): 1, (5, 6): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_occurences([(1, 2), (2, 4), (3, 4), (1, 5), (2, 5), (3, 5), (4, 6), (1, 6)]) == {(1, 2): 2, (2, 4): 2, (3, 4): 2, (1, 5): 1, (2, 5): 1, (3, 5): 1, (4, 6): 1, (1, 6): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]) == {('a', 'b', 'c'): 3}\nassert     check_occurences([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]) == {('a', 'b', 'c'): 2}\nassert     check_occurences([('a', 'b', 'c'), ('a', 'b', 'c')]) == {('a', 'b', 'c'): 2}\n\ndef num_occurences(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert check_occurences([(1,2),(2,1),(2,3),(1,3),(2,2)]) == Counter([(1,2),(2,1),(2,3),(1,3),(2,2)]), 'incorrect output'\nprint('Test 1 passed')\n\nassert \nassert check_occurences([(1,2),(2,3),(3,1),(4,4),(5,5),(1,3)]) == Counter([(1,2),(2,3),(3,1),(4,4),(5,5),(1,3)]), 'incorrect output'\nprint('Test 2 passed')\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sort_counted_list(counted_list):\n    '''\n    Write a function that takes in a list of tuples and returns a sorted list of tuples.\n    '''\n    pass"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_occurences([(\"a\",1),(\"a\",2),(\"b\",3)]) == {\"a\":2,\"b\":1}\nassert     check_occurences([(\"a\",1),(\"a\",2),(\"a\",3),(\"b\",1)]) == {\"a\":3,\"b\":1}\nassert     check_occurences([(\"a\",1),(\"a\",2),(\"a\",3),(\"a\",4),(\"b\",1)]) == {\"a\":5,\"b\":1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntest_list = [(0,3),(5,2),(2,1),(5,4),(5,4),(6,6),(5,5)]\nresult = check_occurences(test_list)\nassert result == {(0, 3): 1, (5, 2): 1, (2, 1): 1, (5, 4): 2, (5, 5): 1, (6, 6): 1, (5, 5): 2}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    number_of_substrings('abbba') == 3\n    number_of_substrings('abbbc') == 0\n    number_of_substrings('abbbb') == 1\n    number_of_substrings('abbab') == 1\n    number_of_substrings('abb') == 2\n    number_of_substrings('ab') == 1\n    number_of_substrings('a') == 1\n    number_of_substrings('aaaaaaaaaaaaaaaaa') == 6\n    number_of_substrings('aaaaaaaaaaaaaaaaa') == 6\n    number_of_substrings('aaaaaaaaaaaaaaaaa') == 6\n    number_of_substrings('') == 0\n    number_of_substrings('aa') == 2\n    number_of_substrings('a') == 1\n    number_of_substrings('aa') == 2\n    number_of_substrings('a') == 1\n    number_of_substrings('aa') == 2\n    number_of_substrings('aa') == 2\n    number_of_substrings('a') == 1\n    number_of_substrings('a') == 1\n    number_of_substrings('aaa') == 5\n    number_of_substrings('aaa') == 5\n    number_of_substrings('aaa') == 5\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substrings('ababab') == 7\n    number_of_substring"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_of_substrings('a') == 1 \nassert number_of_substrings('a b') == 2\nassert number_of_substrings('a b') == 2 \nassert number_of_substrings('a') == 1 \nassert number_of_substrings('') == 0 \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings('abcb') == 2\nassert number_of_substrings('abc') == 1\nassert number_of_substrings('asdf') == 0\nassert number_of_substrings('') == 0\nassert number_of_substrings('a') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_of_substrings(\"\") == 0\nassert     number_of_substrings(\"a\") == 1\nassert     number_of_substrings(\"aab\") == 2\nassert     number_of_substrings(\"ab\") == 1\nassert     number_of_substrings(\"aababab\") == 5\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    str = 'geeksforgeeks'\n    print(number_of_substrings(str))\n    assert 4 == number_of_substrings(str)\n\n    str = 'zxczxc'\n    print(number_of_substrings(str))\n    assert 3 == number_of_substrings(str)"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_of_substrings(\"lklk\") == 2\nassert     number_of_substrings(\"\") == 0\nassert     number_of_substrings(\"a\") == 1\nassert     number_of_substrings(\"ab\") == 2\nassert     number_of_substrings(\"abc\") == 3\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef number_of_substrings_2(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_of_substrings('abcd') == 1, '1'\nassert     number_of_substrings('abcd') == 1, '2'\nassert     number_of_substrings('abcd') == 1, '3'\nassert     number_of_substrings('abcd') == 1, '4'\nassert     number_of_substrings('abcd') == 1, '5'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_of_substring(str):\n    '''\n    Write a python function to count the sum of characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(6, 3) == 8\nassert     get_total_number_of_sequences(7, 3) == 21\nassert     get_total_number_of_sequences(5, 4) == 6\nassert     get_total_number_of_sequences(4, 4) == 12\nassert     get_total_number_of_sequences(3, 4) == 12\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(2,2) == 1\nassert     get_total_number_of_sequences(3,3) == 7\nassert     get_total_number_of_sequences(4,4) == 7\nassert     get_total_number_of_sequences(6,6) == 40\nassert     get_total_number_of_sequences(10,10) == 576\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(5,5) == 15\nassert     get_total_number_of_sequences(5,6) == 20\nassert     get_total_number_of_sequences(5,7) == 25\nassert     get_total_number_of_sequences(5,8) == 30\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nget_total_number_of_sequences(3,2) == 3\nget_total_number_of_sequences(8,4) == 9\n\n'''\nTo solve this challenge, you must first solve the two similar problems, which describe how to create and manipulate a series of numbers. Each of these problems can be solved using a similar approach.\n\nCreate a function that takes in an array of integers, and returns a new array that contains the squared values of the original array. \n\nThe function should manipulate its input directly, returning an error if the input is not an array.\n\nFor example:\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(3,1) == 1\nassert     get_total_number_of_sequences(5,1) == 1\nassert     get_total_number_of_sequences(5,2) == 2\nassert     get_total_number_of_sequences(3,3) == 3\n\ndef get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # get the n and m\n    n = n\n    m = m\n    \n    # define the result\n    result = 0\n    \n    # define the previous element\n    prev = 0\n    \n    # define the number of elements in m\n    num_elements = len(str(m))\n    \n    # define a loop for the number of elements in m\n    for i in range(0,num_elements):\n        \n        # define the current element\n        curr = int(str(m)[i])\n        \n        # define the length of the range\n        length = num_elements - i\n        \n        # define a loop for the length of the range\n        for j in range(0,length):\n            \n            # define the number of elements in curr and prev\n            num_elements_curr = len(str(curr))\n            num_elements_prev = len(str(prev))\n            \n            # define the differnce of curr and prev\n            diff = num_elements_curr - num_elements_prev\n            \n            # define the condition\n            if diff > 0:\n                \n                # define the numerator of the result\n                numerator = (2**(diff + 1)) - 1\n                \n                # define the denominator of the result\n                denominator = 2**(diff + 1)\n                \n                # define the result\n                result += int(numerator/denominator)\n            \n            # define the previous element\n            prev = curr\n    \n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(6,5) == 7\nassert     get_total_number_of_sequences(100,10) == 105\nassert     get_total_number_of_sequences(0,5) == 0\nassert     get_total_number_of_sequences(1000000,1000) == 10000001\nassert     get_total_number_of_sequences(2,5) == 10\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(5,7) == 9, 'the given function does not return the correct number of sequences'\nassert     get_total_number_of_sequences(20,10) == 24, 'the given function does not return the correct number of sequences'\nassert     get_total_number_of_sequences(5,4) == 8, 'the given function does not return the correct number of sequences'\nassert     get_total_number_of_sequences(10,3) == 36, 'the given function does not return the correct number of sequences'\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list([1,2,3,4], [1,2,3]) == [1,2,3,2], 'incorrect result'\nassert     replace_list([1,2,3,4], [1,2]) == [1,2,3,4], 'incorrect result'\nassert     replace_list([1,2], [1,2]) == [1,2], 'incorrect result'\nassert     replace_list([], [1]) == [], 'incorrect result'\nassert     replace_list([], []) == [], 'incorrect result'\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert replace_list([1,2,3,4,5], [1,2,3,4,6]) == [1,2,3,4,6]\nassert replace_list([1,2,3], [3,4,5]) == [3,4,5]\nassert replace_list([], [3,4,5]) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([\"a\", \"b\", \"c\"], [\"d\", \"e\"]) == \"a\"\nassert replace_list([\"x\", \"y\", \"z\"], [\"q\", \"r\"]) == \"q\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([1,2,3,4,5],[6,7,8,9]) == [1,2,3,7,8]\nassert     replace_list([1,2,3,4,5],[1,2,3,4]) == [1,2,3,4,5]\nassert     replace_list([1,2,3,4,5,6],[1,2,3,4,5]) == [1,2,3,4,5,6]\nassert     replace_list([1,2,3,4,5],[5,6,7,8]) == [1,2,3,4,5]\nassert     replace_list([1,2,3,4,5],[1,2,3,4]) == [1,2,3,4,5]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([1,2,3],['a','b','c']) == [1,2,3,'a','b','c']\nassert     replace_list(['a','b','c'],[1,2,3]) == ['1','2','3','a','b','c']\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list([1,2,3],    [1,2]) == None\nassert     replace_list([1,2,3,4],    [1,2,3]) == None\nassert     replace_list([1,2,3],    [1,2,3,4]) == None\nassert     replace_list([1,2,3],    []) == None\nassert     replace_list([1,2,3],    [1,2,3,4,5]) == None\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_list([1,2,3,4], [10,11,12,13]) == [1,2,10,11,12,13]\nassert replace_list([10,20,30,40], [1,2,3,4]) == [10,20,30,40,1,2,3,4]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_list(['p', 'r', 'a', 'n'], ['b', 'd', 'f', 'o']) == ['p', 'r', 'a', 'n', 'b', 'd', 'f', 'o']\nassert     replace_list(['p', 'r', 'a', 'n'], ['n', 'a','m', 'i']) == ['p', 'r', 'a', 'n', 'n', 'a','m', 'i']\nassert     replace_list(['p', 'r', 'a', 'n'], ['n', 'a','m', 'i']) == ['p', 'r', 'a', 'n', 'n', 'a','m', 'i']\nassert     replace_list(['p', 'r', 'a', 'n'], ['p', 'r', 'a', 'n', 'o','m']) == ['p', 'r', 'a', 'n', 'p', 'r', 'a', 'n', 'o','m']\nassert     replace_list(['p', 'r', 'a', 'n'], ['p', 'r', 'a', 'n', 'o','m']) == ['p', 'r', 'a', 'n', 'p', 'r', 'a', 'n', 'o','m']\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_list([1,2,3,4],[1,2,3]) == [1,2,3,4], 'Replace list did not work'\n\n'''\nQuestion 2\nGiven a list of ints, return True if the array contains a 2 next to a 2 somewhere.\n'''\ndef has_22(nums):\n    '''\n    Write a function that takes in a list of integers and returns True if there is \n    a 2 next to a 2 somewhere in the array.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3,4,5,6], [1,2,3,7,8,9]) == None, \"incorrect\"\nassert     replace_list([1,2,3,4,5,6], [1,2,3,4]) == None, \"incorrect\"\nassert     replace_list([1,2,3,4,5,6], [1,2,3,4,5,6]) == None, \"incorrect\"\nassert     replace_list([1,2,3,4,5,6], [1,2,3]) == None, \"incorrect\"\nassert     replace_list([1,2,3,4,5,6], [1,2,3,4,5,6,7]) == None, \"incorrect\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_charac('abcde') == 5\nassert     count_charac('abcdea') == 6\nassert     count_charac('ab') == 2\nassert     count_charac('ab') == 2\nassert     count_charac('') == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(count_charac(\"z\"))\nprint(count_charac(\"zzz\"))\nprint(count_charac(\"zzzzzz\"))\nprint(count_charac(\"\"))\n\nprint(\"----------------------------------------------\")\n\ndef count_words(str1):\n    '''\n    Write a function to count the total number of words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_charac('myname') == 9\nassert count_charac('the quick brown fox jumps over the lazy dog') == 20\n\ndef count_charac_2(str1):\n    '''\n    Write a function that will print a dictionary of the unique characters in a string and the number of\n    times they appear.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_charac('cat') == 3\nassert     count_charac('cat1') == 2\nassert     count_charac('a') == 1\nassert     count_charac('') == 0\nassert     count_charac(' ') == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_charac('abcd') == 4\nassert     count_charac('x') == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_charac('abcd') == 4,'should count the number of characters'\n    count_charac('') == 0,'should count the number of characters'\n    count_charac('abcdefgh') == 10,'should count the number of characters'\n    \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for i in range(len(str1)):\n        total_charac += 1\n    return total_charac\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_charac(\"abc\") == 3\nassert     count_charac(\"\") == 0\nassert     count_charac(\"a\") == 1\nassert     count_charac(\"123456789\") == 10\n\n\ndef count_charac_v2(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_charac('python') == 8\nassert     count_charac('python') == 8\nassert     count_charac('python') == 8\nassert     count_charac('python') == 8\n\n\ndef count_words(str1):\n    '''\n    Write a function to count the total number of words in a string.\n    Words are separated by whitespace\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(next_Perfect_Square(4)) # 4\nprint(next_Perfect_Square(7)) # 8\nprint(next_Perfect_Square(9)) # 16\nprint(next_Perfect_Square(16)) # 32\nprint(next_Perfect_Square(27)) # 64\nprint(next_Perfect_Square(32)) # 64\nprint(next_Perfect_Square(49)) # 64\nprint(next_Perfect_Square(50)) # 64\n\n\ndef if_sum_to_n(N): \n    '''\n    Write a python function to find all the divisors of a positive integer and the sum of the divisors is equal to the given integer.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(next_Perfect_Square(4)) == 2\nprint(next_Perfect_Square(12)) == 12\nprint(next_Perfect_Square(25)) == 13\nprint(next_Perfect_Square(54)) == 26\nprint(next_Perfect_Square(77)) == 40\nprint(next_Perfect_Square(76)) == 52\n\n\ndef is_power_of_two(n):\n    '''\n    Write a python function to find if a given number is a power of two.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nnext_Perfect_Square(1) == 1\nassert next_Perfect_Square(1) == 1\nassert next_Perfect_Square(2) == 3\nassert next_Perfect_Square(3) == 4\nassert next_Perfect_Square(4) == 5\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnext_Perfect_Square(1) == 1\nassert next_Perfect_Square(2) == 3\nassert next_Perfect_Square(3) == 4\nassert next_Perfect_Square(4) == 5\nassert next_Perfect_Square(5) == 6\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert    next_Perfect_Square(9) == 10\nassert    next_Perfect_Square(15) == 21\nassert    next_Perfect_Square(29) == 30\nassert    next_Perfect_Square(30) == 32\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_Perfect_Square(0) == 1, 'Wrong Answer, Check your logic!'\nassert next_Perfect_Square(3) == 4, 'Wrong Answer, Check your logic!'\nassert next_Perfect_Square(5) == 6, 'Wrong Answer, Check your logic!'\nassert next_Perfect_Square(7) == 8, 'Wrong Answer, Check your logic!'\nassert next_Perfect_Square(8) == 9, 'Wrong Answer, Check your logic!'\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('The output for next_Perfect_Square function is') \nprint(next_Perfect_Square(25))\nprint('The output for next_Perfect_Square function is') \nprint(next_Perfect_Square(36))\nprint('The output for next_Perfect_Square function is') \nprint(next_Perfect_Square(25))\nprint('The output for next_Perfect_Square function is') \nprint(next_Perfect_Square(36))\n\nprint('\\n')\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(15) == 22\n\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # write your code here\n    squares = [int(math.sqrt(x)) for x in range(1, N+1)]\n    for i in range(len(squares)-1, 0, -1):\n        if squares[i] * squares[i] > N:\n            return squares[i-1] * squares[i-1]\n    return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(2) == 1\nassert     next_Perfect_Square(3) == 2\nassert     next_Perfect_Square(10) == 5\nassert     next_Perfect_Square(11) == 11\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_Perfect_Square(4) == 5, \"Should return 5\"\nassert next_Perfect_Square(9) == 15, \"Should return 15\"\nassert next_Perfect_Square(1) == 2, \"Should return 2\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nif __name__ == \"__main__\":\n    arr = [1, 2, 4, 4, 5, 7, 8, 9, 5]\n    assert max_sum(arr) == 13\n    \n    arr = [-9, -9, -9, 0, 1, 2]\n    assert max_sum(arr) == 0\n\n    arr = [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10]\n    assert max_sum(arr) == 31\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('check passed.')"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\narr = [5, 7, -5, 7, 8]\nprint(max_sum(arr))\n\ndef max_sub(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a subsequence for the given array, where a subsequence is increasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_subarray_sum(arr, start, end):\n    '''\n    Write a function that takes an array of n positive integers and \n    returns the maximum sum of any contiguous subarray of the input array.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum([10,20,10,10]) == 30\nassert max_sum([10,20,10,10]) == 30\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum([]) == 0 \nassert     max_sum([3,4,-2,1,5]) == 8\nassert     max_sum([-1, 4, 2, 3, -2]) == 10\nassert     max_sum([-8, -1, 3, 4, -5, 5, 8, 9]) == 13\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum([1, 3, 2, 4, 1, 5]) == 9, 'Test 1 Failed'\nassert     max_sum([0, 1, 3, 8, -1, 4, 2, 7]) == 10, 'Test 2 Failed'\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (babylonian_squareroot(4) == 2), '\\tFailure: babylonian_squareroot(4)'\nassert     (babylonian_squareroot(6) == 3), '\\tFailure: babylonian_squareroot(6)'\nassert     (babylonian_squareroot(9) == 3), '\\tFailure: babylonian_squareroot(9)'\nassert     (babylonian_squareroot(12) == 4), '\\tFailure: babylonian_squareroot(12)'\nassert     (babylonian_squareroot(20) == 5), '\\tFailure: babylonian_squareroot(20)'\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(0) == 0.0\nassert     babylonian_squareroot(1) == 1.0\nassert     babylonian_squareroot(2) == 1.4142135623730951\nassert     babylonian_squareroot(3) == 1.7320508075688772\nassert     babylonian_squareroot(4) == 2.23606797749979\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(0) == 0, 'Wrong value'\nassert     babylonian_squareroot(1) == 1, 'Wrong value'\nassert     babylonian_squareroot(2) == 1.7320508075688772, 'Wrong value'\nassert     babylonian_squareroot(5) == 2, 'Wrong value'\nassert     babylonian_squareroot(10) == 3, 'Wrong value'\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     babylonian_squareroot(1) == 0\nassert     babylonian_squareroot(2) == 1\nassert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(8) == 2\nassert     babylonian_squareroot(16) == 2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     babylonian_squareroot(2) == 1.0, \"For 2, we get 1.0\"\nassert     babylonian_squareroot(1) == 1.0, \"For 1, we get 1.0\"\nassert     babylonian_squareroot(0) == 0.0, \"For 0, we get 0.0\"\nassert     babylonian_squareroot(5) == 2.0, \"For 5, we get 2.0\"\nassert     babylonian_squareroot(11) == 2.0, \"For 11, we get 2.0\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     babylonian_squareroot(0) == 0\nassert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(2) == 1.4142135623730951\nassert     babylonian_squareroot(3) == 1.7320508075688772\nassert     babylonian_squareroot(4) == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lps(\"\") == 0, \"Empty String\"\nassert     lps(\"a\") == 1, \"Single Character\"\nassert     lps(\"abbbbb\") == 3, \"Two Characters\"\nassert     lps(\"bbbbbabbb\") == 6, \"Three Characters\"\nassert     lps(\"babbbbaa\") == 6, \"Two Characters\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lps('aab') == 2\nassert     lps('aabab') == 4\nassert     lps('aaba') == 3\nassert     lps('aba') == 1\nassert     lps('abcd') == 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nlps('abba') == 4\n\nlps('cbbd') == 3\n\nlps('cccbdb') == 3\n\nlps('abac') == 2\n\nlps('abccc') == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    lps('cbbd') == 3\n    lps('cc') == 2\n    lps('babad') == 5\n    lps('ab') == 2\n    lps('a') == 1\n    lps('a') == 1\n    lps('abcdcba') == 5\n    lps('aba') == 3\n    lps('abcdefghijklmnopqrstuvwxyz') == 26\n    lps('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert lps(\"cbbd\") == 3\nassert lps(\"a\") == 1\nassert lps(\"\") == 0\nassert lps(\"aaaa\") == 4\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef lps1(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1:\n        return 1\n    if str[0]!= str[-1]:\n        return max(lps1(str[1:]), lps1(str[:-1]))\n    else:\n        return lps1(str[1:-1]) + 2"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lps(\"abcdcba\") == 3\nassert     lps(\"cbdcba\") == 4\nassert     lps(\"aacacacac\") == 5\nassert     lps(\"aacacacac\") == 6\nassert     lps(\"acbcabdccacdb\") == 10\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef palindrome_partitioning(str): \n    '''\n    Given a string S, write a function that returns an array A of all the possible palindrome partitioning of S. \n    The strings in A are of the form S = A + B, where A and B are palindrome. \n    The returned array A should be in lexicographic order.\n\n    Example :\n    Input : \"geeksforgeeks\"\n    Output : [['', 'geeks', 'fors', 'geeks'], ['', 'geeks', 'geek', 'fors'],\n    ['', 'geek', 'geek', 'fors'], ['', 'geeks', 'fors', 'geeks'], ['', 'geek', 'fors', 'geek'], ['', 'geek', 'fors', 'geek']]\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not lps('cbbd') == 0\nassert lps('abbcda') == 7\nassert lps('aaabbcddd') == 6\nassert lps('baababaababaabababababa') == 9\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lps('aabcbba') == 6\nassert     lps('abbcb') == 5\nassert     lps('a') == 1\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     harmonic_sum(0) == 0, \"harmonic_sum(0) == 0\"\nassert     harmonic_sum(1) == 1, \"harmonic_sum(1) == 1\"\nassert     harmonic_sum(2) == 1, \"harmonic_sum(2) == 1\"\nassert     harmonic_sum(3) == 2, \"harmonic_sum(3) == 2\"\nassert     harmonic_sum(4) == 3, \"harmonic_sum(4) == 3\"\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    harmonic_sum(1) == 1\n    harmonic_sum(2) == 1\n    harmonic_sum(3) == 2\n    harmonic_sum(4) == 2\n    harmonic_sum(5) == 3\n    harmonic_sum(6) == 4\n    harmonic_sum(7) == 5\n    harmonic_sum(8) == 6\n    harmonic_sum(9) == 7\n    harmonic_sum(10) == 8\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     harmonic_sum(4) == 3\nassert     harmonic_sum(10) == 55\n\ndef main():\n    '''\n    Tests:\n        n = 4:    3\n        n = 10:    55\n        n = 100:    6640\n    '''\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nharmonic_sum(0) == 0\nharmonic_sum(1) == 1\nharmonic_sum(2) == 2\nharmonic_sum(3) == 3\nharmonic_sum(4) == 5\nharmonic_sum(5) == 8\nharmonic_sum(6) == 14\nharmonic_sum(7) == 21\nharmonic_sum(8) == 28\nharmonic_sum(9) == 36\nharmonic_sum(10) == 45\nharmonic_sum(20) == 590\nharmonic_sum(30) == 645\nharmonic_sum(40) == 840\nharmonic_sum(50) == 1020\nharmonic_sum(100) == 1240\nharmonic_sum(200) == 1856\nharmonic_sum(300) == 2700\nharmonic_sum(400) == 3840\nharmonic_sum(500) == 5040\nharmonic_sum(600) == 6120\nharmonic_sum(700) == 6960\nharmonic_sum(800) == 7800\nharmonic_sum(900) == 8800\nharmonic_sum(1000) == 9000\nharmonic_sum(2000) == 12180\nharmonic_sum(3000) == 16350\nharmonic_sum(4000) == 20400\nharmonic_sum(5000) == 25240\nharmonic_sum(6000) == 30240\nharmonic_sum(7000) == 37160\nharmonic_sum(8000) == 43760\nharmonic_sum(9000) == 51280\nharmonic_sum(10000) == 669600\nharmonic_sum(100000) == 8292640\nharmonic_sum(1000000) == 107410595172800000\nharmonic_sum(10000000) == 11438067482972944309516160\nharmonic_sum(100000000) == 11438067482972944309516160\nharmonic_sum(10000000000) == 11438067482972944309516160\nharmonic_sum(100000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(10000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000) == 11438067482972944309516160\nharmonic_sum(10000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(100000000) == 11438067482972944309516160\nharmonic_sum(1000000) == 11438067482972944309516160\nharmonic_sum(1) == 11438067482972944309516160\nharmonic_sum(10) == 11438067482972944309516160\nharmonic_sum(100) == 11438067482972944309516160\nharmonic_sum(1000) == 11438067482972944309516160\nharmonic_sum(10000) == 11438067482972944309516160\nharmonic_sum(100000) == 11438067482972944309516160\nharmonic_sum(1000000) == 11438067482972944309516160\nharmonic_sum(10000000) == 11438067482972944309516160\nharmonic_sum(100000000) == 11438067482972944309516160\nharmonic_sum(10000000000) == 11438067482972944309516160\nharmonic_sum(100000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(10000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000) == 11438067482972944309516160\nharmonic_sum(10000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(100000000) == 11438067482972944309516160\nharmonic_sum(1000000) == 11438067482972944309516160\nharmonic_sum(1) == 11438067482972944309516160\nharmonic_sum(10) == 11438067482972944309516160\nharmonic_sum(100) == 11438067482972944309516160\nharmonic_sum(1000) == 11438067482972944309516160\nharmonic_sum(10000) == 11438067482972944309516160\nharmonic_sum(100000) == 11438067482972944309516160\nharmonic_sum(1000000) == 11438067482972944309516160\nharmonic_sum(10000000) == 11438067482972944309516160\nharmonic_sum(100000000) == 11438067482972944309516160\nharmonic_sum(10000000000) == 11438067482972944309516160\nharmonic_sum(100000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(10000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000000) == 11438067482972944309516160\nharmonic_sum(100000000000000) == 11438067482972944309516160\nharmonic_sum(10000000000000) == 11438067482972944309516160\nharmonic_sum(1000000000000) == 11438067482972944309516160\nharmonic_sum(100000000) == 11438067482972944309516160\nharmonic_sum(1000000) == 11438067482972944309516160\nharmonic_sum(1) == 11438067482972944309516160\nharmonic_sum(10) == 11438067482972944309516160\nharmonic_sum(100) == 11438067482972944309516160\nharmonic_sum(1000) == 11438067482972944309516160\nharmonic_sum(10000) == 11438067482972944309516160\nharmonic_sum(100000"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nharmonic_sum(4) == 6\nharmonic_sum(10) == 55\nharmonic_sum(30) == 8820\nharmonic_sum(50) == 17711\nharmonic_sum(100) == 35837\nharmonic_sum(0) == 0\nharmonic_sum(-4) == -4\nharmonic_sum(-10) == -50\nharmonic_sum(-30) == -884200\nharmonic_sum(-50) == -177111\nharmonic_sum(-100) == -35837\nharmonic_sum(-100) == -0\nharmonic_sum(-1000) == -0\nharmonic_sum(1000000) == 524857818721\nharmonic_sum(100000000) == 5249803196563104815840123932340123802349678741806642385646523190161887922742537421246398936519276024751236591909895621175459621168962760456163759041166827230822986301292494407033056288445562876262916008772745409422784633711408429246579229402950666628552266607323154820220305722286883160594278150798510684775330020884898173655409929280543754126315122708851228451347278055115844048265351650291788461459249262598298058460403425288499469731698661678175944803089232455333198455584396313138132585246865762511531627800571716092813420257434537652823301737604560943681440782730925362947853036761324992581235949733263825423067366529053037612819\nharmonic_sum(10000000) == 5249803196563104815840123932340123802349678741806642385646523190161887922742537421246398936519276024751236591909895621175459621168962760456163759041166827230822986301292494407033056288445562876262916008772745409422784633711408429246579229402950666628552266607323154820220305722286883160594278150798510684775330020884898173655409929280543754126315122708851228451347278055115844048265351650291788461459249262598298058460403425288499469731698661678175944803089232455333198455584396313138132585246865762511531627800571716092813420257434537652823301737604560943681440782730925362947853036761324992581235949733263825423067366529053037612819\nharmonic_sum(1000000000000) == 524857818721\nharmonic_sum(1000000000000000) == 5249803196563104815840123932340123802349678741806642385646523190161887922742537421246398936519276024751236591909895621175459621168962760456163759041166827230822986301292494407033056288445562876262916008772745409422784633711408429246579229402950666628552266607323154820220305722286883160594278150798510684775330020884898173655409929280543754126315122708851228451347278055115844048265351650291788461459249262598298058460403425288499469731698661678175944803089232455333198455584396313138132585246865762511531627800571716092813420257434537652823301737604560943681440782730925362947853036761324992581235949733263825423067366529053037612819\nharmonic_sum(10000000000000000) == 524857818721\nharmonic_sum(100000000000000000) == 5249803196563104815840123932340123802349678741806642385646523190161887922742537421246398936519276024751236591909895621175459621168962760456163759041166827230822986301292494407033056288445562876262916008772745409422784633711408429246579229402950666628552266607323154820220305722286883160594278150798510684775330020884898173655409929280543754126315122708851228451347278055115844048265351650291788461459249262598298058460403425288499469731698661678175944803089232455333198455584396313138132585246865762511531627800571716092813420257434537652823301737604560943681440782730925362947853036761324992581235949733263825423067366529053037612819\nharmonic_sum(1000000000000000) == 524857818721\nharmonic_sum(100000000000000) == 5249803196563104815840123932340123802349678741806642385646523190161887922742537421246398936519276024751236591909895621175459621168962760456163759041166827230822986301292494407033056288445562876262916008772745409422784633711408429246579229402950666628552266607323154820220305722286883160594278150798510684775330020884898173655409929280543754126315122708851228451347278055115844048265351650291788461459249262598298058460403425288499469731698661678175944803089232455333198455584396313138132585246865762511531627800571716092813420257434537652823301737604560943681440782730925362947853036761324992581235949733263825423067366529053037612819\nharmonic_sum(100000000000000000) == 524857818721\nharmonic_sum(1000000000000) == 52498031965631048158401239323401238023496787418066423856465231901618879227425374212463989365192760247512365919098956211754596211689627604561637590411668272308229863012924944070330562884455628762629160087727454094227846337114084292465792294029506666285522666073231548202203057222868831605942781507985106847753300208848981736554099292805437541263151227088512284513472780551158440482653516502917884614592492625982980584604034252"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(5) == 4.2\nassert     harmonic_sum(10) == 12.5\nassert     harmonic_sum(20) == 25.0\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection_array([1, 2, 2, 1], [2, 2]) == [2, 2], \"Test case 1 failed\"\nassert     intersection_array([2, 2, 1, 2], [2, 2]) == [2, 2], \"Test case 2 failed\"\nassert     intersection_array([1, 2, 3, 4], [2, 2, 4]) == [2, 2], \"Test case 3 failed\"\nassert     intersection_array([1, 2, 3, 4], [1, 4]) == [1, 4], \"Test case 4 failed\"\n\ndef union_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the union of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection_array([1,2,2,1,3], [2,2,3]) == set([2])\nassert intersection_array([1,2,2,1,3], [2,2,4]) == set([2])\nassert intersection_array([1,2,2,1,3], [2,3]) == set([2])\nassert intersection_array([1,2,2,1,3], [3]) == set([3])\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection_array([1,2,3],(3,2,1)) ==     [2]\nassert     intersection_array([1,2,3],(2,1,3)) ==     [2]\nassert     intersection_array([2,4,1,3,2],(2,4,1,3,5,2)) ==     [2]\nassert     intersection_array([2,4,1,3,2],(1,4,1,2,3)) ==     []\nassert     intersection_array([1,2,3],(3,4,1,2,3)) ==     []"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection_array([1,2,3], [2,3,4]) == 2, \"Your solution does not work\"\nassert intersection_array([1,2,3], [3,4,5]) == -1, \"Your solution does not work\"\nassert intersection_array([4,5,6], [1,2,3]) == -1, \"Your solution does not work\"\nassert intersection_array([], [1,2,3]) == -1, \"Your solution does not work\"\nassert intersection_array([1,2,3], []) == -1, \"Your solution does not work\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,3,4], [5,6,7,8]) == [5,6]\nassert     intersection_array([1,2,3,4,5], [6,7,8,9,10]) == []\nassert     intersection_array([1,2,3,4,5], [10]) == []\n\ndef intersection_array_by_using_set(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection_array([1,2,3],[1,2,3]) ==     [1,2,3], \"There is no intersection\"\nassert intersection_array([1,2,3],[1,2,4]) ==     [1,2], \"There is no intersection\"\nassert intersection_array([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) ==     [1,2,3,4,5,6,7,8,9], \"There is no intersection\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     intersection_array([1,2,2,3,4,4], [2,3,4,6,8,9]) == 2, 'error 1'\nassert     intersection_array([1,2,2,3,4,4], [2,3,4,6,8,9,10]) == 2, 'error 2'\nassert     intersection_array([1,2,2,3,4,4], [2,3,4,6,8,9,10,11]) == 2, 'error 3'\nassert     intersection_array([1,2,2,3,4,4,5], [2,3,4,6,8,9,10]) == 4, 'error 4'\nassert     intersection_array([1,2,2,3,4,4,5], [2,3,4,6,8,9,10,11,12]) == 4, 'error 5'\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and returns the maximum occurence of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_X([1,1,1,2,2,2,2], 1) == 3\nassert count_X([1,1,1,2,2,2,2], 2) == 2"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    count_X([1, 2, 3], 1) == 2\n    count_X([1, 2, 3], 4) == 0\n    count_X([1, 2, 3], 0) == 3\n    count_X([1, 2, 3], -1) == 0\n    count_X(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'f') == 6\n    count_X(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'd') == 2\n    count_X(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'a') == 1\n    count_X(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'z') == 0\n    count_X([1, 2, 3, 4], 3) == 2\n    count_X([1, 2, 3, 4], 4) == 1\n    count_X([1, 2, 3, 4], 1) == 4\n    count_X([1, 2, 3, 4], 0) == 3\n    count_X([1, 2, 3, 4], 5) == 0\n    count_X([1, 2, 3, 4], -1) == 4\n    count_X([1, 2, 3, 4], 'z') == 0\n    count_X([1, 2, 3, 4], 3.4) == 0\n    count_X([1, 2, 3, 4], -3.4) == 2\n\nprint('All tests passed!')"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWrite a python function that takes in a list of tuples,\nfinds the length of the longest list of tuples,\nand returns that length.\n'''\ndef find_longest_list(list_of_tuples):\n    '''\n    Write a python function that takes in a list of tuples and returns the length of the longest list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_X((1,2,3,3,4), 3) == 1\nassert count_X((1,2,3,3,4), 4) == 0\nassert count_X((1,2,3,3,4), 1) == 4\nassert count_X((1,2,3,3,4), 5) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_X(('abc','xyz'), 'x') == 2\nassert     count_X(('abc','xyz'), 'z') == 0\nassert     count_X(('abc','xyz'), 'abc') == 1\nassert     count_X(('abc','xyz'), 'abc') == 1\nassert     count_X(('abc','xyz'), 'xyz') == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_X((1,2,3,4), 1) == 2, \"it should return 2\"\nassert     count_X((1,2,3,4), 0) == 0, \"it should return 0\"\nassert     count_X((1,2,3,4,1), 0) == 0, \"it should return 0\"\nassert     count_X((1,2,3,4,1), 1) == 4, \"it should return 4\"\n\ndef count_X_1(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    Your function should return the index of the occurence of the element.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes all instances of the element from the list and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([], 1) == []\nassert insert_element([1, 2, 3], 1) == [1, 1, 2, 3]\nassert insert_element([1, 2, 3], 5) == [1, 5, 2, 3]\nassert insert_element([1, 2, 3], 4) == [1, 4, 2, 3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     insert_element([3,4,5],3) == [3,4,5,3,4,5]\nassert     insert_element([3,4,5],0) == [0,3,4,5,3,4,5]\nassert     insert_element([3,4,5],4) == [3,4,4,5,3,4,5]\nassert     insert_element([3,4,5],1) == [1,3,4,4,5,3,4,5]\nassert     insert_element([3,4,5],6) == [3,4,5,3,4,5,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"Test passed\")\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     insert_element([],5) == [5]\nassert     insert_element([5],5) == [5,5]\nassert     insert_element([5,5],5) == [5,5,5]\nassert     insert_element([5,5,5],5) == [5,5,5,5]\nassert     insert_element([5,5,5,5],5) == [5,5,5,5,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([1, 2, 3], 'a') == ['a', 1, 2, 3]\nassert     insert_element([], 'a') == ['a']\nassert     insert_element([1, 2, 3], 'b') == ['b', 1, 2, 3]\nassert     insert_element([1, 2, 3], 2) == ['1', '2', '3', 2]\nassert     insert_element([1, 2, 3], 3) == ['1', '2', '3', 3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     insert_element([],1) == [1]\nassert     insert_element([1],1) == [1,1]\nassert     insert_element([1,2],1) == [1,2,1]\nassert     insert_element([1,2,3],1) == [1,1,2,3]\nassert     insert_element([1,2,3],5) == [5,1,2,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     insert_element([1,2,3,4],2) == [1,2,3,4,2,3,4]\nassert     insert_element([1,2,3,4],1) == [1,1,2,3,4,3,4]\nassert     insert_element([1,2,3,4],7) == [1,2,3,4,7,1,2,3,4]\nassert     insert_element([1,2,3,4],0) == [0,1,2,3,4,1,2,3,4]\nassert     insert_element([1,2,3,4],4) == [1,2,3,4,4,1,2,3,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert([1, 2]) == (complex(1, 2), '01 + 02i')\nassert     convert([-1, -2]) == (complex(-1, -2), '-01 + -02i')\nassert     convert([1, 2j]) == (complex(1, 2), '01 + 02i')\nassert     convert([1, -2j]) == (complex(1, -2), '01 + -02i')\nassert     convert([-1, -2j]) == (complex(-1, -2), '-01 + -02i')\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert(complex(1, 2)) == (1, 2, 0)\nassert     convert(complex(2, 2)) == (2, 2, pi/2)\nassert     convert(complex(0, -1)) == (0, -1, pi/2)\nassert     convert(complex(-1, -1)) == (-1, -1, pi/2)\nassert     convert(complex(-1, 0)) == (-1, 0, pi/2)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert([1,2,3]) == (1,2), \"First test\"\nassert     convert([0,0,0]) == (0,0), \"Second test\"\nassert     convert([1,1,1]) == (1,pi), \"Third test\"\nassert     convert([-1,-1,-1]) == (-1,pi), \"Fourth test\"\nassert     convert([-1,1,1]) == (1,3.141592653589793), \"Fifth test\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert([complex(-1, 1), complex(-1, -1), complex(0, 1), complex(0, -1), complex(1, 1)]) \nassert     convert([complex(1, 1), complex(1, -1), complex(0, -1), complex(0, -1), complex(1, 1)]) \nassert     convert([complex(1, 1), complex(1, -1), complex(1, -1), complex(1, -1), complex(1, 1)]) \nassert     convert([complex(0, 0), complex(0, 0), complex(0, 0), complex(0, 0), complex(0, 0)]) \nassert     convert([complex(1, 0), complex(1, 0), complex(0, 0), complex(0, 0), complex(1, 0)]) \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert({\"numbers\": (1+2j), \"base\": 2}) == (2.0, 1.0, 1)\n\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef convert1(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert([1+1j, 3+4j, -5-6j]) == [[1.41421 + 1.41421j, 3.0 + 4.0j, -5.0 - 6.0j]]\nassert     convert([1+1j, 3+4j, -5-6j, 3+4j]) == [[1.41421 + 1.41421j, 3.0 + 4.0j, -5.0 - 6.0j, 3.41421 + 3.41421j]]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert([1,2,3]) == (1,2,3), \"wrong\"\nassert    convert([3,0,3]) == (3,0,3), \"wrong\"\nassert    convert([0,2,3]) == (0,2,3), \"wrong\"\nassert    convert([3,0,3]) == (3,0,3), \"wrong\"\nassert    convert([-3,0,3]) == (0,0,3), \"wrong\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count_integer([1,2,3,4,5,6,7,8]) == 8, \"1\"\n    count_integer([1,2,3,4,5,6,7,8,9,10,11,12]) == 11, \"2\"\n    count_integer([]) == 0, \"3\"\n    count_integer([1,2,3,4,5,6,7,8,9]) == 10, \"4\"\n\ndef count_odd(list2):\n    '''\n    Write a python function that returns the number of odd elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_integer([1,2,3]) == 3\nassert count_integer([]) == 0\nassert count_integer([1,2,3,4,5,6]) == 5\nassert count_integer([-1,-2,-3,0]) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]) == 64\n\nassert     count_integer([100, 'ab', 1000, -1, True, False, None, -2, -0, -.05, -1.01, -100, 'a','',' ', 1]) == 4\n\nassert count_integer([100, 'ab', 1000, -1, True, False, None, -2, -0, -.05, -1.01, -100, 'a','',' ', 1]) == 6\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_integer([10,1,1,2,3,3,3,4,5,6]) == 8, \"Test Failed\"\nassert count_integer([10,11,12,13,14,15,16,17,18,19]) == 7, \"Test Failed\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([]) == 0\nassert     count_integer([2]) == 1\nassert     count_integer([2, 4, 6, 8]) == 4\nassert count_integer([1.2]) == 0\nassert count_integer([1, 2, 3, 4]) == 4\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9,10]) == 10, \"Should return 10\"\nassert count_integer([]) == 0, \"Should return 0\"\nassert count_integer([-1,-2,4]) == 3, \"Should return 3\"\nassert count_integer([10,20,30,40]) == 4, \"Should return 4\"\nassert count_integer([-10,-2,0,1,9,10,21,22,30]) == 6, \"Should return 6\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_integer([3,2,4,5,2,3,2,2,1,5,3,2,4,5,1,2,3,1,2,3,1,2,2,2,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5,3,2,1,2,1,2,3,1,2,2,2,1,5"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_integer([]) == 0\nassert     count_integer([1]) == 1\nassert     count_integer([1, 2]) == 2\nassert     count_integer([2, 1]) == 1\nassert     count_integer([1, 1, 1, 1, 1]) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_integer([1,2,3,4,5,6,7,8,9,10]) == 10\nassert count_integer([1,2,3,4,5,6,7,8,9,10,9]) == 11\nassert count_integer([1,2,3,4,5,6,7,8,9,10,11]) == 11\nassert count_integer([1,2,3,4,5,6,7,8,9,10,10]) == 11\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([1,2], 0) == []\nassert     combinations_colors([1,2], 1) == [(1,), (2,)]\nassert     combinations_colors([1,2], 2) == [(1, 2), (2, 1)]\nassert     combinations_colors([1,2], 3) == [(1, 2, 1), (1, 2, 2), (1, 2, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3)]\nassert     combinations_colors([1,2,3,4], 2) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [\n        (1,2),\n        (1,3),\n        (2,3),\n        (1,2,3)\n        ]\nassert     combinations_colors([1,2,3], 3) == [\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),\n        (1,2,3),"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors([1,2,3], 3) == [(1,2,3), (1,3,2), (2,1,3), (2,3,1), (3,1,2), (3,2,1)]\nassert     combinations_colors(['a','b','c'], 2) == ['ab', 'ac', 'bc']\nassert     combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]\nassert     combinations_colors([1,2,3], 4) == [(1,2,3), (1,3,2), (2,1,3), (2,3,1), (3,1,2), (3,2,1)]\nassert     combinations_colors([1,2,3,4,5,6], 4) == [(1,2,3,4), (1,2,3,5), (1,2,3,6), (1,2,4,5), (1,2,4,6), (1,2,5,6), (1,3,4,5), (1,3,4,6), (1,3,5,6), (1,4,5,6), (2,3,4,5), (2,3,4,6), (2,3,5,6), (2,4,5,6), (3,4,5,6), (1,3,4,5,6)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncombinations_colors([1,2,3,4], 2) == [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]\n\ndef k_groups(k, n):\n    '''\n    Write a function that takes in an integer k and an integer n, and generates all combinations of length n, where each combination contains k different elements.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_colors([0,1,2], 2) == [[(0, 0), (0, 1)], [(0, 0), (0, 2)], [(0, 1), (0, 2)], [(1, 0), (1, 2)], [(2, 0), (2, 1)], [(2, 0), (2, 2)], [(2, 1), (2, 2)]]\n\ndef print_combinations(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncombinations_colors([1, 2, 3, 4], 2) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nassert \ncombinations_colors([1, 2, 3, 4], 3) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\nassert \ncombinations_colors([1, 2, 3, 4], 4) == [(1, 2, 3, 4)]\nassert \ncombinations_colors([1, 2, 3, 4, 5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\nassert \ncombinations_colors([1, 2, 3, 4, 5], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1, 2, 3], 0) == []\nassert     combinations_colors([1, 2, 3], 1) == [(1,), (2,), (3,)]\nassert     combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)]\nassert     combinations_colors([1, 2, 3], 3) == [(1, 2, 3)]\nassert     combinations_colors([1, 2, 3], 4) == [(1, 2, 3, 4)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1, 2, 3, 4], 2) == \n    [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nassert     combinations_colors([1, 2, 3, 4], 3) == \n    [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\nassert     combinations_colors([1, 2, 3, 4], 4) == \n    [(1, 2, 3, 4)]\nassert     combinations_colors([1, 2, 3, 4], 5) == \n    []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors(['foo', 'bar', 'baz'], 2) == [[('foo', 'bar'), ('bar', 'foo'), ('foo', 'baz'), ('baz', 'foo'), ('bar', 'foo', 'bar'), ('bar', 'baz'), ('baz', 'bar', 'bar'), ('bar', 'bar', 'baz')], [('foo', 'bar', 'baz'), ('foo', 'bar', 'bar', 'foo'), ('bar', 'foo', 'bar', 'baz'), ('foo', 'baz', 'bar'), ('bar', 'bar', 'bar', 'baz'), ('baz', 'bar', 'bar', 'foo'), ('bar', 'bar', 'bar', 'foo', 'baz'), ('foo', 'baz', 'bar', 'bar'), ('foo', 'baz', 'bar', 'baz'), ('bar', 'foo', 'baz', 'bar'), ('bar', 'bar', 'foo', 'bar'), ('foo', 'bar', 'foo', 'bar', 'baz'), ('foo', 'bar', 'bar', 'bar', 'baz')]]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_colors([1, 2, 3, 4, 5], 5) == [(1, 2, 3, 4, 5), (1, 2, 3, 5, 4), (1, 2, 4, 3, 5), (1, 2, 4, 5, 3), (1, 3, 2, 4, 5), (1, 3, 2, 5, 4), (1, 3, 4, 2, 5), (1, 3, 4, 5, 2), (1, 4, 2, 3, 5), (1, 4, 2, 5, 3), (1, 4, 3, 2, 5), (1, 4, 3, 5, 2), (2, 1, 3, 4, 5), (2, 1, 3, 5, 4), (2, 1, 4, 3, 5), (2, 1, 4, 5, 3), (2, 1, 5, 3, 4), (2, 3, 1, 4, 5), (2, 3, 1, 5, 4), (2, 3, 4, 1, 5), (2, 3, 4, 5, 1), (2, 3, 5, 1, 4), (2, 4, 1, 3, 5), (2, 4, 1, 5, 3), (2, 4, 3, 1, 5), (2, 4, 3, 5, 1), (2, 4, 5, 1, 3), (2, 5, 1, 3, 4), (2, 5, 1, 4, 3), (2, 5, 3, 1, 4), (3, 1, 2, 4, 5), (3, 1, 2, 5, 4), (3, 1, 4, 2, 5), (3, 1, 4, 5, 2), (3, 1, 5, 2, 4), (3, 2, 1, 4, 5), (3, 2, 1, 5, 4), (3, 2, 4, 1, 5), (3, 2, 4, 5, 1), (3, 2, 5, 1, 4), (3, 4, 1, 2, 5), (3, 4, 1, 5, 2), (3, 4, 2, 1, 5), (3, 4, 2, 5, 1), (3, 4, 5, 1, 2), (3, 5, 1, 2, 4), (3, 5, 1, 4, 2), (3, 5, 2, 1, 4), (4, 1, 2, 3, 5), (4, 1, 2, 5, 3), (4, 1, 3, 2, 5), (4, 1, 3, 5, 2), (4, 1, 5, 2, 3), (4, 2, 1, 3, 5), (4, 2, 1, 5, 3), (4, 2, 3, 1, 5), (4, 2, 3, 5, 1), (4, 2, 5, 1, 3), (4, 3, 1, 2, 5), (4, 3, 1, 5, 2), (4, 3, 2, 1, 5), (4, 3, 2, 5, 1), (4, 3, 5, 1, 2), (4, 5, 1, 2, 3), (4, 5, 1, 3, 2), (4, 5, 2, 1, 3), (5, 1, 2, 3, 4), (5, 1, 2, 4, 3), (5, 1, 3, 2, 4), (5, 1, 3, 4, 2), (5, 1, 4, 2, 3), (5, 2, 1, 3, 4), (5, 2, 1, 4, 3), (5, 2, 3, 1, 4), (5, 2, 3, 4, 1), (5, 2, 4, 1, 3), (5, 3, 1, 2, 4), (5, 3, 1, 4, 2), (5, 3, 2, 1, 4), (5, 3, 2, 4, 1), (5, 3, 4, 1, 2), (5, 4, 1, 2, 3), (5, 4, 1, 3, 2), (5, 4, 2, 1, 3), (5, 4, 2, 3, 1), (5, 4, 3, 1, 2), (5, 5, 1, 2, 3), (5, 5, 1, 3, 2), (5, 5, 2, 1, 3), (6, 1, 2, 3, 4, 5), (6, 1, 2, 4, 3, 5), (6, 1, 3, 2, 4, 5), (6, 1, 3, 5, 4, 2), (6, 1, 4, 2, 3, 5), (6, 1, 4, 5, 3, 2), (6, 2, 1, 3, 4, 5), (6, 2, 1, 5, 4, 3), (6, 2, 3, 1, 4, 5), (6, 2, 3, 5, 4, 1), (6, 2, 4, 1, 3, 5), (6, 2, 4, 5, 3, 1), (6, 2, 5, 1, 3, 4), (6, 3, 1, 2, 4, 5), (6, 3, 1, 5, 4, 2), (6, 3, 2, 1, 4, 5), (6, 3, 2, 5, 4, 1), (6, 3, 4, 1, 2, 5), (6, 3, 4, 5, 2, 1), (6, 3, 5, 1, 2, 4), (6, 4, 1, 2, 3, 5), (6, 4, 1, 5, 3, 2), (6, 4, 2, 1, 3, 5), (6, 4, 2, 5, 3, 1), (6, 4, 3, 1, 2, 5), (6, 4, 3, 5, 2, 1), (6, 4, 5, 1, 2, 3), (6, 5, 1, 2, 3, 4), (6, 5, 1, 4, 2, 3), (6, 5, 2, 1, 3, 4), (6, 5, 2, 4, 3, 1), (6, 5, 3, 1, 4, 2), (6, 5, 3, 4, 2, 1)]\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [()]\n    combs = []\n    for i in range(n):\n        combs += [c + (l[i],) for c in combinations_colors(l[i+1:], n-i-1)]\n    return combs\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Primes_nums(4) == 2, \"Correctness test failed\"\nassert     count_Primes_nums(3) == 2, \"Correctness test failed\"\nassert     count_Primes_nums(1) == 0, \"Correctness test failed\"\nassert     count_Primes_nums(0) == 0, \"Correctness test failed\"\nassert     count_Primes_nums(10) == 4, \"Correctness test failed\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(0) == 0, \"Counting numbers with given number is not working.\"\nassert count_Primes_nums(1) == 0, \"Counting numbers with given number is not working.\"\nassert count_Primes_nums(2) == 0, \"Counting numbers with given number is not working.\"\nassert count_Primes_nums(3) == 0, \"Counting numbers with given number is not working.\"\nassert count_Primes_nums(4) == 1, \"Counting numbers with given number is not working.\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(5) == 3\nassert     count_Primes_nums(7) == 6\nassert     count_Primes_nums(8) == 8\nassert     count_Primes_nums(11) == 6\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Primes_nums(0) == 0\nassert count_Primes_nums(1) == 0\nassert count_Primes_nums(10) == 5\nassert count_Primes_nums(100) == 46\nassert count_Primes_nums(1000) == 49\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (count_Primes_nums(5) == 3)\nassert (count_Primes_nums(9) == 4)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(count_Primes_nums(10))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert count_Primes_nums(10) == 4\n    assert count_Primes_nums(0) == 0\n    "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_Primes(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(1,2) == (1,2)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(4,7) == (7,4)\nassert swap_numbers(5,3) == (3,5)\nassert swap_numbers(2,1) == (1,2)\nassert swap_numbers(3,4) == (4,3)\n\ndef sum_of_digits(num):\n    '''\n    Write a function that takes in a number and returns the sum of the digits. \n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(1,2) == (2,1), 'WRONG'\nassert     swap_numbers(5,5) == (5,5), 'WRONG'\nassert     swap_numbers(2,2) == (2,2), 'WRONG'\n\nprint('\\033[92m' + 'The test passed!' + '\\033[0m')\n\ndef to_camel_case(s):\n    '''\n    Write a function to convert a string to camel case.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nswap_numbers(7, 8) == (8, 7)\nassert swap_numbers(5, 5) == (5, 5)\nassert swap_numbers(6, 2) == (2, 6)\nassert swap_numbers(2, 2) == (2, 2)\nassert swap_numbers(3, 7) == (7, 3)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         swap_numbers((1, 2), (2, 1)) == (2, 1)\nassert swap_numbers((1, 2), (2, 2)) == (1, 2)\nassert swap_numbers((2, 1), (1, 2)) == (2, 1)\nassert swap_numbers((2, 2), (1, 2)) == (1, 2)\nassert swap_numbers((1, 2), (1, 1)) == (2, 1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(2,2) == (1,2)\nassert     swap_numbers(2,1) == (1,2)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(5,7) == (7,5)\nassert swap_numbers(8,2) == (2,8)\n\n\ndef check_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns True if the first number is not less than the second number. Otherwise, return False.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(7, 3) == (3, 7)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((2, 4, 6), (3, 8, -9)) == (2, 4, 6)\nassert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert maximize_elements((3, 8, -9), (2, 4, 6)) == (2, 4, 6)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((1, 5), (2, 4)) == (2, 4)\nassert     maximize_elements((2, 5), (4, 6)) == (2, 5)\nassert     maximize_elements((5, 7), (1, 2)) == (7, 2)\nassert     maximize_elements((1, 2), (3, 5)) == (5, 2)\nassert     maximize_elements((5, 6), (4, 4)) == (6, 4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximize_elements((6, 3, 8, 12, 4, 2), (6, 3, 8, 12, 4, 2)) == (6, 8, 12, 6, 4, 2)\nassert     maximize_elements((2, 5, 7, 9, 4, 6), (2, 4, 8, 5, 9, 6)) == (9, 9, 9, 5, 5, 6)\nassert     maximize_elements((10, 11, 12, 13, 14), (10, 11, 12, 13, 14)) == (14, 14, 14, 13, 13, 13)\nassert     maximize_elements((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5)\nassert     maximize_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 1, 1, 1, 1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (maximize_elements((1,2,3),(4,5,6))) == (4,5,6), \"Error in maximize_elements.\"\nassert     (maximize_elements((8,4,2),(5,6,3))) == (8,4,2), \"Error in maximize_elements.\"\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements((1, 2), (2, 1)) == (2, 1)\nassert     maximize_elements((2, 5), (3, 1)) == (5, 2)\nassert     maximize_elements((1, 1), (2, 2)) == (2, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert maximize_elements((0, 4), (0, 1)) == (0, 1)\nassert maximize_elements((1, 2), (3, 4)) == (3, 4)\nassert maximize_elements((-1, 1), (0, -1)) == (1, -1)\nassert maximize_elements((-1, 1), (3, -1)) == (3, -1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((1,2), (1,2)) == (1,2,1,2)\nassert     maximize_elements((1,2,1,2), (1,2,1,2)) == (1,2,1,2,1,2)\n\nprint(\"You passed the test!\""
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((2, 3), (1, 1)) == (2, 1)\nassert maximize_elements((1, 2), (3, 4)) == (3, 4)\nassert maximize_elements((2, 3), (3, 4)) == (3, 4)\nassert maximize_elements((1, 2), (2, 3)) == (2, 3)\nassert maximize_elements((1, 2), (1, 1)) == (1, 1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (maximize_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3))\nassert     (maximize_elements((1, 2, 3), (1, 2, 2)) == (1, 2, 2))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef fibonacci(n): \n    '''\n    Write a function to calculate the nth fibonacci number.\n    '''\n    pass\n\ndef fibonacci(n): \n    '''\n    Write a function to calculate the nth fibonacci number.\n    '''\n    pass\n\ndef fibonacci(n): \n    '''\n    Write a function to calculate the nth fibonacci number.\n    '''\n    pass\n\ndef fibonacci(n): \n    '''\n    Write a function to calculate the nth fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     newman_prime(1) == 2\nassert newman_prime(2) == 3\nassert newman_prime(3) == 5\nassert newman_prime(4) == 7\nassert newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     newman_prime(1) == 5, 'Wrong answer'\nassert     newman_prime(2) == 7, 'Wrong answer'\nassert     newman_prime(3) == 11, 'Wrong answer'\nassert     newman_prime(4) == 13, 'Wrong answer'\nassert     newman_prime(5) == 19, 'Wrong answer'\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef newman_prime2(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\nassert     newman_prime(5) == 13\nassert     newman_prime(6) == 17\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     newman_prime(0) == 2\nassert     newman_prime(1) == 3\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_nth_prime(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert newman_prime(1) == 1\nassert newman_prime(2) == 2\nassert newman_prime(3) == 3\nassert newman_prime(4) == 5\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_newman_prime(self):\n        self.assertEqual(newman_prime(1), 2)\n        self.assertEqual(newman_prime(2), 3)\n        self.assertEqual(newman_prime(3), 5)\n        self."
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     division_elements((1,2), (3,4)) == (0.5,0.25)\nassert     division_elements((1,2), (3,0)) == (None,None)\nassert     division_elements((0,0), (0,0)) == (None,None)\nassert     division_elements((2,4), (1,2)) == (2,2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     division_elements((1, 2, 3), (2, 3, 4)) == (1.5, 2.25, 3.5)\nassert     division_elements((1, 2, 3), (4, 3, 2)) == (1.25, 2.5, 3.25)\nassert     division_elements((1, 2, 3), (2, 2, 2)) == (1.25, 2.25, 2.25)\nassert     division_elements((1, 2, 3), (3, 2, 1)) == (1.5, 2, 2.5)\nassert     division_elements((1, 2, 3), (2, 3, 1)) == (1.5, 2.5, 3)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     division_elements((3,5), (3,5)) == (1,1)\nassert     division_elements((1,2), (3,5)) == (2,5)\nassert     division_elements((2,2), (3,5)) == (0.5,5)\nassert     division_elements((3,2), (3,5)) == (0.5,5)\nassert     division_elements((3,5), (3,2)) == (0.5,5)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     division_elements((1,2,3,4),(2,2,3,4)) == (1,0.5,1.5,2)\nassert     division_elements((1,1,3,3),(2,2,3,4)) == (0.25,0.5,1.75,2.5)\nassert     division_elements((1,2,3),(1,0,3)) == (1,0,3)\nassert     division_elements((1,2,3),(2,0,3)) == (1,0,3)\nassert     division_elements((1,2,3),(0,0,0)) == (1,0,3)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef even_odd_sum(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical sum operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     division_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == \\\n    (('0.5', '0.5', '0.5'), ('0.5', '0.5', '0.5'), ('0.5', '0.5', '0.5'))\nassert     division_elements(('7', '3', '4'), ('2', '6', '9')) == \\\n    (('0.5', '0.3333333333333333', '0.6666666666666667'), ('1.0', '0.6666666666666667', '0.3333333333333333'))\nassert     division_elements(('3.4', '4.5', '5.6'), ('1.2', '0.5', '7.3')) == \\\n    (('1.8333333333333334', '0.3333333333333333', '3.3333333333333333'))\nassert     division_elements(('0', '0', '0'), ('0', '0', '0')) == \\\n    (('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements(((10, 2), (5, 3)), ((4, 5), (1, 1))) == ((0.75, 0.5), (0.6, 0.8))\nassert     division_elements(((0, 0), (0, 0), (0, 0)), ((0, 0), (0, 0), (0, 0))) == ((0, 0), (0, 0), (0, 0))\nassert     division_elements(((1, 0), (2, 0), (3, 0)), ((0, 0), (0, 0), (0, 0))) == ((0.1, 0), (0.2, 0), (0.3, 0))\nassert     division_elements(((1, 0), (2, 0), (3, 0)), ((-1, 0), (2, 0), (3, 0))) == ((0.1, 0), (0.2, 0), (0.3, 0))\nassert     division_elements(((1, 0), (2, 0), (3, 0)), ((1, 0), (2, 0), (3, 0))) == ((1, 0), (2, 0), (3, 0))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((1,2,3),(3,4,5)) == (1,2,3), \"Division elements failed\"\nassert     division_elements((1,2,3),(3,2,5)) == (1,1,1), \"Division elements failed\"\nassert     division_elements((1,2,3),(1,2,3)) == (1,2,3), \"Division elements failed\"\nassert     division_elements((1,2,3),(0,2,3)) == (1,0,3), \"Division elements failed\"\nassert     division_elements((1,2,3),(0,0,3)) == (1,0,0), \"Division elements failed\"\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements(('1','2', '3'), ('4', '5', '6')) == (('0.25','0.5', '0.75'), ('0.8', '1', '1.2'), ('1.4', '1.6', '1.8'))\nassert     division_elements(('1','2', '3'), ('4', '5', '6', '7')) == (('0.25','0.5', '0.75'), ('0.8', '1', '1.2'), ('1.4', '1.6', '1.8'), ('2.0', '2.2', '2.4'))\nassert     division_elements(('1','2', '3'), ('4', '5', '6', '7'), '8', '9') == (('0.25','0.5', '0.75'), ('0.8', '1', '1.2'), ('1.4', '1.6', '1.8'), ('2.0', '2.2', '2.4'), ('8.0', '8.2', '8.4'))\n\ndef multiplication_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs multiplication operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6]),'split_two_parts not working'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])\nassert     split_two_parts([1,2,3,4,5], 3) == ([1,2,3], [4,5])\nassert     split_two_parts([1,2,3,4,5], 5) == ([1,2,3,4], [5])\nassert     split_two_parts([1,2,3,4,5], 4) == ([1,2,3,4], [])\nassert     split_two_parts([1,2,3,4,5], 0) == ([], [1,2,3,4,5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7,8], 3) == ([1,2,3],[4,5,6,7,8])\nassert split_two_parts([1,2,3,4,5,6,7,8], 2) == ([1,2],[3,4,5,6,7,8])\nassert split_two_parts([1,2,3,4,5,6,7,8], 1) == ([1,2,3],[4,5,6,7,8])\nassert split_two_parts([1,2,3,4,5,6,7,8], 0) == ([1,2,3,4,5,6,7,8])\nassert split_two_parts([1,2,3,4,5,6,7,8], 8) == ([1,2],[3,4,5,6,7,8])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4]), \"should return ([1, 2], [3, 4])\"\nassert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5]), \"should return ([1, 2], [3, 4, 5])\"\nassert     split_two_parts([1, 2, 3, 4], 4) == ([1, 2, 3, 4], []), \"should return ([1, 2, 3, 4], [])\"\nassert     split_two_parts([], 4) == ([], []), \"should return ([], [])\"\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 2) == ([1, 2, 3], [4, 5, 6, 7, 8]), \"should return ([1, 2, 3], [4, 5, 6, 7, 8])\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsplit_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == ([1, 2], [3, 4, 5, 6, 7, 8, 9])\nassert \nsplit_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == ([1, 2, 3, 4, 5], [6, 7, 8, 9])\nassert \nsplit_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == ([1, 2, 3, 4, 5, 6, 7, 8, 9], [])\nassert \nsplit_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == ([1, 2, 3, 4, 5], [6, 7, 8, 9])"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([1,2,3,4], 2) == ([1,2], [3,4]), 'Wrong output'\nassert     split_two_parts([1,2,3,4], 0) == ([1], [2,3,4]), 'Wrong output'\nassert     split_two_parts([], 1) == ([], []), 'Wrong output'\n\n'''\nTesting your function with more than 2 parts (2,3,4)\n'''\nassert     split_two_parts([1,2,3,4], 2) == ([1,2], [3,4]), 'Wrong output'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([0,1,2,3,4,5], 2) == ([0, 1], [2, 3, 4, 5])\nassert     split_two_parts([0,1,2,3,4,5], 1) == ([0, 1, 2, 3, 4, 5], [])\nassert     split_two_parts([0,1,2,3,4,5], 5) == ([0, 1, 2, 3, 4], [5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dog_age(2) == 1, 'is not the dog\\'s age in dog\\'s years'\nassert dog_age(2.3) == 1.3, 'is not the dog\\'s age in dog\\'s years'\nassert dog_age(4) == 2, 'is not the dog\\'s age in dog\\'s years'\nassert dog_age(9) == 7, 'is not the dog\\'s age in dog\\'s years'\nprint('All tests passed!')"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dog_age(4) == 2\nassert     dog_age(16) == 6\nassert     dog_age(60) == 12\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndog_age(3) ==  15\ndog_age(30) ==  250\ndog_age(35) ==  275\ndog_age(40) ==  305\ndog_age(45) ==  335\ndog_age(50) ==  365\ndog_age(55) ==  420\ndog_age(60) ==  465\ndog_age(65) ==  495\ndog_age(70) ==  550\ndog_age(75) ==  605\ndog_age(80) ==  665\ndog_age(85) ==  710\ndog_age(90) ==  775\ndog_age(100) == 850\ndog_age(105) == 870\ndog_age(110) == 900\ndog_age(115) == 930\ndog_age(120) == 950\ndog_age(125) == 970\ndog_age(130) == 1000\ndog_age(135) == 1070\ndog_age(140) == 1160\ndog_age(145) == 1175\ndog_age(150) == 1200\ndog_age(155) == 1230\ndog_age(160) == 1250\ndog_age(165) == 1280\ndog_age(170) == 1310\ndog_age(175) == 1340\ndog_age(180) == 1370\ndog_age(185) == 1400\ndog_age(190) == 1430\ndog_age(195) == 1455\ndog_age(200) == 1490\ndog_age(205) == 1525\ndog_age(210) == 1545\ndog_age(215) == 1575\ndog_age(220) == 1600\ndog_age(225) == 1630\ndog_age(230) == 1665\ndog_age(235) == 1700\ndog_age(240) == 1735\ndog_age(245) == 1775\ndog_age(250) == 1800\ndog_age(255) == 1850\ndog_age(260) == 1845\ndog_age(265) == 1890\ndog_age(270) == 1925\ndog_age(275) == 1950\ndog_age(280) == 1975\ndog_age(285) == 1990\ndog_age(290) == 2030\ndog_age(295) == 2065\ndog_age(300) == 2100\ndog_age(305) == 2155\ndog_age(310) == 2180\ndog_age(315) == 2225\ndog_age(320) == 2255\ndog_age(325) == 2280\ndog_age(330) == 2325\ndog_age(335) == 2355\ndog_age(340) == 2390\ndog_age(345) == 2430\ndog_age(350) == 2460\ndog_age(355) == 2495\ndog_age(360) == 2530\ndog_age(365) == 2565\ndog_age(370) == 2590\ndog_age(375) == 2625\ndog_age(380) == 2650\ndog_age(385) == 2675\ndog_age(390) == 2710\ndog_age(395) == 2740\ndog_age(400) == 2770\ndog_age(405) == 2800\ndog_age(410) == 2820\ndog_age(415) == 2840\ndog_age(420) == 2860\ndog_age(425) == 2885\ndog_age(430) == 2915\ndog_age(435) == 2940\ndog_age(440) == 2965\ndog_age(445) == 3000\ndog_age(450) == 3025\ndog_age(455) == 3050\ndog_age(460) == 3075\ndog_age(465) == 3100\ndog_age(470) == 3130\ndog_age(475) == 3160\ndog_age(480) == 3200\ndog_age(485) == 3225\ndog_age(490) == 3240\ndog_age(495) == 3270\ndog_age(500) == 3300\ndog_age(505) == 3320\ndog_age(510) == 3340\ndog_age(515) == 3365\ndog_age(520) == 3395\ndog_age(525) == 3425\ndog_age(530) == 3459\ndog_age(535) == 3480\ndog_age(540) == 3515\ndog_age(545) == 3545\ndog_age(550) == 3575\ndog_age(555) == 3600\ndog_age(560) == 3620\ndog_age(565) == 3640\ndog_age(570) == 3660\ndog_age(575) == 3695\ndog_age(580) == 3725\ndog_age(585) == 3745\ndog_age(590) == 3775\ndog_age(595) == 3815\ndog_age(600) == 3845\ndog_age(605) == 3865\ndog_age(610) == 3895\ndog_age(615) == 3920\ndog_age(620) == 3940\ndog_age(625) == 3970\ndog_age(630) == 4000\ndog_age(636) == 4020\ndog_age(640) == 4040\ndog_age(644) == 4065\ndog_age(650) == 4095\ndog_age(655) == 4115\ndog_age(660) == 4135\ndog_age(665) == 4165\ndog_age(670) == 4185\ndog_age(675) == 4216\ndog_age(680) == 4250\ndog_age(685) == 4280\ndog_age(690) == 4310\ndog_age(695) == 4340\ndog_age(700) == 4380\ndog_age(705) == 4415\ndog_age(710) == 4445\ndog_age(715) == 4475\ndog_age(720) == 4515\ndog_age(725) == 4545\ndog_age(730) == 4575\ndog_age(735) == 4615\ndog_age(740) == 4645\ndog_age(746) == 4685\ndog_age(750) == 4725\ndog_age(755) == 4765\ndog_age(760) == 4795\ndog_age(765) == 4824\ndog_age(770) == 4860\ndog_age(775) == 4890\ndog_age(780) == 4925\ndog_age(785) == 4965\ndog_age(790) == 4990\ndog_age(795) == 5025\ndog_age(800) == 5065\ndog_age(805) == 5095\ndog_age(810) == 5135\ndog_age(815) == 5165\ndog_age(820) == 5200\ndog_age(825) == 5235\ndog_age(830) == 5255\ndog_age(835) == 5285\ndog_age(840) == 5324\ndog_age(844) == 5355\ndog_age(850) == 5375\ndog_age(855) == 5400\ndog_age(860) == 5420\ndog_age(865) == 5440\ndog_age(870) == 5470\ndog_age(875) == 5500\ndog_age(880) == 5525\ndog_age(885) == 5545\ndog_age(890) == 5575\ndog_age(895) == 5600\ndog_age(900) == 5625\ndog_age(905) == 5655\ndog_age(910) == 5675\ndog_age(915) == 5715\ndog_age(920) == 5745\ndog_age(925) == 5763\ndog_age(930) == 5800\ndog_age(935) == 5820\ndog_age(940) == 5840\ndog_age(945) == 5865\ndog_age(950) == 5895\ndog_age(955) == 5924\ndog_age(960) == 5945\ndog_age(965) == 5975\ndog_age(970) == 6005\ndog_age(975) == 6025\ndog_age(980) == 6045\ndog_age(985) == 6075\ndog_age(990) == 6105\ndog_age(995) == 6135\ndog_age(1000) == 6164\ndog_age(1005) == 6185\ndog_age(1010) == 6224\ndog_age(1015) == 6255\ndog_age(1020) == 6285\ndog_age(1025) == 6305\ndo"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndog_age(10)\nassert\ndog_age(3)\nassert\ndog_age(7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dog_age(10) == 0,'should be 0'\nassert     dog_age(5) == 5,'should be 5'\nassert     dog_age(40) == 5,'should be 5'\nassert     dog_age(60) == 10,'should be 10'\n\nprint('All the tests passed!')\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dog_age(2) == 0\nassert     dog_age(0) == 0\nassert     dog_age(5) == 3\nassert     dog_age(10) == "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndog_age(2) == 3\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_split([1,2,3,4,5,6], 1) == [[1],[2],[3],[4],[5],[6]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 5) == [[1,2,3,4],[5,6,7,8],[9]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10], 5) == [[1,2,3,4],[5,6,7,8],[9,10]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 6) == [[1,2,3,4,5],[6,7,8,9,10,11],[12,13,14,15]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_split([1,2,3,4,5,6,7], 3) == [[1,2,3],[4,5,6],[7]]\nassert     list_split([1,2,3,4,5,6,7,8], 3) == [[1,2,3],[4,5,6],[7,8]]\nassert     list_split([1,2,3,4,5,6,7], 10) == [[1,2,3,4,5,6,7],[8],[9]]\nassert     list_split([1,2,3,4,5,6,7], 9) == [[1,2,3,4,5,6,7]]\nassert     list_split([1,2,3,4,5,6,7], 1) == [[1,2,3,4,5,6,7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert list_split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[0], [3, 4], [6, 7, 8], [9]]\nassert list_split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == [[0], [1, 2, 3, 4, 5, 6], [7, 8, 9]]\nassert list_split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9]]\nassert list_split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_split([1,2,3], 1) == [[1],[2],[3]], \"Wrong answer\"\nassert list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]], \"Wrong answer\"\nassert list_split([1,2,3,4,5], 1) == [[1],[2],[3],[4],[5]], \"Wrong answer\"\nassert list_split([1,2,3,4,5], 10) == [[1,2,3,4,5]], \"Wrong answer\"\nassert list_split([1,2,3,4,5], 5) == [[1,2,3,4],[5]], \"Wrong answer\"\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_index(lst, element):\n    '''\n    Write a function that takes in a list and an element and returns the index of that element, or -1 if the element is not in the list.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8], 5) == [[1, 2, 3], [4, 5, 6], [7, 8]]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8], 6) == [[1, 2, 3], [4, 5, 6], [7, 8]]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8], 7) == [[1, 2, 3], [4, 5, 6], [7, 8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_split([1,2,3,4,5], 1) == [[1],[2],[3],[4],[5]]\nassert     list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5], 3) == [[1,2,3],[4,5]]\nassert     list_split([1,2,3,4,5], 4) == [[1,2,3,4],[5]]\nassert     list_split([1,2,3,4,5], 5) == [[1,2,3,4,5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n'''"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3, 4], 1) == [[1], [2], [3], [4]]\nassert     list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 3) == [[1, 2, 3], [4]]\nassert     list_split([1, 2, 3, 4], 4) == [[1, 2, 3, 4]]\nassert     list_split([1, 2, 3, 4], 5) == [[1, 2, 3, 4]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsurface_cube(2)==2*1.5*3\nassert lateralsurface_cube(3)==2*1.5*3+2*2.5*3\nassert lateralsurface_cube(4)==2*1.5*3+2*2.5*3+2*3.5*3\nassert lateralsurface_cube(5)==2*1.5*3+2*2.5*3+2*3.5*3+2*4.5*3\nassert lateralsurface_cube(6)==2*1.5*3+2*2.5*3+2*3.5*3+2*4.5*3+2*5.5*3\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(3) == 6\nassert     lateralsurface_cube(2) == 4\nassert     lateralsurface_cube(1) == 2\nassert     lateralsurface_cube(0.5) == 2\nassert     lateralsurface_cube(0) == 0\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    l = 7\n    print(lateralsurface_cube(l))\n\n    #l = 10\n    #print(lateralsurface_cube(l))\n\n    #l = 0\n    #print(lateralsurface_cube(l))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(2) == 6, \"Function returns wrong value.\"\nassert     lateralsurface_cube(3) == 12, \"Function returns wrong value.\"\nassert     lateralsurface_cube(4) == 24, \"Function returns wrong value.\"\n\n\n\ndef lateralsurface_pyramid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its length, width and height.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\">>> test case 1 passed!\")\n\nl = 2\nprint(lateralsurface_cube(l))\n\nassert lateralsurface_cube(1) == 3\nassert lateralsurface_cube(2) == 8\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsurface_cube(3) == 18\nassert     lateralsurface_cube(4) == 24\nassert     lateralsurface_cube(5) == 30\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsurface_cube(4) == 6\nassert     lateralsurface_cube(6) == 24\n\ndef lateralsurface_rectangle(l,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and height.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(1) == 2\nassert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(5) == 20\nassert     lateralsurface_cube(8) == 32\n\n\ndef lateralsurface_cube_three(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_square_Sum():\n    assert square_Sum(0) == 0, \"square_Sum(0)\"\n    assert square_Sum(1) == 1, \"square_Sum(1)\"\n    assert square_Sum(2) == 3, \"square_Sum(2)\"\n    "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef square_Sum(n):\n  '''\n  Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n  \n  square_Sum(n)\n  \n  INPUT:\n  n = 5\n  \n  OUTPUT:\n  25\n  '''\n  sum = 0\n  for i in range(1, n+1):\n    sum += i**2\n  return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    print(\"Checking square_Sum\")\n    assert square_Sum(3) == 18, \"Expected 18, but got %s\" % square_Sum(3)\n    assert square_Sum(4) == 28, \"Expected 28, but got %s\" % square_Sum(4)\n    assert square_Sum(5) == 56, \"Expected 56, but got %s\" % square_Sum(5)\n    assert square_Sum(6) == 81, \"Expected 81, but got %s\" % square_Sum(6)\n    "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert square_Sum(10) == 12\nassert square_Sum(7) == 34\nassert square_Sum(20) == 98\nassert square_Sum(30) == 152\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert square_Sum(5) == 25\nassert square_Sum(10) == 266"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_Sum(2) == 5\nassert square_Sum(6) == 28\nassert square_Sum(10) == 385"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert square_Sum(1) == 1\nassert square_Sum(2) == 4\nassert square_Sum(3) == 13\nassert square_Sum(4) == 23\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 10\nassert     find_star_num(4) == 20\nassert     find_star_num(5) == 50\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_star_num(1) == 1\nfind_star_num(2) == 5\nfind_star_num(3) == 12\nfind_star_num(4) == 20\nfind_star_num(5) == 22\nfind_star_num(6) == 24\nfind_star_num(7) == 27\nfind_star_num(8) == 30\nfind_star_num(9) == 33\nfind_star_num(10) == 36\nfind_star_num(11) == 39\nfind_star_num(12) == 42\nfind_star_num(13) == 45\nfind_star_num(14) == 48\nfind_star_num(15) == 51\nfind_star_num(16) == 54\nfind_star_num(17) == 57\nfind_star_num(18) == 60\nfind_star_num(19) == 63\nfind_star_num(20) == 66\nfind_star_num(21) == 69\nfind_star_num(22) == 72\nfind_star_num(23) == 75\nfind_star_num(24) == 78\nfind_star_num(25) == 81\nfind_star_num(26) == 84\nfind_star_num(27) == 87\nfind_star_num(28) == 90\nfind_star_num(29) == 93\nfind_star_num(30) == 96\nfind_star_num(31) == 99\nfind_star_num(32) == 102\nfind_star_num(33) == 105\nfind_star_num(34) == 108\nfind_star_num(35) == 111\nfind_star_num(36) == 114\nfind_star_num(37) == 117\nfind_star_num(38) == 120\nfind_star_num(39) == 123\nfind_star_num(40) == 126\nfind_star_num(41) == 129\nfind_star_num(42) == 132\nfind_star_num(43) == 135\nfind_star_num(44) == 138\nfind_star_num(45) == 141\nfind_star_num(46) == 144\nfind_star_num(47) == 147\nfind_star_num(48) == 150\nfind_star_num(49) == 153\nfind_star_num(50) == 156\nfind_star_num(51) == 159\nfind_star_num(52) == 162\nfind_star_num(53) == 165\nfind_star_num(54) == 168\nfind_star_num(55) == 171\nfind_star_num(56) == 174\nfind_star_num(57) == 177\nfind_star_num(58) == 180\nfind_star_num(59) == 183\nfind_star_num(60) == 186\nfind_star_num(61) == 189\nfind_star_num(62) == 192\nfind_star_num(63) == 195\nfind_star_num(64) == 198\nfind_star_num(65) == 201\nfind_star_num(66) == 204\nfind_star_num(67) == 207\nfind_star_num(68) == 210\nfind_star_num(69) == 213\nfind_star_num(70) == 216\nfind_star_num(71) == 219\nfind_star_num(72) == 222\nfind_star_num(73) == 225\nfind_star_num(74) == 228\nfind_star_num(75) == 231\nfind_star_num(76) == 234\nfind_star_num(77) == 237\nfind_star_num(78) == 240\nfind_star_num(79) == 243\nfind_star_num(80) == 246\nfind_star_num(81) == 249\nfind_star_num(82) == 252\nfind_star_num(83) == 255\nfind_star_num(84) == 258\nfind_star_num(85) == 261\nfind_star_num(86) == 264\nfind_star_num(87) == 267\nfind_star_num(88) == 270\nfind_star_num(89) == 273\nfind_star_num(90) == 276\nfind_star_num(91) == 279\nfind_star_num(92) == 282\nfind_star_num(93) == 285\nfind_star_num(94) == 288\nfind_star_num(95) == 291\nfind_star_num(96) == 294\nfind_star_num(97) == 297\nfind_star_num(98) == 300\nfind_star_num(99) == 303\nfind_star_num(100) == 306\nfind_star_num(101) == 309\nfind_star_num(102) == 312\nfind_star_num(103) == 315\nfind_star_num(104) == 318\nfind_star_num(105) == 321\nfind_star_num(106) == 324\nfind_star_num(107) == 327\nfind_star_num(108) == 330\nfind_star_num(109) == 333\nfind_star_num(110) == 336\nfind_star_num(111) == 339\nfind_star_num(112) == 342\nfind_star_num(113) == 345\nfind_star_num(114) == 348\nfind_star_num(115) == 351\nfind_star_num(116) == 354\nfind_star_num(117) == 357\nfind_star_num(118) == 360\nfind_star_num(119) == 363\nfind_star_num(120) == 366\nfind_star_num(121) == 369\nfind_star_num(122) == 372\nfind_star_num(123) == 375\nfind_star_num(124) == 378\nfind_star_num(125) == 381\nfind_star_num(126) == 384\nfind_star_num(127) == 387\nfind_star_num(128) == 390\nfind_star_num(129) == 393\nfind_star_num(130) == 396\nfind_star_num(131) == 399\nfind_star_num(132) == 402\nfind_star_num(133) == 405\nfind_star_num(134) == 408\nfind_star_num(135) == 411\nfind_star_num(136) == 414\nfind_star_num(137) == 417\nfind_star_num(138) == 420\nfind_star_num(139) == 423\nfind_star_num(140) == 426\nfind_star_num(141) == 429\nfind_star_num(142) == 432\nfind_star_num(143) == 435\nfind_star_num(144) == 438\nfind_star_num(145) == 441\nfind_star_num(146) == 444\nfind_star_num(147) == 447\nfind_star_num(148) == 450\nfind_star_num(149) == 453\nfind_star_num(150) == 456\nfind_star_num(151) == 459\nfind_star_num(152) == 462\nfind_star_num(153) == 465\nfind_star_num(154) == 468\nfind_star_num(155) == 471\nfind_star_num(156) == 474\nfind_star_num(157) == 477\nfind_star_num(158) == 480\nfind_star_num(159) == 483\nfind_star_num(160) == 486\nfind_star_num(161) == 489\nfind_star_num(162) == 492\nfind_star_num(163) == 495\nfind_star_num(164) == 498\nfind_star_num(165) == 501\nfind_star_num(166) == 504\nfind_star_num(167) == 507\nfind_star_num(168) == 510\nfind_star_num(169) == 513\nfind_star_num(170) == 516\nfind_star_num(171) == 519\nfind_star_num(172) == 522\nfind_star_num(173) == 525\nfind_star_num(174) == 528\nfind_star_num(175) == 531\nfind_star_num(176) == 534\nfind_star_num(177) == 537\nfind_star_num(178) == 540\nfind_star_num(179) == 54"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_star_num(1) == 1 \nassert     find_star_num(2) == 5 \nassert     find_star_num(3) == 10\nassert     find_star_num(4) == 15 \nassert     find_star_num(5) == 25 \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 8\nassert     find_star_num(4) == 13\nassert     find_star_num(5) == 21\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_star_num(1) == 0\nassert find_star_num(2) == 1\nassert find_star_num(3) == 5\nassert find_star_num(4) == 12\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_star_num(1) == 3\nfind_star_num(2) == 5\nfind_star_num(3) == 6\nfind_star_num(4) == 7\nfind_star_num(5) == 8\nfind_star_num(6) == 9\nfind_star_num(7) == 10\nfind_star_num(8) == 11\nfind_star_num(9) == 12\nfind_star_num(10) == 13\nfind_star_num(11) == 14\nfind_star_num(12) == 15\nfind_star_num(13) == 16\nfind_star_num(14) == 17\nfind_star_num(15) == 18\nfind_star_num(16) == 19\nfind_star_num(17) == 20\nfind_star_num(18) == 21\nfind_star_num(19) == 22\nfind_star_num(20) == 23\nfind_star_num(21) == 24\nfind_star_num(22) == 25\nfind_star_num(23) == 26\nfind_star_num(24) == 27\nfind_star_num(25) == 28\nfind_star_num(26) == 29\nfind_star_num(27) == 30\nfind_star_num(28) == 31\nfind_star_num(29) == 32\nfind_star_num(30) == 33\nfind_star_num(31) == 34\nfind_star_num(32) == 35\nfind_star_num(33) == 36\nfind_star_num(34) == 37\nfind_star_num(35) == 38\nfind_star_num(36) == 39\nfind_star_num(37) == 40\nfind_star_num(38) == 41\nfind_star_num(39) == 42\nfind_star_num(40) == 43\nfind_star_num(41) == 44\nfind_star_num(42) == 45\nfind_star_num(43) == 46\nfind_star_num(44) == 47\nfind_star_num(45) == 48\nfind_star_num(46) == 49\nfind_star_num(47) == 50\nfind_star_num(48) == 51\nfind_star_num(49) == 52\nfind_star_num(50) == 53\nfind_star_num(51) == 54\nfind_star_num(52) == 55\nfind_star_num(53) == 56\nfind_star_num(54) == 57\nfind_star_num(55) == 58\nfind_star_num(56) == 59\nfind_star_num(57) == 60\nfind_star_num(58) == 61\nfind_star_num(59) == 62\nfind_star_num(60) == 63\nfind_star_num(61) == 64\nfind_star_num(62) == 65\nfind_star_num(63) == 66\nfind_star_num(64) == 67\nfind_star_num(65) == 68\nfind_star_num(66) == 69\nfind_star_num(67) == 70\nfind_star_num(68) == 71\nfind_star_num(69) == 72\nfind_star_num(70) == 73\nfind_star_num(71) == 74\nfind_star_num(72) == 75\nfind_star_num(73) == 76\nfind_star_num(74) == 77\nfind_star_num(75) == 78\nfind_star_num(76) == 79\nfind_star_num(77) == 80\nfind_star_num(78) == 81\nfind_star_num(79) == 82\nfind_star_num(80) == 83\nfind_star_num(81) == 84\nfind_star_num(82) == 85\nfind_star_num(83) == 86\nfind_star_num(84) == 87\nfind_star_num(85) == 88\nfind_star_num(86) == 89\nfind_star_num(87) == 90\nfind_star_num(88) == 91\nfind_star_num(89) == 92\nfind_star_num(90) == 93\nfind_star_num(91) == 94\nfind_star_num(92) == 95\nfind_star_num(93) == 96\nfind_star_num(94) == 97\nfind_star_num(95) == 98\nfind_star_num(96) == 99\nfind_star_num(97) == 100\nfind_star_num(98) == 101\nfind_star_num(99) == 102\nfind_star_num(100) == 103\nfind_star_num(101) == 104\nfind_star_num(102) == 105\nfind_star_num(103) == 106\nfind_star_num(104) == 107\nfind_star_num(105) == 108\nfind_star_num(106) == 109\nfind_star_num(107) == 110\nfind_star_num(108) == 111\nfind_star_num(109) == 112\nfind_star_num(110) == 113\nfind_star_num(111) == 114\nfind_star_num(112) == 115\nfind_star_num(113) == 116\nfind_star_num(114) == 117\nfind_star_num(115) == 118\nfind_star_num(116) == 119\nfind_star_num(117) == 120\nfind_star_num(118) == 121\nfind_star_num(119) == 122\nfind_star_num(120) == 123\nfind_star_num(121) == 124\nfind_star_num(122) == 125\nfind_star_num(123) == 126\nfind_star_num(124) == 127\nfind_star_num(125) == 128\nfind_star_num(126) == 129\nfind_star_num(127) == 130\nfind_star_num(128) == 131\nfind_star_num(129) == 132\nfind_star_num(130) == 133\nfind_star_num(131) == 134\nfind_star_num(132) == 135\nfind_star_num(133) == 136\nfind_star_num(134) == 137\nfind_star_num(135) == 138\nfind_star_num(136) == 139\nfind_star_num(137) == 140\nfind_star_num(138) == 141\nfind_star_num(139) == 142\nfind_star_num(140) == 143\nfind_star_num(141) == 144\nfind_star_num(142) == 145\nfind_star_num(143) == 146\nfind_star_num(144) == 147\nfind_star_num(145) == 148\nfind_star_num(146) == 149\nfind_star_num(147) == 150\nfind_star_num(148) == 151\nfind_star_num(149) == 152\nfind_star_num(150) == 153\nfind_star_num(151) == 154\nfind_star_num(152) == 155\nfind_star_num(153) == 156\nfind_star_num(154) == 157\nfind_star_num(155) == 158\nfind_star_num(156) == 159\nfind_star_num(157) == 160\nfind_star_num(158) == 161\nfind_star_num(159) == 162\nfind_star_num(160) == 163\nfind_star_num(161) == 164\nfind_star_num(162) == 165\nfind_star_num(163) == 166\nfind_star_num(164) == 167\nfind_star_num(165) == 168\nfind_star_num(166) == 169\nfind_star_num(167) == 170\nfind_star_num(168) == 171\nfind_star_num(169) == 172\nfind_star_num(170) == 173\nfind_star_num(171) == 174\nfind_star_num(172) == 175\nfind_star_num(173) == 176\nfind_star_num(174) == 177\nfind_star_num(175) == 178\nfind_star_num(176) == 179\nfind_star_num(177) == 180\nfind_star_num(178) == 181\nfind_star_num(179) == 182\nfind_star_num(180) == 183\nfind_star_num(181) == 184\nfind_star_num"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_star_num(5) == 26\nassert     find_star_num(100) == 696\nassert     find_star_num(1) == 1\nassert     find_star_num(6) == 28\nassert     find_star_num(9) == 33\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_star_num(1) == 1\nassert find_star_num(2) == 3\nassert find_star_num(3) == 5\nassert find_star_num(4) == 7\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_star_num(1) == 2\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 4\nassert     find_star_num(4) == 5\nassert     find_star_num(5) == 6\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     ascii_value('b') == 102\nassert ascii_value('\\xba') == 115\nassert ascii_value(' ') == 32\nassert ascii_value('\\t') == 9\nassert ascii_value('\\n') == 10\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     ascii_value('A') == 65, \"Error\"\nassert     ascii_value('a') == 97, \"Error\"\nassert     ascii_value(' ') == 32, \"Error\"\nassert     ascii_value('0') == 48, \"Error\"\nassert     ascii_value('_') == 95, \"Error\"\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('B') == 98\nassert     ascii_value('F') == 102\nassert     ascii_value('Z') == 90\nassert     ascii_value('a') == 97\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     ascii_value(' ') == 32\nassert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('0') == 48\nassert     ascii_value('9') == 57\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \ndef character_frequency(text):\n    '''\n    Write a function to calculate the frequency of each character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     ascii_value(\"a\") == 97, \"First character does not have the ascii value\"\nassert     ascii_value(\"b\") == 98, \"Second character does not have the ascii value\"\nassert     ascii_value(\"c\") == 99, \"Third character does not have the ascii value\"\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     ascii_value(' ') == 32, 'Should be 32'\nassert     ascii_value('!') == 33, 'Should be 33'\nassert     ascii_value('\"') == 34, 'Should be 34'\nassert     ascii_value('#') == 35, 'Should be 35'\nassert     ascii_value('$') == 36, 'Should be 36'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ascii_value('a') == 97, f'ascii_value(\"a\") = {ascii_value(\"a\")}'\nassert     ascii_value('b') == 98, f'ascii_value(\"b\") = {ascii_value(\"b\")}'\nassert     ascii_value('c') == 99, f'ascii_value(\"c\") = {ascii_value(\"c\")}'\nassert     ascii_value('d') == 100, f'ascii_value(\"d\") = {ascii_value(\"d\")}'\nassert     ascii_value('e') == 101, f'ascii_value(\"e\") = {ascii_value(\"e\")}'\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\nassert     sum_even_and_even_index([5, 6, 7, 8, 9]) == 9\nassert     sum_even_and_even_index([1, 1, 1, 1, 1]) == 0\nassert     sum_even_and_even_index([]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(sum_even_and_even_index([1,2,3,4,5,6,7,8,9]))"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('The result of sum_even_and_even_index(arr) should be: ', sum_even_and_even_index(arr))\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nsum_even_and_even_index([1,2,3,4,5]) == 16\nsum_even_and_even_index([4,5,6,7,8]) == 10\nsum_even_and_even_index([1,2,3,4]) == 4\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_even_and_even_index([2, 1, 2, 3, 4, 5, 6, 7]) == 12, \"Wrong\"\nassert     sum_even_and_even_index([2, 1, 2, 3, 4, 5, 6, 7, 8]) == 16, \"Wrong\"\nassert     sum_even_and_even_index([2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 18, \"Wrong\"\nassert     sum_even_and_even_index([2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 22, \"Wrong\"\nassert     sum_even_and_even_index([2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 24, \"Wrong\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_even_and_even_index([3, 9, 5, 7, 8, 3, 4, 5, 8, 9, 10]) == 24, 'Wrong output'\nassert     sum_even_and_even_index([1, 2, 3, 4]) == 6, 'Wrong output'\n\nprint('All Tests Passed!!!'"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 0\nassert     sum_even_and_even_index([2, 4, 6, 8]) == 0\nassert     sum_even_and_even_index([1, 2, 3, 4]) == 0\nassert     sum_even_and_even_index([]) == 0\nassert     sum_even_and_even_index([1, 3, 5, 7]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30, \"Wrong output\"\n\nprint(\"The output of the function is: \", sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(\"The output of the function is: \", sum_even_and_even_index([10, 20, 30, 40, 50, 60, 70, 80, 90]))"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(2) == 2\nassert even_Power_Sum(3) == 3\nassert even_Power_Sum(10) == 233\nassert even_Power_Sum(1) == 0\nassert even_Power_Sum(0) == 0\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_Power_Sum(4) == 0, \"4! = 0, but returned {}\".format(even_Power_Sum(4))\nassert     even_Power_Sum(5) == 25, \"5! = 25, but returned {}\".format(even_Power_Sum(5))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_Power_Sum(0) == 1\nassert even_Power_Sum(1) == 2\nassert even_Power_Sum(2) == 2\nassert even_Power_Sum(3) == 4\nassert even_Power_Sum(4) == 5\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(even_Power_Sum(3))"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_Power_Sum(0) == 0\nassert     even_Power_Sum(3) == 5\nassert     even_Power_Sum(4) == 32\nassert     even_Power_Sum(5) == 640\nassert     even_Power_Sum(6) == 576\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_Power_Sum(2) == 2, \"Failed\"\nassert     even_Power_Sum(5) == 120, \"Failed\"\nassert     even_Power_Sum(4) == 544, \"Failed\"\nassert     even_Power_Sum(7) == 134250, \"Failed\"\n\n\ndef even_Power_Sum_2(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    The sum should be of the form - or + -(2^5)\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_Power_Sum(3) == 0, 'Input: 3, Output: 0'\nassert     even_Power_Sum(4) == 0, 'Input: 4, Output: 0'\nassert     even_Power_Sum(5) == 5, 'Input: 5, Output: 5'\nassert even_Power_Sum(100) == 202500, 'Input: 100, Output: 202500'"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_Power_Sum(3) == 4\nassert \neven_Power_Sum(7) == 49\nassert \neven_Power_Sum
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_list1 = [(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]\ntest_list2 = [(2, 3, 4), (2, 3, 4), (2, 3, 4), (2, 3, 4), (2, 3, 4)]\ntest_list3 = [(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]\ntest_list4 = [(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]\n\nprint(rear_extract(test_list1))\nprint(rear_extract(test_list2))\nprint(rear_extract(test_list3))\nprint(rear_extract(test_list4))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rear_extract([('a',1),('b',2),('c',3)]) == ['c', 'c', 'c']\nassert     rear_extract([(1,2),(2,3),(3,4)]) == [3, 4, 4]\nassert     rear_extract([(1,2),('a',3),(3,4)]) == [3, 4, 3]\nassert     rear_extract([('a',1),('b',2),('c',3),('a',4)]) == ['c', 3, 4, 3]\nassert     rear_extract([('a',1),('b',2),('c',3),('a',4),('d',5)]) == ['c', 3, 4, 3, 5]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rear_extract([(\"sally\", 12), (\"david\", 13), (\"sam\", 10)]) == [\"sally\", \"david\", \"sam\"]\nassert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [1, 3, 5, 7, 9]\nassert     rear_extract([(1, 2), (1, 1), (3, 4), (5, 6), (7, 8), (9, 10)]) == [1, 1, 3, 5, 7, 9]\nassert     rear_extract([(2, 2), (1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [2, 2, 1, 3, 5, 7]\nassert     rear_extract([(1, 2), (2, 2), (1, 1), (3, 4), (5, 6), (7, 8), (9, 10)]) == [1, 1, 2, 3, 5, 7, 9]\nprint('Correct')\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([(1,2,3),(2,3,4),(3,4,5)]) == [(2,3,4),(3,4,5),(4,5,1)]\nassert rear_extract([(1,2,3),(2,3,4),(3,4,5)]) == [(3,4,5),(4,5,1)]\nassert rear_extract([(1,2,3),(2,3,4),(3,4,5)]) == [(3,4,5),(4,5,1)]\n\ndef left_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the left element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rear_extract(test_list) ==    [(4, 'c'), (2, 'b'), (0, 'a')], 'Test 3 Failed'\nassert     rear_extract([]) ==    [], 'Test 4 Failed'\nassert     rear_extract([(5, 'd')]) ==    [(5, 'd')], 'Test 5 Failed'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [(2,4),(6,6),(5,6)]\nassert     rear_extract([(1,2,3),(3,4,5),(5,6,7)]) == [(3,4,5),(5,6,7),(5,6,7)]\nassert     rear_extract([(1,2,3,4),(3,4,5,6),(5,6,7,8)]) == [(3,4,5,6),(5,6,7,8),(5,6,7,8)]\nassert     rear_extract([(1,2,3,4,5),(3,4,5,6,7),(5,6,7,8,9)]) == [(3,4,5,6,7),(5,6,7,8,9),(5,6,7,8,9)]\n\ndef mid_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the middle element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rear_extract([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]) == [4, 3, 2, 1], 'Wrong answer for this test case.'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rear_extract([(1,2,3), (4,5), (6,7)]) == [3, 5, 7]\nassert rear_extract([(1,2,3,4), (5,6,7,8), (9,10,11,12)]) == [6, 7, 12]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_substract_elements():\n    '''\n    The correctness of the function is tested below:\n    '''\n    test_tup1 = (1, 2, 3, 4, 5)\n    test_tup2 = (2, 3, 4, 5, 6)\n    expected = (0, -1, -2, -3, -4)\n    actual = substract_elements(test_tup1, test_tup2)\n    assert actual == expected\n    print('correct')\n\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (1, 2, 3, 4)\n    expected = (0, 0, 0)\n    actual = substract_elements(test_tup1, test_tup2)\n    assert actual == expected\n    print('correct')\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     substract_elements((1,2), (3,4)) == (-1, -2)\nassert     substract_elements((1,2), (2,4)) == (-2, -2)\nassert     substract_elements((1,2,3), (2,4,6)) == (-3, -2, -3)\nassert     substract_elements((1,2,3), (4,6,8)) == (-3, -3, -4)\nassert     substract_elements((3,4), (4,5)) == (-2, -3)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     substract_elements((1,2,3), (4,5,6)) == (0,0,0)\nassert substract_elements((1,2,3), (3,4,5)) == (1,0,1)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     substract_elements((1, 2, 3, 4), (1, 2, 3)) == (1, 0, -1, -2)\nassert substract_elements((-2, -1, 0, 2), (2, 2, 2, 2)) == (0, 0, 0, 0)\nassert substract_elements((1, 2, 3), (4, 5, 6)) == (1, -2, -3)\nassert substract_elements((1, 2, 3), (2, 2, 2)) == (1, 0, -1)\nprint('correct')\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     substract_elements((1, 2, 3), (4, 5, 6)) == (1, -2, -3)\nassert     substract_elements((0, 2, 4), (1, 3, 5)) == (0, -2, -4)\nassert     substract_elements((0, 2, 4), (1, 5, 6)) == (0, -2, -5)\nprint('correct')\n\n'''\nQ. 6. Write a function that takes in a tuple and returns True if every element in the tuple is an odd integer and False otherwise.\n'''\ndef every_is_odd(tup):\n    '''\n    Write a function that takes in a tuple and returns True if every element in the tuple is an odd integer and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef replace_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and replaces the element of the first tuple with the element of the second tuple.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef calculate_subset(arr1, arr2):\n    '''\n    Write a function that takes in two arrays and returns the length of their union.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (substract_elements((1,2,3), (1,2,3)) == (0,0,0)), \"Wrong substraction\"\nassert     (substract_elements((1,2,3), (4,5,6)) == (1,2,3)), \"Wrong substraction\"\nassert     (substract_elements((1,2,3), (1,2,3)) == (0,0,0)), \"Wrong substraction\"\nassert     (substract_elements((1,2,3), (4,5,6)) == (1,2,3)), \"Wrong substraction\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     substract_elements(('a', 2), ('b', 1)) == ('a', 1)\nassert     substract_elements(('a', 'b'), ('b', 1)) == ('a', 'b')\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     substract_elements(('a',), ('b',)) == (('a',), ('b',))\nassert substract_elements(('a',), ('b',)) == (('a',), ('b',))\nassert substract_elements(('a',), ('b',)) == (('a',), ('b',))\nassert substract_elements(('a',), ('b',)) == (('a',), ('b',))\nassert substract_elements(('a',), ('b',)) == (('a',), ('b',))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_binomial_Coeff_Sum( 2) == 9\nassert     even_binomial_Coeff_Sum( 3) == 21\nassert     even_binomial_Coeff_Sum( 4) == 12\nassert     even_binomial_Coeff_Sum( 5) == 35\nassert     even_binomial_Coeff_Sum( 6) == 39\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_binomial_Coeff_Sum( 5) == 2\nassert     even_binomial_Coeff_Sum( 6) == 5\nassert     even_binomial_Coeff_Sum( 7) == 1\n\ndef binomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and calculates and returns the binomial coefficient. \n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_binomial_Coeff_Sum(1) == 0\nassert \neven_binomial_Coeff_Sum(2) == 1\nassert \neven_binomial_Coeff_Sum(3) == 2\nassert \neven_binomial_Coeff_Sum(4) == 5\nassert \neven_binomial_Coeff_Sum(5) == 15\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_binomial_Coeff_Sum(4) == 4, \"Wrong result. The function even_binomial_Coeff_Sum should return the sum of even index binomial coefficients.\"\nprint(f\"Test passed\\n\")\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef even_binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the even index binomial coefficients. \n    The function should return an array. \n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 3, \"Incorrect even_binomial_Coeff_Sum()!\"\nassert even_binomial_Coeff_Sum(7) == 55, \"Incorrect even_binomial_Coeff_Sum()!\"\nassert even_binomial_Coeff_Sum(5) == 30, \"Incorrect even_binomial_Coeff_Sum()!\"\n\nprint(\"Even_binomial_Coeff_Sum(n) = \", even_binomial_Coeff_Sum(5))\nprint(\"Even_binomial_Coeff_Sum(n) = \", even_binomial_Coeff_Sum(7))\nprint(\"Even_binomial_Coeff_Sum(n) = \", even_binomial_Coeff_Sum(2))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(even_binomial_Coeff_Sum(10))  #should be 49\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    pass\n\n    ########################################################################\n    # if n = 4, we have to calculate the following values:\n    # 2.21, 3.01, 4.00, 4.10, 4.22, 4.30, 4.40\n    ########################################################################\n    \n    x = 1\n    even_binomial_Coeff_Sum_Result = 0\n    \n    if n % 2 == 0:\n        for i in range(n):\n            even_binomial_Coeff_Sum_Result += x\n            x = x * 2\n    else:\n        for i in range(n):\n            even_binomial_Coeff_Sum_Result += x\n            x = x * 2 + 1\n            \n    return even_binomial_Coeff_Sum_Result\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_binomial_Coeff_Sum(1)==0\nassert     even_binomial_Coeff_Sum(2)==1\nassert     even_binomial_Coeff_Sum(3)==1\nassert     even_binomial_Coeff_Sum(4)==2\nassert     even_binomial_Coeff_Sum(5)==4\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 5\nassert     even_binomial_Coeff_Sum(5) == 3\nassert     even_binomial_Coeff_Sum(30) == 45\nassert     even_binomial_Coeff_Sum(50) == 60\nassert     even_binomial_Coeff_Sum(100) == 150\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(1,1) == 3.14\nassert     volume_cylinder(2,1) == 5.28\nassert     volume_cylinder(2,3) == 20.16\nassert     volume_cylinder(3,4) == 14.56\nassert     volume_cylinder(1,2) == 2.56\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert volume_cylinder(2, 3) == 9\n    assert volume_cylinder(3, 5) == 18\n    assert volume_cylinder(3, 2) == 9\n    assert volume_cylinder(7, 3) == 49\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cylinder(1,1) == 3.14, \"Incorrect output\"\nassert     volume_cylinder(1,1.2) == 0.36, \"Incorrect output\"\nassert     volume_cylinder(0.2,1) == 0.9, \"Incorrect output\"\n\ndef volume_sphere(radius):\n    '''\n    Write a function that takes in the radius of a sphere and returns its volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(2,3)== math.pi*pow(3,2)*2\nassert     volume_cylinder(5,4)== math.pi*pow(4,2)*5"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('TEST CASE 1')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = 1, height = 2 is {volume_cylinder(1,2)}')\nprint('----------------------')\nprint('TEST CASE 2')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = 1, height = -2 is {volume_cylinder(1,-2)}')\nprint('----------------------')\nprint('TEST CASE 3')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = 0, height = 0 is {volume_cylinder(0,0)}')\nprint('----------------------')\nprint('TEST CASE 4')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = 2, height = 5 is {volume_cylinder(2,5)}')\nprint('----------------------')\nprint('TEST CASE 5')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = 0, height = -5 is {volume_cylinder(0,-5)}')\nprint('----------------------')\nprint('TEST CASE 6')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -5, height = -4 is {volume_cylinder(-5,-4)}')\nprint('----------------------')\nprint('TEST CASE 7')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -1, height = -1 is {volume_cylinder(-1,-1)}')\nprint('----------------------')\nprint('TEST CASE 8')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -2, height = -2 is {volume_cylinder(-2,-2)}')\nprint('----------------------')\nprint('TEST CASE 9')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -3, height = -3 is {volume_cylinder(-3,-3)}')\nprint('----------------------')\nprint('TEST CASE 10')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -4, height = -4 is {volume_cylinder(-4,-4)}')\nprint('----------------------')\nprint('TEST CASE 11')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -5, height = -5 is {volume_cylinder(-5,-5)}')\nprint('----------------------')\nprint('TEST CASE 12')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -6, height = -6 is {volume_cylinder(-6,-6)}')\nprint('----------------------')\nprint('TEST CASE 13')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -7, height = -7 is {volume_cylinder(-7,-7)}')\nprint('----------------------')\nprint('TEST CASE 14')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -8, height = -8 is {volume_cylinder(-8,-8)}')\nprint('----------------------')\nprint('TEST CASE 15')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -9, height = -9 is {volume_cylinder(-9,-9)}')\nprint('----------------------')\nprint('TEST CASE 16')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -10, height = -10 is {volume_cylinder(-10,-10)}')\nprint('----------------------')\nprint('TEST CASE 17')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -11, height = -11 is {volume_cylinder(-11,-11)}')\nprint('----------------------')\nprint('TEST CASE 18')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -12, height = -12 is {volume_cylinder(-12,-12)}')\nprint('----------------------')\nprint('TEST CASE 19')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -13, height = -13 is {volume_cylinder(-13,-13)}')\nprint('----------------------')\nprint('TEST CASE 20')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -14, height = -14 is {volume_cylinder(-14,-14)}')\nprint('----------------------')\nprint('TEST CASE 21')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -15, height = -15 is {volume_cylinder(-15,-15)}')\nprint('----------------------')\nprint('TEST CASE 22')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -16, height = -16 is {volume_cylinder(-16,-16)}')\nprint('----------------------')\nprint('TEST CASE 23')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -17, height = -17 is {volume_cylinder(-17,-17)}')\nprint('----------------------')\nprint('TEST CASE 24')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -18, height = -18 is {volume_cylinder(-18,-18)}')\nprint('----------------------')\nprint('TEST CASE 25')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -19, height = -19 is {volume_cylinder(-19,-19)}')\nprint('----------------------')\nprint('TEST CASE 26')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -20, height = -20 is {volume_cylinder(-20,-20)}')\nprint('----------------------')\nprint('TEST CASE 27')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -21, height = -21 is {volume_cylinder(-21,-21)}')\nprint('----------------------')\nprint('TEST CASE 28')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -22, height = -22 is {volume_cylinder(-22,-22)}')\nprint('----------------------')\nprint('TEST CASE 29')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -23, height = -23 is {volume_cylinder(-23,-23)}')\nprint('----------------------')\nprint('TEST CASE 30')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -24, height = -24 is {volume_cylinder(-24,-24)}')\nprint('----------------------')\nprint('TEST CASE 31')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -25, height = -25 is {volume_cylinder(-25,-25)}')\nprint('----------------------')\nprint('TEST CASE 32')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -26, height = -26 is {volume_cylinder(-26,-26)}')\nprint('----------------------')\nprint('TEST CASE 33')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -27, height = -27 is {volume_cylinder(-27,-27)}')\nprint('----------------------')\nprint('TEST CASE 34')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -28, height = -28 is {volume_cylinder(-28,-28)}')\nprint('----------------------')\nprint('TEST CASE 35')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -29, height = -29 is {volume_cylinder(-29,-29)}')\nprint('----------------------')\nprint('TEST CASE 36')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -30, height = -30 is {volume_cylinder(-30,-30)}')\nprint('----------------------')\nprint('TEST CASE 37')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -31, height = -31 is {volume_cylinder(-31,-31)}')\nprint('----------------------')\nprint('TEST CASE 38')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -32, height = -32 is {volume_cylinder(-32,-32)}')\nprint('----------------------')\nprint('TEST CASE 39')\nprint('----------------------')\nprint(f'The volume of cylinder with radius = -33, height = -33 is {volume_cylinder(-33,-33)}')\nprint('----------------------')\nprint('TEST CASE 40')\nprint("
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(1,2) == 5.56\n\nassert     volume_cylinder(4,5) == 25.56\n\nassert     volume_cylinder(10,10) == 40.0\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(1,4) == 4, \"It should be 4\"\nassert     volume_cylinder(0.1,4) == 0.01, \"It should be 0.01\"\nassert     volume_cylinder(4,1) == 4, \"It should be 4\"\n\ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    assert volume_cylinder(1,1) == 3.14159\n    assert volume_cylinder(2,2) == 8.5426\n    assert volume_cylinder(5,5) == 78.5398\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cylinder(1,5) == 3.14159265359\nassert     volume_cylinder(2,8) == 56.0\nassert     volume_cylinder(3,10) == 78.0\nassert     volume_cylinder(4,12) == 104.0\nassert     volume_cylinder(5,14) == 140.0\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert dict_filter({'a':1,'b':2,'c':1},1) == {'a':1,'c':1}\nassert dict_filter({'a':1,'b':2,'c':1},2) == {'b':2,'c':1}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_filter({0:1,1:2,2:4,3:9},2) == {0:1,1:2}\nassert     dict_filter({0:1,1:2,2:4,3:9},4) == {2:4,3:9}\nassert     dict_filter({0:1,1:2,2:4,3:9},3) == {2:4}\nassert     dict_filter({0:1,1:2,2:4,3:9},6) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_filter({\"apple\":3, \"pear\":1, \"orange\":5}, 3) == {\"apple\": 3, \"orange\": 5}\nassert     dict_filter({\"apple\":3, \"pear\":1, \"orange\":5}, 1) == {\"pear\": 1, \"orange\": 5}\nassert     dict_filter({\"apple\":3, \"pear\":1, \"orange\":5}, 2) == {\"pear\": 1, \"orange\": 5}\nassert     dict_filter({\"apple\":3, \"pear\":1, \"orange\":5}, 0) == {\"apple\": 3, \"pear\": 1, \"orange\": 5}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_filter({\"A\": 1, \"B\": 2, \"C\": 3}, 1) == {\"A\": 1, \"C\": 3}, \"Wrong result\"\nassert     dict_filter({\"A\": 1, \"B\": 2, \"C\": 3}, 2) == {\"B\": 2, \"C\": 3}, \"Wrong result\"\nassert     dict_filter({\"A\": 1, \"B\": 2, \"C\": 3}, 3) == {\"A\": 1, \"B\": 2, \"C\": 3}, \"Wrong result\"\nassert     dict_filter({\"A\": 1, \"B\": 2, \"C\": 3}, 4) == {\"A\": 1, \"B\": 2, \"C\": 3}, \"Wrong result\"\nassert     dict_filter({\"A\": 1, \"B\": 2, \"C\": 3}, 5) == {}, \"Wrong result\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter({'a':1,'b':2,'c':3},2) == {'a':1,'b':2,'c':3},'should return {\u2018a\u2019:1, \u2018b\u2019:2, \u2018c\u2019:3}'\nassert dict_filter({'a':1,'b':2,'c':3},1) == {'a':1,'b':2,'c':3},'should return {\u2018a\u2019:1, \u2018b\u2019:2, \u2018c\u2019:3}'\nassert dict_filter({'a':1,'b':2,'c':3},3) == {'a':1,'b':2,'c':3},'should return {\u2018a\u2019:1, \u2018b\u2019:2, \u2018c\u2019:3}'\nassert dict_filter({},5) == {},'should return {}'\nassert dict_filter({'a':1},5) == {},'should return {}'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({'1': 1, '2': 4, '3': 9, '4': 16}, 1) == {'1': 1, '3': 9, '4': 16}, \"Error at first element\"\nassert     dict_filter({'1': 1, '2': 4, '3': 9, '4': 16}, 2) == {'2': 4, '3': 9, '4': 16}, \"Error at second element\"\nassert     dict_filter({'1': 1, '2': 4, '3': 9, '4': 16}, 3) == {'2': 4, '3': 9}, \"Error at third element\"\nassert     dict_filter({'1': 1, '2': 4, '3': 9, '4': 16}, 5) == {}, \"Error at fourth element\"\nassert     dict_filter({'1': 1, '2': 4, '3': 9, '4': 16}, 9) == {'1': 1, '2': 4, '3': 9, '4': 16}, \"Error at fifth element\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements((1, 3, 5, 7, 9, 11, 13)) == 5\nassert     count_first_elements((1, 2, 3, 4, 4, 5, 6)) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((1, 4, 6, 3, 2, 2, 4)) == 2\nassert count_first_elements((1, 4, 6, 3, 2, 2, 4)) == 0\nassert count_first_elements((1, 4, 6, 3, 2, 2, 4)) == 0\nassert count_first_elements((1, 4, 6, 3, 2, 2, 4)) == 0\nassert count_first_elements((1, 4, 6, 3, 2, 2, 4)) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements((1,2,3)) == 2\nassert     count_first_elements((1,3,5,1,2,2,2)) == 1\nassert     count_first_elements((1,2,3,2)) == 3\nassert     count_first_elements((1,2,3,1)) == 4\nassert     count_first_elements((1,2,3,1,3,3,1)) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements((7,2,1)) == 2, \"incorrect\"\nassert     count_first_elements((5,2,1)) == 2, \"incorrect\"\nassert     count_first_elements((1,2,1)) == 0, \"incorrect\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements((1, 2, 3, 3, 2, 1)) == 1, \"it is not True\"\nassert     count_first_elements((1, 2, 3, 3, 2, 1, 0)) == 1, \"it is not True\"\nassert     count_first_elements((1, 2, 3, 3, 2, 1, 0, 1)) == 2, \"it is not True\"\nassert     count_first_elements((1, 2, 3, 3, 2, 1, 0, 1, 0)) == 3, \"it is not True\"\nassert     count_first_elements((1, 2, 3, 3, 2, 1, 0, 1, 0, 1)) == 3, \"it is not True\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements(('a', 'b', 'a', 'b', 'c', 'a')) == 2\nassert     count_first_elements(('a', 'b', 'c', 'b', 'a')) == 2\nassert     count_first_elements(('b', 'a', 'b', 'b', 'a')) == 2\nassert     count_first_elements(('a',)) == 0\nassert     count_first_elements(('a', 'b')) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_first_elements_demo(tup):\n    '''\n    the tuple tup contains numbers. The function returns a tuple\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements( (2,3,4,1,6,7,8) ) == 4, 'Test 1 failed'\nassert     count_first_elements( (2,2,2,2,2,2,2) ) == 0, 'Test 2 failed'\nassert     count_first_elements( (0,0,0,0,0,0,0) ) == 0, 'Test 3 failed'\nassert     count_first_elements( (0,1,1,1,1,1,1) ) == 2, 'Test 4 failed'\nassert     count_first_elements( (1,1,1,1,1,1,1) ) == 3, 'Test 5 failed'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements((0,1,2,3,4,5,6,7,8,9)) == 10\nassert     count_first_elements((1,2,3,4,5,6,7,8,9)) == 9\nassert     count_first_elements((0,1,2,3,4,5,6,7,8,9)) == 10\nassert     count_first_elements((0,)) == 1\nassert     count_first_elements((9,)) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 5, 1, 2, 4)) == 1, \"Not correct\"\nassert     count_first_elements((1, 2, 3, 4, 5, 1, 2, 4, 3)) == 2, \"Not correct\"\nassert     count_first_elements((1, 2, 3, 4, 5, 1, 2, 4, 3, 3)) == 1, \"Not correct\"\nassert     count_first_elements((1, 2, 3, 4, 5, 1, 2, 4, 3, 3, 3)) == 0, \"Not correct\"\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 10\nassert     is_num_decagonal(2) == 11\nassert     is_num_decagonal(3) == 12\nassert     is_num_decagonal(4) == 13\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert 2 == is_num_decagonal(1)\nassert 1 == is_num_decagonal(2)\nassert 6 == is_num_decagonal(3)\nassert 15 == is_num_decagonal(4)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 6\nassert     is_num_decagonal(4) == 10\nassert     is_num_decagonal(5) == 15\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_num_decagonal(0) == 0\nassert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 10\nassert     is_num_decagonal(3) == 22\nassert     is_num_decagonal(4) == 24\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef deco_num(n):\n    '''\n    Convert the decagonal number into triangular number, and return the value.\n    '''\n    pass\n\nassert\n\ndef test_is_num_decagonal():\n    "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_num_decagonal(1) == 1, 'test 1 failed'\nassert     is_num_decagonal(2) == 3, 'test 2 failed'\nassert     is_num_decagonal(3) == 6, 'test 3 failed'\nassert     is_num_decagonal(4) == 10, 'test 4 failed'\nassert     is_num_decagonal(5) == 15, 'test 5 failed'\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 6\nassert     is_num_decagonal(4) == 10\nassert     is_num_decagonal(5) == 15\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequential_search(dlist, item) == (True, 0)\nassert     sequential_search(dlist, -1) == (False, -1)\nassert     sequential_search([], item) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 5) == (True, 4)\nassert     sequential_search([1,2,3,4,5], 0) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sequential_search([1,2,3,4],1) == (True, 0)\nassert     sequential_search([1,2,3,4],0) == (False, -1)\nassert     sequential_search([1,2,3,4],4) == (True, 3)\nassert     sequential_search([],4) == (False, -1)\nassert     sequential_search([1,2,3,4,5,6,7,8,9,10],5) == (True, 10)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequential_search([], 10) == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == (True, 3)\nassert     sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sequential_search([0,1,2,3,4], 5) == (False, -1)\nassert     sequential_search([0,1,2,3,4], 2) == (True, 1)\nassert     sequential_search([0,1,2,3,4], 3) == (True, 2)\nassert     sequential_search([0,1,2,3,4], 4) == (True, 3)\nassert     sequential_search([0,1,2,3,4], 0) == (False, 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef ordered_sequential_search(alist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n    Note: you should implement sequential_search in a way that will give a correct search for a certain value regardless of the order of the array.\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sequential_search([1, 2, 3, 4], 4) == (True, 2)\nassert sequential_search([1, 2, 3, 4], 5) == (False, -1)\nassert sequential_search([], 1) == (False, -1)\nassert sequential_search([1, 2, 3, 4], 0) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([1], 1) == (True, 0)\nassert     sequential_search([1, 2, 3], 1) == (True, 0)\nassert     sequential_search([1, 2, 3], 3) == (True, 2)\nassert     sequential_search([1, 2, 3], 4) == (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_unique([]) == True, \"Empty List\"\nassert     all_unique([1, 2, 2, 3]) == True, \"Repeated Elements\"\nassert     all_unique([1, 1, 1, 3]) == False, \"Repeated Elements\"\nassert     all_unique([1, 2, 3, 4]) == True, \"No Repeated Elements\"\n\nprint(\"All Tests Passed\")"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(all_unique([1,2,3,4,5,6,7]))\n    print(all_unique([1,2,3,4,5,6,7,8]))\n    print(all_unique([1,2,3,4,5,6]))\n    print(all_unique([]))\n    print(all_unique([1,1,1]))"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nall_unique([1,1,2,3,3,3]) == False\nassert \nall_unique([1,1,2,3,3,3,3,3,3,3]) == True\nassert \nall_unique([1,1,2,2,2,3,3,3,3]) == False\nassert \nall_unique([1,1,2,2,2,3,3,3,3,3,3]) == True\nassert \nall_unique([1,1,2,2,3,3,3,4,4,4,4,4,5]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    all_unique([1,2,2,4,1])\n    all_unique([1,1,2,2,3])\n    all_unique([1,1,1,1,1])\n    all_unique([1,2,3,1,2,1])"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([1,2,3,4,5]) == False\nassert     all_unique([1,1,1,1]) == True\nassert     all_unique([]) == True\nassert     all_unique([1,2,3,4,5,6]) == False\n\ndef all_unique_1(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return not any(i == test_list[0] for i in test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_unique([1,2,3,4,4]) == True, \"The output is incorrect\"\nassert     all_unique([1,2,3,4,4,4,4]) == True, \"The output is incorrect\"\nassert     all_unique([]) == True, \"The output is incorrect\"\nassert     all_unique([1]) == True, \"The output is incorrect\"\nassert     all_unique([1,1]) == False, \"The output is incorrect\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique([1,2,3,3,3,4]) == False\nassert     all_unique([1,2,3,3]) == True\nassert     all_unique([1,2,3,4]) == False\nassert     all_unique([1,2,3,4,5]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([1,1,1,2,3,4,4,3,2,1,1]) == True, \"your function does not work correctly\"\nassert     all_unique([1,2,3,4,4,3,2,1,1]) == False, \"your function does not work correctly\"\nassert     all_unique([1,1,2,3,4,4,4,3,2,1,1]) == True, \"your function does not work correctly\"\nassert     all_unique([1,2,3,4,4,4,4,3,2,1,1]) == False, \"your function does not work correctly\"\nassert     all_unique([]) == True, \"your function does not work correctly\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique([1,2,3]) == True\nassert     all_unique([1,2,3,4]) == False\nassert     all_unique([]) == True\nassert     all_unique([1]) == True\nassert     all_unique([]) == True\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sub_list([], []) == []\nassert     sub_list([1], []) == [1]\nassert     sub_list([], [1]) == []\nassert     sub_list([1,2], []) == []\nassert     sub_list([], [1,2]) == []\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sub_list([1, 2], [-2, -1]) == [3, 2]\nassert sub_list([0, 0, 0], [-3, -3, -3]) == [0, 0, 0]\nprint('\u2714')\n\ndef sub_list_2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef add_list_2(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise, like built-in Python sum() method.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sub_list([5,2,3,6],[2,5,3,1]) == [-2,-3,1,4], \"Wrong!\"\nprint(\"Tests: PASSED\")\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sub_list([1,2,3],[-2,-1,0]) == [-3,2,1]\nassert     sub_list([2,5,3],[-2,5,-1]) == [-3,1,2]\nassert     sub_list([-3,5,-2],[1,-2,3]) == [-4,0,-1]\nassert     sub_list([1,2,3],[4,-5,6]) == [-3,2,-1]"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     validate(112233) == True, \"wrong\"\nassert     validate(234234) == False, \"wrong\"\nassert     validate(112233) == True, \"wrong\"\nprint(\"correct\")\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_freq(n): \n    '''\n    Write a python function takes in an integer and return the count of the digits in the integer with frequency less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     validate(98) == False, \"Fail\"\nassert validate(0) == False, \"Fail\"\nassert validate(12) == False, \"Fail\"\nassert validate(1213) == False, \"Fail\"\nassert validate(121334) == False, \"Fail\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     validate(12345) == False\nassert validate(12345) == False\nassert validate(1236) == True"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not validate(123), \"123 should be false\"\nassert not validate(456), \"456 should be false\"\nassert not validate(723), \"723 should be false\"\nassert not validate(324567), \"324567 should be false\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     validate(432) == True\nassert     validate(12345) == True\nassert     validate(88888) == False\nassert     validate(1234567) == False\nassert     validate(87) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    (validate(1) == True), \"The first integer is not a string\"\n    (validate(7) == True), \"The first integer is not a string\"\n    (validate(10) == False), \"The first integer is not a string\"\n    (validate(64) == False), \"The first integer is not a string\"\n    (validate(0) == True), \"The first integer is not a string\"\n    (validate(5678) == True), \"The first integer is not a string\"\n    (validate(100) == True), \"The first integer is not a string\"\n    (validate(9) == False), \"The first integer is not a string\"\n    (validate(90) == False), \"The first integer is not a string\"\n    (validate(900) == False), \"The first integer is not a string\"\n    (validate(0) == True), \"The first integer is not a string\"\n    (validate(00) == False), \"The first integer is not a string\"\n    (validate(11) == True), \"The first integer is not a string\"\n    (validate(3) == False), \"The first integer is not a string\"\n    (validate(3.3) == False), \"The first integer is not a string\"\n    (validate(9.99) == False), \"The first integer is not a string\"\n    (validate(10.1) == True), \"The first integer is not a string\"\n    (validate(10.101) == True), \"The first integer is not a string\"\n    (validate(10.11) == False), \"The first integer is not a string\"\n    (validate(10.011) == False), \"The first integer is not a string\"\n    (validate(10.10) == False), \"The first integer is not a string\"\n    (validate(10.1) == True), \"The first integer is not a string\"\n    (validate(10.01) == False), \"The first integer is not a string\"\n    (validate(10.001) == True), \"The first integer is not a string\"\n    (validate(10.0) == False), \"The first integer is not a string\"\n    (validate(10) == True), \"The first integer is not a string\"\n    (validate(1) == False), \"The first integer is not a string\"\n    (validate(1.0) == True), \"The first integer is not a string\"\n    (validate(1.1) == False), \"The first integer is not a string\"\n    (validate(1.01) == False), \"The first integer is not a string\"\n    (validate(1.0) == True), \"The first integer is not a string\"\n    (validate(1.1) == True), \"The first integer is not a string\"\n    (validate(1.01) == True), \"The first integer is not a string\"\n    (validate(1.001) == True), \"The first integer is not a string\"\n    (validate(1.0) == True), \"The first integer is not a string\"\n    (validate(1.00001) == False), \"The first integer is not a string\"\n    (validate(1.001) == True), \"The first integer is not a string\"\n    (validate(0.1) == False), \"The first integer is not a string\"\n    (validate(1.001) == True), \"The first integer is not a string\"\n    (validate(0.01) == False), \"The first integer is not a string\"\n    (validate(1.001) == True), \"The first integer is not a string\"\n    (validate(0.001) == True), \"The first integer is not a string\"\n    (validate(1.0) == False), \"The first integer is not a string\"\n    (validate(0.01) == False), \"The first integer is not a string\"\n    (validate(1.01) == False), \"The first integer is not a string\"\n    (validate(0.001) == False), \"The first integer is not a string\"\n    (validate(0.0001) == False), \"The first integer is not a string\"\n    (validate(0.00001) == False), \"The first integer is not a string\"\n    (validate(0.0001) == True), \"The first integer is not a string\"\n    (validate(0.00001) == True), \"The first integer is not a string\"\n    (validate(0.000001) == True), \"The first integer is not a string\"\n    (validate(0.0000001) == True), \"The first integer is not a string\"\n    (validate(0.00000001) == True), \"The first integer is not a string\"\n    (validate(0.00000002) == True), \"The first integer is not a string\"\n    (validate(0.00000003) == True), \"The first integer is not a string\"\n    (validate(0.00000004) == True), \"The first integer is not a string\"\n    (validate(0.00000005) == True), \"The first integer is not a string\"\n    (validate(0.00000006) == True), \"The first integer is not a string\"\n    (validate(0.00000007) == True), \"The first integer is not a string\"\n    (validate(0.00000008) == True), \"The first integer is not a string\"\n    (validate(0.00000009) == True), \"The first integer is not a string\"\n    (validate(0.00000010) == True), \"The first integer is not a string\"\n    (validate(0.00000100) == True), \"The first integer is not a string\"\n    (validate(0.00000101) == True), \"The first integer is not a string\"\n    (validate(0.00000102) == True), \"The first integer is not a string\"\n    (validate(0.00000103) == True), \"The first integer is not a string\"\n    (validate(0.00000104) == True), \"The first integer is not a string\"\n    (validate(0.00000105) == True), \"The first integer is not a string\"\n    (validate(0.00000106) == True), \"The first integer is not a string\"\n    (validate(0.00000107) == True), \"The first integer is not a string\"\n    (validate(0.00000108) == True), \"The first integer is not a string\"\n    (validate(0.00000109) == True), \"The first integer is not a string\"\n    (validate(0.00000110) == True), \"The first integer is not a string\"\n    (validate(0.00000111) == True), \"The first integer is not a string\"\n    (validate(0.00000112) == True), \"The first integer is not a string\"\n    (validate(0.00000113) == True), \"The first integer is not a string\"\n    (validate(0.00000114) == True), \"The first integer is not a string\"\n    (validate(0.00000115) == True), \"The first integer is not a string\"\n    (validate(0.00000116) == True), \"The first integer is not a string\"\n    (validate(0.00000117) == True), \"The first integer is not a string\"\n    (validate(0.00000118) == True), \"The first integer is not a string\"\n    (validate(0.00000119) == True), \"The first integer is not a string\"\n    (validate(0.00000120) == True), \"The first integer is not a string\"\n    (validate(0.00000121) == True), \"The first integer is not a string\"\n    (validate(0.00000122) == True), \"The first integer is not a string\"\n    (validate(0.00000123) == True), \"The first integer is not a string\"\n    (validate(0.00000124) == True), \"The first integer is not a string\"\n    (validate(0.00000125) == True), \"The first integer is not a string\"\n    (validate(0.00000126) == True), \"The firs"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     validate(12345) == False\nassert     validate(192419) == True\nassert     validate(20) == True\n\n\ndef find_prime_factors(n): \n    '''\n    Write a python function takes in a natural number n and return an integer representing the product of prime factors of n.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_element(['a', 'b', 'c', 'd'], 'a') == True, \"Error in check_element\"\nassert     check_element(['a', 'b', 'c', 'd'], 'b') == False, \"Error in check_element\"\nassert     check_element(['a', 'b', 'c', 'd'], 'c') == False, \"Error in check_element\"\nassert     check_element(['a', 'b', 'c', 'd'], 'd') == True, \"Error in check_element\"\nassert     check_element(['a', 'b', 'c', 'd'], 'e') == False, \"Error in check_element\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_element([1,2,3],1) == True\nassert     check_element([1,2,3],0) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_element([1,2,3],1) == True, \"Your function returns False.\"\nassert     check_element([1,2,3],2) == False, \"Your function returns True.\"\nassert     check_element([1,2,3],4) == False, \"Your function returns False.\"\nassert     check_element([1,2,3],1) == True, \"Your function returns False.\"\nassert     check_element([1,2,3,1],1) == False, \"Your function returns False.\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_element([0,1,2,3,4,5],0) == True\nassert     check_element([0,1,2,3,4,5],1) == False\nassert     check_element([0,1,2,3,4,5],4) == False\nassert     check_element([0,1,2,3,4,5],5) == False\nassert     check_element([0,1,2,3,4,5],6) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncheck_element([1,2,3],3) == True\ncheck_element([1,2,3],4) == False\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,2,3],4) == True\ncheck_element([1,"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_element([1,2,3,4,5,6,7,8,9,10],1) == True, \\\n        \"The list: [1,2,3,4,5,6,7,8,9,10] is not a list!\"\nassert     check_element([1,2,3,4,5,6,7,8,9,10],10) == True, \\\n        \"The list: [1,2,3,4,5,6,7,8,9,10] is not a list!\"\nassert     check_element([1,2,3,4,5,6,7,8,9,10],1) == False, \\\n        \"The list: [1,2,3,4,5,6,7,8,9,10] is not a list!\"\nassert     check_element([1,2,3,4,5,6,7,8,9,10],11) == False, \\\n        \"The list: [1,2,3,4,5,6,7,8,9,10] is not a list!\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_element([1,2,3,4,5,6],4) == True\nassert     check_element([1,2,3,4,5,6],6) == False\nassert     check_element([1,2,3,4,5,6],2) == False\nassert     check_element([1,2,3,4,5,6],3) == False\nassert     check_element([1,2,3,4,5,6],6) == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_two_three(\"aab\") == True\nassert     text_match_two_three(\"abbc\") == False\nassert     text_match_two_three(\"abcb\") == True\n\nprint(\"tests passed\")\n\ndef text_match_two_three_better(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r\"^[abab]\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three('a' * 2 + 'b' * 3 + 'a' * 3) == False, \\\n        'text_match_two_three is wrong!'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three('ababab') == True\nassert     text_match_two_three('abbab') == False\nassert     text_match_two_three('abbbb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three('a'*2 + 'b'*3) == True, \"Wrong!\"\nassert     text_match_two_three('ab') == False, \"Wrong!\"\nassert     text_match_two_three('bb') == True, \"Wrong!\"\nassert     text_match_two_three('aab') == True, \"Wrong!\"\nassert     text_match_two_three('b') == True, \"Wrong!\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('ababab') == True, \"Wrong output: text_match_two_three('ababab')\"\nassert     text_match_two_three('abc') == False, \"Wrong output: text_match_two_three('abc')\"\nassert     text_match_two_three('abbc') == True, \"Wrong output: text_match_two_three('abbc')\"\nassert     text_match_two_three('abab') == True, \"Wrong output: text_match_two_three('abab')\"\nassert     text_match_two_three('aaaaaa') == True, \"Wrong output: text_match_two_three('aaaaaa')\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three('aabbb') == True\nassert     text_match_two_three('aabbbb') == False\nassert     text_match_two_three('aaabbbbbb') == True\nassert     text_match_two_three('aaabbbbbbbb') == True\nassert     text_match_two_three('aaaabbbbbbbbbb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('bbbbaaaabbbbb') == False\nassert     text_match_two_three('bbbbbaaaaaaabbbb') == False\nassert     text_match_two_three('bbbbbbbaaaaaaaabbbbbb') == True\nassert     text_match_two_three('bbbbbbbaaaaaaabbbbbbbb') == False\nassert     text_match_two_three('bbbbbbbaaaaaaabbbbbbbbbbbb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three(\"ababababab\") == True\nassert     text_match_two_three(\"abbab\") == False\nassert     text_match_two_three(\"abbabb\") == True\nassert     text_match_two_three(\"abbabbb\") == False\nassert     text_match_two_three(\"abbbbb\") == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('') == False\nassert     text_match_two_three('a') == False\nassert     text_match_two_three('aaa') == False\nassert     text_match_two_three('abcbba') == True\nassert     text_match_two_three('abbbba') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    text_match_two_three(\"aababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbbbaabbabababbbaabbababbbabababaabbaababaaaaabababbbbbbbaababbbbaaabbbaaaaababbaabababababbabababbabbbabbbabbbbbabbabaaabbbbbaaabbbaaaaabbbbbbbaaaababbabbaaabaabaabbabbabababaaabbabbbbbbbbabbbaabbbbabbbbababbabbabbbbbabbbbbbbabbababbbbbaaabbbabbbbaabaabbbbbabaaabaabaabaabababbbbbabbbbbbaabbbbbbbbaaabbbbbbaaabababbabbbbbbabbbabbbaaabbbaaaabbbabbbbbaaabbabbaaabaabbbbabaaaabbabbbabbbbaaabbaaabbbaaabbababbbbaaabbababbbaaabbababaabbbbaaabbbaaaabbbbbbbaaaabbbbabbbaaabbbaaabbbaaaabbbaaabbabbbbbbbbaaaabbbabaaabbbbbaaabbbbbbbbbbbabbbbbbbaaabbbaaaaabbabbbbbbbbbbbabaaababbababaaabbabbbbbabbabababababbbbbaaabbbbbbbababbbbaabaaaaabbabaaaaabbbbbbbbbbbbbbbbbaaaabbabababbbbbbbbbbbbbbaaabbabaaabaaabbbbbbbbbbbbbabbbbbbbaaabbbbbaabbabababababbbbbbaaaabababababaaabbbbbabbbbbbbbbbbbbbaaabbabaaabbbaaaabbbbbbbbbbbbbabbbbbbbaaabbbaaaabbbbbbbbbbbbbbbbbaaaabbababaaabbbbbbbbbbbbbbaabaaabbbbbbbaabaaabbbbbbbbbbbabaaabbbbbbbaaabbbbbabbbbbbbbbbbabaaababaaabbbbbbbbbbbbbbbbbbbbbbbbbaaaaabbbbbabaaabbbbbbbbbbbbbbaaaabaaabbbbbbbbbbbbbbbbbbbbbbbaaaabbbbbbbbbbbbbbbbbbbbbbbaaaabbbbbbbbaabaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum_repeated([2,3,-2,4], 2, 2) == 6\nassert     max_sub_array_sum_repeated([2,-3,0,-2,4], 2, 2) == 0\nassert     max_sub_array_sum_repeated([-2,1,-3,4,-1,2], 2, 2) == 6\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_sub_array_sum_repeated([1, 3, 2, 6, -1, 4, 1, 8, 2], 5, 3) == 18\nassert max_sub_array_sum_repeated([1, -2, 3, -4, 5, -6, 7, -8, 9], 5, 2) == 0\nassert max_sub_array_sum_repeated([1, -3, -2, -5, 5, 3, -1], 4, 3) == -1\n\n\ndef max_sub_array_sum_with_index_repeated(a, n): \n    '''\n    Write a function to find the maximum sum of any contiguous sub-array in the modified array.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 5, 2) == 9, \"Wrong output\"\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 3, 2) == 9, \"Wrong output\"\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 3, 3) == 19, \"Wrong output\"\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 4, 2) == 9, \"Wrong output\"\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum_repeated(a, 4, 2) == 11\nassert     max_sub_array_sum_repeated(a, 1, 5) == 5\nassert     max_sub_array_sum_repeated(a, 2, 5) == 6\nassert     max_sub_array_sum_repeated(a, 3, 5) == 7\nassert     max_sub_array_sum_repeated(a, 4, 5) == 12\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 4, 2) == 9\nassert max_sub_array_sum_repeated([1, 2, 3, 4], 1, 1) == 4\nassert max_sub_array_sum_repeated([1, 2, 3, 4], 1, 2) == 6\nassert max_sub_array_sum_repeated([1, 2, 3, 4], 2, 2) == 9\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_sub_array_sum_repeated_2(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_sum_subarray_two_pointers(a, n): \n    '''\n    Find the maximum sum subarray. A subarray is a contiguous non-empty array with its elements only increasing by one, \n    which means either \n    a) it is a contiguous,\n    b) it is a non-decreasing,\n    c) it is a subarray of size at least two.\n\n    Example:\n    Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4],  n = 8\n    Output: 10\n    Explanation: We can choose indices 0, 2, 4 or 6 with a max sum of 5.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_sub_array_sum_repeated([4, 5, 6, 5, 6, 5], 5, 2) == 12, 'FAIL'\n\ndef max_sub_array_sum(a, n): \n    '''\n    Write a function to find the largest sum of any contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(square_Sum(10))\n    print(square_Sum(20))\n    print(square_Sum(30))\n    print(square_Sum(50))\n    print(square_Sum(100))\n    print(square_Sum(1000))\n    print(square_Sum(10000))\n    \n    # import random\n    # for i in range(10):\n    #     print(random.randint(1,9))\n    #     \n    # import random\n    # for i in range(20):\n    #     print(random.choice(range(10, 20))"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsquare_Sum(4) == 8\nsquare_Sum(10) == 48"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_Sum(0) == 0,'square_Sum(0) should be 0'\nassert square_Sum(1) == 1,'square_Sum(1) should be 1'\nassert square_Sum(2) == 1,'square_Sum(2) should be 1'\nassert square_Sum(3) == 2,'square_Sum(3) should be 2'\nassert square_Sum(4) == 6,'square_Sum(4) should be 6'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    square_Sum(4) == 20, '8 is not 20'\nassert \n    square_Sum(8) == 64, '8 is not 64'\nassert \n    square_Sum(10) == 1_000_000_000_000_000, '10 is not 1_000_000_000_000_000'\n\n\ndef check_prime(n):\n    '''\n    Write a python function takes in an integer n and returns True if it is a prime number or False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(5) == 0\nassert     square_Sum(6) == 14\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_Sum(3) == 32, \"returned wrong value\"\nassert square_Sum(4) == 64, \"returned wrong value\"\nassert square_Sum(100) == 505050, \"returned wrong value\"\n\nprint('Passed all the tests.'"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(square_Sum(5)) \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_Sum(2) == 4\nassert     square_Sum(4) == 64\nassert     square_Sum(5) == 385\nassert     square_Sum(6) == 2320\nassert     square_Sum(7) == 79420\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_Sum(4) == 4*(4+0) == 16\nassert    square_Sum(1) == 1*(1+0) == 1\nassert    square_Sum(2) == 2*(2+0) == 4\nassert    square_Sum(3) == 3*(3+0) == 9\nassert    square_Sum(4) == 4*(4+0) == 16\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef multiply(list1):\n    '''\n    Write a function to multiply all the numbers in the list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef longest_word(list1):\n    '''\n    Write a function to find the longest word in a list of strings.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_length([[2,1,4,3,5], [-9,-7,9,3], [1,2,3,5,8]]) == [[1,2,3,5,8], [9,-7,9,3], [4,5,4,4,4]]\nassert max_length([[1], [2,3], [1,2,3]]) == [[1,2,3], [1,2,3]]\nassert max_length([[1,2,3], [4,5,6], [7,8,9]]) == [[1,2,3], [4,5,6], [7,8,9]]\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # for example, if the input is [[1,2,3,4], [2,3,4], [1,2,3], [2,3,4,5]], the output should be 1\n    # if the input is [[1,2,3,4], [2,3,4,5], [1,2,3,4]], the output should be 4\n    # for example, if the input is [[1,2,3,4], [2,3,4], [1,2,3,4]], the output should be 1\n    # if the input is [[1,2,3,4], [2,3,4], [1,2,3,4], [2,3,4,5]], the output should be 5\n    # when the input is [[1,2,3,4,5]], the output should be 1\n    # when the input is [[1,2,3,4], [2,3,4,5], [1,2,3,4], [2,3,4,5]], the output should be 4\n    print(max_length([[1,2,3,4], [2,3,4], [1,2,3,4]]))\n    print(max_length([[1,2,3,4], [2,3,4], [1,2,3,4], [2,3,4,5]]))\n    print(max_length([[1,2,3,4], [2,3,4], [1,2,3,4]]))\n    print(max_length([[1,2,3,4], [2,3,4], [1,2,3,4], [2,3,4,5]]))\n    print(max_length([[1,2,3,4,5]]))\n    print(max_length([[1,2,3,4], [2,3,4], [1,2,3,4], [2,3,4,5]]))\n    print(max_length([[1,2,3,4], [2,3,4], [1,2,3,4], [2,3,4,5], [1,2,3,4]]))\n    print(max_length([[1,2,3,4], [2,3,4], [1,2,3,4], [2,3,4,5], [1,2,3,4], [2,3,4,5]]))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length([[1], \n                    [2], \n                    [3, 4]]) == 3\nassert     max_length([]) == 0\nassert     max_length([[1], \n                    [2, 3, 4]]) == 2\nassert     max_length([[1, 2], \n                    [3, 4],\n                    [5, 6],\n                    [7]]) == 4\nassert     max_length([[1], \n                    [2, 3, 4]]) == 2\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nNow let's learn about the zip function.\n\nIt accepts two lists as argument. It iterates over the two lists to return the lists whose elements are paired up.\n\nThe zip function iterates over the list of lists and returns a list of tuples.\n\nThe zip function is also useful in performing the operations.\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length([[],2]) == 2\nassert max_length([1,2,3,4,5]) == 5\n\ndef flatten(list1):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    pass"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_no_of_ways(0, 0) == 1\nassert count_no_of_ways(0, 1) == 0\nassert count_no_of_ways(1, 1) == 1\nassert count_no_of_ways(2, 1) == 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nGiven a list of numbers, find the maximum product of two adjacent numbers.\nExample 1:\nInput: [-10, -10, -9, -7, -7, -4, 4, 4, -3, -2, -1]\nOutput: -1\nExplanation: Maximum product is -10*-10=-10, but we return -1 as our answer.\nExample 2:\nInput: [-9, -9, -8, 8, 8, -7, 7, -6, 6]\nOutput: 8\nExplanation: Maximum product is -8*-8=80, but we return 8 as our answer.\n'''"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_no_of_ways(4, 2) == 4\nassert     count_no_of_ways(5, 2) == 5\nassert     count_no_of_ways(10, 3) == 3\nassert     count_no_of_ways(7, 5) == 4\nassert     count_no_of_ways(0, 1) == 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_no_of_ways(2, 4) == 2\nassert     count_no_of_ways(3, 4) == 4\nassert     count_no_of_ways(4, 4) == 5\nassert     count_no_of_ways(5, 4) == 6\nassert     count_no_of_ways(5, 5) == 10\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_no_of_ways(4, 2) == 1, \\\n    'Test case 1 fails'\nassert count_no_of_ways(5, 2) == 4, \\\n    'Test case 2 fails'\nassert count_no_of_ways(3, 3) == 6, \\\n    'Test case 3 fails'\nassert count_no_of_ways(7, 2) == 13, \\\n    'Test case 4 fails'\nassert count_no_of_ways(4, 1) == 3, \\\n    'Test case 5 fails'\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_no_of_ways(1, 1) == 1, \"f(1,1) = 1\"\nassert count_no_of_ways(2, 2) == 2, \"f(2,2) = 2\"\nassert count_no_of_ways(4, 2) == 7, \"f(4,2) = 7\"\nassert count_no_of_ways(5, 2) == 10, \"f(5,2) = 10\"\nassert count_no_of_ways(6, 2) == 14, \"f(6,2) = 14\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nclass Test:\n    def test_count_no_of_ways(self):\n        assert count_no_of_ways(1,1) == 1\n        assert count_no_of_ways(2,2) == 2\n        assert count_no_of_ways(3,1) == 1\n        "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find(7,9) == 2, 'Check your code'\nassert     find(8,9) == 2, 'Check your code'\nassert     find(7,11) == 3, 'Check your code'\nassert     find(8,11) == 3, 'Check your code'\nassert     find(7,12) == 4, 'Check your code'\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find(5,3) == 2\nassert     find(8,4) == 2\nassert     find(14,4) == 2\nassert     find(20,4) == 2\nassert     find(11,4) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find(3,3) == 1\nassert find(4,5) == 1\nassert find(6,6) == 2\nassert find(8,7) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(2,5)==2, \"failed for n={}, m={}\".format(2,5)\nassert     find(3,5)==0, \"failed for n={}, m={}\".format(3,5)\nassert     find(0,5)==0, \"failed for n={}, m={}\".format(0,5)\nassert     find(-2,-5)==-2, \"failed for n={}, m={}\".format(-2,-5)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find(1,1) == 0\nassert     find(3,1) == 0\nassert     find(5,1) == 1\nassert     find(10,2) == 0\nassert     find(11,2) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find(17, 2) == 17\nassert     find(17, 5) == 5\nassert     find(17, 10) == 17\nassert     find(17, 12) == 17\nassert     find(17, 16) == 17\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(6,4) == 2\nassert     find(7,4) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find(5,5) == 10\nassert     find(10,10) == 10\nassert     find(10,11) == 11\nassert     find(10,12) == 11\nassert     find(10,13) == 11\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find(1, 2) == 0, 'Quotient should be 0'\nassert     find(1, 4) == 0, 'Quotient should be 0'\nassert     find(12, 9) == 3, 'Quotient should be 3'\nassert     find(10, 10) == 1, 'Quotient should be 1'\nassert     find(1000, 100) == 9, 'Quotient should be 9'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(1,1)    ==     0.0\nassert otherside_rightangle(3,4) ==     1.5\nassert otherside_rightangle(4,1) == 1.5\n\ndef otherside_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(7,6) == 5.0\nassert     otherside_rightangle(8,8) == 8.0\nassert     otherside_rightangle(4,5) == 5.0\nassert     otherside_rightangle(6,5) == 5.0\nassert     otherside_rightangle(2,3) == 3.0\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     otherside_rightangle(5,5) == 3.5\nassert     otherside_rightangle(6,5) == 7\nassert     otherside_rightangle(7,5) == 8\n\ndef triangle_area(a,b,c):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(3,4) == 1.732050807568877\nassert     otherside_rightangle(4,3) == 1.732050807568877\nassert     otherside_rightangle(5,6) == 1.732050807568877\nassert     otherside_rightangle(1,1) == 2.23606797749979\nassert     otherside_rightangle(1,2) == 1.618033988749895\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef area_triangle(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    otherside_rightangle(2,1) == math.sqrt(3)\n    otherside_rightangle(2,2) == 2\n    otherside_rightangle(2,3) == 2.5\n    otherside_rightangle(2,4) == 3\n    otherside_rightangle(4,2) == 3\n    otherside_rightangle(3,3) == 5\n    otherside_rightangle(3,4) == 3.5\n    otherside_rightangle(3,5) == 5\n    otherside_rightangle(4,5) == 4\n    otherside_rightangle(5,5) == 5\n    otherside_rightangle(5,6) == 5.5\n    otherside_rightangle(6,6) == 6\n    otherside_rightangle(6,7) == 7\n    otherside_rightangle(7,7) == 7\n    otherside_rightangle(7,8) == 8\n    otherside_rightangle(8,8) == 8\n    otherside_rightangle(10,10) == 10\n    otherside_rightangle(10,11) == 11\n    otherside_rightangle(10,12) == 11.5\n    otherside_rightangle(10,13) == 12\n    otherside_rightangle(10,14) == 12.5\n    otherside_rightangle(10,15) == 13\n    otherside_rightangle(10,16) == 13.5\n    otherside_rightangle(10,17) == 14\n    otherside_rightangle(10,18) == 14.5\n    otherside_rightangle(10,19) == 15\n    otherside_rightangle(10,20) == 15.5\n    otherside_rightangle(10,21) == 16\n    otherside_rightangle(10,22) == 16.5\n    otherside_rightangle(10,23) == 17\n    otherside_rightangle(10,24) == 17.5\n    otherside_rightangle(10,25) == 18\n    otherside_rightangle(10,26) == 18.5\n    otherside_rightangle(10,27) == 19\n    otherside_rightangle(10,28) == 19.5\n    otherside_rightangle(10,29) == 20\n    otherside_rightangle(10,30) == 20.5\n    otherside_rightangle(10,31) == 21\n    otherside_rightangle(10,32) == 21.5\n    otherside_rightangle(10,33) == 22\n    otherside_rightangle(10,34) == 22.5\n    otherside_rightangle(10,35) == 23\n    otherside_rightangle(10,36) == 23.5\n    otherside_rightangle(10,37) == 24\n    otherside_rightangle(10,38) == 24.5\n    otherside_rightangle(10,39) == 25\n    otherside_rightangle(10,40) == 25.5\n    otherside_rightangle(10,41) == 26\n    otherside_rightangle(10,42) == 26.5\n    otherside_rightangle(10,43) == 27\n    otherside_rightangle(10,44) == 27.5\n    otherside_rightangle(10,45) == 28\n    otherside_rightangle(10,46) == 28.5\n    otherside_rightangle(10,47) == 29\n    otherside_rightangle(10,48) == 29.5\n    otherside_rightangle(10,49) == 30\n    otherside_rightangle(10,50) == 30.5\n    otherside_rightangle(10,51) == 31\n    otherside_rightangle(10,52) == 31.5\n    otherside_rightangle(10,53) == 32\n    otherside_rightangle(10,54) == 32.5\n    otherside_rightangle(10,55) == 33\n    otherside_rightangle(10,56) == 33.5\n    otherside_rightangle(10,57) == 34\n    otherside_rightangle(10,58) == 34.5\n    otherside_rightangle(10,59) == 35\n    otherside_rightangle(10,60) == 35.5\n    otherside_rightangle(10,61) == 36\n    otherside_rightangle(10,62) == 36.5\n    otherside_rightangle(10,63) == 37\n    otherside_rightangle(10,64) == 37.5\n    otherside_rightangle(10,65) == 38\n    otherside_rightangle(10,66) == 38.5\n    otherside_rightangle(10,67) == 39\n    otherside_rightangle(10,68) == 39.5\n    otherside_rightangle(10,69) == 40\n    otherside_rightangle(10,70) == 40.5\n    otherside_rightangle(10,71) == 41\n    otherside_rightangle(10,72) == 41.5\n    otherside_rightangle(10,73) == 42\n    otherside_rightangle(10,74) == 42.5\n    otherside_rightangle(10,75) == 43\n    otherside_rightangle(10,76) == 43.5\n    otherside_rightangle(10,77) == 44\n    otherside_rightangle(10,78) == 44.5\n    otherside_rightangle(10,79) == 45\n    otherside_rightangle(10,80) == 45.5\n    otherside_rightangle(10,81) == 46\n    otherside_rightangle(10,82) == 46.5\n    otherside_rightangle(10,83) == 47\n    otherside_rightangle(10,84) == 47.5\n    otherside_rightangle(10,85) == 48\n    otherside_rightangle(10,86) == 48.5\n    otherside_rightangle(10,87) == 49\n    otherside_rightangle(10,88) == 49.5\n    otherside_rightangle(10,89) == 50\n    otherside_rightangle(10,90) == 50.5\n    otherside_rightangle(10,91) == 51\n    otherside_rightangle(10,92) == 51.5\n    otherside_rightangle(10,93) == 52\n    otherside_rightangle(10,94) == 52.5\n    otherside_rightangle(10,95) == 53\n    otherside_rightangle(10,96) == 53.5\n    otherside_rightangle(10,97) == 54\n    otherside_rightangle(10,98) == 54.5\n    otherside_rightangle(10,99) == 55\n    otherside_rightangle(10,100) == 55.5\n    otherside_rightangle(10,101) == 56\n    otherside_rightangle(10,102) == 56.5\n    otherside_rightangle(10,103) == 57\n    otherside_rightangle(10,104) == 57.5\n    otherside_rightangle(10,105) == 58\n    otherside_rightangle(10,106) == 58.5\n    otherside_rightangle(10,107) == 59\n    otherside_rightangle(10,108) == 59.5\n    otherside_rightangle(10,109) == 60\n    otherside_rightangle(10,110) == 60.5\n    otherside_rightangle(10,111) == 61\n    otherside_rightangle(10,112) == 61.5\n    otherside_rightangle(10,113) == 62\n    otherside_rightangle(10,114) == 62.5\n    otherside_rightangle(10,115) == 63\n    otherside_rightangle(10,116) == 63.5\n    otherside_rightangle(10,117) == 64\n    otherside_rightangle(10,118) == 64.5\n    otherside_rightangle(10,119) == 65\n    otherside_rightangle(10,120) == 65.5\n    otherside_rightangle(10,121) == 66\n    otherside_rightangle(10,122) == 66.5\n    otherside_rightangle(10,123) == 67\n    otherside_rightangle(10,124) == 67.5\n    otherside_rightangle(10,125) == 68\n    otherside_rightangle(10,126) == 68.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(10,12) == 8, \"Wrong value!\"\nassert otherside_rightangle(30,30) == 30, \"Wrong value!\"\nassert otherside_rightangle(10,10) == 10, \"Wrong value!\"\nassert otherside_rightangle(20,20) == 20, \"Wrong value!\"\nassert otherside_rightangle(25,25) == 25, \"Wrong value!\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\">> This file contains a function that is supposed to solve the problem.\")\n    print(\">> Type 'python right_angle.py' at the cmd line to test this file.\")"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\ndef side_rightangle(w,h):\n    r = math.sqrt(w ** 2 + h ** 2)\n    return r\n'''\n\n\n'''\ndef third_side_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert max_val([[],[],[1,2,3,4],[4,5,6]]) == 6\nassert max_val([[1,2,3,4],[4,5,6]]) == 4\nassert max_val([[2,4,1],[3,2,4],[6,5,3]]) == 6\nassert max_val([[1,2,3,4],[4,5,6],[7,8,9,10,11]]) == 11\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_val([1, 2, 3]) == 3\nassert     max_val([2, 1, 3]) == 3\nassert     max_val([2, 3, 1]) == 3\nassert     max_val([3, 2, 1]) == 3\nassert     max_val([1, 2, 3, 2]) == 3\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_val([12, 32, 51, -12, -51, 4, 100]) == 100, \"Function does not follow the specification\"\nassert max_val([12, 32, -12, -51, 4, 100]) == 100, \"Function does not follow the specification\"\nassert max_val([-51, -100, 100]) == 100, \"Function does not follow the specification\"\nassert max_val([1,2,3,4,5]) == 5, \"Function does not follow the specification\"\nassert max_val([2,2,2,2,2,2]) == 2, \"Function does not follow the specification\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_val([1, 2, 3, 4, 'a', 'c', 'f']) == 'f', \"Wrong Answer\"\nassert     max_val([1, 2, 3, 4, True, 'c', 'f']) == 'c', \"Wrong Answer\"\nassert     max_val([1, 2, 3, 4, False, 'c', 'f']) == 'f', \"Wrong Answer\"\nassert     max_val([1, 2, 3, 4, 5, 'a', 'c', 'f']) == 'c', \"Wrong Answer\"\nassert     max_val([1, 2, 3, 4, 5, 'a', 'c', 'f', False]) == 'c', \"Wrong Answer\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_val([1,2,3,4,5,6]) == 6\nassert     max_val([2,4,8,2,5,7]) == 8\nassert     max_val([-1,2,3,4,5,6]) == 6\nassert     max_val([-1,3,5,7,9,2]) == 9\nassert     max_val([]) == None\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_val([2, 'hi', 5.5,'my', 7]) == 5.5\nassert max_val([2, 'hi', 5.5,'my', 7, -5, -6, 5]) == 5.5\nassert max_val([7, 'hi', 5.5,'my', 7, -5, -6, 5]) == 7\nassert max_val([7, 'hi', 5.5,'my', 7, -5, -6, 5, 2]) == 7\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_val([1,2,3,4,5,6]) == 6, 'Wrong answer'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(max_val([4,2,9,7,6])) # => 7\nprint(max_val([4,2,1,6,7,9,0])) # => 9\n\n\n'''\n**************************************************************************\n*                              Is in List                              *\n**************************************************************************\nWrite a function is_in_list() that accepts a heterogeneous list and a value.\nThe function should return True if the value is in the list and False otherwise.\n\nExample:\n*              *\n*      *   *\n*  *     * *\n*     *   *\n*      *   *\n*           *\n*                  *\n*                *\n*                    *\n*            *      *\n*           *    *\n*      *     *   *\n*  *     *   *\n*     *   *\n*      *   *\n*           *\n*                  *\n*                *\n*                    *\n*            *      *\n*           *    *\n*      *     *   *\n*  *     *   *\n*     *   *\n*      *   *\n*           *\n*                  *\n*                *\n*                    *\n*            *      *\n*           *    *\n*      *     *   *\n*  *     *   *\n*     *   *\n*      *   *\n*           *\n*                  *\n*                *\n*                    *\n*            *      *\n*           *    *\n*      *     *   *\n*  *     *   *\n*     *   *\n*      *   *\n*           *\n*                  *\n*                *\n*                    *\n*            *      *\n*           *    *\n*      *     *   *\n*  *     *   *\n*     *   *\n*      *   *\n*           *\n*                  *\n*                *\n*                    *\n*            *      *\n*           *    *\n*      *     *   *\n*  *     *   *\n*     *   *\n*      *   *\n*           *\n**************************************************************************\n'''"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(3) == 4\nassert     sum_div(15) == 12\nassert     sum_div(20) == 18\n\nprint('Test Successful'"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(2) == 1\nassert     sum_div(3) == 2\nassert     sum_div(12) == 9\nassert     sum_div(15) == 3\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_div(1) == 1\nassert     sum_div(2) == 1\nassert     sum_div(3) == 2\nassert     sum_div(4) == 2\nassert     sum_div(12) == 4\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_div(10) == 10\nassert     sum_div(5) == 5\nassert     sum_div(2) == 1\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_div(2) == 5, \"sum_div(2) == 5 is incorrect\"\nassert     sum_div(3) == 2, \"sum_div(3) == 2 is incorrect\"\nassert     sum_div(4) == 6, \"sum_div(4) == 6 is incorrect\"\nassert     sum_div(12) == 18, \"sum_div(12) == 18 is incorrect\"\nassert     sum_div(1025) == 1210, \"sum_div(1025) == 1210 is incorrect\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_div(4) == 4, \"Wrong result\"\nassert     sum_div(6) == 5, \"Wrong result\"\nassert     sum_div(8) == 8, \"Wrong result\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_div(7) == 3, 'correct'\nassert     sum_div(12) == 5, 'correct'\nassert     sum_div(10) == 6, 'correct'\n\ndef sum_div_no_recursive(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n\n\ndef sum_div_no_recursive(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # sum_div_no_recursive(number) = number // 2 + number // 3 + number // 5 +... + number // 2^(i - 1)\n    # * i is a divisor of number\n    \n    divisor = 2\n    sum = 0\n    while divisor <= number // divisor:\n        if number % divisor == 0:\n            sum += divisor\n            \n        divisor += 1\n    \n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    assert sum_div(6) == 3, \"sum_div is incorrect\"\n    assert sum_div(1) == 1, \"sum_div is incorrect\"\n    assert sum_div(0) == 0, \"sum_div is incorrect\"\n    assert sum_div(-1) == 0, \"sum_div is incorrect\"\n    "
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_div(1) == 0, \"Sum of 1 is 0\"\nassert     sum_div(2) == 1, \"Sum of 2 is 1\"\nassert     sum_div(3) == 2, \"Sum of 3 is 2\"\nassert     sum_div(4) == 3, \"Sum of 4 is 3\"\nassert     sum_div(5) == 2 + 3, \"Sum of 5 is 2 + 3\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_div(15) == 5, 'Test 1 failed'\nassert     sum_div(21) == 12, 'Test 2 failed'\nassert     sum_div(31) == 7, 'Test 3 failed'"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([0,1,2,4]) == 2\nassert     get_Inv_Count([0,1,2,3,4]) == 0\nassert     get_Inv_Count([1,4,2,3,5]) == 3\nassert     get_Inv_Count([1,4,2,3,5,5]) == 1\n\n\ndef get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([1,2,3,4,5]) == 3\nassert     get_Inv_Count([1,2,3,4,5,6,7,8]) == 6\nassert     get_Inv_Count([5,4,3,2,1]) == 0\nassert     get_Inv_Count([5,4,3,2,1,0]) == 2\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Inv_Count([1,3,2]) == 0, \"Error\"\nassert     get_Inv_Count([3,1,2]) == 2, \"Error\"\nassert     get_Inv_Count([3,1,2,0]) == 1, \"Error\"\nassert     get_Inv_Count([1,3,2,0]) == 1, \"Error\"\nassert     get_Inv_Count([2,3,1]) == 2, \"Error\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([2,4,1,3]) == 1, \"wrong\"\nassert     get_Inv_Count([2,3,4]) == 1, \"wrong\"\nassert     get_Inv_Count([1,2,3,4]) == 2, \"wrong\"\nassert     get_Inv_Count([2,3,4,1]) == 4, \"wrong\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Inv_Count([1, 2, 3]) == 0, \"Wrong return for case : 1, 2, 3\"\nassert     get_Inv_Count([1, 1, 3]) == 1, \"Wrong return for case : 1, 1, 3\"\nassert     get_Inv_Count([2, 1, 1]) == 2, \"Wrong return for case : 2, 1, 1\"\nassert     get_Inv_Count([1, 2, 2]) == 0, \"Wrong return for case : 1, 2, 2\"\nassert     get_Inv_Count([1, 1, 2]) == 1, \"Wrong return for case : 1, 1, 2\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Inv_Count([1, 3, 5, 4]) == 1, \\\n    \"Incorrect result\"\nassert     get_Inv_Count([1, 2, 3, 4]) == 1, \\\n    \"Incorrect result\"\nassert     get_Inv_Count([1, 2, 3, 4, 5, 6]) == 2, \\\n    \"Incorrect result\"\nassert     get_Inv_Count([1, 3, 5, 4]) == 1, \\\n    \"Incorrect result\"\nassert     get_Inv_Count([1, 3, 5, 4, 6]) == 2, \\\n    \"Incorrect result\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([1, 3, 2]) == 0\nassert     get_Inv_Count([2, 4, 3]) == 1\nassert     get_Inv_Count([2, 4, 3, 1]) == 2\nassert     get_Inv_Count([2, 4, 1, 3]) == 2\nassert     get_Inv_Count([2, 4, 1, 3, 5]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flatten_list([\"a\", [\"b\", [\"c\", \"d\"], [\"e\", \"f\"]], [\"g\", [\"h\", [\"i\", \"j\"]]]]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\nassert    flatten_list([\"a\", [\"b\", [\"c\", \"d\"], [\"e\", \"f\"]], [\"g\", [\"h\", [\"i\", \"j\"]]]]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\nassert    flatten_list([]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef flatten_lists(list_of_lists):\n    '''\n    Given a list of lists, return a list of all elements in all of the list in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     flatten_list([[[1], 2], 3]) == [1, 2, 3]\nassert     flatten_list([1, 2, 3]) == [1, 2, 3]\nassert     flatten_list([[[[]]]]) == [[]]\nassert     flatten_list([1, 2, [3, 4]]) == [1, 2, 3, 4]\nassert     flatten_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(flatten_list([\n    [0,0],\n    [0,1,1],\n    [0,1],\n    [0,1,2,3],\n    [0,1,2,3,4],\n    [0,1,2,3,4,5],\n    [0,1,2,3,4,5,5]\n    ]))\n\n'''\n[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\n'''\n\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    nested_list = [[1],2,3,4,[5,[6,7],8],9,[10,[11,[12,13],14]],15]\n    print(flatten_list(nested_list))\n    # Output:\n    #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     flatten_list([[],[]]) == []\nassert     flatten_list([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]\nassert     flatten_list([[[1,2,3],[4,5,6]]]) == [1,2,3,4,5,6]\nassert     flatten_list([[[1,2],[3,4]],[[5,6]]]) == [1,2,3,4,5,6]\n\ndef sort_stack(stack):\n    '''\n    Write a function to sort a given stack.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([[1,2],[3,4],[5]]) == [1,2,3,4,5]\nassert     flatten_list([[1,2,3,4],[5],[[6,7],8]]) == [1,2,3,4,5,6,7,8]\nassert     flatten_list([[1,2,3,4,5,6],7,8]) == [1,2,3,4,5,6,7,8]\nassert     flatten_list([[1,2,3,4,5,6],[7],8]) == [1,2,3,4,5,6,7,8]\nassert     flatten_list([[1,2],[3,4],[5],[[6,7],8]]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # can not be null\n    assert max_aggregate(None) is None\n    # stdata must be a list of tuple\n    assert type(stdata) == type([])\n    assert stdata!= []\n    assert type(stdata[0]) == type((1,1))\n    "
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_aggregate([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == 'd'\nassert     max_aggregate([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 6)]) == 'd'\nassert     max_aggregate([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 6), ('f', 3)]) == 'c'\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_aggregate([(\"sj\", 20), (\"sj\", 22), (\"sj\", 21)]) == (22, \"sj\")\nassert     max_aggregate([(\"sj\", 20), (\"sj\", 22), (\"sj\", 21)]) == (22, \"sj\")\nassert     max_aggregate([(\"sj\", 20), (\"sj\", 22), (\"sj\", 21)]) == (21, \"sj\")\nassert     max_aggregate([(\"sj\", 20), (\"sj\", 22), (\"sj\", 21), (\"sj\", 21)]) == (22, \"sj\")\nassert     max_aggregate([(\"sj\", 20), (\"sj\", 22), (\"sj\", 21), (\"sj\", 21)]) == (22, \"sj\")\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_sublists(lst):\n    '''\n    Write a function to count the number of sublists within a list of lists.\n    '''\n    pass\n\nassert\nassert count_sublists([[1,2,3], [2,3]]) == 2\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate(\n[\n    (1,2),\n    (4,4),\n    (3,3),\n    (2,2),\n]) == 4\n\nassert max_aggregate(\n[\n    (1,2),\n    (4,4),\n    (3,3),\n    (2,2),\n    (3,3),\n]) == 5\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_aggregate2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmax_aggregate([\n    (1, 2),\n    (2, 5),\n    (3, 6),\n    (4, 9)\n]) == 9\nassert \nmax_aggregate([\n    (1, 2),\n    (2, 5),\n    (3, 6),\n    (4, 9),\n    (5, 8)\n]) == 9\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_aggregate([(1,5),(4,10)]) == 10\nassert     max_aggregate([(1,5),(4,10),(1,3)]) == 5\nassert     max_aggregate([(5,4),(4,10),(1,3)]) == 10\nassert     max_aggregate([(1,5),(4,10),(5,3)]) == 10\n\ndef max_aggregate_2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    Use a dictionary to implement the same problem.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_aggregate([(0, 10), (20, 100), (15, 75)]) == (20, 100)\nassert     max_aggregate([(1, 1), (2, 2), (3, 3)]) == (3, 3)\nassert     max_aggregate([(2, 2), (3, 3), (3, 3)]) == (3, 3)\nassert     max_aggregate([(1, 1), (2, 2), (3, 3), (4, 4)]) == (4, 4)\nassert     max_aggregate([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == (4, 4)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_binary_seq(3) == 6, \"Your program should be\" + str(6)\nassert     count_binary_seq(4) == 16, \"Your program should be\" + str(16)\n\ndef sum_binary_seq(n):\n    '''\n    Write a function that calculates the sum of all the n-bit binary sequences\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert count_binary_seq(0) == 0\nassert count_binary_seq(1) == 1\nassert count_binary_seq(2) == 2\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_binary_seq(1) == 4\nassert     count_binary_seq(2) == 8\nassert     count_binary_seq(3) == 5\nassert     count_binary_seq(4) == 4\nassert     count_binary_seq(5) == 4\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_binary_seq(0) == 1\ncount_binary_seq(1) == 4\ncount_binary_seq(2) == 15\ncount_binary_seq(3) == 9\ncount_binary_seq(4) == 25\ncount_binary_seq(5) == 20\ncount_binary_seq(6) == 18\ncount_binary_seq(7) == 25\ncount_binary_seq(8) == 16\ncount_binary_seq(9) == 18\ncount_binary_seq(10) == 26\ncount_binary_seq(11) == 8\ncount_binary_seq(12) == 22\ncount_binary_seq(13) == 14\ncount_binary_seq(14) == 21\ncount_binary_seq(15) == 19\ncount_binary_seq(16) == 26\ncount_binary_seq(17) == 15\ncount_binary_seq(18) == 23\ncount_binary_seq(19) == 19\ncount_binary_seq(20) == 20\ncount_binary_seq(21) == 27\ncount_binary_seq(22) == 27\ncount_binary_seq(23) == 27\ncount_binary_seq(24) == 24\ncount_binary_seq(25) == 24\ncount_binary_seq(26) == 27\ncount_binary_seq(27) == 22\ncount_binary_seq(28) == 22\ncount_binary_seq(29) == 24\ncount_binary_seq(30) == 26\ncount_binary_seq(31) == 24\ncount_binary_seq(32) == 24\ncount_binary_seq(33) == 24\ncount_binary_seq(34) == 24\ncount_binary_seq(35) == 24\ncount_binary_seq(36) == 24\ncount_binary_seq(37) == 25\ncount_binary_seq(38) == 25\ncount_binary_seq(39) == 24\ncount_binary_seq(40) == 25\ncount_binary_seq(41) == 23\ncount_binary_seq(42) == 25\ncount_binary_seq(43) == 24\ncount_binary_seq(44) == 25\ncount_binary_seq(45) == 25\ncount_binary_seq(46) == 25\ncount_binary_seq(47) == 25\ncount_binary_seq(48) == 25\ncount_binary_seq(49) == 25\ncount_binary_seq(50) == 26\ncount_binary_seq(51) == 26\ncount_binary_seq(52) == 25\ncount_binary_seq(53) == 24\ncount_binary_seq(54) == 25\ncount_binary_seq(55) == 25\ncount_binary_seq(56) == 25\ncount_binary_seq(57) == 24\ncount_binary_seq(58) == 25\ncount_binary_seq(59) == 25\ncount_binary_seq(60) == 25\ncount_binary_seq(61) == 25\ncount_binary_seq(62) == 25\ncount_binary_seq(63) == 25\ncount_binary_seq(64) == 24\ncount_binary_seq(65) == 25\ncount_binary_seq(66) == 25\ncount_binary_seq(67) == 25\ncount_binary_seq(68) == 25\ncount_binary_seq(69) == 25\ncount_binary_seq(70) == 25\ncount_binary_seq(71) == 25\ncount_binary_seq(72) == 25\ncount_binary_seq(73) == 25\ncount_binary_seq(74) == 25\ncount_binary_seq(75) == 25\ncount_binary_seq(76) == 24\ncount_binary_seq(77) == 25\ncount_binary_seq(78) == 25\ncount_binary_seq(79) == 25\ncount_binary_seq(80) == 25\ncount_binary_seq(81) == 25\ncount_binary_seq(82) == 25\ncount_binary_seq(83) == 25\ncount_binary_seq(84) == 25\ncount_binary_seq(85) == 24\ncount_binary_seq(86) == 25\ncount_binary_seq(87) == 25\ncount_binary_seq(88) == 25\ncount_binary_seq(89) == 25\ncount_binary_seq(90) == 24\ncount_binary_seq(91) == 25\ncount_binary_seq(92) == 25\ncount_binary_seq(93) == 25\ncount_binary_seq(94) == 24\ncount_binary_seq(95) == 25\ncount_binary_seq(96) == 25\ncount_binary_seq(97) == 25\ncount_binary_seq(98) == 25\ncount_binary_seq(99) == 25\ncount_binary_seq(100) == 24\ncount_binary_seq(101) == 25\ncount_binary_seq(102) == 25\ncount_binary_seq(103) == 25\ncount_binary_seq(104) == 24\ncount_binary_seq(105) == 25\ncount_binary_seq(106) == 25\ncount_binary_seq(107) == 25\ncount_binary_seq(108) == 25\ncount_binary_seq(109) == 25\ncount_binary_seq(110) == 24\ncount_binary_seq(111) == 24\ncount_binary_seq(112) == 25\ncount_binary_seq(113) == 25\ncount_binary_seq(114) == 25\ncount_binary_seq(115) == 25\ncount_binary_seq(116) == 24\ncount_binary_seq(117) == 25\ncount_binary_seq(118) == 25\ncount_binary_seq(119) == 25\ncount_binary_seq(120) == 25\ncount_binary_seq(121) == 24\ncount_binary_seq(122) == 25\ncount_binary_seq(123) == 25\ncount_binary_seq(124) == 25\ncount_binary_seq(125) == 25\ncount_binary_seq(126) == 25\ncount_binary_seq(127) == 25\ncount_binary_seq(128) == 25\ncount_binary_seq(129) == 25\ncount_binary_seq(130) == 25\ncount_binary_seq(131) == 25\ncount_binary_seq(132) == 25\ncount_binary_seq(133) == 25\ncount_binary_seq(134) == 24\ncount_binary_seq(135) == 25\ncount_binary_seq(136) == 25\ncount_binary_seq(137) == 25\ncount_binary_seq(138) == 24\ncount_binary_seq(139) == 25\ncount_binary_seq(140) == 25\ncount_binary_seq(141) == 25\ncount_binary_seq(142) == 25\ncount_binary_seq(143) == 25\ncount_binary_seq(144) == 24\ncount_binary_seq(145) == 25\ncount_binary_seq(146) == 25\ncount_binary_seq(147) == 25\ncount_binary_seq(148) == 24\ncount_binary_seq(149) == 25\ncount_binary_seq(150) == 25\ncount_binary_seq(151) == 25\ncount_binary_seq(152) == 25\ncount_binary_seq(153) == 25\ncount_binary_seq(154) == 25\ncount_binary_seq(155) == 25\ncount_binary_seq(156) == 25\ncount_binary_seq(157) == 25\ncount_binary_seq(158) == 25\ncount_binary_seq(159) == 25\ncount_binary_seq(160) == 25\ncount_binary_seq(161) == 25\ncount_binary_seq(162) == 25\ncount_binary_seq(163) == 25\ncount_binary_seq(164) == 24\ncount_binary_seq(165) == 25\ncount_binary_seq(166) == 25\ncount_binary_seq(167) == 25\ncount_binary_seq(168) == 25\ncount_binary_seq(169) == 25\ncount_binary_seq(170) == 25\ncount_binary_seq(171) == 25\ncount_binary_seq(172) == 25\ncount_binary_seq(173) == 25\ncount_binary_seq(174) == 25\ncount_binary_seq(175) == 25\ncount_binary_seq(176) == 25\ncount_binary_seq(177) == 25\ncount_binary_seq(178) == 25\ncount_binary_seq(179) ="
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(0) == 0, \"count_binary_seq for n = 0 should be 0\"\nassert count_binary_seq(1) == 1, \"count_binary_seq for n = 1 should be 1\"\nassert count_binary_seq(2) == 2, \"count_binary_seq for n = 2 should be 2\"\nassert count_binary_seq(3) == 7, \"count_binary_seq for n = 3 should be 7\"\nassert count_binary_seq(4) == 13, \"count_binary_seq for n = 4 should be 13\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    count_binary_seq(4) == 5\n    count_binary_seq(4) == 5\n    count_binary_seq(3) == 2\n    count_binary_seq(2) == 1\n\n\n'''\nSuppose an array, arr, of size n. All integers in array are in the range from 0 to n.\nAn element is said to be a dead element if it's value is greater than n / 2.\nA dead element is called a dead end.\n\nA dead element can be linked to other dead elements, however, each dead element can be linked to only one element\n in the same array.\nFind the number of dead ends in the array.\n'''\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(count_binary_seq(0))\nprint(count_binary_seq(1))\nprint(count_binary_seq(2))\nprint(count_binary_seq(3))\nprint(count_binary_seq(4))\nprint(count_binary_seq(5))\nprint(count_binary_seq(6))\nprint(count_binary_seq(7))\nprint(count_binary_seq(8))\nprint(count_binary_seq(9))\nprint(count_binary_seq(10))\nprint(count_binary_seq(11))\nprint(count_binary_seq(12))\nprint(count_binary_seq(13))\nprint(count_binary_seq(14))\nprint(count_binary_seq(15))\nprint(count_binary_seq(16))\nprint(count_binary_seq(17))\nprint(count_binary_seq(18))\nprint(count_binary_seq(19))\nprint(count_binary_seq(20))\nprint(count_binary_seq(21))\nprint(count_binary_seq(22))\nprint(count_binary_seq(23))\nprint(count_binary_seq(24))\nprint(count_binary_seq(25))\nprint(count_binary_seq(26))\nprint(count_binary_seq(27))\nprint(count_binary_seq(28))\nprint(count_binary_seq(29))\nprint(count_binary_seq(30))\nprint(count_binary_seq(31))\nprint(count_binary_seq(32))\nprint(count_binary_seq(33))\nprint(count_binary_seq(34))\nprint(count_binary_seq(35))\nprint(count_binary_seq(36))\nprint(count_binary_seq(37))\nprint(count_binary_seq(38))\nprint(count_binary_seq(39))\nprint(count_binary_seq(40))\nprint(count_binary_seq(41))\nprint(count_binary_seq(42))\nprint(count_binary_seq(43))\nprint(count_binary_seq(44))\nprint(count_binary_seq(45))\nprint(count_binary_seq(46))\nprint(count_binary_seq(47))\nprint(count_binary_seq(48))\nprint(count_binary_seq(49))\nprint(count_binary_seq(50))\nprint(count_binary_seq(51))\nprint(count_binary_seq(52))\nprint(count_binary_seq(53))\nprint(count_binary_seq(54))\nprint(count_binary_seq(55))\nprint(count_binary_seq(56))\nprint(count_binary_seq(57))\nprint(count_binary_seq(58))\nprint(count_binary_seq(59))\nprint(count_binary_seq(60))\nprint(count_binary_seq(61))\nprint(count_binary_seq(62))\nprint(count_binary_seq(63))\nprint(count_binary_seq(64))\nprint(count_binary_seq(65))\nprint(count_binary_seq(66))\nprint(count_binary_seq(67))\nprint(count_binary_seq(68))\nprint(count_binary_seq(69))\nprint(count_binary_seq(70))\nprint(count_binary_seq(71))\nprint(count_binary_seq(72))\nprint(count_binary_seq(73))\nprint(count_binary_seq(74))\nprint(count_binary_seq(75))\nprint(count_binary_seq(76))\nprint(count_binary_seq(77))\nprint(count_binary_seq(78))\nprint(count_binary_seq(79))\nprint(count_binary_seq(80))\nprint(count_binary_seq(81))\nprint(count_binary_seq(82))\nprint(count_binary_seq(83))\nprint(count_binary_seq(84))\nprint(count_binary_seq(85))\nprint(count_binary_seq(86))\nprint(count_binary_seq(87))\nprint(count_binary_seq(88))\nprint(count_binary_seq(89))\nprint(count_binary_seq(90))\nprint(count_binary_seq(91))\nprint(count_binary_seq(92))\nprint(count_binary_seq(93))\nprint(count_binary_seq(94))\nprint(count_binary_seq(95))\nprint(count_binary_seq(96))\nprint(count_binary_seq(97))\nprint(count_binary_seq(98))\nprint(count_binary_seq(99))\nprint(count_binary_seq(100))\nprint(count_binary_seq(101))\nprint(count_binary_seq(102))\nprint(count_binary_seq(103))\nprint(count_binary_seq(104))\nprint(count_binary_seq(105))\nprint(count_binary_seq(106))\nprint(count_binary_seq(107))\nprint(count_binary_seq(108))\nprint(count_binary_seq(109))\nprint(count_binary_seq(110))\nprint(count_binary_seq(111))\nprint(count_binary_seq(112))\nprint(count_binary_seq(113))\nprint(count_binary_seq(114))\nprint(count_binary_seq(115))\nprint(count_binary_seq(116))\nprint(count_binary_seq(117))\nprint(count_binary_seq(118))\nprint(count_binary_seq(119))\nprint(count_binary_seq(120))\nprint(count_binary_seq(121))\nprint(count_binary_seq(122))\nprint(count_binary_seq(123))\nprint(count_binary_seq(124))\nprint(count_binary_seq(125))\nprint(count_binary_seq(126))\nprint(count_binary_seq(127))\nprint(count_binary_seq(128))\nprint(count_binary_seq(129))\nprint(count_binary_seq(130))\nprint(count_binary_seq(131))\nprint(count_binary_seq(132))\nprint(count_binary_seq(133))\nprint(count_binary_seq(134))\nprint(count_binary_seq(135))\nprint(count_binary_seq(136))\nprint(count_binary_seq(137))\nprint(count_binary_seq(138))\nprint(count_binary_seq(139))\nprint(count_binary_seq(140))\nprint(count_binary_seq(141))\nprint(count_binary_seq(142))\nprint(count_binary_seq(143))\nprint(count_binary_seq(144))\nprint(count_binary_seq(145))\nprint(count_binary_seq(146))\nprint(count_binary_seq(147))\nprint(count_binary_seq(148))\nprint(count_binary_seq(149))\nprint(count_binary_seq(150))\nprint(count_binary_seq(151))\nprint(count_binary_seq(152))\nprint(count_binary_seq(153))\nprint(count_binary_seq(154))\nprint(count_binary_seq(155))\nprint(count_binary_seq(156))\nprint(count_binary_seq(157))\nprint(count_binary_seq(158))\nprint(count_binary_seq(159))\nprint(count_binary_seq(160))\nprint(count_binary_seq(161))\nprint(count_binary_seq(162))\nprint(count_binary_seq(163))\nprint(count_binary_seq(164))\nprint(count_binary_seq(165))\nprint(count_binary_seq(166))\nprint(count_binary_seq(167))\nprint(count_binary_seq(168))\nprint(count_binary_seq(169))\nprint(count_binary_seq(170))\nprint(count_binary_seq(171))\nprint(count_binary_seq(172))\nprint(count_binary_seq(173))\nprint(count_binary_seq(174))\nprint(count_binary_seq(175))\nprint(count_binary_seq(176))\nprint(count_binary_seq(177))\nprint(count_binary_seq(178))\nprint(count_binary_seq(17"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    count_binary_seq(1) == 4\n    count_binary_seq(2) == 5\n    count_binary_seq(3) == 8\n    count_binary_seq(4) == 11\n    count_binary_seq(5) == 14\n    count_binary_seq(6) == 21\n    count_binary_seq(7) == 28\n    count_binary_seq(8) == 35\n    count_binary_seq(9) == 42\n    count_binary_seq(10) == 50\n    count_binary_seq(11) == 58\n    count_binary_seq(12) == 68\n    count_binary_seq(13) == 77\n    count_binary_seq(14) == 86\n    count_binary_seq(15) == 95\n    count_binary_seq(16) == 104\n    count_binary_seq(17) == 113\n    count_binary_seq(18) == 122\n    count_binary_seq(19) == 131\n    count_binary_seq(20) == 140\n    count_binary_seq(21) == 149\n    count_binary_seq(22) == 158\n    count_binary_seq(23) == 167\n    count_binary_seq(24) == 176\n    count_binary_seq(25) == 185\n    count_binary_seq(26) == 194\n    count_binary_seq(27) == 203\n    count_binary_seq(28) == 212\n    count_binary_seq(29) == 221\n    count_binary_seq(30) == 230\n    count_binary_seq(31) == 239\n    count_binary_seq(32) == 248\n    count_binary_seq(33) == 257\n    count_binary_seq(34) == 266\n    count_binary_seq(35) == 275\n    count_binary_seq(36) == 284\n    count_binary_seq(37) == 293\n    count_binary_seq(38) == 302\n    count_binary_seq(39) == 311\n    count_binary_seq(40) == 320\n    count_binary_seq(41) == 329\n    count_binary_seq(42) == 338\n    count_binary_seq(43) == 347\n    count_binary_seq(44) == 356\n    count_binary_seq(45) == 365\n    count_binary_seq(46) == 374\n    count_binary_seq(47) == 384\n    count_binary_seq(48) == 393\n    count_binary_seq(49) == 402\n    count_binary_seq(50) == 411\n    count_binary_seq(51) == 420\n    count_binary_seq(52) == 429\n    count_binary_seq(53) == 438\n    count_binary_seq(54) == 447\n    count_binary_seq(55) == 456\n    count_binary_seq(56) == 464\n    count_binary_seq(57) == 473\n    count_binary_seq(58) == 482\n    count_binary_seq(59) == 491\n    count_binary_seq(60) == 500\n    count_binary_seq(61) == 519\n    count_binary_seq(62) == 530\n    count_binary_seq(63) == 539\n    count_binary_seq(64) == 548\n    count_binary_seq(65) == 557\n    count_binary_seq(66) == 566\n    count_binary_seq(67) == 575\n    count_binary_seq(68) == 584\n    count_binary_seq(69) == 593\n    count_binary_seq(70) == 602\n    count_binary_seq(71) == 611\n    count_binary_seq(72) == 620\n    count_binary_seq(73) == 629\n    count_binary_seq(74) == 638\n    count_binary_seq(75) == 647\n    count_binary_seq(76) == 656\n    count_binary_seq(77) == 665\n    count_binary_seq(78) == 674\n    count_binary_seq(79) == 683\n    count_binary_seq(80) == 692\n    count_binary_seq(81) == 701\n    count_binary_seq(82) == 720\n    count_binary_seq(83) == 729\n    count_binary_seq(84) == 738\n    count_binary_seq(85) == 747\n    count_binary_seq(86) == 756\n    count_binary_seq(87) == 765\n    count_binary_seq(88) == 774\n    count_binary_seq(89) == 783\n    count_binary_seq(90) == 792\n    count_binary_seq(91) == 801\n    count_binary_seq(92) == 810\n    count_binary_seq(93) == 819\n    count_binary_seq(94) == 828\n    count_binary_seq(95) == 837\n    count_binary_seq(96) == 846\n    count_binary_seq(97) == 855\n    count_binary_seq(98) == 864\n    count_binary_seq(99) == 873\n    count_binary_seq(100) == 882\n    count_binary_seq(101) == 891\n    count_binary_seq(102) == 900\n    count_binary_seq(103) == 909\n    count_binary_seq(104) == 918\n    count_binary_seq(105) == 927\n    count_binary_seq(106) == 936\n    count_binary_seq(107) == 945\n    count_binary_seq(108) == 954\n    count_binary_seq(109) == 963\n    count_binary_seq(110) == 972\n    count_binary_seq(111) == 981\n    count_binary_seq(112) == 990\n    count_binary_seq(113) == 999\n    count_binary_seq(114) == 1008\n    count_binary_seq(115) == 1017\n    count_binary_seq(116) == 1026\n    count_binary_seq(117) == 1035\n    count_binary_seq(118) == 1044\n    count_binary_seq(119) == 1053\n    count_binary_seq(120) == 1062\n    count_binary_seq(121) == 1071\n    count_binary_seq(122) == 1080\n    count_binary_seq(123) == 1089\n    count_binary_seq(124) == 1098\n    count_binary_seq(125) == 1107\n    count_binary_seq(126) == 1116\n    count_binary_seq(127) == 1125\n    count_binary_seq(128) == 1134\n    count_binary_seq(129) == 1143\n    count_binary_seq(130) == 1152\n    count_binary_seq(131) == 1161\n    count_binary_seq(132) == 1170\n    count_binary_seq(133) == 1179\n    count_binary_seq(134) == 1188\n    count_binary_seq(135) == 1197\n    count_binary_seq(136) == 1216\n    count_binary_seq(137) == 1225\n    count_binary_seq(138) == 1234\n    count_binary_seq(139) == 1243\n    count_binary_seq(140) == 1252\n    count_binary_seq(141) == 1261\n    count_binary_seq(142) == 1270\n    count_binary_seq(143) == 1279\n    count_binary_seq(144) == 1288\n    count_binary_seq(145) == 1297\n    count_binary_seq(146) == 1306\n    count_binary_seq(147) == 1315\n    count_binary_seq(148) == 1324\n    count_binary_seq(149) == 1333\n    count_binary_seq(150) == 1342\n    count_binary_seq(151) == 1351\n    count_binary_seq(152) == 1360\n    count_binary_seq(153) == 1369\n    count_binary_seq(154) == 1378\n    count_binary_seq(155) == 1387\n    count_binary_seq(156) == 1396\n    count_binary_seq(157) ="
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_depth({0: {1: {2: {3: {4: {5: 5, 6: {}}}}}}}) == 2\nassert     dict_depth({0: {1: {2: {3: {4: {5: {6: {}}}}}}}}) == 3\nassert     dict_depth({0: {1: {2: {3: {4: {5: 5, 6: {}}}}}}}) == 2\nassert     dict_depth({0: {1: {2: {3: {4: {5: {6: 6, 7: {}}}}}}}}) == 3\nassert     dict_depth({0: {1: {2: {3: {4: {5: 5, 6: 6, 7: {}}}}}}}) == 2\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         dict_depth({1:2, 2:3, 3:4}) == 3\nassert         dict_depth({'a':{'b':1, 'c':2}, 'c':{'d':3, 'e':4}}) == 2\nassert         dict_depth({'a':{'b':1, 'c':2}, 'c':{'d':3}}) == 0\nassert         dict_depth({'a':'b'}) == 0\nassert         dict_depth(None) == 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({\"a\": 1, \"b\": 2}) == 1, \"dict_depth({'a': 1, 'b': 2}) should be 1\"\nassert     dict_depth({\"a\": {'a1': 1, 'a2': 2}, \"b\": 2}) == 2, \"dict_depth({'a': {'a1': 1, 'a2': 2}, 'b': 2}) should be 2\"\nassert     dict_depth({\"a\": 1, \"b\": {'b1': 1, 'b2': 2}}) == 1, \"dict_depth({'a': 1, 'b': {'b1': 1, 'b2': 2}}) should be 1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_depth({'a': 1, 'b': 2, 'c':3}) == 3\nassert     dict_depth({1: 1, 2: 2, 3: 3}) == 3\nassert     dict_depth({'a': 1, 'b': {'c': 3}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth({'a':1, 'b':2}) == 2\nassert     dict_depth({}) == 0\nassert     dict_depth({'a':{'b':2}}) == 3\nassert     dict_depth({'a':{'b':2}, 'c':3}) == 2\nassert     dict_depth({'a':[1,2,3,{'c':4}]}) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({0: {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}}}} == 3)\nassert     dict_depth({0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}}}) == 3\nassert     dict_depth({0: {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}}}}) == 3\nassert     dict_depth({0: {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}}}}) == 2\nassert     dict_depth({}) == 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({1:2, 3:4}) == 1\nassert     dict_depth({1:2, 3:4, 5:6}) == 2\nassert     dict_depth({1:2, 3:4, 5:6, 7:8}) == 3"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({})    ==     0, \"Input: {} Output: {}\".format({}, 0)\nassert     dict_depth({1: 2}) ==     1, \"Input: {} Output: {}\".format({1: 2}, 1)\nassert     dict_depth({1: {1: {1: 2}, 2: {1: 1}}, 2: 1}) ==     2, \"Input: {} Output: {}\".format({1: {1: {1: 2}, 2: {1: 1}}, 2: 1}, 2)\nassert     dict_depth({1: {1: {1: 2}, 2: {1: 1}}, 2: {1: 1}}) ==     2, \"Input: {} Output: {}\".format({1: {1: {1: 2}, 2: {1: 1}}, 2: {1: 1}}, 2)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_depth({}) == 0, \"Empty dictionary has no depth\"\nassert     dict_depth({'a': 1}) == 1, \"Simple dictionary has one depth\"\nassert     dict_depth({'a': {'b': 2}}) == 2, \"Nested dictionary has two depths\"\nassert     dict_depth({'a': {'b': {'c': 3}}}) == 3, \"Nested dictionary with more than one level has three depths\"\n\n'''\nExpected Output:\ndict_depth({}) == 0\ndict_depth({'a': 1}) == 1\ndict_depth({'a': {'b': 2}}) == 2\ndict_depth({'a': {'b': {'c': 3}}}) == 3\n'''\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_Element(arr,ranges,rotations,index) : \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Element([1,2,3,4],[[0,1],[0,2]],[[0,1],[2,3]],0) == 1\nassert     find_Element([1,2,3,4],[[0,1],[0,2]],[[0,1],[1,2]],1) == 2\nassert     find_Element([1,2,3,4],[[0,1],[0,2]],[[0,1],[1,2]],2) == 3\nassert     find_Element([1,2,3,4],[[0,1],[0,2]],[[0,1],[1,2]],3) == 4\nassert     find_Element([1,2,3,4],[[0,1],[0,2]],[[0,1],[1,2]],4) == 4\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = list(map(int,input().split()))\n    ranges = list(map(int,input().split()))\n    rotations = list(map(int,input().split()))\n    index = int(input())\n    find_Element(arr,ranges,rotations,index)"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Element([1, 2, 3, 4],[[2, 3], [3, 4], [4, 5]],1,0) == 1, \"Wrong answer\"\nassert     find_Element([1, 2, 3, 4],[[2, 3], [3, 4], [4, 5]],2,1) == 2, \"Wrong answer\"\nassert     find_Element([1, 2, 3, 4],[[2, 3], [3, 4], [4, 5]],3,2) == 3, \"Wrong answer\"\nassert     find_Element([1, 2, 3, 4],[[2, 3], [3, 4], [4, 5]],3,3) == 4, \"Wrong answer\"\nassert     find_Element([1, 2, 3, 4],[[2, 3], [3, 4], [4, 5]],3,4) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Element([0,1,2,3],[[1,3,0,2],[4,0,3,1],[6,4,2,5]],[0,1],2)==1\nassert     find_Element([0,1,2,3],[[1,3,0,2],[4,0,3,1],[6,4,2,5]],[0,2],2)==3\nassert     find_Element([0,1,2,3],[[1,3,0,2],[4,0,3,1],[6,4,2,5]],[0,3],2)==2\nassert     find_Element([0,1,2,3],[[1,3,0,2],[4,0,3,1],[6,4,2,5]],[0,4],2)==0\nassert     find_Element([0,1,2,3],[[1,3,0,2],[4,0,3,1],[6,4,2,5]],[0,5],2)==1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\nprint(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n\narr = [1,2,3,4,5,6,7,8]\nranges = [[1,2],[2,3],[3,4]]\nrotations = [[0,1],[0,3],[1,2]]\nindex = 2\nprint(find_Element(arr,ranges,rotations,index))\nprint(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\nprint(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n\narr = [1,2,3,4,5,6,7,8]\nranges = [[1,2],[2,3],[3,4]]\nrotations = [[0,1],[0,3],[1,2]]\nindex = 4\nprint(find_Element(arr,ranges,rotations,index))\nprint(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\nprint(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n\narr = [1,2,3,4,5,6,7,8]\nranges = [[1,2],[2,3],[3,4]]\nrotations = [[0,1],[0,3],[1,2]]\nindex = 5\nprint(find_Element(arr,ranges,rotations,index))\nprint(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\nprint(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Element([0,1,2,3,4,5,6,7,8],[3,2,1,0,1,0,3,2,1],3,2) == 7\nassert     find_Element([0,1,2,3,4,5,6,7,8],[3,2,1,0,1,0,3,2,1],0,3) == 0\nassert     find_Element([0,1,2,3,4,5,6,7,8],[3,2,1,0,1,0,3,2,1],3,5) == 3\n\n'''\nThe function should return the element at the index specified.\n'''\n\ndef find_element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Element([1,2,3],(1,2),0,1) == 3\nassert     find_Element([1,2,3],(1,2),1,1) == 1\nassert     find_Element([1,2,3],(1,2),2,1) == 1\nassert     find_Element([1,2,3],(1,2),3,1) == 2\nassert     find_Element([1,2,3],(1,2),0,2) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Element([1,2,3,4,5],[0,1,3],4,3) == 2, \"find_Element failed\"\nassert     find_Element([1,2,3,4,5],[0,1,3],4,4) == 3, \"find_Element failed\"\nassert     find_Element([1,2,3,4,5],[0,1,3],4,5) == 4, \"find_Element failed\"\nassert     find_Element([1,2,3,4,5],[0,1,3],4,6) == 5, \"find_Element failed\"\nassert     find_Element([1,2,3,4,5],[0,1,3],4,7) == 5, \"find_Element failed\"\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nstart_withp(['peter', 'about', 'project', 'peter']) == ['peter', 'project']"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nwords = ['papa', 'papay', 'pape', 'papp', 'pappp', 'pppp', 'pppap', 'papppppp', 'papppppppp']\nassert words == start_withp(words) == ['papa', 'papay']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     start_withp([\"pug\",\"pugger\",\"puggers\",\"puggersthis\",\"kebab\",\"kebabs\",\"puggy\"]) == ('pug','pugger')\nassert     start_withp([\"python\",\"pythoner\",\"pythoners\"]) == ('pythoner','pythoners')\nassert     start_withp([\"java\",\"jvms\",\"jvmser\",\"jvmsers\"]) == ('jvms','jvmser')\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef half_words(words):\n    '''\n    Write a function to return half of the words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     start_withp(['p-s','p-q','p-r','p-t','p-u','p-v','p-w','p-x','p-y','p-z','p-0','p-1','p-2','p-3','p-4','p-5','p-6','p-7','p-8','p-9']) == ['p-s','p-q']\nassert     start_withp(['p-s','p-q','p-r','p-t','p-u','p-v','p-w','p-x','p-y','p-z','p-0','p-1','p-2','p-3','p-4','p-5','p-6','p-7','p-8','p-9']) == ['p-s','p-q']\nassert     start_withp(['p-s','p-q','p-r','p-t','p-u','p-v','p-w','p-x','p-y','p-z','p-0','p-1','p-2','p-3','p-4','p-5','p-6','p-7','p-8','p-9']) == ['p-s','p-q']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(start_withp([\"pancakes\", \"peanutbutter\", \"pepper\"]))\nprint(start_withp([\"pancakes\", \"pepper\"]))\nprint(start_withp([\"pancakes\"]))\n\ndef start_with(words):\n    '''\n    Write a function to return a list of words that start with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     start_withp([\"hello\",\"world\",\"goodbye\",\"pls\",\"k\",\"sir\",\"paul\",\"f\"]) == (\"hello\",\"world\")\nassert    start_withp([\"h\",\"e\",\"l\",\"l\",\"o\"]) ==    (\"hello\",\"world\")\nassert    start_withp([\"k\",\"s\",\"i\",\"r\",\"p\",\"l\",\"a\"]) ==    (\"k\",\"sir\")\nassert    start_withp([\"x\",\"y\",\"z\"]) ==    None\nassert    start_withp([\"d\",\"a\",\"c\",\"t\",\"t\"]) ==    None\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     start_withp([\"I\", \"am\", \"p\", \"y\", \"u\"]) == [\"p\", \"u\"]\nassert start_withp([\"A\", \"am\", \"p\", \"u\"]) == []\nassert start_withp([\"p\", \"u\"]) == []\nassert start_withp([\"A\", \"P\"]) == [\"p\", \"u\"]\nassert start_withp([\"A\", \"p\", \"U\"]) == [\"p\", \"u\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp([\"april\", \"june\"]) == [\"april\", \"june\"]\nassert start_withp([\"april\", \"june\", \"may\"]) == [\"april\", \"june\"]\nassert start_withp([\"april\", \"june\", \"october\"]) == [\"april\", \"june\"]\nassert start_withp([\"april\", \"june\", \"october\", \"september\", \"august\"]) == [\"april\", \"june\"]\nassert start_withp([\"april\", \"june\", \"october\", \"september\", \"august\", \"september\"]) == [\"april\", \"june\"]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_increasing_subseq([], 0, 0, 0) == 0\nassert     max_sum_increasing_subseq([3, 2, 1, 5, 7], 4, 3, 2) == 5\nassert     max_sum_increasing_subseq([4, 2, 3, 5, 7], 4, 3, 1) == 6\nassert     max_sum_increasing_subseq([4, 2, 3, 5, 7], 4, 3, 2) == 7\nassert     max_sum_increasing_subseq([5, 1, 4, 3, 2], 4, 2, 1) == 5\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    prefix_sum = 0\n    max_sum = 0\n    \n    for i in range(index):\n        prefix_sum = prefix_sum + a[i]\n    \n    for i in range(index, n):\n        max_sum = max(prefix_sum + a[i], max_sum)\n        prefix_sum = max(prefix_sum, 0)\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum_increasing_subseq([1,3,5,4], 5, 3, 3) == 3\nassert     max_sum_increasing_subseq([1,3,5,4], 5, 2, 3) == 1\nassert     max_sum_increasing_subseq([1,3,5,4], 5, 1, 3) == 3\nassert     max_sum_increasing_subseq([1,3,5,4], 5, 0, 3) == 4\nassert     max_sum_increasing_subseq([1,2,3], 3, 1, 2) == 2\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_increasing_subseq([10,20,10,10,30,40], 6, 2) == 120, 'failed'\nassert     max_sum_increasing_subseq([10,20,10,10,30,40], 6, 3) == 50, 'failed'\nassert     max_sum_increasing_subseq([10,20,10,10,30,40], 5, 2) == 120, 'failed'\nassert     max_sum_increasing_subseq([10,20,10,10,30,40], 5, 3) == 60, 'failed'\n\n'''\nTime Complexity : O(n)\nSpace Complexity: O(1)\n'''\ndef max_sum_increasing_subseq_second_approach(a, n):\n    '''\n    Use dynamic programming to calculate the maximum sum of increasing subsequence\n    '''\n    # The array to store the results\n    max_sum = [0 for i in range(n+1)]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nGiven a number N, the task is to print all the possible increasing subsequence of length N.\n\nNote: This is a related problem, also called the Fibonacci sequence.\n\nExamples:\n\nInput: N = 4\nOutput: {1, 1, 2, 3, 5, 9, 10, 20, 21, 25, 26, 39}\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_increasing_subseq([10,20,10,5,3,5], 5, 5, 3) == 33\nassert     max_sum_increasing_subseq([10,20,10,5,3,5], 5, 3, 3) == 22\nassert     max_sum_increasing_subseq([10,20,10,5,3,5], 5, 4, 3) == 31\nassert     max_sum_increasing_subseq([10,20,10,5,3,5], 5, 5, 5) == 10\nassert     max_sum_increasing_subseq([10,20,10,5,3,5], 5, 3, 5) == 22\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n\n\ndef max_sum_increasing_subseq(a, n):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n\ndef max_sum_increasing_subseq(a, n):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum_increasing_subseq([4, 5, 6, 7], 4, 3, 1) == (4, 6)\nassert     max_sum_increasing_subseq([4, 5, 6, 7], 2, 0, 4) == (4, 4)\nassert     max_sum_increasing_subseq([4, 5, 6, 7], 2, 0, 5) == (5, 6)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nimport itertools\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Note: the maximum sum increasing subsequence does not need to start from index 0, but it needs to start from index 1.\n    '''\n    # Time complexity: O(n * (n + 1))\n    # Space complexity: O(n)\n\n    prefix_sum = [0]\n    for i in a:\n        prefix_sum.append(prefix_sum[-1] + i)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex((1,2,3),3,3) == (1,2,3)\nassert     colon_tuplex((1,2,3),1,2) == (1,2,3)\nassert     colon_tuplex((1,2,3),2,1) == (1,2,3)\nassert     colon_tuplex((1,2,3),3,1) == (1,2,3)\nassert     colon_tuplex((1,2,3),3,0) == (1,2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     colon_tuplex((1,2,3),3,4) == (1,2,3)\nassert     colon_tuplex((1,2,3),3,3) == (1,2,3)\nassert     colon_tuplex((1,2,3),3,2) == (1,2)\nassert     colon_tuplex((1,2,3),2,3) == (1,2,3)\nassert     colon_tuplex((1,2,3),2,4) == (1,2)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     colon_tuplex((1,2,3,4),2,2) == ((1,2),(3,4))\nassert     colon_tuplex((1,2,3,4),2,3) == ((1,2),(3,4))\nassert     colon_tuplex((1,2,3,4),2,4) == ((1,2),(3,4))\nassert     colon_tuplex((1,2,3,4),2,5) == ((1,2),(3,4))\nassert     colon_tuplex((1,2,3,4),3,3) == ((1,2),(3,4))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_digit(n):\n    '''\n    Write a function to get the digit of a number.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     colon_tuplex((\"a\",\"b\",\"c\"),3,4)==('a','b','c'),\\\n        \"colon_tuplex(\\\"a,b,c\\\",3,4) should be ('a', 'b', 'c')\"\nassert     colon_tuplex((\"a\",\"b\",\"c\"),2,3)==('a',),\\\n        \"colon_tuplex(\\\"a,b,c\\\",2,3) should be ('a')\"\nassert     colon_tuplex((\"a\",\"b\",\"c\"),3,4)==('c','b','a'),\\\n        \"colon_tuplex(\\\"a,b,c\\\",3,4) should be ('c', 'b', 'a')\"\nassert     colon_tuplex((\"a\",\"b\",\"c\"),2,3)==('c',),\\\n        \"colon_tuplex(\\\"a,b,c\\\",2,3) should be ('c')\"\nassert     colon_tuplex((\"a\",\"b\",\"c\"),3,4)==('c',),\\\n        \"colon_tuplex(\\\"a,b,c\\\",3,4) should be ('c')\"\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef fn(x,y):\n    \"\"\"\n    Write a function to multiply two numbers using\n    recursion.\n    \"\"\"\n    pass\n\ndef fnn(x,y):\n    '''\n    Write a function to multiply two numbers using\n    recursion.\n    '''\n    pass\n\ndef fn_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    pass\n\ndef fnn_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     colon_tuplex((1,2),2,3) == (1,2,3)\nassert     colon_tuplex((1,2,3),1,3) == (1,2,3)\nassert     colon_tuplex((1,2),1,3) == (1,2)\nassert     colon_tuplex((1,2),2,2) == (1,2)\nassert     colon_tuplex((1,2,3),2,1) == (1,2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     colon_tuplex([[1,2,3],[4,5,6],[7,8,9]],3,4) == ((1,2,3),(4,5,6),(7,8,9))\nassert     colon_tuplex([[1,2,3],[4,5,6],[7,8,9]],2,2) == ((1,2,3),(4,5,6),(7,8,9))\nassert     colon_tuplex((1,2,3),3,3) == ((1,2,3),(1,2,3),(1,2,3))\nassert     colon_tuplex(1,2,3) == ((1,2,3),(1,2,3),(1,2,3))\nassert     colon_tuplex(1,2,3) == ((1,2,3),(1,2,3),(1,2,3))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef line_of_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a line of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert colon_tuplex((1,2,3),3,4) == ((1, 2, 3), (3, 4, (1, 2, 3))))\nassert colon_tuplex((1,2,3),4,3) == (((1, 2, 3), (4, 5, 6)), (3, (4, 5, 6), (1, 2, 3)))\nassert colon_tuplex((1,2,3),3,6) == (((1, 2, 3), (3, 4, 5)), (6, (3, 4, 5), (1, 2, 3)))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     large_product([2,3,4], [1,2,3], 3) == [12,12,12]\nassert     large_product([2,4,6], [1,2,3], 3) == [6,6,24]\nassert     large_product([-1,6,5], [0,6,10], 3) == [-1,6,120]\nassert     large_product([-3, -3, -2, -1, 0, 1, 2, 3, 4, 5], [-1, -3, -2, -1, 0, 1, 2, 3, 4, 5], 3) == [-4, -2, -2, -3, 0, 1, 2, 3, 4, 5]"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     large_product([1, 2], [3, 4], 2) == [120, 144]\nassert     large_product([4, 9], [9, 4], 2) == [18, 27]\nassert     large_product([1, 2], [3, 4], 3) == [120, 144, 297]\nassert     large_product([4, 9], [9, 4], 3) == [18, 27, 288]"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('Largest product from two lists:')\nnums1 = [-1, -3, -5, -10, -13, -17]\nnums2 = [4, 6, 8, 2]\nprint(large_product(nums1, nums2, 2))\nprint(large_product(nums1, nums2, 3))\nprint(large_product(nums1, nums2, 4))\nprint(large_product(nums1, nums2, 5))\nprint(large_product(nums1, nums2, 6))\nprint(large_product(nums1, nums2, 7))\nprint(large_product(nums1, nums2, 8))\nprint(large_product(nums1, nums2, 9))\nprint(large_product(nums1, nums2, 10))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == \"__main__\":\n    # list1 = [1,2,3]\n    # list2 = [-3,4,-2]\n    list1 = [2,3,4,6,9]\n    list2 = [-1,-1,2]\n    print(large_product(list1,list2,4))\n    print(large_product(list1,list2,5))\n    print(large_product(list1,list2,6))\n    print(large_product(list1,list2,7))\n    print(large_product(list1,list2,8))\n    print(large_product(list1,list2,9))\n    print(large_product(list1,list2,10))"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # N = len(nums1)\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    # nums1 = np.array(nums1)\n    # nums2 = np.array(nums2)\n    res = []\n    for i in range(N):\n        p = nums1[i]*nums2[i]\n        if p not in res:\n            res.append(p)\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     large_product([1, 2, 3, 4], [3, 7], 2) == 14, \"Wrong!\"\nassert large_product([1, 3, 5, 10, 15], [2, 5, 10, 20], 4) == 120, \"Wrong!\"\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     large_product([1, 4, 6, 8], [4, 8, 16, 32], 2) == [4, 32]\nassert large_product([1, 2, 3, 4], [1, 2, 3, 4], 2) == [1, 2]\nassert large_product([1, 2, 3], [1, 2, 3, 4], 2) == [1, 2]\nassert large_product([3], [3, 3, 3], 3) == []\nassert large_product([10, 20, 30, 40], [5, 6, 7, 8], 2) == [60]\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmaximum(4,5) == 5, \"ERROR,maximum is wrong!\"\nprint(\"\\n\")\nassert \nmaximum(5,6) == 6, \"ERROR,maximum is wrong!\"\nprint(\"\\n\")\nassert \nmaximum(4,4) == 4, \"ERROR,maximum is wrong!\"\nprint(\"\\n\")\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum(10, 5) == 10\nassert     maximum(10, 15) == 15\nassert     maximum(10, 5) == 10\nassert     maximum(-1, -10) == -1\nassert     maximum(-1, -100) == -1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(2,3) == 3, \"the actual output is {}\".format(maximum(2,3))\nassert     maximum(3,2) == 3, \"the actual output is {}\".format(maximum(3,2))\nassert     maximum(7,6) == 7, \"the actual output is {}\".format(maximum(7,6))\nassert     maximum(0,5) == 5, \"the actual output is {}\".format(maximum(0,5))\nassert     maximum(0,0) == 0, \"the actual output is {}\".format(maximum(0,0))\nprint(\"You have successfully passed the maximum test cases\")\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum(1,2) == 2\nassert     maximum(2,1) == 2\nassert     maximum(2,2) == 2\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum(1,2) ==     2\nassert    maximum(2,1) ==     2\nassert     maximum(3,4) ==     4\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(2,3) == 3\nassert     maximum(3,2) == 3\nassert     maximum(1,1) == 1\nassert     maximum(10,20) == 20\nassert     maximum(4,4) == 4\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum(5,6) == 6, 'Wrong answer'\nassert     maximum(2,5) == 5, 'Wrong answer'\nassert     maximum(5,3) == 5, 'Wrong answer'\nassert     maximum(6,3) == 6, 'Wrong answer'\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum(1,2) ==     2\nassert     maximum(-1,0) ==     0\nassert     maximum(0,0) ==     0\nassert     maximum(0,0) ==     0\nassert     maximum(-1,1) ==     1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple(\"\") == ()\nassert     string_to_tuple(\"a\") == (\"a\",)\nassert     string_to_tuple(\"abc\") == (\"abc\",)\nassert     string_to_tuple(\"a,bc\") == (\"a\", \"bc\")\nassert     string_to_tuple(\"a,bc,def\") == (\"a\", \"bc\", \"def\")\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('Hi') == ('H', 'i'), \"Wrong output\"\nassert     string_to_tuple('One') == ('O', 'n'), \"Wrong output\"\nassert     string_to_tuple('A') == ('A',), \"Wrong output\"\nassert     string_to_tuple('Hello World') == ('H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd'), \"Wrong output\"\nassert     string_to_tuple('This is a test.') == ('T', 'h', 'i','s','', 'a','','s', 'e', 'a','m', 'i', 'n', 'e', '.'), \"Wrong output\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nQ1:\nThe given string = \"GeeksForGeeks\".\nYou have to convert this string into a tuple of characters.\nThe final return value should be:\n('G', 'e', 'e','s', 'F', 'o','', 'G', 'e','s', 'K', 'f', 'o', 'r', 'G')\n'''\ndef string_to_tuple(str1):\n    '''\n    Write a function to convert a given string into a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple(\"This is a test\") == (\"Th\", \"i\", \"s\", \"a\", \"s\", \"t\"), \"incorrect output\"\nassert     string_to_tuple(\"Hello\") == ('H', 'e', 'l', 'l', 'o'), \"incorrect output\"\nassert     string_to_tuple(\"1234\") == ('1', '2', '3', '4'), \"incorrect output\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert     string_to_tuple(\"python\") == ('p', 'y', 't', 'h', 'o', 'n')\nassert     string_to_tuple(\"java\") == ('j', 'a', 'v', 'a','m')"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_tuple(\"anagram\") == ('a', 'n', 'g', 'a', 'n', 'a', 'n', 'a', 'n', 'g')\nassert     string_to_tuple(\"cat\") == ('c', 'a', 't')\nassert     string_to_tuple(\"banana\") == ('b', 'a', 'n', 'a', 'n', 'a')\n\n\ndef find_substrings(str1):\n    '''\n    Write a function to find the substrings with minimum number of characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple(\"abc\") == ('a','b','c')\nassert     string_to_tuple(\"hell\") == ('h', 'e', 'l')\nassert     string_to_tuple(\"\") == ('',)\nassert     string_to_tuple(\"abc \") == ('a','b','c')\n\ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef string_to_dict(str1):\n    '''\n    Write a function to convert a given string to a dictionary.\n    The string can be in any order.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple(\"testing\") == (\"t\", \"e\", \"s\", \"i\", \"n\", \"g\")\nassert     string_to_tuple(\"testing1\") == (\"t\", \"e\", \"s\", \"i\", \"n\", \"g\")\nassert     string_to_tuple(\"testing123\") == (\"t\", \"e\", \"s\", \"i\", \"n\", \"g\")\nassert     string_to_tuple(\"testing12g\") == (\"t\", \"e\", \"s\", \"i\", \"n\", \"g\")\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_left_most_unset_bit(0b000001) == 0b000010\nassert     set_left_most_unset_bit(0b000000) == 0b000011\nassert     set_left_most_unset_bit(0b111111) == 0b000001\nassert     set_left_most_unset_bit(0b110110) == 0b000011\nassert     set_left_most_unset_bit(0b010111) == 0b000010\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_left_most_unset_bit(3) == 1 \nassert     set_left_most_unset_bit(2) == 0 \nassert     set_left_most_unset_bit(1) == 1 \nassert     set_left_most_unset_bit(0) == 1 \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nset_left_most_unset_bit(123) == 4\nset_left_most_unset_bit(0) == 1\nset_left_most_unset_bit(10) == 1\nset_left_most_unset_bit(34) == 2\nset_left_most_unset_bit(56) == 3\nset_left_most_unset_bit(99) == 4\nset_left_most_unset_bit(100) == 5\nset_left_most_unset_bit(101) == 6\nset_left_most_unset_bit(12345) == 5\nset_left_most_unset_bit(65432) == 6\nset_left_most_unset_bit(123456) == 5\nset_left_most_unset_bit(1234567) == 6\nset_left_most_unset_bit(102345) == 5\nset_left_most_unset_bit(1024) == 6\nset_left_most_unset_bit(5) == 5\nset_left_most_unset_bit(0) == 1\nset_left_most_unset_bit(100) == 1\nset_left_most_unset_bit(101) == 1\nset_left_most_unset_bit(123) == 1\nset_left_most_unset_bit(12345) == 1\nset_left_most_unset_bit(65432) == 1\nset_left_most_unset_bit(123456) == 1\nset_left_most_unset_bit(1234567) == 1\nset_left_most_unset_bit(1024) == 1\nset_left_most_unset_bit(5) == 1\nset_left_most_unset_bit(0) == 1\n\n'''\nQ16: What if we want to print the left most bit of a number in the below way. \n'''\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_left_most_unset_bit(0b1111) == 0b100\nassert     set_left_most_unset_bit(0b101) == 0b010\nassert     set_left_most_unset_bit(0b101001) == 0b001\nassert     set_left_most_unset_bit(0b100) == 0b000\n\ndef bit_add(n,k):\n    '''\n    Write a python function to add k bitwise to the right of n.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__': \n    '''\n    This is the driver code. Do not change.\n    '''\n    print (\"Testing set_left_most_unset_bit\")\n    for n in range(0, 10000):\n        result = set_left_most_unset_bit(n)\n        print(n, result"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_left_most_unset_bit(0b11000011) == 0b11000011\nassert     set_left_most_unset_bit(0b11000000) == 0b11000000\nassert     set_left_most_unset_bit(0b00000000) == 0b00000000\nassert     set_left_most_unset_bit(0b00000000) == 0b00000000\nassert     set_left_most_unset_bit(0b00000000) == 0b00000000\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(2) == 3\nassert     set_left_most_unset_bit(11) == 11\nassert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(1) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_left_most_unset_bit(1)== 0\nassert     set_left_most_unset_bit(2)== 1\nassert     set_left_most_unset_bit(3)== 1\nassert     set_left_most_unset_bit(4)== 1\nassert     set_left_most_unset_bit(5)== 1\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cone(10,2) == 80.76\nassert     volume_cone(15,2) == 48.76\nassert     volume_cone(5,2) == 3.76\nassert     volume_cone(5,5) == 10.56\nassert     volume_cone(5,7) == 26.28\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cone(1,1) == math.pi*math.pow(1/2,2)*1, \"Test Failed\"\nassert     volume_cone(1.5,1) == math.pi*math.pow(1/2,2)*math.pow(1.5,2), \"Test Failed\"\nassert     volume_cone(2,2) == math.pi*math.pow(2,2)*math.pow(2,2), \"Test Failed\"\n\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cone(2,3)== 5.56\nassert     volume_cone(1,2)== 1.73\nassert     volume_cone(2,3)== 8.64\nassert     volume_cone(1,1)== 2\nassert     volume_cone(0,2)== 0\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cone(1,1) == 1, \"Wrong volume for default arguments\"\nassert volume_cone(3,6) == 20, \"Wrong volume\"\nassert volume_cone(1,2) == 1, \"Wrong volume\"\nassert volume_cone(1.5,2) == 1.5, \"Wrong volume\"\nassert volume_cone(-1,2) == math.sqrt(3)*math.pi/3, \"Wrong volume\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cone(1,2) == {\n    'volume': 0.5,\n    'area': 0.5\n}\nassert volume_cone(1,5) == {\n    'volume': 1.0,\n    'area': 3.1415926536\n}\nassert volume_cone(0,5) == {\n    'volume': 0.0,\n    'area': 0.0\n}\nassert volume_cone(0,1) == {\n    'volume': 0.0,\n    'area': 0.0\n}\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(0.5,2) == 1.37, 'Expected: 1.37. Got: {}'.format(volume_cone(0.5,2))\nassert volume_cone(0.5,5) == 1.37, 'Expected: 1.37. Got: {}'.format(volume_cone(0.5,5))\nassert volume_cone(0.5,10) == 1.37, 'Expected: 1.37. Got: {}'.format(volume_cone(0.5,10))\nassert volume_cone(0.5,15) == 1.37, 'Expected: 1.37. Got: {}'.format(volume_cone(0.5,15))\nassert volume_cone(0.5,20) == 1.37, 'Expected: 1.37. Got: {}'.format(volume_cone(0.5,20))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(1,1) == math.pi\nassert     volume_cone(3,4) == math.pi*3**2/4\nassert     volume_cone(3,5) == math.pi*3**2/4*5\nassert     volume_cone(1,2) == math.pi\nassert     volume_cone(2,3) == math.pi*2**2\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(4.0, 5.0) == (0.5*math.pi*r*r*h), \"volume_cone is wrong\"\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cone(1,1) == 3.14\nassert     volume_cone(2,2) == 7.5\nassert     volume_cone(3,3) == 18.61\nassert     volume_cone(4,4) == 43.2\nassert     volume_cone(5,5) == 104.51\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nhighest_Power_of_2(15) == 32\nhighest_Power_of_2(33) == 64\nhighest_Power_of_2(0) == 1\nhighest_Power_of_2(1) == 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_power_of_two(n):\n    '''\n    Write a python function to check whether number n is a power of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhighest_Power_of_2(20) == 8\nhighest_Power_of_2(4) == 4\nhighest_Power_of_2(32) == 8\nhighest_Power_of_2(17) == 8\nhighest_Power_of_2(17) == 16\nhighest_Power_of_2(1024) == 8\nhighest_Power_of_2(22) == 8\nhighest_Power_of_2(20) == 8\nhighest_Power_of_2(8) == 4\nhighest_Power_of_2(15) == 16\nhighest_Power_of_2(20) == 16\nhighest_Power_of_2(27) == 8\nhighest_Power_of_2(64) == 8\nhighest_Power_of_2(96) == 8\nhighest_Power_of_2(15) == 16\nhighest_Power_of_2(16) == 16\nhighest_Power_of_2(64) == 8\nhighest_Power_of_2(33) == 8\nhighest_Power_of_2(64) == 8\nhighest_Power_of_2(512) == 8\nhighest_Power_of_2(768) == 8\nhighest_Power_of_2(1024) == 8\nhighest_Power_of_2(27) == 8\nhighest_Power_of_2(16) == 16\nhighest_Power_of_2(64) == 8\nhighest_Power_of_2(15) == 16\nhighest_Power_of_2(32) == 4\nhighest_Power_of_2(24) == 8\nhighest_Power_of_2(0) == 0\nhighest_Power_of_2(1) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(3) == 2\nhighest_Power_of_2(4) == 4\nhighest_Power_of_2(5) == 4\nhighest_Power_of_2(6) == 4\nhighest_Power_of_2(7) == 4\nhighest_Power_of_2(8) == 4\nhighest_Power_of_2(9) == 4\nhighest_Power_of_2(10) == 4\nhighest_Power_of_2(20) == 8\nhighest_Power_of_2(21) == 8\nhighest_Power_of_2(22) == 8\nhighest_Power_of_2(23) == 8\nhighest_Power_of_2(24) == 8\nhighest_Power_of_2(25) == 8\nhighest_Power_of_2(26) == 8\nhighest_Power_of_2(27) == 8\nhighest_Power_of_2(28) == 8\nhighest_Power_of_2(29) == 8\nhighest_Power_of_2(30) == 8\nhighest_Power_of_2(31) == 8\nhighest_Power_of_2(32) == 8\nhighest_Power_of_2(33) == 8\nhighest_Power_of_2(34) == 8\nhighest_Power_of_2(35) == 8\nhighest_Power_of_2(36) == 8\nhighest_Power_of_2(37) == 8\nhighest_Power_of_2(38) == 8\nhighest_Power_of_2(39) == 8\nhighest_Power_of_2(40) == 8\nhighest_Power_of_2(41) == 8\nhighest_Power_of_2(42) == 8\nhighest_Power_of_2(43) == 8\nhighest_Power_of_2(44) == 8\nhighest_Power_of_2(45) == 8\nhighest_Power_of_2(46) == 8\nhighest_Power_of_2(47) == 8\nhighest_Power_of_2(48) == 8\nhighest_Power_of_2(49) == 8\nhighest_Power_of_2(50) == 8\nhighest_Power_of_2(51) == 8\nhighest_Power_of_2(52) == 8\nhighest_Power_of_2(53) == 8\nhighest_Power_of_2(54) == 8\nhighest_Power_of_2(55) == 8\nhighest_Power_of_2(56) == 8\nhighest_Power_of_2(57) == 8\nhighest_Power_of_2(58) == 8\nhighest_Power_of_2(59) == 8\nhighest_Power_of_2(60) == 8\nhighest_Power_of_2(61) == 8\nhighest_Power_of_2(62) == 8\nhighest_Power_of_2(63) == 8\nhighest_Power_of_2(64) == 8\nhighest_Power_of_2(65) == 8\nhighest_Power_of_2(66) == 8\nhighest_Power_of_2(67) == 8\nhighest_Power_of_2(68) == 8\nhighest_Power_of_2(69) == 8\nhighest_Power_of_2(70) == 8\nhighest_Power_of_2(71) == 8\nhighest_Power_of_2(72) == 8\nhighest_Power_of_2(73) == 8\nhighest_Power_of_2(74) == 8\nhighest_Power_of_2(75) == 8\nhighest_Power_of_2(76) == 8\nhighest_Power_of_2(77) == 8\nhighest_Power_of_2(78) == 8\nhighest_Power_of_2(79) == 8\nhighest_Power_of_2(80) == 8\nhighest_Power_of_2(81) == 8\nhighest_Power_of_2(82) == 8\nhighest_Power_of_2(83) == 8\nhighest_Power_of_2(84) == 8\nhighest_Power_of_2(85) == 8\nhighest_Power_of_2(86) == 8\nhighest_Power_of_2(87) == 8\nhighest_Power_of_2(88) == 8\nhighest_Power_of_2(89) == 8\nhighest_Power_of_2(90) == 8\nhighest_Power_of_2(91) == 8\nhighest_Power_of_2(92) == 8\nhighest_Power_of_2(93) == 8\nhighest_Power_of_2(94) == 8\nhighest_Power_of_2(95) == 8\nhighest_Power_of_2(96) == 8\nhighest_Power_of_2(97) == 8\nhighest_Power_of_2(98) == 8\nhighest_Power_of_2(99) == 8\nhighest_Power_of_2(100) == 8\nhighest_Power_of_2(101) == 8\nhighest_Power_of_2(102) == 8\nhighest_Power_of_2(103) == 8\nhighest_Power_of_2(104) == 8\nhighest_Power_of_2(105) == 8\nhighest_Power_of_2(106) == 8\nhighest_Power_of_2(107) == 8\nhighest_Power_of_2(108) == 8\nhighest_Power_of_2(109) == 8\nhighest_Power_of_2(110) == 8\nhighest_Power_of_2(111) == 8\nhighest_Power_of_2(112) == 8\nhighest_Power_of_2(113) == 8\nhighest_Power_of_2(114) == 8\nhighest_Power_of_2(115) == 8\nhighest_Power_of_2(116) == 8\nhighest_Power_of_2(117) == 8\nhighest_Power_of_2(118) == 8\nhighest_Power_of_2(119) == 8\nhighest_Power_of_2(120) == 8\nhighest_Power_of_2(121) == 8\nhighest_Power_of_2(122) == 8\nhighest_Power_of_2(123) == 8\nhighest_Power_of_2(124) == 8\nhighest_Power_of_2(125) == 8\nhighest_Power_of_2(126) == 8\nhighest_Power_of_2(127) == 8\nhighest_Power_of_2(128) == 8\nhighest_Power_of_2(129) == 8\nhighest_Power_of_2(130) == 8\nhighest_Power_of_2(131) == 8\nhighest_Power_of_2(132) == 8\nhighest_Power_of_2(13"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     highest_Power_of_2(1) == 0\nassert     highest_Power_of_2(3) == 1\nassert     highest_Power_of_2(8) == 2\nassert     highest_Power_of_2(16) == 2\nassert     highest_Power_of_2(30) == 3\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n    # iterative approach:\n    if not isinstance(n, int):\n        raise TypeError('The argument passed to the function should be an integer')\n    \n    max_power_of_two = 0\n    current_power_of_two = 1\n    while current_power_of_two <= n:\n        if current_power_of_two ** 2 <= n:\n            max_power_of_two = current_power_of_two\n        current_power_of_two = current_power_of_two + 1\n    return max_power_of_two\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef highest_Power_of_2_using_math(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nhighest_Power_of_2(7) == 8\nassert \nhighest_Power_of_2(8) == 8\nassert \nhighest_Power_of_2(9) == 8\nassert \nhighest_Power_of_2(10) == 10\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     highest_Power_of_2(5) == 4\nassert     highest_Power_of_2(10) == 5\nassert     highest_Power_of_2(15) == 7\nassert     highest_Power_of_2(16) == 8\n\nprint(\"TESTS: ok\")\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_lucas(1) == 1\nfind_lucas(2) == 3\nfind_lucas(3) == 4\nfind_lucas(4) == 7\nfind_lucas(5) == 11\nfind_lucas(6) == 18\nfind_lucas(7) == 29\nfind_lucas(8) == 47\nfind_lucas(9) == 76\nfind_lucas(10) == 123\nfind_lucas(11) == 256\nfind_lucas(12) == 521\nfind_lucas(13) == 877\nfind_lucas(14) == 1747\nfind_lucas(15) == 3459\nfind_lucas(16) == 7669\nfind_lucas(17) == 139439\nfind_lucas(18) == 294853\nfind_lucas(19) == 4828263\nfind_lucas(20) == 1048579\nfind_lucas(21) == 21798107\nfind_lucas(22) == 33931823\nfind_lucas(23) == 7691177\nfind_lucas(24) == 154645837\nfind_lucas(25) == 336174517\nfind_lucas(26) == 509937215\nfind_lucas(27) == 1141440386\nfind_lucas(28) == 2657100311\nfind_lucas(29) == 4832026089\nfind_lucas(30) == 922746573\nfind_lucas(31) == 2177604423\nfind_lucas(32) == 3758583661\nfind_lucas(33) == 5894172337\nfind_lucas(34) == 1282446721\nfind_lucas(35) == 2937115572\nfind_lucas(36) == 4962643312\nfind_lucas(37) == 1047947211\nfind_lucas(38) == 2177604423\nfind_lucas(39) == 3758583661\nfind_lucas(40) == 5894172337\nfind_lucas(41) == 1282446721\nfind_lucas(42) == 2937115572\nfind_lucas(43) == 4962643312\nfind_lucas(44) == 1047947211\nfind_lucas(45) == 2177604423\nfind_lucas(46) == 3758583661\nfind_lucas(47) == 5894172337\nfind_lucas(48) == 1282446721\nfind_lucas(49) == 2937115572\nfind_lucas(50) == 4962643312\nfind_lucas(51) == 1047947211\nfind_lucas(52) == 2177604423\nfind_lucas(53) == 3758583661\nfind_lucas(54) == 5894172337\nfind_lucas(55) == 1282446721\nfind_lucas(56) == 2937115572\nfind_lucas(57) == 4962643312\nfind_lucas(58) == 1047947211\nfind_lucas(59) == 2177604423\nfind_lucas(60) == 3758583661\nfind_lucas(61) == 5894172337\nfind_lucas(62) == 1282446721\nfind_lucas(63) == 2937115572\nfind_lucas(64) == 4962643312\nfind_lucas(65) == 1047947211\nfind_lucas(66) == 2177604423\nfind_lucas(67) == 3758583661\nfind_lucas(68) == 5894172337\nfind_lucas(69) == 1282446721\nfind_lucas(70) == 2937115572\nfind_lucas(71) == 4962643312\nfind_lucas(72) == 1047947211\nfind_lucas(73) == 2177604423\nfind_lucas(74) == 3758583661\nfind_lucas(75) == 5894172337\nfind_lucas(76) == 1282446721\nfind_lucas(77) == 2937115572\nfind_lucas(78) == 4962643312\nfind_lucas(79) == 1047947211\nfind_lucas(80) == 2177604423\nfind_lucas(81) == 3758583661\nfind_lucas(82) == 5894172337\nfind_lucas(83) == 1282446721\nfind_lucas(84) == 2937115572\nfind_lucas(85) == 4962643312\nfind_lucas(86) == 1047947211\nfind_lucas(87) == 2177604423\nfind_lucas(88) == 3758583661\nfind_lucas(89) == 5894172337\nfind_lucas(90) == 1282446721\nfind_lucas(91) == 2937115572\nfind_lucas(92) == 4962643312\nfind_lucas(93) == 1047947211\nfind_lucas(94) == 2177604423\nfind_lucas(95) == 3758583661\nfind_lucas(96) == 5894172337\nfind_lucas(97) == 1282446721\nfind_lucas(98) == 2937115572\nfind_lucas(99) == 4962643312\nfind_lucas(100) == 1047947211\nfind_lucas(101) == 2177604423\nfind_lucas(102) == 3758583661\nfind_lucas(103) == 5894172337\nfind_lucas(104) == 1282446721\nfind_lucas(105) == 2937115572\nfind_lucas(106) == 4962643312\nfind_lucas(107) == 1047947211\nfind_lucas(108) == 2177604423\nfind_lucas(109) == 3758583661\nfind_lucas(110) == 5894172337\nfind_lucas(111) == 1282446721\nfind_lucas(112) == 2937115572\nfind_lucas(113) == 4962643312\nfind_lucas(114) == 1047947211\nfind_lucas(115) == 2177604423\nfind_lucas(116) == 3758583661\nfind_lucas(117) == 5894172337\nfind_lucas(118) == 1282446721\nfind_lucas(119) == 2937115572\nfind_lucas(120) == 4962643312\nfind_lucas(121) == 1047947211\nfind_lucas(122) == 2177604423\nfind_lucas(123) == 3758583661\nfind_lucas(124) == 5894172337\nfind_lucas(125) == 1282446721\nfind_lucas(126) == 2937115572\nfind_lucas(127) == 4962643312\nfind_lucas(128) == 1047947211\nfind_lucas(129) == 2177604423\nfind_lucas(130) == 3758583661\nfind_lucas(131) == 5894172337\nfind_lucas(132) == 1282446721\nfind_lucas(133) == 2937115572\nfind_lucas(134) == 4962643312\nfind_lucas(135) == 1047947211\nfind_lucas(136) == 2177604423\nfind_lucas(137) == 3758583661\nfind_lucas(138) == 5894172337\nfind_lucas(139) == 1282446721\nfind_lucas(140) == 2937115572\nfind_"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(find_lucas(1))\nprint(find_lucas(5))\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lucas(5) == 8\nassert     find_lucas(15) == 345\n\n\n\ndef find_lambda(n): \n    '''\n    Write a function to find then'th lambda function.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_lucas(3) == 2\nfind_lucas(2) == 3\nfind_lucas(1) == 1\nfind_lucas(0) == 2\n\n\ndef find_lucas_memo(n, memo = {}):\n    '''\n    Write a function to find then'th lucas number using memoization.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_lucas(2) == 3\nassert find_lucas(3) == 4\nassert find_lucas(5) == 8\nassert find_lucas(20) == 6765\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_string([1,2,3], '+') == '1+2+3'\nassert     add_string([1,2,3], '-') == '-1-2-3'\nassert     add_string([1,2,3], '*') == '1*2*3'\nassert     add_string([1,2,3], '^') == '1^2^3'\nassert     add_string([1,2,3], '/') == '1/2/3'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_string([1, 2, 3], '# {0} : {1}') == '# 1 : 2 : 3'\nassert     add_string([1, 2, 3], '# {1} : {2} : {0}') == '# 2 : 3 : 1'\nassert     add_string([], '# {0} : {1}') == '# : :'\nassert     add_string([], '# {1} : {0}') == '# : :'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_string(['1', '2'], '{}') == '12'\nassert     add_string(['1', '2'], '{2}') == '12'\nassert     add_string(['1', '2'], '{1}') == '1'\nassert     add_string(['1', '2'], '{3}') == '13'\nassert     add_string(['1', '2'], '{4}') == '14'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_string([1,2,3,4], \"{1}, {2}, {3}, {4}\") ==    \"1, 2, 3, 4\"\nassert     add_string(['a','b','c','d'], \"this is a {0}\") == \"this is a a\"\nassert     add_string(['a','b','c','d'], \"this is a {0}\") == \"this is a a\"\nassert     add_string(['a','b','c','d'], \"this is a {1}\") == \"this is a b\"\nassert     add_string([1,2,3,4], \"this is a {0}, {1}, {2}, {3}\") == \"this is a 1, 2, 3, 4\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_string([1, 2, 3], 'Hello') == 'Hello'\nassert     add_string([1, 2, 3], '{0}') == '1'\nassert     add_string([1, 2, 3], '{0} {0} {0}') == '1 2 3'\n\ndef join_strings(list_, *delimiters):\n    '''\n    Write a function that takes a list of strings and\n    returns a single string with all the items delimited by \n    the given delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_string(['asdf', '123', 'abc'], '{0}') == 'asdf 123 abc'\nassert     add_string(['asdf', '123', 'abc'], 'asdf {0} abc') == 'asdf 123 abc'\nassert     add_string(['asdf', '123', 'abc'], 'asdf {0} asdf') == 'asdf 123 abc asdf'\nassert     add_string(['asdf', '123', 'abc'], 'asdf {0} asdf {1}') == 'asdf 123 abc asdf 123'\nassert     add_string(['asdf', '123', 'abc'], 'asdf {0} asdf {1} asdf') == 'asdf 123 abc asdf 123 asdf'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_string(['geeks', 'for', 'geeks'], 'geeks for geeks') == 'geeks for geeks'\nassert     add_string(['geeks', 'for', 'geeks'], 'geeks') == 'geeks for geeks'\nassert     add_string(['geeks', 'for', 'geeks'], 'geeks') == 'geeks for geeks'\nassert     add_string([], 'geeks') == ''\nassert     add_string([], 'geeks') == ''\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_string(['a', 'b', 'c'], '{0} {1} {2}') == 'a b c', 'add_string failed'\nassert     add_string(['a', 'b', 'c'], '{1} {0} {2}') == 'b a c', 'add_string failed'\nassert     add_string(['a', 'b', 'c'], '{2} {1} {0}') == 'c b a', 'add_string failed'\nassert     add_string(['a', 'b', 'c'], '{1} {2} {0}') == 'b a c', 'add_string failed'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert_list_dictionary([['a', 'b', 'c'], '123456789', [], 'hello'], {}, ['name', 'number', 'location', 'desc']) == {'name': 'name', 'number': '123456789', 'location': 'location', 'desc': 'hello'}, 'The test should pass'\nassert     convert_list_dictionary(['abc', '123456789', 'hello', 'world'], {}, ['name', 'number', 'location', 'desc']) == {'name': 'abc', 'number': '123456789', 'location': 'location', 'desc': 'hello'}, 'The test should pass'\nassert     convert_list_dictionary(['', '', '', '', '', '', '', '', '', '', '', ''], {}, ['name', 'number', 'location', 'desc']) == {'name': '', 'number': '', 'location': '', 'desc': ''}, 'The test should pass'\nassert     convert_list_dictionary(['', '', '', '', '', '', '', '', '', '', '', ''], {}, ['name', 'number', 'location', 'desc']) == {'name': '', 'number': '', 'location': '', 'desc': ''}, 'The test should pass'\nassert     convert_list_dictionary(['', '', '', '', '', '', '', '', '', '', '', ''], {}, ['name', 'number', 'location', 'desc']) == {'name': '', 'number': '', 'location': '', 'desc': ''}, 'The test should pass'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"one\", \"two\", \"three\"]) ==     {\"a\": 1, \"b\": 2, \"c\": 3, \"one\": \"a\", \"two\": \"b\", \"three\": \"c\"}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"one\", \"two\", \"three\"]) ==     {\"a\": 1, \"b\": 2, \"c\": 3, \"one\": \"a\", \"two\": \"b\", \"three\": \"c\"}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"one\", \"two\", \"three\"]) ==     {\"a\": 1, \"b\": 2, \"c\": 3, \"one\": \"a\", \"two\": \"b\", \"three\": \"c\"}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"one\", \"two\", \"three\"]) ==     {\"a\": 1, \"b\": 2, \"c\": 3, \"one\": \"a\", \"two\": \"b\", \"three\": \"c\"}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"one\", \"two\", \"three\"]) ==     {\"a\": 1, \"b\": 2, \"c\": 3, \"one\": \"a\", \"two\": \"b\", \"three\": \"c\"}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert_list_dictionary([1,2,3], ['a','b'], ['a','b']) == {1: {'a': 'a', 'b': 'b'}, 2: {'a': 'a', 'b': 'b'}, 3: {'a': 'a', 'b': 'b'}}\nassert convert_list_dictionary([1,2,3], ['a','b'], ['b','a']) == {1: {'a': 'b', 'b': 'a'}, 2: {'a': 'b', 'b': 'a'}, 3: {'a': 'b', 'b': 'a'}}\n\ndef largest_product_in_grid(n):\n    '''\n    Write a function that finds the largest product in a grid of n*n.\n    '''\n    pass\n\nassert largest_product_in_grid(2) == 2\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert_list_dictionary([\"abc\", \"xyz\"],\n                                    [\"z\", \"x\", \"a\"],\n                                    [\"l\", \"k\"]) == \\\n    {\"x\":\"a\", \"y\": \"z\", \"z\":\"x\", \"l\": \"k\", \"k\":\"l\"}\n\nassert    convert_list_dictionary([\"abc\", \"xyz\"],\n                                    [\"z\", \"x\", \"a\"],\n                                    [\"l\", \"k\", \"h\", \"o\"]) == \\\n    {\"x\":\"a\", \"y\": \"z\", \"z\":\"x\", \"l\": \"k\", \"k\":\"l\", \"h\": \"h\", \"o\":\"o\"}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"]) == {\n    1: {'a': {}, 'b': {}, 'c': {}, 'd': {}, 'e': {}, 'f': {}},\n    2: {'a': {}, 'b': {}, 'c': {}, 'd': {}, 'e': {}, 'f': {}},\n    3: {'a': {}, 'b': {}, 'c': {}, 'd': {}, 'e': {}, 'f': {}},\n}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nl1 = ['a', 'b', 'c']\nl2 = ['x', 'y', 'z']\nl3 = ['p', 'q', 'r','s']\nconvert_list_dictionary(l1, l2, l3)"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary([[], {}, {}], [[], {}, {}], {}) == {True: {}, False: {}}\nassert convert_list_dictionary([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[], {}, {}], {}) == {True: {1: {2: 3}, 4: {5: 6}, 7: {8: 9}}, False: {}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([1,2,3,4], [0,0,1,1], [1,2,3,4]) == {0: {0: 1, 1: 1, 2: 3, 3: 4}, 1: {0: 1, 1: 1, 2: 3, 3: 4}, 2: {0: 1, 1: 1, 2: 3, 3: 4}, 3: {0: 1, 1: 1, 2: 3, 3: 4}}\nassert     convert_list_dictionary([0,0,1,1], [1,2,3,4], [1,2,3,4]) == {0: {1: 1, 2: 3, 3: 4}, 1: {1: 1, 2: 3, 3: 4}, 2: {1: 1, 2: 3, 3: 4}, 3: {1: 1, 2: 3, 3: 4}}\nassert     convert_list_dictionary([0,0,1,1], [1,2,3,4], [1,2,3,4,5]) == {0: {1: 1, 2: 3, 3: 4, 4: 5}, 1: {1: 1, 2: 3, 3: 4, 4: 5}, 2: {1: 1, 2: 3, 3: 4, 4: 5}, 3: {1: 1, 2: 3, 3: 4, 4: 5}}\nassert     convert_list_dictionary([1,2,3,4], [1,2,3,4], []) == {1: {2: 3, 3: 4}, 2: {3: 4}, 3: {4}}\nassert     convert_list_dictionary([1,2,3,4], [1,2,3,4], []) == {1: {2: 3, 3: 4}, 2: {3: 4}, 3: {4}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {\n            1: {'a': 'x'},\n            2: {'b': 'y'},\n            3: {'c': 'z'}\n        }, 'not correct'\nassert     convert_list_dictionary([], ['a', 'b', 'c'], ['x', 'y', 'z']) == {\n            'a': 'x',\n            'b': 'y',\n            'c': 'z'\n        }, 'not correct'\nassert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {\n            1: {'a': 'x', 'b': 'y', 'c': 'z'},\n            2: {'a': 'x', 'b': 'y', 'c': 'z'},\n            3: {'a': 'x', 'b': 'y', 'c': 'z'}\n        }, 'not correct'\nassert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {\n            1: {'a': 'x', 'b': 'y', 'c': 'z'},\n            2: {'a': 'x', 'b': 'y', 'c': 'z'},\n            3: {'a': 'x', 'b': 'y', 'c': 'z'}\n        }, 'not correct'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary([[1,2], ['a','b'], ['c', 1]],\n                     [[2,2], 'd', 2], [[3,3]]) == \\\n                     {1: {2: {'a': 'b'}}, 2: 2, 'c': {1: 2}, 'd': {}, 3: {3: {}}}\n\ndef convert_list_dictionary2(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n\nassert     convert_list_dictionary2([[1,2], ['a','b'], ['c', 1]],\n                     [[2,2], 'd', 2], [[3,3]]) == \\\n                     {1: {2: {'a': 'b'}}, 2: 2, 'c': {1: 2}, 'd': {}, 3: {3: {}}}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_sum (n) ==     1764 \nassert     get_max_sum (n) ==     1764 "
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert 0 == get_max_sum(0)\nassert -1 == get_max_sum(2)\nassert -1 == get_max_sum(4)\nassert -1 == get_max_sum(6)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum(1)     == 1\nassert     get_max_sum(2)     == 3\nassert     get_max_sum(3)     == 5\nassert     get_max_sum(4)     == 8\nassert     get_max_sum(5)     == 13\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # run get_max_sum() \n    assert get_max_sum(1) == 1\n    assert get_max_sum(2) == 3\n    assert get_max_sum(3) == 6\n    "
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum(4) == 7\nassert     get_max_sum(6) == 11\nassert     get_max_sum(8) == 21\nassert     get_max_sum(10) == 31\nassert     get_max_sum(14) == 51\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_sum(15) == 62\nassert     get_max_sum(9) == 61\nassert     get_max_sum(5) == 61\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum(6) == 21\nassert     get_max_sum(9) == 26\nassert     get_max_sum(10) == 26\nassert     get_max_sum(15) == 51\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_sum(5) == 15\nassert     get_max_sum(10) == 45\nassert     get_max_sum(15) == 110\nassert     get_max_sum(20) == 520\nassert     get_max_sum(25) == 1150\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_sum(6) ==     7\nassert     get_max_sum(10) ==     26\nassert     get_max_sum(14) ==     50\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert max_length_list([1,2,3,4]) == 4\nassert max_length_list([1,2,3]) == 3\nassert max_length_list([2]) == 1\nassert max_length_list([1,2,3,4]) == 4\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length_list([]) == (0, None)\nassert     max_length_list([1, 2, 3]) == (3, [1, 2, 3])\nassert     max_length_list([1, 2, 3, 4, 5]) == (5, [1, 2, 3, 4, 5])\n\nprint(\"All tests passed\""
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_length_list([1,2,3,4,5,6,7]) == 7\nassert     max_length_list([1,2,3,4,5,6,7,8]) == 8\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_length_list([1,2,3,4,5,6]) == 5\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10]) == 5\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 26\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == 7\nassert max_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\nassert max_length_list([[1, 2, 3], [4, 5, 6]]) == 3\nassert max_length_list([[1, 2], [3, 4], [5, 6]]) == 2\nassert max_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == 15\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length_list([])    ==    None\nassert     max_length_list([1,2,3,4,5]) ==    5\nassert     max_length_list([1,2,3]) ==    2\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) ==    9\nassert     max_length_list([1,2,3,4,5,6,7,8]) ==    8\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length_list([1,2,3,4]) ==    3, 'list is not a list'\nassert     max_length_list([1,2,3,4,5]) ==    5, 'list has more than 5 elements'\nassert     max_length_list([1]) ==    1, 'list has only one element'\nassert     max_length_list([]) ==    0, 'empty list'\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10]) ==    11, 'list has 11 elements'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length_list([1, 2, 3]) == 2, \"test_max_length_list: failed\"\nassert     max_length_list([1, 2, 3, 4]) == 4, \"test_max_length_list: failed\"\nassert     max_length_list([1, 2, 3, 4, 5]) == 5, \"test_max_length_list: failed\"\nassert     max_length_list([1, 2, 3, 4, 5, 6]) == 6, \"test_max_length_list: failed\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7]) == 6, \"test_max_length_list: failed\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct((1,1,2,2,2)) == True, 'one_tup_of_duplicate'\nassert     check_distinct((1,2,2,2,3,4,5,5)) == True,'multiple_tup_of_duplicate'\nassert     check_distinct((1,2,3,4,5)) == False, 'no_duplicates'\n\n'''\nWrite a function to check if a given string has all unique characters.\n'''\n\ndef check_unique(string):\n    '''\n    Write a function to check if given string has all unique characters.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not check_distinct((\"a\", \"a\", \"b\", \"b\")), \"Duplicates are present\"\nassert \nassert not check_distinct((\"a\", \"a\", \"b\", \"c\")), \"Duplicates are present\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct((1,3,5,5,4,2,2,2,3,5)) == False, \"The second occurrence of 5 is not counted\"\nassert check_distinct((1,3,5,5,4,2,2,2,3,5)) == True, \"There are duplicate values in the tuple\"\n\nprint(\"Test case passed\")"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_distinct((\"apple\", \"orange\", \"pear\", \"apple\", \"orange\", \"pear\")) == True, \\\n    \"Should return True\"\nassert check_distinct((\"apple\", \"orange\", \"pear\", \"apple\", \"orange\", \"pear\", \"apple\", \"orange\", \"pear\")) == False, \\\n    \"Should return False\"\nassert check_distinct((1, 2, 3, 4, 5)) == False, \\\n    \"Should return False\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct([1,2,3,4]) == True, \"Wrong result\"\nassert     check_distinct([1,2,3,3]) == False, \"Wrong result\"\nassert     check_distinct([1,1,2,3,3]) == True, \"Wrong result\"\nassert     check_distinct(['abc', 'abc', 'abc', 'abc', 'abc']) == False, \"Wrong result\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct((1,1,1,2,3,3,4)) == True, \"error\"\nassert     check_distinct((1,2,3,1,1,2,3)) == True, \"error\"\nassert     check_distinct((2,1,2,3,1,2,3)) == True, \"error\"\nassert     check_distinct((1,2,3,1,3,4,5)) == False, \"error\"\nassert     check_distinct((2,2,2,3,3,4,5,5,5)) == True, \"error\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct((1,2,3)) == False, \"Oops, it should be true\"\nassert     check_distinct((1,2,2)) == False, \"Oops, it should be true\"\nassert     check_distinct((1,2,3,3,4)) == True, \"Oops, it should be false\"\nassert     check_distinct((1,2,3,4,5)) == True, \"Oops, it should be false\"\n\n\ndef find_max(num_list):\n    '''\n    Write a function that takes a list of numbers and returns the largest number\n    in that list.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_distinct((1,2,3)) == True, \"test case 1 failed\"\nassert     check_distinct((1,1,2)) == False, \"test case 2 failed\"\nassert     check_distinct((0,0,0)) == True, \"test case 3 failed\"\nassert     check_distinct((0,0,1)) == False, \"test case 4 failed\""
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_distinct((\"hi\", \"bye\")) == True, \\\n        \"Wrong output\"\nassert     check_distinct((\"hi\", 1)) == False, \\\n        \"Wrong output\"\nassert     check_distinct((\"hi\", \"hi\")) == False, \\\n        \"Wrong output\"\nassert     check_distinct((\"hi\", \"hi\", \"hi\")) == False, \\\n        \"Wrong output\"\nassert     check_distinct((\"hi\", \"hi\", \"hi\", \"hi\")) == False, \\\n        \"Wrong output\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character(\"abcd\") == \"d\", \"Should return 'd' for input 'abcd'\"\nassert     first_non_repeating_character(\"abcc\") == \"b\", \"Should return 'b' for input 'abcc'\"\nassert     first_non_repeating_character(\"abccdd\") == \"b\", \"Should return 'b' for input 'abccdd'\"\nassert     first_non_repeating_character(\"abbcd\") == \"c\", \"Should return 'c' for input 'abbcd'\"\nassert     first_non_repeating_character(\"abccd\") == \"c\", \"Should return 'c' for input 'abccd'\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character(\"abcdefg\") == 'c', 'Test 1, failed!'\nassert     first_non_repeating_character(\"abcdefg\") == 'a', 'Test 2, failed!'\nassert     first_non_repeating_character(\"abc\") == 'a', 'Test 3, failed!'\nassert     first_non_repeating_character(\"\") == '', 'Test 4, failed!'\nassert     first_non_repeating_character(\"abcabcabc\") == 'a', 'Test 5, failed!'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character(\"abcdabcd\") == 'c', \"incorrect test case\"\nassert     first_non_repeating_character(\"xyzw23r1\") == 'x', \"incorrect test case\"\nassert     first_non_repeating_character(\"\") == '', \"incorrect test case\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_non_repeating_character('') == None\nassert     first_non_repeating_character('ab') == None\nassert     first_non_repeating_character('aab') == 'a'\nassert     first_non_repeating_character('aababbc') == 'a'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_non_repeating_character(\"abaccdeff\") == 'e', \"Wrong Output.\"\nassert     first_non_repeating_character(\"abaccdefff\") == 'e', \"Wrong Output.\"\nassert     first_non_repeating_character(\"aaaaaaaaa\") == 'a', \"Wrong Output.\"\nassert     first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\") == 'z', \"Wrong Output.\"\nassert     first_non_repeating_character(\"\") == '', \"Wrong Output.\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character(\"abracadabra\") == \"a\", \"First non-repeated character should be 'a'\"\nassert     first_non_repeating_character(\"krrrkkkkkkkkkk\") == \"k\", \"First non-repeated character should be 'k'\"\nassert     first_non_repeating_character(\"ccc\") == \"c\", \"First non-repeated character should be 'c'\"\nassert     first_non_repeating_character(\"kkkkkkkkkkkkkkkkkk\") == \"k\", \"First non-repeated character should be 'k'\"\nassert     first_non_repeating_character(\"aabccccc\") == \"a\", \"First non-repeated character should be 'a'\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character(\"google.com\") == 'l', 'test case error'\nassert     first_non_repeating_character(\"google.com\") == 'o', 'test case error'\nassert     first_non_repeating_character(\"google.com\") == 'o', 'test case error'\nassert     first_non_repeating_character(\"google.com\") == 'g', 'test case error'\nassert     first_non_repeating_character(\"google.com\") == '.', 'test case error'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character('abcabcabc')    ==    'a'\nassert     first_non_repeating_character('abccbaab')    ==    'a'\nassert     first_non_repeating_character('abcabcabcabc')    ==    'c'\nassert     first_non_repeating_character('abcabcabcabcabc')    ==    'c'\nassert     first_non_repeating_character('aaa')    ==    'a'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character('helloradio') == 'e', 'Test Fail'\nassert     first_non_repeating_character('abracadabra') == 'a', 'Test Fail'\nassert     first_non_repeating_character('abracadabra') == 'a', 'Test Fail'\nassert     first_non_repeating_character('a') == 'a', 'Test Fail'\nassert     first_non_repeating_character('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz') == '', 'Test Fail'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_char('abc') == True, 'Test Case Fail'\nassert check_char('abc1') == False, 'Test Case Fail'\nassert check_char('abc2') == False, 'Test Case Fail'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_char_2(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_char('a') == True, f\"input should be a\"\nassert     check_char('ab') == True, f\"input should be a\"\nassert     check_char('aab') == False, f\"input should be a\"\nassert     check_char('a-b') == False, f\"input should be a\"\nassert     check_char('-a') == False, f\"input should be a\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(check_char('cevrigi'))\n\n'''\nGiven a string, your task is to find the first non-repeating character in it and return its index.\nIf it doesn't exist, return -1.\nNote: In the case of an empty string, your function should return 0.\n'''"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_char('') == True\nassert     check_char('a') == True\nassert     check_char('a.') == True\nassert     check_char('.') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncheck_char('Hello World') == True\nassert \ncheck_char('Hello World!') == True\nassert \ncheck_char('Hello World and it should be the same') == False\nassert \ncheck_char('Hello and it should be the same') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (check_char(\"m\") == False), \"testcase 1\"\nassert     (check_char(\"m\") == True), \"testcase 2\"\nassert     (check_char(\"r\") == True), \"testcase 3\"\nassert     (check_char(\"r\") == False), \"testcase 4\"\nassert     (check_char(\"\") == True), \"testcase 5\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_char('hellooooo') == 'yes'\nassert     check_char('hello') == 'no'\nassert     check_char('h') == 'no'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_char('hello') == True\nassert check_char('hi') == False\nassert check_char('hihello') == False\nassert check_char('heal') == False\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(2,3,4) == 2.5\nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert     median_numbers(4,5,6) == 5.0\nassert     median_numbers(1,2,3) == 2.5\n\nprint(\"Test passed\")"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_numbers(1,2,3) == 2, 'The median is correct.'\nassert median_numbers(7,7,7) == 7, 'The median is correct.'\nassert median_numbers(1,1,1) == 1, 'The median is correct.'\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_median_in_the_middle(num_list):\n    '''\n    Input: an unsorted list\n    Output: the median of the list\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_numbers(2,4,6)    == 4.5, 'incorrect'\nassert     median_numbers(5,6,7)    == 5, 'incorrect'\nassert     median_numbers(5,6,7)    == 5.5, 'incorrect'\nassert     median_numbers(2,4,6)    == 4.5, 'incorrect'\nassert     median_numbers(2,4,6)    == 4.5, 'incorrect'\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert median_numbers(1,2,3) == 2\nassert median_numbers(3,3,3) == 3\nassert median_numbers(1,2,3) == 2\nassert median_numbers(3,4,5) == 4\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_numbers(1,2,3) == 2, \"wrong\"\nassert median_numbers(1,2,3) == 2, \"wrong\"\nassert median_numbers(1,2,3) == 2, \"wrong\"\nassert median_numbers(2,3,1) == 2.5, \"wrong\"\nassert median_numbers(2,3,1) == 2.5, \"wrong\"\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(median_numbers(1, 2, 3)"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_numbers(0, 1, 2) == 1.5\nassert     median_numbers(1, 2, 3) == 2\nassert     median_numbers(2, 3, 1) == 2\nassert     median_numbers(3, 1, 2) == 2\nassert     median_numbers(0, 0, 0) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_of_digits([5, 2, 3, 4, 8, 6, 10]) == 22\nassert     sum_of_digits([1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_of_digits([1, 2, 3, 4, 5, 6]) == 0\nassert sum_of_digits([21, 12, 99, 21, 1]) == 18\nassert sum_of_digits([21, 12, 99, 21, 12]) == 18\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsum_of_digits([21,3,9,27,18,8,18,8,1]) == 39\nassert \nsum_of_digits([21,3,9,27,18,8,18,8,1]) == 39\nassert \nsum_of_digits([21,3,9,27,18,8,18,8,1]) == 39\nassert \nsum_of_digits([21,3,9,27,18,8,18,8,1]) == 39\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([]) == 0\nassert     sum_of_digits([1, 2, 3, 4]) == 10\nassert     sum_of_digits([4, 3, 2, 1]) == 15\nassert     sum_of_digits([5, 6, 7, 8, 9]) == 55\nassert     sum_of_digits([1, 2, 3, 4, 5]) == 10\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_of_digits([0, 1, 2, 3]) == 0\nassert     sum_of_digits([2, 3, 5, 5]) == 0\nassert     sum_of_digits([2, 3, 5, 6]) == 3\nassert     sum_of_digits([2, 3, 5, 6, 2]) == 3\nassert     sum_of_digits([2, 3, 5, 6, 2, 2]) == 7\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_of_digits([12, 45, 21, 66, 3]) == 10, \"didn't compute correctly\"\nassert     sum_of_digits([8, 18, 6, 4, 0]) == 17, \"didn't compute correctly\"\nassert     sum_of_digits([-8, 0, 4, 2, 0]) == 8, \"didn't compute correctly\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_of_digits([1,2,3,4]) == 10, 'Wrong result'\nassert     sum_of_digits([4,5,9,2]) == 11, 'Wrong result'\nassert     sum_of_digits([4,9,8,2]) == 11, 'Wrong result'\nassert     sum_of_digits([1,0,9,2]) == 10, 'Wrong result'\nassert     sum_of_digits([1,1,9,2]) == 10, 'Wrong result'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_of_digits([9, 8, 2, 1, 3, 5, 6, 7]) == 18\nassert sum_of_digits([1, 2, 3]) == 6\nassert sum_of_digits([8, 9, 0, 2, 5, 6]) == 15\nassert sum_of_digits([1, 0, 8, 0, 2]) == 6\nassert sum_of_digits([8, 9, 9, 2]) == 21\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bitwise_xor((1, 2), (3, 4)) == (3, 5)\nassert bitwise_xor((1, 2), (3, 4, 5)) == (3, 0)\nassert bitwise_xor((1, 2, 3), (3, 4, 5)) == (1, 2, 3)\nassert bitwise_xor((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 4)\n\ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0)\nassert     bitwise_xor((0, 0), (0, 1)) == (1, 0)\nassert     bitwise_xor((0, 1), (0, 0)) == (1, 0)\nassert     bitwise_xor((0, 1), (0, 1)) == (0, 0)\nassert     bitwise_xor((0, 1), (1, 0)) == (0, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bitwise_xor((1, 2), (1, 2)) == (0, 2)\nassert     bitwise_xor((1, 2), (2, 1)) == (0, 2)\nassert     bitwise_xor((1, 2, 3), (1, 3)) == (0, 3)\nassert     bitwise_xor((1, 2, 3), (1, 2, 3)) == (1, 0)\nassert     bitwise_xor((1, 2, 3), (1, 2)) == (1, 2)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bitwise_xor((2, 3), (4, 5)) == (3, 5)\nassert     bitwise_xor((0, 1), (1, 1)) == (1, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bitwise_xor((1, 1), (0, 1)) == (1, 0)\nassert     bitwise_xor((1, 1), (0, 0)) == (1, 1)\nassert     bitwise_xor((1, 0), (0, 1)) == (1, 0)\nassert     bitwise_xor((1, 0), (0, 0)) == (1, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n4. Write a function to perform the mathematical bitwise and operation across the given tuples.\n'''\n\ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bitwise_xor((0,1), (1,1)) == (0,0)\nassert     bitwise_xor((1,1), (1,1)) == (1,0)\nassert     bitwise_xor((1,0), (1,0)) == (0,1)\nassert     bitwise_xor((0,0), (0,0)) == (0,0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    bitwise_xor((1,2,3), (1,2,3)) == (0,0,0)\n    bitwise_xor((1,2,3), (4,5,6)) == (1,2,3)\n    bitwise_xor((0,0,0), (1,2,3)) == (1,2,3)\n    bitwise_xor((0,0,0), (1,2,3)) == (1,2,3)\n    bitwise_xor((-1,0,0), (1,2,3)) == (0,0,0)\n    bitwise_xor((-1,0,0), (1,2,3)) == (0,0,0)\n    bitwise_xor((0,-1,0), (1,2,3)) == (0,0,0)\n    bitwise_xor((0,-1,0), (1,2,3)) == (0,0,0)\n    bitwise_xor((0,0,0), (1,-2,3)) == (0,0,0)\n    bitwise_xor((0,0,0), (1,-2,3)) == (0,0,0)\n    bitwise_xor((0,0,0), (1,2,-3)) == (0,0,0)\n    bitwise_xor((0,0,0), (1,2,-3)) == (0,0,0)\n    bitwise_xor((1,2,3), (0,0,0)) == (1,2,3)\n    bitwise_xor((1,2,3), (0,0,0)) == (1,2,3)\n    bitwise_xor((1,2,3), (0,0,0)) == (1,2,3)\n    bitwise_xor((1,2,3), (1,-2,3)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,-2,3)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-3)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-3)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,-2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor((1,2,3), (1,2,2)) == (0,0,0)\n    bitwise_xor(("
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bitwise_xor(test_tup1, test_tup2) == expected_result, \\\n        'wrong result'\nprint('TESTS: PASSED!')\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nextract_freq([('red', 'b', 'g'), ('red', 'b'), ('red', 'b', 'g', 'r'), ('red', 'b')]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         extract_freq([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]) == 4, \"incorrect\"\nassert         extract_freq([['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b']]) == 5, \"incorrect\"\nassert         extract_freq([['a', 'b'], ['a', 'b'], ['a', 'b'], ['a', 'b']]) == 5, \"incorrect\"\nassert         extract_freq([['a', 'b'], ['a', 'b'], ['a', 'b']]) == 4, \"incorrect\"\nassert         extract_freq([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]) == 4, \"incorrect\"\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_list = [[1,2,3,4],[[1,2,3],4]]\n    print(extract_freq(test_list))"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([(1,2), (2,3), (1,2), (3,4)]) == 4\nassert     extract_freq([(1,2), (1,2), (2,3), (3,4)]) == 3\nassert     extract_freq([(1,2), (2,3)]) == 2\nassert     extract_freq([(1,2), (2,3), (1,2)]) == 2\nassert     extract_freq([(1,2), (2,3), (1,2), (3,4)]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_list = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]\n    assert extract_freq(test_list) == 4\n    print(\"You passed the test!\")"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([(1,3,2),(2,3,4),(3,4,5)]) == 2\nassert     extract_freq([(1,3,2),(2,3,4),(2,3,4)]) == 1\nassert     extract_freq([(1,3,2),(1,3,4),(2,3,4)]) == 3\nassert     extract_freq([(1,3,2),(1,3,4),(1,3,4)]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         extract_freq([[1, 2, 3], [4, 5, 6]]) == 3\nassert         extract_freq([[1, 2, 3], [2, 1, 3]]) == 2\nassert         extract_freq([[1, 2, 3], [1, 2]]) == 1\nassert         extract_freq([[1, 2, 3, 4], [4, 1, 2, 3]]) == 1\nassert         extract_freq([[1, 2, 3], [2, 1, 3], [3, 1, 2], [4, 1, 2]]) == 2\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq([('a', 1), ('a', 2), ('a', 2), ('a', 3), ('a', 4)]) == 2\nassert    extract_freq([('a', 1), ('b', 1), ('a', 2), ('a', 3), ('a', 4)]) == 3\nassert    extract_freq([('a', 1), ('a', 2), ('a', 2), ('a', 3), ('a', 4), ('a', 3)]) == 4\n\ndef add_to_dict(a_dict, key, value):\n    '''\n    Write a function that adds a key-value pair to a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq(['a', 'b', 'b', 'c', 'b', 'a', 'a', 'b', 'a']) == 4, 'Not correct'\nassert     extract_freq([1,2,3,1,2,3,1,2,3,1]) == 6, 'Not correct'\nassert     extract_freq(['b', 'b', 'c', 'b', 'a', 'a', 'a', 'b', 'a']) == 4, 'Not correct'\nassert     extract_freq([1,2,3,1,2,3,1,2,3,1]) == 6, 'Not correct'\n\nprint('Correct!'"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert add_nested_tuples((1,2,3),(4,5,6,7)) == (1,2,3,4,5,6,7)\nassert add_nested_tuples((1,2,3,4),(5,6,7,8)) == (1,2,3,4,5,6,7,8)\nassert add_nested_tuples((1,2),(3,4)) == (1,2,3,4)\nassert add_nested_tuples((1,2,3,4),(5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples((1,2), (3,4)) == (1, 3)\nassert     add_nested_tuples((3,4), (1,2)) == (3, 1)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_nested_tuples(((1, 2), (3, 4), (5, 6)), ((1, 2), (3, 4), (5, 6))) == (1, 2, 3, 4, 5, 6)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef square_list(test_list):\n    '''\n    Write a function to square each number in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_nested_tuples(1,2) == (3,4)\nassert     add_nested_tuples((1,2),3) == (1,2,3)\nassert     add_nested_tuples((1,2),(3,4)) == (1,2,3,4)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert add_nested_tuples((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == (\"a\", \"d\", \"e\", \"b\", \"f\", \"c\"), \"should return ('a', 'd', 'e', 'b', 'f', 'c')\"\nassert add_nested_tuples((\"a\", 1, 2), (\"b\", 3, 4)) == (\"a\", 1, 2, \"b\", 3, 4), \"should return ('a', 1, 2, 'b', 3, 4)\"\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntest_tup1 = (10, (20, (30, 40)))\ntest_tup2 = (50, (60, 70))\nadd_nested_tuples(test_tup1, test_tup2)\n\nprint(\"\\nPass\" if (50, (60, 70)) == add_nested_tuples(test_tup1, test_tup2) else \"Fail\")\nprint(\"\\nPass\" if ((0, 0, 0) == add_nested_tuples((),())) else \"Fail\")\n\nprint(\"\\nPass\" if ((10, ) == add_nested_tuples((10,),())) else \"Fail\")\n\nprint(\"\\nPass\" if (((10,),) == add_nested_tuples(((10,),),())) else \"Fail\")\n\nprint(\"\\nPass\" if (((10, 20),) == add_nested_tuples((((10, 20),),),())) else \"Fail\")\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_nested_tuples((10, 20, 30), (40, 50, 60)) == (10, 40, 70)\nassert     add_nested_tuples((10, 20, 30), (40, 50)) == (10, 40, 50)\nassert     add_nested_tuples((10, 20, 30), (40,)) == (10, 40, 40)\nassert     add_nested_tuples((10, 20, 30), (40, 40)) == (10, 40, 40)\nassert     add_nested_tuples((10, 20), (30, 40)) == (10, 30, 40)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minimum(7,8) == 0, \"3\"\nassert    minimum(-7,-8) == -7, \"0\"\nassert    minimum(3,4) == 3, \"0\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minimum(10,20) == 10,'minimum is not correct'\nassert minimum(-1,1) == -1,'minimum is not correct'\nassert minimum(-2,3) == -2,'minimum is not correct'\nassert minimum(3,2) == 2,'minimum is not correct'\nassert minimum(5,5) == 5,'minimum is not correct'\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minimum(2,3) == 2\nassert     minimum(3,2) == 2\nassert     minimum(2,2) == 2\nassert     minimum(1,2) == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minimum(1,2) == 1\nassert     minimum(3,4) == 3\nassert     minimum(4,5) == 4\nassert     minimum(2,1) == 1\nassert     minimum(7,1) == 7\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minimum(5, 4) == 1, \"First number is greater than second\"\nassert     minimum(4, 5) == 1, \"Second number is greater than first\"\nassert     minimum(1, 1) == 1, \"Both numbers are equal\"\nassert     minimum(1, 2) == 1, \"Second number is greater than first\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert minimum(3, 2) == 2, \"The minimum is not 2\"\n\nassert minimum(-3, -2) == -2, \"The minimum is not 2\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_tuplex((1,2,3),(2,4,3)) == True, 'Fail'\nassert     check_tuplex((1,2,3),(2,4,1)) == False, 'Fail'\nprint('Test passed')\n\ndef check_strings(str1,str2):\n    '''\n    Write a function to check whether two strings are anagram of each other.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('')\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_tuplex((2,3,5),(2,3,5)) == True\nassert     check_tuplex((2,3,5),(2,5,3)) == False\nassert     check_tuplex((2,3,5),(3,2,5)) == False\nassert     check_tuplex((2,3,5),(3,5,2)) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(f\"\\n{'#'*20}\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_tuplex((1,2,3),(2,3,4)) == True, \"1st tuple's element should be inside the 2nd tuple\"\nassert     check_tuplex((1,2,3),(1,2,3)) == True, \"2nd tuple's element should be inside the 2nd tuple\"\nassert     check_tuplex((1,2,3),(1,2,4)) == False, \"3rd tuple's element should not be inside the 2nd tuple\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Parity(6) == True\nassert     find_Parity(5) == False\nassert     find_Parity(15) == True\nassert     find_Parity(10) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Parity(7) == False, \"The parity of 7 is odd\"\nassert     find_Parity(8) == True, \"The parity of 8 is odd\"\nassert     find_Parity(9) == False, \"The parity of 9 is odd\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(0) == 0\nassert     find_Parity(1) == 1\nassert     find_Parity(2) == 0\nassert     find_Parity(3) == 0\nassert     find_Parity(4) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(1) == True\nassert     find_Parity(2) == False\nassert     find_Parity(3) == True\nassert     find_Parity(4) == False\nassert     find_Parity(8) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Parity(1) == False, \"PASS\"\nassert     find_Parity(-1) == True, \"PASS\"\nassert     find_Parity(-2) == False, \"PASS\"\nassert     find_Parity(7) == False, \"PASS\"\nassert     find_Parity(8) == False, \"PASS\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(4)==0\nassert     find_Parity(5)==1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Parity(0) == False, \nassert     find_Parity(1) == True, \nassert     find_Parity(2) == True, \nassert     find_Parity(3) == False, \nassert     find_Parity(4) == False, \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rearrange_bigger(1023) == 2233\nassert     rearrange_bigger(11111) == 2211\nassert     rearrange_bigger(1313) == 4313\nassert     rearrange_bigger(4321) == 4321\nassert     rearrange_bigger(1234) == 2341\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rearrange_bigger(10000) == 10101\nassert     rearrange_bigger(20000) == 20100\nassert     rearrange_bigger(30000) == 30100\nassert     rearrange_bigger(40000) == 40100\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def append(self, data):\n        # creating node and adding it to the list\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = self.head\n        else:\n            self.tail.next = new_node\n            new_node.prev = self.tail\n            self.tail = new_node\n\n    def _insert_between(self, prev_node, data):\n        # creating new node and adding it to the list\n        new_node = Node(data)\n        prev_node.next = new_node\n        new_node.prev = prev_node\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef rearrange_bigger_1(n):\n    '''\n    Assume that we have some digits in a number n. The number n is a permutation of the digits 0, 1, 2, 3, 4,..., n-1, so that all the digits of n are sorted.\n    \n    Write a function that finds the next bigger number, which is the next permutation of n, such that the order of the digits is not changed. For example, if n = 1234, then the function should return 4321\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(21) == 12\nassert     rearrange_bigger(99999) == 100001\nassert     rearrange_bigger(2100) == 210100\nassert     rearrange_bigger(9999921) == 10000112\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rearrange_bigger(1234) == 5235\nassert     rearrange_bigger(5432) == 54321\nassert     rearrange_bigger(54321) == 54322\nassert     rearrange_bigger(54322) == 54333\nassert     rearrange_bigger(54333) == 54321\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rearrange_bigger(91) == 921\nassert     rearrange_bigger(1234) == 12434\nassert     rearrange_bigger(56789) == 5689\nassert     rearrange_bigger(3687) == 36877\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    assert len(nums1) <= 1000000\n    assert len(nums2) <= 1000000\n    assert len(nums1) >= len(nums2) >= 3\n    n = len(nums1)\n    m = len(nums2)\n    def get_min_dist(i, j):\n        min_dist = 10**10\n        for x in range(len(nums1)):\n            for y in range(len(nums2)):\n                curr_dist = nums1[i] - nums2[y]\n                if curr_dist < min_dist and curr_dist > 0:\n                    min_dist = curr_dist\n        return min_dist\n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (get_min_dist(i, 0), i))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(min_heap))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert     k_smallest_pairs([1,1,2], [1], 2) == [[1, 1], [1, 1]]\n\ndef k_smallest_pairs_heap(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # use heap to sort\n    # time O(n+m)\n    # space O(k)\n    # or O(1)\n    heap = []\n    if len(nums1)==0 or len(nums2)==0:\n        return []\n    for num in nums1:\n        heapq.heappush(heap, (-num, num))\n    result = []\n    for num in nums2:\n        if k>0:\n            k-=1\n        elif -heap[0][0]>num:\n            result.append(heapq.heappop(heap)[1])\n    return result\n\nassert k_smallest_pairs_heap([1,7,11], [2,4,6], 3) == [[1, 2], [1, 4], [1, 6]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([1, 3, 2], [4, 6, 7], 3) == [[1, 4], [2, 4], [3, 6]]\nassert     k_smallest_pairs([1, 3, 2, 4], [4, 6, 7], 4) == [[1, 4], [3, 6], [2, 4], [4, 7]]\nassert     k_smallest_pairs([1], [], 1) == [[1, 1]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min-heap (heapq.heappushpop(heap, val))\n    # this time we don't need to sort the input (nums1, nums2)\n    # put the smallest ones in the min-heap (heapq.heappushpop(heap, val))\n    # pop the smallest ones (heapq.heappop(heap))\n    # push the last pair of the heap back into the min-heap (heapq.heappushpop(heap, val))\n    # pop the smallest ones (heapq.heappop(heap))\n    # and so on until we have enough pairs\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([[7,11], [2,4], [3,5], [7,8]], [[1,2], [3,4], [5,6], [7,8], [9,10]], 4) == [[1,2], [3,4], [5,6], [7,8]]\nassert     k_smallest_pairs([[7,11], [2,4], [3,5], [7,8]], [[1,2], [3,4], [5,6], [7,8], [9,10]], 5) == [[1,2], [3,4], [7,8]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([1,3], [2], 1) == [[1,2]]\nassert k_smallest_pairs([2,2], [1], 2) == [[1,2],[2,1]]\nassert k_smallest_pairs([1,3,5,8,10], [4,7,8,9,10], 5) == [[1,4],[2,3],[3,5],[5,7],[8,9]]\nassert k_smallest_pairs([1,2,5,10], [10,4,5,8,2], 5) == [[1,10],[2,8],[5,4],[5,2]]\nassert k_smallest_pairs([], [], 0) == []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1,2,3,4,5], [2,4,6,8,10], 4) == [2,6], \"k_smallest_pairs should be 2-pairs\"\nassert     k_smallest_pairs([1], [2], 2) == [(1,2)], \"k_smallest_pairs should be 2-pairs\"\nassert     k_smallest_pairs([1,2,3,4,5], [2,4,6,8,10], 0) == [], \"k_smallest_pairs should be 0-pairs\"\nassert     k_smallest_pairs([1], [2], 1) == [(1,2)], \"k_smallest_pairs should be 1-pairs\"\nassert     k_smallest_pairs([1,2,3,4,5], [2,4,6,8,10], 2) == [(1,2),(3,4)], \"k_smallest_pairs should be 2-pairs\"\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([0,1,2,3,4], [3,4,5,8,9], 2) == [[0,3],[1,4]]\nassert     k_smallest_pairs([1,1,1,1,1], [1,2,3,4,5], 5) == [[1,1],[1,1]]\nassert     k_smallest_pairs([0,1,1,1,1], [1,2,3,4,5], 5) == [[0,1],[1,1]]\nassert     k_smallest_pairs([0,1,1,1,1], [1,2,3,4,5], 6) == [[0,1],[1,1]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlist1 = [(1,2),(2,3),(2,5)]\nassert min_product_tuple(list1) == min(list1)\n\nlist2 = [(1,2),(3,4),(4,5)]\nassert min_product_tuple(list2) == min(list2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_product_tuple([(2, 3), (5, -2), (10, 20), (-1, -2)]) == -10\nassert     min_product_tuple([(2, 3), (5, -2), (10, 20)]) == -20\nassert     min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == -20\nassert     min_product_tuple([(1, 3), (2, 4), (3, 5), (4, 6), (5, 7), (7, 8), (8, 9)]) == -2\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_product_tuple([[-2,1],[-3,2],[-2,4]]) == -6\nassert     min_product_tuple([[-2,1],[-3,2],[-4,2]]) == -12\nassert     min_product_tuple([[-2,1],[-3,2],[-4,2],[-2,4]]) == -18\nassert     min_product_tuple([[-2,1],[-3,2],[-4,2],[-5,2]]) == -24\nassert     min_product_tuple([[-2,1],[-3,2],[-4,2],[-5,2],[-6,2]]) == -24\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_product_tuple([(1, 2), (2, 4), (3, 6), (4, 8)]) == 8\nassert     min_product_tuple([(1, 2), (2, 4), (3, 6)]) == 4\nassert     min_product_tuple([(1, 2), (2, 4)]) == 4\nassert     min_product_tuple([(1, 2), (3, 6)]) == 6\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([(1,2),(2,4),(1,2),(2,4),(3,4),(1,2),(3,4)]) == (1,2)\nassert     min_product_tuple([(1,2),(2,4),(1,2),(2,4),(3,4),(1,2),(3,4)]) == (1,2)\nassert     min_product_tuple([(1,2),(2,4),(1,2),(2,4),(3,4),(1,2),(3,4)]) == (1,2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_product_tuple([(3,4),(5,6),(7,8),(4,5)]) ==     (7*4, 3*4)\nassert     min_product_tuple([(1,2),(3,4)]) ==     (1*3, 2*4)\nassert     min_product_tuple([(1,2),(2,3)]) ==     (1*2, 2*3)\nassert     min_product_tuple([(2,3),(2,4)]) ==     (2*3, 2*4)\nassert     min_product_tuple([(2,3),(2,4)]) ==     (2*2, 2*4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_product_tuple([(1,2),(3,4),(5,6),(2,4)]) == (1,2)\nassert     min_product_tuple([(1,2),(3,4),(5,6),(2,3)]) == (1,2)\nassert     min_product_tuple([(1,2),(3,4),(5,6),(2,4)]) == (2,4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_product_tuple([(2,4),(3,5),(1,2),(5,6)]) == (1,2)\nassert     min_product_tuple([(2,4),(3,5),(1,2),(5,6)]) == (1,2)\nassert     min_product_tuple([(2,4),(3,5),(1,2),(5,6)]) == (1,2)\nassert     min_product_tuple([(2,4),(3,5),(1,2),(5,6)]) == (1,2)\nassert     min_product_tuple([(2,4),(3,5),(1,2),(5,6)]) == (1,2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert min_product_tuple([(2,3),(4,2),(8,2),(8,4)]) == 8\nassert min_product_tuple([(3,2),(5,4),(5,1),(7,1),(7,3),(9,6)]) == 6\nassert min_product_tuple([(2,3),(4,2),(8,2),(8,4)]) == 8\nassert min_product_tuple([(4,2),(5,4),(5,1),(7,1),(7,3),(9,6)]) == 6\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_val([1,4,10,3,5,6]) == 1,'min_val should return 1'\nassert     min_val([2,3,1,5]) == 1,'min_val should return 1'\nassert     min_val([3,5,10,5,10]) == 5,'min_val should return 5'\nassert     min_val([-1,-3,0,5,-6]) == -6,'min_val should return -6'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_val(['2', '1', '3', '5', '4']) == '2'\nassert     min_val([]) == 'none'\nassert     min_val(['a', 'ab', 'abc']) == 'abc'\nassert     min_val([2, 1, 3, 5, 4]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val([1,2,3,4,5,6]) == 1\nassert     min_val([2,3,4,5,6,7]) == 2\nassert     min_val([]) == None\nassert     min_val([1.2,3.4]) == 1.2\nassert     min_val([3.4,5.6,7.8,4.3]) == 3.4\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_val([10, 3, 2, 5])     == 2\nassert     min_val([1, 2, 3, 4])     == 1\nassert     min_val([5, 2, 3, 4])     == 2\nassert     min_val([0, 2, 3, 4])     == 0\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_val([10, -1, -100, 0, 2]) == -1\nassert     min_val([10, \"s\", \"d\", \"f\", \"g\"]) == \"s\"\nassert     min_val([10, 12, 12.8, 12, \"s\"]) == 12\nassert     min_val([1, \"s\", 3, 0.5, -2]) == 0.5\nassert     min_val([10, \"s\", \"s\", 10, 0, 2]) == 0\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_val(['a', 'b', 3]) == 'b'\nassert     min_val(['b', 'a', 3]) == 'a'\nassert     min_val(['a', 3, 'b']) == 'b'\nassert     min_val(['a', 'b', 'c']) == 'a'\nassert     min_val(['a', 'b', 'c', 2]) == 'a'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_val([1,2,3]) == 1\nassert     min_val([1,-2,3]) == 1\nassert     min_val([-1,-2,3]) == -1\nassert     min_val([]) == None\nassert     min_val([1,2,3,4]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([1, 2, 3, '5', 4]) == 1\nassert     min_val([1, '5', 2, 3, '5', 4]) == 1\nassert     min_val([1, 2, 3, 4, 5, 6]) == 1\nassert     min_val([1, 2, 3, -4, 5, 6]) == 1\nassert     min_val([-1, -2, -3, -4, -5, -6]) == -1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_val([1, 2, 3, 4, 5]) == 1\nassert     min_val([1, 2, 3, 4, 5, 6]) == 1\nassert     min_val([1, 2, 3, 4, 5, 5]) == 1\nassert     min_val([1, 2, 3, 4, 5, 6]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('s_n_a_m_b_l') =='s_n_a_m_b_l'\nassert snake_to_camel('s_n_a_m_b_l') =='sNAMBL'\nassert snake_to_camel('s_n_a_m_b_l')!='sNamBl'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('this_is_snake') == 'thisIsSnake'\nassert     snake_to_camel('this_is_snake') == 'thisIsSnake'\nassert     snake_to_camel('this_is_snake_') == 'thisIsSnake'\nassert     snake_to_camel('this_is_snake_') == 'thisIsSnake'\nassert     snake_to_camel('this_is_snake_123') == 'thisIsSnake123'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case_string') =='snakeCaseString'\nassert     snake_to_camel('snakeCaseString') =='snakeCaseString'\nassert     snake_to_camel('snake_case_') =='snakeCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase','snake_to_camel function is not working properly'\nassert     snake_to_camel('_snake_case') == '_snakeCase','snake_to_camel function is not working properly'\nassert     snake_to_camel('__snake_case') == '__snakeCase','snake_to_camel function is not working properly'\nassert     snake_to_camel('_snake__case') == '_snakeCase','snake_to_camel function is not working properly'\nassert     snake_to_camel('snake_case_') =='snakeCase','snake_to_camel function is not working properly'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"snake_to_camel_word\") == \"snake_to_camelWord\"\nassert     snake_to_camel(\"snake_to_camel_word_\") == \"snake_to_camelWord\"\nassert     snake_to_camel(\"snake_to_camel_word_1\") == \"snake_to_camelWord1\"\nassert     snake_to_camel(\"snake_to_camel_word_2\") == \"snake_to_camelWord2\"\nassert     snake_to_camel(\"snake_to_camel_word_3\") == \"snake_to_camelWord3\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('hello_world') == 'helloWorld'\nassert snake_to_camel('hello_world_') == 'helloWorld'\nassert snake_to_camel('hello_world_123') == 'helloWorld123'\nassert snake_to_camel('hello_world__123') == 'helloWorld__123'\nassert snake_to_camel('hello_world_123_') == 'helloWorld123'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"camelCase\") == \"camelCase\", \"camelCase\"\nassert     snake_to_camel(\"camel_case\") == \"camelCase\", \"camel_case\"\nassert     snake_to_camel(\"camelCase_\") == \"camelCase\", \"camelCase_\"\nassert     snake_to_camel(\"camel_Case_\") == \"camelCase\", \"camel_Case_\"\nassert     snake_to_camel(\"camelCase_1\") == \"camelCase\", \"camelCase_1\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    snake_to_camel('my_snake_case_variable') =='my_snake_case_variable'\n    snake_to_camel('i_am_a_snake_case_variable') == 'iAmA_snake_case_variable'\n    snake_to_camel('my_snake_case_variable_number') =='my_snake_case_variable_Number'\n    snake_to_camel('i_am_a_snake_case_variable_number') == 'iAmA_snake_case_variable_number'\n    snake_to_camel('my_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable') =='my_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable'\n    snake_to_camel('my_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number') =='my_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_number'\n    snake_to_camel('my_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number') =='my_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_number'\n    snake_to_camel('my_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number') =='my_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_number'\n    snake_to_camel('my_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number') =='my_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_number'\n    snake_to_camel('my_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number') =='my_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_number_and_my_snake_case_variable_Number_are_also_snake_case_variable_number'\n    snake_to_camel('my_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number') =='my_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_Number_and_my_snake_case_variable_Number_are_also_snake_case_variable_number_and_my_snake_case_variable_Number_are_also_snake_case_variable_number'\n    snake_to_camel('my_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variable_number_are_also_snake_case_variable_number_and_my_snake_case_variabl"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel(\"snake_case_to_camel\") == \"snakeCaseToCamel\"\nassert snake_to_camel(\"snake_case_to_camel\") == \"snake_case_to_camel\"\nassert snake_to_camel(\"snake_case_to_camel\") == \"snake_case_to_camel\"\nassert snake_to_camel(\"snake_case_to_camel\") == \"snake_case_to_camel\"\nassert snake_to_camel(\"snake_case_to_camel\") == \"snake_case_to_camel\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel(\"camel_case\") == \"CamelCase\"\nassert     snake_to_camel(\"snake_case\") == \"SnakeCase\"\nassert     snake_to_camel(\"snake_case_with_underscore\") == \"SnakeCaseWithUnderscore\"\nassert     snake_to_camel(\"snake_case_with_dashes\") == \"SnakeCaseWithDashes\"\nassert     snake_to_camel(\"snake_case_with_underscore_and_dashes\") == \"SnakeCaseWithUnderscoreAndDashes\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 5, 6, 7], \"Should return [1, 2, 3, 5, 6, 7]\"\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"Should return [1, 2, 3, 4, 5, 6, 7, 8]\"\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"Should return [1, 2, 3, 4, 5, 6, 7, 8, 9]\"\nassert     remove_odd([10, 11, 12, 13, 14, 15, 16, 17, 18]) == [10, 11, 12, 13, 14, 15, 16, 17, 18], \"Should return [10, 11, 12, 13, 14, 15, 16, 17, 18]\"\n\nprint(\"\\n[*] TEST DONE!\")\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8]) == \n        [1,2,3,5,6,8], \"Should return a list without odd numbers\"\nassert     remove_odd([-1,-2,-3,-4,-5,-6,-7,-8]) == \n        [-1, -2, -3, -5, -6, -7, -8], \"Should return a list without odd numbers\"\nassert     remove_odd([]) == \n        [], \"Should return a list without odd numbers\"\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == \n        [1,2,3,4,5,6,7,8,9], \"Should return a list without odd numbers\"\n\nprint(\"remove_odd tests passed\")\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == \\\n        [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]\n\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == \\\n        [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]\n\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8]\nassert     remove_odd([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     remove_odd([]) == []\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    remove_odd(l)"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd([2,3,4,5,6,7,8,9,10,11,12,13]) == \n        [2,3,4,5,6,7,8,9,10]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == \n        [1,2,3,4,5,6,7,8,9,10]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == \n        [1,2,3,4,5,6,7,8,9,10,11]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == \n        [1,2,3,4,5,6,7,8,9,10,11,12,13]\nassert     remove_odd([]) == \n        []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\n\ndef count_odd(l):\n    '''\n    Write a python function to count the number of odd numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1,2,3,4,5,6]) == [1,3,5]\nassert     remove_odd([-2,1,2,3,4,5,6]) == [-2,3,5]\nassert     remove_odd([-2,1,-2,3,4,5,6]) == [-2,3,4,5,6]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd([\"Hello\", \"World\", 1, 2, 4, \"Hello\"]) == [\"Hello\", \"World\", 2, 4]\nassert     remove_odd([\"Hello\", \"World\", 1, 2, 4, 5]) == [\"Hello\", \"World\", 2, 4]\nassert     remove_odd([\"Hello\", \"World\", 1, 2, 4, 5, \"Hello\"]) == [\"Hello\", \"World\", 2, 4, 5]\nassert     remove_odd([\"Hello\", \"World\", 1, 2, 4, 5, \"Hello\"]) == [\"Hello\", \"World\", 1, 2, 4, 5]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_nth_element([(1,2), (3,4), (5,6)], 0) == (1,2)\nassert     extract_nth_element([(1,2), (3,4), (5,6)], 2) == (5,6)\nassert     extract_nth_element([(1,2), (3,4), (5,6)], 1) == (3,4)\nassert     extract_nth_element([(1,2), (3,4), (5,6)], 3) == (5,6)\nassert     extract_nth_element([(1,2), (3,4), (5,6)], 5) == (1,2)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_nth_element([('a','b'),('c','d')], 0) == 'a', \"First element is not 'a'\"\nassert     extract_nth_element([('a','b'),('c','d')], 1) == 'c', \"Second element is not 'c'\"\nassert     extract_nth_element([('a','b'),('c','d')], 2) == 'd', \"Third element is not 'd'\"\nassert     extract_nth_element([('a','b'),('c','d')], 3) == 'b', \"Fourth element is not 'b'\"\nassert     extract_nth_element([('a','b'),('c','d')], 4) == 'a', \"Fifth element is not 'a'\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element(['1', '2', '3', '4', '5'], 0) == '1'\nassert     extract_nth_element(['1', '2', '3', '4', '5'], 1) == '2'\nassert     extract_nth_element(['1', '2', '3', '4', '5'], 2) == '3'\nassert     extract_nth_element(['1', '2', '3', '4', '5'], 3) == '4'\nassert     extract_nth_element(['1', '2', '3', '4', '5'], 4) == '5'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == 2\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 3\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == 4\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 4) == 6\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 5) == 6\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_nth_element([(1,2), (3,4), (5,6)], 0) == (1,2)\nassert     extract_nth_element([(1,2), (3,4), (5,6)], 1) == (3,4)\nassert     extract_nth_element([(1,2), (3,4), (5,6)], 2) == (5,6)\nassert     extract_nth_element([(1,2), (3,4), (5,6)], 3) == ()\n\ndef remove_empty_strings(str):\n    '''\n    Write a function to remove empty strings from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 1) == ('a', 1)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('b', 2)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 3) == ('c', 3)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 0) == ('a', 1)\nassert     extract_nth_element([], 1) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    list1 = [(1,2), (4,3), (6,4)]\n    n = 2\n    print(extract_nth_element(list1, n))\n    \n    list2 = [(1,2,3), (4,5,6), (7,8,9)]\n    n = 2\n    print(extract_nth_element(list2, n))"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_nth_element([(1,2),(3,4)], 0) == (1,2)\nassert     extract_nth_element([(1,2),(3,4)], 2) == (3,4)\nassert     extract_nth_element([(1,2),(3,4)], 1) == (2,4)\nassert     extract_nth_element([(1,2),(3,4)], -2) == (1,2)\nassert     extract_nth_element([(1,2),(3,4)], -4) == (3,4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_nth_element([(1,2),(3,4),(5,6),(7,8)], 1) == (1,2)\nassert     extract_nth_element([(1,2),(3,4),(5,6),(7,8)], 3) == (5,6)\nassert     extract_nth_element([(1,2),(3,4),(5,6),(7,8)], 2) == (3,4)\nassert     extract_nth_element([(1,2),(3,4),(5,6),(7,8)], 0) == (1,2)\nassert     extract_nth_element([(1,2),(3,4),(5,6),(7,8)], -1) == (1,2)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     overlapping([1,2,4],[1,2,3,4])== True\nassert     overlapping([1,2,4],[2,3])== False\nassert     overlapping([1,2,4,5],[5,6])== True\nassert     overlapping([1,2,4,5],[2,3])== False\nassert     overlapping([1,2,4,5],[2,3,4])== True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nlist1 = (1,2,3,4)\nlist2 = (1,2,3,4)\nassert overlapping(list1,list2) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \noverlapping([1, 2, 3, 4], [2, 3, 5])\nassert \noverlapping([1, 2, 3, 4], [2, 3, 5, 6])\nassert \noverlapping([1, 2, 3, 4, 5], [2, 3, 5])\nassert \noverlapping([1, 2, 3, 4, 5], [2, 3, 5, 6])\nassert \noverlapping([1, 2, 3, 4, 5], [2, 3, 5, 6, 7])\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nif __name__ == \"__main__\":\n    # Change the value of x and y below and test your program\n    x = [1, 3, 7, 8, 10]\n    y = [4, 6, 7, 8, 10]\n    print(overlapping(x,y))\n    # Output should be False\n    \n    x = [1, 3, 7, 8, 10]\n    y = [4, 6, 7, 8, 10]\n    print(overlapping(x,y))\n    # Output should be True\n    \n    x = [1, 3, 7, 8, 10]\n    y = [4, 6, 7, 10]\n    print(overlapping(x,y))\n    # Output should be True\n    \n    x = [1, 3, 7, 8, 10]\n    y = [4, 6, 7, 10]\n    print(overlapping(x,y))\n    # Output should be True\n    \n    x = []\n    y = [4, 6, 7, 10]\n    print(overlapping(x,y))\n    # Output should be False\n    \n    x = []\n    y = [4, 6, 7, 10]\n    print(overlapping(x,y))\n    # Output should be False\n    \n    x = []\n    y = [4, 6, 7, 10]\n    print(overlapping(x,y))\n    # Output should be False\n   "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     overlapping([1,4,5,6],[4,6,9])==True\nassert     overlapping([1,4,5,6],[4,6,8])==False\nassert     overlapping([-1,-2,-3,-4],[1,2,3,4])==True\nassert     overlapping([-1,-2,-3,-4],[-1,2,-3,-4])==False\nassert     overlapping([1,4,5,6],[6,4,9])==False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     overlapping([1,2,3,4,5,6],[6,7,8])==True\nassert     overlapping([1,2,3,4,5,6],[7,8,9])==False\nassert     overlapping([2,3,4,5,6,7,8],[2,4,6,7,8,9,10])==True\nassert     overlapping([2,3,4,5,6,7,8],[1,2,3,4,5,6,7])==False\nassert     overlapping([2,3,4,5,6,7,8],[7,8,9,10,11,12])==True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     overlapping([1,2,3,4,5], [5,4,3,2,1]) == True, \"False\"\nassert     overlapping([1,2,3,4,5], [6,7,8,9,10]) == False, \"False\"\nassert     overlapping([1,2,3,4,5,6], [5,4,3,2,1]) == False, \"False\"\nassert     overlapping([1,2,3,4], [5,4,3,2]) == False, \"False\"\nassert     overlapping([1,2,3,4], [4,3,2]) == True, \"True\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Product([1,2,3])==6\nassert     max_Product([1,-2,3,4])==24\nassert     max_Product([-1,-2,-3,-4])==24\nassert     max_Product([-1,2,3])==6\nassert     max_Product([-1,-2,-3])==6\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([3,6,3,4]) == (6,3)\nassert     max_Product([1,2,3,4]) == (24,12)\nassert     max_Product([-1,-2,-3]) == (-1,-2)\nassert     max_Product([-1,-2,-3,-4]) == (-1,-2)\nassert     max_Product([1,2,3,4,5]) == (24,12)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Product([2,4,1]) == 4, \"failed\"\nassert     max_Product([2,5,-1]) == -5, \"failed\"\nassert     max_Product([-2,-5,1]) == -5, \"failed\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 9)\nassert max_Product([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-1, -9)\nassert max_Product([0, 1, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == (0, -9)\nassert max_Product([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) == (-1, -1)\nassert max_Product([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (10, -1)\nprint('Testing complete')\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Product([0, 4, 2, 1, 4]) == 4\nassert     max_Product([1, 2, 3, 4, 5]) == 15\nassert     max_Product([-1, -2, -3, -4, -5]) == -1\nassert     max_Product([1, 2, 3, 4, 5]) == 15\nassert     max_Product([-1, -2, -3, -4, -5]) == -1\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([1, 2, 3, 4, 5]) == 6, 'Error 1'\nassert     max_Product([1, 2, 3, 4, 5, 1]) == 6, 'Error 2'\nassert     max_Product([1, 2, 3, 4, 5, 1, 4]) == 24, 'Error 3'\nassert     max_Product([]) == None, 'Error 4'\nassert     max_Product([10, 20, 30, 40, 50]) == 50, 'Error 5'\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_Product([1, 2, 3, 4, 5, 6, 7]) == 6\nassert     max_Product([1, 2, 3, 4, 5, 6]) == 6\nassert     max_Product([1, 2, 3]) == 3\nassert     max_Product([1, 2, 3, 4, 5]) == 24\nassert     max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 300\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Product([7, 2, 6, 3]) == (7, 2)\nassert     max_Product([1, 2, 3, 4]) == (4, 3)\nassert     max_Product([1, 2, 3, 4, 5]) == (5, 4)\nassert     max_Product([4, 5, 6, 7, 8, 9]) == (8, 9)\nassert     max_Product([1, 2, 3, 5, 6, 8, 9]) == (9, 8)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([('A', '1'), ('A', '2'), ('B', '1'), ('B', '2'), ('B', '3')]) == 'A'\nassert     group_tuples([('A', '1'), ('A', '2'), ('B', '2'), ('B', '3'), ('B', '4')]) == None\nassert     group_tuples([('A', '1'), ('B', '1'), ('B', '2'), ('B', '3')]) == None\nassert     group_tuples([('A', '1'), ('B', '1'), ('B', '2'), ('B', '3'), ('A', '2')]) == None\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 2)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (4, 5)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2, 1)}\n    group_tuples([(2, 3), (4, 5), (2, 2), (2, 1)]) == {(2, 3), (2, 2), (2"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples([(1, 2), (1, 2), (1, 1)]) == (1, 1)\nassert group_tuples([(1, 2), (1, 1)]) == (1, 1)\nassert group_tuples([(1, 1), (1, 2), (1, 1)]) == (1, 1)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples([(1, 2), (2, 2), (3, 4), (5, 6), (6, 6), (7, 7)]) == \n        [(1, 2), (2, 2), (3, 4), (5, 6), (6, 6), (7, 7)]\nassert group_tuples([(1, 1), (1, 1), (2, 2)]) == \n        [(1, 1), (2, 2)]\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     group_tuples(Input) == \n[(1,2),(3,4)]\n\ndef group_lists(Input): \n    '''\n    Write a function to find common element in given list of list.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     group_tuples([[1,2],[3,4],[3,4]]) ==[3]\nassert group_tuples([[1,2],[1,2]]) == [1]\nassert group_tuples([[1,2],[3,4],[1,2],[3,4],[1,2]]) ==[1]\nassert group_tuples([[1,2],[2,3],[3,4],[1,2],[3,4],[1,2]]) ==[1,2]\nassert group_tuples([[1,2],[2,3],[3,4],[1,2],[3,4],[1,2]]) ==[1,2]\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == (0, 0), \"First element should be 0\"\nassert     group_tuples([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == (1, 1), \"First element should be 1\"\nassert     group_tuples([(2, 2), (3, 3), (4, 4), (5, 5)]) == (2, 2), \"First element should be 2\"\nassert     group_tuples([(3, 3), (4, 4), (5, 5)]) == (3, 3), \"First element should be 3\"\nassert     group_tuples([(4, 4), (5, 5)]) == (4, 4), \"First element should be 4\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples([(10,2),(20,3),(4,5)]) == (10,2)\nassert     group_tuples([(10,1),(20,2),(4,5)]) == (10,1)\nassert     group_tuples([(10,1),(20,2),(4,5),(10,2)]) == (10,1)\nassert     group_tuples([(10,1),(20,2),(4,5),(10,3)]) == (10,1)\nassert     group_tuples([(10,1),(20,2),(4,5),(10,3),(20,3),(4,5)]) == (10,1)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     group_tuples([(0, 1), (1, 1), (1, 2), (2, 4), (3, 3)]) == 0, 'error'\nassert group_tuples([(0, 1), (1, 1), (1, 2), (2, 4), (3, 3), (3, 4), (4, 1)]) == 1, 'error'\nassert group_tuples([(0, 1), (1, 1), (1, 2), (2, 4), (3, 3), (3, 4), (4, 1), (4, 5), (5, 1), (6, 6)]) == 1, 'error'\nassert group_tuples([(0, 1), (1, 1), (1, 2), (2, 4), (3, 3), (3, 4), (4, 1), (4, 5), (5, 1), (6, 6), (7, 1), (7, 2), (7, 3), (7, 4)]) == 2, 'error'\nassert group_tuples([(0, 1), (1, 1), (1, 2), (2, 4), (3, 3), (3, 4), (4, 1), (4, 5), (5, 1), (6, 6), (7, 1), (7, 2), (7, 3), (7, 4), (8, 5), (8, 6)]) == 2, 'error'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max([1,2,3,4,5,6,7,8,9,10])==9\nassert     Find_Max([3,3,3,3,3,3,3,3,3,3,3])==3\nassert     Find_Max([9,9,9,9,9,9,9,9,9,9,9])==9\nassert Find_Max([9,9,9,9,9,9,9,9,9,9,9])==9\nassert Find_Max([2,3,4,5,6,7,8,9,10])==10\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([1,2,3]) == 3\nassert     Find_Max([1,2,3,3,3]) == 3\nassert     Find_Max([1,2,3,4,5]) == 4\nassert     Find_Max([]) == 0\n\ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([]) == None, 'Find_Max: List is empty'\nassert     Find_Max([1,2,3]) == 3, 'Find_Max: List with only one element has element with maximum length'\nassert     Find_Max([1,2,3,4,5,6]) == 6, 'Find_Max: List with only one element has element with maximum length'\nassert     Find_Max([1,2,3,4,5,6,7]) == 6, 'Find_Max: List with only one element has element with maximum length'\nassert     Find_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 19, 'Find_Max: List with only one element has element with maximum length'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max([1,2,3,4]) == Find_Max([1,2]) == Find_Max([1,2,3]) == Find_Max([1,2,3,4]) == 4, \"Wrong result!\"\nassert     Find_Max([]) == Find_Max([1]) == Find_Max([1,1]) == Find_Max([1,1,1]) == 1, \"Wrong result!\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max([1,2,3,4]) == 4\nassert     Find_Max([1,2,3,4,5,6]) == 5\nassert     Find_Max([1,2,3,4,5,6,7]) == 7\nassert     Find_Max([1,2,3,4,5,6,7,8,9]) == 7\nassert     Find_Max([]) == None\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5, \"Should be 5\"\nassert     Find_Max([5,4,3,2,1]) == 5, \"Should be 5\"\nassert     Find_Max([1,1,1,1,1]) == 1, \"Should be 1\"\nassert     Find_Max([1,2,3,4,5]) == 5, \"Should be 5\"\nassert     Find_Max([]) == None, \"Empty list should return None\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nFind_Max([1,2,3,4,5,6,7]) == 7, \"Wrong answer\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max([1,2,3,4,5,6]) == 6, \"Wrong output\"\nassert     Find_Max([1,2,3]) == 1, \"Wrong output\"\nassert     Find_Max([1,2,3,4]) == 4, \"Wrong output\"\nassert     Find_Max([1,2,3,4,5]) == 5, \"Wrong output\"\nassert     Find_Max([]) == None, \"Wrong output\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert round_and_sum([1,2,3]) == 2\nassert round_and_sum([1.5,3.0,2.5]) == 5\nassert round_and_sum([-1,3,-4]) == -8\nassert round_and_sum([]) == 0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     round_and_sum([1,2,3,4,5]) == 50\nassert     round_and_sum([1.1,2.2,3.3,4.4,5.5]) == 50.5\nassert     round_and_sum([-1,-2,-3,-4,-5]) == -10\nassert round_and_sum([1,2,3,4,5]) == 10\nassert round_and_sum([1,2,3,4,5,6,7,8,9,10]) == 120\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nround_and_sum([1,2,3,4,5]) == 15, 'the function should return the sum of all numbers rounded to the nearest 10.'\nassert round_and_sum([3,2,1]) == 10, 'the function should return 10 if the given list has only 1 number.'\nassert round_and_sum([3.2,2.1]) == 10, 'the function should return 10 if the given list has only 2 numbers.'\n\n'''\n3. Write a function that receives as input a list of integers and returns a new list with the \nelements that are greater than the mean of the original list.\n'''\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([2.5, 4.1, 5.6]) == 14\nassert     round_and_sum([6.5, -8.5]) == -24\nassert     round_and_sum([-8.5, -3.5, 3.5, 5.5, 4.8]) == -48\nassert     round_and_sum([-8.5, -3.5, 3.5, 5.5, 4.8]) == -48\nassert     round_and_sum([3.5, 5.5, -3.5]) == 13\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     round_and_sum([1, 2, 3]) == 30\nassert     round_and_sum([2.2, 3.3, 5.5]) == 50\nassert     round_and_sum([-1.1, -2.2, -3.3, -5.5]) == -75\nassert     round_and_sum([-2.2, -3.3, -5.5, -7.7]) == -14\nassert     round_and_sum([-2.2, -3.3, -5.5, -7.7, -2.2]) == -40\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    round_and_sum([2.3, 4.5, 6.3, 8.7]) == 15\n    round_and_sum([7, 6.5, 8, 9]) == 30\n    round_and_sum([6.5, 8, 9, 7]) == 20\n    round_and_sum([0.5, 1.6, 1.5, 1.9]) == 10.2\n    round_and_sum([0.5, 1.6, 1.5, 1.9]) == 10.2"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert round_and_sum([0.1,0.5]) == 0.2\nassert round_and_sum([0.1,0.5,0.3,0.4]) == 0.6\nassert round_and_sum([0.1,0.5,0.3,0.4,0.6]) == 0.8\nassert round_and_sum([0.1,0.5,0.3,0.4,0.6,0.7]) == 1.0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef reverse(list1):\n    '''\n    Write a function that reverses a list of numbers and prints the result.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_average(list1):\n    '''\n    Write a function to find the average value of the list.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     round_and_sum([1,1,1,1,1,1]) == 120\nassert     round_and_sum([1,2,3,4,5]) == 60\nassert     round_and_sum([1,2,3,4,5,6]) == 120\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10]) == 840\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 170640\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_Sum(0) == 0\nassert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 27\nassert     cube_Sum(4) == 64\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncube_Sum(2) == 6\ncube_Sum(3) == 15\ncube_Sum(5) == 60\ncube_Sum(5) == 3500\ncube_Sum(5) == 35000\ncube_Sum(7) == 5837\ncube_Sum(9) == 57318\ncube_Sum(10) == 28345\ncube_Sum(11) == 2468000\ncube_Sum(13) == 2310545"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_Sum(1) == 0\nassert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 36\nassert     cube_Sum(4) == 64\nassert     cube_Sum(5) == 100\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_Sum(2) == 8\nprint(\"Correct\")\n\ncube_Sum(3) == 36\nprint(\"Correct\")\n\ncube_Sum(4) == 64\nprint(\"Correct\")\n\ncube_Sum(5) == 125\nprint(\"Correct\")"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncube_Sum(3) == 8, 'cube_Sum returns wrong value'\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncube_Sum(4) == 8\nprint('Passed')\n\n\n'''\na = 0\ndef cube_Sum(a): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_Sum(1) == 1\nassert    cube_Sum(2) == 8\nassert    cube_Sum(3) == 27\nassert    cube_Sum(5) == 243\nassert    cube_Sum(6) == 1296\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a-b-c'\nassert     concatenate_tuple(('a', 'b', 'c')) == 'a-b-c'\nassert     concatenate_tuple(('a', 'b', 'c')) == 'a-b-c'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate_tuple((\"a\",\"b\",\"c\")) == \"abc\"\nassert     concatenate_tuple((\"a\",\"b\",\"c\",1,2,3,4,5)) == \"a1b2c3\"\nassert     concatenate_tuple((\"a\",\"b\",\"c\",1,2,3,4,5,\"a\",\"b\",\"c\",1,2,3,4,5,\"a\",\"b\",\"c\",1,2,3,4,5)) == \"a1b2c3a1b2c3a1b2c3\"\nassert     concatenate_tuple((\"a\",\"b\",\"c\",1,2,3,4,5,\"a\",\"b\",\"c\",1,2,3,4,5)) == \"a1b2c3a1b2c3a1b2c3\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef replace_char(test_string, char_to_replace, new_char):\n    '''\n    Write a function that takes a string and a character and replace the character in the string.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a;b;c'\nassert concatenate_tuple((1, 2, 3)) == '1;2;3'\nassert concatenate_tuple((1, 2)) == '1;2'\nassert concatenate_tuple((1, 2, 3, 4)) == '1;2;3;4'\nassert concatenate_tuple((1, 2, 3, 4, 5, 6, 7)) == '1;2;3;4;5;6;7'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('TEST CASE 1')\ntup = (1, 2, 3)\nprint('TEST CASE 1')\nassert (concatenate_tuple(tup) == '1,2,3')\n\n\nprint('\\nTEST CASE 2')\ntup = (1, 2, 3, 4, 5)\nprint('TEST CASE 2')\nassert (concatenate_tuple(tup) == '1,2,3,4,5')\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple((1, 2, 3, 4, 5, 6)) == '1,2,3,4,5,6', 'incorrect'\nassert     concatenate_tuple((\"1\",\"2\",\"3\")) == '1,2,3', 'incorrect'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate_tuple(('harry', 'rahul', 'rakesh')) == 'harryrahulrakesh', 'test 1 failed'\nassert     concatenate_tuple((3, 4, 5, 6, 7)) == '3 4 5 6 7', 'test 2 failed'\nassert     concatenate_tuple('hello') == 'hello', 'test 3 failed'\nassert     concatenate_tuple('hello ') == 'hello ', 'test 4 failed'\nassert     concatenate_tuple(('harry', 'rahul', 'rakesh')) == 'harryrahulrakesh', 'test 5 failed'\nprint('all tests passed!')\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple(('Hello', 'World')) == 'HelloWorld'\nassert     concatenate_tuple(('Hello', 'World', '!', 'Goodbye')) == 'HelloWorld!Goodbye'\nassert     concatenate_tuple(('Hello', 'World', '!', 'Goodbye', ':', 'Hello', 'World')) == 'HelloWorld!Goodbye:HelloWorld'\nassert     concatenate_tuple(('Hello', 'World', '!', 'Goodbye', ':', 'Hello', 'World', '!', 'Goodbye')) == 'HelloWorld!Goodbye:HelloWorld!Goodbye'\n\n'''\nFunction Test Results\nHelloWorld\nHelloWorld\nHelloWorld!Goodbye\nHelloWorld!Goodbye\nHelloWorld!Goodbye\nHelloWorld!Goodbye\nHelloWorld!Goodbye\n'''\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(('a','b','c')) == 'abc'\nassert     concatenate_tuple(('1','2','3')) == '123'\nassert     concatenate_tuple(('a','b','c','d')) == 'abc'd'\nassert     concatenate_tuple(('a','b')) == 'abc'\nprint('correct')\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(3) == 1\nassert     find_Average_Of_Cube(4) == 1\nassert     find_Average_Of_Cube(5) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Average_Of_Cube(5) == 225\nassert     find_Average_Of_Cube(20) == 1476\nassert     find_Average_Of_Cube(25) == 1836\n\ndef find_Average_Of_All_Positive_Integers(n):\n    '''\n    Write a python function to find the average of all positive integers that are less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Average_Of_Cube(4) == 9\nassert     find_Average_Of_Cube(2) == 9\nassert     find_Average_Of_Cube(0) == 0\nassert     find_Average_Of_Cube(1) == 0\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Average_Of_Cube(5) == 8\nassert     find_Average_Of_Cube(10) == 64\nassert     find_Average_Of_Cube(20) == 1040"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Average_Of_Cube(5)==32.0, \"Result is not as expected.\"\nassert     find_Average_Of_Cube(2)==9.0, \"Result is not as expected.\"\nassert     find_Average_Of_Cube(15)==1425.0, \"Result is not as expected.\"\nassert     find_Average_Of_Cube(8)==64.0, \"Result is not as expected.\""
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Average_Of_Cube(4) == 8.0\nassert     find_Average_Of_Cube(2) == 9.0\nassert     find_Average_Of_Cube(10) == 33.0\nassert     find_Average_Of_Cube(0) == 0.0\nassert     find_Average_Of_Cube(-1) == 0.0\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nfind_Average_Of_Cube(5) == 4"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(3) == 1\nassert     find_Average_Of_Cube(4) == 1\nassert     find_Average_Of_Cube(5) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Average_Of_Cube(5) ==     12\nassert     find_Average_Of_Cube(3) ==     9\nassert     find_Average_Of_Cube(2) ==     10\nassert     find_Average_Of_Cube(1) ==     1\nprint(\"Python code is correct\")"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear(('Google', 'Cambridge University', 'California')) ==     ('Cambridge University', )\nassert     extract_rear(('Einstein', 'Newton', 'Rosenberg')) ==     ('Einstein', )\nassert     extract_rear(('Cars', 'Bikes', 'Horses')) ==     ('Cars', 'Bikes', )\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    extract_rear(('kajak', 'kajak', 'kajak')) == ('kajak', 'kajak', 'kajak')\n    extract_rear(('a', 'a', 'a')) == ('a', 'a', 'a')\n    extract_rear(('abc', 'abc', 'abc')) == ('abc', 'abc', 'abc')\n    extract_rear(('kajak', 'kajak', 'kajak')) == ('kajak', 'kajak', 'kajak')\n    extract_rear(('', '', '')) == ('', '', '')\n    extract_rear(('a', 'a', 'a')) == ('a', 'a', 'a')\n    extract_rear(('abc', 'abc', 'abc')) == ('abc', 'abc', 'abc')\n    extract_rear(('kajak', 'kajak', 'kajak')) == ('kajak', 'kajak', 'kajak')\n    extract_rear(('kajak', 'kajak', 'kajak')) == ('kajak', 'kajak', 'kajak')\n    extract_rear(('kajak', 'kajak', 'kajak')) == ('kajak', 'kajak', 'kajak')\n    extract_rear(('kajak', 'kajak', 'kajak')) == ('kajak', 'kajak', 'kajak')\n    extract_rear(('a', 'a', 'a')) == ('a', 'a', 'a')\n    extract_rear(('abc', 'abc', 'abc')) == ('abc', 'abc', 'abc')\n    extract_rear(('kajak', 'kajak', 'kajak')) == ('kajak', 'kajak', 'kajak')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_rear(('abcd','def','ghi','jkl')) == ('def','jkl')\nassert     extract_rear(('abcd','ghi','def','jkl')) == ('ghi','def')\nassert     extract_rear(('abcd','ghi','def','jkl','nop')) == ('ghi','def','jkl')\nassert     extract_rear(('abcd','ghi','def','jkl','nop','rst')) == ('ghi','def','jkl','rst')\nassert     extract_rear(('abcd','ghi','def','jkl','nop','rst','thi')) == ('ghi','def','jkl','nop','rst')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('e', 'd', 'c', 'b', 'a')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('e', 'd', 'c', 'b', 'a')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('e', 'd', 'c', 'b', 'a')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear(('a','b','c')) == ('c',)\nassert     extract_rear(('a','b','c','d')) == ('c',)\nassert     extract_rear(('a','b','c','d','e')) == ('c',)\nassert     extract_rear(('a','b','c','d','e','f')) == ('c',)\nassert     extract_rear(('a','b','c','d','e','f','g')) == ('c',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear(test_tuple_1) == (1, 'a')\nassert     extract_rear(test_tuple_2) == (3, 'a')\nassert     extract_rear(test_tuple_3) == (1, 'a')\n\ndef extract_rear_2(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed(list(enumerate(test_tuple))))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear(('hello','world','hi')) == ('hi',)\nassert     extract_rear(('hello','world','hi','bye','hello','world','hi','hello','hello')) == ('hello',)\nassert     extract_rear(('hi','hello','hello','bye','hi','hello','hello','hello','hello')) == ('hello',)\nassert     extract_rear(('hi','hello','hello','hello','hi','hello','hello','hello','hello')) == ('hello',)\nassert     extract_rear(('hi','hello','hello','hi','hi','hello','hello','hello','hello')) == ('hello',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9)) == [2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 5)) == [2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 8)) == [2, 3, 4, 5, 6, 7, 8]\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 4)) == [2, 3, 4, 5, 6, 7, 8]\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear(('abcd','de','fgh','ijkl')) == ('de','ijkl')\nassert     extract_rear(('abcd','def','gh','ijk')) == ('gh','ijk')\nassert     extract_rear(('abcd','de','fgh','ijkl')) == ('ijkl','fgh')\nassert     extract_rear(('abcd','de','fgh','ijkl')) == ('ijkl','fgh')\nassert     extract_rear(('abcd','de','fgh','ijkl')) == ('ijkl','fgh')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear(('12', '3')) ==     3\nassert     extract_rear(('abc', 'efg')) ==     'e'\nassert     extract_rear(('abc', 'abc', 'def')) ==     'e'\nassert     extract_rear(('abc', 'abc', 'abc', 'def')) ==     'def'\nassert     extract_rear(('12', '3')) ==     3\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_element_in_list([1,2,3], 2) == 1\nassert     count_element_in_list([1,2,3], 3) == 1\nassert     count_element_in_list([1,2,3], 0) == 1\nassert     count_element_in_list([1,2,3,4], 3) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert count_element_in_list([], 1) == 0, \"There is no element of 1\"\nassert count_element_in_list([1,2,3], 1) == 1, \"There is one element of 1\"\nassert count_element_in_list([1,2,3], 2) == 1, \"There is one element of 2\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_element_in_list([1,2,3], 3) == 2\nassert     count_element_in_list([1,2,3], 4) == 0\nassert     count_element_in_list([1,2,3], 1) == 3\nassert     count_element_in_list([1,2,3,4], 1) == 3\nassert     count_element_in_list([1,2,3,4], 3) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_element_in_list([1, 2], 1) == 2\nassert count_element_in_list([1, 2], 2) == 1\nassert count_element_in_list([1, 1, 2, 1], 1) == 2\nassert count_element_in_list([1, 1, 2, 1], 2) == 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_element_in_list([],5) == 0\nassert     count_element_in_list([1, 2, 3], 5) == 0\nassert     count_element_in_list([2, 4, 5, 6], 5) == 2\nassert     count_element_in_list([4, 5, 6, 7, 8], 5) == 3\nassert     count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], 5) == 5\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_element_in_list([[1, 2], 3], 1) == 1\nassert count_element_in_list([[1, 2], 3], 2) == 1\nassert count_element_in_list([[1, 2], 3], 3) == 1\nassert count_element_in_list([[1, 2], 3], 4) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef list_of_num(n):\n    '''\n    Write a function to create a list of numbers in a given range.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_element_in_list([], 10) == 0\nassert     count_element_in_list([1, 2, 3], 10) == 0\nassert     count_element_in_list([1, 2, 3, 4, 5, 6, 7], 10) == 1\nassert     count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8], 10) == 2\nassert     count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 3\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {1, 3, 5, 7, 9}\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == {1, 3, 5, 7, 9, 11}\nassert     filter_oddnumbers([]) == {}\nassert     filter_oddnumbers([10]) == {10}\nassert     filter_oddnumbers([10, 11]) == {10, 11}\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([1,2,3,4,5,6]) == []\nassert     filter_oddnumbers([10,20,30,40,50]) == [10,20,30,40,50]\nassert     filter_oddnumbers([-1,-100,-3,-4,-5]) == [-100,-5]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([3, 5, 7, 9, 1, 2, 4, 6, 8, 10]) ==     [3, 5, 7, 9, 1]\nassert     filter_oddnumbers([3, 5, 7, 9, 1, 2, 4, 6, 8, 10]) ==     [3, 5, 7, 9, 1]\n\ndef filter_multiples(nums, x=3):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9], 'odd numbers'\nassert     filter_oddnumbers([]) == [], 'empty list'\nassert     filter_oddnumbers([9,8,7,6,5,4,3,2,1,0]) == [9,7,5,3,1], 'odd numbers'\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9], 'odd numbers'\n\ndef filter_oddnumbers_alternative(nums):\n    '''\n    alternative solution using lambda expression\n    '''\n    return list(filter(lambda x: x%2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [3,5], \"Wrong!\"\nassert     filter_oddnumbers([1,2,3,4,5,6]) == [3,5,6], \"Wrong!\"\nassert     filter_oddnumbers([1,2,3,4,5,6,7]) == [3,5,6,7], \"Wrong!\"\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [3,5,6,7,8,9,10], \"Wrong!\"\nassert     filter_oddnumbers([]) == [], \"Wrong!\"\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # write your code here\n    return (filter(lambda x: x%2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nimport unittest\n\nclass Test(unittest.TestCase):\n    '''Test Cases'''\n    data = [\n        (('12/31/2021', '01/01/2020'), '31-01-2021'),\n        (('12/01/2021', '01/01/2020'), '31-01-2020'),\n        (('12/31/2020', '01/01/2021'), '31-01-2021'),\n        (('31/01/2021', '01/01/2020'), '31-01-2020'),\n        (('13/02/2020', '01/01/2021'), '02/13/2021'),\n    ]\n\n    def test_validate(self):\n        '''Test Cases'''\n        for [test_date, expected] in self.data:\n            actual = change_date_format(test_date)\n            self.assertEqual(actual, expected, \"Should return the given date format\")\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndef get_inp():\n    '''\n    Write a function to read the numbers of the input and return them.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format('2019-05-22') == '22-05-2019'\nassert     change_date_format('2019-05-22') == '22-05-2019'\nassert     change_date_format('2019-05-22') == '22-05-2019'\nassert     change_date_format('2019-05-22') == '22-05-2019'\nassert     change_date_format('2019-05-22') == '22-05-2019'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format(\"2021-07-11\") == \"11-07-2021\"\nassert     change_date_format(\"30-01-19\") == \"01-01-19\"\nassert     change_date_format(\"00-00-00\") == \"00-00-00\"\nassert     change_date_format(\"01-31-2020\") == \"01-31-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format(\n        '2015-01-01') == '01-01-2015', 'Change format'\n\nassert     change_date_format(\n        '2015-01-01') == '01-01-2015', 'Change format'\n\nassert     change_date_format(\n        '2015-01-01') == '01-01-2015', 'Change format'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_date_format('2019-01-01') == '31-01-2019'\nassert     change_date_format('2019-12-01') == '31-12-2019'\nassert     change_date_format('2019-01-31') == '31-01-2019'\nassert     change_date_format('2019-31-01') == '31-01-2019'\nassert     change_date_format('2019-01-01') == '31-01-2019'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    change_date_format('15-02-2020') == '2020-02-15'\n    chang"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_date_format(    '2018-12-31') == '31-12-2018'\nassert     change_date_format(    '02-08-2020') == '08-02-2020'\nassert     change_date_format(    '04-12-2020') == '04-12-2020'\nassert     change_date_format(    '25-12-2020') == '25-12-2020'\nassert     change_date_format(    '10-31-2020') == '10-31-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format('2019-12-03') == '31-03-2019', 'test case 1'\nassert     change_date_format('2019-11-30') == '30-11-2019', 'test case 2'\nassert     change_date_format('2019-06-05') == '05-06-2019', 'test case 3'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format('2015-11-17') == '17-11-2015', 'Incorrect date format'\nassert     change_date_format('01-01-2015') == '01-01-2015', 'Incorrect date format'\nassert     change_date_format('01-01-2014') == '01-01-2014', 'Incorrect date format'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     shell_sort([]) == None\nassert     shell_sort([3]) == None\nassert     shell_sort([1,2,3,4,5,6,7,8,9,10]) == None\nassert     shell_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == None\nassert     shell_sort([3, 4, 5, 2, 1, 6, 7, 10, 9]) == None\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     shell_sort([]) == [], 'Empty array'\nassert     shell_sort([5]) == [5], 'Single element array'\nassert     shell_sort([-5, -2, -1, 0, 1, 2, 5]) == [-5, -2, -1, 0, 1, 2, 5], 'Positive array'\nassert     shell_sort([-5, -2, -1, -2, -3, -4, -5]) == [-5, -2, -3, -4, -5, -2, -1], 'Negative array'\nassert     shell_sort([5, 0, 3, 2, 1]) == [0, 1, 2, 3, 5], 'Duplicate array'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     shell_sort([]) == []\nassert     shell_sort([1]) == [1]\nassert     shell_sort([10, 7, 5, 3, 2, 8]) == [2, 3, 5, 7, 8, 10]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nshell_sort(my_list) == sorted(my_list)\nprint(my_list)\n\n'''\nTest Cases\nInput    Output\n[1,2,3,4]    [1,2,3,4]\n[-10,-9,-8,7,6,5,4,3,2,1]    [-10,-9,-8,7,6,5,4,3,2,1]\n'''"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert shell_sort([8,4,2,3]) == [2,4,3,8]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # test_case 1\n    and_tuples((1, 2), (3, 4)) == (1, 3)\n    # test_case 2\n    and_tuples((2, 1), (1, 4)) == (2, 1)\n    # test_case 3\n    and_tuples((1, 2), (2, 3)) == (2, 3)\n    # test_case 4\n    and_tuples((2, 1), (2, 1)) == (2, 1)\n    # test_case 5\n    and_tuples((1, 1), (1, 1)) == (1, 1)\n    # test_case 6\n    and_tuples((3, 4), (1, 2)) == (4, 3)\n    # test_case 7\n    and_tuples((1, 4), (1, 2)) == (1, 2)\n\ndef if_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise if-tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples((1,2,3),(4,5,6)) == (1,4,3)\nassert     and_tuples((7,8,9),(4,5,6)) == (7,4,9)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     and_tuples((1,2,3), (4,5,6)) == (1,4,3)\nassert     and_tuples((1,2,3), (5,6,7)) == (1,5,3)\nassert     and_tuples((1,2), (3,4)) == (1,3)\n\ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     and_tuples((1,2,3),(2,3,4)) == ((1,2,3),(2,3,4))\nassert     and_tuples((1,2,3),(4,5,6)) == ((1,2,3),(4,5,6))\nassert     and_tuples((7,8,9),(1,2,3)) == ((7,8,9),(1,2,3))\nassert     and_tuples((7,8,9),(7,8,9)) == ((7,8,9),(7,8,9))\nassert     and_tuples((1,2,3),(3,4,5)) == ((1,2,3),(3,4,5))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     and_tuples((1,2,3),(4,5,6)) == (1,4,3,2,5,6)\nassert     and_tuples((1,2,3),(2,3,4)) == (2,3,1,1,2,3)\nassert     and_tuples((1,2,3,4),(2,3,4,5)) == (1,2,3,4,4,5)\nassert     and_tuples((2,3,4),(5,6,7)) == (2,3,4,5,6,7)\nassert     and_tuples((1,2,3,4,5),(6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     and_tuples((1,2,3), (4,5,6)) == ((1,2,3), (4,5,6))\nassert     and_tuples((1,2,3), (4,5,6,7)) == ((1,2,3,7), (4,5,6,7))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     and_tuples((1,2), (3,4)) == ((1,2),(3,4))\nassert     and_tuples((1,2), (3,4,5)) == ((1,2),(3,4,5))\nassert     and_tuples((1,2), (4,5,6)) == ((1,2),(4,5,6))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     and_tuples(('a','b','c'), ('d', 'e', 'f')) == ('a','d','e')\nassert     and_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     and_tuples(('a','b','c'), ('d', 'e', 'f')) == ('a','d','e')\n\ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parabola_directrix(1, -2, -3) == (2, -1)\nassert     parabola_directrix(3, 2, -1) == (3, -2)\nassert     parabola_directrix(4, 3, 1) == (3, 0)\n\ndef parabola_derivative(a, b, c):\n    '''\n    Write a function to find the derivative of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parabola_directrix(3, -3, 0) == 5\nassert     parabola_directrix(2, 1, -1) == 1\nassert     parabola_directrix(1, 0, 0) == -1\nassert     parabola_directrix(-3, -3, 0) == 5\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parabola_directrix(1, 2, 3) == [-0.5, 2]\nassert     parabola_directrix(-1, 2, 3) == [-0.5, 2]\nassert     parabola_directrix(1, -2, 3) == [0, 0]\nassert     parabola_directrix(1, 2, -3) == [0, 0]\nassert     parabola_directrix(1, 2, 3) == [0, 0]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parabola_directrix(1, 1, 1) == 2\nassert     parabola_directrix(2, 1, 1) == 2\nassert     parabola_directrix(1, 2, 1) == 2\nassert     parabola_directrix(1, 0, 1) == 2\nassert     parabola_directrix(2, 0, 1) == 2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncommon_element([1, 2, 3, 4], [1, 2, 3, 4]) == True, \"Wrong\"\nassert \ncommon_element([1, 2, 3, 4], ['a', 'b', 'c', 'd']) == False, \"Wrong\"\nassert \ncommon_element([1], ['a', 'b', 'c', 'd']) == False, \"Wrong\"\nassert \ncommon_element([], ['a', 'b', 'c', 'd']) == False, \"Wrong\"\nassert \ncommon_element([1], ['a', 'b', 'c', 'd', 'e']) == False, \"Wrong\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([],[] )== True \nassert     common_element([1],[] )== False\nassert     common_element([1,2],[] )== False\nassert     common_element([1,2,3],[] )== False\nassert     common_element([1,2],[3,4] )== False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncommon_element([1,2,3,4,5], [1,2,3,4,6]) == True\ncommon_element([1,2,3,4,5], [1,2,3,6,7]) == False\ncommon_element([1,2,3], [4,5,6]) == True\ncommon_element([1,2,3,4,5], [1,2,3,4,6,7]) == False\ncommon_element([], []) == False\n\n\n\n'''\nWrite a function that returns a list of tuples representing the intersection of two lists.\n'''\n\ndef intersection(list1, list2):\n    '''\n    Write a function that takes two lists and returns a list of tuples representing the intersection of two lists.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_element([1,2,3,4],[5,6,7,8])     == True\nassert     common_element([1,2,3,4],[4,5,6,7])     == False\nassert     common_element([1,2,3,4,5,6,7],[1,2,3,4]) == True\n\ndef elements_intersect(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_element([1,2,3,4], [1,2,3,4]) == True, 'Failed to find common element'\nassert common_element([1,2,3,4], [1,2,3,5]) == False, 'Failed to find common element'\nassert common_element([1,2,3,4], ['a', 'b', 'c', 'd']) == False, 'Failed to find common element'\nassert common_element([1,2,3], ['a', 'b', 'c', 'd']) == False, 'Failed to find common element'\nassert common_element([1,2,3], [1,2,3,4]) == True, 'Failed to find common element'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([1,2,3], [1,2,3])\nassert     common_element([1,2,3], [2,3,4])\nassert     common_element([1,2], [2,3,4])\nassert     common_element([2,3], [1,2,3])\nassert     common_element([1,2,3], [])\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1, 2, 3, 4, 5], [2, 3, 5, 8]) == True, \"First\"\nassert     common_element([1, 2, 3, 4, 5], [2, 3, 6, 8]) == False, \"Second\"\nassert     common_element([1, 2, 3, 4, 5], [2, 3, 6, 8, 10]) == True, \"Third\"\nassert     common_element([1, 2, 3, 4, 5], [2, 3, 5, 8, 10]) == True, \"Fourth\"\nassert     common_element([1, 2, 3, 4, 5], [2, 3, 5, 7, 10]) == True, \"Fifth\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element([1,2,3,4,5], [1,2,3,4,5]) == True, \"Wrong\"\nassert     common_element([1,2,3,4,5], [1,2,4,5]) == False, \"Wrong\"\nassert     common_element([1,2,3,4], [1,2,4,5,6]) == False, \"Wrong\"\nassert     common_element([1,2,3,4,5], [1,2,3,4]) == True, \"Wrong\"\nassert     common_element([1,2,3,4], [1,2,4,5,6]) == False, \"Wrong\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_trapezium(10, 10, 10) == 10\nassert     median_trapezium(8, 8, 10) == 10\nassert     median_trapezium(10, 10, 5) == 5"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"The length of a median trapezium is \" + str(median_trapezium(4,5,1)) + \" units.\")\n\nprint(\"The length of a median trapezium is \" + str(median_trapezium(4,5,1.5)) + \" units.\")\n\nprint(\"The length of a median trapezium is \" + str(median_trapezium(4,5,2)) + \" units.\")\n\nprint(\"The length of a median trapezium is \" + str(median_trapezium(4,5,2.5)) + \" units.\")\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(median_trapezium(1, 2, 3) == 1.5)\nassert median_trapezium(5, 6, 7) == 5.5\nassert median_trapezium(6, 4, 6) == 5.0\nassert median_trapezium(7, 5, 6) == 5.5\nprint('Test passed'"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_trapezium(2,3,4) == 1.5, 'input incorrect'\nassert median_trapezium(1,3,4) == 2, 'input incorrect'\nassert median_trapezium(2,4,4) == 3, 'input incorrect'\nassert median_trapezium(1,2,3) == 2, 'input incorrect'\nassert median_trapezium(2,3,4) == 2, 'input incorrect'\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_trapezium(0,0,0)    ==     0\nassert     median_trapezium(2,0,0)    ==     0\nassert     median_trapezium(0,2,0)    ==     0\nassert     median_trapezium(0,0,2)    ==     0\nassert     median_trapezium(2,2,2)    ==     2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    median_trapezium(1,2,3) == 2.0\n    median_trapezium(2,3,4) == 3.0\n    median_trapezium(3,4,5) == 3.0\n    median_trapezium(1,4,5) == 3.0\n    median_trapezium(3,4,5) == 4.0\n    median_trapezium(1,2,4) == 3.0\n    median_trapezium(1,2,3) == 2.0\n    median_trapezium(0,0,0) == 0.0\n    median_trapezium(2,3,1) == 1.0\n    median_trapezium(1,2,5) == 3.0\n    median_trapezium(3,4,5) == 3.0\n    median_trapezium(5,6,7) == 5.0\n    median_trapezium(0,0,0) == 0.0\n    median_trapezium(1,0,1) == 1.0\n    median_trapezium(1,0,2) == 1.5\n    median_trapezium(0,0,0) == 0.0\n    median_trapezium(3,4,5) == 3.5\n    median_trapezium(3,4,6) == 3.5\n    median_trapezium(5,4,6) == 4.5\n    median_trapezium(3,4,5) == 3.5\n    median_trapezium(1,1,1) == 1.0\n    median_trapezium(2,2,1) == 1.0\n    median_trapezium(1,2,3) == 2.0\n    median_trapezium(1,2,4) == 2.0\n    median_trapezium(1,2,5) == 2.0\n    median_trapezium(1,2,6) == 2.0\n    median_trapezium(1,2,7) == 2.0\n    median_trapezium(1,2,8) == 2.0\n    median_trapezium(2,1,1) == 1.0\n    median_trapezium(2,1,2) == 1.5\n    median_trapezium(1,1,2) == 1.0\n    median_trapezium(1,1,3) == 1.0\n    median_trapezium(1,1,4) == 1.0\n    median_trapezium(1,1,5) == 1.0\n    median_trapezium(1,1,6) == 1.0\n    median_trapezium(1,1,7) == 1.0\n    median_trapezium(1,1,8) == 1.0\n    median_trapezium(2,2,1) == 1.5\n    median_trapezium(2,2,2) == 2.0\n    median_trapezium(2,2,3) == 2.0\n    median_trapezium(2,2,4) == 2.0\n    median_trapezium(2,2,5) == 2.0\n    median_trapezium(2,2,6) == 2.0\n    median_trapezium(2,2,7) == 2.0\n    median_trapezium(2,2,8) == 2.0\n    median_trapezium(2,2,9) == 2.0\n    median_trapezium(2,2,10) == 2.5\n    median_trapezium(3,3,1) == 1.0\n    median_trapezium(3,3,2) == 1.5\n    median_trapezium(3,3,3) == 2.0\n    median_trapezium(3,3,4) == 2.0\n    median_trapezium(3,3,5) == 2.0\n    median_trapezium(3,3,6) == 2.0\n    median_trapezium(3,3,7) == 2.0\n    median_trapezium(3,3,8) == 2.0\n    median_trapezium(3,3,9) == 2.0\n    median_trapezium(3,3,10) == 2.5\n    median_trapezium(4,4,1) == 1.5\n    median_trapezium(4,4,2) == 2.0\n    median_trapezium(4,4,3) == 2.0\n    median_trapezium(4,4,4) == 2.0\n    median_trapezium(4,4,5) == 2.0\n    median_trapezium(4,4,6) == 2.0\n    median_trapezium(4,4,7) == 2.0\n    median_trapezium(4,4,8) == 2.0\n    median_trapezium(4,4,9) == 2.0\n    median_trapezium(4,4,10) == 3.0\n    median_trapezium(5,5,1) == 1.0\n    median_trapezium(5,5,2) == 1.5\n    median_trapezium(5,5,3) == 2.0\n    median_trapezium(5,5,4) == 2.0\n    median_trapezium(5,5,5) == 2.0\n    median_trapezium(5,5,6) == 2.0\n    median_trapezium(5,5,7) == 2.0\n    median_trapezium(5,5,8) == 2.0\n    median_trapezium(5,5,9) == 2.0\n    median_trapezium(5,5,10) == 3.5\n    median_trapezium(6,6,1) == 2.0\n    median_trapezium(6,6,2) == 2.5\n    median_trapezium(6,6,3) == 3.0\n    median_trapezium(6,6,4) == 3.0\n    median_trapezium(6,6,5) == 3.0\n    median_trapezium(6,6,6) == 3.0\n    median_trapezium(6,6,7) == 3.0\n    median_trapezium(6,6,8) == 3.0\n    median_trapezium(6,6,9) == 3.0\n    median_trapezium(6,6,10) == 4.0\n    median_trapezium(7,7,1) == 3.5\n    median_trapezium(7,7,2) == 4.0\n    median_trapezium(7,7,3) == 4.0\n    median_trapezium(7,7,4) == 4.0\n    median_trapezium(7,7,5) == 4.0\n    median_trapezium(7,7,6) == 4.0\n    median_trapezium(7,7,7) == 4.0\n    median_trapezium(7,7,8) == 4.0\n    median_trapezium(7,7,9) == 4.0\n    median_trapezium(7,7,10) == 5.0\n    median_trapezium(8,8,1) == 4.5\n    median_trapezium(8,8,2) == 5.0\n    median_trapezium(8,8,3) == 5.0\n    median_trapezium(8,8,4) == 5.0\n    median_trapezium(8,8,5) == 5.0\n    median_trapezium(8,8,6) == 5.0\n    median_trapezium(8,8,7) == 5.0\n    median_trapezium(8,8,8"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_trapezium(1, 2, 3) == 1.5\nassert median_trapezium(1, 2, 3) == 1.5\nassert median_trapezium(1, 2, 3) == 1.5\nassert median_trapezium(1, 2, 3) == 1.5\nassert median_trapezium(1, 2, 3) == 1.5\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_greater([1, 2, 3, 4, 5], 7) == True, 'Result should be True'\nassert     check_greater([1, 2, 3, 4, 5], 4) == False, 'Result should be False'\nassert     check_greater([5, 4, 3, 2, 1], 5) == True, 'Result should be True'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_greater([5, 6, 8, 5, 2, 6], 8) == True, \"should return True\"\nassert     check_greater([5, 6, 8, 5, 2, 6], 6) == False, \"should return False\"\nassert     check_greater([5, 5, 5, 5, 5], 5) == False, \"should return False\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_greater([1, 2, 3, 4, 5, 6], 7) == False, 'Wrong!'\nassert check_greater([1, 2, 3, 4, 5, 6], 1) == True, 'Wrong!'\n\ndef check_greater_or_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than or equal to the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_greater([1,2,3], 3) == True\nassert     check_greater([1,2,3], 1) == False\nassert     check_greater([1,2,3], 3) == True\nassert     check_greater([], 1) == False\nassert     check_greater([1], 1) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_greater([-5,1,2,3], -1)         == False\nassert     check_greater([-5,1,2,3], -3)         == False\nassert     check_greater([-5,1,2,3], -5)         == True\nassert     check_greater([], -4)                 == False\nassert     check_greater([], -2)                 == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_greater([1,2,3,4,5], 5) == False\nassert     check_greater([1,2,3,4,5], 4) == True\nassert     check_greater([1,2,3,4], 5) == False\nassert     check_greater([1,2,3,4], 4) == True\nassert     check_greater([1,2,3], 4) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_greater([1,2,3,4,5,6,7],4) == True, \"Fails\"\nassert     check_greater([1,2,3,4,5,6,7],3) == False, \"Fails\"\nassert     check_greater([1,2,3,4,5,6,7],1) == False, \"Fails\"\n\nprint(\"check_greater function works correctly!\")\n\ndef check_lower(arr, number):\n    '''\n    Write a function to check whether the entered number is lower than the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_one('abab') == False\nassert     text_match_one('abab') == True\nassert     text_match_one('aabab') == True\nassert     text_match_one('ab') == False\nassert     text_match_one('abab') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_one(\"abab\") == True\nassert     text_match_one(\"abac\") == True\nassert     text_match_one(\"abaa\") == True\nassert     text_match_one(\"abcd\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one(\"ab\") == True, \"Fail on text_match_one, case 1\"\nassert text_match_one(\"ab\") == False, \"Fail on text_match_one, case 2\"\nassert text_match_one(\"bb\") == True, \"Fail on text_match_one, case 3\"\nassert text_match_one(\"bbbbbb\") == True, \"Fail on text_match_one, case 4\"\nassert text_match_one(\"bbbbb\") == True, \"Fail on text_match_one, case 5\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one('') == True \nassert     text_match_one('ab') == False \nassert     text_match_one('aabbbb') == True\nassert     text_match_one('aab') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one('ab') == True\nassert     text_match_one('a') == False\nassert     text_match_one('abcd') == False\nassert     text_match_one('abc') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one('ab') == True, \"Wrong answer for text_match_one('ab')\"\nassert     text_match_one('ba') == True, \"Wrong answer for text_match_one('ba')\"\nassert     text_match_one('ab') == False, \"Wrong answer for text_match_one('ab')\"\nassert     text_match_one('abab') == True, \"Wrong answer for text_match_one('abab')\"\nassert     text_match_one('abbba') == True, \"Wrong answer for text_match_one('abbba')\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one(\"a\") == False\nassert     text_match_one(\"abb\") == True\nassert     text_match_one(\"abbb\") == True\nassert     text_match_one(\"abab\") == True\nassert     text_match_one(\"ab\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert text_match_one('abab') == True\nassert text_match_one('ab') == False\nassert text_match_one('abc') == False\nassert text_match_one('abbc') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_one('ab') == True\nassert     text_match_one('a') == False\nassert     text_match_one('abb') == True\nassert     text_match_one('abab') == True\nassert     text_match_one('b') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one('ab') == False\nassert     text_match_one('bb') == True\nassert     text_match_one('bbba') == True\nassert     text_match_one('aab') == False\nassert     text_match_one('b') == False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(101) == 1\nassert     last_Digit(1) == 1\nassert     last_Digit(1011) == 1\nassert     last_Digit(10) == 1\nassert     last_Digit(101010) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit(232) == 2\nassert     last_Digit(2233) == 3\nassert     last_Digit(0032) == 2\nassert     last_Digit(23) == 1\nassert     last_Digit(333) == 3\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit(12) == 0, \"last_Digit does not work as expected\"\nassert     last_Digit(30) == 0, \"last_Digit does not work as expected\"\nassert     last_Digit(100) == 1, \"last_Digit does not work as expected\"\nassert     last_Digit(99) == 9, \"last_Digit does not work as expected\"\nassert     last_Digit(12345) == 4, \"last_Digit does not work as expected\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(0) == 0\nassert     last_Digit(12) == 1\nassert     last_Digit(1) == 0\nassert     last_Digit(11) == 1\nassert     last_Digit(10) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert last_Digit(1000) == 0\nassert last_Digit(101) == 1\nassert last_Digit(838) == 1\nassert last_Digit(11) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit(12345) == 4, 'Test 1 Failed'\nassert     last_Digit(1234) == 3, 'Test 2 Failed'\nassert     last_Digit(15) == 5, 'Test 3 Failed'\nassert     last_Digit(89) == 9, 'Test 4 Failed'\nassert     last_Digit(23) == 2, 'Test 5 Failed'\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(121) == '2'\nassert     last_Digit(10) == '1'\nassert     last_Digit(32) == '2'\nassert     last_Digit(233) == '3'\nassert     last_Digit(2345) == '4'\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit(0) == 0\nassert last_Digit(1) == 1\nassert last_Digit(10) == 0\nassert last_Digit(100) == 1\nassert last_Digit(1000) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit(24) == 2, 'incorrect value'\nassert     last_Digit(20) == 2, 'incorrect value'\nassert     last_Digit(15) == 5, 'incorrect value'\nassert     last_Digit(19) == 1, 'incorrect value'\nassert     last_Digit(98) == 8, 'incorrect value'\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([\"a\", -2, -3, -4]) == [-2, -3, -4]\nassert     neg_nos([\"a\", -3, -4, -5]) == [-3, -4, -5]\nassert     neg_nos([\"a\", -4, -5, -6]) == [-4, -5, -6]\nassert     neg_nos([]) == []\nassert     neg_nos([1, -2, -3, -4]) == [-1, -2, -3, -4]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     neg_nos([10, 20, 30, 40, 50, 60, -20, -30]) == [-30, -20, -60, -50, -40, -20, 20, 40], \"Check your work\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert neg_nos([1,2,-3,4]) == [-1,-2,-3,-4]\nassert neg_nos([1,2,-3,4,-5,6]) == [-1,-2,-3,-4,-5,-6]\nassert neg_nos([1,2,3,4]) == [-1,-2,-3,-4]\nassert neg_nos([1,2,3,4,-5,6]) == [-1,-2,-3,-4,-5,-6]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef pos_nos(list2):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     neg_nos([1,2,-3,-4,-5]) == [-5,-4,-3,-2,-1], \"Should return the negative numbers in a list.\"\nprint(\"Check pass\")\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     neg_nos([2, 5, -1, -3]) == [-2, -5, 3, -3] \nassert     neg_nos([-2, -3, -4]) == [2, 3, 4] \nassert     neg_nos([]) == [] \nassert     neg_nos([2, 5]) == [-2, -5] \nassert     neg_nos([2, 5, -1, -3]) == [-2, -5, -1, -3] \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert neg_nos([-4,-2,-1,0,1,2,3,4]) == [-4, -2, -1, 0, 1, 2, 3, 4]\nprint(\"All test cases passed\")\n\ndef pos_nos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nneg_nos([1, -2, 3, 4]) == [-1, -2, -3, -4]\n\ndef index(list1, num):\n    '''\n    Write a python function to return the index of the given element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_pos(list1):\n    '''\n    Write a python function to return the position of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert remove_odd('kumar') == 'ckr'\nassert remove_odd('kumar') == 'kum'\nassert remove_odd('kum') == ''\nassert remove_odd('kumkum') == ''\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd('Hello') == 'Hel'\nassert     remove_odd('Hi') == 'Hi'\nassert     remove_odd('Hello, Hi, by the way') == 'Hel, Hi, by the way'\nassert     remove_odd('Hello, Hi, by the way, and goodbye') == 'Hel, Hi, by the way, and goodbye'\nassert     remove_odd('Hello, Hi, and goodbye, then bye') == 'Hel, Hi, and goodbye, then bye'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd('hello') == 'ellh'\nassert     remove_odd('hello and now') == 'ell and now'\nassert     remove_odd('hello and now') == 'ell and now'\nassert     remove_odd('hello and now') == 'ell and now'\nassert     remove_odd('hello and now') == 'ell and now'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd(\"is\") == \"s\"\nassert     remove_odd(\"I\") == \"I\"\nassert     remove_odd(\"Hello\") == \"Hello\"\nassert     remove_odd(\"You\") == \"You\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd(\"eabxyzy\") == \"xyz\"\nassert     remove_odd(\"abcbaba\") == \"abcb\"\nassert     remove_odd(\"aabbbccdddeee\") == \"aabbbccddee\"\nassert     remove_odd(\"12\") == \"\"\nassert     remove_odd(\"1\") == \"1\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert remove_odd('abcd') == 'bcd'\nassert remove_odd('abd') == 'bd'\nassert remove_odd('ab') == 'b'\nassert remove_odd('abcde') == 'cde'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd(\"slo\") == \"s\"\nassert     remove_odd(\"heppy\") == \"p\"\nassert     remove_odd(\"a\") == \"\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(None) == None\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd(\"aaa\") == \"aaa\"\nassert     remove_odd(\"a\") == \"a\"\nassert     remove_odd(\"aaba\") == \"a\"\nassert     remove_odd(\"aabaa\") == \"a\"\nassert     remove_odd(\"aabb\") == \"a\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([(1,2),(2,3),(3,4)]) == 2, 'WRONG'\nassert     count_bidirectional([(1,2),(2,3),(3,4)]) == 2, 'WRONG'\nassert     count_bidirectional([(1,2),(3,4),(2,3)]) == 2, 'WRONG'\nassert     count_bidirectional([(1,2),(2,3),(3,4)]) == 2, 'WRONG'\nassert     count_bidirectional([(1,2),(2,3),(3,4)]) == 2, 'WRONG'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_bidirectional([('a',1), ('b',2), ('c',3), ('d',4)]) == 6\nassert     count_bidirectional([('a',1), ('b',2), ('c',3), ('d',4), ('c',3)]) == 3\nassert     count_bidirectional([('a',1), ('b',2), ('c',3), ('d',4), ('e',5)]) == 5\nassert count_bidirectional([]) == "
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_bidirectional([[1, 2], [2, 1], [3, 3], [1, 1]]) == 5\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional([1, 2, (3, 4, 5), (6, 7, 8)]) == 4\nassert     count_bidirectional([1, 2, (3, 4, 5), (6, 7, 8)]) == 2\nassert     count_bidirectional([(1,2), (3,4), (5,6), (7,8),(9,10)]) == 5\nassert     count_bidirectional([(1,2), (3,4), (5,6), (7,8),(9,10)]) == 3\nassert     count_bidirectional([1, 2, (3, 4, 5), (6, 7, 8)]) == 4\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_bidirectional([(1,2), (3,4), (1,2), (4,5), (6,7)]) == 3, 'incorrect'\nassert count_bidirectional([(1,2), (3,4), (5,6), (7,8)]) == 0, 'incorrect'\nassert count_bidirectional([(1,2), (3,4), (1,2), (4,5), (6,7), (6,7), (7,8), (7,8), (8,9), (9,10), (9,10)]) == 3, 'incorrect'"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([('a', 'b'), ('b', 'c'), ('c', 'a')]) == 2\nassert     count_bidirectional([('a', 'b'), ('b', 'c'), ('c', 'a'), ('c', 'a')]) == 3\nassert     count_bidirectional([('a', 'b'), ('b', 'c'), ('c', 'a'), ('c', 'a'), ('b', 'a')]) == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([ (1,2,3), (3,4,5), (4,5,6) ]) == 2, '1st example'\nassert     count_bidirectional([ (1,2,3), (1,2,3), (3,4,5), (3,4,5) ]) == 1, '2nd example'\nassert     count_bidirectional([ (1,2,3), (2,3,4), (4,5,6) ]) == 0, '3rd example'\nassert     count_bidirectional([ (1,2), (1,2), (2,3), (3,4) ]) == 1, '4th example'\nassert     count_bidirectional([ (1,2), (2,3), (3,4) ]) == 0, '5th example'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_bidirectional([('Hi', 'Bye'), ('Hi', 'Hello'), ('Hello', 'Bye')]) == 2, \"Test case 1 failed\"\nassert     count_bidirectional([('Hi', 'Bye'), ('Hi', 'Hello'), ('Hello', 'Bye'), ('Hi', 'Hello')]) == 2, \"Test case 2 failed\"\nassert     count_bidirectional([('Hi', 'Bye'), ('Hi', 'Hello'), ('Hi', 'Hello'), ('Hi', 'Hello')]) == 2, \"Test case 3 failed\"\nassert     count_bidirectional([('Hi', 'Bye'), ('Hi', 'Hello'), ('Hi', 'Bye'), ('Hi', 'Hello')]) == 2, \"Test case 4 failed\"\nassert     count_bidirectional([('Hi', 'Bye'), ('Hi', 'Bye'), ('Hi', 'Bye'), ('Hi', 'Bye')]) == 1, \"Test case 5 failed\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([('a','a'),('b','b'),('a','c'),('b','a'),('c','b'),('c','c')]) == 6, \"Wrong value!\"\nassert     count_bidirectional([('a','a'),('b','b'),('a','c'),('c','a'),('a','b'),('a','c'),('b','a'),('c','b')]) == 4, \"Wrong value!\"\nassert     count_bidirectional([('a','a'),('b','b'),('a','c'),('c','a'),('a','b'),('a','c'),('b','a'),('c','b')]) == 5, \"Wrong value!\""
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef fizzbuzz(n):\n    '''\n    Write a function to print numbers from 1 to n in Fizz Buzz format.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 24\nassert     multiple_to_single([1,2,3,4,5]) == 45\nassert     multiple_to_single([1,2,3,4,5,6,7,8]) == 234\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9,10]) == 987\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15\nassert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 234\n\ndef multiple_to_single_two(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    The returned value should be an integer.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 24\nassert multiple_to_single([]) == 0\nassert multiple_to_single([1,1,1,1,1,1]) == 1\n\n\ndef multiple_to_single_2(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def multiply(x):\n        if x >= 10:\n            return multiply(x // 10) + x % 10\n        else:\n            return x\n    return multiply(L[0])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    multiple_to_single([1, 2, 3, 4, 5]) == 15, 'Expected: 15, got %s' % multiple_to_single([1, 2, 3, 4, 5])\nassert multiple_to_single([]) == 0, 'Expected: 0, got %s' % multiple_to_single([])\nassert multiple_to_single([1, 2, 3]) == 6, 'Expected: 6, got %s' % multiple_to_single([1, 2, 3])\nassert multiple_to_single([-1, 2, 3, -4]) == -6, 'Expected: -6, got %s' % multiple_to_single([-1, 2, 3, -4])\nassert multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 4521, 'Expected: 4521, got %s' % multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1, 2, 3, 4, 5]) == 15, \"Wrong answer.\"\nassert multiple_to_single([10, 20, 30, 40, 50]) == 350, \"Wrong answer.\"\nassert multiple_to_single([1, 1, 1, 1, 1]) == 11, \"Wrong answer.\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15\nassert multiple_to_single([5]) == 5\nassert multiple_to_single([]) == 0\nassert multiple_to_single([1,5,4,3,2,2,1,9,7,5,4]) == 185\n\ndef capitalize(L):\n    '''\n    Write a function to return a new list where all of the strings in the input list have been capitalized.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 24\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single(['abc', 'xyz']) == 'abxyz'\nassert     multiple_to_single([12, 34, 56, 678, 9]) == 123456789\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiple_to_single([]) == 0\nassert multiple_to_single([1,2,3,4,5]) == 120\nassert multiple_to_single([0,0]) == 0\nassert multiple_to_single([1,1,1,1]) == 1\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmultiple_to_single([1,2,3,4,5]) == 15\nassert multiple_to_single([2,2,3,4,5]) == 12\nassert multiple_to_single([-10,-20,-30,-40,-50]) == -125\nassert multiple_to_single([]) == 0\nassert multiple_to_single([-1,-2,-3,-4,-5]) == -225\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverb_position(\"I read the book and the story was in a great way.\") == 'book'\nassert    find_adverb_position(\"I read the book and the story was in a great way. The book was great.\") == 'book'\nassert    find_adverb_position(\"I read the book and the story was in a great way. The story was great.\") =='story'\nassert    find_adverb_position(\"I read the book and the story was in a great way. The book was great. The story was great.\") == 'book'\nassert    find_adverb_position(\"I read the book and the story was in a great way. The book was great. The story was great. And I read a new book. And I read the story. And I read a new book.\") == 'book'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverb_position('I have never tried these shoes before') == 'I'\nassert     find_adverb_position('I have never tried these shoes before.') == 'I'\nassert     find_adverb_position('I have never tried these shoes before. And have I tried other things as well?') == 'I'\nassert     find_adverb_position('I have never tried these shoes before. And have I tried other things as well?') == 'I'\nassert     find_adverb_position('The rest is either my own or theirs.') == 'either'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('') == ('', ''), \\\n    \"returns empty if no adverb is found\"\nassert find_adverb_position('There is a cat in the house') == ('There is', 'house'), \\\n    \"returns (cat, house)\"\nassert find_adverb_position('There is a cat in the house.') == ('house', 'house.'), \\\n    \"returns (house, house).\"\nassert find_adverb_position('There are two cats in the house') == ('house', 'house'), \\\n    \"returns (house, house)\"\nassert find_adverb_position('There is a cat in the house and a dog in the house') == ('house', 'house'), \\\n    \"returns (house, house)\"\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverb_position(\"The oldest man is the man who made the dictionary.\") == (('oldest man', (0,8)),)\nassert     find_adverb_position(\"The oldest man is the man who made the dictionary.\") == (('oldest man', (0,8)),)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position('The quick brown fox jumps over the lazy dog.') == (\n    [(2, 'quick')]\n    )\n\nassert find_adverb_position('They are playing in the mountains') == (\n    []\n    )\n\nassert find_adverb_position('The Fox jumps over the lazy dog') == (\n    []\n    )\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position(\"The boy walked to the store and then came to the computer\") ==     [0, 1, 2, 3]\nassert     find_adverb_position(\"The woman quickly shot the elephant and the elephant quickly shot the man\") ==    [2, 5, 8, 9]\nassert     find_adverb_position(\"The man was to the store as the elephant was to the computer\") ==    [3, 6, 7, 8]\nassert     find_adverb_position(\"The man was to the store as the woman was to the computer\") ==    [3, 4, 6, 7]\nassert     find_adverb_position(\"The man was to the store as the child was to the computer\") ==    [3, 4, 5, 6]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_adverb_position(\"I am here with the sun down\") == ('I', 'I am')\nassert find_adverb_position(\"I am here with the sun down and the rain heavy\") == ('I', 'I am here')\nassert find_adverb_position(\"I am here with the sun down and the rain heavy\") == ('I', 'I am here')\nassert find_adverb_position(\"I am here with the sun down and the rain heavy and the storm heavy\") == ('I', 'I am here')\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverb_position('what a beautiful world') == [(0, 0), (1, 1)]\nassert     find_adverb_position('what a beautiful world!') == [(0, 0)]\nassert     find_adverb_position('what a beautiful world! why not') == [(0, 0), (1, 1), (2, 2)]\nassert     find_adverb_position('what a beautiful world! why not') == [(0, 0)]\nassert     find_adverb_position('A beautiful world! why not') == [(0, 0), (1, 1)]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position('Python is an amazing language') == ['Python', 2]\nassert     find_adverb_position('The cat is loving the Persian language') == ['The', 2]\n\nassert     find_adverb_position('A cat is loving the Persian language') == ['The', 4]\nassert     find_adverb_position('A cat is enjoying the Persian language') == ['The', 4]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position('The sun rises in the east and sets in the west.') == {'s': 8, 'e': 14}\nassert     find_adverb_position('The last letter is in the second place') == {'s': 9, 'e': 9}\nassert     find_adverb_position('The letter \"a\" is in the second place') == {'s': 9, 'e': 9}\nassert     find_adverb_position('The word \"of\" is in the first place') == {'s': 4, 'e': 4}\nassert     find_adverb_position('The word \"of\" is in the second place') == {'s': 4, 'e': 4}\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cube(1) == 8\nassert     surfacearea_cube(5) == 60\nassert     surfacearea_cube(7) == 108\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cube(1) == 1, \"1x1 Cube = 1\"\nassert     surfacearea_cube(2) == 3, \"2x2 Cube = 3\"\nassert     surfacearea_cube(3) == 6, \"3x3 Cube = 6\"\nassert     surfacearea_cube(4) == 14, \"4x4 Cube = 14\"\nassert     surfacearea_cube(5) == 21, \"5x5 Cube = 21\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef surfacearea_cuboid(a,b,c,d):\n    '''\n    Write a function to find the surface area of a cuboid of a given\n    side length.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef duplicate_count(nums):\n    '''\n    Write a function to count the number of duplicate elements in an array.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert positive_count([-1,2,3,4]) == 0.25\nassert positive_count([-1,1,-1,-2]) == 0.25\nassert positive_count([-1,1,2,-1,4]) == 0.5\nassert positive_count([-1,1,-1,-2,4]) == 0.25\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_sorted(nums):\n    '''\n    Write a function to check if the given array is sorted in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    positive_count([]) == 0\n    positive_count([1]) == 1\n    positive_count([1, 2]) == 0.5\n    positive_count([1, -2]) == 0.5\n    positive_count([1, 1, 2, 2]) == 0.5\n    positive_count([1, -2, -3, 4]) == 0.5\n\ndef flat_sum(nums):\n    '''\n    Write a function to find the sum of all the numbers in an array of integers,\n    without using any loops.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \npositive_count([1, 2, -1, 0, 3]) == 1.0\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef ratio_of_positive_numbers(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     positive_count([-1,2,3,4]) == 1, \"Wrong\"\nassert     positive_count([2,2,2]) == 0, \"Wrong\"\nassert     positive_count([]) == 0, \"Wrong\"\nassert     positive_count([1,3,-2]) == 0, \"Wrong\"\n\ndef highest_product(arr):\n    '''\n    Write a function to find the highest product of 4 adjacent numbers in the array.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     positive_count([1,2,3]) == 0.5\nassert     positive_count([-3,1,-2,0,5]) == 0.5\nassert     positive_count([0]) == 1.0\nassert     positive_count([0,-1]) == 1.0\nassert     positive_count([1,-1]) == 0.5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_neg([-1, -2, -3, -4]) == -4, \"Should be -4\"\nassert     largest_neg([-1, -2, -3, -4]) == -1, \"Should be -1\"\nassert     largest_neg([-1, -2, -3, -4]) == -1, \"Should be -1\"\nassert     largest_neg([-1, -2, -3, -4]) == -1, \"Should be -1\"\nassert     largest_neg([-1, -2, -3, -4]) == -1, \"Should be -1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_neg([-5,-2,-3,-1,-1,3,4,5,6,7,0]) == 6\nassert largest_neg([0,-1,-2,-3,-4,-5,-6,-7,-8,-9,0]) == 0\nassert largest_neg([-5,-2,-3,-1,-1,-3,-4,-5,0,-1,-2,0]) == -1\nassert largest_neg([0,0,0]) == 0\nassert largest_neg([0,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,0]) == -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_neg([-6,-6,-9,-6,-10,10,-11]) == 10 \nassert     largest_neg([-8,-8,6,-3,3,-4,-9]) == 3\nassert     largest_neg([-3,-4,1,2,-4,1]) == 2\nassert     largest_neg([-6,-6,6,-3,-3,-4,-9]) == 6\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nlargest_neg([-5, -5, -6, -7, -2]) == -2 \nassert largest_neg([0, 2, -10, -20, -9]) == -20\nassert largest_neg([1, -1, -2, 0]) == 0\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_neg([-2, -3, -4, 5, -6, -7]) == -7\nassert     largest_neg([-2, -3, -4, 5, -6, -7, 8]) == -2\nassert     largest_neg([-2, -3, -4, 5, -6, -7, -8, -9, -10, -11]) == -11\nassert     largest_neg([]) == None\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_neg([-1, -2, -3, -4, -5]) == -5\nassert     largest_neg([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -7"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert largest_neg([-1,-4,-3,-5,-4,7,-2,9,-5,6]) == -5\nassert largest_neg([-1,1,4,5,-4,3]) == 4\nassert largest_neg([-1,-2,2,4,6,7,-5,4,-4,-6]) == -5\nassert largest_neg([-1,1,4,5,-4,3,4]) == 5\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     trim_tuple([(1, 2), (3, 4), (5, 6, 7), (8)], 2) == [(1, 2), (3, 4), (5, 6, 7)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6, 7), (8)], 3) == [(1, 2), (3, 4)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 3) == [(1, 2), (3, 4), (5, 6, 7, 8)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 5) == [(1, 2), (3, 4), (5, 6, 7)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 1) == [(1, 2), (3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple([(0, 1, 2, 3), (0, 1, 2, 3), (0, 1, 2, 3)], 1) == [(0, 1, 2, 3), (0, 1, 2, 3)]\nassert     trim_tuple([(0, 1, 2, 3), (0, 1, 2, 3), (0, 1, 2, 3)], 2) == [(0, 1, 2, 3), (0, 1, 2, 3)]\nassert     trim_tuple([(0, 1, 2, 3), (0, 1, 2, 3), (0, 1, 2, 3)], 3) == [(0, 1, 2, 3)]\n\nprint('Tests passed')"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     trim_tuple( [(1,2),(3,4),(5,6),(7,8)],2) ==     [(1,2),(3,4),(5,6)]\nassert     trim_tuple( [(1,2),(3,4),(5,6),(7,8)],4) ==     [(1,2),(3,4),(5,6)]\nassert     trim_tuple( [(1,2),(3,4),(5,6),(7,8)],3) ==     [(1,2),(3,4),(5,6)]\nassert     trim_tuple( [(1,2),(3,4),(5,6),(7,8)],0) ==     [(1,2),(3,4),(5,6),(7,8)]\nassert     trim_tuple( [(1,2),(3,4),(5,6),(7,8)],1) ==     [(1,2),(3,4),(5,6),(7,8)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_trim_tuple():\n    '''\n    python -m unittest trim_tuple.py\n    '''\n    assert trim_tuple([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], K=2) == \\\n        [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    assert trim_tuple([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], K=0) == \\\n        [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\n    assert trim_tuple([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], K=-2) == \\\n        [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntest_list = [(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]\ntrim_tuple(test_list, 1)\nassert test_list == [(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     trim_tuple(\n    [('a',1,5,1), ('b',2,3,1)], 2\n    ) ==     [('a',1,5,1), ('b',2,3,1)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nRun the following code to see the result.\n'''\nprint(trim_tuple([(1, 2, 3), (4, 5), (6,), (7, 8, 9), (1, 2)], 2))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     trim_tuple([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 2) == [(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3, 4), (1, 2, 3, 4, 5)], 2) == [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 2) == [(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3, 4), (1, 2, 3, 4, 5)], 2) == [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3, 4, 5)], 2) == [(1, 2, 3, 4, 5)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([(1,2,3,4), (1,2,3,4,5), (1,2,3,4), (1,2,3,4,5), (1,2,3,4,5)], K = 2) == [(1,2,3,4), (1,2,3,4,5), (1,2,3,4), (1,2,3,4,5), (1,2,3,4,5)]\nassert trim_tuple([(1,2,3,4), (1,2,3,4,5), (1,2,3,4), (1,2,3,4,5), (1,2,3,4,5)], K = 4) == [(1,2,3,4), (1,2,3,4,5)]\nassert trim_tuple([(1,2,3,4), (1,2,3,4,5), (1,2,3,4), (1,2,3,4,5), (1,2,3,4,5)], K = 5) == [(1,2,3,4)]\nassert trim_tuple([(1,2,3,4), (1,2,3,4,5), (1,2,3,4), (1,2,3,4,5), (1,2,3,4,5)], K = 6) == []\nassert trim_tuple([(1,2,3,4), (1,2,3,4,5), (1,2,3,4), (1,2,3,4,5), (1,2,3,4,5)], K = 7) == []\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert index_multiplication((1,2), (3,4)) == (3,4), \"index_multiplication is wrong\"\nassert index_multiplication((3,3), (1,1)) == (3,3), \"index_multiplication is wrong\"\nassert index_multiplication((3,3), (1,2)) == (3,6), \"index_multiplication is wrong\"\nassert index_multiplication((2,2), (2,1)) == (4,1), \"index_multiplication is wrong\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_multiplication((1,2,3,4), (1,2,3,4)) == (1, 2, 3, 4), \"index_multiplication failed\"\nassert     index_multiplication((4,3,2,1), (2,3,4,5)) == (2, 3, 4, 10), \"index_multiplication failed\"\nassert     index_multiplication((1,2,3,4), (2,3,4,5)) == (2, 6, 6, 24), \"index_multiplication failed\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_multiplication((1,2,3), (4,5,6)) == ((4,10,18), (8,15,24)), 'Wrong output'\nassert     index_multiplication((2,5,8), (3,6,9)) == ((4,10,24), (7,16,27)), 'Wrong output'\nassert     index_multiplication((10,20,30), (50,60,70)) == ((50,100,200), (160,240,320)), 'Wrong output'\nprint('All test cases passed!')\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_multiplication(test_tup1, test_tup2) == (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2], test_tup1[3]*test_tup2[3], test_tup1[4]*test_tup2[4], test_tup1[5]*test_tup2[5])\n\nprint(\"\\nIndex_multiplication is working correctly\")"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (6, 7, 8, 9, 10)\nprint(index_multiplication(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_multiplication((1, 2, 3, 4), (10, 20, 30, 40)) == (10, 20, 30, 40)\nassert     index_multiplication((1, 2, 3), (10, 20, 30, 40)) == (10, 20, 30, 40)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_multiplication( (1,2,3,4,5),(10,20,30)) == (10, 40, 70, 100, 120) \nassert index_multiplication( (1,2,3,4,5),(10,20,30)) == (10, 40, 70, 100, 120) \nassert index_multiplication( (1,2,3,4), (10,20,30,40)) == (1, 2, 3, 40)\nassert index_multiplication( (1,2,3), (10,20,30,40)) == (1, 2, 3)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_multiplication( (1,3,5,7), (2,4,6,8) ) == (2,4,6,8)\nassert     index_multiplication( (1,2,3,4), (5,6,7,8) ) == (5,6,7,8)\nassert     index_multiplication( (1,2,3,4), (5,6) ) == (5,6,1,4)\n\n'''\n\nQuestion: Define a function that can accept two strings as input and print the string with maximum length in console.\nIf two strings have the same length, then the function should print al l strings line by line.\nSample Input    Expected Output\n\"Hello\"    \"Hello\"\n\"hi there\"    \"hi there\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_multiplication((1,2,3,4),(5,6,7,8)) == (5,6,7,8)\nassert     index_multiplication((1,2,3,4,5),(5,6,7,8)) == (5,6,7,8,5)\nassert     index_multiplication((1,2,3),(4,5,6,7)) == (4,5,6,7)\nassert     index_multiplication((),(1,2,3,4,5)) == (1,2,3,4,5)\n\n'''\nQuestion 13\nWrite a function to multiply a given tuple by a given integer.\n'''\ndef index_multiplication(test_tup, num):\n    '''\n    Write a function to multiply a given tuple by a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Occurrence((\"apple\", \"banana\", \"orange\", \"banana\"), [\"apple\", \"apple\", \"banana\"]) == (2, 3)\nassert     count_Occurrence((\"apple\", \"banana\", \"orange\", \"banana\"), [\"banana\", \"orange\", \"orange\"]) == (1, 2)\nassert     count_Occurrence((\"apple\", \"banana\", \"orange\", \"banana\"), [\"orange\", \"banana\", \"apple\"]) == (1, 2)\nassert     count_Occurrence((\"apple\", \"banana\", \"orange\", \"banana\"), [\"banana\", \"banana\"]) == (2, 1)\nassert     count_Occurrence((\"apple\", \"banana\", \"orange\", \"banana\"), [\"banana\", \"banana\", \"banana\"]) == (3, 1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Occurrence((), []) == {}\nassert     count_Occurrence((3, 4, 5), []) == {3: 1, 4: 1, 5: 1}\nassert     count_Occurrence((1, 1, 1), []) == {1: 3}\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Occurrence((\"hello\",), [\"h\", \"e\", \"l\", \"l\", \"o\"]) == 1\nassert     count_Occurrence((\"goodbye\",), [\"h\", \"o\", \"d\", \"w\", \"e\", \"r\", \"l\"]) == 0\nassert     count_Occurrence((\"hello\",), [\"h\", \"e\", \"l\", \"l\", \"o\"]) == 2\nassert     count_Occurrence((\"goodbye\",), [\"h\", \"o\", \"d\", \"w\", \"e\", \"r\", \"l\"]) == 1\nassert     count_Occurrence((\"hello\",), [\"h\", \"e\", \"l\", \"l\", \"o\"]) == 2\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Occurrence((1,2,3), [3,4,5]) == Counter({3: 1, 4: 1, 5: 1})\nassert     count_Occurrence((1,2,3), [1,2,2]) == Counter({1: 2, 2: 2})\nassert     count_Occurrence((1,2,3), [3,4,5,6,7,8,9]) == Counter({3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1})\nassert     count_Occurrence((1,2,3), []) == Counter()\nassert     count_Occurrence((1,2,3), [\"a\", \"b\", \"c\"]) == Counter()\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Occurrence([(1, 2), (3, 4), (4, 5)], [1, 2, 3]) == (1, 2), 'test 1 failed'\nassert count_Occurrence([(1, 2), (3, 4), (4, 5)], [1, 1, 1]) == (1, 1), 'test 2 failed'\nassert count_Occurrence([(1, 2), (3, 4), (4, 5)], [2, 2, 3]) == (2, 2), 'test 3 failed'\nassert count_Occurrence([(1, 2), (3, 4), (4, 5)], [2, 3, 2]) == (2, 2), 'test 4 failed'\nassert count_Occurrence([(1, 2), (3, 4), (4, 5)], [2, 2, 2]) == (1, 1), 'test 5 failed'\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef test_count_Occurrence():\n    test_input = (('red','blue'),('red','green'),('green','red'),('green','blue'),('blue','red'),('blue','green'))\n    expected = (Counter('red'),Counter('blue'),Counter('red'),Counter('green'),Counter('red'),Counter('green'))\n    assert count_Occurrence(test_input) == expected \n    assert count_Occurrence(((1,2),(3,4),(1,2))) == (Counter(1,2),Counter(3,4),Counter(1,2)) \n    assert count_Occurrence(((1,2),(1,2))) == (Counter(1),Counter(2)) \n    assert count_Occurrence(((1,2),(1,2),(1,2))) == (Counter(1),Counter(2),Counter(2)) \n    "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Occurrence((1,2,3,4),(1,2,3,4,1,2,3)) == Counter({1: 4, 2: 3, 3: 2, 4: 1})\nassert     count_Occurrence((1,2,3,4),(2,3,4,1)) == Counter({1: 3, 2: 1, 3: 2, 4: 1})\nassert     count_Occurrence((1,2,3,4),(2,3,3,4,1)) == Counter({1: 1, 2: 1, 3: 1, 4: 1})\nassert     count_Occurrence((1,2,3,4),(2,3,3,4,2)) == Counter({1: 1, 2: 1, 3: 1, 4: 1})\nassert     count_Occurrence((1,2,3,4),(2,3,3,4,3)) == Counter({1: 1, 2: 1, 3: 1, 4: 1})\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    count_Occurrence((1,1,1,1,1,2,2), [1,1,1,1,1,2,2]) == \n        [\n        [1,3],\n        [1,1],\n        [1,1],\n        [1,1],\n        [1,1],\n        [1,1],\n        [2,3]\n    ]\n\n'''\n7. Write a python function to reverse a tuple and also copy the \noriginal tuple into another tuple.\n'''\n\ndef swap_and_reverse(tup):\n    '''\n    Write a python function to swap two values in a tuple. \n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert cube_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 8, 27, 64, 125]\nassert cube_nums([0, -1, -2, -3, -4, -5]) == [-1, 0, 1, 8, 27, 64]\nassert cube_nums([0, 1, -2, 3, -4, 5]) == [0, 1, 8, 27, 64, 125]"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncube_nums([1,2,3,4,5]) == [1, 8, 27, 64, 125]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_nums([1,2,3,4,5,6,7]) == [1,8,27,64,125,216,343], 'Test case 1 failed'\nassert     cube_nums([1,2,3,4]) == [1,8,27,64], 'Test case 2 failed'\nassert     cube_nums([1,2,3,4,5]) == [1,8,27,64,125], 'Test case 3 failed'\nassert     cube_nums([1,2,3,4,5,6,7]) == [1,8,27,64,125,216,343], 'Test case 4 failed'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncube_nums([1,2,3]) == [1,8,27], \"Wrong\"\nassert cube_nums([0,0,0]) == [0,0,0], \"Wrong\"\nprint(\"Congratulations! Your cube_nums function is correct.\")\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_nums([1,2,3,4,5]) == [1, 8, 27, 64, 125], \"cube_nums should return [1, 8, 27, 64, 125]\"\nassert cube_nums([-1,-2,-3,-4,-5]) == [-1, 0, -25, 0, -125], \"cube_nums should return [-1, 0, -25, 0, -125]\"\nassert cube_nums([]) == [], \"cube_nums should return []\"\nassert cube_nums([-1,2,3]) == [1, 8, 27], \"cube_nums should return [1, 8, 27]\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_nums([1,2,3,4]) == [1,4,9,16], '1st cube_nums failed'\nassert     cube_nums([4,3,2,1]) == [8,27,16,64], '2nd cube_nums failed'\nassert     cube_nums([-1,0,1]) == [-1,0,1], '3rd cube_nums failed'\nassert     cube_nums([]) == [], '4th cube_nums failed'\n\n'''\nThis is the more generic version of cube_nums, we will see more of these in later problems. \n'''\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cube_nums([1, 2, 3]) == [1, 8, 27], \"Wrong output!\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncube_nums([1,2,3]) == [1, 8, 27]\ncube_nums([]) == []\ncube_nums(None) == None\ncube_nums([2,3,4,5]) == [64, 125, 216, 343]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_nums([1, 2, 3]) == [1, 8, 27]\nassert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert     cube_nums([-1, -2, -3]) == [-1, -8, -27]\nassert     cube_nums([-1, -2, -3, -4]) == [-1, -8, -27, -64]\nassert     cube_nums([-1, -2, -3, -4, -5]) == [-1, -8, -27, -64, -125]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cal_sum(0) == 0\nassert     cal_sum(1) == 1\nassert     cal_sum(2) == 3\nassert     cal_sum(3) == 6\nassert     cal_sum(4) == 10\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"All the test cases for cal_sum are passed.\")\nprint(\"\\n\")\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert cal_sum(10) == 55\nassert cal_sum(100) == 385\nassert cal_sum(1000) == 3125\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cal_sum(10) == 55\nassert     cal_sum(101) == 505\nassert     cal_sum(99) == 595\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert cal_sum(0) == 0\nassert cal_sum(1) == 1\nassert cal_sum(2) == 3\nassert cal_sum(3) == 6\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    cal_sum(1) == 0\n    cal_sum(2) == 1\n    cal_sum(3) == 2\n    cal_sum(4) == 6\n    cal_sum(5) == 18\n    cal_sum(6) == 24\n    cal_sum(7) == 35\n    cal_sum(8) == 36\n    cal_sum(9) == 45\n    cal_sum(10) == 55\n    cal_sum(11) == 61\n    cal_sum(12) == 72\n    cal_sum(13) == 83\n    cal_sum(14) == 94\n    cal_sum(15) == 95\n    cal_sum(16) == 96\n    cal_sum(17) == 97\n    cal_sum(18) == 98\n    cal_sum(19) == 99\n    cal_sum(20) == 100\n    cal_sum(21) == 101\n    cal_sum(22) == 102\n    cal_sum(23) == 103\n    cal_sum(24) == 104\n    cal_sum(25) == 105\n    cal_sum(26) == 106\n    cal_sum(27) == 107\n    cal_sum(28) == 108\n    cal_sum(29) == 109\n    cal_sum(30) == 110\n    cal_sum(31) == 111\n    cal_sum(32) == 112\n    cal_sum(33) == 113\n    cal_sum(34) == 114\n    cal_sum(35) == 115\n    cal_sum(36) == 116\n    cal_sum(37) == 117\n    cal_sum(38) == 118\n    cal_sum(39) == 119\n    cal_sum(40) == 120\n    cal_sum(41) == 121\n    cal_sum(42) == 122\n    cal_sum(43) == 123\n    cal_sum(44) == 124\n    cal_sum(45) == 125\n    cal_sum(46) == 126\n    cal_sum(47) == 127\n    cal_sum(48) == 128\n    cal_sum(49) == 129\n    cal_sum(50) == 130\n    cal_sum(51) == 131\n    cal_sum(52) == 132\n    cal_sum(53) == 133\n    cal_sum(54) == 134\n    cal_sum(55) == 135\n    cal_sum(56) == 136\n    cal_sum(57) == 137\n    cal_sum(58) == 138\n    cal_sum(59) == 139\n    cal_sum(60) == 140\n    cal_sum(61) == 141\n    cal_sum(62) == 142\n    cal_sum(63) == 143\n    cal_sum(64) == 144\n    cal_sum(65) == 145\n    cal_sum(66) == 146\n    cal_sum(67) == 147\n    cal_sum(68) == 148\n    cal_sum(69) == 149\n    cal_sum(70) == 150\n    cal_sum(71) == 151\n    cal_sum(72) == 152\n    cal_sum(73) == 153\n    cal_sum(74) == 154\n    cal_sum(75) == 155\n    cal_sum(76) == 156\n    cal_sum(77) == 157\n    cal_sum(78) == 158\n    cal_sum(79) == 159\n    cal_sum(80) == 160\n    cal_sum(81) == 161\n    cal_sum(82) == 162\n    cal_sum(83) == 163\n    cal_sum(84) == 164\n    cal_sum(85) == 165\n    cal_sum(86) == 166\n    cal_sum(87) == 167\n    cal_sum(88) == 168\n    cal_sum(89) == 169\n    cal_sum(90) == 170\n    cal_sum(91) == 171\n    cal_sum(92) == 172\n    cal_sum(93) == 173\n    cal_sum(94) == 174\n    cal_sum(95) == 175\n    cal_sum(96) == 176\n    cal_sum(97) == 177\n    cal_sum(98) == 178\n    cal_sum(99) == 179\n    cal_sum(100) == 180\n    cal_sum(101) == 181\n    cal_sum(102) == 182\n    cal_sum(103) == 183\n    cal_sum(104) == 184\n    cal_sum(105) == 185\n    cal_sum(106) == 186\n    cal_sum(107) == 187\n    cal_sum(108) == 188\n    cal_sum(109) == 189\n    cal_sum(110) == 190\n    cal_sum(111) == 191\n    cal_sum(112) == 192\n    cal_sum(113) == 193\n    cal_sum(114) == 194\n    cal_sum(115) == 195\n    cal_sum(116) == 196\n    cal_sum(117) == 197\n    cal_sum(118) == 198\n    cal_sum(119) == 199\n    cal_sum(120) == 200\n    cal_sum(121) == 201\n    cal_sum(122) == 202\n    cal_sum(123) == 203\n    cal_sum(124) == 204\n    cal_sum(125) == 205\n    cal_sum(126) == 206\n    cal_sum(127) == 207\n    cal_sum(128) == 208\n    cal_sum(129) == 209\n    cal_sum(130) == 210\n    cal_sum(131) == 211\n    cal_sum(132) == 212\n    cal_sum(133) == 213\n    cal_sum(134) == 214\n    cal_sum(135) == 215\n    cal_sum(136) == 216\n    cal_sum(137) == 217\n    cal_sum(138) == 218\n    cal_sum(139) == 219\n    cal_sum(140) == 220\n    cal_sum(141) == 221\n    cal_sum(142) == 222\n    cal_sum(143) == 223\n    cal_sum(144) == 224\n    cal_sum(145) == 225\n    cal_sum(146) == 226\n    cal_sum(147) == 227\n    cal_sum(148) == 228\n    cal_sum(149) == 229\n    cal_sum(150) == 230\n    cal_sum(151) == 231\n    cal_sum(152) == 232\n    cal_sum(153) == 233\n    cal_sum(154) == 234\n    cal_sum(155) == 235\n    cal_sum(156) == 236\n    cal_sum(157) == 237\n    cal_sum(158) == 238\n    cal_sum(159) == 239\n    cal_sum(160) == 240\n    cal_sum(161) == 241\n    cal_sum(162) == 242\n    cal_sum(163) == 243\n    cal_sum(164) == 244\n    cal_sum(165) == 245\n    cal_sum(166) == 246\n    cal_sum(167) == 247\n    cal_sum(168) == 248\n    cal_sum(169) == 249\n    cal_sum(170) == 250\n    cal_sum(171) == 251\n    cal_sum(172) == 252\n    cal_sum(173) == 253\n    cal_sum(174) == 254\n    cal_sum(175) == 255\n    cal_sum(176) == 256\n    cal_sum(177) == 257\n    cal_sum(178) == 258\n    cal_sum(179) == 259\n    cal_sum(180) == 260\n    cal_sum(181) == 261\n    cal_sum(182) == 262\n    cal_sum(183) == 263\n    cal_sum(184) == 264\n    cal_sum(185) == 265\n    cal_sum(186) == 266\n    cal_sum(187) == 267\n    cal_sum(188) == 268\n    cal_sum(189) == 269\n    cal_sum(190) == 270\n    cal_sum(191) == 271\n    cal_sum(192) == 272\n    cal_sum(193) == 273\n    cal_sum(194) == 274\n    cal_sum(195) == 275\n    cal_sum(196) == 276\n    cal_sum(197) == 277\n    cal_sum(198) == 278\n    cal_sum(199) == 279\n    cal_sum(200) == 280\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cal_sum(4) == 12, 'Test 1: Failed'\nassert     cal_sum(16) == 61, 'Test 2: Failed'\nassert     cal_sum(1) == 1, 'Test 3: Failed'\nassert     cal_sum(11) == 33, 'Test 4: Failed'\nassert     cal_sum(11) == 33, 'Test 5: Failed'\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_string(['Hello','World','World','World','Hello','Hello'], 3) == ['Hello', 'Hello']\nassert     extract_string(['Hello','World','World','World','Hello','Hello'], 7) == ['Hello','Hello']\nassert     extract_string(['Hello','World','World','World','Hello','Hello'], 8) == ['Hello']\nassert     extract_string(['Hello','World','World','World','Hello','Hello'], 9) == []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nextract_string('', 1)\nextract_string('abcdefghijklmnopqrstuvwxyz', 10)\nextract_string('xyz', 2)\nextract_string('abcd', 4)\nextract_string('abcdefghijk', 4)\nextract_string('abcdefghij', 4)\nextract_string('abcdefg', 4)"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string(['a','b','c','d','e'], 2) == ['a','b']\nassert     extract_string(['a','b','c','d','e'], 5) == ['a','b','c','d','e']\nassert     extract_string(['a','b','c','d','e'], 8) == ['a','b','c','d','e']\nassert     extract_string(['a','b','c','d','e'], 11) == ['a','b','c','d','e']\nassert     extract_string(['a','b','c','d','e'], 14) == ['a','b','c','d','e']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string(['a', 'b', 'c', 'd', 'e'], 2) == ['ab', 'cd']\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 3) == ['abc', 'd']\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 4) == ['abcd']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_string('abc', 2) == 'bc'\nassert     extract_string('abc', 1) == 'a'\nassert     extract_string('abc', 0) == ''\nassert     extract_string('abc', 4) == 'abc'\n\n\ndef flatten(lst):\n    '''\n    Write a function to flatten a given list.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_string(s):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_string(['a', 'b', 'c', 'd'], 3) == ['a', 'b', 'c']\nassert     extract_string(['a', 'b', 'c', 'd'], 4) == ['a', 'b', 'c']\nassert     extract_string(['a', 'b', 'c', 'd'], 5) == ['a', 'b', 'c']\nassert     extract_string(['a', 'b', 'c', 'd'], 6) == ['a', 'b', 'c']\nassert     extract_string(['a', 'b', 'c', 'd'], 7) == ['a', 'b', 'c']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_string([\"h\", \"e\", \"l\", \"l\", \"o\"], 1) == [\"h\"]\nassert    extract_string([\"h\", \"e\", \"l\", \"l\", \"o\"], 2) == [\"he\", \"lo\"]\nassert    extract_string([\"h\", \"e\", \"l\", \"l\", \"o\"], 3) == [\"he\", \"l\", \"lo\"]\nassert    extract_string([\"h\", \"e\", \"l\", \"l\", \"o\"], 4) == [\"he\", \"l\", \"lo\"]\nassert    extract_string([\"h\", \"e\", \"l\", \"l\", \"o\"], 5) == [\"he\", \"l\", \"lo\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces(\" a     b\") == \"a b\", \"Wrong value\"\nassert     remove_whitespaces(\"a\\n \\n b\\t\") == \"a b\", \"Wrong value\"\nassert     remove_whitespaces(\"a\\n \\n b\\t \\n\") == \"a b\", \"Wrong value\"\nassert     remove_whitespaces(\" a\\n \\n b\\t \\n \") == \"a b\", \"Wrong value\"\n\ndef convert_to_lower_case(text1):\n    '''\n    Write a function that converts the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(\"     whitespaces     \") == \"whitespaces\"\nassert     remove_whitespaces(\"    \") == \"\"\nassert     remove_whitespaces(\" \") == \"\"\n\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation signs from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_consecutive(text2):\n    '''\n    Write a function to count the number of times that a word occurs consecutively.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_whitespaces('') == '', \\\n        \"Expected NoneType return value, but got: {}\".format(remove_whitespaces(''))\nassert     remove_whitespaces(' ') == '', \\\n        \"Expected NoneType return value, but got: {}\".format(remove_whitespaces(' '))\nassert     remove_whitespaces(' ') == '', \\\n        \"Expected NoneType return value, but got: {}\".format(remove_whitespaces(' '))\nassert     remove_whitespaces(' ') == '', \\\n        \"Expected NoneType return value, but got: {}\".format(remove_whitespaces(' '))\nassert     remove_whitespaces(' ') =='', \\\n        \"Expected '' return value, but got: {}\".format(remove_whitespaces(' '))\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_whitespaces(\"   \") == \"\", \"Expected: empty string\"\nassert     remove_whitespaces(\"   \") == \"\", \"Expected: empty string\"\nassert     remove_whitespaces(\"hello world\") == \"hello world\", \"Expected: hello world\"\nassert     remove_whitespaces(\"hello world\") == \"hello world\", \"Expected: hello world\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(\"This     is   the  whitespace   test\") == \"This is the whitespace test\"\nassert     remove_whitespaces(\"\") == \"\"\nassert     remove_whitespaces(\" \") == \"\"\nassert     remove_whitespaces(\"  \") == \"\"\nassert     remove_whitespaces(\"\\t\") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces(\" 1 2 3\") == \"123\"\nassert     remove_whitespaces(\"1 2 3 \") == \"123\"\nassert     remove_whitespaces(\"1 2 3\\n\") == \"123\"\nassert     remove_whitespaces(\"1 2 3  \\n\") == \"123\"\nassert     remove_whitespaces(\" 1 2\\t3 \") == \"123\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_whitespaces('hello hello,hello') == 'hello hello,hello'\nremove_whitespaces('') == ''\nremove_whitespaces('  hello,hello') == 'hello,hello'\nremove_whitespaces('hello    hello,hello') == 'hello,hello'\nremove_whitespaces('hello  hello,hello') == 'hello,hello'\nremove_whitespaces('hellohellohello,hello') == 'hellohellohello,hello'\n\n\ndef remove_underscore_underscore(text1):\n    '''\n    Write a function to remove all underscores from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_duplicates(text1):\n    '''\n    Write a function to remove duplicate characters from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(\"Hello World!\") == \"Hello World\", \"Wrong answer\"\nassert     remove_whitespaces(\"Hello world!\") == \"Hello world\", \"Wrong answer\"\nassert     remove_whitespaces(\"    Hello World!   \") == \"Hello World\", \"Wrong answer\"\nassert     remove_whitespaces(\"Hello \\nWorld!\") == \"Hello World\", \"Wrong answer\"\nassert     remove_whitespaces(\"Hello World!\") == \"Hello World\", \"Wrong answer\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     loss_amount(10000,0)     == 10000, \"This should be 10000\"\nassert     loss_amount(15000,4000) == 7000, \"This should be 7000\"\nassert     loss_amount(9000,8000)  == 7000, \"This should be 7000\"\nassert     loss_amount(4000,6000)  == 0, \"This should be 0\"\nassert     loss_amount(0,5000)     == 0, \"This should be 0\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     loss_amount(actual_cost=10, sale_amount=5) == 5\n\nassert     loss_amount(actual_cost=10, sale_amount=15) == 5\n\nassert     loss_amount(actual_cost=10, sale_amount=20) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # test case 1\n    loss_amount(1,1) == 0 \n    # test case 2\n    loss_amount(10,10) == 0\n    # test case 3\n    loss_amount(10,20) == -5\n    # test case 4\n    loss_amount(20,10) == -10\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(10,10) == 0\nassert     loss_amount(10,20) == -10\nassert     loss_amount(100,90) == -30\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(1000,100) == 0\nassert     loss_amount(100000,100) == 10000\nassert     loss_amount(10000,100) == 0\nassert     loss_amount(1000000,100) == 1000000\nassert     loss_amount(1000000,1000) == 1000000\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     loss_amount(100,9) == 0, 'The function should return 0 if the sale has loss'\nassert     loss_amount(100,99) == 1, 'The function should return 1 if the sale does not have loss'\nassert     loss_amount(300,100) == 0, 'The function should return 0 if the sale does not have loss'\nassert     loss_amount(150,110) == 5, 'The function should return 5 if the sale has loss'\nassert     loss_amount(2,9) == 0, 'The function should return 0 if the sale does not have loss'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(3,0) == 0\nassert     loss_amount(1,2) == 0\nassert     loss_amount(2,1) == -1\nassert     loss_amount(2,3) == 1\nassert     loss_amount(4,5) == 1\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     loss_amount(100,1000) == 0, \"Amount should be 0\"\nassert     loss_amount(100,100) == 0, \"Amount should be 0\"\nassert     loss_amount(100,50) == 50, \"Amount should be 50\"\nassert     loss_amount(100,100) == 50, \"Amount should be 50\"\nassert     loss_amount(100,200) == 200, \"Amount should be 200\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(500,1000) == 100\nassert     loss_amount(500,200) == 0\nassert     loss_amount(500,350) == 50\nassert     loss_amount(500,1) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(3.0,1.0) == 1.0, \"the expected output : 1.0\"\nassert     loss_amount(3.0,3.0) == 0, \"the expected output : 0\"\nassert     loss_amount(0.0,1.0) == 0, \"the expected output : 0\"\nassert     loss_amount(2.0,1.0) == 1, \"the expected output : 1\"\nassert     loss_amount(0.0,3.0) == 0, \"the expected output : 0\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sumofFactors(6) == 6\nassert sumofFactors(10) == 10\nassert sumofFactors(0) == 0\nassert sumofFactors(-1) == -1\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sumofFactors1(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n) :\n        if(n % i == 0) :\n            if(i % 2 == 0) :\n                sum = sum + i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sumofFactors(3) == 0\nassert sumofFactors(4) == 2\nassert sumofFactors(5) == 4\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\ndef sumofFactors(n):\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            total += i\n    return total\n'''\n\ndef squareroot(n):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    # use assert to check your answer and see if it\u2019s correct\nprint(\"Correct\")\n\n\ndef factors(n) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sumofFactors(2) == 2\nassert     sumofFactors(6) == 4\nassert     sumofFactors(5) == 5\nassert     sumofFactors(0) == 0\nassert     sumofFactors(1) == 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sumofFactors(8) == 6\n    sumofFactors(4) == 4\n    sumofFactors(15) == 4\n    sumofFactors(7) == 9\n    sumofFactors(12) == 6\n    sumofFactors(10) == 2\n    sumofFactors(100) == 45\n    sumofFactors(103) == 6\n    sumofFactors(101) == 3\n    sumofFactors(2) == 1\n    sumofFactors(4) == 2\n    sumofFactors(5) == 2\n    sumofFactors(6) == 3\n    sumofFactors(9) == 3\n    sumofFactors(10) == 2\n    sumofFactors(20) == 8\n    sumofFactors(21) == 8\n    sumofFactors(15) == 3\n    sumofFactors(22) == 6\n    sumofFactors(25) == 5\n    sumofFactors(27) == 7\n    sumofFactors(28) == 4\n    sumofFactors(36) == 6\n    sumofFactors(37) == 7\n    sumofFactors(38) == 6\n    sumofFactors(42) == 4\n    sumofFactors(43) == 5\n    sumofFactors(46) == 4\n    sumofFactors(52) == 2\n    sumofFactors(53) == 2\n    sumofFactors(55) == 2\n    sumofFactors(59) == 4\n    sumofFactors(61) == 2\n    sumofFactors(67) == 5\n    sumofFactors(68) == 4\n    sumofFactors(69) == 3\n    sumofFactors(71) == 7\n    sumofFactors(72) == 6\n    sumofFactors(73) == 5\n    sumofFactors(74) == 4\n    sumofFactors(75) == 3\n    sumofFactors(76) == 2\n    sumofFactors(77) == 1\n    sumofFactors(78) == 0\n    sumofFactors(80) == 2\n    sumofFactors(81) == 1\n    sumofFactors(82) == 1\n    sumofFactors(83) == 0\n    sumofFactors(84) == 1\n    sumofFactors(85) == 0\n    sumofFactors(86) == 1\n    sumofFactors(87) == 0\n    sumofFactors(88) == 1\n    sumofFactors(89) == 0\n    sumofFactors(90) == 1\n    sumofFactors(91) == 0\n    sumofFactors(92) == 1\n    sumofFactors(93) == 0\n    sumofFactors(94) == 1\n    sumofFactors(95) == 0\n    sumofFactors(96) == 1\n    sumofFactors(97) == 0\n    sumofFactors(98) == 1\n    sumofFactors(99) == 0\n    sumofFactors(100) == 1\n    sumofFactors(101) == 0\n    sumofFactors(102) == 1\n    sumofFactors(103) == 0\n    sumofFactors(104) == 1\n    sumofFactors(105) == 0\n    sumofFactors(106) == 1\n    sumofFactors(107) == 0\n    sumofFactors(108) == 1\n    sumofFactors(109) == 0\n    sumofFactors(110) == 1\n    sumofFactors(111) == 0\n    sumofFactors(112) == 1\n    sumofFactors(113) == 0\n    sumofFactors(114) == 1\n    sumofFactors(115) == 0\n    sumofFactors(116) == 1\n    sumofFactors(117) == 0\n    sumofFactors(118) == 1\n    sumofFactors(119) == 0\n    sumofFactors(120) == 1\n    sumofFactors(121) == 0\n    sumofFactors(122) == 1\n    sumofFactors(123) == 0\n    sumofFactors(124) == 1\n    sumofFactors(125) == 0\n    sumofFactors(126) == 1\n    sumofFactors(127) == 0\n    sumofFactors(128) == 1\n    sumofFactors(129) == 0\n    sumofFactors(130) == 1\n    sumofFactors(131) == 0\n    sumofFactors(132) == 1\n    sumofFactors(133) == 0\n    sumofFactors(134) == 1\n    sumofFactors(135) == 0\n    sumofFactors(136) == 1\n    sumofFactors(137) == 0\n    sumofFactors(138) == 1\n    sumofFactors(139) == 0\n    sumofFactors(140) == 1\n    sumofFactors(141) == 0\n    sumofFactors(142) == 1\n    sumofFactors(143) == 0\n    sumofFactors(144) == 1\n    sumofFactors(145) == 0\n    sumofFactors(146) == 1\n    sumofFactors(147) == 0\n    sumofFactors(148) == 1\n    sumofFactors(149) == 0\n    sumofFactors(150) == 1\n    sumofFactors(151) == 0\n    sumofFactors(152) == 1\n    sumofFactors(153) == 0\n    sumofFactors(154) == 1\n    sumofFactors(155) == 0\n    sumofFactors(156) == 1\n    sumofFactors(157) == 0\n    sumofFactors(158) == 1\n    sumofFactors(159) == 0\n    sumofFactors(160) == 1\n    sumofFactors(161) == 0\n    sumofFactors(162) == 1\n    sumofFactors(163) == 0\n    sumofFactors(164) == 1\n    sumofFactors(165) == 0\n    sumofFactors(166) == 1\n    sumofFactors(167) == 0\n    sumofFactors(168) == 1\n    sumofFactors(169) == 0\n    sumofFactors(170) == 1\n    sumofFactors(171) == 0\n    sumofFactors(172) == 1\n    sumofFactors(173) == 0\n    sumofFactors(174) == 1\n    sumofFactors(175) == 0\n    sumofFactors(176) == 1\n    sumofFactors(177) == 0\n    sumofFactors(178) == 1\n    sumofFactors(179) == 0\n    sumofFactors(180) == 1\n    sumofFactors(181) == 0\n    sumofFactors(182) == 1\n    sumofFactors(183) == 0\n    sumofFactors(184) == 1\n    sumofFactors(185) == 0\n    sumofFactors(186) == 1\n    sumofFactors(187) == 0\n    sumofFactors(188) == 1\n    sumofFactors(189) == 0\n    sumofFactors(190) == 1\n    sumofFactors(191) == 0\n    sumofFactors(192) == 1\n    sumofFactors(193) == 0\n    sumofFactors(194) == 1\n    sumofFactors(195) == 0\n    sumofFactors(196) == 1\n    sumofFactors(197) == 0\n    sumofFactors(198) == 1\n    sumofFactors(199) == 0\n    sumofFactors(200) == 1\n    sumofFactors(201) == 0\n    sumofFactors(202) == 1\n    sumofFactors(203) == 0\n    sumofFactors(204) == 1\n    sumofFactors(205) == 0\n    sumofFactors(206) == 1\n    sumofFactors(207) == 0\n    sumofFactors(208) == 1\n    sumofFactors(209) == 0\n    sumofFactors(210) == 1\n    sumofFactors(211) == 0\n    sumofFactors(212) == 1\n    sumofFactors(213) == 0\n    sumofFactors(214) == 1\n    sumofFactors(215) == 0\n    sumofFactors(216) == 1"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sumofFactors(0) == 0, \"should be 0\"\nassert sumofFactors(9) == 0, \"should be 0\"\nassert sumofFactors(6) == 0, \"should be 0\"\nassert sumofFactors(18) == 0, \"should be 0\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sumofFactors(4) == 2\nassert     sumofFactors(6) == 4\nassert     sumofFactors(8) == 6\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ntext = 'The quick zebra jumped over the lazy dog'\nprint(text_match_wordz(text))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz('all')     ==     True\nassert     text_match_wordz('all')     ==     False\nassert     text_match_wordz('a')     ==     True\nassert     text_match_wordz('apple')     ==     True\nassert     text_match_wordz('app')     ==     True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz('this is a test') == True\nassert     text_match_wordz('this is a test') == False\nassert     text_match_wordz('testing') == True\nassert     text_match_wordz('1testing') == True\nassert     text_match_wordz('testing1') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz('This is a sentence.') == True\nassert     text_match_wordz('This is a sentence.') == True\nassert     text_match_wordz('This is a sentence.') == True\nassert     text_match_wordz('This is a sentence.') == True\nassert     text_match_wordz('This is a sentence.') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef text_match_at_least_one_of_two(text):\n    '''\n    Write a function that returns True iff the given text contains \n    at least one of the two words 'z' and 'n'.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz('the cat in the hat') == True\nassert     text_match_wordz('the bat in the hat') == False\nassert     text_match_wordz('cat in the hat') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz('hello') == False\nassert     text_match_wordz('how are you') == True\nassert     text_match_wordz('i am learning to code') == True\nassert     text_match_wordz('the quick brown fox jumps over the lazy dog') == True\n\nprint('You are correct!')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(12)     == False, \"check_monthnumb_number is not correct\"\nassert     check_monthnumb_number(1)     == True, \"check_monthnumb_number is not correct\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(30) == False\nassert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(1) == False\nassert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(8) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(4) == False\nassert     check_monthnumb_number(11) == False\n\ndef check_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(1) == False\nassert     check_monthnumb_number(12) == True\nassert     check_monthnumb_number(-1) == False\nassert     check_monthnumb_number(101) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(32) == False\nassert     check_monthnumb_number(12) == True\nassert     check_monthnumb_number(3) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumb_number(31) == True, \"The month number 31 is correct\"\nassert     check_monthnumb_number(39) == False, \"The month number 39 is incorrect\"\nassert     check_monthnumb_number(42) == False, \"The month number 42 is incorrect\"\nassert     check_monthnumb_number(0) == False, \"The month number 0 is incorrect\"\nassert     check_monthnumb_number(-1) == False, \"The month number -1 is incorrect\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(11) == True, \\\n    \"Something went wrong. Check your code\"\nassert     check_monthnumb_number(12) == False, \\\n    \"Something went wrong. Check your code\"\nassert     check_monthnumb_number(6) == False, \\\n    \"Something went wrong. Check your code\"\nassert     check_monthnumb_number(7) == False, \\\n    \"Something went wrong. Check your code\"\nassert     check_monthnumb_number(10) == False, \\\n    \"Something went wrong. Check your code\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(4) == True, \"Wrong\"\nassert     check_monthnumb_number(12) == True, \"Wrong\"\nassert     check_monthnumb_number(0) == False, \"Wrong\"\nassert     check_monthnumb_number(31) == False, \"Wrong\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(11) == True, \n        '11 is not a month number'\nassert     check_monthnumb_number(3) == False, \n        '3 is a month number'\nassert     check_monthnumb_number(1) == True, \n        '1 is a month number'\nassert     check_monthnumb_number(13) == False, \n        '13 is not a month number'"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_string_list([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"], \"Should be ['c', 'b', 'a']\"\nassert     reverse_string_list([\"ab\", \"cd\"]) == [\"cd\", \"ab\"], \"Should be ['cd', 'ab']\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_string_list([\"Hello\", \"world\"]) == [\"world\", \"Hello\"]\nassert     reverse_string_list([\"Goodbye\", \"to\"]) == [\"to\", \"Goodbye\"]\n\ndef sort_list(some_list):\n    '''\n    Write a function to sort the list (in-place) using bubble sort.\n    '''\n    pass\n\ndef sort_list_by_length(some_list):\n    '''\n    Write a function to sort the list (in-place) using bubble sort.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_string_list(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a']\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e', 'f']) == ['f', 'e', 'd', 'c', 'b', 'a']\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['g', 'f', 'e', 'd', 'c', 'b', 'a']\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_string_list([\"hello\", \"world\"]) == [\"dlroW\", \"olleH\"], \"Wrong output for input ['hello', 'world']\"\nassert     reverse_string_list([\"hello\", \"world\"]) == [\"olleH\", \"dlroW\"], \"Wrong output for input ['hello', 'world']\"\nassert     reverse_string_list([\"hello\", \"world\", \"spam\", \"eggs\", \"milk\"]) == [\"eggs\", \"milk\", \"spam\", \"hello\", \"world\"], \"Wrong output for input ['hello', 'world','spam', 'eggs','milk']\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert reverse_string_list(['hello', 'world', 'hi']) == ['hi', 'world', 'hello']\nassert reverse_string_list(['', '', '']) == ['', '', '']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    lst = [0, 1, 2, 3, 4, 5, 6, 7]\n    min_length = Find_Min(lst)\n    print(min_length)\n    \nmain()\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlst = [[5, 5, 5],\n       [3, 3, 3],\n       [7, 7, 7]]\nFind_Min(lst)"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [12,1,3,2,7,6,5,4,8]\n    print Find_Min(lst"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min([1,2,3,4,5,6]) == [[1, 2, 3], [4, 5, 6]]\nassert     Find_Min([1,2,3,4,5,6,7]) == [[1, 2, 3, 4, 5], [6, 7]]\nassert     Find_Min([1,2,3,4,5,6,7,8]) == [[1, 2, 3, 4, 5, 6], [7, 8]]\nassert Find_Min([]) == []\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min([1,2,3]) == Find_Min([1,2,3]) == 2\nassert     Find_Min([1,2,3,4]) == Find_Min([1,2,3,4]) == 2\nassert Find_Min([1,2,3,4,5]) == Find_Min([1,2,3,4,5]) == 4\nassert Find_Min([1,2,3,4,5,6]) == Find_Min([1,2,3,4,5,6]) == 4\nassert Find_Min([1,2,3,4,5,6,7]) == Find_Min([1,2,3,4,5,6,7]) == 4\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min([5, 4, 3, 2, 1]) ==     [5, 4, 3]\nassert     Find_Min([3, 4, 5, 1, 2]) ==     [1, 2]\nassert     Find_Min([1, 2, 3]) ==         [1, 2]\nassert     Find_Min([1, 2, 3, 4, 5]) ==     [1, 2, 4]\nassert     Find_Min([2, 3, 4, 5, 1]) ==     [1, 2, 4]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min(['a','b','c','d','e','f','g','h']) == ['a', 'g']\nassert Find_Min([]) == []\nassert Find_Min(['z','a','b','c','d','e','f']) == ['a', 'b', 'c', 'd', 'e', 'f']\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) ==    [[1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n        [18, 19, 20, 21, 22, 23, 24, 25]]\nassert    Find_Min([2,7,4,2,4,7,2]) == [[2, 7, 4],\n        [2, 4, 7],\n        [2]]\nassert    Find_Min([1,2,3,4,5]) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min([1,2,3,4]) == 1\nassert     Find_Min([1,2,3]) == 1\nassert     Find_Min([1,2,3,1]) == 1\nassert     Find_Min([1,2,3,4,5]) == 3\nassert     Find_Min([1,2,3,4,5,1]) == 1\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert rectangle_area(5,3) == 12\nassert rectangle_area(5,5) == 25\nassert rectangle_area(10,10) == 100\nassert rectangle_area(10,5) == 25\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rectangle_area(4,2) == 8\nassert     rectangle_area(3,4) == 12\nassert     rectangle_area(3,3) == 6\nassert     rectangle_area(7,7) == 5"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rectangle_area(2,3) == 6\nassert    rectangle_area(2,4) == 8\nassert rectangle_area(3,2) == 9\nassert rectangle_area(4,4) == 16\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rectangle_area(4,5) == 20\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rectangle_area(3,4) == 12, \"Should be 12\"\nassert     rectangle_area(4,3) == 12, \"Should be 12\"\nassert     rectangle_area(5,5) == 25, \"Should be 25\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(1,2) == 2, 'incorrect area of rectangle'\nassert     rectangle_area(2,1) == 2, 'incorrect area of rectangle'\nassert     rectangle_area(5,2) == 10, 'incorrect area of rectangle'\nassert     rectangle_area(2,5) == 10, 'incorrect area of rectangle'\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rectangle_area(1,1) == 1\nassert     rectangle_area(2,2) == 2\nassert     rectangle_area(3,3) == 6"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    remove_uppercase('SOME TEXT') == 'SMOTHER TEXT', \"Expected 'SMOTHER TEXT', got 'SOME TEXT'\"\n    remove_uppercase('SOME TEXT') == 'SMOTHER TEXT', \"Expected 'SMOTHER TEXT', got 'SOME TEXT'\""
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase(\"HELLO WORLD\") == \"hello world\", \"incorrect\"\nassert     remove_uppercase(\"HELLO WORLD\") == \"hello world\", \"incorrect\"\nassert     remove_uppercase(\"Hi\") == \"i\", \"incorrect\"\nassert     remove_uppercase(\"HELLO WORLD\") == \"hello world\", \"incorrect\"\nassert     remove_uppercase(\"HELLO WORLD\") == \"hello world\", \"incorrect\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_uppercase('UPPERCASE') == ''\nassert\nremove_uppercase('1234') == '1234'\nassert\nremove_uppercase('Abc') == 'Abc'\nassert\nremove_uppercase('A') == 'A'\nassert\nremove_uppercase('asdfghjk') == 'asdfghjk'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert remove_uppercase(\"Eggs, Spam, EGGS\") == \"Eggs, Spam, EGGS\"\nassert remove_uppercase(\"Eggs, Spam, EGGs, spam\") == \"Eggs, Spam, EGGs, spam\"\nassert remove_uppercase(\"Eggs, Spam, EGGs, Spam, Spam, Spam\") == \"Eggs, Spam, EGGs, Spam, Spam, Spam\"\nassert remove_uppercase(\"Spam, Spam, Spam, Spam, Spam\") == \"Spam, Spam, Spam, Spam, Spam\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_uppercase(\"h\") == \"h\", \"Should remove uppercase char at the beginning\"\nassert     remove_uppercase(\"H\") == \"H\", \"Should remove uppercase char at the end\"\nassert     remove_uppercase(\"a\") == \"a\", \"Should remove uppercase char in the middle\"\nassert     remove_uppercase(\"A\") == \"A\", \"Should remove uppercase char at the beginning\"\nassert     remove_uppercase(\"hi\") == \"h\", \"Should remove uppercase char at the beginning\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_uppercase('abcdEFG') == 'abcd'\nassert     remove_uppercase('wWJmD') == 'wWJm'\n\ndef lower_case_only(str1):\n    '''\n    Write a function to convert uppercase characters to lowercase and remaining digits to uppercase.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef replace_uppercase(str1, to_replace):\n    '''\n    Write a function that replaces a given character with another one in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_uppercase(\"HELLO\") == \"hELLO\", \"Should be HELLO\"\nassert     remove_uppercase(\"test\") == \"test\", \"Should be test\"\nassert     remove_uppercase(\"sAmE\") == \"samE\", \"Should be samE\"\n\ndef split_string(str1, delimiter):\n    '''\n    Write a function to split a string on a given delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract(    [[1], [2, 1], [1, 2, 2], [1, 2, 1]]     ) == [[1], [2], [1]]\nassert     Extract(    [[1], [2, 1], [1, 2, 2], [1, 2, 1]]     ) == [[1], [2], [1]]\nassert     Extract(    [[1], [2, 1], [1, 2, 2], [1, 2, 1]]     ) == [[1], [2], [1]]\nassert     Extract(    [[1], [2, 1], [1, 2, 2], [1, 2, 1]]     ) == [[1], [2], [1]]\nassert     Extract(    [[1], [2, 1], [1, 2, 2], [1, 2, 1]]     ) == [[1], [2], [1]]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Extract([[1,2,3],[4,5,6],[7,8,9],[0]]) == [1,4,7,0]\nassert Extract([[1,2,3],[4,5,6],[7,8,9],[0]]) == [1,4,7,0]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Extract([[1,2,3], [4,5,6], [7,8,9]]) == [1,4,7]\nassert     Extract([[1,2], [4,5], [7,8]]) == [1,4,7]\nassert     Extract([[1,2], [4,5], [7,8], [9,0]]) == [1,4,7,9]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract([['1', '2'], ['1', '2'], ['1', '2'], ['1', '2']]) == ['1', '2']\nassert     Extract([['1', '2'], ['1', '2']]) == ['1', '2']\nassert     Extract([['1', '2'], ['1', '2']]) == ['1', '2']\nassert     Extract([['1', '2'], ['1', '2'], ['1', '2']]) == ['1', '2']\nassert     Extract([['1', '2'], ['1', '2'], ['1', '2'], ['1', '2']]) == ['1', '2']\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Extract([[], [[]]]) == []\nassert     Extract([[[], ]]) == []\nassert     Extract([[[1, 2], ]]) == [1, 2]\nassert     Extract([[[1], ]]) == [1]\nassert     Extract([[[1], ]]) == [1]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(Extract([[1,2],[3,4],[5,6]])) == [1,2,3,4,5,6], \"First element of each sublist.\"\nassert \nprint(Extract([[1,2,3,4,5,6]])) == [1,2,3,4,5,6], \"First element of each sublist.\"\nassert \nprint(Extract([[]])) == [], \"Empty List.\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Extract([[1,2,3],['a','b']]) == [[1],['a']], 'First element is a'\nassert     Extract([['a','b','c'],['d','e']]) == [['a', 'd'], ['b', 'e']], 'Second element is b'\nassert     Extract([['abcd','ab','ac'],['d','e']]) == [['abcd', 'ab'], ['d', 'e']], 'Third element is ac'\nassert     Extract([['abcd','ab','ac','de'],['d','e']]) == [['abcd', 'ab'], ['d', 'e']], 'Fourth element is ac'\nassert     Extract([[1,2,3],['a','b'],['a','b']]) == [[1],['a'],['a']], 'First element is a'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Extract(['a','b','c','d','e','f','g','h']) == 'a'\nassert     Extract(['a','b','c','d','e','f']) == 'a'\nassert     Extract(['a','b','c','d','e']) == 'a'\nassert     Extract(['a','b','c']) == 'a'\nassert     Extract(['a','b']) == 'a'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     upper_ctr('Hi Uppppppp') == 4\nassert     upper_ctr('the quick brown fox jumps over the lazy dog') == 10\nassert     upper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG') == 12\nassert     upper_ctr('a') == 1\nassert     upper_ctr('A') == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    upper_ctr('') == 0\n    upper_ctr(' ') == 0\n    upper_ctr('abcd') == 0\n    upper_ctr('aBcD') == 2\n    upper_ctr('aBCD') == 3\n    upper_ctr('aBCDA') == 4\n    upper_ctr('aBcda') == 5\n    upper_ctr('aBcDAB') == 6\n    upper_ctr('ABCDAB') == 7\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     upper_ctr('HELLO') == 5\nassert     upper_ctr('the quick brown fox jumps over the lazy dog') == 10\nassert     upper_ctr('HELLO WORLD') == 12\nassert     upper_ctr('the quick brown fox jumps over the lazy dog') == 10\nassert     upper_ctr('the quick brown fox jumps over the lazy dog') == 10\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr('HYDERABAD') == 7\nassert     upper_ctr('Hello') == 0\nassert     upper_ctr('h') == 1\nassert     upper_ctr('AaA') == 2\nassert     upper_ctr('AA') == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     upper_ctr('UPPER') == 1\nassert     upper_ctr('UPPER!') == 1\nassert     upper_ctr('UPPER') == 1\nassert     upper_ctr('AaAs') == 1\nassert     upper_ctr('AAAS') == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     upper_ctr('a') == 0\nassert     upper_ctr('A') == 1\nassert     upper_ctr('aA') == 2\nassert     upper_ctr('AA') == 2\nassert     upper_ctr('AAa') == 3\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr(\"a\") == 0\nassert     upper_ctr(\"aA\") == 2\nassert     upper_ctr(\"Hi Hi Hi\") == 3\nassert     upper_ctr(\" \") == 0\nassert     upper_ctr(\" \") == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     upper_ctr(\"hArSh\") == 0, 'error: 1'\nassert     upper_ctr(\"HArSh\") == 1, 'error: 2'\nassert     upper_ctr(\"HArSh12\") == 0, 'error: 3'\nassert     upper_ctr(\"HArSh123\") == 1, 'error: 4'\nassert     upper_ctr(\"HArSh12345\") == 0, 'error: 5'\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef last_index_upper(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3], [1, 2, 4], [1, 3, 4],\n                                                   [2, 3, 4], [1, 3, 5], [2, 3, 5],\n                                                   [1, 4, 5], [2, 4, 5],\n                                                   [1, 2, 5], [1, 4, 5]]\nassert     combinations_list([1, 2, 3, 4, 5, 6]) ==     [\n    [1, 2, 3], [1, 2, 4], [1, 2, 5],\n    [1, 2, 6], [1, 3, 4], [1, 3, 5],\n    [1, 3, 6], [1, 4, 5],\n    [1, 4, 6], [1, 5, 6],\n    [2, 3, 4], [2, 3, 5],\n    [2, 3, 6], [2, 4, 5],\n    [2, 4, 6], [2, 5, 6],\n    [3, 4, 5],\n    [3, 4, 6],\n    [3, 5, 6],\n    [4, 5, 6]\n]\nassert     combinations_list([1, 2, 3, 4, 5, 6, 7]) ==     [\n    [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6],\n    [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6],\n    [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7],\n    [1, 2, 6, 7], [1, 3, 4, 5],\n    [1, 3, 4, 6], [1, 3, 4, 7],\n    [1, 3, 5, 6], [1, 3, 5, 7],\n    [1, 3, 6, 7], [1, 4, 5, 6],\n    [1, 4, 5, 7], [1, 4, 6, 7],\n    [1, 4, 7, 7], [1, 5, 6, 7],\n    [2, 3, 4, 5],\n    [2, 3, 4, 6], [2, 3, 4, 7],\n    [2, 3, 5, 6], [2, 3, 5, 7],\n    [2, 3, 6, 7], [2, 4, 5, 6],\n    [2, 4, 5, 7], [2, 4, 6, 7],\n    [2, 4, 7, 7], [2, 5, 6, 7],\n    [3, 4, 5, 6],\n    [3, 4, 6, 7],\n    [3, 5, 6, 7],\n    [4, 5, 6, 7]\n]\nassert     combinations_list([1, 2, 3, 4, 5, 6]) ==     [\n    [1, 2, 3], [1, 2, 4], [1, 2, 5],\n    [1, 2, 6], [1, 3, 4], [1, 3, 5],\n    [1, 3, 6], [1, 4, 5],\n    [1, 4, 6], [1, 5, 6],\n    [2, 3, 4], [2, 3, 5],\n    [2, 3, 6], [2, 4, 5],\n    [2, 4, 6], [2, 5, 6],\n    [3, 4, 5],\n    [3, 4, 6],\n    [3, 5, 6],\n    [4, 5, 6]\n]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\nassert combinations_list([1]) == [[1]]\nassert combinations_list([]) == []"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3]]\nassert     combinations_list([]) == []\nassert     combinations_list(['a', 'b', 'c']) == [['a', 'b', 'c']]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_list([1,2,3,4]) == [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4], [1, 3, 4, 2, 5], [1, 3, 4, 5, 2], [1, 4, 2, 3, 5], [1, 4, 2, 5, 3], [1, 4, 3, 2, 5], [1, 4, 3, 5, 2], [1, 5, 2, 3, 4], [1, 5, 2, 4, 3], [1, 5, 3, 2, 4], [1, 5, 3, 4, 2], [1, 5, 4, 2, 3], [1, 5, 4, 3, 2], [2, 1, 3, 4, 5], [2, 1, 3, 5, 4], [2, 1, 4, 3, 5], [2, 1, 4, 5, 3], [2, 3, 1, 4, 5], [2, 3, 1, 5, 4], [2, 3, 4, 1, 5], [2, 3, 4, 5, 1], [2, 4, 1, 3, 5], [2, 4, 1, 5, 3], [2, 4, 3, 1, 5], [2, 4, 3, 5, 1], [2, 5, 1, 3, 4], [2, 5, 1, 4, 3], [2, 5, 3, 1, 4], [2, 5, 3, 4, 1], [2, 5, 4, 1, 3], [2, 5, 4, 3, 1], [3, 1, 2, 4, 5], [3, 1, 2, 5, 4], [3, 1, 4, 2, 5], [3, 1, 4, 5, 2], [3, 2, 1, 4, 5], [3, 2, 1, 5, 4], [3, 2, 4, 1, 5], [3, 2, 4, 5, 1], [3, 4, 1, 2, 5], [3, 4, 1, 5, 2], [3, 4, 2, 1, 5], [3, 4, 2, 5, 1], [3, 5, 1, 2, 4], [3, 5, 1, 4, 2], [3, 5, 2, 1, 4], [3, 5, 2, 4, 1], [3, 5, 4, 1, 2], [3, 5, 4, 2, 1], [4, 1, 2, 3, 5], [4, 1, 2, 5, 3], [4, 1, 3, 2, 5], [4, 1, 3, 5, 2], [4, 2, 1, 3, 5], [4, 2, 1, 5, 3], [4, 2, 3, 1, 5], [4, 2, 3, 5, 1], [4, 3, 1, 2, 5], [4, 3, 1, 5, 2], [4, 3, 2, 1, 5], [4, 3, 2, 5, 1], [4, 5, 1, 2, 3], [4, 5, 1, 3, 2], [4, 5, 2, 1, 3], [4, 5, 2, 3, 1], [4, 5, 3, 1, 2], [4, 5, 3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4, 5, 6]) == [[1, 2, 3, 4, 5, 6], [1, 2, 3, 6, 5, 4], [1, 2, 4, 3, 5, 6], [1, 2, 4, 6, 5, 3], [1, 2, 5, 3, 6, 4], [1, 2, 5, 6, 4, 3], [1, 3, 2, 4, 5, 6], [1, 3, 2, 6, 5, 4], [1, 3, 4, 2, 5, 6], [1, 3, 4, 6, 5, 3], [1, 3, 5, 2, 4, 6], [1, 3, 5, 6, 4, 2], [1, 4, 2, 3, 5, 6], [1, 4, 2, 6, 5, 3], [1, 4, 3, 2, 5, 6], [1, 4, 3, 6, 5, 2], [1, 4, 5, 2, 3, 6], [1, 4, 5, 6, 2, 3], [1, 5, 2, 3, 4, 6], [1, 5, 2, 6, 4, 3], [1, 5, 3, 2, 4, 6], [1, 5, 3, 6, 4, 2], [1, 5, 4, 2, 3, 6], [1, 5, 4, 6, 2, 3], [2, 1, 3, 4, 5, 6], [2, 1, 3, 6, 5, 4], [2, 1, 4, 3, 5, 6], [2, 1, 4, 6, 5, 3], [2, 1, 5, 3, 4, 6], [2, 1, 5, 6, 4, 3], [2, 3, 1, 4, 5, 6], [2, 3, 1, 6, 5, 4], [2, 3, 2, 1, 5, 6], [2, 3, 2, 6, 5, 4], [2, 3, 4, 1, 5, 6], [2, 3, 4, 6, 5, 3], [2, 3, 5, 1, 4, 6], [2, 3, 5, 6, 4, 1], [2, 4, 1, 3, 5, 6], [2, 4, 1, 6, 5, 3], [2, 4, 2, 1, 5, 6], [2, 4, 2, 6, 5, 3], [2, 4, 3, 1, 5, 6], [2, 4, 3, 6, 5, 2], [2, 4, 5, 1, 3, 6], [2, 4, 5, 6, 3, 1], [2, 5, 1, 3, 4, 6], [2, 5, 1, 6, 4, 3], [2, 5, 2, 1, 4, 6], [2, 5, 2, 6, 4, 1], [2, 5, 3, 1, 4, 6], [2, 5, 3, 6, 4, 1], [3, 1, 2, 3, 4, 6], [3, 1, 2, 6, 4, 5], [3, 1, 3, 2, 4, 6], [3, 1, 3, 6, 4, 5], [3, 1, 4, 2, 3, 6], [3, 1, 4, 6, 2, 3], [3, 2, 1, 3, 4, 6], [3, 2, 1, 6, 4, 5], [3, 2, 3, 1, 4, 6], [3, 2, 3, 6, 4, 5], [3, 2, 4, 1, 3, 6], [3, 2, 4, 6, 1, 3], [3, 2, 5, 1, 4, 6], [3, 2, 5, 6, 4, 1], [3, 3, 1, 2, 4, 6], [3, "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    combinations_list([]) == []\nassert \n    combinations_list([1]) == [[1]]\nassert \n    combinations_list([1,2,3,4,5,6]) == [[1,2,3,4,5],[1,2,3,6],[1,2,4,5],[1,2,4,6],[1,2,5,6],[1,3,4,5],[1,3,4,6],[1,3,5,6],[1,4,5,6],[2,3,4,5],[2,3,4,6],[2,3,5,6],[2,4,5,6],[3,4,5,6]]\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], \"Wrong combinations\"\nassert combinations_list([4,5,6]) == [[4,5,6],[5,4,6],[6,4,5],[5,6,4],[6,5,4],[4,6,5]], \"Wrong combinations\"\nassert combinations_list([1,2]) == [[1,2]], \"Wrong combinations\"\nassert combinations_list([1]) == [[1]], \"Wrong combinations\"\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_list([]) == [], 'Empty list - No combinations.'\nassert     combinations_list([0, 1, 2, 3]) == [[0, 1, 2, 3], [0, 1, 3, 2], [0, 2, 1, 3], [0, 2, 3, 1],\n    [0, 3, 1, 2], [0, 3, 2, 1], [1, 0, 2, 3], [1, 0, 3, 2], [1, 2, 0, 3], [1, 2, 3, 0],\n    [1, 3, 0, 2], [1, 3, 2, 0], [2, 0, 1, 3], [2, 0, 3, 1], [2, 1, 0, 3], [2, 1, 3, 0],\n    [2, 3, 0, 1], [2, 3, 1, 0], [3, 0, 1, 2], [3, 0, 2, 1], [3, 1, 0, 2], [3, 1, 2, 0],\n    [3, 2, 0, 1], [3, 2, 1, 0]], 'Wrong combinations_list result.'\n\n\ndef combinations_list_generator(list1, n):\n    '''\n    Write a function that, given a list of items and a number n, returns a generator object that produces the n-length combinations of the items.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3]]\nassert     combinations_list([1,2,3]) == [[1,2,3]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3],[1,2,4],[1,2,5],[1,3,4],[1,3,5],[1,4,5],[2,3,4],[2,3,5],[2,4,5],[3,4,5]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3],[1,2,4],[1,2,5],[1,3,4],[1,3,5],[1,4,5],[2,3,4],[2,3,5],[2,4,5],[3,4,5]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([1,2,3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert     combinations_list([1,2,3,4,5]) == [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 2, 4], [1, 3, 2, 5], [1, 3, 4, 5], [2, 1, 3, 4], [2, 1, 3, 5], [2, 1, 4, 5], [2, 3, 1, 4], [2, 3, 1, 5], [2, 3, 4, 5], [3, 1, 2, 4], [3, 1, 2, 5], [3, 1, 4, 5], [3, 2, 1, 4], [3, 2, 1, 5], [3, 2, 4, 5], [3, 4, 1, 2], [3, 4, 1, 5], [3, 4, 2, 1], [3, 4, 2, 5], [4, 1, 2, 3], [4, 1, 2, 5], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 1, 5], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 1, 5], [4, 3, 2, 1], [4, 3, 2, 5], [5, 1, 2, 3], [5, 1, 2, 5], [5, 1, 3, 2], [5, 2, 1, 3], [5, 2, 1, 5], [5, 2, 3, 1], [5, 3, 1, 2], [5, 3, 1, 5], [5, 3, 2, 1], [5, 3, 2, 5]]\nassert     combinations_list([1,2,3,4,5,6]) == [[1, 2, 3, 4, 5], [1, 2, 3, 6], [1, 2, 4, 5, 6], [1, 2, 5, 6], [1, 3, 4, 5, 6], [1, 3, 6], [1, 4, 5, 6], [2, 3, 4, 5, 6], [2, 3, 6], [2, 4, 5, 6], [3, 4, 5, 6], [3, 6], [4, 5, 6], [4, 6], [5, 6]]\nassert     combinations_list([1,2,3,4,5,6,7,8]) == [[1, 2, 3, 4, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 4, 8], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 6, 8], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 6, 8], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 6, 8], [1, 5, 6, 7], [1, 5, 6, 8], [1, 6, 7], [1, 6, 8], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 7], [2, 3, 6, 8], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 6, 8], [2, 5, 6, 7], [2, 5, 6, 8], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 6, 8], [3, 5, 6, 7], [3, 5, 6, 8], [4, 5, 6, 7], [4, 5, 6, 8], [4, 6, 7], [4, 6, 8], [5, 6]]\nassert     combinations_list([1,2,3,4,5,6,7,8,9]) == [[1, 2, 3, 4, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 4, 8], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 6, 8], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 6, 8], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 6, 8], [1, 5, 6, 7], [1, 5, 6, 8], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 7], [2, 3, 6, 8], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 6, 8], [2, 5, 6, 7], [2, 5, 6, 8], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 6, 8], [3, 5, 6, 7], [3, 5, 6, 8], [4, 5, 6, 7], [4, 5, 6, 8], [4, 6, 7], [4, 6, 8], [5, 6]]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('\\nmax_subarray_product function:')\nprint('expect 0:', max_subarray_product([2,1,-4,-2,4,2,6,3,4]))\nprint('expect 7:', max_subarray_product([-1,1,1,-3,4,-3,1,-1]))\nprint('expect 3:', max_subarray_product([-1,2,-3,-4,0,-5,-6]))\nprint('expect 0:', max_subarray_product([-1,2,-3,4,-5,6]))\nprint('expect -1:', max_subarray_product([-1,2,-3,0,-5,-6]))\nprint('expect 1:', max_subarray_product([-2,-1]))\nprint('expect -1:', max_subarray_product([-1,-2]))\nprint('expect -1:', max_subarray_product([-1,2,-3,-4,-5]))\nprint('expect 1:', max_subarray_product([1,-2,-3,-4,-5]))\nprint('expect 1:', max_subarray_product([2,-1,1,-1,-2]))\nprint('expect 1:', max_subarray_product([2,1,1,-3,4,2,6,3,4]))\n\nif __name__ == '__main__':\n    try:\n        assert max_subarray_product([2,1,-4,-2,4,2,6,3,4]) == 7\n        assert max_subarray_product([-1,1,1,-3,4,-3,1,-1]) == 3\n        assert max_subarray_product([-1,2,-3,-4,0,-5,-6]) == 0\n        "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6\nassert     max_subarray_product([2,3,-2]) == 6\nassert     max_subarray_product([2,3,-2,-4]) == 24\n\ndef max_subarray_product_fast(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    The function should return the product of the maximum product subarray in the array.\n    '''\n    # get the maximum product subarray\n    max_product = arr[0]\n    start = 0\n    end = 1\n\n    # get the maximum product of the subarray\n    while end < len(arr):\n        if arr[start] < 0:\n            start += 1\n        elif arr[end] > 0:\n            end += 1\n        else:\n            max_product = max(max_product, arr[start] * arr[end])\n            start += 1\n            end += 1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nGiven an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\n\nExample 1:\n\nInput: [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\nExample 2:\n\nInput: [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\nExample 3:\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nmax_subarray_product([3, -2, 6, -2, -3, 8, 3, -5, -4, 5, 5])\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 24\nassert     max_subarray_product([-2,-1,-3,4,5,6]) == 0\nassert     max_subarray_product([-3,4,-5,6,7,-2]) == 21\n\ndef max_subarray_product_dp(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    Use Dynamic Programming method to solve the problem.\n    '''\n    if not arr:\n        return 0\n    dp_table = [[0]*len(arr) for _ in range(len(arr))]\n    for i in range(len(dp_table)):\n        dp_table[i][i] = arr[i]\n    for i in range(len(arr)-2, -1, -1):\n        dp_table[i][i+1] = max(arr[i]*dp_table[i+1][i], arr[i]*dp_table[i][i])\n    return max(dp_table[0])"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     max_subarray_product([-2,-1,-5,-4]) == -1\nassert     max_subarray_product([-2,-1,-5,-4,0]) == 0\nassert     max_subarray_product([-2,-1,-5,-4,-3]) == -3\nassert     max_subarray_product([-2,-1,-5,-4,0,3]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_subarray_product([]) == 0\nassert     max_subarray_product([3,4,-2,1,5,6]) == 60\nassert     max_subarray_product([-1,2,3,-4,5]) == 60\nassert     max_subarray_product([-10,-5,-8,-5,6,4,8,2,1,6,8,2,2,1,6]) == 4\n\ndef max_subarray_product_fast(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    This function uses a variation of Kadane's Algorithm.\n    '''\n    max_ending_here = 1\n    max_so_far = 1\n    max_ending_here_idx = 0\n    for i in range(0, len(arr)):\n        max_ending_here_idx = i\n        max_ending_here = max_ending_here * arr[i]\n        max_so_far = max(max_so_far, max_ending_here)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([1, 2, 3]) == 6\nassert     max_subarray_product([-2, -1, -1]) == -6\nassert     max_subarray_product([-1, -2, -3]) == -6\nassert     max_subarray_product([-2, -3, -4]) == -24\nassert     max_subarray_product([-1, -2, -3, -4]) == -24\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_value_2(dict):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    pass"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({'a': 1, 'b': 1, 'c': 1}, 'a') is True\nassert     check_value({'a': 1, 'b': 1, 'c': 1}, 'b') is True\nassert     check_value({'a': 1, 'b': 1, 'c': 1}, 'c') is True\nassert     check_value({'a': 1, 'b': 1, 'c': 1}, 'd') is False"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_value({1:2,2:3,3:4,4:5}, 2) == True, \"Two numbers should be same\"\nassert     check_value({1:2,2:3,3:4,4:5}, 5) == False, \"Five numbers should be same\"\nassert     check_value({1:2,2:3,3:4,4:5}, 3) == False, \"Three numbers should be same\"\nassert     check_value({1:2,2:3,3:4,4:5}, 4) == False, \"Four numbers should be same\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_value({'a':1, 'b':2}, 1) == True, \"Your function should return True if all values are same\"\nassert     check_value({'a':1, 'b':2}, 2) == False, \"Your function should return False if all values are different\"\n\n'''\nWrite a function to get the maximum number from the sequence.\n'''\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({'a':1, 'b':1, 'c':2}, 3) == False\nassert     check_value({'a':1, 'b':1, 'c':2}, 2) == True\nassert     check_value({'a':1, 'b':1, 'c':2}, 0) == False\nassert     check_value({'a':1, 'b':1, 'c':2}, 1) == False"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({'a':1,'b':1,'c':1}, 1)\nassert not     check_value({'a':1,'b':1,'c':1}, 2)\n\n\n\ndef get_pos_neg(seq):\n    '''\n    Write a function that takes a sequence as input, and returns the number of positives and negatives in the sequence.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({}, {}) == True\nassert     check_value({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == True\nassert     check_value({'a': 1, 'b': 2}, {'a': 1, 'c': 2}) == False\nassert     check_value({'a': 1, 'b': 2}, {'a': 1}) == False\nassert     check_value({'a': 1, 'b': 2}, {'a': 2}) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_value({'a': 2}, True) == True\nassert     check_value({'a': 2, 'b': 2}, True) == False\nassert     check_value({'a': 2, 'b': 2}, False) == True\nassert     check_value({'a': 2, 'b': 2, 'c': 2}, True) == True\nassert     check_value({'a': 2, 'b': 2, 'c': 2}, False) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_value({1: 1, 2: 1}, 1) == False\nassert check_value({1: 1, 2: 1}, 2) == True\nassert check_value({1: 1, 2: 2}, 1) == False\nassert check_value({1: 1, 2: 2}, 2) == False\nassert check_value({1: 1, 2: 2, 3: 3}, 1) == False\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty(dict1) == {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     drop_empty({1:1,2:2,3:3}) == {1:1,2:2,3:3}\nassert     drop_empty({}) == {}\nassert     drop_empty({1:1}) == {1:1}\nassert     drop_empty({}) == {}"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # TODO: Write your solution here\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     drop_empty({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}) == {'a':1,'c':3,'d':4,'e':5,'f':6}\nassert     drop_empty({'a':1,'b':2,'c':3,'d':4}) == {'a':1,'b':2,'c':3}\nassert     drop_empty({}) == {}\nassert     drop_empty({'a':1}) == {'a':1}\nassert     drop_empty(None) == None\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert drop_empty({\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2}\n\nassert drop_empty({\"a\": 1, \"b\": 2}) == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     drop_empty({\"0\": 1, \"\": 2}) == {\"0\": 1}\nassert     drop_empty({\"0\": 1, \"\": 2}) == {\"0\": 1}\nassert     drop_empty({\"0\": 1, \"\": 2, \"\"}) == {\"0\": 1}\n\n'''\n1) Write a function named drop_empty that takes a dictionary named dict1 and\n   a list named to_drop as arguments.\n   The function should return a new dictionary, which is the same as the one\n   passed as argument, but without any dictionary key whose value is None\n   (i.e., empty string or empty list).\n   The order of the keys in the result dictionary should not be changed.\n   If to_drop is empty, return a copy of the dictionary dict1.\n'''\ndef drop_empty(dict1, to_drop):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [2, 4, 5, 8, 10]\n    print(max_product(arr)"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product([2,3,-2,4]) == 6\nassert     max_product([-2,0,-1]) == 0\nassert     max_product([-2,3,-2,4]) == 24\nassert     max_product([0,0,0,0]) == 0\nassert     max_product([-1,0,0,0]) == 0\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product([-3,-2,-1,4,-5]) ==     0\nassert     max_product([1,2,3,4,5,6]) ==     90\nassert     max_product([-3,5,7,-8,-2,6,9,1]) ==     10"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product([1,2,3,4]) == 6, 'wrong max_product'\nassert max_product([1,2,3]) == 6, 'wrong max_product'\nassert max_product([4,5]) == 10, 'wrong max_product'\nassert max_product([3,5]) == 10, 'wrong max_product'\nassert max_product([7,10,5]) == 210, 'wrong max_product'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product([3, 6, -2, -5]) == 30\nassert     max_product([-2, -3, 4, -1]) == 24\nassert     max_product([-5, 4, -2, -3]) == 60\nassert     max_product([-1, 2, 3, -4]) == 24\nassert     max_product([-8, -5, 4, -2, -1]) == 80\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_product([3, 6, -2, -5, 7, 3]) == 6\nassert max_product([-2, -3, 4, -1, -2, 1, 5, -3]) == 24\nassert max_product([-2, -3, 4, -1, -2, 1]) == 24\nassert max_product([]) == None\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_pairwise((1, 2, 3)) == (2, 4, 6)\nassert     add_pairwise((1, 2, 3, 4)) == (3, 6, 9, 12)\nassert     add_pairwise((1, 2, 3, 4, 5)) == (2, 6, 10, 14, 16)\nassert     add_pairwise((1, 2, 3, 4, 5, 6)) == (2, 6, 10, 14, 16, 20)\nassert     add_pairwise((1, 2, 3, 4, 5, 6, 7)) == (2, 6, 10, 14, 16, 20, 22)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_pairwise((2,3,4,1)) == (2,3,4,5)\nassert     add_pairwise((2,2,2,1)) == (3,3,3,5)\nassert     add_pairwise((1,2,2,1)) == (2,3,3,5)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_pairwise(('1', '2')) == ('3', '4')\nassert     add_pairwise(('a', 'b')) == ('a', 'c')\nassert     add_pairwise(('1', '2', '3')) == ('4', '5', '6')\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise((1,2,3))    ==    (2,3,4), \"incorrect pairwise addition\"\nassert     add_pairwise((1,2,3),(4,5,6))    ==    (5,7,8), \"incorrect pairwise addition\"\nassert     add_pairwise((1,2,3),(4,5,6),(7,8,9))    ==    (8,9,10), \"incorrect pairwise addition\"\nassert     add_pairwise((1,2,3),(4,5,6),(7,8,9))    ==    (8,9,10), \"incorrect pairwise addition\"\nassert     add_pairwise((1,2,3),(4,5,6),(7,8,9),(9,8,7),(6,7,8),(3,4,5))    ==    (8,9,10), \"incorrect pairwise addition\"\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_pairwise(test_tup) == (1, 2, 3, 4, 5, 6, 7)\nassert     add_pairwise((3, 4, 5, 6)) == (3, 5, 4, 7)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntest_tup = (1, 2, 3)\nassert add_pairwise(test_tup) == (2, 4, 6)\nprint(\"Test case passed!\")"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_pairwise((1,2,3)) == (2,4,6)\nassert     add_pairwise((1,2,3)) == (3,5,7)\nassert     add_pairwise((1,2,3)) == (4,6,8)\nassert     add_pairwise((1,2,3)) == (5,7,9)\nassert     add_pairwise((1,2,3)) == (6,8,10)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_pairwise((2, 5, -3, 7, 0)) == (3, -5, 8, 0, 0)\nassert     add_pairwise((3, 3, 1, 0, 0)) == (3, 0, 1, 1, 1)\nassert     add_pairwise((-4, -9, -4, -2, -9)) == (-7, -3, -2, -7, -5)\nassert     add_pairwise((0, 1, 2, 3, 4)) == (0, 1, 3, 4, 5)\nassert     add_pairwise((9, 9, 9, 9, 9)) == (0, 9, 9, 9, 0)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise((1,2,3,4)) == (2,3,4,5)\nassert     add_pairwise((1,2,3,4,5)) == (2,3,4,5,6)\nassert     add_pairwise((1,2,3,4,5,6)) == (2,3,4,5,6,7)\nassert     add_pairwise((1,2,3,4,5,6,7)) == (2,3,4,5,6,7,8)\nassert     add_pairwise((1,2,3,4,5,6,7,8)) == (2,3,4,5,6,7,8,9)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_remainder([1,2,3,4],2) == 6\nassert find_remainder([4,6,1,2,3],4) == 0\nassert find_remainder([6,6,2,2,4],4) == 0\nassert find_remainder([3,2,2,2,4],4) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_remainder([3, 2, 6], 5) == 2\nassert     find_remainder([3, 2, 6], 7) == 3\nassert     find_remainder([3, 2, 6], 8) == 9\nassert     find_remainder([3, 2, 6], 9) == 6\nassert     find_remainder([3, 2, 6], 10) == 6\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_remainder([1,2,3,4], 10) == 2, 'Wrong output'\nassert     find_remainder([1,1,1,1], 10) == 1, 'Wrong output'\nassert     find_remainder([1,1,1,1], 1) == 1, 'Wrong output'\nassert     find_remainder([1,1,1,1], 3) == 1, 'Wrong output'\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_remainder([2,3,4,5,6], 6) == [120, 45, 30, 15, 0], \"Should return 120 as modulo 6\"\nassert     find_remainder([2,3,4,5,6], 7) == [10, 15, 30, 45, 0], \"Should return 10 as modulo 7\"\nassert     find_remainder([2,3,4,5,6], 8) == [10, 20, 30, 40, 0], \"Should return 10 as modulo 8\"\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_remainder([3, 4, 5, 2], 7) ==     [6, 0, 8, 0]\nassert     find_remainder([3, 4, 5, 2], 2) ==     [6, 0, 8, 0]\nassert     find_remainder([3, 4, 5, 2], 5) ==     [3, 0, 8, 0]\nassert     find_remainder([3, 4, 5, 2], 1) ==     [3, 0, 8, 0]\nassert     find_remainder([3, 4, 5, 2], 13) ==     [6, 0, 8, 0]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_remainder([1, 2, 3], 1) == 0\nassert     find_remainder([1, 2, 3], 2) == 8\nassert     find_remainder([1, 2, 3], 5) == 4\nassert     find_remainder([1, 2, 3], 0) == 0\nassert     find_remainder([0, 1, 2, 3], 1) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_remainder([1,2,3,4], 10) == 6, \"Wrong output for input {1,2,3,4}.\"\nassert     find_remainder([1,2,3,4], 100) == 6, \"Wrong output for input {1,2,3,4}.\"\nassert     find_remainder([1,2,3,4], 1000) == 6, \"Wrong output for input {1,2,3,4}.\"\nassert     find_remainder([1,2,3,4], 10000) == 6, \"Wrong output for input {1,2,3,4}.\"\nassert     find_remainder([1,2,3,4], 100000) == 6, \"Wrong output for input {1,2,3,4}.\"\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_remainder([0, 1], 4) == 0\nassert     find_remainder([0, 1], 5) == 0\nassert     find_remainder([1, 1], 4) == 1\nassert     find_remainder([1, 1], 5) == 1\nassert     find_remainder([1, 1], 100) == 1\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([1,2,3], 0)     == 0\nassert     find_remainder([1,2,3], 1)     == 6\nassert     find_remainder([1,2,3], 2)     == 24\nassert     find_remainder([1,2,3], 3)     == 6\nassert     find_remainder([1,2,3], 4)     == 0\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert check_Consecutive([1, 2, 3, 5, 6, 7, 9, 10, 11]) == False\nassert check_Consecutive([1, 2, 3, 5, 6, 7]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive(lst) == True, \"Not a consecutive list\"\nassert     check_Consecutive([5, 2, 4, 1, 3, 8, 5]) == False, \"not a consecutive list\"\n\nprint(\"The output of check_Consecutive is {}\".format(check_Consecutive(lst)))\n\n\n'''\nWrite a python function to find the first largest element in a list.\n'''\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_Consecutive([1,2,3,4]) == True, \"1-2-3-4 should be True\"\nassert     check_Consecutive([1,2,3,4,5]) == False, \"1-2-3-4-5 should be False\"\nassert     check_Consecutive([1,2,3,4,4]) == True, \"1-2-3-4-4 should be True\"\nassert     check_Consecutive([1,2,3,4,4,5]) == False, \"1-2-3-4-4-5 should be False\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 6, 9, 10, 11, 12, 13]) \nassert     check_Consecutive([1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 15]) == False\nassert     check_Consecutive([1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 12, 13]) == True\nassert     check_Consecutive([1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15]) == False\nassert     check_Consecutive([1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1, 2, 3, 4]) == True, \"should return True\"\nassert     check_Consecutive([1, 3, 4, 4]) == False, \"should return False\"\nassert     check_Consecutive([1, 1, 1]) == True, \"should return True\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_Consecutive([-2, -3, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10]) == True\nassert     check_Consecutive([-2, -3, 1, 2, 3, 4, 5, 6, 7, 8, 10]) == True\nassert     check_Consecutive([-2, -3, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10]) == True\nassert     check_Consecutive([-2, -3, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12]) == True\nassert     check_Consecutive([-2, -3, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True, \"1, 2, 3, 4, 5\"\nassert     check_Consecutive([1, 2, 3, 4, 6, 7]) == False, \"1, 2, 3, 4, 6, 7\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True, \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\"\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection((1, 2, 3), (2, 3, 4))     == (2, 3)\nassert     tuple_intersection((2, 3, 4), (1, 2, 3))     == (2, 3)\nassert     tuple_intersection((1, 2, 3), (4, 2, 3))     == (2, 3)\nassert     tuple_intersection((4, 2, 3), (1, 2, 3))     == ()\nassert     tuple_intersection((1, 2, 3), (1, 2, 4))     == ()\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection([(1, 2), (3, 5), (4, 9)], [(2, 2), (4, 8), (7, 9), (8, 2), (9, 9)]) == [(2, 2), (4, 8), (7, 9), (8, 2)]\nassert     tuple_intersection([(1, 2), (3, 5), (4, 9)], [(2, 2), (4, 8), (7, 9)]) == [(2, 2)]\nassert     tuple_intersection([(1, 2), (3, 5), (4, 9)], [(2, 2), (3, 5), (4, 9), (5, 5), (5, 5), (6, 6)]) == []\nassert tuple_intersection([(1, 2), (3, 5), (4, 9)], [(2, 2), (3, 5), (4, 9)]) == [(2, 2), (3, 5), (4, 9)]\nassert tuple_intersection([(1, 2), (3, 5), (4, 9)], [(2, 2), (4, 8), (7, 9), (8, 2)]) == [(2, 2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection(('a', 'b', 'c'), ('a', 'b', 'd')) == ('a',)\nassert     tuple_intersection(('a', 'b', 'c'), ('a', 'b', 'c')) == ('a', 'b', 'c')\nassert     tuple_intersection(('a', 'b', 'c'), ('a', 'c', 'b')) == ('a',)\nassert     tuple_intersection(('a', 'b', 'c'), ('a', 'd', 'b')) == ()\nassert     tuple_intersection(('a', 'b', 'c'), ('d', 'b', 'c')) == ()\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection([1,3,5,7,9], [4,5,8]) == (5, 7, 9)\nassert tuple_intersection([1,3,5,7,9], [4,5,8,3]) == (3, 4)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection([(1,2),(3,4),(5,6)], [(1,2),(3,4),(5,6),(7,8)]) == [(1, 2), (3, 4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6)], [(1,2),(3,4),(5,6),(7,8)]) == [(1, 2), (3, 4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6)], [(1,2),(3,4),(5,6),(7,8)]) == [(1, 2), (3, 4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6)], [(1,2),(3,4),(5,6),(7,8)]) == [(1, 2), (3, 4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6)], [(1,2),(3,4),(5,6),(7,8)]) == [(1, 2), (3, 4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection(tuple_list1, tuple_list2) == [(1,), (3,)]\nassert tuple_intersection(tuple_list2, tuple_list1) == [(1,), (3,)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection([(1,2), (3,4)], [(1,2), (2,3), (3,4)]) == [(1,2), (2,3)]\nassert     tuple_intersection([(1,2), (3,4)], [(2,3), (1,2)]) == [(1,2), (2,3)]\nassert tuple_intersection([(1,2), (3,4)], [(1,2), (2,3)]) == [(1,2)]\nassert tuple_intersection([(1,2), (3,4)], [(1,2), (1,3), (2,3)]) == [(1,2)]\nassert tuple_intersection([(1,2), (3,4)], [(1,2), (1,3)]) == [(1,2), (1,3)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntest_data1 = [(1,2),(4,5),(6,7)]\ntest_data2 = [(2,3),(6,7),(10,12)]\nassert tuple_intersection(test_data1,test_data2) == [(2,3),(6,7)]\nassert tuple_intersection(test_data2,test_data1) == [(2,3),(6,7)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([(1,2),(2,3),(3,4),(4,5)], [(3,4),(5,6),(6,7),(7,8)]) == [(3,4)]\nassert     tuple_intersection([(1,2),(2,3),(3,4),(4,5)], [(3,4),(5,6),(6,7),(7,8),(7,8)]) == [(7,8)]\nassert     tuple_intersection([(1,2),(2,3),(3,4),(4,5)], [(3,4),(5,6),(6,7),(7,8),(3,4)]) == [(3,4)]\nassert     tuple_intersection([(1,2),(2,3),(3,4),(4,5)], [(3,4),(5,6),(6,7),(7,8),(7,8),(3,4),(5,6)]) == [(7,8), (3,4)]\nassert     tuple_intersection([(1,2),(2,3),(3,4),(4,5)], [(3,4),(5,6),(6,7),(7,8),(7,8),(3,4),(3,4)]) == [(7,8), (3,4)]\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    replace_char(\"I am a student\", \"m\", \"n\") == \"I am n a student\", \"replace_char\"\n    print(\"Test passed\")\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_char('hello world', 'o', '0') == '0h0l0 l0r0 world'\nassert replace_char('hello world', 'h', 'a') == 'aello world'\nassert replace_char('hello world', 'l', 'a') == 'bello world'\nassert replace_char('hello world', 'w', 'a') == 'h0ello world'\nassert replace_char('hello world', 'o', 'a') == 'h0ello world'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nreplace_char(\"The quick brown fox jumps over the lazy dog\",'', '.') == 'The..s quick brown. The dog jumps over the lazy. dog.'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_char(\"abc\",'b','x')==\"xac\"\nassert     replace_char(\"abc\",\"x\",\"x\")==\"abc\"\nassert     replace_char(\"xyz\",'x','x')==\"xyz\"\nassert     replace_char(\"xyz\",\"z\",\"z\")==\"xyz\"\nassert     replace_char(\"xyz\",\"z\",\"z\")==\"xyz\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char(\"heeeelllllllooo\",\"l\",\"z\") == \"heeeelzzllllooo\", \"Should be 'heeeelzzllllooo'\"\nassert     replace_char(\"aaaaaaaaaaaaaaa\",\"a\",\"z\") == \"aaaaaaaaaaaaaaazzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndict1 = {\n    1: 2,\n    2: 1,\n    3: 4\n}\nsort_counter(dict1)\nassert dict1 == {1: 2, 2: 1, 3: 4}\n\ndict1 = {\n    1: 2,\n    2: 1,\n    3: 4\n}\ndict1 = sort_counter(dict1)\nassert dict1 == {1: 2, 2: 1, 3: 4}"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_counter({1:2, 2:1}) == {1:1, 2:2}\nassert     sort_counter({2:1, 1:2}) == {1:2, 2:1}\nassert     sort_counter({2:1, 1:2, 3:3, 4:4}) == {1:2, 2:1, 3:3, 4:4}\nassert     sort_counter({1:2, 2:1, 3:3, 4:4, 5:5}) == {1:2, 2:1, 3:3, 4:4, 5:5}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({'a':3, 'b':2, 'c':1}) == {'a':3, 'b':2, 'c':1}\nassert     sort_counter({'b':2, 'c':1, 'a':3}) == {'a':3, 'b':2, 'c':1}\nassert     sort_counter({'a':3, 'c':1, 'b':2}) == {'a':3, 'b':2, 'c':1}\nassert     sort_counter({'a':3, 'b':2, 'c':1}) == {'a':3, 'b':2, 'c':1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_counter({\"D\": 2, \"A\": 2, \"B\": 1, \"C\": 1}) == {\"D\": 2, \"A\": 2, \"B\": 1, \"C\": 1}\nassert     sort_counter({\"A\": 1, \"B\": 1, \"D\": 2, \"C\": 3, \"E\": 2}) == {\"D\": 2, \"A\": 1, \"B\": 1, \"C\": 3, \"E\": 2}\nassert     sort_counter({\"A\": 1, \"B\": 2, \"C\": 2, \"D\": 2}) == {\"A\": 1, \"B\": 2, \"C\": 2, \"D\": 2}\nassert     sort_counter({\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 2}) == {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 2}\nassert     sort_counter({\"A\": 2, \"B\": 2, \"C\": 3, \"D\": 2}) == {\"A\": 2, \"B\": 2, \"C\": 3, \"D\": 2}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({1: 5, 2: 3, 4: 2, 3: 4, 5: 1}) == \\\n{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({1: 10, 2: 3, 5: 1, 6: 5, 0: 2}) == {0: 2, 1: 10, 2: 3, 5: 1, 6: 5}\nassert     sort_counter({}) == {}\nassert     sort_counter({0: 1}) == {0: 1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_counter({\"a\": 3, \"b\": 2, \"c\": 1}) == {\"a\": 3, \"b\": 2, \"c\": 1}\nassert     sort_counter({\"a\": 3, \"c\": 1, \"b\": 2}) == {\"a\": 3, \"b\": 2, \"c\": 1}\nassert     sort_counter({\"a\": 1, \"c\": 2, \"b\": 3}) == {\"a\": 1, \"b\": 3, \"c\": 2}\nassert     sort_counter({\"a\": 2, \"b\": 3, \"c\": 1}) == {\"a\": 2, \"b\": 3, \"c\": 1}\nassert     sort_counter({\"a\": 1, \"b\": 2, \"c\": 2}) == {\"a\": 1, \"b\": 2, \"c\": 2}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({\"a\": 4, \"b\": 4, \"c\": 3, \"d\": 2}) ==     [(\"b\", 4), (\"c\", 3), (\"a\", 4), (\"d\", 2)]\nassert     sort_counter({\"a\": 4, \"b\": 3, \"c\": 2, \"d\": 1}) ==     [(\"a\", 4), (\"b\", 3), (\"c\", 2), (\"d\", 1)]\nassert     sort_counter({\"a\": 3, \"b\": 1, \"c\": 2, \"d\": 2, \"e\": 4, \"f\": 5}) ==     [(\"a\", 3), (\"b\", 1), (\"c\", 2), (\"d\", 2), (\"e\", 4), (\"f\", 5)]\n\ndef find_key_that_occurs_most_often(word_counts):\n    '''\n    Write a function to return the key which occurs in word_counts the most often.\n    If there is a tie, return the smallest key.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nProblem\n---\nFor a given list of prices, we need to return the largest N numbers in the list.\n\nExample:\n\nprices = [2,2,2,2,1,1,1,2,3,3]\n\nSolution:\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_sum([1,-2,3,4]) == -1, 'Not passing the test'\nassert     big_sum([5,5,5,5,5,5]) == 15, 'Not passing the test'\nassert     big_sum([-6,-8,-12,-2,-4,-10]) == 14, 'Not passing the test'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_sum([1,2,3,4,5]) == 10, \"the sum is incorrect\"\nassert big_sum([4,5,6,7,8]) == 12, \"the sum is incorrect\"\nassert big_sum([7,8,9,0]) == 13, \"the sum is incorrect\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_sum([1,2,3,4,5]) == 15, 'WRONG'\nassert big_sum([1,-2,-3,-4,-5]) == -1, 'WRONG'\nassert big_sum([-1,-2,-3,-4,-5]) == -1, 'WRONG'\nassert big_sum([-100,1,2,3,4,5]) == -100, 'WRONG'\nassert big_sum([-1000,100,2,3,4,5]) == -1000, 'WRONG'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_sum([-1, -2, -3, -4, -5]) == -1, 'This should return -1'\nassert     big_sum([1, 2, 3, 4, 5]) == 10, 'This should return 10'\nassert     big_sum([1]) == 1, 'This should return 1'\nassert     big_sum([-1, -2, -3, -4, -5, -6]) == -6, 'This should return -6'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nbig_sum([-1, -3, 4, -5]) == 0\nprint('Test passed')"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_sum([1,2,-2,-4,-5,7,4]) == 1 + -2 + 4 + 7 == 5, \"Incorrect result for big_sum\"\n\n'''\nWrite a python function to find the difference between the second largest and second smallest element of a given array.\n'''"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_sum([1,2,3,4,5,6]) == 15, \"Test Failed\"\nassert     big_sum([-1,2,3,4,5,6]) == 15, \"Test Failed\"\nassert     big_sum([1,2,3,4,5,6]) == 15, \"Test Failed\"\nassert     big_sum([-1,-2,-3,-4,-5,-6]) == -15, \"Test Failed\"\nassert     big_sum([]) == 0, \"Test Failed\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert big_sum([1,2,3]) == 1+2+3\nassert big_sum([1,2,-2,0,10]) == 1+2+0+10\nassert big_sum([1,-3,-2,-5]) == 1+-3+-2+-5\nassert big_sum([1,-2,-3,-4]) == 1+-2+-3+-4\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower('c') == True, 'First'\nassert     is_lower('D') == False, 'Second'\nassert     is_lower('A') == True, 'Third'\nassert     is_lower('c') == True, 'Fourth'\nassert     is_lower('H') == False, 'Fifth'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_lower('UPPERCASE') == False, \"is_lower function should return False for uppercase\"\nassert     is_lower('lowercase') == True, \"is_lower function should return True for lowercase\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_lower('Hello World') == False, 'is_lower fails'\nassert     is_lower('hello world') == True, 'is_lower fails'\nassert     is_lower('Hello World') == False, 'is_lower fails'\nassert     is_lower('HELLO WORLD') == True, 'is_lower fails'\nassert     is_lower('HELLO WORLD') == False, 'is_lower fails'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_lower(\"Hello\") == \"hello\"\nassert     is_lower(\"a\") == \"a\"\nassert     is_lower(\"\") == \"\"\nassert     is_lower(\"H\") == \"h\"\nassert     is_lower(\"HELLO\") == \"hello\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"IS_LOWER is working as expected\")\nprint(\"----\")\n\nis_lower(\"A\") == False\nis_lower(\"a\") == True\nis_lower(\"\") == True\nis_lower(123) == False\nis_lower(\"ABC\") == True\nis_lower(\"ABCD\") == False\nis_lower(\"ABCD$\") == False\nis_lower(\"ABCD$A\") == False\nis_lower(\"ABCD_ABC\") == False\nis_lower(\"ABCD-ABC\") == False\nis_lower(\"ABCD--ABC\") == False\nis_lower(\"ABCD---ABC\") == False\nis_lower(\"ABCD---ABC_\") == False\nis_lower(\"ABCD---ABC_.\") == False\nis_lower(\"ABCD-ABC\") == True\nis_lower(\"ABCD-ABC_\") == True\nis_lower(\"ABCD-ABC_.\") == True\nis_lower(\"ABCD-ABC.\") == True\nis_lower(\"ABCD--ABC\") == True\nis_lower(\"ABCD--ABC_\") == True\nis_lower(\"ABCD--ABC_.\") == True\nis_lower(\"ABCD--ABC.\") == True\nis_lower(\"ABCD---ABC\") == True\nis_lower(\"ABCD---ABC_\") == True\nis_lower(\"ABCD---ABC_.\") == True\nis_lower(\"ABCD---ABC.\") == True\nis_lower(\"ABCD---ABC_$\") == True\nis_lower(\"ABCD---ABC_$_\") == True\nis_lower(\"ABCD---ABC_$_.\") == True\nis_lower(\"ABCD---ABC_$_.\") == True\nis_lower(\"ABCD---ABC_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_.\") == True\nis_lower(\"ABCD---ABC_$_$_.\") == True\nis_lower(\"ABCD---ABC_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_.\") == True\nis_lower(\"ABCD---ABC_$_$_$_.\") == True\nis_lower(\"ABCD---ABC_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$_$\") == True\nis_lower(\"ABCD---ABC_$_$_$_$_$_$_$_"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_lower('BANANA') == True, '1st incorrect result'\nassert     is_lower('banana') == True, '2nd incorrect result'\nassert     is_lower('BANANA1') == False, '3rd incorrect result'\n\ndef is_present(string, element):\n    '''\n    Write a python function to check whether a given string contains a given element or not.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower('Ala ma kota') == True\nassert     is_lower('alMa kOTa') == True\nassert     is_lower('Ama kota') == False\nassert     is_lower('amKotA') == False\nassert     is_lower('Ama Kota') == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_lower('PyThon') == True, 'Python is not in lowercase'\nassert     is_lower('python') == False, 'Python is not in lowercase'\nassert     is_lower('Python') == True, 'Python is not in lowercase'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower('CamelCase') == True, 'Expected True'\nassert     is_lower('gELLOW') == False, 'Expected False'\n\nprint('Testing is_lower function...')\nprint('Expected True')\nprint('Actual False')\nprint('')\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower('python') == True\nassert     is_lower('PYTHON') == False\n\ndef is_lower_2(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_lowercase(\"aeiou\") == \"aei\"\nassert     remove_lowercase(\"test\") == \"test\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase(\"test\") == \"test\"\nassert     remove_lowercase(\"Test\") == \"Test\"\nassert     remove_lowercase(\"Test1\") == \"Test1\"\nassert     remove_lowercase(\"test2\") == \"test2\"\nassert     remove_lowercase(\"\") == \"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase( 'abcd' ) == 'abcd'\nassert     remove_lowercase( 'abcdabc' ) == 'abcdabc'\nassert     remove_lowercase( 'abcabc' ) == 'abcabc'\nassert     remove_lowercase( 'ABCABC' ) == 'ABCABC'\nassert     remove_lowercase( 'ABC ABC' ) == 'ABC ABC'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_lowercase_iterative(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_list = list()\n    for i in range(len(str1)):\n        if str1[i].islower():\n            lowercase_list.append(str1[i])\n    new_str = ''.join(lowercase_list)\n    return new_str\n    "
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase('str') =='str', 'case 1'\nassert     remove_lowercase('STr') =='str', 'case 2'\nassert     remove_lowercase('STR') =='str', 'case 3'\nassert     remove_lowercase('sTR') =='str', 'case 4'\nassert     remove_lowercase('str') =='str', 'case 5'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef remove_brackets(str1):\n    '''\n    Write a function to remove all single and double brackets from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_lowercase(\"lower case\") == \"lower case\"\nassert     remove_lowercase(\"UPPER CASE\") == \"UPPER CASE\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"A lower case\") == \"A lower case\"\nassert     remove_lowercase(\"A Upper Case\") == \"A Upper Case\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"a\") == \"a\"\nassert     remove_lowercase(\"A\") == \"a\"\nassert     remove_lowercase(\"aA\") == \"aA\"\nassert     remove_lowercase(\"aaA\") == \"aaA\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_lowercase('camelCase') == 'camel'\nassert     remove_lowercase('CamelCase') == 'Camel'\nassert     remove_lowercase('CAMELcASE') == 'Camel'\nassert     remove_lowercase('camelCase_') == 'camel'\nassert     remove_lowercase('CamelCase_') == 'Camel'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_Digit(13) == 1\nassert     first_Digit(0) == 0\nassert     first_Digit(-5) == -1\nassert     first_Digit(-1000) == -1"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_Digit(10)     == 1\nassert     first_Digit(12)     == 1\nassert     first_Digit(10)    == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_Digit(1) == 1\nassert     first_Digit(12) == 1\nassert     first_Digit(1234) == 1\nassert     first_Digit(1234a) == 1\nassert     first_Digit(-1234) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_Digit(0) == '0' \nassert     first_Digit(12) == '1'\nassert     first_Digit(123) == '3'\nassert     first_Digit(321) == '2'\nassert     first_Digit(12345678) == '8'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_Digit(2) == 1\nassert     first_Digit(123456789) == 1\nassert     first_Digit(9876) == 0\nassert     first_Digit(10) == 1\nassert     first_Digit(123456789) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(0) == 0, \"First digit is wrong\"\nassert     first_Digit(1) == 1, \"First digit is wrong\"\nassert     first_Digit(10) == 1, \"First digit is wrong\"\nassert     first_Digit(1000) == 1, \"First digit is wrong\"\nassert     first_Digit(9000) == 9, \"First digit is wrong\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert first_Digit(333) == 0\nassert first_Digit(86464) == 8\nassert first_Digit(3601) == 1\nassert first_Digit(9) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_Digit(9)    == 1\nassert     first_Digit(81)    == 8\nassert     first_Digit(300)    == 3\nassert     first_Digit(150)    == 0\nassert     first_Digit(1)    == 1\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1,2,3,4,5]) == [1,3,5]\nassert     Split([2,4,5,6,8]) == [2,4,6,8]\nassert     Split([0,2,4,6,8]) == [0,2,4,6,8]\nassert     Split([10]) == [10]\nassert     Split([]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert Split([1,2,3,4,5]) == [1,3,5]\nassert Split([1,2,4,5]) == [1,3,5]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([1,2,3,4,5]) == [1,3,5]\nassert     Split([1,2,3,4,5,6]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7,8,9]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     Split([2,4,6,8,10]) == [2,4,6,8,10]\nassert     Split([]) == []\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10]\nassert     Split([1,1,1]) == [1]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([1, 2, 3, 4]) == [1, 3, 5],'returns the odd numbers'\nassert     Split([1, 1, 1, 2, 2, 3, 3, 4]) == [1, 3, 5],'returns the odd numbers'\nassert     Split([]) == [],'returns empty list'"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([3,4,7,9,12,18,35]) == [3,7,9]\nassert     Split([5,6,1,2,4,5]) == [5,1,2,4]\nassert     Split([4,1,2,3]) == [4,1,2,3]\nassert     Split([3,1]) == [3,1]\nassert     Split([]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10]) ==[1,3,5,7,9]\nassert    Split([1,2,3,4,5,6,7,8,9]) ==[1,3,5,7,9]\nassert    Split([]) == []\n\n\ndef Multiply(list): \n    '''\n    Write a python function which takes a list of integers and returns the result of multiplying each element by the corresponding element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7,9], \"Wrong output\""
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     difference(10) == 9, f'For n = 10, the output should be 9 but received {difference(10)}'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     difference(0) == 0\nassert     difference(1) == 1\nassert     difference(2) == 1\nassert     difference(3) == 1\nassert     difference(4) == 2\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_squares(a,b) :\n    '''\n    Write a python function to find the square of the sum of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    for i in range(11):\n        print(difference(i))"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     difference(n = 3) == (1**3 + 2**3 + 3**3) - (1**3 + 2**3 + 4**3)\nassert     difference(n = 4) == (1**4 + 2**4 + 3**4 + 4**4) - (1**4 + 2**4 + 3**4 + 4**4)\nassert     difference(n = 5) == (1**5 + 2**5 + 3**5 + 4**5 + 5**5) - (1**5 + 2**5 + 3**5 + 4**5 + 5**5)\n\nprint(\"Your function is correct.\")\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndifference(1) == 0\nassert difference(2) == 1\nassert difference(3) == 1\nassert difference(4) == 1\nassert difference(5) == 2\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndifference(6) == 108\ndifference(7) == 274\ndifference(8) == 404\n\ndifference(10) == 564 \n\ndifference(20) == 976\n\ndifference(30) == 1458\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('check your answer')"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair([1, 2, 3], 3) == True\nassert     find_Odd_Pair([1, 2, 3], 4) == False\nassert     find_Odd_Pair([1, 2, 3, 4, 5], 3) == True\nassert     find_Odd_Pair([1, 2, 3, 4, 5, 6], 5) == True\nassert     find_Odd_Pair([1, 2, 3, 4, 5, 6], 6) == True\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 2\nassert     find_Odd_Pair([3,4,6,7],4) == 0\nassert     find_Odd_Pair([1,2,3,4],5) == 1\nassert     find_Odd_Pair([1,2,3,4],10) == 1\nassert     find_Odd_Pair([1,2,3,4],6) == 2\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([10, 11, 4, 13, 5, 2], 7) == 2\nassert     find_Odd_Pair([12, 13, 13, 6], 7) == 2\nassert     find_Odd_Pair([11, 10, 9], 7) == 0\nassert     find_Odd_Pair([11, 10, 9, 5], 7) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Odd_Pair([10, 20, 30, 40, 50], 5) == 1\nassert     find_Odd_Pair([10, 20, 30, 40, 50], 3) == 2\nassert     find_Odd_Pair([10, 20, 30, 40, 50], 7) == 3\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Odd_Pair(1,3) == 2\nassert     find_Odd_Pair(1,4) == 3\nassert     find_Odd_Pair(4,3) == 1\nassert     find_Odd_Pair(4,4) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_Odd_Pair([1,2,3,4,5,6,7,8,9,10],10) == 3, \"Wrong Answer\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    A = list(map(int,input().split()))\n    N = len(A)\n    find_Odd_Pair(A,N)"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair(7,4) == 1, \"find_Odd_Pair incorrect\"\nassert     find_Odd_Pair(2,1) == 0, \"find_Odd_Pair incorrect\"\nassert     find_Odd_Pair(3,2) == 0, \"find_Odd_Pair incorrect\"\nassert     find_Odd_Pair(5,3) == 1, \"find_Odd_Pair incorrect\"\nassert     find_Odd_Pair(9,4) == 2, \"find_Odd_Pair incorrect\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 0\nassert     find_Odd_Pair([1,2,3,4],5) == 1\nassert     find_Odd_Pair([1,2,3,4],6) == 0\nassert     find_Odd_Pair([1,2,3,4],7) == 1\nassert     find_Odd_Pair([1,2,3,4],8) == 0\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string(\"Hi there!\") == \"I THO YOU\"\nassert     toggle_string(\"Thou and I\") == \"TThO uThn\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     toggle_string(\"Hi\") == \"i\"\nassert     toggle_string(\"UPPER\") == \"lower\"\nassert     toggle_string(\"lower\") == \"upper\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string('Hello World') == 'hELLO wORLD'\nassert     toggle_string('HELLO WORLD') == 'hEllO wOrLD'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD'\nassert     toggle_string('HELLO WORLD') == 'hELLO wOrLD'\nassert     toggle_string('HELLO WORLD') == 'hELLO wOrLD'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string(\"String with spaces\") == \"sTrInG wItH SpACES\", \\\n        \"toggle_string('String with spaces')!='sTrInG wItH SpACES'\"\nassert     toggle_string(\"String\") == \"sTrInG\", \\\n        \"toggle_string('String')!='sTrInG'\"\nassert     toggle_string(\"\") == \"\", \\\n        \"toggle_string('')!= ''\"\nassert     toggle_string(\"a\") == \"a\", \\\n        \"toggle_string('a')!= 'a'\"\n\ndef find_substring(string, sub):\n    '''\n    Write a function to find and return the index of the first occurrence of substring in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     toggle_string(\"wOriNg\") == \"WOriNg\", \"Wrong result\"\nassert     toggle_string(\"wOrInG\") == \"wOrInG\", \"Wrong result\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     toggle_string(\"String\") == \"sTRING\", \"Should be'sTRING'\"\nassert     toggle_string(\"Hello\") == \"hELLO\", \"Should be 'hELLO'\"\nassert     toggle_string(\"PyThon\") == \"pYthON\", \"Should be 'pYTHON'\"\nassert     toggle_string(\"hello\") == \"OLLl\", \"Should be 'OLLl'\""
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string(\"Case\") == \"CASE\"\nassert     toggle_string(\"dog\") == \"DOG\"\nassert     toggle_string(\"c\") == \"c\"\nassert     toggle_string(\"\") == \"\"\nassert     toggle_string(\"\") == \"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD'\nassert     toggle_string('hello world') == 'hELLO wORLD'\nassert     toggle_string('HELLO WORLD!') == 'hELLO wORLD!'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     toggle_string(\"Python\") == \"pYTHON\"\nassert     toggle_string(\"UPPER\") == \"lower\"\nassert     toggle_string(\"case\") == \"upper\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string(\"hi\") == \"ih\"\nassert     toggle_string(\"HElLo\") == \"hEllO\"\nassert     toggle_string(\"HeLLo\") == \"hEllO\"\nassert     toggle_string(\"hello\") == \"elLo\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(100, 200) == 5, 'Test 0 failed'\nassert     digit_distance_nums(300, 500) == 25, 'Test 1 failed'\nassert     digit_distance_nums(500, 100) == 10, 'Test 2 failed'\n\nprint('All tests passed')\n\n'''\nTest Question 1\n'''"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(123, 423) == 1, 'Sum of per-digit difference for numbers 123 and 423 is wrong'\nassert     digit_distance_nums(123, 124) == 1, 'Sum of per-digit difference for numbers 123 and 124 is wrong'\nassert     digit_distance_nums(123, 12) == 2, 'Sum of per-digit difference for numbers 123 and 12 is wrong'\nassert     digit_distance_nums(124, 12) == 2, 'Sum of per-digit difference for numbers 124 and 12 is wrong'\nassert     digit_distance_nums(123, 123) == 0, 'Sum of per-digit difference for numbers 123 and 123 is wrong'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(123, 45) == 0, \"Expected: 0\"\nassert     digit_distance_nums(1, 1) == 0, \"Expected: 0\"\nassert     digit_distance_nums(0, 0) == 0, \"Expected: 0\"\nassert     digit_distance_nums(-1, 1) == 1, \"Expected: 1\"\nassert     digit_distance_nums(-8, -6) == 6, \"Expected: 6\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(46,77) == 7\nassert     digit_distance_nums(7,4) == 5\nassert     digit_distance_nums(2,4) == 2\nassert     digit_distance_nums(1,2) == 1\nassert     digit_distance_nums(2,2) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digit_distance_nums(12345678, 12345678) == 8\nassert     digit_distance_nums(12345678, 12345667) == 5\n\n'''\nQ.31 Write a Python function to find the smallest number from a list of numbers.\n'''\ndef smallest_nums(n1, n2, n3):\n    '''\n    Write a python function to find the smallest number from a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(12, 45) == 9\nassert     digit_distance_nums(1, 11) == 1\nassert     digit_distance_nums(49, 50) == -5\nassert     digit_distance_nums(14, 5) == 10\nassert     digit_distance_nums(20, 18) == -4\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(112, 1112) == 10\nassert     digit_distance_nums(10, 10) == 0\nassert     digit_distance_nums(100, 101) == 99\nassert     digit_distance_nums(11, 11) == 0\nassert     digit_distance_nums(30, 40) == 10\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(2, 4) == 5\nassert     digit_distance_nums(4, 4) == 0\nassert     digit_distance_nums(7, 5) == 2\nassert     digit_distance_nums(0, 1) == 1\nassert     digit_distance_nums(2, 4) == 5\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digit_distance_nums(3, 4) == 1\nassert     digit_distance_nums(3, 5) == 2\nassert     digit_distance_nums(3, 6) == 3\nassert     digit_distance_nums(3, 7) == 4\nassert     digit_distance_nums(3, 8) == 5\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"Pass\" if (0 == max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7)) else \"Fail\")\nassert \nprint(\"Pass\" if (0 == max_sub_array_sum([1], 1)) else \"Fail\")\nassert \nprint(\"Pass\" if (0 == max_sub_array_sum([1, 5, -2], 3)) else \"Fail\")\nassert \nprint(\"Pass\" if (9 == max_sub_array_sum([1, 2, 3, 4, 5], 5)) else \"Fail\")\nassert \nprint(\"Pass\" if (9 == max_sub_array_sum([-1, -2, -3], 5)) else \"Fail\")\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert max_sub_array_sum([1,2,3,4,5], 5) == 10\nassert max_sub_array_sum([1,2,3,4,5,6], 5) == 10\nassert max_sub_array_sum([-1,-2,-3,-4,-5], 5) == -1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert     max_sub_array_sum([1, 2], 1) == 2\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 8) == 11\nassert     max_sub_array_sum([2, -1, -3, 4, -1, 2, 1, -5, 4], 8) == 10\nassert     max_sub_array_sum([2, -1, -3, 4, -1, 2, 1, -5, 4], 0) == 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 6) == 6\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 5) == 5\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 4) == 8\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3) == 9\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2) == 6\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\n2. Find the largest length of sublist which has sum less than or equal to given value.\n'''\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum([3, 4, -3, 1, 2, -2, 4, 5], 8) == 6, 'Invalid Test Case'\nassert     max_sub_array_sum([-3, 4, -3, 1, 2, -2, 4, 5], 8) == 6, 'Invalid Test Case'\nassert     max_sub_array_sum([-3, 4, -3, 1, 2, -2, 4, 5], 8) == 6, 'Invalid Test Case'\nassert     max_sub_array_sum([-3, 4, -3, 1, 2, -2, 4, 5], 8) == 6, 'Invalid Test Case'\nassert     max_sub_array_sum([-3, 4, -3, 1, 2, -2, 4, 5], 8) == 6, 'Invalid Test Case'\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements(test_tup1, test_tup2) == union_elements(test_tup3, test_tup4) == (True, \"tuple 1 is parent of tuple 2\")\nprint(\"Union of tuples: \", union_elements(test_tup1, test_tup2))\nassert union_elements(test_tup1, test_tup2) == union_elements(test_tup3, test_tup4) == (True, \"tuple 1 is parent of tuple 2\")\nprint(\"Union of tuples: \", union_elements(test_tup1, test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     union_elements((1,3,5),(2,4,6)) == (1,2,3,4,5,6)\nassert     union_elements((2,4,6),(1,3,5)) == (1,2,3,4,5,6)\nassert     union_elements((1,3,5),(6,4,2)) == (1,2,3,4,5,6)\nassert     union_elements((6,4,2),(1,3,5)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     union_elements(('a','b'),('c','d')) == (('a','b'),('c','d'))\nassert     union_elements(('a','c'),('b','d')) == (('a','b'),('c','d'))\nassert     union_elements(('a','d'),('b','c')) == (('a','b'),('c','d'))\nassert     union_elements(('a','d'),('b','c')) == (('a','b'),('c','d'))\nprint(\"correct\")\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1, 2, 3, 4, 5), (2, 5, 9)) == (1, 2, 3, 4, 5, 9)\nassert union_elements((1, 2, 3), (2, 5, 9)) == (1, 2, 3, 5, 9)\nassert union_elements((1,), (2, 5, 9)) == (1, 2, 5, 9)\nassert union_elements((), ()) == ()\n\ndef all_unique(test_tup):\n    '''\n    Write a function to check whether all the elements in a given tuple are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(union_elements((10, 20), (30, 40)))\n\n\ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1,2,3,4),(3,4,5,6))==(1,2,3,4,5,6)\nassert     union_elements((1,2,3,4),(3,4,5,6,8))==(1,2,3,4,5,6,8)\nassert     union_elements((1,2,3,4,5),(2,3,4,5,6))==(1,2,3,4,5,6)\nprint(\"Test case passed!\")\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements((1,2,3,4,5,6,7), (1,2,3,4,5)) == (1,2,3,4,5,6,7)\nassert     union_elements((1,2), (2,3,4)) == (1,2,3,4)\nassert     union_elements((1,2), (3,4,5)) == (1,2,3,4,5)\nassert     union_elements((1,2), (2,2,3,3,3,4,4,4,5,5)) == (1,2,2,3,3,4,4,5)\nassert     union_elements((), (1,2,3,4)) == (1,2,3,4)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(Find_Max_Length([[1,3],2,3,4,4,5,6,7,8,9])) == 5\nassert \nprint(Find_Max_Length([[1,3],[2],[3]])) == 3\nassert \nprint(Find_Max_Length([[1,3,5,7],[2,4,6,8],[3,4,5]])) == 7\nassert \nprint(Find_Max_Length([[1,3,5,7],[2,4,6,8],[3,4,5,5]])) == "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([[]])==0\nassert     Find_Max_Length([[0],[]])==0\nassert     Find_Max_Length([[1,2,3],[],[1,2,3]])==4\nassert     Find_Max_Length([[1,2,3],[4,5,6],[1,2,3]])==5\nassert     Find_Max_Length([[1,2,3,4,5],[],[1,2,3,4,5]])==5\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max_Length([]) == 0, \"One element list\"\nassert     Find_Max_Length([1]) == 1, \"One element list\"\nassert     Find_Max_Length([1, 2, 3]) == 3, \"Three elements list\"\nassert     Find_Max_Length([1, 2, 3, 4]) == 4, \"Four elements list\"\nassert     Find_Max_Length([1, 2, 3, 4, 5, 6]) == 6, \"Five elements list\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([10, 8, 2, 3, 9]) == 5, \"10, 8, 2, 3, 9\"\nassert     Find_Max_Length([]) == 0, \"\"\nassert     Find_Max_Length([-1, -2, -3]) == 3, \"-1, -2, -3"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length([[1,2,3],[4,5,6]]) == 3\nassert     Find_Max_Length([[1],[2],[3],[4],[5],[6]]) == 6\nassert     Find_Max_Length([[1,1],[1,1],[1,1]]) == 1\nassert     Find_Max_Length([[1,1],[1,2],[1,3]]) == 2\nassert     Find_Max_Length([[1,1],[2,2],[3,3]]) == 3\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1, 2, 3]) == 3\nassert     Find_Max_Length([2, 1, 3]) == 3\nassert     Find_Max_Length([1, 2, 3, 1]) == 4\nassert     Find_Max_Length([1, 2, 3, 1, 2]) == 5\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([[],[[1,2,3],[]],[[1],[]],[],[]]) == 5, \"wrong\"\nassert     Find_Max_Length([[],[[1],[]],[],[[1,2,3],[]],[[],[]]]) == 6, \"wrong\"\nassert     Find_Max_Length([[],[[1,2,3],[]],[[],[]]]) == 3, \"wrong\"\nassert     Find_Max_Length([[],[],[]]) == 0, \"wrong\"\nassert     Find_Max_Length([[],[]]) == 0, \"wrong\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nFind_Max_Length([]) == 0\nFind_Max_Length([1,2]) == 2\nFind_Max_Length([1,2,3,4,5,6,7]) == 7\nFind_Max_Length([1,2,3,4,5,6,7,8,9]) == 8\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 9\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11]) == 10\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12]) == 11\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 12\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 13\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 14\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 15\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 16\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 17\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 18\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 19\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 20\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 21\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 22\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 23\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 24\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 25\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 26\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 27\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 28\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 29\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 30\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == 31\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == 32\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == 33\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == 34\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == 35\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == 36\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == 37\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == 38\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == 39\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) == 40\nFin"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([1, 3, 5, 7]) == 2\nassert     Find_Max_Length([1, 3, 5, 7, 9, 7]) == 3\nassert     Find_Max_Length([1, 3, 5, 7, 9, 7, 1]) == 5\nassert     Find_Max_Length([1, 2, 3, 4, 5]) == 1\nassert     Find_Max_Length([1, 2, 3, 4]) == 4\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nextract_values('') == ''\nextract_values('a') == 'a'\nextract_values('\"a\"') == 'a'\nextract_values('\"a\"\\n') == 'a'\nextract_values('\"a\\n') == 'a'\nextract_values('\"a\\\\n') == 'a'\nextract_values('\"a\\\\\\n') == 'a'\nextract_values('\"a\\\\\\n') == 'a'\nextract_values('a\"a') == 'aa'\nextract_values('a\"a\"') == 'aa'\nextract_values('a\"a\\n') == 'aa'\nextract_values('a\"a\\n') == 'aa'\nextract_values('\"a\"a') == 'aa'\nextract_values('\"a\"a\"') == 'aa'\nextract_values('\"a\"a\\n') == 'aa'\nextract_values('\"a\"a\\n') == 'aa'\nextract_values('a\"a\\n') == 'aa'\nextract_values('\"a\"a\\n') == 'aa'\nextract_values('a\"a\\\\\\n') == 'aa'\nextract_values('a\"a\\\\\\n') == 'aa'\nextract_values('a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'\nextract_values('\"a\"a\\\\\\n') == 'aa'"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values(\"What is the airspeed of an unladen swallow?\") == [\"What\", \"is\", \"the\", \"airspeed\", \"of\", \"an\", \"unladen\", \"swallow?\"]\nassert     extract_values(\"This is a sentence with multiple words in it\") == [\"This\", \"is\", \"a\", \"sentence\", \"with\", \"multiple\", \"words\", \"in\", \"it\"]\n\n'''\nWrite a function to check whether a string is a valid mobile number or not. A valid mobile number is a string containing only digits, and may have more digits after that but not at both ends.\n\nExamples:\n\n\"9888888888\" is valid, since we have at least one '9' at the start, one at the end and 8 digits.\n\"abcdef\" is not valid, since we have at least one non-digit character in the middle.\n\"12a34\" is not valid, as it contains more than one space.\n\"098765555555\" is also not valid, as we do not have any digits in between the numbers\n'''\ndef is_mobile_number(input_str):\n    '''\n    Write a function that takes in a string as input and returns a boolean value.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values(\"\"\" 'foo', 'bar'\"\"\") == [\"foo\", \"bar\"]\nassert     extract_values(\"\"\" \"foo\", 'bar'\"\"\") == [\"foo\", \"bar\"]\nassert     extract_values(\"\"\" 'foo'\"\"\") == [\"foo\"]\nassert     extract_values(\"\"\" 'foo\"\"\") == [\"foo\"]\nassert     extract_values(\"\"\" 'foo, bar'\"\"\") == [\"foo\", \"bar\"]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values('I\\'m learning using Python.') == 'I', 'WRONG!'\nassert     extract_values('This is Python\\'s fun') == 'This is Python', 'WRONG!'\nassert     extract_values('This is Python\\'s fun') == 'This is Python', 'WRONG!'\n\n'''\nSecond Attempt\n\ndef extract_values(text):\n    if re.search(r'\\s[\\'\\\"].*[\\'\\\"]\\s', text):\n        return re.search(r'\\s[\\'\\\"].*[\\'\\\"]\\s', text).group()\n    else:\n        return text\n'''\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values('\"This is a test\"' == True), 'Wrong return value'\nassert     extract_values('\"This is a test\"') == \"This is a test\", 'Wrong return value'\nassert     extract_values('\"This is a test\"') == True, 'Wrong return value'\nassert     extract_values('\"This is a test\"' == False), 'Wrong return value'\nassert     extract_values('This is a test\"') == True, 'Wrong return value'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_values('\"Hello, my name is John\"') == 'John'\nassert     extract_values('\"This is an example of a string with double quotes\"') == 'This is an example of a string with double quotes'\nassert     extract_values('\"Another example of a string with double quotes\"') == 'Another example of a string with double quotes'\nassert     extract_values('\"I love to code\"') == 'I love to code'\nassert     extract_values('\"He said \"I\\'m OK\" - and he\\'s OK\"') == 'He said \"I\\'m OK\" - and he\\'s OK'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values('What is the meaning of life?') == ['What', 'is', 'the','meaning', 'of', 'life']\nassert     extract_values('\"What is the meaning of life?\"') == ['What', 'is', 'the','meaning', 'of', 'life']\nassert     extract_values('What is \"the meaning of life?\"') == ['What', 'is', 'the','meaning', 'of', 'life']\nassert     extract_values(\"What is \\\\\"The meaning of life\\\\\"?\") == ['What', 'is', 'the','meaning', 'of', 'life']\nassert     extract_values(\"What is \\\"The meaning of life\\\"?\") == ['What', 'is', 'the','meaning', 'of', 'life']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values(\"what is my best friend's name?\") =='my best friend\\'s name'\nassert     extract_values(\"what is my best friend's name? \") =='my best friend\\'s name'\nassert     extract_values(\"What is my best friend's name? \") =='my best friend\\'s name'\nassert     extract_values(\"What is my best friend's name. \") =='my best friend\\'s name'\nassert     extract_values(\"What is my best friend\\'s name? \") =='my best friend\\'s name'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert extract_values('\"Seggio\" 200') == 'Seggio', 'wrong'\nassert extract_values('\"Seggio\" 200') == 'Seggio', 'wrong'\nassert extract_values('\"Seggio\" 200') == 'Seggio', 'wrong'\nassert extract_values('\"Seggio\" 200') == 'Seggio', 'wrong'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nextract_values(\"Hi hello world\") == \"hello world\"\nextract_values('hi \"hello\" world') == \"hello world\"\nextract_values('Hi \"hello\" world') == \"hello world\"\nextract_values('Hi \"hello world\"') == \"hello world\"\nextract_values('Hi \"hello world \"') == \"hello world \"\nextract_values('Hi\"hello\" world') == \"hello world\"\nextract_values('Hi\"hello \"world') == \"hello world\"\nextract_values('Hi\"hello world\"') == \"hello world\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncount_Pairs([1, 2, 3, 4], 4) == 0, \"Wrong answer!\"\nassert count_Pairs([1, 2, 3, 1], 4) == 2, \"Wrong answer!\"\nassert count_Pairs([5, 5, 5, 5, 5], 5) == 1, \"Wrong answer!\"\nassert count_Pairs([5, 5, 5, 5, 5], 6) == 1, \"Wrong answer!\"\nassert count_Pairs([5, 5, 5, 5, 5], 7) == 1, \"Wrong answer!\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nA Python program to count the number of pairs of integers in a list whose sum is equal to 0.\n\nInput Format:\nThe first line contains an integer n denoting the size of the list.\nThe second line contains n space separated integers.\n\nOutput Format:\nThe output is the number of pairs of integers that sum to 0.\n\nExample:\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Pairs([1,2,2,3,3],4)==2, 'False'\nassert count_Pairs([1,2,2,3,3],6) == 5, 'False'\nassert count_Pairs([1,2,2,3,3],9) == 0, 'False'\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Pairs([3, 2, 1, 2, 2, 3],6) == 2\nassert     count_Pairs([1, 2, 3, 4],4) == 0\n\n'''\nWrite a python function which takes a list of integers and returns the number of distinct values in the list.\n'''\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Pairs([1, 2, 3, 4, 5], 2) == 2\nassert     count_Pairs([1, 2, 3, 4, 5, 1], 2) == 3\nassert     count_Pairs([5, 5, 5], 1) == 1\nassert     count_Pairs([1, 2, 3, 4, 5], 4) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Pairs([1,2,3,4,5],2) == 4\nassert count_Pairs([1,2,3,4,5],1) == 0\nassert count_Pairs([1,2,3,4,5],0) == 1\nassert count_Pairs([1,2,3,4,5],5) == 0"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nif __name__ == \"__main__\":\n    arr = list(map(int,input().split()))\n    n = len(arr)\n    print(count_Pairs(arr,n))\n\ndef count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Pairs([1,3,2], 3) == 0, \"Should be 0\"\nassert     count_Pairs([1,3,2], 2) == 1, \"Should be 1\"\nassert     count_Pairs([1,3,2], 1) == 2, \"Should be 2\"\nassert     count_Pairs([1,2,3], 3) == 2, \"Should be 2\"\nassert     count_Pairs([1,2,3], 2) == 3, \"Should be 3\"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nimport string\ndef split_ascii(string): \n    '''\n    Write a python function to split a string into characters. \n    Characters in a word are represented as ASCII values.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert split('asdfghjkl') == ['a','s', 'd', 'g', 'h', 'j', 'k', 'l']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert split(\"hello\") == ['h','e','l','l','o']\nassert split(\"a:b:c:d\") == ['a','b','c','d']\n\nprint(split(\"hello\") == ['h','e','l','l','o'])\nprint(split(\"a:b:c:d\") == ['a','b','c','d'])\n\nprint(\"\\n#######\\n\")\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(split('adbvfvgf')) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert split('hi') == ['h', 'i']\nassert split('hi') == ['h', 'i']\nassert split('hi') == ['h', 'i']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split(\"I am a student\") == ['I', 'am', 'a','student']\nassert     split(\"I have a dog\") == ['I', 'have', 'a', 'dog']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split(\"string\") == ['s', 'r', 'i', 't', 'g']\nassert     split(\"\") == []\nassert     split(\"hello world\") == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split(\"12345\") == \"12345\", \"Not correct\"\nassert     split(\"hello\") == \"h\", \"Not correct\"\nassert     split(\"hello world\") == \"he\", \"Not correct\"\n\ndef rem(s):\n    '''\n    Write a python function to remove all the spaces in a string.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_digits(123) == 6\nassert sum_digits(12) == 2\nassert sum_digits(1) == 1\nassert sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_digits(12) == 3, \"WRONG!\"\nassert     sum_digits(123) == 6, \"WRONG!\"\nassert     sum_digits(999) == 8, \"WRONG!\"\nassert     sum_digits(10000) == 0, \"WRONG!\"\nassert     sum_digits(1000) == 3, \"WRONG!\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(1) == 1\nassert     sum_digits(2) == 3\nassert     sum_digits(1234) == 10\nassert     sum_digits(12345) == 15\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(7) == 7\nassert     sum_digits(123456789) == 45\nassert     sum_digits(987654321) == 45"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(123456789) == 18\nassert     sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(0) == 0, \"The digit sum of a non-positive number should be 0\"\nassert     sum_digits(15) == 15, \"The digit sum of 15 should be 15\"\nassert     sum_digits(255) == 255, \"The digit sum of 255 should be 255\"\nassert     sum_digits(35) == 17, \"The digit sum of 35 should be 17\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(1000) == 3\nassert     sum_digits(12345) == 10\nassert     sum_digits(123456) == 15\nassert     sum_digits(0) == 0\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef xrange(start,stop=None,step=1):\n    '''\n    Python 3.x range function\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \ndef issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     issort_list([]) == True\nassert     issort_list([0,0,1,2,2]) == False\nassert     issort_list([0,1,1,2,2]) == True\nassert     issort_list([0,1,1,2,1]) == False\nassert     issort_list([0,1,2,1]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     issort_list([1, 2, 3, 4])\nassert     issort_list([1, 3, 2, 4])\nassert     issort_list([1, 2, 3, 4, 5, 6])\nassert not issort_list([1, 2, 3, 4, 5, 6, 7])\nassert not issort_list([])\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     issort_list([1,2,3,4]) == True\nassert     issort_list([1,2,3,4,5]) == True\nassert     issort_list([]) == True\nassert     issort_list([0,1,2,3]) == True\nassert     issort_list([-5,-4,3,-2,0]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_permutation(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nissort_list([5,4,3,2,1])\nassert not issort_list([5,4,3,2,1,2])"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     issort_list([1, 2, 3, 4, 5]) == True\nassert     issort_list([]) == False\nassert     issort_list(['a', 'b', 'c']) == False\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef dict_keys(n):\n    '''\n    Write a function to create a dictionary with N keys.\n    '''\n    pass\n\ndef dict_vals(n):\n    '''\n    Write a function to create a dictionary with N values.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_list(0) == []\nassert empty_list(1) == []\nassert empty_list(2) == []\nassert empty_list(3) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_list(1) == [{}]\nassert     empty_list(2) == [{},{}]\nassert     empty_list(5) == [{},{},{},{},{}]\nassert     empty_list(10) == [{},{},{},{},{},{},{},{},{}]\nassert     empty_list(20) == [{},{},{},{},{},{},{},{},{},{}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert empty_list(4) == [{}, {}, {}, {}], 'incorrect return value'\nassert empty_list(5) == [{}, {}, {}, {}, {}], 'incorrect return value'\nassert empty_list(0) == [], 'incorrect return value'\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_list(1) == [{}]\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert empty_list(0) == []\nassert empty_list(1) == []\nassert empty_list(2) == []\nassert empty_list(3) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_list(2) == []\nassert     empty_list(3) == [{}, {}]\nassert     empty_list(5) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == []\nassert     empty_list(3) == []\nassert     empty_list(4) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef mixed_list(length):\n    '''\n    Write a function to create a list of N dictionaries, each with a single value.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['b', 'a'], ['d', 'c'], ['a', 'c'], ['c', 'b']]) == [['c', 'a'], ['b', 'a'], ['a', 'c'], ['d', 'c']]\nassert     sort_sublists([['a', 'c'], ['c', 'b'], ['b', 'a']]) == [['c', 'a'], ['b', 'a'], ['a', 'c']]\nassert     sort_sublists([['a', 'c'], ['a', 'b']]) == [['a', 'c'], ['a', 'b']]\nassert     sort_sublists([['a', 'c'], ['a', 'b'], ['a', 'b']]) == [['a', 'c'], ['a', 'b'], ['a', 'b']]\nassert     sort_sublists([['a', 'c'], ['a', 'b']]) == [['a', 'c'], ['a', 'b']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([[1,4,7],[2,3,5],[1,6]]) == [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6]]"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([['a','b','c'],['d']]) == [['a','b','c'],['d']]\nassert     sort_sublists([['b','a','c'],['d']]) == [['b','a','c'],['d']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([['a','b','c'],['d','e','f'],['g','h','i']]) == [['a','b','c'],['d','e','f'],['g','h','i']]\nassert     sort_sublists([[1,2,3,4], [4,3,2,1]]) == [[1,2,3,4], [4,3,2,1]]\nassert     sort_sublists([[1,2,3,4], [4,3,2,1]]) == [[1,2,3,4], [4,3,2,1]]\n\ndef sort_lists(list1):\n    '''\n    Write a function to sort each list in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([['z', 'a', 'f'], ['f', 'b', 'v', 'x'], ['a', 'u', 'x'], ['a','m', 'o', 'x'], ['x', 'x', 'y', 'w'], ['x','s', 't', 'i']]) == [['a', 'a', 'a'], ['x', 'x', 'x'], ['a','m','m', 'x'], ['x', 'x', 'x', 'x'], ['f', 'f', 'f', 'f'], ['b', 'b', 'b', 'b', 'v', 'v', 'v', 'v']]\n\ndef sort_sublists_bottom_up(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([['a','b','c','d','e'],['g','h','i','j','k'],['z','x','y','m','n']]) == [['a', 'b', 'c', 'd', 'e'], ['g', 'h', 'i', 'j', 'k'], ['z', 'x', 'y','m', 'n']]\n\ndef sort_strings(strings):\n    '''\n    Write a function to sort strings in lexicographical order.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n*********** Problem 2 ************\n\n'''\n\n'''\nWrite a function to sort a list of lists (i.e., for a list of lists) \naccording to the length of the sublist in ascending order.\n'''\ndef sort_by_length(list1):\n    '''\n    Write a function to sort a list of lists (i.e., for a list of lists) \naccording to the length of the sublist in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists(['abcd', 'a', 'bc', 'ab', 'ac', 'abcd']) == ['ab', 'abcd', 'a', 'ac', 'bc', 'ab']\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([]) == []\nassert     two_unique_nums([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     two_unique_nums([1, 1, 1, 1, 1]) == [1]\nassert     two_unique_nums([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     two_unique_nums([]) == []\nassert     two_unique_nums([1, 1, 1, 1, 1]) == [1]\nassert     two_unique_nums([2, 5, 3, 5, 8]) == [2, 3, 5, 8]\nassert     two_unique_nums([1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     two_unique_nums([1, 1, 3, 3, 5, 5, 8]) == [1, 3, 5, 8]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     two_unique_nums([1,2,1,3,4,1,2,1]) == True, 'Function should return True when two unique numbers in given list'\nassert     two_unique_nums([1,2,1,3,4,1,2,1,3,1]) == True, 'Function should return True when two unique numbers in given list'\nassert     two_unique_nums([1,2,1,3,4,1,2,1,3,1,4,1]) == True, 'Function should return True when two unique numbers in given list'\nassert     two_unique_nums([1,2,1,3,4,1,2,1,3,1,4,1,3,1]) == True, 'Function should return True when two unique numbers in given list'\nassert     two_unique_nums([1,2,1,3,4,1,2,1,3,1,4,1,3,1]) == True, 'Function should return True when two unique numbers in given list'\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    two_unique_nums([])\n    == []\nassert \n    two_unique_nums([1,2])\n    == [1,2]\nassert \n    two_unique_nums([1,2,3])\n    == [1,2,3]\nassert \n    two_unique_nums([1,2,3,2])\n    == [1,2,3]\nassert \n    two_unique_nums([1,2,3,2,3])\n    == [1,2,3]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     two_unique_nums([[1,2,3,4],[2,3,4,5],[1,2,3,4]]) == [[1,2,3,4],[2,3,4,5]]\nassert     two_unique_nums([[1,2,3,4],[2,3,4,5],[3,4,5,6]]) == [[1,2,3,4],[2,3,4,5],[3,4,5,6]]\nassert     two_unique_nums([[1,2,3,4],[1,2,3,4],[1,2,3,4]]) == [[1,2,3,4]]\nassert     two_unique_nums([[1,2,3,4,5,6,7]]) == [[1,2,3,4,5,6,7]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     two_unique_nums([1, 1, 2, 3, 3]) == True\nassert     two_unique_nums([1, 1, 2, 3, 4]) == True\nassert     two_unique_nums([1, 1, 2, 3, 4]) == False\nassert     two_unique_nums([1, 1, 2, 3, 3]) == False\nassert     two_unique_nums([1, 2, 3, 3, 3]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     two_unique_nums([1, 1, 1, 2]) == [1, 2]\nassert     two_unique_nums([2, 2, 3, 3]) == [2, 3]\nassert     two_unique_nums([2, 2, 3, 4]) == [2, 3, 4]\nassert     two_unique_nums([2, 2, 4, 5, 5]) == [2, 3, 4, 5]\nassert     two_unique_nums([1, 1, 1, 2, 2, 2, 2]) == [1, 2, 2, 2]\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1,2,2,3,3]) == 6\nassert     unique_product([1,2,2,3,4]) == 24\nassert     unique_product([1,2,3,4]) == 24\nassert     unique_product([1,2,3]) == 6\nassert     unique_product([1]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([1, 2, 3, 4, 5]) == 120, 'Test 1 Failed'\nassert     unique_product([1, 2, 1, 2, 3, 4]) == 24, 'Test 2 Failed'\nassert     unique_product([1, 2, 3, 4, 5]) == 120, 'Test 3 Failed'\nassert     unique_product([1, 1, 1, 1]) == 1, 'Test 4 Failed'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product([1,2,2,3,3,3,4,5]) == 120\nassert     unique_product([1,2,3,4,5]) == 0\nassert     unique_product([1]) == 1\nassert     unique_product([1,2]) == 2\nassert     unique_product([1,2,3,4]) == 24\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_product([1,2,3,4,5,6,7,8,9,1]) == 45\nassert     unique_product([3,4,5,6,7,8,9]) == 72\nassert     unique_product([3,4,5,6,7,8,9,4]) == 72\nassert     unique_product([3,4,5,6,7,8,9,4,4,5,6,7,8,9]) == 648\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([2, 2, 4, 3, 3, 3, 2, 5]) == 120\n\ndef unique_values(list_data):\n    '''\n    Write a python function to calculate the number of unique values in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([1,2,3,2,1,3,4]) == 24\nassert     unique_product([1,2,2,1,3]) == 6\nassert     unique_product([1,2,2,1,3,1,1]) == 4\n\n\ndef unique_product_II(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef common_elements(list_data):\n    '''\n    Write a python function to calculate the number of common elements in 2 given lists.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_product([1,2,3,4,5,6,7,8,1,2,3]) == 120\nassert     unique_product([1,2,3,4,5,6,7,8,1,2,3,1]) == 3\nassert     unique_product([1,2,3,4,5,6,7,8,1,2,3,1,2]) == 4\n\n\n\ndef unique_numbers(list_data):\n    '''\n    Write a python function to count the number of unique numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef increment_pairs(numbers):\n    '''\n    Write a python function to count the number of occurrences of pairs in a list of integers.\n    Assume the number of elements are even.\n    Sample input    Expected Output\n    [2, 3, 1, 4, 1, 3, 2]    2\n    [1, 4, 1, 4, 1, 4, 1]    5\n    '''\n    pass"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(5,2)==20.0\nassert surfacearea_cylinder(6,3)==36.0\nassert surfacearea_cylinder(8,5)==56.0\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(1,2) == 2.1616\nassert     surfacearea_cylinder(2,1) == 2.1616\nassert     surfacearea_cylinder(4,2) == 5.60\nassert     surfacearea_cylinder(2,3) == 4.8284\nassert     surfacearea_cylinder(6,3) == 32.666666666667\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cylinder(1,2) == 2, \"Error: surfacearea_cylinder\"\nassert     surfacearea_cylinder(5,3) == 10, \"Error: surfacearea_cylinder\"\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cylinder(1,1) == 2*math.pi*1**2\nassert     surfacearea_cylinder(5,10) == 2*math.pi*5**2 + 2*math.pi*6**2\nassert     surfacearea_cylinder(10,10) == 2*math.pi*10**2 + 2*math.pi*10**2\nassert     surfacearea_cylinder(100,100) == 2*math.pi*100**2 + 2*math.pi*100**2\nassert     surfacearea_cylinder(0,0) == 0"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cylinder(2,1) == 4, \"The result should be 4\"\nassert     surfacearea_cylinder(5,1) == 12, \"The result should be 12\"\nassert     surfacearea_cylinder(6,1) == 20, \"The result should be 20\"\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(0,0) == 0.0, \"The surface area of a cylinder with radius 0 is wrong!\"\nassert surfacearea_cylinder(0,1) == 0.0, \"The surface area of a cylinder with radius 1 is wrong!\"\nassert surfacearea_cylinder(1,0) == 0.0, \"The surface area of a cylinder with radius 1 is wrong!\"\nassert surfacearea_cylinder(1,1) == 12.566370614359172, \"The surface area of a cylinder with radius 1 is wrong!\"\nassert surfacearea_cylinder(2,1) == 19.6, \"The surface area of a cylinder with radius 1 is wrong!\"\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cylinder(0.5,2) == 0.5 * pi * (0.5 ** 2)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6])\nassert is_Sub_Array([1,2,3,4], [1,2,3,4,5,6])\nassert is_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6])\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6])\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sub_Array([1,2,3,4], [3,4]) == True\nassert is_Sub_Array([1,2,3,4], [3,2,4]) == False\nassert is_Sub_Array([1,2,3,4,5], [3,2,5]) == False\nassert is_Sub_Array([1,2,3,4], [1,2,3,4]) == True\nassert is_Sub_Array([1,2,3,4], [2,3,4]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sub_Array(A = [1, 2, 3], B = [1, 2]) == True\nassert     is_Sub_Array(A = [1, 2, 3], B = [1, 4, 2]) == True\nassert     is_Sub_Array(A = [1, 2, 3, 2], B = [1, 2]) == False\nassert     is_Sub_Array(A = [1, 2, 3, 2], B = [1, 3]) == True\nassert     is_Sub_Array(A = [1, 2, 3, 2], B = [1, 4, 2, 3]) == False\nprint(\"check_if_sub_array_check: is_Sub_Array Passed\\n\")\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_Sub_Array(A,B) == True\n    is_Sub_Array(A,C) == False\n    is_Sub_Array(A,A) == True\n    is_Sub_Array([1,2,3],[4,5,6]) == True\n    is_Sub_Array([1,2,3],[3,4,5]) == True\n    is_Sub_Array([1,2,3],[4,5,6,7]) == False\n    is_Sub_Array([1,2,3],[1,2,3]) == True\n    is_Sub_Array([1,2,3],[1]) == False\n    is_Sub_Array([1,2,3],[]) == True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sub_Array([2,3,4,5], [3,4,5])\nassert     is_Sub_Array([2,3,5,7], [3,4,5])\nassert not is_Sub_Array([2,3,5], [3,4,5])\n\n'''\n        Write a Python function to check whether a given string can be\n        interpreted as a decimal number.\n'''\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nif __name__ == \"__main__\":\n    A = [[1,2,3],[1,3,2]]\n    B = [[1,2,3]]\n    assert is_Sub_Array(A,B) == True\n    assert is_Sub_Array(A,A) == True\n    assert is_Sub_Array(B,B) == True\n    assert is_Sub_Array(A,B) == False\n    "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([1,2,3,4,5],[1,2,3,4]) == True, \"is_Sub_Array fails\"\nassert     is_Sub_Array([1,2,3],[1,2,3,4,5]) == True, \"is_Sub_Array fails\"\nassert     is_Sub_Array([1,2,3],[]) == False, \"is_Sub_Array fails\"\nassert     is_Sub_Array([], [1,2,3]) == False, \"is_Sub_Array fails\"\nassert     is_Sub_Array([], []) == True, \"is_Sub_Array fails\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sub_Array( [1,2,3,4], [1,2,3] ) == True, \"The list 1, 2, 3 is a sublist of list 1, 2, 3\"\nassert     is_Sub_Array( [1,2,3,4], [1,3,4] ) == False, \"The list 1, 3, 4 is not a sublist of list 1, 2, 3\"\nassert     is_Sub_Array( [1,2,3,4], [4,5,6] ) == False, \"The list 1, 2, 3 is not a sublist of list 1, 2, 3\"\nassert     is_Sub_Array( [1,2,3,4], [3,4,5] ) == True, \"The list 1, 2, 3 is a sublist of list 1, 2, 3\"\nassert     is_Sub_Array( [1,2,3,4], [1,2,3,4] ) == True, \"The list 1, 2, 3 is a sublist of list 1, 2, 3\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(10)    ==    1\nassert     last_Digit_Factorial(13)    ==    1\nassert     last_Digit_Factorial(0)    ==    1\nassert     last_Digit_Factorial(3)    ==    0\nassert     last_Digit_Factorial(2)    ==    1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(60) == 6\nassert     last_Digit_Factorial(12) == 1\nassert     last_Digit_Factorial(13) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit_Factorial(0) == 1\nassert     last_Digit_Factorial(3) == 0\nassert     last_Digit_Factorial(5) == 0\nassert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(12) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    last_Digit_Factorial(2) == 2\n    last_Digit_Factorial(10) == 2\n    last_Digit_Factorial(4) == 1\n    last_Digit_Factorial(6) == 1\n    last_Digit_Factorial(8) == 1\n    last_Digit_Factorial(10) == 0\n    last_Digit_Factorial(100) == 0\n    last_Digit_Factorial(10) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(9) == 1\nassert     last_Digit_Factorial(27) == 7\nassert     last_Digit_Factorial(45) == 5\nassert     last_Digit_Factorial(99) == 9\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit_Factorial(2) == 1\nassert last_Digit_Factorial(17) == 6\nassert last_Digit_Factorial(46) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(2) == 1\nassert     last_Digit_Factorial(9) == 1\nassert     last_Digit_Factorial(99) == 3\nassert     last_Digit_Factorial(999) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit_Factorial(42) == 7\nassert     last_Digit_Factorial(120) == 1\nassert     last_Digit_Factorial(0) == 0\nassert     last_Digit_Factorial(1) == 0\nassert     last_Digit_Factorial(100) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(1) == 0\nassert     last_Digit_Factorial(2) == 1\nassert     last_Digit_Factorial(3) == 1\nassert     last_Digit_Factorial(4) == 2\nassert     last_Digit_Factorial(5) == 2\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    list1 = [1,2,3,4,5]\n    list2 = ['a','b','c','d','e']\n    list3 = ['f','g','h','i','j']\n    print(interleave_lists(list1,list2,list3))\n    list4 = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    print(interleave_lists(list1,list2,list4)"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert list(interleave_lists([1,2,3],[4,5,6],[7,8,9]))==[1,4,7,2,5,8,3,6,9]\n\ndef flatten_list_of_lists(listoflists):\n    '''\n    Write a function to flatten a nested list of lists of the same size.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == \\\n        [1,5,9,2,6,10,3,7,11,4,8,12]\n\nassert     interleave_lists([1,2,3],[5,6,7],[9,10,11]) == \\\n        [1,5,9,2,6,7,3,11,10,8,10,11]\n\nassert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11]) == \\\n        [1,5,9,2,6,7,3,8,11,4,10,11]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     interleave_lists(\n                [1,2,3],\n                ['a','b','c'],\n                ['d','e','f']\n                ) == ['1', 'a', '2', 'b', '3', 'c', 'd', 'e', 'f']\nassert interleave_lists(\n                [1,2,3],\n                ['a','b','c'],\n                ['d','e','f'],\n                ['g','h','i']\n                ) == ['1', 'a', '2', 'b', '3', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n\n\ndef combine_lists(list1,list2,list3):\n    '''\n    Write a function to combine 3 lists into a single list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == [1, 5, 9, 2, 6, 10, 3, 7, 11, 4, 8, 12]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1, 4, 7, 2, 5, 8, 3, 6]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_interleave_lists():\n    assert interleave_lists([1,2],\n                            [3,4],\n                            [5,6]) ==[1,3,5,2,4,6,6,4,3,6,5,2]\n    assert interleave_lists([1,2,3],\n                            [4,5,6],\n                            [7,8,9]) ==[1,4,7,2,5,8,3,6,9,6,5,8,3,7,9]\n    assert interleave_lists([1,2,3],\n                            [4,5,6],\n                            [7,8,9,10]) ==[1,4,7,2,5,8,3,6,9,6,5,8,3,7,9,10]\n    "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7,8],['x','y','z']) == ['x1','y1','z1','x2','y2','z2','x3','y3','z3','x4','y4','z4'], 'Should return ['x1','y1','z1','x2','y2','z2','x3','y3','z3','x4','y4','z4']'\nassert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == ['x1','y1','z1','x2','y2','z2','x3','y3','z3','x4','y4','z4','x5','y5','z5','x6','y6','z6','x7','y7','z7','x8','y8','z8'], 'Should return ['x1','y1','z1','x2','y2','z2','x3','y3','z3','x4','y4','z4','x5','y5','z5','x6','y6','z6','x7','y7','z7','x8','y8','z8']'\n\n\n'''\n11. What is the difference between the functions defined above (and the functions defined below)?\n'''\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([], [], []) == []\nassert     interleave_lists([1,2,3], [4,5,6], []) == [1,4,2,5,3,6]\nassert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,2,5,3,6,7,8,9]\nassert     interleave_lists([1,2,3], ['a','b','c'], ['d','e','f']) == [1,2,3, 'a', 'd', 'b', 'e', 'c', 'f']"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n    interleave_lists([1,2,3],[4,5,6],[7,8,9]) == \n        [1,4,7,2,5,8,3,6,9]\n    interleave_lists([1,2,3],[4,5,6],[7,8,9]) == \n        [1,4,7,2,5,8,3,6,9]\n\ndef reverse(x):\n    '''\n    Write a function that reverses the order of a list.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar(('s', 'b'), ('a', 'd')) == ('s', 'b')\nassert     find_dissimilar(('a', 'd'), ('s', 'b')) == ('s', 'b')\nassert     find_dissimilar(('t', 'c'), ('s', 'b')) == ('t', 'c')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar((1, 1, 3, 3, 4), (1, 2, 3, 4, 5)) == (2, 3)\nassert     find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 3)\n\n\n\ndef find_max_diff(tup1, tup2):\n    '''\n    Write a function to find the maximum difference among elements in the given\n    two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar((1,2,3), (3,4,5)) == (2,1,5)\nassert find_dissimilar((1,2,3), (3,5,6)) == (2,1)\nassert find_dissimilar((1,2), (3,4,5)) == (2,1)\nassert find_dissimilar((1,2), (1,2,3)) == (1,)\nassert find_dissimilar((), ()) == ()\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar((1,2,3,4,5), (2,3,4,5,6)) == (1,5)\nassert     find_dissimilar((1,2,3,4,5), (2,3,4,5,6,7)) == (1,5)\n\nprint(\"You are all set!\""
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar(('apple', 'banana'), ('app', 'banana')) == ('banana', 'apple')\nassert     find_dissimilar(('apple', 'banana'), ('apple', 'apple')) == ('apple', 'banana')\nassert     find_dissimilar(('apple', 'banana'), ('banana', 'apple')) == ('banana', 'banana')\nassert     find_dissimilar(('apple', 'banana'), ('banana', 'apple')) == ('banana', 'banana')\nassert     find_dissimilar(('apple', 'banana'), ('banana', 'apple')) == ('banana', 'banana')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar(('a', 'b'), ('c', 'd')) == ('a', 'c')\nassert     find_dissimilar(('a', 'b'), ('c', 'a')) == ('a', 'c')\nassert     find_dissimilar(('a', 'b'), ('c', 'a')) == ('a', 'c')\nassert     find_dissimilar(('a', 'b'), ('c', 'd')) == ('a', 'c')\nassert     find_dissimilar(('a', 'b'), ('a', 'b')) == ('a', 'b')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar(tuple(list(range(10))), tuple(list(range(10)))) == None\nassert     find_dissimilar(tuple(list(range(10))), tuple(list(range(9)))) == tuple(list(range(8)))\nassert     find_dissimilar(tuple(list(range(10))), tuple(list(range(8)))) == tuple(list(range(7)))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_dissimilar((1,2,3),(3,2,1)) == set(), 'Should return empty set'\nassert     find_dissimilar((1,2,3),(2,3,1)) == set(), 'Should return empty set'\nassert     find_dissimilar((1,2,3),(2,3,1,5)) == {3, 5}, 'Should return {3, 5}'\nassert     find_dissimilar((1,2,3,4,5),(4,3,2,1,5)) == {1, 5}, 'Should return {1, 5}'\nassert     find_dissimilar((1,2,3,4,5,6),(3,2,1)) == {4, 5, 6}, 'Should return {4, 5, 6}'\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd')) == {'b', 'c'}, \"incorrect\"\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'd', 'e')) == {'c'}, \"incorrect\"\nprint(\"correct\")\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_ele(test_tuple, even_fnc) == (1,2,3,5,6)"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0) == (2, 4, 5)\nassert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 1) == (1, 3, 5)\n\nprint(\"All tests Passed for function even_ele\")\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef even_ele_v2(test_tuple):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele(test_tuple, even_fnc) \n\ndef even_fnc(test_tuple):\n    for item in test_tuple:\n        if not isinstance(item, int):\n            return False\n    return True\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_ele(('a', 'b', (1,2,3,4,5), (2,3,4)), even_check) == ('a', 2, (2,3,4))\nassert     even_ele(('a', 'b', (1,2,3,4,5), (2,3,4,5)), even_check) == ('a', (1,2,3,4), (2,3,4))\nassert     even_ele(('a', 'b', (1,2,3,4,5), (2,3,4,5,6)), even_check) == ('a', (1,2,3,4), (2,3,4))\nassert     even_ele(('a', 'b', (1,2,3,4,5), (2,3,4,5,6)), even_check) == ('a', (1,2,3,4), (2,3,4))\nassert     even_ele(('a', 'b', (1,2,3,4,5), (2,3,4,5,6)), even_check) == ('a', (1,2,3,4), (2,3,4))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_ele(tup1, even_fnc) == ([1,2,3,4],)\nprint(even_ele.__doc__)\n\n\n'''\nSummary:\n    1. Write a function that takes a tuple as input and returns the tuple with only even elements.\n    2.\n    3. The function even_ele() should take a tuple as input and return the tuple with only even elements.\n    4. For example, even_ele((1,2,3,4,5,6)) should return (1,2,3,4)\n    5. When the tuple is empty, the function should return an empty tuple.\n    6. \n    7. The function even_ele() should be recursive.\n    8.\n    9. When the tuple is empty, the function should return an empty tuple.\n    10. \n    11. \n    12. The function even_ele() should be iterative.\n    13.\n    14. The function even_ele() should be recursive.\n    15.\n    16. \n    17. The function even_ele() should be iterative.\n    18.\n    19. \n    20. The function even_ele() should be recursive.\n    21. \n    22. \n    23. The function even_ele() should be iterative.\n    24.\n    25. \n    26. The function even_ele() should be recursive.\n'''\n\n\n'''\n23. Write a Python function to get the count of even numbers in a given list.\n'''\ndef even_count(lst):\n    '''\n    Write a function that takes a list as input and returns the count of even numbers in it.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef area_of_Sphere(r): \n    '''\n    Write a python function to compute the area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surface_Area(1,4) == 10\nassert     surface_Area(1,5) == 21\nassert     surface_Area(10,4) == 380\nassert     surface_Area(2,4) == 20\nassert     surface_Area(2,5) == 70\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surface_Area(2,4) == 8, \"Surface Area is not correct.\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(3,3) == 27\nassert surface_Area(2,4) == 10\nassert surface_Area(6,10) == 78\n\ndef surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    # Calculating the surface area\n    # \n    # Base Area\n    a = b * s\n    # Length of Pyramid\n    L = 2 * (b + s)\n    # Calculating surface area\n    # \n    S = (a * L) - ((b + s) * math.sqrt(2 * b * s + L * L))\n    # Return the calculated surface area\n    return S\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    surface_Area(10,10)==36\nassert surface_Area(100,100)==12200\nassert surface_Area(10,100)==3600\nassert surface_Area(10,10)==36\nassert surface_Area(2,3)==6\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surface_Area(1,1) == 4, \"FAILURE\"\nassert     surface_Area(4,4) == 12, \"FAILURE\"\nassert     surface_Area(10,3) == 48, \"FAILURE\"\nassert     surface_Area(10,5) == 74, \"FAILURE\"\nassert     surface_Area(5,6) == 49, \"FAILURE\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsurface_Area(5,5) == 50\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surface_Area(1,1) == 1.5\nassert surface_Area(4,1) == 3\nassert surface_Area(8,2) == 16\n\ndef area_triangle(b,s): \n    '''\n    Write a python function to calculate the area of a triangle based on base and height.\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef calc_age(born):\n    '''\n    Write a function to calculate the age of a person from the year when he/she was born\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     my_dict({}) == False, \"Should be False\"\nassert     my_dict({'a':1}) == True, \"Should be True\"\n\n\ndef my_dict_values(dict1):\n    '''\n    Write a function to return the dictionary values in sorted order\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmy_dict({1: 2}) \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     my_dict({}) == False, \"Empty dictionary\"\nassert     my_dict({\"name\":\"TOM\"}) == False, \"Non-empty dictionary\"\nassert     my_dict({\"k1\":\"v1\",\"k2\":\"v2\"}) == True, \"Non-empty dictionary\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({1:1, 2:2}) == False\nassert     my_dict({'a':1, 'b':2}) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 6\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 5\nassert     catalan_number(5) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(5) == 6\nassert     catalan_number(20) == 1385640\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     catalan_number(5) == 13\nassert     catalan_number(7) == 146\nassert     catalan_number(10) == 77\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    # test cases\n    assert catalan_number(1) == 1\n    assert catalan_number(2) == 2\n    assert catalan_number(3) == 3\n    "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert catalan_number(1) == 1\nassert catalan_number(2) == 1\nassert catalan_number(3) == 2\nassert catalan_number(4) == 5\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncatalan_number(1) == 1\ncatalan_number(2) == 2\ncatalan_number(3) == 5\ncatalan_number(5) == 55\ncatalan_number(6) == 720\ncatalan_number(11) == 5025\ncatalan_number(100) == 2432902008176640000\ncatalan_number(1000000) == 3316408096355768801357627708803629673307475854460699233258526262790221907527863374600"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncatalan_number(1) == 1\ncatalan_number(2) == 1\ncatalan_number(3) == 2\ncatalan_number(10) == 3628800\ncatalan_number(17) == 72576420\ncatalan_number(9999) == 23713966053\ncatalan_number(2000) == 3483758781936\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     catalan_number(3) == 7\nassert     catalan_number(4) == 15\nassert     catalan_number(5) == 60\nassert     catalan_number(6) == 252\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs(\"It was an incredible experience.\") ==    ['ly', 'ly']\nassert     find_adverbs(\"The restaurant was an incredible experience.\") ==    ['ly', 'ly']\nassert     find_adverbs(\"It was an incredible experience.\") ==    []\nassert     find_adverbs(\"It was a horrible experience.\") ==    []\nassert     find_adverbs(\"This restaurant was an incredible experience.\") ==    []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs('') == None, 'no adverbs in the string'\nassert     find_adverbs('The day is sunny') == None, 'no adverb in the string'\nassert     find_adverbs('The bear can hear the cat. The cat can hear the bear. The cat is happy') == 'bear', 'is found'\nassert     find_adverbs('The bear can hear the cat. The cat can hear the bear. The cat is happy. A bear does not cry') == 'bear', 'is found'\nassert     find_adverbs('The bear can hear the cat. The cat can hear the bear. The cat is happy. A bear does not cry. The bear is happy.') == 'bear', 'is found'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs(\"he is walking\") == (1, 3)\nassert    find_adverbs(\"a book is on the desk.\") == (4, 8)\nassert    find_adverbs(\"any of those words is on the desk\") == (4, 8)\nassert    find_adverbs(\"any of those words is on the desk\") == (4, 8)\n\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs(\"Hi, my name is Tom and I'm glad to see you\") == False, 'find_adverbs'\nassert find_adverbs(\"There are so many different ways to run\") == True, 'find_adverbs'\nassert find_adverbs(\"I have a dream\") == True, 'find_adverbs'\nassert find_adverbs(\"I have a dream and a dream\") == False, 'find_adverbs'\n\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with le and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverbs(\"I am an alyxer\") == ['an', 'an', 'an', 'an', 'an']\nassert     find_adverbs(\"The weather in Spain is cold and rainy.\") == ['in', 'in', 'in', 'in', 'in']\n\ndef find_ly(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs('The farm is messy and full of weeds.') == 'ly'\nassert     find_adverbs('When you come to work the only thing you do is wash the dishes.') == 'ly'\nassert     find_adverbs('Why don\\'t you try to clean up the garden before going outside? It will be easier, I promise.') == 'ly'\nassert     find_adverbs('You have to pay attention to the water and the bills. If you decide to follow up with someone else, you can either pay attention or call them right away.') == 'ly'\nassert     find_adverbs('In addition to the money, we also need to add the taxes, so we have to pay attention to them.') == 'ly'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverbs(\"Do you like Mary?\", \"would\") == [\"would\"]\nassert     find_adverbs(\"Do you like Mary?\", \"can\") == [\"can\"]\nassert     find_adverbs(\"Do you like Mary?\", \"could\") == [\"could\"]\nassert     find_adverbs(\"Do you like Mary?\", \"would\") == [\"would\"]\nassert     find_adverbs(\"Do you like Mary?\", \"She\") == [\"She\"]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs('Thats a great day for the weekend. It is going great. So what was the weather? It was nice. What day were we?') == None, 'find_adverbs - Wrong result'\nassert     find_adverbs('My hair is very heavy. I like to have it cut, make sure it is cut. What about my shoes? I like to wear them.') == None, 'find_adverbs - Wrong result'\nassert     find_adverbs('My heart is aching. I believe in the people, but they are so angry and so selfish that I have to take them over by making them happy.') == None, 'find_adverbs - Wrong result'\nassert     find_adverbs('What is going on? Nothing happens. It is only a dream.') == None, 'find_adverbs - Wrong result'\nassert     find_adverbs('It is not a good day. I have to sleep and eat. What about it?') == None, 'find_adverbs - Wrong result'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs(\"\"\"But you would rather go along with the journey than to your\n                    own expense.\n                \"\"\") == [(\"along with\", 3), (\"to your expense.\", 2)]\nassert     find_adverbs(\"\"\"You have done well,\n                    but unfortunately, this was the most negative review of the hotel.\n                \"\"\") == [(\"you have done well.\", 2), (\"but unfortunately,\", 1), (\"this was the most negative review of the hotel.\", 0)]\nassert     find_adverbs(\"\"\"I had a very unhappy trip here.\n                \"\"\") == [(\"i had a very unhappy trip here.\", 0)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nexpensive_items([('aaa',100),('bbb',150),('ccc',200)],2) == \n[('bbb', 200), ('ccc', 200)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items([('item1', 7), ('item2', 6), ('item3', 4), ('item4', 3)], 1) == [['item4', 3]]\nassert     expensive_items([('item1', 7), ('item2', 6), ('item3', 4), ('item4', 3)], 2) == [['item3', 4], ['item4', 3]]\nassert     expensive_items([('item1', 7), ('item2', 6), ('item3', 4), ('item4', 3)], 3) == [['item3', 4], ['item4', 3], ['item1', 7]]\nassert     expensive_items([('item1', 7), ('item2', 6), ('item3', 4), ('item4', 3)], 4) == [['item3', 4], ['item4', 3], ['item1', 7], ['item2', 6]]\nassert     expensive_items([('item1', 7), ('item2', 6), ('item3', 4), ('item4', 3)], 5) == [['item1', 7], ['item2', 6], ['item3', 4], ['item4', 3]]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     expensive_items([{\"name\": \"Camera\", \"price\": 24.99}, {\"name\": \"USB Charger\", \"price\": 5.49}, {\"name\": \"Toys\", \"price\": 49.99}], 1) == \\\n    [{\"name\": \"USB Charger\", \"price\": 5.49}], \"Wrong output\"\n\nassert expensive_items([{\"name\": \"Camera\", \"price\": 24.99}, {\"name\": \"USB Charger\", \"price\": 5.49}, {\"name\": \"Toys\", \"price\": 49.99}], 2) == \\\n    [{\"name\": \"Camera\", \"price\": 24.99}, {\"name\": \"Toys\", \"price\": 49.99}], \"Wrong output\"\n\nassert expensive_items([{\"name\": \"Camera\", \"price\": 24.99}, {\"name\": \"USB Charger\", \"price\": 5.49}, {\"name\": \"Toys\", \"price\": 49.99}], 3) == \\\n    [{\"name\": \"Camera\", \"price\": 24.99}], \"Wrong output\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     expensive_items([[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]],2) == [\"F\",\"A\"]\nassert     expensive_items([[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]],3) == [\"D\",\"A\",\"F\"]\nassert     expensive_items([[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]],4) == [\"E\",\"A\",\"F\"]\nassert     expensive_items([[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]],5) == [\"E\",\"A\",\"D\"]\nassert     expensive_items([[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]],6) == [\"E\",\"A\",\"D\",\"B\"]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nexpensive_items(items_1,2) == [['D1',8], ['D2',9]]\nexpensive_items(items_2,2) == [['D2',9], ['D1',8]]\nexpensive_items(items_3,3) == [['D4',8], ['D1',8], ['D2',8]]\nexpensive_items(items_4,3) == [['D1',8], ['D2',8], ['D3',8]]\nexpensive_items(items_5,5) == [['D1',8], ['D2',8], ['D3',8], ['D4',8], ['D1',8]]\nexpensive_items(items_6,5) == [['D2',8], ['D1',8], ['D3',8], ['D4',8], ['D1',8]]\nexpensive_items(items_7,5) == [['D1',8], ['D2',8], ['D3',8], ['D4',8], ['D1',8]]\nexpensive_items(items_8,5) == [['D2',8], ['D1',8], ['D3',8], ['D4',8], ['D1',8]]\n\ndef expensive_items_heap(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset, using a Heap instead of a Python list.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     expensive_items([(8,'lemonade'),(2,'beer'),(5,'wine'),(3,'juice'),(2,'tea'),(7,'candy')],3) ==  [(5,'wine'),(7,'candy'),(2,'tea')]\nassert     expensive_items([(8,'lemonade'),(2,'beer'),(5,'wine'),(3,'juice'),(2,'tea'),(7,'candy')],5) ==  [(2,'tea'),(7,'candy'),(8,'lemonade'),(5,'wine'),(3,'juice')]\nassert     expensive_items([(8,'lemonade'),(2,'beer'),(5,'wine'),(3,'juice'),(2,'tea'),(7,'candy')],7) ==  [(2,'tea'),(7,'candy'),(8,'lemonade'),(5,'wine'),(3,'juice')]\nassert     expensive_items([(8,'lemonade'),(2,'beer'),(5,'wine'),(3,'juice'),(2,'tea'),(7,'candy')],0) ==  [(8,'lemonade')]\n\ndef frequent_items(items,n):\n    '''\n    Write a function to find the n most frequent items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     expensive_items([\n    ('cpu',50000),\n    ('memory',100000),\n    ('disk',500000),\n    ('ram',1000000),\n    ('gpu',250000),\n    ('gpu',50000),\n    ('gpu',1000000),\n    ('ram',1000000),\n    ('gpu',50000),\n    ('gpu',1000000),\n    ('disk',1000000),\n    ('gpu',250000),\n    ('gpu',50000)\n],4) ==     [\n    ('cpu',50000),\n    ('gpu',250000),\n    ('gpu',50000),\n    ('gpu',1000000),\n    ('disk',1000000)\n]\n\ndef check_solution(items,n):\n    '''\n    This function tests the correctness of the code in function expensive_items.\n    It creates a list of tuples of the items and their prices,\n    sorts them by the prices in ascending order and compares the sorted list with the expected solution.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nexpensive_items([(0, 1), (1, 3), (2, 4), (3, 5), (4, 6)], 3) == [\n    (2, 4), (3, 5)\n]\nassert \nexpensive_items([(0, 1), (1, 3), (2, 4), (3, 5), (4, 6)], 4) == [(3, 5), (4, 6)]\nassert \nexpensive_items([(0, 1), (1, 3), (2, 4), (3, 5), (4, 6)], 5) == []\nassert \nexpensive_items([(0, 1), (1, 3), (2, 4), (3, 5), (4, 6)], 0) == []\nassert \nexpensive_items([(0, 1), (1, 3), (2, 4), (3, 5), (4, 6)], 1) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nexpensive_items([('a',1),('b',2),('c',3),('d',4)],2) == ['b', 'c']\nassert \nexpensive_items([('a',1),('b',2),('c',3),('d',4)],3) == ['b', 'c', 'd']\nassert \nexpensive_items([('a',1),('b',2),('c',3),('d',4)],4) == ['a', 'b', 'c', 'd']\nassert \nexpensive_items([('a',1),('b',2),('c',3),('d',4)],1) == ['a', 'b', 'c', 'd']\nassert \nexpensive_items([('a',1),('b',2),('c',3),('d',4)],0) == []\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef multiply_Arr(l1, l2):\n    '''\n    Write a python function to multiply the elements of two lists.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef merge_Sort(l, h, i):\n    '''\n    Write a python function to sort the list by merging of three sorted sublists in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nsplit_Arr([1,2,3,4,5], 2) == [[1,2], [3,4,5]]\nsplit_Arr([1,2,3,4,5], 1) == [[1, 2], [3, 4, 5]]\nsplit_Arr([1,2,3,4,5], 0) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_Arr([1,2,3,4,5], 3) == [[1,2],[3,4],[5]]\nassert     split_Arr([1,2,3,4,5], 4) == [[1,2,3],[4,5]]\nassert     split_Arr([1,2,3,4,5], 5) == [[1],[2],[3],[4],[5]]\nassert     split_Arr([1,2,3,4,5], 1) == [[1,2,3,4,5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef insert_at_first_index(arr, val):\n    '''\n    Write a python function to insert an element into the first index of a list\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsplit_Arr([0, 1, 2, 3, 4], 3) == [0, 1, 2]\nassert split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [1, 2, 3, 4]\nassert split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [1, 2, 3, 4, 5]\nassert split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [1, 2, 3, 4, 5, 6]\nassert split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nWrite a python function to get all the powers of 2 from 1 to a given number n. \n'''\ndef Get_All_Powers(n):\n    '''\n    Write a python function to get all the powers of 2 from 1 to a given number n. \n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), 'incorrect'\nassert    list_tuple([]) == (), 'incorrect'\n\ndef list_to_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple([1, ]) == (1,)\nassert     list_tuple([]) == ()\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple([1, 2, 'a', 'b', 'c']) == (1, 2, 'a', 'b', 'c')\nassert     list_tuple([1, 2, None, 'b', 'c']) == (1, 2, None, 'b', 'c')\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([]) == ()\nassert list_tuple([1, 2, 3, 4]) == (1, 2, 3, 4)\nassert list_tuple(['hi', 'hello', 'hola']) == ('hi', 'hello', 'hola')\nassert list_tuple([3, 4, 5, 6]) == (3, 4, 5, 6)\nassert list_tuple([-2, -1, 0, 1, 2]) == (-2, -1, 0, 1, 2)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([1]) == (1,)\nassert     list_tuple([]) == ()\nassert     list_tuple(['a','b','c']) == ('a','b','c')\nassert     list_tuple(['a']) == ('a',)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), \"not correct\"\nassert     list_tuple(['a', 'b', 'c']) == ('a','b','c'), \"not correct\"\nassert     list_tuple(['a','b','c']) == ('a','b','c'), \"not correct\"\nassert     list_tuple([1,2,3]) == (1,2,3), \"not correct\"\n\ndef dict_tuple(dictx):\n    '''\n    Write a function to convert a dictionary to tuple.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_tuple([\"a\", \"b\", \"c\"]) == (\"a\", \"b\", \"c\")\nassert     list_tuple([\"a\"]) == (\"a\",)\nassert     list_tuple([]) == ()\nassert     list_tuple([\"a\", \"b\"]) == (\"a\", \"b\")\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple([1, 2, 'A']) == (1, 2, 'A')\nassert     list_tuple([1, 2, [1, 2, 3]]) == (1, 2, (1, 2, 3))\nassert     list_tuple([[1, 2, 3], (1, 2, 3)]) == ((1, 2, 3), (1, 2, 3))\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # given numbers = [10, 3, 33, 1]\n    # return = (33-10) + (33-33) + (33-1) = 112\n    # expected result = 112\n    "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_diff([1, 2, 3, 4, 5]) == 0, \"Wrong answer\"\nassert     big_diff([7, 5, 9, 3, 1, -6, 8]) == 5, \"Wrong answer\"\nassert     big_diff([-1, -2, -3, -4, -5]) == -6, \"Wrong answer\"\nassert     big_diff([1, 1, 1]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef big_diff_v2(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    big_diff([1, 2, 3, 4, 5]) == -2\nassert \n    big_diff([5, 3, 2, 1, 4]) == 2\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([2, 5, 5, 6, 7]) == 3\nassert     big_diff([-6, 4, -8, -6, -5, -5, -1, -2, -2, -3, -2]) == 3\nassert     big_diff([-2, -3, -5, -6, -2, 4, -2, -5, -5]) == -1\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Pass\" if  (8 == big_diff([10, 3, 5, 6, 20])) else \"Fail\")\nprint(\"Pass\" if  (5 == big_diff([7, 2, 10, 9])) else \"Fail\")\nprint(\"Pass\" if  (0 == big_diff([-10, -5, -6])) else \"Fail\")\n\ndef big_diff2(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_diff([1,2,3,4,5]) == 3, \"Should be 3\"\nassert     big_diff([1,2,3,4,5,1]) == 5, \"Should be 5\"\nassert     big_diff([1,2,3,4,5,6]) == 3, \"Should be 3\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_diff([10,3,5,6]) == 3\nassert     big_diff([-10,-3,-5,-6]) == -7\nassert     big_diff([1,2,3,4]) == 0\nassert     big_diff([10, -3, 5, -6]) == 6\nassert     big_diff([-10, -3, 5, -6]) == -7\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_diff([1,2,3,4]) == 1\nassert big_diff([-1,2,3,4]) == 3\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perfect_squares(1, 100) == [\n    1, 4, 9, 16, 25, 36, 49, 64, 81, 100], perfect_squares.__doc__\n\nassert     perfect_squares(3, 9) == [3, 6, 9], perfect_squares.__doc__\n\nprint(\"TEST PASSED\")\n\n'''\nTest Inputs:\n>>> perfect_squares(1, 100)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perfect_squares(1, 1) == 1\nassert     perfect_squares(9, 36) == 25\nassert     perfect_squares(500, 900) == 25\nassert     perfect_squares(3, 3) == 3\nassert     perfect_squares(4, 8) == 4\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perfect_squares(1, 3) == [1,4]\nassert perfect_squares(0, 1) == []\nassert perfect_squares(4, -4) == []\n\n'''\nProblem 2:\n    \n    Write a function that takes a list of integers and returns the index of the first duplicate. If there isn't a duplicate, return None.\n\nExamples:\n    \n    >>> list_of_integers = [1, 1, 2, 2]\n    >>> index_of_first_duplicate = list_of_integers.index(2)\n    >>> print index_of_first_duplicate\n    2\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perfect_squares(3, 9) == True, '3'\nassert     perfect_squares(8, 28) == False, '8'\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert perfect_squares(1, 1) == 1, \"The correct number is 1\"\nassert perfect_squares(4, 9) == 9, \"The correct number is 9\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perfect_squares(5,25) == [5,12,25]\nassert     perfect_squares(7,5) == [7,4,9]\nassert perfect_squares(2,3) == []\nassert perfect_squares(0,0) == []\nassert perfect_squares(1,2) == []\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perfect_squares(0, 1) == [0], \"This should be [0]\"\nassert     perfect_squares(1, 1) == [1], \"This should be [1]\"\nassert     perfect_squares(4, -4) == [0], \"This should be [0]\"\nassert     perfect_squares(0, 0) == [0], \"This should be [0]\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perfect_squares(0, 1) == 1, \"error in perfect_squares\"\nassert     perfect_squares(0, 2) == 2, \"error in perfect_squares\"\nassert     perfect_squares(1, 2) == 4, \"error in perfect_squares\"\nassert     perfect_squares(1, 4) == 8, \"error in perfect_squares\"\nassert     perfect_squares(2, 4) == 16, \"error in perfect_squares\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perfect_squares(4, -4) == [-1, -1]\nassert perfect_squares(8, 0) == [-1, -1]\nassert perfect_squares(9, 10) == [9, 10]\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     polar_rect(0, 0) == (0, 0)\nassert     polar_rect(1, 1) == (0, 1)\nassert     polar_rect(1, 2) == (0, 1.5)\nassert     polar_rect(1, 3) == (0.5, 1)\nassert     polar_rect(1, 4) == (0.5, 1.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     polar_rect(1,2) == (3.0,4.0)\nassert     polar_rect(1,1) == (0.0,0.0)\n\ndef polar_rect2(r,th):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     polar_rect(1, 1) == (1, 1)\nassert     polar_rect(2, 0) == (2, 0)\nassert     polar_rect(0, 2) == (0, 2)\nassert     polar_rect(0, 0) == (0, 0)\nassert     polar_rect(0, 1) == (0, 1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     polar_rect(0,0) == (0,0)\nassert     polar_rect(1,0) == (1,0)\nassert     polar_rect(2,0) == (2,0)\nassert     polar_rect(0,1) == (0,1)\nassert     polar_rect(1,1) == (1,1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     polar_rect(0,1) == (0,1), \"Wrong Answer\"\nassert     polar_rect(1,0) == (1,0), \"Wrong Answer\"\nassert     polar_rect(3,3) == (3,3), \"Wrong Answer\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     polar_rect(3, 4) == (3, 4)\nassert     polar_rect(3.7, -3.2) == (3.7, -3.2)\nassert     polar_rect(0, 0) == (0, 0)\nassert     polar_rect(0.5, 0.25) == (1, 0.5)\nassert     polar_rect(0.5, -0.25) == (1, -0.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1, 2, 3, 4]) == (1, 2, 3, 4), 'First element should be swapped with the last element.'\nassert     swap_List([5, 6, 7, 8]) == (5, 6, 7, 8), 'Last element should be swapped with the first element.'\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List(newList) == None\nassert swap_List([2,3,5,6,7,8]) == None\nassert swap_List([1,2,3,4,5]) == None\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [1,2,3,4,5,6], \"Test Fail\"\nassert swap_List([6,5,4,3,2,1]) == [1,2,3,4,5,6], \"Test Fail\"\nassert swap_List([]) == [], \"Test Fail\"\nassert swap_List([1,2,3,4,5,6]) == [1,6,3,4,5,2], \"Test Fail\""
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_List(newList): \n    '''\n    Write a python function to calculate the sum of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1, 2, 3, 4, 5, 6, 7]) == [7, 1, 2, 3, 4, 5, 6]\nassert     swap_List([5, 6, 7, 8, 9, 10, 11]) == [11, 5, 6, 7, 8, 9, 10]\nassert     swap_List([2, 1]) == [1, 2]\nassert     swap_List([2, 3]) == [3, 2]\nassert     swap_List([]) == []\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1], 'List not swapped'\nprint('Test passed\\n')\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1,2,3,4]) == [2,1,3,4]\n\ndef swap_List_1(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List([0,1,2,3]) == [0,3,2,1], \"The function should return a new list with first and last items swapped\"\nassert     swap_List([4,5,6,7]) == [7,6,5,4], \"The function should return a new list with first and last items swapped\"\nassert     swap_List([1,2,3,4]) == [4,3,2,1], \"The function should return a new list with first and last items swapped\"\nassert     swap_List([2,3,4,1]) == [1,4,3,2], \"The function should return a new list with first and last items swapped\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert swap_List([1,2,3,4]) == [4,1,2,3]\nassert swap_List([1,2,3,4,5]) == [4,5,1,2,3]\nassert swap_List([1,2,3,4,5,6]) == [4,5,6,1,2,3]\nassert swap_List([1,2,3,4,5,6,7,8]) == [4,5,6,7,1,2,3,8]\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(3,2) == 3\nassert     binomial_Coeff(4,2) == 10\nassert     binomial_Coeff(5,2) == 30\nassert     binomial_Coeff(100,5) == 354224848179261915075\nassert     binomial_Coeff(100,100) == 68578247410604007854\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # 1st case\n    binomial_Coeff(1,1) == 1\n    # 2nd case\n    binomial_Coeff(2,2) == 2\n    # 3rd case\n    binomial_Coeff(3,3) == 8\n    # 4th case\n    binomial_Coeff(4,4) == 17\n    # 5th case\n    binomial_Coeff(5,5) == 35\n    # 6th case\n    binomial_Coeff(6,6) == 63\n    # 7th case\n    binomial_Coeff(7,7) == 126\n    # 8th case\n    binomial_Coeff(8,8) == 256\n    # 9th case\n    binomial_Coeff(9,9) == 610\n    # 10th case\n    binomial_Coeff(10,10) == 2520\n    # 11th case\n    binomial_Coeff(11,11) == 1806\n    # 12th case\n    binomial_Coeff(12,12) == 1944\n    # 13th case\n    binomial_Coeff(13,13) == 2445\n    # 14th case\n    binomial_Coeff(14,14) == 947\n    # 15th case\n    binomial_Coeff(15,15) == 2875\n    # 16th case\n    binomial_Coeff(16,16) == 8816\n    # 17th case\n    binomial_Coeff(17,17) == 103326\n    # 18th case\n    binomial_Coeff(18,18) == 154515\n    # 19th case\n    binomial_Coeff(19,19) == 217087\n    # 20th case\n    binomial_Coeff(20,20) == 355687\n    # 21st case\n    binomial_Coeff(21,21) == 723929\n    # 22nd case\n    binomial_Coeff(22,22) == 1400882\n    # 23rd case\n    binomial_Coeff(23,23) == 2917691\n    # 24th case\n    binomial_Coeff(24,24) == 2917691\n    # 25th case\n    binomial_Coeff(25,25) == 244595\n    # 26th case\n    binomial_Coeff(26,26) == 335533\n    # 27th case\n    binomial_Coeff(27,27) == 335035\n    # 28th case\n    binomial_Coeff(28,28) == 1224274\n    # 29th case\n    binomial_Coeff(29,29) == 154935\n    # 30th case\n    binomial_Coeff(30,30) == 2199856\n    # 31st case\n    binomial_Coeff(31,31) == 397175\n    # 32nd case\n    binomial_Coeff(32,32) == 393696\n    # 33th case\n    binomial_Coeff(33,33) == 1872838\n    # 34th case\n    binomial_Coeff(34,34) == 2765550\n    # 35th case\n    binomial_Coeff(35,35) == 3821384\n    # 36th case\n    binomial_Coeff(36,36) == 3821384\n    # 37th case\n    binomial_Coeff(37,37) == 3883736\n    # 38th case\n    binomial_Coeff(38,38) == 3883736\n    # 39th case\n    binomial_Coeff(39,39) == 405956\n    # 40th case\n    binomial_Coeff(40,40) == 537624\n    # 41st case\n    binomial_Coeff(41,41) == 782803\n    # 42nd case\n    binomial_Coeff(42,42) == 782803\n    # 43th case\n    binomial_Coeff(43,43) == 854175\n    # 44th case\n    binomial_Coeff(44,44) == 928150\n    # 45th case\n    binomial_Coeff(45,45) == 928150\n    # 46th case\n    binomial_Coeff(46,46) == 1043760\n    # 47th case\n    binomial_Coeff(47,47) == 1043760\n    # 48th case\n    binomial_Coeff(48,48) == 1155472\n    # 49th case\n    binomial_Coeff(49,49) == 1169648\n    # 50th case\n    binomial_Coeff(50,50) == 1169648\n    # 51st case\n    binomial_Coeff(51,51) == 1255218\n    # 52nd case\n    binomial_Coeff(52,52) == 1255218\n    # 53th case\n    binomial_Coeff(53,53) == 1262784\n    # 54th case\n    binomial_Coeff(54,54) == 1262784\n    # 55th case\n    binomial_Coeff(55,55) == 1312702\n    # 56th case\n    binomial_Coeff(56,56) == 1312702\n    # 57th case\n    binomial_Coeff(57,57) == 1420890\n    # 58th case\n    binomial_Coeff(58,58) == 1420890\n    # 59th case\n    binomial_Coeff(59,59) == 1505200\n    # 60th case\n    binomial_Coeff(60,60) == 1505200\n    # 61st case\n    binomial_Coeff(61,61) == 1608190\n    # 62nd case\n    binomial_Coeff(62,62) == 1608190\n    # 63th case\n    binomial_Coeff(63,63) == 1821054\n    # 64th case\n    binomial_Coeff(64,64) == 1821054\n    # 65th case\n    binomial_Coeff(65,65) == 2548450\n    # 66th case\n    binomial_Coeff(66,66) == 2548450\n    # 67th case\n    binomial_Coeff(67,67) == 2609456\n    # 68th case\n    binomial_Coeff(68,68) == 2609456\n    # 69th case\n    binomial_Coeff(69,69) == 2710698\n    # 70th case\n    binomial_Coeff(70,70) == 2710698\n    # 71st case\n    binomial_Coeff(71,71) == 2937762\n    # 72nd case\n    binomial_Coeff(72,72) == 2937762\n    # 73th case\n    binomial_Coeff(73,73) == 3097378\n    # 74th case\n    binomial_Coeff(74,74) == 3097378\n    # 75th case\n    binomial_Coeff(75,75) == 3212206\n    # 76th case\n    binomial_Coeff(76,76) == 3212206\n    # 77th case\n    binomial_Coeff(77,77) == 3317694\n    # 78th case\n    binomial_Coeff(78,78) == 3317694\n    # 79th case\n    binomial_Coeff(79,79) == 3443700\n    # 80th case\n    binomial_Coeff(80,80) == 3443700\n    # 81st case\n    binomial_Coeff(81,81) == 3461792\n    # 82nd case\n    binomial_Coeff(82,82) == 3461792\n    # 83th case\n    binomial_Coeff(83,83) == 3520112\n    # 84th case\n    binomial_Coeff(84,84) == 3520112\n    # 85th case\n    binomial_Coeff(85,85) == 3656064\n    # 86th case\n    binomial_Coeff(86,86) == 3656064\n    # 87th case\n    binomial_Coeff(87,87) == 3662888\n    # 88th case\n    binomial_Co"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef ex1():\n    '''\n    Write a python function to find the sum of the product of the first n consecutive binomial coefficients.\n    '''\n    # your code goes here\n    pass\n\ndef ex2():\n    '''\n    Write a python function to find the sum of the product of the first k consecutive binomial coefficients.\n    '''\n    # your code goes here\n    pass\n\ndef ex3():\n    '''\n    Write a python function to find the sum of the product of the first n consecutive binomial coefficients.\n    '''\n    # your code goes here\n    pass\n\ndef ex4():\n    '''\n    Write a python function to find the sum of the product of the first k consecutive binomial coefficients.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     binomial_Coeff(4,4) ==    1\nassert     binomial_Coeff(4,2) ==    3\nassert     binomial_Coeff(1,1) ==    1\nassert     binomial_Coeff(0,0) ==    1\nassert     binomial_Coeff(2,3) ==    5\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n10\n12\n7\n6\n5\n4\n3\n2\n1\n'''"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     binomial_Coeff(2,2) == 4\nassert     binomial_Coeff(3,5) == 0\nassert     binomial_Coeff(7,1) == 7\nassert     binomial_Coeff(0,10) == 0\nassert     binomial_Coeff(10,1) == 10\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(0,0) == 0\nassert    binomial_Coeff(1,0) == 1\nassert    binomial_Coeff(2,0) == 1\nassert    binomial_Coeff(3,0) == 1\nassert    binomial_Coeff(4,0) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(10,10) == 99, \"incorrect\"\nassert     binomial_Coeff(10,5) == 12, \"incorrect\"\nassert     binomial_Coeff(7,0) == 1, \"incorrect\"\nassert     binomial_Coeff(1,0) == 1, \"incorrect\"\nassert     binomial_Coeff(6,2) == 12, \"incorrect\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     removezero_ip('255.255.255.256') == '255.255.255.256'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('255.255.255.256.0') == '255.255.255.256.0'\nassert     removezero_ip('0.0.0.0.0') == '0.0.0.0.0'\nassert     removezero_ip('255.255.255.256.0.0') == '255.255.255.256.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip('0.0.0.0') == '0.0.0.0', \"Error: removezero_ip(\" + str(removezero_ip) + \")\"\nassert     removezero_ip('255.255.255.255') == '255.255.255.255', \"Error: removezero_ip(\" + str(removezero_ip) + \")\"\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', \"Error: removezero_ip(\" + str(removezero_ip) + \")\"\nassert     removezero_ip('255.255.255.255') == '255.255.255.255', \"Error: removezero_ip(\" + str(removezero_ip) + \")\"\nassert     removezero_ip('192.168.1.0') == '192.168.1.0', \"Error: removezero_ip(\" + str(removezero_ip) + \")\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     removezero_ip('192.0.2.0') == '192.0.2.0'\nassert     removezero_ip('192.0.2.01') == '192.0.2.1'\nassert     removezero_ip('192.0.2.0') == '192.0.2.0'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('192.0.2.01') == '192.0.2.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     removezero_ip(    \"0.1.2.3\") == \"1.2.3\"\nassert     removezero_ip(    \"0.1.2.3\") == \"1.2.3\"\nassert     removezero_ip(    \"0.1.2.3\") == \"1.2.3\"\nassert     removezero_ip(    \"0.1.2.3\") == \"1.2.3\"\nassert     removezero_ip(    \"1.2.3\") == \"1.2.3\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     removezero_ip('192.0.2.5')=='192.2.5.5'\nassert     removezero_ip('192.16.32.1')=='192.2.32.1'\nassert     removezero_ip('192.16.32.0')=='192.2.32.0'\nassert     removezero_ip('192.0.0.2')=='192.0.2.0'\nassert     removezero_ip('192.0.0.0')=='192.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     removezero_ip(\"192.168.0.0\") == \"192.168.0.0\"\nassert     removezero_ip(\"192.168.000.0\") == \"192.168.000.0\"\nassert     removezero_ip(\"192.168.0.00\") == \"192.168.0.0\"\nassert     removezero_ip(\"192.168.000.0\") == \"192.168.0.0\"\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(\"0+\", \"\", ip)\n    if len(ip) == 0:\n        return \"\"\n    elif len(ip) == 1:\n        if ip == \"0\":\n            return \"\"\n        else:\n            return ip\n    else:\n        if ip == \"0.0.0.0\":\n            return \"\"\n        else:\n            return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert removezero_ip('0.0.0.0') == '0.0.0.0'\nassert removezero_ip('0.1.1.1') == '1.1.1'\nassert removezero_ip('0.255.255.255') == '255.255.255'\nassert removezero_ip('0.0.1.1') == '1.1.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip('0.1.1.1') == '1.1.1.1', 'Fail: Correctly remove leading zero.'\nassert     removezero_ip('0.01.01.01') == '1.01.01.01', 'Fail: Correctly remove leading zero.'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', 'Fail: Correctly remove leading zero.'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', 'Fail: Correctly remove leading zero.'\nassert     removezero_ip('0.000.000.000') == '0.000.000.000', 'Fail: Correctly remove leading zero.'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     removezero_ip('192.0.2.10') == '192.2.10.10'\nassert     removezero_ip('0.1.2.3') == '1.2.3'\nassert     removezero_ip('0.1.0.2') == '1.0.2'\nassert     removezero_ip('1.2.3.4') == '1.2.3.4'\nassert     removezero_ip('192.0.2.10.10.10.10') == '192.2.10.10.10.10.10'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\nassert diff_even_odd([1, 2, 3, 4, 5, 6]) == 4\nassert diff_even_odd([10, 8, 6, 4, 2]) == 4\nassert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     diff_even_odd([-10,-9,-8,-7,-6,7,8,9,10]) == 1\nassert     diff_even_odd([-10,-9,-8,-7,-6,7,8,9,10,11]) == -2\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 9\nassert     diff_even_odd([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 9\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == -2\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     diff_even_odd([2,4,6,8,10,12]) == 6\nassert     diff_even_odd([2,4,5,6,8,10,12]) == -2\nassert     diff_even_odd([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]) == 0\nassert     diff_even_odd([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,34,36,38,40]) == -12\nassert     diff_even_odd([]) == 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     diff_even_odd([1,2,3,4]) == 1\nassert     diff_even_odd([1,2,3,4,5]) == 0\nassert     diff_even_odd([1,2,3,4,5,6]) == -1\nassert     diff_even_odd([1,2,3,4,5,6,7]) == 0\nassert     diff_even_odd([1,2,3,4,5,6,7,8]) == 1\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Checking the correctness of diff_even_odd() function: PASSED\")\nprint()\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     diff_even_odd([]) == []\nassert     diff_even_odd([1,2,3]) == 1\nassert     diff_even_odd([2,3,4]) == 1\nassert     diff_even_odd([1,2,3,4,5]) == 1\nassert     diff_even_odd([3,4,5,6,7,8,9]) == 4\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Swaps('010101','011101') == 3, 'Wrong Answer'\n\ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Swaps('10','100') == 1, 'Wrong'\nassert     min_Swaps('101','101') == 0, 'Wrong'\nassert     min_Swaps('11','101') == 1, 'Wrong'\nassert     min_Swaps('10','10') == 0, 'Wrong'\nassert     min_Swaps('101','0') == 3, 'Wrong'\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Base case\n    if len(str1)!= len(str2) :\n        return -1\n    \n    # Create a dictionary\n    swap_dict = {}\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            if str1[i] not in swap_dict :\n                swap_dict[str1[i]] = i\n            else :\n                swap_dict[str1[i]] = -1\n\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i] not in swap_dict :\n            continue\n        else :\n            if str1[i] == str2[i] :\n                continue\n            if swap_dict[str1[i]] > -1 and swap_dict[str1[i]]!= i :\n                count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Swaps('10', '101') == 2\nassert     min_Swaps('1111', '1111') == 0\nassert     min_Swaps('00010101', '00010101') == 0\nassert     min_Swaps('0011100', '0101') == 3"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Swaps('100000','101010') == 2\nassert min_Swaps('111111','000011') == 3\nassert min_Swaps('111111','000010') == 2\nassert min_Swaps('111111','000001') == 1\nassert min_Swaps('111111','000000') == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef min_Swaps(str1,str2): \n    '''\n    Takes as input two strings str1 and str2 of equal length.\n    The task is to count minimum number of swaps required to convert one string str1 to another string str2.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert min_Swaps('1000111','1010001') == 1\nassert min_Swaps('1010001','1000111') == -1\nassert min_Swaps('1000111','1000111') == 0\nassert min_Swaps('0010111','0011001') == -1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"The result of min_Swaps() is:\", min_Swaps(\"00010101\",\"101010101\"))"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef all_the_same(sequence):\n    '''\n    Given a sequence, write a function that returns True if all the elements of\n    the sequence are equal.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_size((1,2,3)) == 3\nassert     tuple_size((1.2,2.5,3)) == 3\nassert     tuple_size((\"a\",\"b\",\"c\")) == 3\nassert     tuple_size((\"x\",\"y\",\"z\")) == 3\nassert     tuple_size((\"\",\"\",\"\")) == 0\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert tuple_size((1,2)) == 2\nassert tuple_size((1,2,3)) == 5\nassert tuple_size((1,2,3,4,5)) == 9\nassert tuple_size((1,2,3,4,5,6,7)) == 13\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_size(()) == 1, \"tuple_size should be 1\"\nassert tuple_size((1,)) == 1, \"tuple_size should be 1\"\nassert tuple_size((1,2)) == 2, \"tuple_size should be 2\"\nassert tuple_size((1,2,3)) == 3, \"tuple_size should be 3\"\nassert tuple_size((1,2,3,4)) == 4, \"tuple_size should be 4\"\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_size([1,2,3]) == 3\nassert     tuple_size((1,2,3)) == 3\nassert     tuple_size(('a','b',1)) == 3\n\ndef all_same(tuple_list):\n    '''\n    Write a function that checks whether all the elements are the same.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_size((1,2,3,4)) == 8 \nassert tuple_size((1,2,3,4,5,6,7,8,9,10,11,12)) == 24\n\nprint(\"check done\")\n\nprint(\" \")\ndef sum_list(list_a, list_b):\n    '''\n    Write a function to sum the two given lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_size([]) == 0\nassert    tuple_size([1,2]) == 4\nassert    tuple_size([1,2,3]) == 8\nassert    tuple_size(()) == 0\nassert    tuple_size([1,2,3,4,5]) == 20\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert tuple_size([(1, 2, 3, 4), 'a', []]) == 8\nassert tuple_size((1,2,3,4,5,6)) == 8\n\ndef min_max_element(tuple_list):\n    '''\n    Write a function to find the minimum and maximum element in a given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndef test_tuple_size():\n    '''\n    Tests tuple_size\n    '''\n    assert tuple_size((1, 2, 3, 4, 5, 6, 7)) == 10\n    assert tuple_size((1, 2, 3)) == 5\n    assert tuple_size(()) == 0\n\ndef test_tuple_size2():\n    '''\n    Tests tuple_size\n    '''\n    "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_size((1,2,3,4,5,6)) == 9\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11)) == 23\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_kth([10, 20, 30], [10, 40, 50], 1) == 20\nassert     find_kth([10, 20, 30], [10, 40, 50], 3) == 30\nassert     find_kth([10, 20, 30], [10, 40, 50], 0) == 10\nassert     find_kth([10, 20, 30], [10, 40, 50], 51) == None\nassert     find_kth([1, 2, 3], [10, 20, 30], 3) == 2\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_kth([1,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], 1) == 3\nassert     find_kth([1,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], 2) == 6\nassert     find_kth([1,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], 3) == 5\nassert     find_kth([1,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], 4) == 7\nassert     find_kth([1,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], 5) == 8\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_kth([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 3) == 3\nassert     find_kth([1, 2, 3, 4], [2, 4, 6, 8, 10], 5) == 4\nassert     find_kth([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 6) == 5\nassert     find_kth([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 1) == 1\nassert     find_kth([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 2) == 2\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_kth([], [], 10) == None\nassert     find_kth([1], [2], 1) == None\nassert     find_kth([1], [2], 2) == 1\nassert     find_kth([1], [2], 3) == 2\nassert     find_kth([1], [2], 4) == 2\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_kth([1,2,3,4,5,6,7], [7,6,5,4,3,2,1], 5) == 5\nassert find_kth([1,2,3,4,5,6,7], [7,6,5,4,3,2,1], 6) == 6\nassert find_kth([1,2,3,4,5,6,7], [7,6,5,4,3,2,1], 10) == 7\nassert find_kth([1,2,3,4,5,6,7], [7,6,5,4,3,2,1], 1) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4]\n\narr1_index = 0\narr2_index = 0\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_kth([1,3,4,5,6,7], [4,6,8], 5) == 5\nassert find_kth([1,3,4,5,6,7], [4,6,8], 1) == 1\nassert find_kth([1,3,4,5,6,7], [4,6,8], 0) == 1\nassert find_kth([1,3,4,5,6,7], [4,6,8], 2) == 4\nassert find_kth([1,3,4,5,6,7], [4,6,8], 3) == 6\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_kth([1, 3, 5, 7], [2, 4, 6, 8], 4) == 5\nassert     find_kth([1, 3, 5, 7], [2, 4, 6, 8], 5) == 5\nassert     find_kth([1, 3, 5, 7], [2, 4, 6, 8], 6) == 6\nassert     find_kth([1, 3, 5, 7], [2, 4, 6, 8], 7) == 7\nassert     find_kth([1, 3, 5, 7], [2, 4, 6, 8], 8) == 8\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_kth([1, 5, 7, 7], [2, 4, 6, 8], 3) == 7\nassert     find_kth([1, 5, 7, 7], [2, 4, 6, 8], 2) == 4\nassert     find_kth([1, 5, 7, 7], [2, 4, 6, 8], 7) == 7\n\n\ndef find_kth_last(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(number):\n    '''\n    Write a program that takes a number as input and checks whether the given number is a prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(1020) == True\nassert     armstrong_number(112233) == True\nassert     armstrong_number(123456789) == False\nassert     armstrong_number(12345678910) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     armstrong_number(10) == False, \"armstrong_number(10) should be False\"\nassert     armstrong_number(153) == True, \"armstrong_number(153) should be True\"\nassert     armstrong_number(10) == False, \"armstrong_number(10) should be False\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     armstrong_number(28) == True\nassert     armstrong_number(7) == False\nassert     armstrong_number(1234) == False\n\n'''\nSolution:\n\ndef armstrong_number(number):\n    string_number = str(number)\n    length_string = len(string_number)\n    temp = number\n    i = 0\n    while i < length_string:\n        temp = temp * 10 + int(string_number[i])\n        i += 1\n    return temp == number\n'''\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(armstrong_number(9))\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(9)     ==    True,     \"9 is an Armstrong number\"\nassert     armstrong_number(1)     ==    False,     \"1 is not an Armstrong number\"\nassert     armstrong_number(3)     ==    True,     \"3 is an Armstrong number\"\nassert     armstrong_number(5)     ==    False,     \"5 is not an Armstrong number\"\nassert     armstrong_number(2**3)     ==    True,     \"2**3 is an Armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \narmstrong_number(153) == True\narmstrong_number(689) == True\narmstrong_number(10) == True\narmstrong_number(56) == Fals"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \narmstrong_number(153)\narmstrong_number(207)\narmstrong_number(421)\narmstrong_number(2071)\narmstrong_number(0)\narmstrong_number(-123)"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     armstrong_number(3) == False\nassert     armstrong_number(13) == True\nassert     armstrong_number(2) == True\n\ndef n_digits(number):\n    '''\n    Write a function to find the number of digits of the number.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_average(1) == 0\nassert     sum_average(2) == 1\nassert     sum_average(3) == 1\nassert     sum_average(5) == 2\nassert     sum_average(8) == 3\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_average(0) == 0\nassert     sum_average(1) == 1\nassert     sum_average(2) == 2\nassert     sum_average(3) == 3\nassert     sum_average(5) == 5\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(3) == 2.0\nassert     sum_average(4) == 3.0\nassert     sum_average(8) == 6.0\nassert     sum_average(12) == 15.0\nassert     sum_average(15) == 21.0"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_average(0) == 0, \"Test 1 failed\"\nassert     sum_average(2) == 1.0, \"Test 2 failed\"\nassert     sum_average(5) == 3.0, \"Test 3 failed\"\nassert     sum_average(10) == 5.0, \"Test 4 failed\"\nassert     sum_average(20) == 15.0, \"Test 5 failed\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_average(5) == 15\nassert     sum_average(2) == 5\nassert     sum_average(10) == 30\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_average(1) == 0, \"sum_average should return 0 for n = 1\"\nassert     sum_average(2) == 1, \"sum_average should return 1 for n = 2\"\nassert     sum_average(3) == 1, \"sum_average should return 1 for n = 3\"\nassert     sum_average(4) == 1, \"sum_average should return 1 for n = 4\"\nassert     sum_average(5) == 3, \"sum_average should return 3 for n = 5\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_average(1) == 1 \nassert     sum_average(3) == 2\nassert     sum_average(5) == 8\nassert     sum_average(10) == 33\nassert     sum_average(20) == 65\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_word_occurences(sentence, word):\n    '''\n    Write a function that counts the number of occurences of word in a sentence\n    '''\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Even(4) == True\nassert     is_Even(3) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_Even(1) # True\nis_Even(2) # False\nis_Even(3) # False\nis_Even(4) # True\nis_Even(5) # False\nis_Even(6) # False\nis_Even(7) # True\nis_Even(8) # False\nis_Even(9) # True\nis_Even(10) # False\nis_Even(11) # True\nis_Even(12) # False\nis_Even(13) # True\nis_Even(14) # False\nis_Even(15) # True\nis_Even(16) # False\nis_Even(17) # True\nis_Even(18) # False\nis_Even(19) # True\nis_Even(20) # False\nis_Even(21) # True\nis_Even(22) # False\nis_Even(23) # True\nis_Even(24) # False\nis_Even(25) # True\nis_Even(26) # False\nis_Even(27) # True\nis_Even(28) # False\nis_Even(29) # True\nis_Even(30) # False\nis_Even(31) # True\nis_Even(32) # False\nis_Even(33) # True\nis_Even(34) # False\nis_Even(35) # True\nis_Even(36) # False\nis_Even(37) # True\nis_Even(38) # False\nis_Even(39) # True\nis_Even(40) # False\nis_Even(41) # True\nis_Even(42) # False\nis_Even(43) # True\nis_Even(44) # False\nis_Even(45) # True\nis_Even(46) # False\nis_Even(47) # True\nis_Even(48) # False\nis_Even(49) # True\nis_Even(50) # False\nis_Even(51) # True\nis_Even(52) # False\nis_Even(53) # True\nis_Even(54) # False\nis_Even(55) # True\nis_Even(56) # False\nis_Even(57) # True\nis_Even(58) # False\nis_Even(59) # True\nis_Even(60) # False\nis_Even(61) # True\nis_Even(62) # False\nis_Even(63) # True\nis_Even(64) # False\nis_Even(65) # True\nis_Even(66) # False\nis_Even(67) # True\nis_Even(68) # False\nis_Even(69) # True\nis_Even(70) # False\nis_Even(71) # True\nis_Even(72) # False\nis_Even(73) # True\nis_Even(74) # False\nis_Even(75) # True\nis_Even(76) # False\nis_Even(77) # True\nis_Even(78) # False\nis_Even(79) # True\nis_Even(80) # False\nis_Even(81) # True\nis_Even(82) # False\nis_Even(83) # True\nis_Even(84) # False\nis_Even(85) # True\nis_Even(86) # False\nis_Even(87) # True\nis_Even(88) # False\nis_Even(89) # True\nis_Even(90) # False\nis_Even(91) # True\nis_Even(92) # False\nis_Even(93) # True\nis_Even(94) # False\nis_Even(95) # True\nis_Even(96) # False\nis_Even(97) # True\nis_Even(98) # False\nis_Even(99) # True\nis_Even(100) # False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Even(2) == True, \"number should be even\"\nassert     is_Even(4) == False, \"number should be even\"\nassert     is_Even(8) == True, \"number should be even\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Even(2) == False, \"is_Even() function is incorrectly implemented.\"\nassert     is_Even(8) == True, \"is_Even() function is incorrectly implemented.\""
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Even(2) == False, \"Error in is_Even\"\nassert is_Even(4) == True, \"Error in is_Even\"\nassert is_Even(2) == True, \"Error in is_Even\"\nassert is_Even(-2) == False, \"Error in is_Even\"\nassert is_Even(-4) == True, \"Error in is_Even\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    is_Even(1) == False\n    is_Even(2) == True\n    is_Even(3) == True\n\nprint('Test case passed')\nprint('------------------------------------')\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_Even(4) == False \nis_Even(5) == True \nis_Even(6) == False \nis_Even(7) == True \nis_Even(8) == True \nis_Even(8) == False \nis_Even(9) == False "
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Even(1) == False\nassert     is_Even(2) == True\nassert     is_Even(-1) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Even(4) == True, \"should return true\"\nassert     is_Even(8) == False, \"should return false\"\nassert     is_Even(\"hello\") == False, \"should return false\"\nassert     is_Even(9.99) == True, \"should return true\"\nassert     is_Even(0) == True, \"should return true\"\nprint(\"All the tests are passed\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Even(0) == True, \"error\"\nassert     is_Even(-1) == False, \"error\"\nassert     is_Even(2) == True, \"error\"\nassert     is_Even(4) == False, \"error\"\nassert     is_Even(10) == True, \"error\"\nprint('All the tests passed')\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char(\"abcabc\") == 'a'\nassert first_repeated_char(\"abcabcabc\") == 'a'\nassert first_repeated_char(\"abcabcabcabc\") == 'a'\nassert first_repeated_char(\"abcabcbca\") == 'a'\nassert first_repeated_char(\"abcabcabcabcabc\") == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char('strawberry') == 'r', 'This should return r.'\nassert     first_repeated_char('apple') == 'a', 'This should return a.'\nassert     first_repeated_char('strawberry') == 'r', 'This should return r.'\nassert     first_repeated_char('a') == 'a', 'This should return a.'\n\n\ndef first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_repeated_char(\"Mojitaka\") == 'K', \"Expected 'K', got 'M'\"\nassert     first_repeated_char(\"Mojitaka\") == 'K', \"Expected 'K', got 'M'\"\nassert     first_repeated_char(\"Mojitaka\") == 'K', \"Expected 'K', got 'M'\"\nassert     first_repeated_char(\"Mojitaka\") == 'K', \"Expected 'K', got 'M'\"\nassert     first_repeated_char(\"Mojitaka\") == 'K', \"Expected 'K', got 'M'\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_repeated_char('abcd') == -1\nassert     first_repeated_char('abac') == 0\nassert     first_repeated_char('abab') == 2\nassert     first_repeated_char('aaa') == -1\nassert     first_repeated_char('aaaaaa') == -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('\\n\\tFirst Repeated Character Test 1: ',\n    first_repeated_char('aabccde') == 'c', \n    '\\tFirst Repeated Character Test 2: ',\n    first_repeated_char('abcdeee') == '',\n    '\\tFirst Repeated Character Test 3: ',\n    first_repeated_char('abcdeea') == 'a',\n    '\\tFirst Repeated Character Test 4: ',\n    first_repeated_char('abcdeea') == 'b',\n    '\\tFirst Repeated Character Test 5: ',\n    first_repeated_char('abcdeea') == 'c')\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char('ABCDCDC') == 'C', 'First wrong'\nassert     first_repeated_char('ABCDABCDCDC') == 'C', 'Second wrong'\nassert     first_repeated_char('ABCDCCDABCDCDC') == 'C', 'Third wrong'\nassert     first_repeated_char('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'X', 'Fourth wrong'\nassert     first_repeated_char('ABCDEBCD') == 'C', 'Fifth wrong'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char(\"abcd\") == -1, \"first_repeated_char does not work as expected\"\nassert     first_repeated_char(\"wxyz\") == -1, \"first_repeated_char does not work as expected\"\nassert     first_repeated_char(\"wxyza\") == -1, \"first_repeated_char does not work as expected\"\nassert     first_repeated_char(\"wxyzw\") == -1, \"first_repeated_char does not work as expected\"\nassert     first_repeated_char(\"wxyzawxyz\") == -1, \"first_repeated_char does not work as expected\"\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_ludic(1) == [[1]]\nassert     get_ludic(2) == [[1, 1], [1, 2]]\nassert     get_ludic(3) == [[1, 1, 1], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 3, 1], [1, 3, 3]]\nassert     get_ludic(4) == [[1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 1, 3], [1, 1, 2, 1], [1, 1, 2, 2], [1, 1, 2, 3], [1, 1, 3, 1], [1, 1, 3, 2], [1, 2, 1, 1], [1, 2, 1, 2], [1, 2, 1, 3], [1, 2, 2, 1], [1, 2, 2, 2], [1, 2, 2, 3], [1, 2, 3, 1], [1, 2, 3, 2], [1, 3, 1, 1], [1, 3, 1, 2], [1, 3, 1, 3], [1, 3, 2, 1], [1, 3, 2, 2], [1, 3, 2, 3], [1, 3, 3, 1], [1, 3, 3, 2], [1, 3, 3, 3]]\nassert     get_ludic(5) == [[1, 1, 1, 1, 1], [1, 1, 1, 1, 2], [1, 1, 1, 1, 3], [1, 1, 1, 2, 1], [1, 1, 1, 2, 2], [1, 1, 1, 2, 3], [1, 1, 1, 3, 1], [1, 1, 1, 3, 2], [1, 1, 2, 1, 1], [1, 1, 2, 1, 2], [1, 1, 2, 1, 3], [1, 1, 2, 2, 1], [1, 1, 2, 2, 2], [1, 1, 2, 2, 3], [1, 1, 2, 3, 1], [1, 1, 2, 3, 2], [1, 1, 3, 1, 1], [1, 1, 3, 1, 2], [1, 1, 3, 1, 3], [1, 1, 3, 2, 1], [1, 1, 3, 2, 2], [1, 1, 3, 2, 3], [1, 1, 3, 3, 1], [1, 1, 3, 3, 2], [1, 2, 1, 1, 1], [1, 2, 1, 1, 2], [1, 2, 1, 1, 3], [1, 2, 1, 2, 1], [1, 2, 1, 2, 2], [1, 2, 1, 2, 3], [1, 2, 1, 3, 1], [1, 2, 1, 3, 2], [1, 2, 2, 1, 1], [1, 2, 2, 1, 2], [1, 2, 2, 1, 3], [1, 2, 2, 2, 1], [1, 2, 2, 2, 2], [1, 2, 2, 2, 3], [1, 2, 2, 3, 1], [1, 2, 2, 3, 2], [1, 2, 3, 1, 1], [1, 2, 3, 1, 2], [1, 2, 3, 1, 3], [1, 2, 3, 2, 1], [1, 2, 3, 2, 2], [1, 2, 3, 2, 3], [1, 2, 3, 3, 1], [1, 3, 1, 1, 1], [1, 3, 1, 1, 2], [1, 3, 1, 1, 3], [1, 3, 1, 2, 1], [1, 3, 1, 2, 2], [1, 3, 1, 2, 3], [1, 3, 1, 3, 1], [1, 3, 1, 3, 2], [1, 3, 2, 1, 1], [1, 3, 2, 1, 2], [1, 3, 2, 1, 3], [1, 3, 2, 2, 1], [1, 3, 2, 2, 2], [1, 3, 2, 2, 3], [1, 3, 2, 3, 1], [1, 3, 2, 3, 2], [1, 3, 3, 1, 1], [1, 3, 3, 1, 2], [1, 3, 3, 1, 3], [1, 3, 3, 2, 1], [1, 3, 3, 2, 2], [1, 3, 3, 2, 3], [1, 3, 3, 3, 1], [1, 3, 3, 3, 2], [1, 4, 1, 1, 1], [1, 4, 1, 1, 2], [1, 4, 1, 1, 3], [1, 4, 1, 2, 1], [1, 4, 1, 2, 2], [1, 4, 1, 2, 3], [1, 4, 1, 3, 1], [1, 4, 1, 3, 2], [1, 4, 2, 1, 1], [1, 4, 2, 1, 2], [1, 4, 2, 1, 3], [1, 4, 2, 2, 1], [1, 4, 2, 2, 2], [1, 4, 2, 2, 3], [1, 4, 2, 3, 1], [1, 4, 2, 3, 2], [1, 4, 3, 1, 1], [1, 4, 3, 1, 2], [1, 4, 3, 1, 3], [1, 4, 3, 2, 1], [1, 4, 3, 2, 2], [1, 4, 3, 2, 3], [1, 4, 3, 3, 1], [1, 4, 3, 3, 2], [1, 4, 3, 3, 3]]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(10) == [2, 4, 6, 8, 10]\nassert     get_ludic(3) == [2, 4, 6, 8]\nassert     get_ludic(100) == list(range(1, 100))\nassert     get_ludic(0) == []\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_ludic(1) == []\nassert     get_ludic(2) == [1]\nassert     get_ludic(3) == [1, 2]\nassert     get_ludic(5) == [1, 2, 3, 4]\nassert     get_ludic(6) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_ludic(1) == []\nassert     get_ludic(2) == []\nassert     get_ludic(3) == [1, 2, 3]\nassert     get_ludic(4) == [1, 2, 3]\nassert     get_ludic(5) == [1, 2, 3]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(5) == [1,2,3,4,5,6,7,8,9], 'assert 0'\nassert     get_ludic(100) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], 'assert 1'\nassert     get_ludic(15) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], '"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_ludic(2) == [1]\nassert     get_ludic(3) == [1, 2]\nassert     get_ludic(4) == [1, 2, 3]\nassert     get_ludic(5) == [1, 2, 3, 4]\nassert     get_ludic(6) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(9) == [8, 9]\nassert     get_ludic(10) == []\nassert     get_ludic(11) == [11]\nassert     get_ludic(12) == []\nassert     get_ludic(13) == [13]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_words(\"hello\") == \"olleh\", \"Should be olleh\"\nassert     reverse_words(\"hello world\") == \"dlrow olleh\", \"Should be olleh world\"\nassert     reverse_words(\"hello   world\") == \"dlrow olleh\", \"Should be olleh world\"\nassert     reverse_words(\"hello    world\") == \"dlrow olleh\", \"Should be olleh world\"\nassert     reverse_words(\"hello world\") == \"dlrow olleh\", \"Should be olleh world\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_words(\"     hello     world   \") == \"world   hello     \"\nassert     reverse_words(\"I am leetcode\") == \"leetcode am I\"\nassert     reverse_words(\"123\") == \"321\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"     \") == \"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_words(\"  hello  world  \") == \"world  hello\"\nassert     reverse_words(\"I love Python\") == \"Python  I\"\nassert     reverse_words(\"a\") == \"a\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"   \") == \"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reverse_words_split(s):\n    '''\n    Write a function to split the given string into words and reverse the order of those words.\n    '''\n    pass"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nreverse_words(\"the sky is blue\") == \"blue is sky the\"\nreverse_words(\"a test\") == \"test a\"\nreverse_words(\"a test   \") == \"test a\"\nreverse_words(\"a      test\") == \"test a\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_words(\"The quick brown fox jumps\")     == \"jumps fox quick The\"\nassert     reverse_words(\"The quick brown fox jumps over the lazy dog\")     == \"dog over jumps fox The\"\nassert     reverse_words(\"\")                             == \"\"\nassert     reverse_words(\"a b c\")                         == \"c b a\"\nassert     reverse_words(\"I love the very kind of cats\")     == \"very kind of cats I love\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_words('Hello World') == 'dlroW olleH'\nassert     reverse_words('the quick brown fox') == 'heqiqx uickbdwof'\nassert     reverse_words('') == ''\nassert     reverse_words('a') == 'a'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert reverse_words(\"I don't like green eggs and ham\") == \"green eggs and ham don't like I\", \"failed test\"\nassert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_words(\"Let's take LeetCode contest\") == \"s'teL ekat edoCteeL tsetnoc\"\nassert     reverse_words(\"God Ding\") == \"doG gniD\"\nassert     reverse_words(\"God Ding\") == \"doG gniD\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"Let's take LeetCode contest\") == \"s'teL ekat edoCteeL tsetnoc\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef reverse_words_a(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_num(2) == True, '2 is not a prime number'\nassert     prime_num(8) == True, '8 is not a prime number'\nassert     prime_num(5) == False, '5 is not a prime number'\nassert     prime_num(0) == False, '0 is not a prime number'\n\n'''\nWrite a function to generate a list of n first names where n is a parameter.\n'''\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(prime_num(1)) # False\nprint(prime_num(2)) # True\nprint(prime_num(3)) # True\nprint(prime_num(4)) # True\nprint(prime_num(5)) # True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\nimport random\n\ndef is_prime(n):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prime_num(3) == True, \"The result should be True\"\nassert     prime_num(4) == False, \"The result should be False\"\nassert     prime_num(2) == True, \"The result should be True\"\nassert     prime_num(7) == True, \"The result should be True\"\nassert     prime_num(11) == True, \"The result should be True\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_num(2) == True, \"Error 1\"\nassert     prime_num(16) == True, \"Error 2\"\nassert     prime_num(29) == False, \"Error 3\"\nassert     prime_num(19) == False, \"Error 4\"\nassert     prime_num(4) == False, \"Error 5\"\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef deg_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(360) == 2*math.pi\nassert     radian_degree(0) == 0\nassert     radian_degree(5) == math.pi*5/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"We will test your function with degree=0\")\nradian_degree(0)\nprint(\"\\nWe will test your function with degree=90\")\nradian_degree(90)\nprint(\"\\nWe will test your function with degree=180\")\nradian_degree(180)\nprint(\"\\nWe will test your function with degree=270\")\nradian_degree(270)\nprint(\"\\nWe will test your function with degree=360\")\nradian_degree(360)\nprint(\"\\nWe will test your function with degree=400\")\nradian_degree(400)\nprint(\"\\nWe will test your function with degree=450\")\nradian_degree(450)\nprint(\"\\nWe will test your function with degree=500\")\nradian_degree(500)\nprint(\"\\nWe will test your function with degree=550\")\nradian_degree(550)\nprint(\"\\nWe will test your function with degree=600\")\nradian_degree(600)\nprint(\"\\nWe will test your function with degree=650\")\nradian_degree(650)\nprint(\"\\nWe will test your function with degree=700\")\nradian_degree(700)\nprint(\"\\nWe will test your function with degree=750\")\nradian_degree(750)\nprint(\"\\nWe will test your function with degree=800\")\nradian_degree(800)\nprint(\"\\nWe will test your function with degree=850\")\nradian_degree(850)\nprint(\"\\nWe will test your function with degree=900\")\nradian_degree(900)\nprint(\"\\nWe will test your function with degree=950\")\nradian_degree(950)\nprint(\"\\nWe will test your function with degree=1000\")\nradian_degree(1000)\nprint(\"\\nWe will test your function with degree=1050\")\nradian_degree(1050)\nprint(\"\\nWe will test your function with degree=1100\")\nradian_degree(1100)\nprint(\"\\nWe will test your function with degree=1150\")\nradian_degree(1150)\nprint(\"\\nWe will test your function with degree=1200\")\nradian_degree(1200)\nprint(\"\\nWe will test your function with degree=1250\")\nradian_degree(1250)\nprint(\"\\nWe will test your function with degree=1300\")\nradian_degree(1300)\nprint(\"\\nWe will test your function with degree=1350\")\nradian_degree(1350)\nprint(\"\\nWe will test your function with degree=1400\")\nradian_degree(1400)\nprint(\"\\nWe will test your function with degree=1450\")\nradian_degree(1450)\nprint(\"\\nWe will test your function with degree=1500\")\nradian_degree(1500)\nprint(\"\\nWe will test your function with degree=1550\")\nradian_degree(1550)\nprint(\"\\nWe will test your function with degree=1600\")\nradian_degree(1600)\nprint(\"\\nWe will test your function with degree=1650\")\nradian_degree(1650)\nprint(\"\\nWe will test your function with degree=1700\")\nradian_degree(1700)\nprint(\"\\nWe will test your function with degree=1750\")\nradian_degree(1750)\nprint(\"\\nWe will test your function with degree=1800\")\nradian_degree(1800)\nprint(\"\\nWe will test your function with degree=1850\")\nradian_degree(1850)\nprint(\"\\nWe will test your function with degree=1900\")\nradian_degree(1900)\nprint(\"\\nWe will test your function with degree=1950\")\nradian_degree(1950)\nprint(\"\\nWe will test your function with degree=2000\")\nradian_degree(2000)\nprint(\"\\nWe will test your function with degree=2050\")\nradian_degree(2050)\nprint(\"\\nWe will test your function with degree=2100\")\nradian_degree(2100)\nprint(\"\\nWe will test your function with degree=2148\")\nradian_degree(2148)\nprint(\"\\nWe will test your function with degree=2200\")\nradian_degree(2200)\nprint(\"\\nWe will test your function with degree=2248\")\nradian_degree(2248)\nprint(\"\\nWe will test your function with degree=2300\")\nradian_degree(2300)\nprint(\"\\nWe will test your function with degree=2348\")\nradian_degree(2348)\nprint(\"\\nWe will test your function with degree=2400\")\nradian_degree(2400)\nprint(\"\\nWe will test your function with degree=2448\")\nradian_degree(2448)\nprint(\"\\nWe will test your function with degree=2500\")\nradian_degree(2500)\nprint(\"\\nWe will test your function with degree=2548\")\nradian_degree(2548)\nprint(\"\\nWe will test your function with degree=2600\")\nradian_degree(2600)\nprint(\"\\nWe will test your function with degree=2648\")\nradian_degree(2648)\nprint(\"\\nWe will test your function with degree=2700\")\nradian_degree(2700)\nprint(\"\\nWe will test your function with degree=2748\")\nradian_degree(2748)\nprint(\"\\nWe will test your function with degree=2800\")\nradian_degree(2800)\nprint(\"\\nWe will test your function with degree=2848\")\nradian_degree(2848)\nprint(\"\\nWe will test your function with degree=2900\")\nradian_degree(2900)\nprint(\"\\nWe will test your function with degree=2948\")\nradian_degree(2948)\nprint(\"\\nWe will test your function with degree=3000\")\nradian_degree(3000)\nprint(\"\\nWe will test your function with degree=3048\")\nradian_degree(3048)\nprint(\"\\nWe will test your function with degree=3100\")\nradian_degree(3100)\nprint(\"\\nWe will test your function with degree=3148\")\nradian_degree(3148)\nprint(\"\\nWe will test your function with degree=3200\")\nradian_degree(3200)\nprint(\"\\nWe will test your function with degree=3248\")\nradian_degree(3248)\nprint(\"\\nWe will test your function with degree=3300\")\nradian_degree(3300)\nprint(\"\\nWe will test your function with degree=3348\")\nradian_degree(3348)\nprint(\"\\nWe will test your function with degree=3400\")\nradian_degree(3400)\nprint(\"\\nWe will test your function with degree=3448\")\nradian_degree(3448)\nprint(\"\\nWe will test your function with degree=3500\")\nradian_degree(3500)\nprint(\"\\nWe will test your function with degree=3548\")\nradian_degree(3548)\nprint(\"\\nWe will test your function with degree=3600\")\nradian_degree(3600)\nprint(\"\\nWe will test your function with degree=3648\")\nradian_degree(3648)\nprint(\"\\nWe will test your function with degree=3700\")\nradian_degree(3700)\nprint(\"\\nWe will test your function with degree=3748\")\nradian_degree(3748)\nprint(\"\\nWe will test your function with degree=3800\")\nradian_degree(3800)\nprint(\"\\nWe will test your function with degree=3848\")\nradian_degree(3848)\nprint(\"\\nWe will test your function with degree=3900\")\nradian_degree(3900)\nprint(\"\\nWe will test your function with degree=3948\")\nradian_degree(3948)\nprint(\"\\nWe will test your function with degree=4000\")\nradian_degree(4000)\nprint(\"\\nWe will test your function with degree=4048\")\nradian_degree(4048)\nprint(\"\\nWe will test your function with degree=4100\")\nradian_degree(4100)\nprint(\"\\nWe will test your function with degree=4148\")\nradian_degree(4148)\nprint(\"\\nWe will test your function with degree=4200\")\nradian_degree(4200)\nprint(\"\\nWe will test your function wit"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef degree_radian(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(360) == 2*math.pi\nassert radian_degree(0) == 0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(360) == 2*math.pi\nassert     radian_degree(0) == 0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nradian_degree(math.pi / 4) == 45\nradian_degree(math.pi / 6) == 30\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 2) == 90\nradian_degree(math.pi / 18) == 30\nradian_degree(math.pi / 12) == -45\nradian_degree(math.pi / 6) == -45\nradian_degree(math.pi) == 180\nradian_degree(math.pi / 5) == -90\nradian_degree(math.pi / 4) == 45\nradian_degree(math.pi / 3) == 60\nradian_degree(math.pi / 2) == 45\nradian_degree(math.pi / 6) == 30\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -30\nradian_degree(math.pi / 3) == 60\nradian_degree(math.pi / 4) == 45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -15\nradian_degree(math.pi / 6) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 2) == 90\nradian_degree(math.pi / 4) == 45\nradian_degree(math.pi / 5) == 30\nradian_degree(math.pi / 8) == 45\nradian_degree(math.pi / 10) == 75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math.pi / 10) == -75\nradian_degree(math.pi / 12) == -15\nradian_degree(math.pi / 18) == -45\nradian_degree(math.pi / 3) == -30\nradian_degree(math.pi / 4) == -45\nradian_degree(math.pi / 5) == -30\nradian_degree(math.pi / 8) == -45\nradian_degree(math"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals('hello world', 'he.o') == (2, 5)\nassert     find_literals('hello world', 'hello') == (0, 5)\nassert     find_literals('hello world', 'world') == (6, 11)\nassert     find_literals('hello world', 'o') == (3, 5)\n\ndef find_all_substrings(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all non-overlapping matches in the form of a list of tuples, where each tuple is of the form (substring, start index, end index).\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_literals('Replace this', 'literal') == ('literal', 10, 19)\nassert find_literals('Replace this', 'i') == ('i', 8, 9)\n\ndef find_regex_groups(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the list of matching substrings.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_literals('hello world!', '(world)') == (6, 8, 'world')\nassert find_literals('hello world!', '(world)') == (7, 9, 'world')\nassert find_literals('hello world!', '(world)') == (7, 9, 'world')\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals(\"abcdabcdefghijklmnop\", \"c\") == (4, 6, 'c')\nassert     find_literals(\"abcdabcdefghijklmnop\", \"ab\") == (0, 1, 'a')\nassert     find_literals(\"abcdabcdefghijklmnop\", \"bcdefghijklmnop\") == (3, 8, 'ghi')\nassert     find_literals(\"abcdabcdefghijklmnop\", \"bcdefg\") == (3, 4, 'ghi')\nassert     find_literals(\"abcdabcdefghijklmnop\", \"bcdefghi\") == (3, 5, 'ghi')\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_literals('', 'a') == (None, None, None)\nassert    find_literals('a', 'a') == (None, 1, 1)\nassert    find_literals('abbba', 'ba') == (None, 6, 8)\nassert    find_literals('abbba', 'aa') == (None, 1, 4)\nassert    find_literals('ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbbba.bbc.gov.uk/news/images/james.jpg'))\n    #"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_literals('abcdabcde', 'bc') == ('abcde', 6, 11)\nassert     find_literals('abcdabcde', 'a') == ('a', 0, 1)\nassert     find_literals('abcdabcde', 'ab') == ('ab', 0, 2)\nassert     find_literals('abcdabcde', 'abcd') == ('abcd', 0, 4)\nassert     find_literals('abcdabcde', 'cde') == ('cde', 3, 5)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals('''"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_literals('coding blocks', 'abcd') == ('coding', 0, 1)\nassert     find_literals('abcde', 'abcd') == ('', 0, 0)\nassert     find_literals('a a a b', 'a') == ('a', 0, 1)\nassert     find_literals('aaa aa a a a', 'a') == ('aaa', 0, 5)\n\n'''\nWrite a function to split the string into an array of words. The function should also return the length of each word.\n'''\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_literals('11AaaaBBbbBB', 'aA') == ('aA', 0, 3)\nassert     find_literals('11AaaaBBbbBB', 'Bb') == ('BBbbBB', 5, 8)\nassert     find_literals('11AaaaBBbbBB', 'BBb') == ('BBbbBB', 5, 7)\nassert     find_literals('11AaaaBBbbBB', 'BB') == ('BBbbBB', 5, 6)\nassert     find_literals('11AaaaBBbbBB', 'BBa') == ('BBbbBB', 5, 6)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 5\nassert     bell_Number(4) == 7\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_Number(0) == 1, \"bell_Number(0) should be 1\"\nassert     bell_Number(1) == 1, \"bell_Number(1) should be 1\"\nassert     bell_Number(2) == 2, \"bell_Number(2) should be 2\"\nassert     bell_Number(3) == 5, \"bell_Number(3) should be 5\"\nassert     bell_Number(4) == 13, \"bell_Number(4) should be 13\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_Number(0) == 1, \"bell_Number(0) = 1 is wrong\"\nassert     bell_Number(1) == 1, \"bell_Number(1) = 1 is wrong\"\nassert     bell_Number(2) == 2, \"bell_Number(2) = 2 is wrong\"\nassert     bell_Number(3) == 3, \"bell_Number(3) = 3 is wrong\"\nassert     bell_Number(4) == 5, \"bell_Number(4) = 5 is wrong\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_Number(1) == 1, \"bell_Number(1) failed\"\nassert     bell_Number(2) == 2, \"bell_Number(2) failed\"\nassert     bell_Number(3) == 5, \"bell_Number(3) failed\"\nassert     bell_Number(4) == 8, \"bell_Number(4) failed\"\nassert     bell_Number(5) == 15, \"bell_Number(5) failed\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_Number(2) == 1, \"Bell number of 2 should be 1\"\nassert     bell_Number(3) == 2, \"Bell number of 3 should be 2\"\nassert     bell_Number(4) == 3, \"Bell number of 4 should be 3\"\nassert     bell_Number(5) == 5, \"Bell number of 5 should be 5\"\nassert     bell_Number(6) == 8, \"Bell number of 6 should be 8\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_Number(1) == 1, \"1st bell number\"\nassert     bell_Number(2) == 1.5, \"2nd bell number\"\nassert     bell_Number(3) == 2.12, \"3rd bell number\"\nassert     bell_Number(4) == 3.125, \"4th bell number\"\nassert     bell_Number(5) == 4.2857, \"5th bell number\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 5\nbell_Number(4) == 14\nbell_Number(5) == 49\nbell_Number(6) == 153\nbell_Number(7) == 585\nbell_Number(8) == 8128\nbell_Number(9) == 13814\nbell_Number(10) == 26832\nbell_Number(11) == 62290\nbell_Number(12) == 73924\nbell_Number(13) == 120130\nbell_Number(14) == 265928\nbell_Number(15) == 737132\nbell_Number(16) == 1381400\nbell_Number(17) == 2683328\nbell_Number(18) == 6229044\nbell_Number(19) == 73924696\nbell_Number(20) == 120130960\nbell_Number(21) == 268332864\nbell_Number(22) == 62290448\nbell_Number(23) == 737132160\nbell_Number(24) == 1201330208\nbell_Number(25) == 2683328736\nbell_Number(26) == 622904480\nbell_Number(27) == 739247072\nbell_Number(28) == 1201331760\nbell_Number(29) == 2683328832\nbell_Number(30) == 622904480\nbell_Number(31) == 7371321760\nbell_Number(32) == 1201332944\nbell_Number(33) == 2683328864\nbell_Number(34) == 622904481\nbell_Number(35) == 7371321764\nbell_Number(36) == 1201332976\nbell_Number(37) == 26833288128\nbell_Number(38) == 622904481\nbell_Number(39) == 7371321777\nbell_Number(40) == 1201332992\nbell_Number(41) == 26833288192\nbell_Number(42) == 622904481\nbell_Number(43) == 7371321781\nbell_Number(44) == 1201333008\nbell_Number(45) == 26833288256\nbell_Number(46) == 622904481\nbell_Number(47) == 7371321782\nbell_Number(48) == 1201333024\nbell_Number(49) == 26833288384\nbell_Number(50) == 622904481\nbell_Number(51) == 7371321783\nbell_Number(52) == 1201333040\nbell_Number(53) == 2683328848\nbell_Number(54) == 622904482\nbell_Number(55) == 7371321784\nbell_Number(56) == 1201333056\nbell_Number(57) == 268332880\nbell_Number(58) == 622904482\nbell_Number(59) == 7371321785\nbell_Number(60) == 1201333072\nbell_Number(61) == 268332888\nbell_Number(62) == 622904483\nbell_Number(63) == 7371321786\nbell_Number(64) == 1201333088\nbell_Number(65) == 268332896\nbell_Number(66) == 622904483\nbell_Number(67) == 7371321787\nbell_Number(68) == 1201333112\nbell_Number(69) == 268332896\nbell_Number(70) == 622904484\nbell_Number(71) == 7371321788\nbell_Number(72) == 1201333124\nbell_Number(73) == 2683328992\nbell_Number(74) == 622904484\nbell_Number(75) == 7371321789\nbell_Number(76) == 1201333136\nbell_Number(77) == 26833289952\nbell_Number(78) == 622904485\nbell_Number(79) == 7371321790\nbell_Number(80) == 1201333145\nbell_Number(81) == 26833290416\nbell_Number(82) == 622904485\nbell_Number(83) == 7371321791\nbell_Number(84) == 1201333158\nbell_Number(85) == 26833290848\nbell_Number(86) == 622904486\nbell_Number(87) == 7371321792\nbell_Number(88) == 1201333172\nbell_Number(89) == 26833291232\nbell_Number(90) == 622904486\nbell_Number(91) == 7371321793\nbell_Number(92) == 12013331840\nbell_Number(93) == 26833291776\nbell_Number(94) == 622904487\nbell_Number(95) == 7371321794\nbell_Number(96) == 12013332224\nbell_Number(97) == 26833292592\nbell_Number(98) == 622904488\nbell_Number(99) == 7371321795\nbell_Number(100) == 12013332848\nbell_Number(101) == 26833293344\nbell_Number(102) == 622904489\nbell_Number(103) == 7371321796\nbell_Number(104) == 12013334032\nbell_Number(105) == 26833294784\nbell_Number(106) == 622904490\nbell_Number(107) == 7371321797\nbell_Number(108) == 12013334496\nbell_Number(109) == 26833295328\nbell_Number(110) == 622904491\nbell_Number(111) == 7371321798\nbell_Number(112) == 12013336480\nbell_Number(113) == 26833296112\nbell_Number(114) == 622904492\nbell_Number(115) == 7371321799\nbell_Number(116) == 12013337664\nbell_Number(117) == 26833296896\nbell_Number(118) == 622904493\nbell_Number(119) == 7371321800\nbell_Number(120) == 120133382496\nbell_Number(121) == 26833297792\nbell_Number(122) == 622904494\nbell_Number(123) == 7371321801\nbell_Number(124) == 120133384928\nbell_Number(125) == 26833298304\nbell_Number(126) == 622904495\nbell_Number(127) == 7371321802\nbell_Number(128) == 120133385728\nbell_Number(129) == 268332986432\nbell_Number(130) == 622904496\nbell_Number(131) == 7371321803\nbell_Number(132) == 120133387856\nbell_Number(133) == 268332989856\nbell_Number(134) == 622904497\nbell_Number(135) == 7371321804\nbell_Number(136) == 120133398304\nbell_Number(137) == 268332992864\nbell_Number(138) == 622904498\nbell_Number(139) == 7371321805\nbell_Number(140) == 12013339952\nbell_Number(141) == 268332998816\nbell_Number(142) == 622904499\nbell_Number(143) == 7371321806\nbell_Number(144) == 120133401624\nbell_Number(145) == 268333008192\nbell_Number(146) == 622904500\nbell_Number(147) == 7371321807\nbell_Number(148) == 120133402880\nbell_Number(149) == 268333008448\nbell_Number(150) == 622904501\nbell_Number(151) == 7371321808\nbell_Number(152) == 120133413424\nbell_Number(153) == 268333017392\nbell_Number(154) == 622904500\nbell_Number(155) == 7371321809\nbell_Number(156) == 120133413680\nbell_Number(157) == 268333019456\nbell_Number(158) == 622904501\nbell_Number(159) == 7371321810\nbell_Number(160) == 120133415648\nbell_Number(161) == 26833301872\nbell_Number(162) == 622904500\nbell"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 5\nassert     bell_Number(4) == 13\nassert     bell_Number(5) == 52\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_Number(3) == 4\nassert     bell_Number(10) == 5"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 4) == [1, 2, 3, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5, 6], 1) == [1, 2, 3, 5, 6]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6], 5) == [1, 2, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6], 6) == [1, 2, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6], 7) == [1, 2, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6], 8) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 1) == [1,2,3,5], 'ERROR'\nassert     remove_kth_element([1,2,3,4,5], 2) == [1,3,5], 'ERROR'\nassert     remove_kth_element([1,2,3,4,5], 3) == [1,2,4], 'ERROR'\nassert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3], 'ERROR'\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3], 'ERROR'\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5], \"Wrong answer\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5], \"Wrong answer\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5], \"Wrong answer\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 4) == [1, 2, 3, 5], \"Wrong answer\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4], \"Wrong answer\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5, 6], 2) == [1, 2, 3, 5, 6], \"First\"\nassert remove_kth_element([1, 2, 3, 4, 5, 6], 4) == [1, 2, 3, 5, 6], \"Second\"\nassert remove_kth_element([1, 2, 3, 4, 5, 6], 6) == [1, 2, 3, 4, 5], \"Third\"\nassert remove_kth_element([1, 2, 3, 4, 5, 6], 7) == [1, 2, 3, 4, 5], \"Fourth\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_kth_element([1,2,3,4], 1) == [2,3,4]\nassert     remove_kth_element([1,2,3,4], 2) == [1,3,4]\nassert     remove_kth_element([1,2,3,4], 3) == [1,2,4]\nassert     remove_kth_element([1,2,3,4], 4) == [1,2,3]\nassert     remove_kth_element([1,2,3,4], 5) == [1,2,3,4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert remove_kth_element([1,2,3,4,5], 1) == [1,2,3,5]\nassert remove_kth_element([1,2,3,4,5], 0) == []\nassert remove_kth_element([1,2,3,4,5], 4) == [1,2,3,4]\n\ndef find_max_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns the maximum element of the k'th element from the list.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef min_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 8\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 6\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 4) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 5) == 9\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_of_nth([[2,4,3],[5,3,1]], 1) == 4\nassert     max_of_nth([[2,4,3],[5,3,1]], 2) == 5\nassert     max_of_nth([[2,4,3],[5,3,1]], 3) == 5\nassert     max_of_nth([[2,4,3],[5,3,1]], 4) == 3\nassert     max_of_nth([[2,4,3],[5,3,1]], 5) == 2\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_of_nth([[1,2],[3,4],[5,6]], 3) == 5, 'Should be 5'\nassert     max_of_nth([[1,2],[3,4],[5,6]], 2) == 4, 'Should be 4'\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 3, 'Should be 3'\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 0) == 1, 'Should be 1'\nassert     max_of_nth([[1],[2],[3],[4],[5],[6],[7]], 0) == 7, 'Should be 7'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert max_of_nth([\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n    [10,11,12]\n], 0) == 1\nassert max_of_nth([\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n    [10,11,12]\n], 1) == 2\nassert max_of_nth([\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n    [10,11,12]\n], 2) == 3\nassert max_of_nth([\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n    [10,11,12]\n], 3) == 12\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test Case\n    test_list = [[1,2,3],\n                 [2,3,4],\n                 [3,4,5]]\n    assert max_of_nth(test_list, 2) == 5\n    assert max_of_nth(test_list, 1) == 4\n    assert max_of_nth(test_list, 0) == 5\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_of_nth([[2,7,6,2],[9,9,2,1],[4,3,1,6],[1,7,9,2]], 1) == 3\nassert max_of_nth([[4,3,1,6],[1,7,9,2],[9,9,2,1],[2,7,6,2]], 1) == 4\nassert max_of_nth([[9,9,2,1],[2,7,6,2],[4,3,1,6],[1,7,9,2]], 1) == 6\nassert max_of_nth([[1,7,9,2],[2,7,6,2],[4,3,1,6],[1,7,9,2]], 2) == 9\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_of_nth([[-1, 4, 10], \n                       [-5, 2, 3], \n                       [9, -15, 20]], 1) == 18\nassert     max_of_nth([[-1, 4, 10], \n                       [-5, 2, 3], \n                       [9, -15, 20]], 2) == -5\nassert     max_of_nth([[-1, 4, 10], \n                       [-5, 2, 3], \n                       [9, -15, 20]], 3) == 20\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_of_nth([[1,2,3],\n                      [2,3,4],\n                      [3,4,5]], 1) == 3\nassert     max_of_nth([[1,2,3],\n                      [2,3,4],\n                      [3,4,5]], 2) == 3\nassert     max_of_nth([[1,2,3],\n                      [2,3,4],\n                      [3,4,5]], 3) == 5\nassert     max_of_nth([[1,2,3],\n                      [2,3,4],\n                      [3,4,5]], 4) == 5\nassert     max_of_nth([[1,2,3],\n                      [2,3,4],\n                      [3,4,5]], 5) == 5\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]], 'Wrong'\nassert     merge([[5, 6], [7, 8]]) == [[5, 6], [7, 8]], 'Wrong'\nassert     merge([[1], [2]]) == [[1], [2]], 'Wrong'\nassert     merge([[5, 4], [3, 2]]) == [[5, 4], [3, 2]], 'Wrong'\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge([[1,2],[2,3]]) == [[1, 2], [2, 3]]\nassert     merge([[1,2],[2,3],[3,4]]) == [[1, 2], [2, 3], [3, 4]]\nassert     merge([[1,2],[2,3],[3,4],[4,5]]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     merge([[1,2],[2,3],[3,4]]) == [[1, 2], [2, 3], [3, 4]]\nassert     merge([[1,2],[2,3],[3,4],[4,5]]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge([[1, 2], [3, 4], [4, 5], [6, 7], [8, 9]]) == [[1, 2], [3, 4], [4, 5], [6, 7], [8, 9]]\nassert     merge([[1, 2], [3, 4], [4, 5], [6, 7]]) == [[1, 2], [3, 4], [4, 5], [6, 7]]\nassert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert     merge([[1, 2]]) == [[1, 2]]\nassert     merge([]) == []\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge([['a', 'b'], ['c', 'd'], ['e', 'f']]) == [['a', 'b'], ['c', 'd'], ['e', 'f']]\nassert     merge([['a'], ['b'], ['c']]) == [['a'], ['b'], ['c']]\nassert     merge([[1, 2], ['a', 'b'], ['c', 'd']]) == [[1, 2], ['a', 'b'], ['c', 'd']]\nassert     merge([[1, 2], ['a', 'b'], ['c', 'd'], ['e', 'f']]) == [[1, 2], ['a', 'b'], ['c', 'd'], ['e', 'f']]\nassert     merge([[1, 2], ['a', 'b'], ['c', 'd']]) == [[1, 2], ['a', 'b'], ['c', 'd']]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge([[1,2], [3,4], [5,6]]) == [[1,3], [2,4], [5,6]] \nassert     merge([[1,2], [3,4], [5,6], [7,8]]) == [[1,3], [2,4], [5,6], [7,8]] \nassert     merge([[1,2], [3,4], [5,6], [7,8], [9,10]]) == [[1,3], [2,4], [5,6], [7,8], [9,10]] "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge([[1,2],[3,4]])== [[1,3],[2,4]], \"Wrong!\"\nassert     merge([[1,2],[3,4],[5,6]])== [[1,3],[2,4],[5,6]], \"Wrong!\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmerge([[1,3], [2,4], [1,4]]) == [[1,4], [2,4]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cummulative_sum(()) == ()\nassert     cummulative_sum((1, 2, 3, 4, 5)) == (1, 3, 6, 10, 15)\nassert     cummulative_sum((0, 3, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)) == (0, 3, 8, 15, 24, 33, 41, 45, 55, 64, 69, 79, 99)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum((1,2,3)) == 6\nassert     cummulative_sum((0,1,2,3,4,5)) == 15\nassert     cummulative_sum((2,0,1,2,3,4,5,6)) == 23\nassert     cummulative_sum((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == sum(range(1, 11)))\nassert     (cummulative_sum([-1, -2, -3, -4, -5]) == sum(-1, -3, -5))\nassert     (cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == sum(range(1, 11)))\nassert     (cummulative_sum([-1, -2, -3, -4, -5]) == sum(-1, -3, -5))\n\n'''\nQuestion 7:\n    Write a function which takes a list of strings and return a list of strings where the first character of each string is the first character of that string.\n'''\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cummulative_sum((1,2,3,4)) == (1+2+3+4, 4), \"Result is wrong\"\nassert     cummulative_sum((1,4,5,6,9)) == (1+4+5+6+9, 13), \"Result is wrong\"\nassert     cummulative_sum((3,4,5,6,7)) == (3+4+5+6+7, 17), \"Result is wrong\"\nassert     cummulative_sum((4,5,6,7)) == (4+5+6+7, 21), \"Result is wrong\"\nassert     cummulative_sum((3,4,5)) == (3+4+5, 7), \"Result is wrong\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert cummulative_sum((1, 2, 3, 4)) == [1, 3, 6, 10]\nassert cummulative_sum((1, 2, 3, 4, 5, 6)) == [1, 3, 6, 10, 15, 21]\nassert cummulative_sum((-1, -2, -3)) == [-1, -3, -6]\nassert cummulative_sum((1, 2, 3)) == [1, 2, 3]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cummulative_sum(test_list) == (0, 1, 3, 6, 10)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cummulative_sum(())==(), \"error 1\"\nassert     cummulative_sum((0))==(0,), \"error 2\"\nassert     cummulative_sum((-1))==(-1,), \"error 3\"\nassert     cummulative_sum((-1,2))==(-1,2), \"error 4\"\nassert     cummulative_sum((-1,2,3))==(-1,2,3), \"error 5\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cummulative_sum([]) == (), \"Wrong output.\"\nassert     cummulative_sum([1, 1, 1, 1, 1, 1]) == (1, 2, 3, 4, 5, 6), \"Wrong output.\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     average_tuple((1,2,3)) == [1,2,3], average_tuple((1,2,3))\nassert average_tuple(((1, 2), (2, 3))) == [(1, 2), (2, 3)], average_tuple(((1, 2), (2, 3)))\nassert average_tuple(((1,), (2,))) == [1], average_tuple(((1,), (2,)))\nassert average_tuple(((1,), (2, 3, 4))) == [(1, 2, 3), (2, 3, 4)], average_tuple(((1,), (2, 3, 4)))\nassert average_tuple(((1,), (2, 3))) == [(1, 2, 3)], average_tuple(((1,), (2, 3)))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     average_tuple([[1,2,3], [4,5,6]]) ==     [2.5, 3.5, 4.5]\nassert     average_tuple([[4,5], [6,7,8]]) ==     [4.5, 5]\nassert     average_tuple([[5,6], [7,8]]) ==     [5.5, 6.5]\nassert     average_tuple([[5,6], [7,8]]) ==     [5.5, 6.5]\nassert     average_tuple([[5,6], [7,8]]) ==     [5.5, 6.5]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         average_tuple([]) == (), 'Wrong average_tuple({})'\nassert         average_tuple([[]]) == (), 'Wrong average_tuple({})'\nassert         average_tuple([[1]]) == (), 'Wrong average_tuple({})'\nassert         average_tuple([[1,2]]) == (2.0), 'Wrong average_tuple({})'\nassert         average_tuple([[1,2,3]]) == (2.0), 'Wrong average_tuple({})'\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \naverage_tuple( (1,2,3) ) == (1.5, 2.5, 3.5)\naverage_tuple( (4,5,6) ) == (4.0, 5.0, 6.0)\naverage_tuple( (3,2) ) == (3.0, 2.0)\naverage_tuple( (3,4,5) ) == (3.0, 4.0, 5.0)\naverage_tuple( (4,3,2) ) == (4.0, 3.0, 2.0)\naverage_tuple( (3,5,7) ) == (3.0, 5.0, 7.0)\naverage_tuple( (2,4,6,8) ) == (2.0, 4.0, 6.0, 8.0)\naverage_tuple( (1,4,5) ) == (1.0, 4.0, 5.0)\naverage_tuple( (8,6,4,2) ) == (8.0, 6.0, 4.0, 2.0)\naverage_tuple( (7,5,8) ) == (7.0, 5.0, 8.0)\naverage_tuple( (2,3,5,4) ) == (2.0, 3.0, 5.0, 4.0)\naverage_tuple( (1,2,3,4) ) == (1.0, 2.0, 3.0, 4.0)\naverage_tuple( (9,8,7,6) ) == (9.0, 8.0, 7.0, 6.0)\naverage_tuple( (3,7,8) ) == (3.0, 7.0, 8.0)\naverage_tuple( (8,6,4,2) ) == (8.0, 6.0, 4.0, 2.0)\naverage_tuple( (3,5,7) ) == (3.0, 5.0, 7.0)\naverage_tuple( (2,4,6) ) == (2.0, 4.0, 6.0)\naverage_tuple( (1,2) ) == (1.0, 2.0)\naverage_tuple( (3,5,7,6) ) == (3.0, 5.0, 7.0, 6.0)\naverage_tuple( (4,3,2,1) ) == (4.0, 3.0, 2.0, 1.0)\naverage_tuple( (1,2,3) ) == (1.0, 2.0, 3.0)\naverage_tuple( (3,4,5) ) == (3.0, 4.0, 5.0)\naverage_tuple( (5,4,3) ) == (5.0, 4.0, 3.0)\naverage_tuple( (2,4,6) ) == (2.0, 4.0, 6.0)\naverage_tuple( (9,8,7,6) ) == (9.0, 8.0, 7.0, 6.0)\naverage_tuple( (2,1) ) == (2.0, 1.0)\naverage_tuple( (1,2,3,4,5) ) == (1.0, 2.0, 3.0, 4.0, 5.0)\naverage_tuple( (2,3,4,5) ) == (2.0, 3.0, 4.0, 5.0)\naverage_tuple( (3,1,2,4) ) == (3.0, 1.0, 2.0, 4.0)\naverage_tuple( (5,4,3,2,1) ) == (5.0, 4.0, 3.0, 2.0, 1.0)\naverage_tuple( (9,8,7,6) ) == (9.0, 8.0, 7.0, 6.0)\naverage_tuple( (3,4,5,6) ) == (3.0, 4.0, 5.0, 6.0)\naverage_tuple( (2,4,6) ) == (2.0, 4.0, 6.0)\naverage_tuple( (1,2,3) ) == (1.0, 2.0, 3.0)\naverage_tuple( (4,5,6,8) ) == (4.0, 5.0, 6.0, 8.0)\naverage_tuple( (5,2,4,3) ) == (5.0, 2.0, 4.0, 3.0)\naverage_tuple( (3,2,5,4) ) == (3.0, 2.0, 5.0, 4.0)\naverage_tuple( (1,2,3,4) ) == (1.0, 2.0, 3.0, 4.0)\naverage_tuple( (9,8,7,6) ) == (9.0, 8.0, 7.0, 6.0)\naverage_tuple( (8,7,6,5) ) == (8.0, 7.0, 6.0, 5.0)\naverage_tuple( (6,5,4,3,2,1) ) == (6.0, 5.0, 4.0, 3.0, 2.0, 1.0)\naverage_tuple( (2,3,4) ) == (2.0, 3.0, 4.0)\naverage_tuple( (5,4,3,2,1) ) == (5.0, 4.0, 3.0, 2.0, 1.0)\naverage_tuple( (3,5,7) ) == (3.0, 5.0, 7.0)\naverage_tuple( (9,8,7,6) ) == (9.0, 8.0, 7.0, 6.0)\naverage_tuple( (9,8,7,6,5) ) == (9.0, 8.0, 7.0, 6.0, 5.0)\naverage_tuple( (9,8,7,6,5,4) ) == (9.0, 8.0, 7.0, 6.0, 5.0, 4.0)\naverage_tuple( (1,2,3,4,5) ) == (1.0, 2.0, 3.0, 4.0, 5.0)\naverage_tuple( (1,2,3,4) ) == (1.0, 2.0, 3.0, 4.0)\naverage_tuple( (2,3,4) ) == (2.0, 3.0, 4.0)\naverage_tuple( (1,2,3) ) == (1.0, 2.0, 3.0)\naverage_tuple( (3,2,5,4) ) == (3.0, 2.0, 5.0, 4.0)\naverage_tuple( (2,4,6) ) == (2.0, 4.0, 6.0)\naverage_tuple( (1,2,3,4,5) ) == (1.0, 2.0, 3.0, 4.0, 5.0)\naverage_tuple( (3,4,5,6) ) == (3.0, 4.0, 5.0, 6.0)\naverage_tuple( (2,3,4,5) ) == (2.0, 3.0, 4.0, 5.0)\naverage_tuple( (1,2,3,4,5) ) == (1.0, 2.0, 3.0, 4.0, 5.0)\naverage_tuple( (1,2,3,4,5,6) ) == (1.0, 2.0, 3.0, 4.0, 5.0, 6.0)\naverage_tuple( (5,4,3,2,1) ) == (5.0, 4.0, 3.0, 2.0, 1.0)\naverage_tuple( (3,4,5,6) ) == (3.0, 4.0, 5.0, 6.0)\naverage_tuple( (4,3,2,1) ) == (4.0, 3.0, 2"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     average_tuple([[1,2,3], [1,2,3]]) == [2.0, 2.0, 2.0]\nassert     average_tuple([[1,2,3], [1,2,3], [1,2,3]]) == [2.0, 2.0, 2.0]\nassert     average_tuple([[1,2,3], [4,5,6], [7,8,9]]) == [4.5, 5.5, 6.5]\n\ndef average_list_of_lists(nums):\n    '''\n    Write a function which takes a list of lists and returns the average value for each list as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(average_tuple([(1, 2), (3, 4), (5, 6)])) == [3.5, 4.5, 5.5]\nassert \nprint(average_tuple([(1, 2, 3), (3, 4, 5), (5, 6, 7)])) == [3.0, 4.0, 5.0]\nassert \nprint(average_tuple([(1, 2), (3, 4, 5), (5, 6), (7, 8)])) == [3.0, 4.0, 5.0, 6.0]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     average_tuple((1,2,3,4,5)) == (2.0,3.0,4.0,5.0,6.0)\nassert     average_tuple(((1,2,3,4,5), (1,2,3,4,5), (1,2,3,4,5))) == (2.0,3.0,4.0,5.0,6.0)\nassert     average_tuple(((1,2,3,4,5), (1,2,3,4,5), (1,2,3,4,5))) == (2.0,3.0,4.0,5.0,6.0)\nassert     average_tuple(((1,2,3,4,5), (1,2,3,4,5), (1,2,3,4,5))) == (2.0,3.0,4.0,5.0,6.0)\nassert     average_tuple(((1,2,3,4,5), (1,2,3,4,5), (1,2,3,4,5))) == (2.0,3.0,4.0,5.0,6.0)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     average_tuple(()) ==     []\nassert     average_tuple((1,)) ==     [1]\nassert     average_tuple((1,2)) ==     [1.5]\nassert     average_tuple(((1,2),(1,2))) ==     [1.5,1.5]\nassert     average_tuple(((1,2),(1,2),(1,2))) ==     [1.5,1.5,1.5]\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_modulo((2,4),(2,4)) == (0,0)\nassert     tuple_modulo((0,2),(2,4)) == (2,0)\nassert     tuple_modulo((1,2),(2,4)) == (1,2)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 1, 0, 1)\nassert     tuple_modulo((3, 4, 5, 6), (4, 5, 6, 7)) == (1, 2, 3, 4)\nassert     tuple_modulo((0, 0, 0, 1), (1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     tuple_modulo((0, 0, 0, -1), (1, 2, 3, 4)) == (0, 0, 0, 1)\nassert     tuple_modulo((-2, -3, -4, -5), (1, 2, 3, 4)) == (0, 0, 0, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo((3, 4), (3, 4)) == (0, 0)\nassert tuple_modulo((3, 4), (4, 8)) == (0, 0)\nassert tuple_modulo((2, 4), (3, 8)) == (1, 4)\nassert tuple_modulo((8, 16), (2, 8)) == (4, 0)\nassert tuple_modulo((8, 16), (8, 32)) == (0, 4)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((0, 4), (0, 3)) == (0, 0)\nassert tuple_modulo((0, 4), (4, 3)) == (0, 2)\nassert tuple_modulo((4, 3), (0, 3)) == (2, 0)\nassert tuple_modulo((4, 3), (4, 0)) == (0, 4)\nassert tuple_modulo((4, 3), (4, 4)) == (0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo( (2, 3), (3, 6) ) == (0, 1)\nassert     tuple_modulo( (4, 5), (2, 3) ) == (2, 3)\nassert     tuple_modulo( (2, 4), (2, 3) ) == (0, 1)\nassert     tuple_modulo( (2, -5), (2, 3) ) == (2, -3)\nassert     tuple_modulo( (4, -5), (2, 3) ) == (2, -3)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_modulo((1, 2, 3), (2, 3, 4)) == (0, 1, 0), \"Wrong Answer\"\nassert     tuple_modulo((1, 2, 3), (2, 3, 3)) == (0, 1, 1), \"Wrong Answer\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo((3, 5, 2), (4, 3, 1)) == (3, 4, 3)\nassert     tuple_modulo((2, 3, 4), (5, 6, 7)) == (0, 0, 0)\nassert     tuple_modulo((0, 0, 0), (3, 4, 5)) == (0, 0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_modulo((1, 2, 3), (10, 20, 30)) == (1, 2, 1)\nassert     tuple_modulo((1, 3, 9), (10, 20, 30)) == (1, 3, 9)\nassert     tuple_modulo((0, 1, 2), (10, 20, 30)) == (0, 1, 0)\nassert     tuple_modulo((4, 5, 6), (10, 20, 30)) == (4, 5, 6)\n\n'''"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Jumps(4,2)==4, \"Wrong: Expected 4\"\nassert     min_Jumps(7,4)==1, \"Wrong: Expected 1\"\nassert     min_Jumps(10,1)==0, \"Wrong: Expected 0\"\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Jumps(2, 1) == 1\nassert     min_Jumps(5, 1) == 1\nassert     min_Jumps(2, 2) == 0\nassert     min_Jumps(5, 2) == 2\nassert     min_Jumps(4, 2) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert min_Jumps(1, 0) == 0\nassert min_Jumps(2, 0) == 1\nassert min_Jumps(2, 1) == 1\nassert min_Jumps(5, 1) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert min_Jumps(2, 1) == 3\nassert min_Jumps(5, 4) == 3\nassert min_Jumps(4, 3) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(1, 0) == 0\nassert     min_Jumps(2, 0) == 0\nassert     min_Jumps(3, 0) == 0\nassert     min_Jumps(5, 0) == 1\nassert     min_Jumps(4, 0) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef min_jumps_2(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i < len(steps) and i < d:\n        jumps += 1\n        i += steps[i]\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmin_Jumps(3, 1) == 1\nmin_Jumps(3, 2) == 2\nmin_Jumps(3, 3) == 3\nmin_Jumps(4, 3) == 4\nmin_Jumps(5, 3) == 5\nmin_Jumps(6, 3) == 5\nmin_Jumps(7, 3) == 5\nmin_Jumps(8, 3) == 5\nmin_Jumps(9, 3) == 5\nmin_Jumps(10, 3) == 5\nmin_Jumps(11, 3) == 5\nmin_Jumps(13, 3) == 5\nmin_Jumps(14, 3) == 5\nmin_Jumps(15, 3) == 5\nmin_Jumps(16, 3) == 5\nmin_Jumps(17, 3) == 5\nmin_Jumps(18, 3) == 5\nmin_Jumps(19, 3) == 5\nmin_Jumps(20, 3) == 5\nmin_Jumps(23, 3) == 5\nmin_Jumps(24, 3) == 5\nmin_Jumps(25, 3) == 5\nmin_Jumps(26, 3) == 5\nmin_Jumps(27, 3) == 5\nmin_Jumps(28, 3) == 5\nmin_Jumps(29, 3) == 5\nmin_Jumps(30, 3) == 5\nmin_Jumps(31, 3) == 5\nmin_Jumps(32, 3) == 5\nmin_Jumps(33, 3) == 5\nmin_Jumps(34, 3) == 5\nmin_Jumps(35, 3) == 5\nmin_Jumps(36, 3) == 5\nmin_Jumps(37, 3) == 5\nmin_Jumps(38, 3) == 5\nmin_Jumps(39, 3) == 5\nmin_Jumps(40, 3) == 5\nmin_Jumps(41, 3) == 5\nmin_Jumps(42, 3) == 5\nmin_Jumps(43, 3) == 5\nmin_Jumps(44, 3) == 5\nmin_Jumps(45, 3) == 5\nmin_Jumps(46, 3) == 5\nmin_Jumps(47, 3) == 5\nmin_Jumps(48, 3) == 5\nmin_Jumps(49, 3) == 5\nmin_Jumps(50, 3) == 5\nmin_Jumps(51, 3) == 5\nmin_Jumps(52, 3) == 5\nmin_Jumps(53, 3) == 5\nmin_Jumps(54, 3) == 5\nmin_Jumps(55, 3) == 5\nmin_Jumps(56, 3) == 5\nmin_Jumps(57, 3) == 5\nmin_Jumps(58, 3) == 5\nmin_Jumps(59, 3) == 5\nmin_Jumps(60, 3) == 5\nmin_Jumps(61, 3) == 5\nmin_Jumps(62, 3) == 5\nmin_Jumps(63, 3) == 5\nmin_Jumps(64, 3) == 5\nmin_Jumps(65, 3) == 5\nmin_Jumps(66, 3) == 5\nmin_Jumps(67, 3) == 5\nmin_Jumps(68, 3) == 5\nmin_Jumps(69, 3) == 5\nmin_Jumps(70, 3) == 5\nmin_Jumps(71, 3) == 5\nmin_Jumps(72, 3) == 5\nmin_Jumps(73, 3) == 5\nmin_Jumps(74, 3) == 5\nmin_Jumps(75, 3) == 5\nmin_Jumps(76, 3) == 5\nmin_Jumps(77, 3) == 5\nmin_Jumps(78, 3) == 5\nmin_Jumps(79, 3) == 5\nmin_Jumps(80, 3) == 5\nmin_Jumps(81, 3) == 5\nmin_Jumps(82, 3) == 5\nmin_Jumps(83, 3) == 5\nmin_Jumps(84, 3) == 5\nmin_Jumps(85, 3) == 5\nmin_Jumps(86, 3) == 5\nmin_Jumps(87, 3) == 5\nmin_Jumps(88, 3) == 5\nmin_Jumps(89, 3) == 5\nmin_Jumps(90, 3) == 5\nmin_Jumps(91, 3) == 5\nmin_Jumps(92, 3) == 5\nmin_Jumps(93, 3) == 5\nmin_Jumps(94, 3) == 5\nmin_Jumps(95, 3) == 5\nmin_Jumps(96, 3) == 5\nmin_Jumps(97, 3) == 5\nmin_Jumps(98, 3) == 5\nmin_Jumps(99, 3) == 5\nmin_Jumps(100, 3) == 5\nmin_Jumps(101, 3) == 5\nmin_Jumps(102, 3) == 5\nmin_Jumps(103, 3) == 5\nmin_Jumps(104, 3) == 5\nmin_Jumps(105, 3) == 5\nmin_Jumps(106, 3) == 5\nmin_Jumps(107, 3) == 5\nmin_Jumps(108, 3) == 5\nmin_Jumps(109, 3) == 5\nmin_Jumps(110, 3) == 5\nmin_Jumps(111, 3) == 5\nmin_Jumps(112, 3) == 5\nmin_Jumps(113, 3) == 5\nmin_Jumps(114, 3) == 5\nmin_Jumps(115, 3) == 5\nmin_Jumps(116, 3) == 5\nmin_Jumps(117, 3) == 5\nmin_Jumps(118, 3) == 5\nmin_Jumps(119, 3) == 5\nmin_Jumps(120, 3) == 5\nmin_Jumps(121, 3) == 5\nmin_Jumps(122, 3) == 5\nmin_Jumps(123, 3) == 5\nmin_Jumps(124, 3) == 5\nmin_Jumps(125, 3) == 5\nmin_Jumps(126, 3) == 5\nmin_Jumps(127, 3) == 5\nmin_Jumps(128, 3) == 5\nmin_Jumps(129, 3) == 5\nmin_Jumps(130, 3) == 5\nmin_Jumps(131, 3) == 5\nmin_Jumps(132, 3) == 5\nmin_Jumps(133, 3) == 5\nmin_Jumps(134, 3) == 5\nmin_Jumps(135, 3) == 5\nmin_Jumps(136, 3) == 5\nmin_Jumps(137, 3) == 5\nmin_Jumps(138, 3) == 5\nmin_Jumps(139, 3) == 5\nmin_Jumps(140, 3) == 5\nmin_Jumps(141, 3) == 5\nmin_Jumps(142, 3) == 5\nmin_Jumps(143, 3) == 5\nmin_Jumps(144, 3) == 5\nmin_Jumps(145, 3) == 5\nmin_Jumps(146, 3) == 5\nmin_Jumps(147, 3) == 5\nmin_Jumps(148, 3) == 5\nmin_Jumps(149, 3) == 5\nmin_Jumps(150, 3) == 5\nmin_Jumps(151, 3) == 5\nmin_Jumps(152, 3) == 5\nmin_Jumps(153, 3) == 5\nmin_Jumps(154, 3) == 5\nmin_Jumps(155, 3) == 5\nmin_Jumps(156, 3) == 5\nmin_Jumps(157, 3) == 5\nmin_Jumps(158, 3) == 5\nmin_Jumps(159, 3) == 5\nmin_Jumps(160, 3) == 5\nmin_Jumps(161, 3) == 5\nmin_Jumps(162, 3) == 5\nmin_Jumps(163, 3) == 5\nmin_Jumps(164, 3) == 5\nmin_Jumps(165, 3) == 5\nmin_Jumps(166, 3) == 5\nmin_Jumps(167, 3) == 5\nmin_Jumps(168, "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Jumps(5, 10) == 3\nassert     min_Jumps(5, 5) == 0\nassert     min_Jumps(5, 0) == 0\nassert     min_Jumps(10, 2) == 1\nassert     min_Jumps(11, 2) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nsteps = 1\nd = 1\n\nprint(\"# of jumps: \", min_Jumps(steps, d))"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_list(nums1,nums2):\n    '''\n    Write a function to sum the two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    div_list([1,2,3],[4,5,6]) == [0.25,0.5,0.75]\nassert \n    div_list([3,4,5], [1,2,3]) == [3,0.5,2.5]\n\n\ndef div_list2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reverse(lst):\n    '''\n    Write a function to reverse the elements of a list.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndiv_list([1,2,3,4], [2,3,4]) == [1,1,2,3]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_list([1,2,3,4,5],[3,4,5,6,7]) == [[1,2,3],[3,4,5]]\nassert     div_list([4,5,6,7,8],[2,3,4,5,6]) == [[4,5,6],[7,8,0]]\nassert     div_list([10,20,30,40,50],[2,3,4,5,6]) == [[10,20,30],[40,50,0]]\nassert     div_list([], []) == []\nassert     div_list([1],[1]) == [[1]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    div_list([1,2,3],[2,4,6]) == [(0.5, 1.0, 1.5), (2.0, 2.0, 2.5), (3.0, 3.0, 3.5)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2.4, 2.6), (3.6, 3.6, 3.6)]\n    div_list([1.2,2.4,3.6],[4.8,5.6,6.9]) == [(0.4, 1.2, 1.4), (2.4, 2"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert div_list([1,2,3],[10,20,30]) == [0.1,0.2,0.3]\nassert div_list([1.0,2.0,3.0],[10.0,20.0,30.0]) == [0.1,0.2,0.3]\n\ndef div_list_v1(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div = []\n    for i in range(len(nums1)):\n        div.append(nums1[i]/nums2[i])\n    return div\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('div_list test passed')\n\nprint('\\n')\n\ndef div_list_2(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise, \n    except that only the dividend should be represented by a list.\n    '''\n    # code here\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_num('123456789') == '9678123456789'\nassert     move_num('123456789abcdef') == '987654321abcdef123456789'\nassert     move_num('123456789abcdefghijklmnop') == '987654321abcdefghijklmnop123456789'\nassert     move_num('123456789abcdefghijklmnopqrstuvwxyz') == '987654321abcdefghijklmnopqrstuvwxyz123456789'\nassert     move_num('12345678abcdefghijklmnopqrstuvwxyz') == '987654321abcdefghijklmnopqrstuvwxyz12345678'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_num(\"hello\") == \"eloh\"\nassert     move_num(\"leetcode\") == \"leotcede\"\nassert     move_num(\"hello world\") == \"world hello\"\n\ndef move_zero(test_str):\n    '''\n    Write a function to move all the zeros to the end of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_num(test_str):\n    '''\n    Write a function to remove all the numbers from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef move_num_to_end(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (move_num('45') == '545')\nassert (move_num('3456') == '3456')\nassert (move_num('4455') == '4455')\nassert (move_num('4453') == '4453')\nassert (move_num('534') == '534')\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num('abcdefg') == 'gfedcba', \"Wrong Answer\"\nassert     move_num('abc') == 'cba', \"Wrong Answer\"\nassert     move_num('abcdef') == 'efabc', \"Wrong Answer\"\nassert     move_num('abcdefgh') == 'ghabcdef', \"Wrong Answer\"\nassert     move_num('abcdefghij') == 'ghijabcdef', \"Wrong Answer\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_num('abcde') == 'adebc'\nassert     move_num('abcdefg') == 'defgab'\nassert     move_num('qwertyuiopasdfghjkl') == 'ghjklqwertyup'\nassert     move_num('aeiou') == 'eao'\n\n\ndef remove_vowels(test_str):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num('test!') == '!st'\nassert     move_num('T!hE & STr$') == 'TrE & SSt$'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_num(\"aeiuy\") == \"yui\"\nassert     move_num(\"a\") == \"a\"\nassert     move_num(\"ab\") == \"ab\"\nassert     move_num(\"abc\") == \"cba\"\nassert     move_num(\"ac\") == \"c\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num(\"a123bcdefg\") == \"abcdefg1234\"\nassert     move_num(\"\") == \"\"\nassert     move_num(\"h\") == \"h\"\n\n\ndef reverse_str(test_str):\n    '''\n    Write a function to reverse the string word by word.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([3,4,5,10,11]) == 5\nassert     largest_subset([3,4,5,10]) == 5\nassert     largest_subset([3,4,5]) == 1\nassert     largest_subset([3]) == 1\nassert     largest_subset([1,2,3,4]) == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_subset([4, 2, 4, 8, 9]) == 3\nassert     largest_subset([5, 5, 9, 9]) == 1\nassert     largest_subset([2, 1, 3, 4]) == 2\nassert     largest_subset([7, 8, 10, 7]) == 3\nassert     largest_subset([9, 7, 8, 8]) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert largest_subset([5, 9, 3, 7]) == 9\nassert largest_subset([2, 6, 8, 14]) == 14\nassert largest_subset([9, 4, 7, 3]) == 9\nassert largest_subset([5, 3, 7, 8]) == 8\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_subset([5, 3, 4, 6, 1, 7, 8]) == 6\nassert     largest_subset([5, 3, 5, 5, 1, 7, 8]) == 1\nassert     largest_subset([5, 3, 4, 6, 1, 7, 8]) == 6\nassert     largest_subset([5, 3, 4, 6, 1, 7, 8]) == 5\nassert     largest_subset([5, 3, 4, 6, 1, 7, 8]) == 5\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([1,2,3,4]) == 6\nassert     largest_subset([1,2,3,4,5]) == 6\nassert     largest_subset([1,3,4,6,7]) == 10\nassert     largest_subset([1,2,3,4,5]) == 6\nassert     largest_subset([2,3,4,5,6]) == 6\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_subset([2, 3, 4, 7, 13, 19]) == 5\nassert     largest_subset([2, 9, 8, 10]) == 7\nassert     largest_subset([2, 3]) == 1\nassert     largest_subset([3]) == 1\nassert     largest_subset([]) == 0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert largest_subset([1,2,3,4,5]) == 6\nassert largest_subset([2,3,4,5]) == 5\nassert largest_subset([1,2,3,4,5]) == 6\nassert largest_subset([1,1,1,1,1]) == 5\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert largest_subset([2,3,6,8]) == 4\nassert largest_subset([2,3,6,8]) == 2\nassert largest_subset([5,2,7,3,4]) == 5\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nlargest_subset([]) == 0\nlargest_subset([1]) == 0\nlargest_subset([1,2]) == 2\nlargest_subset([1,2,3,4]) == 2\nlargest_subset([1,2,3,4,5]) == 3\n\nprint('PASSED ALL TEST CASES')"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert get_median([1, 2, 3, 4], [3, 6, 9], 3) == 2.5, 'Wrong result'\nassert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_median(arr1, arr2):\n    '''\n    The median of a list of numbers is the middle number of the list. \n    If the length of the list is odd, then the median is the middle element.\n    If the length of the list is even, then the median is the average of the middle two elements.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_median([3, 4, 5], [1, 2, 3], 3) == 2.5\nassert     get_median([1, 2, 3], [5, 6, 7], 3) == 2.5\nassert     get_median([4, 5, 6], [2, 3, 4], 3) == 2.5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_median([1,2,3,4], [2,3,4,5], 4) == (2.5, 'Test 1 passed')\nassert     get_median([], [], 0) == (None, 'Test 2 passed')\nassert     get_median([1,2,3,4], [], 0) == (None, 'Test 3 passed')\nassert     get_median([], [], -1) == (None, 'Test 4 passed')\nassert     get_median([], [], 3) == (None, 'Test 5 passed')\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert get_median([1, 2, 3], [2, 3, 4], 3) == 2.5\nassert get_median([1, 2, 3], [4, 3, 2], 3) == 2"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     nth_nums([1,2,3,4],1) == [1,4]\nassert     nth_nums([1,2,3,4],2) == [9,16]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnums = [1,2]\nn = 1\n\nassert nth_nums(nums,n) == [1,2]\n\nassert nth_nums(nums,n) == [1,4]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert [1,2,3,4] == nth_nums([1,2,3,4],1)\nassert \nassert [1,4,9,16] == nth_nums([1,2,3,4],2)\nassert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef nth_odds(nums,n):\n    '''\n    Given a list of numbers, print the n-th odd number.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_dets(mat):\n    '''\n    Write a function that counts how many rows and columns contain all of the 1s.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_evens(nums):\n    '''\n    Write a function to remove even numbers from a list in the same order as they appear in the list.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_upper('Hello') == False\n    is_upper('HELLO') == True\nassert \n    is_upper('Hello world') == True\nassert \n    is_upper('HELLOWORLD') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_upper('Testing')\nassert not is_upper('test')\n\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_upper(\"ABC\") == True\nassert     is_upper(\"ABC\") == False\nassert     is_upper(\"ABCD\") == True\nassert     is_upper(\"ABCD\") == False\nassert     is_upper(\"A1B2C3D4E5F6\") == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_upper(\"\") == False, \"Empty String\"\nassert     is_upper(\"A\") == False, \"A\"\nassert     is_upper(\"abcd\") == False, \"abcd\"\nassert     is_upper(\"ABCD\") == True, \"ABCD\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_upper('test') == False, \"is_upper('') should be False\"\nassert     is_upper('TEST') == True, \"is_upper('TEST') should be True\"\nassert     is_upper('tEST') == True, \"is_upper('tEST') should be True\"\nassert     is_upper('t-EST') == True, \"is_upper('t-EST') should be True\"\nassert     is_upper('Test') == True, \"is_upper('Test') should be True\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nYou are required to write a function to remove all leading zeros from an IP address. For example, if given as input, the output should be 192.168.0.1\n'''\n\ndef remove_leading_zeros(ip):\n    '''\n    Write a python function to remove all leading zeros from an IP address. For example, if given as input, the output should be 192.168.0.1\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper('hello') == False, 'is_upper(\"hello\") does not return True'\nassert     is_upper('HELLO') == True, 'is_upper(\"HELLO\") returns False'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_upper('hello') == False, 'Not a string'\nassert is_upper('Hello') == True, 'Not a string'\nassert is_upper('hello_world') == False, 'Not a string'\n\n\ndef upper_case(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_upper('Seth') == True\nassert     is_upper('Seeth') == False\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef compare_List(l1, l2): \n    '''\n    Write a python function to compare two lists element by element and return True if both are same and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List([1,2,3,4,5]) == [2,3,4,5,1], \"This is not the same list as expected\"\nassert swap_List([1,2,3,4,5,6,7,8,9]) == [2,3,4,5,6,7,8,9,1], \"This is not the same list as expected\"\nassert swap_List([1,2,3]) == [2,3,1], \"This is not the same list as expected\"\nassert swap_List([1]) == [1], \"This is not the same list as expected\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == None, \"Wrong answer\"\nassert swap_List([1,2,3,4,5,6,7,8,9]) == None, \"Wrong answer\"\nassert swap_List([1,2,3,4,5]) == None, \"Wrong answer\"\nassert swap_List([1]) == None, \"Wrong answer\"\nassert swap_List([]) == None, \"Wrong answer\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3,4,5]) == [2,3,4,5,1], \"First\"\nassert swap_List([1,2,3,4,5]) == [5,2,3,4,1], \"Second\"\nassert swap_List([1,2,3,4,5]) == [4,3,2,1,5], \"Third\"\nassert swap_List([1,2,3,4,5]) == [2,3,4,5,1], \"Fourth\"\nassert swap_List([1,2,3,4,5]) == [1,2,3,4,5], \"Fifth\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nswap_List([1,2,3,4]) == [4,1,2,3]\nassert swap_List([1,2,3,4,5]) == [4,5,1,2,3]\nassert swap_List([1,2,3,4,5,6,7,8]) == [4,5,6,7,8,1,2,3]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List(newList) == None, \n    \"Your swap_List function is not working correctly.\""
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef minimum(arr):\n    '''\n    Write a python function to find the minimum element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nswap_List([1,2,3]) == [3,2,1] \nassert \nswap_List([0,0,0,0,0]) == [0,0,0,0,0] \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1, 2, 3]) == [3, 2, 1]     # Case 1\nassert     swap_List([1, 2, 3, 4]) == [3, 2, 1, 4]    # Case 2\nassert     swap_List([1, 2, 3, 4, 5]) == [3, 2, 1, 4, 5]    # Case 3\nassert     swap_List([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 4, 5, 6]    # Case 4\nassert     swap_List([1, 2, 3, 4, 5, 6, 7]) == [3, 2, 1, 4, 5, 6, 7]    # Case 5\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    triangle_area(r=2) == sqrt(2) * r\n\nassert \n    triangle_area(r=3) == sqrt(3) * r\n\nassert \n    triangle_area(r=4) == sqrt(4) * r\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(2) == 3.0, 'Wrong output!'\nassert     triangle_area(10) == 28.0, 'Wrong output!'\nassert     triangle_area(7) == 20.0, 'Wrong output!'\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(1) == 0.5, \"triangle_area(1) incorrect\"\nassert     triangle_area(0.5) == 0.5, \"triangle_area(0.5) incorrect\"\nassert     triangle_area(1.5) == 0.5, \"triangle_area(1.5) incorrect\"\nassert     triangle_area(2) == 0.5, \"triangle_area(2) incorrect\"\nassert     triangle_area(2.5) == 1.0, \"triangle_area(2.5) incorrect\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(2) == 3.0\nassert     triangle_area(1.5) == 1.2220773967131404\nassert     triangle_area(2.1) == 1.7739671314042894\nassert     triangle_area(3) == 1.5\nassert     triangle_area(0.1) == 1.5\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_triangle_area(capsys):\n    print(\"\\n\")\n    print(\"------------------------------------------------------\")\n    print(\"|       Test Case 1: 0 < r < 1                   |\")\n    print(\"------------------------------------------------------\")\n    assert triangle_area(0) == 0\n    assert triangle_area(0.1) == 0\n    assert triangle_area(1) == 1\n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(5) == 0.0833333333333\nprint('Test passed')\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_First_Missing([1, 2, 4]) == 3, \"Wrong\"\nassert     find_First_Missing([1, 2, 4], 1) == 1, \"Wrong\"\nassert     find_First_Missing([1, 2, 4], 3) == 2, \"Wrong\"\nassert     find_First_Missing([1, 2, 4], 4) == 1, \"Wrong\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10]) == 0, \"Wrong First_Missing Number\"\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,11]) == 10, \"Wrong First_Missing Number\"\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10]) == 10, \"Wrong First_Missing Number\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_First_Missing([1,2,3]) == 1\nassert     find_First_Missing([1,2,3,4]) == 3\nassert     find_First_Missing([2,2,3,4,5]) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_First_Missing([4,5,1,2,3]) == 1\nassert     find_First_Missing([4,5,6,1,2,3]) == 2\nassert     find_First_Missing([1,2,3]) == 4\nassert     find_First_Missing([4,5,6,1,2,3]) == 2\nassert     find_First_Missing([1,2,3,4,5]) == 3\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_First_Missing([]) == 1\nassert     find_First_Missing([1]) == 2\nassert     find_First_Missing([2,3]) == 1\nassert     find_First_Missing([1,3,5]) == 2\nassert     find_First_Missing([1,2,3,4,6]) == 5\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_First_Missing([4,5,6,8,9]) == 2, \"Not Missing\"\nassert     find_First_Missing([9,4,5,2,8]) == 1, \"Not Missing\"\nassert     find_First_Missing([1,2,4,5,7]) == 3, \"Not Missing\"\nassert     find_First_Missing([1,2,3,4,5]) == 1, \"Not Missing\"\nassert     find_First_Missing([1,2,3,4]) == 2, \"Not Missing\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6]) == 1\nassert     find_First_Missing([1,2,3,5,6,7]) == 4\nassert     find_First_Missing([1,2,3,5,6,9]) == 4\nassert     find_First_Missing([1,2,3,4,5,6]) == 1\nassert     find_First_Missing([1,2,3,4,5,6]) == 1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('hello    world') == 'hello%20world'\nassert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('hello world') == 'hello%20world'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (replace_spaces('hello world') == 'hello%20world') \nassert     (replace_spaces('hello') == 'hello') \nassert     (replace_spaces('hello world') == 'hello%20world') \nassert     (replace_spaces('hello  world') == 'hello%20%20world') \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('This is a test') == 'This%20is%20a%20test'\nassert     replace_spaces('This is a test') == 'This%20is%20a%20test'\nassert     replace_spaces('This is a test') == 'This%20is%20a%20test'"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    replace_spaces(\"Hello World!\") == \"Hello%20World%20!\"\nassert \n    replace_spaces(\"\") == \"\"\nassert \n    replace_spaces(\"There are no spaces here!\") == \"There%20are%20no%20spaces%here!\"\n\n\ndef replace_in_dictionary(dict, find, replace):\n    '''\n    Write a function to replace the value of any given key in the dictionary with the given value.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces('This is a test') == 'This%20is%20a%20test'\nassert     replace_spaces('This has spaces') == 'This%20has%20spaces'\nassert     replace_spaces('This has%spaces') == 'This%20has%20spaces'\nassert     replace_spaces('No spaces') == 'No%20spaces'\nassert     replace_spaces(' ') == '%20'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces(\"abc\") == \"abc\", \"Function should be case sensitive\"\nassert     replace_spaces(\"test     \") == \"test%20%20%20\", \"String should not be modified\"\nassert     replace_spaces(\"test\") == \"test\", \"String should not be modified\"\nprint('You are doing great'"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces('The quick brown fox jumps over the lazy dog.') == \n'The%20quick%20brown%20fox%20jumps%20over%20the%20lazy%20dog.'\nprint('Pass')\n\ndef replace_spaces_2(string):\n    '''\n    Write a function to replace spaces in the given string with %20.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nreplace_spaces(\"This is my string\") == \"This%20is%20my%20string\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces('I love   Python') == 'I%20love%20Python', 'Should return I%20love%20Python'\nassert     replace_spaces('I like   Python') == 'I%20like%20Python', 'Should return I%20like%20Python'\nassert     replace_spaces('I love   Python and JS') == 'I%20love%20Python%20and%20JS', 'Should return I%20love%20Python%20and%20JS'\nassert     replace_spaces('I%20like%20Python') == 'I%20like%20Python', 'Should return I%20like%20Python'\nassert     replace_spaces('I%20like%20Python and JS') == 'I%20like%20Python%20and%20JS', 'Should return I%20like%20Python%20and%20JS'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces(\"\")     == \"\"\nassert     replace_spaces(\"Hello\")     == \"Hello\"\nassert     replace_spaces(\"Mr John Smith\")     == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Hello World\")     == \"Hello%20World\"\n\n\ndef num_compress(string):\n    '''\n    Write a function to compress the given string.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nSplit([1,2,3,4,5]) == [2,4] \nassert \nSplit([1,2,3,4,5,6]) == [2,4,6] \nassert \nSplit([1,2,3,4,5,6,7]) == [2,4,6,7] \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([2, 3, 4, 5, 6, 7, 8, 9, 10]) ==    [2, 4, 6, 8, 10]\nassert     Split([]) ==    []\nassert     Split([2,3]) ==    [2,3]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([1,2,3,4]) == [2,4], \"Wrong\"\nassert     Split([1,2,3,4,5,6,7]) == [2,4,6,8], \"Wrong\"\nassert     Split([]) == [], \"Wrong\"\nassert     Split([1,2,3]) == [2,3], \"Wrong\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('\\nTesting Split...')\n\nprint(Split([2,4,6,8]))\n\nassert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nSplit([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10], 'incorrect'\nassert \nSplit([1,2,3,4,5,6,7]) == [2,4,6,8], 'incorrect'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([]) == []\nassert     Split([1, 2, 3, 4, 5]) == [2, 4]\nassert     Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\nassert     Split([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6, 7]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nSplit([1,2,3,4,5,6]) == [2,4,6]\nSplit([1,2,3,4,5,6,7,8]) == [2,4,6,8]\nSplit([]) == []\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\nassert     Split([1,2,3,4,5,6,7]) == []\nassert     Split([1,2,3]) == []\nassert     Split([1]) == []\nassert     Split([]) == []\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert Split([2,2,4,5]) == [4]\nassert Split([2,2,3,5]) == [2]\nassert Split([2,2,3,4]) == [4]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nimport numpy as np\n\ncoords = np.array([[0, 0, 1],\n                   [0, 1, 0],\n                   [1, 0, 0]])\nprint(coords)\nadjac = adjac(coords)\nprint(adjac)"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nfrom itertools import permutations\n\ndef test_adjac():\n    assert adjac((0,0)) == []\n    assert adjac((1,0)) == [(0,0)]\n    "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef expand(arr, n = 2): \n    '''\n    Given an array arr of non-negative integers, expand arr by n in each direction. \n    If arr = [1, 2, 3], and n = 2, return arr = [1, 0, 0, 2, 2, 3, 3].\n    '''\n    pass\n\ndef permute(arr, n = 2): \n    '''\n    Given an array arr of non-negative integers, return the array after sorting its values.\n    '''\n    pass\n\ndef rotate(arr, k): \n    '''\n    Rotate an array of size n by k elements to the right, in the most efficient way.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef verif(t):\n    '''\n    Write a function to verify the validity of a given coordinate tuple. \n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nclass coordinate:\n    \n    def __init__(self, coordinate):\n        self.coordinate = coordinate\n        self.parent = None\n        self.visited = False\n        self.adjacent = []\n        self.depth = None\n\n    def __repr__(self):\n        return str(self.coordinate)\n\n    def addNeighbor(self, n, depth):\n        self.parent = n\n        self.adjacent.append(n)\n        self.depth = depth\n    \n    def getCoordinate(self):\n        return self.coordinate\n    \n    def isVisited(self):\n        return self.visited\n\n    def getDepth(self):\n        return self.depth\n    \n    def setVisited(self):\n        self.visited = True\n    \n    def getParent(self):\n        return self.parent\n    \n    def setParent(self, parent):\n        self.parent = parent\n    \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('hello there','') == 'h_e_l_o_th_e', 'Error replace_spaces'\nassert     replace_spaces('hello there', '_') == 'h_e_l_o_r_', 'Error replace_spaces'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(\"Hello World!\") == \"h_ello_w_orld_!\"\nassert     replace_spaces(\"Hello World!!!!\") == \"h_ello_w_orld_!\"\nassert     replace_spaces(\"Hello World!!!\") == \"h_ello_w_orld_!\"\nassert     replace_spaces(\"Hello World!?!\") == \"h_ello_w_orld_!\"\nassert     replace_spaces(\"Hello World!!!!!!!\") == \"h_ello_w_orld_!!\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('spam   eggs') =='spam_eggs'\nassert     replace_spaces('spam eggs') =='spam_eggs'\nassert     replace_spaces('spam eggs and coffee') =='spam_eggs_and_coffee'\nassert     replace_spaces('spam eggs and coffee and coffee') =='spam_eggs_and_coffee_and_coffee'\nassert     replace_spaces('spam eggs and coffee and coffee and coffee and coffee') =='spam_eggs_and_coffee_and_coffee_and_coffee_and_coffee'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces(\"w3resource\") == \"w3_resource\"\nassert     replace_spaces(\"w3_resource\") == \"w3resource\"\nassert     replace_spaces(\"w3_resource\") == \"w3resource\"\nassert     replace_spaces(\"w3_resource\") == \"w3resource\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces('Hi  there') == 'hi_there','replace_spaces is not correct'\nassert     replace_spaces('sdf_fdsf') == '_fdsf','replace_spaces is not correct'\nassert     replace_spaces('Hi  there') == 'h____e','replace_spaces is not correct'\nassert     replace_spaces('Hi  there') == 'h____e','replace_spaces is not correct'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces('The quick brown fox jumps over the lazy dog.') == \n'The_quick_brown_fox_jumps_over_the_lazy_dog'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces('I am an excellent developer') == 'I am_an_excellent_developer'\nassert     replace_spaces('I have just arrived') == 'I_have_just_arrived'\nassert     replace_spaces('Last week I met my best friend') == 'Last_week_I_met_my_best_friend'\nassert     replace_spaces('It is very nice to meet you') == 'It_is_very_nice_to_meet_you'\nassert     replace_spaces('You make me smile') == 'You_make_me_smile'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('This   is  a   test    of  underscores') == \"this_is_a_test_of_underscores\"\nassert     replace_spaces('is_a_test_of_underscores') == \"is_a_test_of_underscores\"\nassert     replace_spaces('This   is  a   test    of  underscores') == \"this_is_a_test_of_underscores\"\nassert     replace_spaces('is_a_test_of_underscores') == \"is_a_test_of_underscores\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces('a b c') == 'a_b_c'\nassert replace_spaces('a\\tb\\tc') == 'a_b_c'\nassert     replace_spaces('a\\nb\\tc') == 'a_b_c'\nassert replace_spaces('a\\nb\\tc') == 'a_b_c'\nassert replace_spaces('a') == 'a'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nreplace_spaces('This is a string with spaces')\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_zero([2, 3, 4, 0, 1, 0, 0]) ==     [2, 3, 4, 1, 0, 0, 0]\nassert     move_zero([0, 0, 0, 1, 2, 3]) ==     [0, 0, 1, 2, 3, 0]\nassert     move_zero([]) ==     []\nassert     move_zero([0]) ==     [0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nmove_zero([1,3,2,0,0,0,0,0,0,0]) == [1,3,2,0,0,0,0,0,0,0]\nassert \nmove_zero([0,0,1,2,0,1,0,0,0,0]) == [0,0,1,2,0,1,0,0,0,0]\nassert \nmove_zero([2,3,0,2,0,1,1,1]) == [2,3,0,2,0,1,1,1]\nassert \nmove_zero([0,1,2]) == [1,2,0]\nassert \nmove_zero([1,2,3,0,0,0,0,0,0,0]) == [1,2,3,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_zero([10, 20, 30, 40, 50, 0, 0, 0]) ==[10, 20, 30, 40, 50, 0, 0, 0], \\\n\"Fail\"\nassert     move_zero([10, 20, 30, 40, 50, 0, 0, 0, 0]) ==[10, 20, 30, 40, 50, 0, 0, 0, 0], \\\n\"Fail\"\nassert     move_zero([]) ==[], \\\n\"Fail\"\nassert     move_zero([1,2,3,4,5,6,7,8,0]) ==[1,2,3,4,5,6,7,8,0], \\\n\"Fail\""
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_zero([0, 1, 2, 3, 4, 0, 0, 0, 0, 3, 5, 0, 0, 0, 0, 0]) == [0, 1, 2, 3, 4, 5, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]\nassert     move_zero([0, 0, 0, 0, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero([0, 2, 3, 4, 0, 0, 0, 0, 0, 3, 5, 0, 0, 0, 0, 0]) == [0, 2, 3, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nmove_zero([1,2,0,3,0,5,0,7]) \nmove_zero([1,2,0,2,3,0,1,0,2,5,3,4,0,0,6,0,9]) \n\n'''"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_zero([1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_zero([0, 0, 0, 5, 2, 0, 2, 0, 0, 0, 8, 0, 1, 0, 0, 0, 4, 0, 0, 0]) \nassert not move_zero([0, 0, 0, 5, 2, 0, 2, 0, 0, 0, 8, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) \nassert not move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_zero([1, 2, 0, 1, 4, 1, 5, 0, 1]) == [1, 2, 1, 4, 1, 5, 0, 1, 0]\nassert     move_zero([1, 2, 0, 1, 4, 1, 5, 0, 1, 0, 2, 6, 1, 2, 3]) == [1, 2, 1, 4, 1, 5, 0, 1, 0, 2, 6, 1, 2, 3, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_zero([1, 2, 0, 4, 0, 0, 5]) == [1, 2, 5, 4, 0, 0, 0]\nassert     move_zero([0, 0, 1, 4, 3, 0, 0, 2, 0, 0, 0]) == [0, 0, 1, 4, 3, 2, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6],6) == 12\nassert pair_xor_Sum([1,2,3,4,5,6],7) == 21\nassert pair_xor_Sum([1,2,3,4,5,6],8) == 31\nassert pair_xor_Sum([1,2,3,4,5,6],9) == 40\nassert pair_xor_Sum([1,2,3,4,5,6],10) == 49\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6], 6) == 1, \"Error\"\nassert     pair_xor_Sum([1,2,3,4,5,6], 7) == 2, \"Error\"\nassert     pair_xor_Sum([1,2,3,4,5,6], 8) == 4, \"Error\"\nassert     pair_xor_Sum([1,2,3,4,5,6], 9) == 3, \"Error\"\nassert     pair_xor_Sum([1,2,3,4,5,6], 10) == 0, \"Error\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\npair_xor_Sum([1,2,3,4,5,6],3) == 22\npair_xor_Sum([1,2,3,4,5,6],6) == 22\npair_xor_Sum([1,2,3,4,5,6],7) == 22"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_xor_Sum([1, 2, 4, 7, 8, 9],6) == 32\nassert pair_xor_Sum([1, 2, 4, 7, 8, 9],5) == 28\nassert pair_xor_Sum([1, 2, 4, 7, 8, 9],4) == 24\nassert pair_xor_Sum([1, 2, 4, 7, 8, 9],3) == 6\nassert pair_xor_Sum([1, 2, 4, 7, 8, 9],2) == 4\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],10) == 82 \nassert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],9) == 73 \nassert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],8) == 71 \nassert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],7) == 66 \nassert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],6) == 61 \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('the result of pair_xor_Sum is :', pair_xor_Sum([1,2,3,4,5],6))\nprint('the result of pair_xor_Sum is :', pair_xor_Sum([1,2,3,4,5],7))\nprint('the result of pair_xor_Sum is :', pair_xor_Sum([1,2,3,4,5],8))\nprint('the result of pair_xor_Sum is :', pair_xor_Sum([1,2,3,4,5],9))\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert pair_xor_Sum([2,4,1,5,7,8],6) == 31\nassert pair_xor_Sum([2,4,1,5,7,8],5) == 37\nassert pair_xor_Sum([1,2,3,4,5,6,7],1) == 2\nassert pair_xor_Sum([2,4,1,5,7,8],4) == 6\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    heap_sort([1, 2, 3, 5, 4]) == [1, 2, 3, 4, 5]\n    heap_sort([10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10]\n    heap_sort([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0]\n    heap_sort([]) == []\n    heap_sort([0,1,2,3,4,5,6]) == [0,1,2,3,4,5,6]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_sort([10, 5, 6, 3, 2, 1]) == [1, 2, 3, 5, 6, 10]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     hq.heapify([3,1,2,5,8,5,7,6,4,9]) == [1,2,3,5,5,6,7,8,9,4], \\\n    'failed on heap_sort([3,1,2,5,8,5,7,6,4,9]): incorrect result'\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_heapify(arr, n, i):\n    '''\n    Max-heapify the given array.\n    '''\n    if i > n//2: return\n    l, r = i*2 + 1, i*2 + 2\n    largest = i\n    if l <= n and arr[i] < arr[l]:\n        largest = l\n    if r <= n and arr[largest] < arr[r]:\n        largest = r\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        max_heapify(arr, n, largest)\n\ndef build_max_heap(arr):\n    '''\n    Build max heap from a given array.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        max_heapify(arr, n, i)\n\ndef heap_sort_max_heap(arr):\n    '''\n    Write a function to sort the given array using max heap.\n    '''\n    pass\n\ndef heap_sort_arr(arr):\n    '''\n    Write a function to sort the given array using heap sort.\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     noprofit_noloss(3,3) == False, \"noprofit_noloss should return False\"\nassert     noprofit_noloss(0,3) == False, \"noprofit_noloss should return False\"\nassert     noprofit_noloss(3,0) == False, \"noprofit_noloss should return False\"\nassert     noprofit_noloss(10,8) == False, \"noprofit_noloss should return False\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    actual_cost,sale_amount = 5,3\n    print(noprofit_noloss(actual_cost,sale_amount))\n    actual_cost,sale_amount = 10,4\n    print(noprofit_noloss(actual_cost,sale_amount))\n    actual_cost,sale_amount = -5,3\n    print(noprofit_noloss(actual_cost,sale_amount))"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     noprofit_noloss(1,1) == True\nassert     noprofit_noloss(0.5,0.5) == False\nassert     noprofit_noloss(2,2) == True\n\nprint(\"all tests passed\""
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     noprofit_noloss(actual_cost,sale_amount) == True\nassert     noprofit_noloss(actual_cost,actual_cost) == False"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     noprofit_noloss(actual_cost=0.1, sale_amount=10.0) == False\nassert     noprofit_noloss(actual_cost=0.1, sale_amount=-10.0) == False\nassert     noprofit_noloss(actual_cost=100.0, sale_amount=1.0) == True\nassert     noprofit_noloss(actual_cost=-100.0, sale_amount=-1.0) == True\nassert     noprofit_noloss(actual_cost=-100.0, sale_amount=1.0) == True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost - sale_amount >= 0\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(100,0) == True, \"noprofit_noloss should return true if actual_cost == 0\"\nassert     noprofit_noloss(150,50) == True, \"noprofit_noloss should return true if actual_cost!= 0\"\nassert     noprofit_noloss(100,50) == False, \"noprofit_noloss should return false if actual_cost!= 0\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert not noprofit_noloss(34.23,5)\nassert not noprofit_noloss(34.23,6)\nassert not noprofit_noloss(34.23,9)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     noprofit_noloss(actual_cost = 100, sale_amount = 200)\nassert noprofit_noloss(actual_cost = 0, sale_amount = 200) == True\nassert noprofit_noloss(actual_cost = 100, sale_amount = 100) == False\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef mwind_chill(wind_speed,temperature):\n    '''\n    Write a function to calculate the wind chill index given the wind speed and the temperature in celsius.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     wind_chill(36.3,70) == 49.0\nassert     wind_chill(36.3,70.2) == 48.6\nassert     wind_chill(36.3,70.6) == 48.5\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     wind_chill(20,10) == 13\nassert wind_chill(20,15) == 16\nassert wind_chill(20,25) == 18\nassert wind_chill(20,30) == 21\nassert wind_chill(20,35) == 23\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    wind_chill(120,30) == 27.4\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     wind_chill(4, 30) == 33.96, \\\n        'Wrong answer. Your answer is %f but it should be 33.96' %wind_chill(4, 30)\nassert     wind_chill(5, 30) == 37.09, \\\n        'Wrong answer. Your answer is %f but it should be 37.09' %wind_chill(5, 30)\nassert     wind_chill(6, 30) == 37.09, \\\n        'Wrong answer. Your answer is %f but it should be 37.09' %wind_chill(6, 30)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     wind_chill(0,0) == 37.8, \"Wrong answer. Your answer is: \" + str(wind_chill(0,0))\nassert wind_chill(12,0) == 37.8, \"Wrong answer. Your answer is: \" + str(wind_chill(12,0))\nassert wind_chill(25,0) == 37.8, \"Wrong answer. Your answer is: \" + str(wind_chill(25,0))\nassert wind_chill(0,40) == 37.8, \"Wrong answer. Your answer is: \" + str(wind_chill(0,40))\nassert wind_chill(12,40) == 37.8, \"Wrong answer. Your answer is: \" + str(wind_chill(12,40))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nwind_chill(0,10) == 32\nwind_chill(3,10) == 37\nwind_chill(5,10) == 43\nwind_chill(10,10) == 45\nwind_chill(10,20) == 43\nwind_chill(15,10) == 49\nwind_chill(10,25) == 45\nwind_chill(20,25) == 47\nwind_chill(30,30) == 39\nwind_chill(30,40) == 47\nwind_chill(30,50) == 50\nwind_chill(30,60) == 50\nwind_chill(30,80) == 47\nwind_chill(30,90) == 49\nwind_chill(30,100) == 52\nwind_chill(30,120) == 56\nwind_chill(30,140) == 59\nwind_chill(30,160) == 64\nwind_chill(30,180) == 66\nwind_chill(30,210) == 68\nwind_chill(30,220) == 70\nwind_chill(30,250) == 72\nwind_chill(30,260) == 74\nwind_chill(30,280) == 77\nwind_chill(30,300) == 79\nwind_chill(30,320) == 81\nwind_chill(30,350) == 84\nwind_chill(30,400) == 87\nwind_chill(30,410) == 90\nwind_chill(30,420) == 92\nwind_chill(30,450) == 95\nwind_chill(30,470) == 98\nwind_chill(30,500) == 100\nwind_chill(30,520) == 102\nwind_chill(30,550) == 105\nwind_chill(30,560) == 108\nwind_chill(30,600) == 111\nwind_chill(30,650) == 114\nwind_chill(30,700) == 117\nwind_chill(30,750) == 120\nwind_chill(30,800) == 123\nwind_chill(30,900) == 126\nwind_chill(30,1000) == 129\nwind_chill(30,1150) == 132\nwind_chill(30,1250) == 135\nwind_chill(30,1350) == 138\nwind_chill(30,1400) == 141\nwind_chill(30,1450) == 144\nwind_chill(30,1500) == 147\nwind_chill(30,1600) == 150\nwind_chill(30,1750) == 153\nwind_chill(30,1800) == 156\nwind_chill(30,1900) == 159\nwind_chill(30,2000) == 162\nwind_chill(30,2100) == 165\nwind_chill(30,2200) == 168\nwind_chill(30,2300) == 171\nwind_chill(30,2400) == 174\nwind_chill(30,2500) == 177\nwind_chill(30,2700) == 180\nwind_chill(30,2800) == 183\nwind_chill(30,2900) == 186\nwind_chill(30,3000) == 189\nwind_chill(30,3100) == 192\nwind_chill(30,3200) == 195\nwind_chill(30,3300) == 198\nwind_chill(30,3400) == 201\nwind_chill(30,3500) == 204\nwind_chill(30,3600) == 207\nwind_chill(30,3700) == 210\nwind_chill(30,4000) == 213\nwind_chill(30,4100) == 216\nwind_chill(30,4200) == 219\nwind_chill(30,4300) == 222\nwind_chill(30,4400) == 225\nwind_chill(30,4500) == 228\nwind_chill(30,4600) == 231\nwind_chill(30,4700) == 234\nwind_chill(30,4800) == 237\nwind_chill(30,4900) == 240\nwind_chill(30,5000) == 243\nwind_chill(30,5100) == 246\nwind_chill(30,5200) == 249\nwind_chill(30,5300) == 252\nwind_chill(30,5400) == 255\nwind_chill(30,5500) == 258\nwind_chill(30,5600) == 261\nwind_chill(30,5700) == 264\nwind_chill(30,5800) == 267\nwind_chill(30,5900) == 270\nwind_chill(30,6000) == 273\nwind_chill(30,6100) == 276\nwind_chill(30,6200) == 279\nwind_chill(30,6300) == 282\nwind_chill(30,6400) == 285\nwind_chill(30,6500) == 288\nwind_chill(30,6600) == 291\nwind_chill(30,6700) == 294\nwind_chill(30,6800) == 297\nwind_chill(30,6900) == 300\nwind_chill(30,7000) == 303\nwind_chill(30,7100) == 306\nwind_chill(30,7200) == 309\nwind_chill(30,7300) == 312\nwind_chill(30,7400) == 315\nwind_chill(30,7500) == 318\nwind_chill(30,7600) == 321\nwind_chill(30,7700) == 324\nwind_chill(30,7800) == 327\nwind_chill(30,7900) == 330\nwind_chill(30,8000) == 333\nwind_chill(30,8100) == 336\nwind_chill(30,8200) == 339\nwind_chill(30,8300) == 342\nwind_chill(30,8400) == 345\nwind_chill(30,8500) == 348\nwind_chill(30,8600) == 351\nwind_chill(30,8700) == 354\nwind_chill(30,8800) == 357\nwind_chill(30,8900) == 360\nwind_chill(30,9000) == 363\nwind_chill(30,9100) == 366\nwind_chill(30,9200) == 369\nwind_chill(30,9300) == 372\nwind_chill(30,9400) == 375\nwind_chill(30,9500) == 378\nwind_chill(30,9600) == 380\nwind_chill(30,9700) == 383\nwind_chill(30,9800) == 386\nwind_chill(30,9900) == 389\nwind_chill(30,10000) == 392\nwind_chill(30,10002) == 394\nwind_chill(30,10015) == 397\nwind_chill(30,10027) == 400\nwind_chill(30,10040) == 403\nwind_chill(30,10052) == 406\nwind_chill(30,10065) == 409\nwind_chill(30,10078) == 412\nwind_chill(30,10091) == 415\nwind_chill(30,10104) == 418\nwind_chill(30,10117) == 421\nwind_chill(30,10130) == 424\nwind_chill(30,10143) == 427\nwind_chill(30,10156) == 430\nwind_chill(30,10169) == 433\nwind_chill(30,10182) == 436\nwind_chill(30,10203) == 439\nwind_chill(30,10216) == 442\nwind_chill(30,10229) == 445\nwind_chill(30,10242) == 448\nwind_chill(30,10255) == 451\nwind_chill(30,10268) == 453\nwind_chill(30,10279) == 456\nwind_chill(30,10280) == 459\nwind_chill(30,10283) == 462\nwind_chill(30,10285) ="
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     wind_chill(3, 10) == 13.37\nassert wind_chill(3, 0) == 32.78\nassert wind_chill(2, -10) == -4.86\nassert wind_chill(0, 0) == 32.78\nassert wind_chill(0, 100) == 32.78\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sample_nam(['Sam', 'jane', 'dave', 'Molly', 'Alice', 'Jax']) == 10, \"sample_nam([\\\"Sam\\\", \\\"jane\\\", \\\"dave\\\", \\\"Molly\\\", \\\"Alice\\\", \\\"Jax\\\"])\"\nassert     sample_nam(['sams', 'jane', 'dave', 'Molly', 'Alice', 'Jax']) == 8, \"sample_nam([\\\"sams\\\", \\\"jane\\\", \\\"dave\\\", \\\"Molly\\\", \\\"Alice\\\", \\\"Jax\\\"])\"\nassert     sample_nam(['Sams', 'Jane', 'Dave', 'Molly', 'Alice', 'Jax']) == 10, \"sample_nam([\\\"Sams\\\", \\\"Jane\\\", \\\"Dave\\\", \\\"Molly\\\", \\\"Alice\\\", \\\"Jax\\\"])\"\nassert     sample_nam(['Sam', 'Jane', 'Dave', 'Molly', 'Alice', 'Jax']) == 6, \"sample_nam([\\\"Sam\\\", \\\"Jane\\\", \\\"Dave\\\", \\\"Molly\\\", \\\"Alice\\\", \\\"Jax\\\"])\"\nassert     sample_nam(['sam', 'Jane', 'dave', 'Molly', 'Alice', 'Jax']) == 6, \"sample_nam([\\\"sam\\\", \\\"Jane\\\", \\\"dave\\\", \\\"Molly\\\", \\\"Alice\\\", \\\"Jax\\\"])\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sample_nam(['Jagan', 'SH', 'HG', 'LA', 'Anand', 'H', 'K']) == 7\nassert     sample_nam(['Jagan', 'SH', 'HG', 'LA', 'Anand', 'H', 'K', 'L']) == 5"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsample_nam([]) == 0\nassert sample_nam([]) == 0\nassert sample_nam(['a']) == 0\nassert sample_nam(['A']) == 0\nassert sample_nam(['Aa', 'aa', 'aA']) == 3\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sample_nam(['Adam', 'Max', 'Jane', 'Sasha']) == 7\nassert     sample_nam(['Adam', 'Max', 'Jane', 'Sasha', 'Qamet']) == 5\nassert     sample_nam(['Adam', 'Max', 'Jane', 'Sasha', 'Qamet', 'Lena']) == 5\nassert     sample_nam(['Adam', 'Max', 'Jane', 'Sasha', 'Qamet', 'Lena', 'Mary', 'Jay']) == 8\nassert     sample_nam(['Adam', 'Max', 'Jane', 'Sasha', 'Qamet', 'Lena', 'Mary', 'Jay', 'Aimee', 'Marie', 'Katerina']) == 10\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sample_nam([]) == 0\nassert     sample_nam(['', 'abc']) == 3\nassert     sample_nam(['Hello', 'hello', 'HELLO']) == 4\nassert     sample_nam(['Jack', 'jacks', 'jack', 'JACK']) == 5\n\ndef odd_even_sum(numbers):\n    '''\n    Write a function that takes a list of numbers and returns two numbers.\n    The first number is the sum of all the numbers that are even.\n    The second number is the sum of all the numbers that are odd.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam([]) == 0\nassert     sample_nam(['']) == 0\nassert     sample_nam(['a', 'b', 'c']) == 0\nassert     sample_nam(['a', 'b', 'c']) == 0\nassert     sample_nam(['a', 'b', 'c']) == 0\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sample_nam([\"Saransh\", \"Hari\", \"Akanksha\", \"Aryan\", \"Sid\", \"Amal\"]) == 7, \"Fail\"\nassert     sample_nam([\"Saransh\", \"Hari\", \"Akanksha\", \"Aryan\"]) == 5, \"Fail\"\nassert     sample_nam([\"Saransh\", \"Hari\", \"Akanksha\", \"Aryan\", \"Sid\", \"Amal\", \"Aryan\", \"Sid\", \"Amal\"]) == 10, \"Fail\"\nassert     sample_nam([\"Aryan\", \"Sid\", \"Amal\", \"Aryan\", \"Sid\", \"Akanksha\"]) == 5, \"Fail\"\nassert     sample_nam([\"Sid\", \"Hari\", \"Sid\", \"Hari\"]) == 3, \"Fail\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsample_nam(['Jon', 'John', 'Moe', 'Sally', 'Sue', 'Jane']) == 13\nsample_nam(['Jon', 'John', 'Moe', 'Sally', 'Sue']) == 10\nsample_nam(['John', 'Moe', 'Sally', 'Sue']) == 8\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam([\"Amir\", \"jane\", \"Sam\"]) == 6, \"Should be 6\"\nassert     sample_nam([\"Amir\", \"jane\", \"Sam\", \"Tuna\", \"Tuna\"]) == 5, \"Should be 5\"\nassert     sample_nam([\"Amir\", \"Tuna\", \"Tuna\", \"Tuna\", \"Tuna\"]) == 5, \"Should be 5\"\nassert     sample_nam([\"Amir\", \"Tuna\", \"Tuna\", \"Tuna\", \"Tuna\", \"jane\"]) == 6, \"Should be 6\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sample_nam(['Sam', 'Amy', 'Sarah', 'Tim', 'Samantha', 'Samantha']) == 5\nassert     sample_nam(['sam', 'amy','sarah', 'tim','samantha','samantha']) == 8\nassert     sample_nam(['Sam', 'Amy', 'Sarah', 'Tim', 'Samantha', 'Sam', 'Amy', 'Sarah', 'Tim', 'Samantha', 'Samantha']) == 10\nassert     sample_nam(['Sam', 'Amy', 'Sarah', 'Tim', 'Samantha', 'Sam', 'Amy', 'Sarah', 'Tim', 'Samantha', 'Samantha'], ) == 5\nassert     sample_nam(['s', 'a', 't', 'i', 'd', 'e', 'a', 't', 'i', 'd', 'e']) == 7\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nremove_parenthesis(\"(a)Hello(b)World\") == \"aHellobWorld\"\nassert \nremove_parenthesis(\"Hello(world)\") == \"Helloworld\"\nassert \nremove_parenthesis(\"()\") == \"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis([\"()\", \"((()))\", \"(())(())\", \"()()()()\"]) == [\"\", \"()\", \"(())(()\", \"()()()()\"]\nassert     remove_parenthesis([\"()\", \"((()))\", \"(())(())\", \"()()()()\", \"()()\"]) == [\"\", \"()\", \"(())(()\", \"(()())\", \"(()()())\"]\nassert     remove_parenthesis([\"()\", \"((()))\", \"(())(())\", \"()()()()\", \"()()\"]) == [\"\", \"()\", \"(())(()\", \"()()\", \"()()()\"]\nassert     remove_parenthesis([\"(\", \")\", \"(\", \")\", \")\", \"()()()()()()\"]) == [\"(\", \")\", \"()()()()\", \"()()\"]\nassert     remove_parenthesis([\"(\", \")\", \"(\", \")\", \"()()\", \"()\", \"()()()\"]) == [\"(\", \")\", \"()()\", \"()\", \"()()\"]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis('(Totally normal)') == 'Totally normal'\nassert     remove_parenthesis('(Not really)') == 'Not really'\nassert     remove_parenthesis('(Still not really)') == 'Still not really'\nassert     remove_parenthesis('(Here is the text I want to remove)') == 'Here is the text I want to remove'\nassert     remove_parenthesis('(Here is the text I want to remove) (inbetween)') == 'Here is the text I want to remove inbetween'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nremove_parenthesis('(aa,bb)') == 'aa,bb'\nassert \nremove_parenthesis('(aa,bb,)') == 'aa,bb'\nassert \nremove_parenthesis('aa,bb,cc') == 'aa,bb,cc'\nassert \nremove_parenthesis('aa,bb,cc') == 'aa,bb,cc'\nassert \nremove_parenthesis('aa,bb,cc') == 'aa,bb,cc'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert remove_parenthesis('()(())(())') == ''\nassert remove_parenthesis(')') == ''\nassert remove_parenthesis('(()(())(())') == '()()()'\nassert remove_parenthesis('()()()())') == '()()()'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_parenthesis('A (B) (C)') == 'ABC'\nassert     remove_parenthesis('A (B) (C) (D)') == 'ABCD'\nassert     remove_parenthesis('A (B) (C) (D)') == 'ABCD'\nassert     remove_parenthesis('A (B) (C) (D) (E)') == 'ABCD E'\nassert     remove_parenthesis('A (B) (C) (D)') == 'ABCD'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_parenthesis(\"(foo)\") == \"foo\"\nassert     remove_parenthesis(\"(foo)bar\") == \"foobar\"\nassert     remove_parenthesis(\"(foo)bar(baz)\") == \"foobar\"\nassert     remove_parenthesis(\"(foo)bar(baz))\") == \"foobar\"\nassert     remove_parenthesis(\"foo)bar(baz)\") == \"foobar\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    remove_parenthesis(['(1 + 2)', '(3 + (4 * 5))', '(((3 + 4) * 5) + 6)'] ) == \\\n    ['1 + 2', '3 + 4 * 5', '5 + 6']\n\ndef is_leap_year(year):\n    '''\n    Write a function to check if the given year is a leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis(\"(((ABC)))\") == \"ABC\", \"Test 1 Failed!\"\nassert     remove_parenthesis(\"(ABC(def))\") == \"ABCdef\", \"Test 2 Failed!\"\nassert     remove_parenthesis(\"(((ABC)))\") == \"ABC\", \"Test 3 Failed!\"\nassert     remove_parenthesis(\"(((ABC)))\") == \"ABC\", \"Test 4 Failed!\"\nassert     remove_parenthesis(\"(ABC)\") == \"ABC\", \"Test 5 Failed!\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_parenthesis('(5+8)*(3-2)*2+6') ==     '5+8*3-2*2+6'\nassert     remove_parenthesis('(5+8)*(3-2)*2-6') ==     '5+8*3-2*2-6'\nassert     remove_parenthesis('(5+8)*(3-2)*2+6-5') ==     '5+8*3-2*2+6-5'\nassert     remove_parenthesis('5+8*3-2*2+6-5') ==     '5+8*3-2*2+6-5'\nassert     remove_parenthesis('5+8*3-2*2+6') ==     '5+8*3-2*2+6'\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nis_nonagonal(1) == 1\nis_nonagonal(2) == 3\nis_nonagonal(3) == 5\nis_nonagonal(4) == 7\nis_nonagonal(5) == 11\nis_nonagonal(6) == 13\nis_nonagonal(7) == 15\nis_nonagonal(8) == 17\nis_nonagonal(9) == 19\nis_nonagonal(10) == 21\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(5) == 11\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_nonagonal(0)\nassert not is_nonagonal(1)\nassert not is_nonagonal(2)\nassert not is_nonagonal(3)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_nonagonal(1) == 1, 'The first non-diagonal should be 1'\nassert     is_nonagonal(2) == 5, 'The second non-diagonal should be 5'\nassert     is_nonagonal(3) == 7, 'The third non-diagonal should be 7'\nassert     is_nonagonal(4) == 9, 'The fourth non-diagonal should be 9'\nassert     is_nonagonal(5) == 13, 'The fifth non-diagonal should be 13'\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_nonagonal(1) == 1\nis_nonagonal(3) == 5\nis_nonagonal(5) == 13\nis_nonagonal(7) == 21"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_nonagonal(1) == 1, \"Pass\"\nassert     is_nonagonal(2) == 3, \"Pass\"\nassert     is_nonagonal(3) == 5, \"Pass\"\nassert     is_nonagonal(4) == 7, \"Pass\"\nassert     is_nonagonal(5) == 9, \"Pass\"\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(5) == 11\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_nonagonal(0) == 1\nassert \nis_nonagonal(1) == 0\nassert \nis_nonagonal(2) == 1\nassert \nis_nonagonal(3) == 2\nassert \nis_nonagonal(4) == 2\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle('a z z') == 'a z z'\nassert     text_match_wordz_middle('a z z') == 'a z z'\nassert     text_match_wordz_middle('a') == 'a'\nassert     text_match_wordz_middle('z') == 'z'\nassert     text_match_wordz_middle('z') == 'z'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle(\"SZTETZTA, czy zbyt g\u0142odny?\") == True, \"Test 1 Failed\"\nassert     text_match_wordz_middle(\"Je\u015bli mam poda\u0107 pomagaj\u0105co, wi\u0119cej s\u0142\u00f3w\") == False, \"Test 2 Failed\"\nassert     text_match_wordz_middle(\"SZTETZTA, czy zbyt g\u0142odny?\") == True, \"Test 3 Failed\"\nassert     text_match_wordz_middle(\"SZTETZTA, czy zbyt g\u0142odny?\") == True, \"Test 4 Failed\"\nassert     text_match_wordz_middle(\"SZTETZTA, czy zbyt g\u0142odny?\") == True, \"Test 5 Failed\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('') == False, 'Tests 1'\nassert     text_match_wordz_middle('asdzdzdz') == False, 'Tests 2'\nassert     text_match_wordz_middle('asdzdzdz') == True, 'Tests 3'\nassert     text_match_wordz_middle('asdzdzdzas') == True, 'Tests 4'\nassert     text_match_wordz_middle('asdzdzdz') == False, 'Tests 5'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle(\"z\") == False\nassert     text_match_wordz_middle(\"Z\") == True\nassert     text_match_wordz_middle(\"zZ\") == True\nassert     text_match_wordz_middle(\"zZx\") == True\nassert     text_match_wordz_middle(\"zZx\") == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle('') == False\nassert     text_match_wordz_middle('b') == True\nassert     text_match_wordz_middle('ab') == False\nassert     text_match_wordz_middle('aba') == True\nassert     text_match_wordz_middle('a') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('a') == True\nassert     text_match_wordz_middle('a z') == True\nassert     text_match_wordz_middle('a z a') == True\nassert     text_match_wordz_middle('a z a b') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle(\"a2c\") == True\nassert     text_match_wordz_middle(\"a2c3\") == True\nassert     text_match_wordz_middle(\"a2c3z\") == False\nassert     text_match_wordz_middle(\"ab2cd3\") == False\nassert     text_match_wordz_middle(\"ab2cd3x\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle( 'x' ) == False, \"First Failed Case\"\nassert     text_match_wordz_middle( 'z' ) == True, \"Second Failed Case\"\nassert     text_match_wordz_middle( 'zz' ) == True, \"Third Failed Case\"\nassert     text_match_wordz_middle( 'zzz' ) == True, \"Fourth Failed Case\"\nassert     text_match_wordz_middle( 'zzzz' ) == True, \"Fifth Failed Case\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz_middle(\"azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle('as z') == False\nassert     text_match_wordz_middle('as zz') == True\nassert     text_match_wordz_middle('as') == False\nassert     text_match_wordz_middle('as') == True\nassert     text_match_wordz_middle('as as') == True\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 1) == 5\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 4) == 1\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == 2\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 6) == 3\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 7) == 4\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 4) == [50, 40, 30, 20, 10]\nassert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 1) == [50, 40, 30, 20, 10]\nassert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 5) == [50, 40, 30, 20, 10]\nassert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 0) == [10, 20, 30, 40, 50]\nassert     reverse_Array_Upto_K([10, 20, 30, 40, 50], -1) == [50, 40, 30, 20, 10]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreverse_Array_Upto_K([1,2,3,4], 3) == [-4,-3,-2,-1]\nassert reverse_Array_Upto_K([1,2,3,4], 4) == [-4,-3,-2,1]\nassert reverse_Array_Upto_K([1,2,3,4], 5) == [-4,-3,-2,1,2]\n\ndef reverse_Array_Upto_K_wrapper(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_Array_Upto_K([2, 1, 7, 5, 3, 4], 3) ==     [7, 5, 3, 4, 1, 2], \"Wrong\"\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 1) ==     [5, 6, 4, 3, 2, 1], \"Wrong\"\nassert reverse_Array_Upto_K([0, 1], 0) ==     [1], \"Wrong\"\nassert reverse_Array_Upto_K([2, 3, 4], 0) ==     [], \"Wrong\"\nassert reverse_Array_Upto_K([2, 3, 4], 1) ==     [4, 3, 2], \"Wrong\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_Array_Upto_K([5,2,3,4], 3) == [3,4,2,5]\nassert     reverse_Array_Upto_K([], 1) == []\nassert     reverse_Array_Upto_K([1,2,3,4], 3) == [4,3,2,1]\nassert     reverse_Array_Upto_K([0,1,2,3,4], 3) == [4,3,2,1,0]\nassert     reverse_Array_Upto_K([1,2,3,4], 4) == [4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2]\nassert     reverse_Array_Upto_K([1, 2, 3, 4], 5) == [4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 7) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 8) == [8,7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 2) == [8,7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 1) == [8,7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 0) == []\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 10) == []\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4], 2) == [4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4], 1) == [1, 2, 3, 4]\nassert     reverse_Array_Upto_K([1, 2, 3, 4], 0) == [1, 2, 3, 4]\nassert     reverse_Array_Upto_K([1, 2, 3, 4], 5) == None\nassert     reverse_Array_Upto_K([], 0) == None\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1] \nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2] \nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1] \nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1] \nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 10) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert reverse_Array_Upto_K([1,2,3,4], 3) == [4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4], 3) == [4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4], 4) == [1,2,3,4]\nassert reverse_Array_Upto_K([1,2,3,4], 5) == [4,3,2,1]\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple(('1', '2', '3'), {}) == ('1', '2', '3', {})\nassert     add_dict_to_tuple(('1', '2', '3'), {'a': 1}) == ('1', '2', '3', {'a': 1})\nassert     add_dict_to_tuple(('1', '2', '3'), {'b': 2}) == ('1', '2', '3', {'a': 1, 'b': 2})\nassert     add_dict_to_tuple(('1', '2', '3'), {'c': 3}) == ('1', '2', '3', {'a': 1, 'b': 2, 'c': 3})\nassert     add_dict_to_tuple(('1', '2', '3'), {'d': 4, 'e': 5}) == ('1', '2', '3', {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_dict_to_tuple( ('a', 'b', 'c', 'd', 'e'), {'a': 1, 'b': 2} ) == ('a', 'b', 'c', 'd', 'e', 1, 2)\nassert     add_dict_to_tuple( ('a', 'b', 'c', 'd', 'e'), {'e': 1, 'f': 2} ) == ('a', 'b', 'c', 'd', 'e', 1, 2, 3)\nassert     add_dict_to_tuple( ('a', 'b', 'c', 'd', 'e'), {'a': 1} ) == ('a', 'b', 'c', 'd', 'e', 1)\nassert     add_dict_to_tuple( ('a', 'b', 'c', 'd', 'e'), {'a': 1, 'b': 2} ) == ('a', 'b', 'c', 'd', 'e', 1, 2)\nassert     add_dict_to_tuple( ('a', 'b', 'c', 'd', 'e'), {'a': 1, 'b': 2, 'c': 3} ) == ('a', 'b', 'c', 'd', 'e', 1, 2, 3)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_dict_to_tuple((1,2,3),{'a':1}) == (1,2,3,{'a':1})\nassert     add_dict_to_tuple((1,2,3),{'a':1,'b':2}) == (1,2,3,{'a':1,'b':2})\nassert     add_dict_to_tuple((1,2,3),{'a':1,'c':3}) == (1,2,3,{'a':1,'b':2,'c':3})\nassert     add_dict_to_tuple((1,2,3),{'c':3}) == (1,2,3,{'a':1,'b':2})\n\n\ndef add_tuple_to_tuple(test_tup1,test_tup2):\n    '''\n    Write a function to add tuple to tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (True, (True, {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}))\nassert     add_dict_to_tuple(test_tup, test_dict) == (False, (False, {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}))\nassert     add_dict_to_tuple(test_tup, test_dict) == (False, (False, {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}))\nassert     add_dict_to_tuple(test_tup, test_dict) == (True, (True, {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}))"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple((), {}) == ({}, {})\nassert     add_dict_to_tuple((1, 2, 3), {}) == (1, 2, 3)\nassert     add_dict_to_tuple((), {'a': 1}) == ({'a': 1}, {})\nassert     add_dict_to_tuple((1, 2, 3), {'a': 1}) == (1, 2, 3)\nassert     add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 1}) == (1, 2, 3)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         add_dict_to_tuple(('a', 'b', 'c'), {}) == ('a', 'b', 'c')\nassert         add_dict_to_tuple(('a', 'b', 'c'), {'c': 'd'}) == ('a', 'b', 'd')\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_dict_to_tuple([{'a':1}, {'b':2}], {'a':10, 'b':20}) == (10, 20), 'Wrong output'\nassert add_dict_to_tuple((1, 2), {'a':10, 'b':20}) == (10, 20), 'Wrong output'\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (add_dict_to_tuple(('a', 'b', 'c'), {'x':1, 'y':2, 'z':3})) == ('a', 'b', 'c', {'x': 1, 'y': 2, 'z': 3}), \"ERROR\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple(tuple([1, 2, 3]), {\"a\": 1, \"b\": 2, \"c\": 3}) == (1, 2, 3, {\"a\": 1, \"b\": 2, \"c\": 3})\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize the variables\n    n = len(cost)\n    max_avg = float('-inf')\n    curr_avg = 0\n    # traverse through all cells\n    for i in range(n):\n        for j in range(n):\n            # base case\n            if i == 0 and j == 0:\n                curr_avg = cost[i][j]\n            elif i == 0:\n                curr_avg = cost[i][j] + min(curr_avg, cost[i][j-1])\n            elif j == 0:\n                curr_avg = cost[i][j] + min(curr_avg, cost[i-1][j])\n            else:\n                curr_avg = cost[i][j] + min(curr_avg, cost[i-1][j], cost[i][j-1])\n            # update the maximum average\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmaxAverageOfPath([[1,3,1,1],\n    [2,2,2,2],\n    [2,3,3,3],\n    [3,4,4,4]]) == 3.6\nassert maxAverageOfPath([[1,1,2,2],\n    [3,2,2,2],\n    [3,3,3,3],\n    [4,4,4,4]]) == 6\nassert maxAverageOfPath([[1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3],\n    [4,4,4,4]]) == 5\nassert maxAverageOfPath([[1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3],\n    [4,4,4,4]]) == "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maxAverageOfPath([[1,2,3],[4,8,10],[7,6,9]]) == 5.6\nassert     maxAverageOfPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]) == 11.65\nassert     maxAverageOfPath([[1,2,3],[4,8,10],[7,6,9]]) == 3.8\nassert     maxAverageOfPath([[1,2,3],[4,8,10],[7,6,9]]) == 3.8\nassert     maxAverageOfPath([[1,2,3],[4,8,10],[7,6,9]]) == 3.8\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nmaxAverageOfPath([[1,2,3],\n        [4,5,6],\n        [7,8,9]]) == 12\nassert maxAverageOfPath([[1,2,3],\n        [4,5,6],\n        [7,8,9],\n        [9,10,11]]) == 10.5\nassert maxAverageOfPath([[1,2,3],\n        [4,5,6],\n        [7,8,9],\n        [9,10,11],\n        [13,15,18]]) == 17.5\nassert maxAverageOfPath([[1,2,3],\n        [4,5,6],\n        [7,8,9],\n        [9,10,11],\n        [13,15,18],\n        [20,25,30]]) == 28.833333333333333\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maxAverageOfPath([[1,2,3],\n                            [4,5,6],\n                            [7,8,9]]) == 17\nassert     maxAverageOfPath([[1,2,3],\n                            [4,5,6],\n                            [7,8,9],\n                            [8,7,9]]) == 10\nassert     maxAverageOfPath([[1,2,3],\n                            [4,5,6],\n                            [7,8,9],\n                            [8,7,9]]) == 10\nassert     maxAverageOfPath([[1,2,3],\n                            [4,5,6],\n                            [7,8,9],\n                            [8,7,9]]) == 10\nassert     maxAverageOfPath([[1,2,3,4],\n                            [5,6,7,8],\n                            [9,10,11,12],\n                            [13,14,15,16]]) == 21\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([[0,1,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0]]) == 2.0, \"Wrong answer\"\nassert maxAverageOfPath([[0,1,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0]]) == 1.0, \"Wrong answer\"\nassert maxAverageOfPath([[0,1,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0]]) == 0.0, \"Wrong answer\"\nassert maxAverageOfPath([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]) == 1.0, \"Wrong answer\"\nassert maxAverageOfPath([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]) == 1.0, \"Wrong answer\"\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Correctness of maxAverageOfPath:\", maxAverageOfPath([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9]]) == 9.0)\nprint(\"Correctness of maxAverageOfPath:\", maxAverageOfPath([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9],[6,7,8,9,10]]) == 14.0)\nassert \nprint(\"Correctness of maxAverageOfPath:\", maxAverageOfPath([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9],[6,7,8,9,10],[7,8,9,10,11]]) == 17.0)\nassert \nprint(\"Correctness of maxAverageOfPath:\", maxAverageOfPath([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[17,18,19,20,21,22,23,24,25,26,27,28,29,30],[18,19,20,21,22,23,24,25,26,27,28,29,30],[19,20,21,22,23,24,25,26,27,28,29,30],[20,21,22,23,24,25,26,27,28,29,30],[21,22,23,24,25,26,27,28,29,30],[22,23,24,25,26,27,28,29,30],[23,24,25,26,27,28,29,30],[24,25,26,27,28,29,30],[25,26,27,28,29,30],[26,27,28,29,30],[27,28,29,30]]) == 541.0)\nassert \nprint(\"Correctness of maxAverageOfPath:\", maxAverageOfPath([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9],[6,7,8,9,10],[7,8,9,10,11],[8,9,10,11,12],[9,10,11,12,13],[10,11,12,13,14],[11,12,13,14,15],[12,13,14,15,16],[13,14,15,16,17],[14,15,16,17,18],[15,16,17,18,19],[16,17,18,19,20],[17,18,19,20,21],[18,19,20,21,22],[19,20,21,22,23],[20,21,22,23,24],[21,22,23,24,25],[22,23,24,25,26],[23,24,25,26,27],[24,25,26,27,28],[25,26,27,28,29],[26,27,28,29,30],[27,28,29,30,31],[28,29,30,31,32],[29,30,31,32,33]]) == 941.0)\nassert \nprint(\"Correctness of maxAverageOfPath:\", maxAverageOfPath([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9],[6,7,8,9,10],[7,8,9,10,11],[8,9,10,11,12],[9,10,11,12,13],[10,11,12,13,14],[11,12,13,14,15],[12,13,14,15,16],[13,14,15,16,17],[14,15,16,17,18],[15,16,17,18,19],[16,17,18,19,20],[17,18,19,20,21],[18,19,20,21,22],[19,20,21,22,23],[20,21,22,23,24],[21,22,23,24,25],[22,23,24,25,26],[23,24,25,26,27],[24,25,26,27,28],[25,26,27,28,29],[26,27,28,29,30],[27,28,29,30,31],[28,29,30,31,32],[29,30,31,32,33]]) == 1914.0)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_data({'Harsh Sharma': (1.80, 170), 'Cindy Karthik': (1.65, 150), 'Jadeja Suryakumar': (1.60, 150), 'Divya': (1.50, 160), 'Shashank': (1.55, 180)}, 1.60, 180) == \\\n            ['Cindy Karthik', 'Shashank'], 'The function does not return correct data'\nassert     filter_data({'Harsh Sharma': (1.80, 170), 'Cindy Karthik': (1.65, 150), 'Jadeja Suryakumar': (1.60, 150), 'Divya': (1.50, 160), 'Shashank': (1.55, 180)}, 1.60, 180) == \\\n            [], 'The function does not return correct data'\nassert     filter_data({'Harsh Sharma': (1.80, 170), 'Cindy Karthik': (1.65, 150), 'Jadeja Suryakumar': (1.60, 150), 'Divya': (1.50, 160), 'Shashank': (1.55, 180)}, 1.55, 180) == \\\n            ['Cindy Karthik', 'Jadeja Suryakumar'], 'The function does not return correct data'\nassert     filter_data({'Harsh Sharma': (1.80, 170), 'Cindy Karthik': (1.65, 150), 'Jadeja Suryakumar': (1.60, 150), 'Divya': (1.50, 160), 'Shashank': (1.55, 180)}, 1.55, 150) == \\\n            [], 'The function does not return correct data'\nassert     filter_data({'Harsh Sharma': (1.80, 170), 'Cindy Karthik': (1.65, 150), 'Jadeja Suryakumar': (1.60, 150), 'Divya': (1.50, 160), 'Shashank': (1.55, 180)}, 1.80, 180) == \\\n            ['Divya'], 'The function does not return correct data'\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_data(students,\n                min_height=170,\n                min_weight=60) == {\n    'Aaditya Sharma': (172.0, 67.0),\n    'Avinash Kumar': (159.0, 65.0),\n    'Harshal Kumawat': (158.0, 62.0),\n    'Gurpreet Singh': (161.0, 74.0),\n    'Jayant K.': (176.0, 79.0)\n}\n\n'''\nAn auxiliary function can be used to perform the filtering for every student in students dictionary. \nWrite a function that returns a dictionary of students who have not got more than minimum height, minimum weight.\n'''"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_data(students) ==  {'Ola':(1.87, 80.0)}\nassert     filter_data(students,1.0,100.0) == {}\nassert     filter_data(students,2.0,99.9) == {'Ola':(1.87, 80.0)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_data(students,2,2) == {'Marian':(1.72,60.0), 'Kira':(1.67,55.0), 'Ania':(1.71,54.0), 'Iris':(1.68,48.0), 'Nicole':(1.71,55.0)}\nassert     filter_data(students,1.5,50.0) == {'Ania':(1.71,54.0), 'Nicole':(1.71,55.0)}\nassert     filter_data(students,2.5,45.0) == {'Marian':(1.72,60.0), 'Kira':(1.67,55.0), 'Iris':(1.68,48.0)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_data({'A':(1.8,80.2), 'B':(1.8,90.2), 'C':(1.8,80.2), 'D':(1.7,80.2), 'E':(1.6,90.2), 'F':(1.6,80.2)},1.6,80.2) == {'A':(1.8,80.2), 'F':(1.6,80.2)}\nassert     filter_data({'A':(1.8,80.2), 'B':(1.8,90.2), 'C':(1.8,80.2), 'D':(1.7,80.2), 'E':(1.6,90.2), 'F':(1.6,80.2)},1.6,90.2) == {'D':(1.7,80.2), 'E':(1.6,90.2)}\nassert     filter_data({'A':(1.8,80.2), 'B':(1.8,90.2), 'C':(1.8,80.2), 'D':(1.7,80.2), 'E':(1.6,90.2), 'F':(1.6,80.2)},1.6,70.2) == {'A':(1.8,80.2), 'D':(1.7,80.2), 'F':(1.6,70.2)}\nassert     filter_data({'A':(1.8,80.2), 'B':(1.8,90.2), 'C':(1.8,80.2), 'D':(1.7,80.2), 'E':(1.6,90.2), 'F':(1.6,80.2)},1.6,65) == {'B':(1.8,90.2), 'D':(1.7,80.2)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_data({'Ann': (1.8, 80.0), 'Bob': (1.78, 75.0)}, 1.6, 1.5) == {'Ann': (1.8, 80.0), 'Bob': (1.78, 75.0)}\nassert filter_data({'Ann': (1.8, 80.0), 'Bob': (1.78, 75.0)}, 1.6, 1.5) == {'Ann': (1.8, 80.0)}\nassert filter_data({'Ann': (1.8, 80.0), 'Bob': (1.78, 75.0)}, 1.6, 1.5) == {}\nassert filter_data({'Ann': (1.8, 80.0), 'Bob': (1.78, 75.0)}, 1.6, 1.5) == {}"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('TEST CASE: PASS') if filter_data({'zhao':(1.6,83.6)},1.6,83.6)=={'zhao':(1.6,83.6)} else print('TEST CASE FAIL')\n\n'''"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_data({'Jack': (1.68, 74.00), 'Harry': (1.73, 90.00), 'Mario': (1.72, 74.00), 'Peggy': (1.68, 79.00)}, 1.65, 1.50) == {'Mario': (1.72, 74.00), 'Peggy': (1.68, 79.00)}\nassert     filter_data({'Jack': (1.68, 74.00), 'Harry': (1.73, 90.00), 'Mario': (1.72, 74.00), 'Peggy': (1.68, 79.00)}, 1.65, 1.50) == {'Harry': (1.73, 90.00), 'Peggy': (1.68, 79.00)}\nassert     filter_data({'Jack': (1.68, 74.00), 'Harry': (1.73, 90.00), 'Mario': (1.72, 74.00), 'Peggy': (1.68, 79.00)}, 1.65, 1.50) == {'Mario': (1.72, 74.00), 'Peggy': (1.68, 79.00)}\nassert     filter_data({'Jack': (1.68, 74.00), 'Harry': (1.73, 90.00), 'Mario': (1.72, 74.00), 'Peggy': (1.68, 79.00)}, 1.65, 1.50) == {}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_data({'Arsh':(5.9,109.0), 'Aamir':(6.2,111), 'Asad':(6.9,102), 'Amad':(5.6,100), 'Akilan':(5.6,110)}, 2.5, 79) == {'Arsh':(5.9,109.0), 'Asad':(6.9,102), 'Akilan':(5.6,110)}\nprint('Assessment Passed: Test_Problem_4')\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_same_pair_with_hash(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_count_same_pair():\n    assert count_same_pair([1,2,3,4], [1,2,3,4]) == 4\n    assert count_same_pair([1,1,1,1], [1,2,3,4]) == 2\n    assert count_same_pair([1,2,3,4], [1,2,3,4]) == 4\n    "
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_same_pair_1(nums1, nums2):\n    '''\n    An approach is to use a dictionary to count the number of elements with the same value.\n    '''\n    count = {}\n    for num in nums1:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for num in nums2:\n        if num in count:\n            count[num] -= 1\n        else:\n            count[num] = 1\n\n    # count = {num:0 for num in nums1}\n    # for num in nums1:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n\n    # count = {num:0 for num in nums2}\n    # for num in nums2:\n    #     if num in count:\n    #         count[num] -= 1\n    #     else:\n    #         count[num] = 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_same_pair([1,2,3,4,5,6], [1,2,3,4,5,6]) == 6\nassert     count_same_pair([1,2,3,1,2,3], [1,2,1,2,3,3]) == 3\nassert     count_same_pair([1,2,3,4,5,6], [1,2,3,4,5,6]) == 7\nassert     count_same_pair([1,2,3,1,2,3], [1,2,1,2,3,3]) == 4\nassert count_same_pair([1,1,1,1,1,1], [1,2,3,4,5,6]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_substring(string, sub_string):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_same_pair([1,2], [1,2]) == 2\nassert count_same_pair([1,2], [1,3]) == 0\nassert count_same_pair([1,2], [2,1]) == 2\nassert count_same_pair([1,2,1], [1,2,1]) == 3\nassert count_same_pair([1,2,1], [1,2,3]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_same_pair([1,1,1,1,1,1], [1,1,2,3,1,1]) == 5\nassert     count_same_pair([1,2,3,4,5,6], [2,4,5,5,6,7]) == 6\nassert     count_same_pair([1,2,3,4,5], [2,3,4,4,5]) == 5\nassert     count_same_pair([], []) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_same_pair([1, 2, 1], [2, 1, 2]) == 2\nassert     count_same_pair([1, 2, 3, 4, 5, 5], [2, 1, 2, 3, 4, 5]) == 2\nassert count_same_pair([1, 2, 3, 4, 5], [2, 1, 2, 3, 4, 5]) == 0\nassert count_same_pair([1, 2, 2, 3, 3], [2, 1, 2, 3, 4]) == 0\nassert count_same_pair([2, 1], [2, 1]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_same_pair([1,1,1,1], [1,1,1,1]) == 5\nassert     count_same_pair([1,1,2,2], [1,1,1,1]) == 5\nassert     count_same_pair([2,1,1,1], [1,1,1,1]) == 0\nassert     count_same_pair([1,1,1,1,1], [1,1,1,1,1]) == 6"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power_base_sum(2, 2) == 4, 'incorrect result'\nassert     power_base_sum(2, 3) == 6, 'incorrect result'\nassert     power_base_sum(2, 4) == 8, 'incorrect result'\nassert     power_base_sum(3, 2) == 9, 'incorrect result'\nassert     power_base_sum(3, 3) == 27, 'incorrect result'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power_base_sum(2, 0) == 0\nassert     power_base_sum(2, 1) == 2\nassert     power_base_sum(2, 2) == 2\nassert     power_base_sum(2, 3) == 8\nassert     power_base_sum(2, 4) == 10\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power_base_sum(10, 2) == 12, 'base+base=10, pow = 2: 13'\nassert     power_base_sum(16, 3) == 61, 'base+base=16, pow = 3: 62'\nassert     power_base_sum(20, 2) == 2, 'base+base=20, pow = 2: 20'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power_base_sum(1,0) == 0, 'The function should return 0'\nassert     power_base_sum(1,1) == 1, 'The function should return 1'\nassert     power_base_sum(1,2) == 9, 'The function should return 9'\nassert     power_base_sum(1,3) == 45, 'The function should return 945'\nassert     power_base_sum(100,0) == 0, 'The function should return 0'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power_base_sum(2,10) == 23\nassert     power_base_sum(2,12) == 56\nassert     power_base_sum(3,5) == 23\nassert     power_base_sum(3,20) == 369"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power_base_sum(9, 5) == sum(map(int, str(9)))\nassert     power_base_sum(9, 3) == sum(map(int, str(9)))\nassert     power_base_sum(9, 1) == 9\nassert     power_base_sum(9, 0) == 0\nassert     power_base_sum(9, 4) == sum(map(int, str(9))"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('Testing power_base_sum...', end = '')\nassert(power_base_sum(1234, 2) == 120)\nassert(power_base_sum(1234, 3) == 1430)\nassert(power_base_sum(2, 4) == 256)\nassert(power_base_sum(4, 7) == 16)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power_base_sum(11, 5) == 0\nassert     power_base_sum(0, 5) == 0\nassert     power_base_sum(1, 5) == 1\nassert     power_base_sum(2, 5) == 3\nassert     power_base_sum(3, 5) == 5\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power_base_sum(18, 5) == 54\nassert     power_base_sum(18, 4) == 162\nassert     power_base_sum(18, -5) == 54\nassert     power_base_sum(6, 1) == 6\nassert     power_base_sum(6, 0) == 6\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power_base_sum(3, 3) == 0\nassert     power_base_sum(3, 4) == 27\nassert     power_base_sum(3, 5) == 81\nassert     power_base_sum(2, 1) == 2\nassert     power_base_sum(6, 1) == 6\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_quotation(\"I like 'PYTHON'\") == [\"I like PYTHON\"]\nassert     extract_quotation(\"I like 'PYTHON'\") == [\"I like PYTHON\"]\nassert     extract_quotation(\"I like 'PYTHON'\") == [\"I like PYTHON\"]\nassert     extract_quotation(\"I like 'PYTHON'\") == [\"I like PYTHON\"]\nassert     extract_quotation(\"I like 'PYTHON'\") == [\"I like PYTHON\"]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation('Hello \"World\"' ) == 'World'\nassert     extract_quotation('Hello \"World\"') == 'World'\nassert     extract_quotation('Hello \"World\"\"') == 'World'\nassert     extract_quotation('Hello \"World\"') == 'World'\nassert     extract_quotation('Hello \"World\"') == 'World'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\") == {'high':'He','middle':'Lied', 'low':'Because', 'unidentified':'Boron'}\nassert     extract_quotation(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\") == {'high':'He','middle':'Lied', 'low':'Because', 'unidentified':'Boron'}\n\ndef extract_quotation_parts(text1):\n    '''\n    Write a function to extract all the parts of the given string.\n    '''\n    pass\n\nassert     extract_quotation_parts(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\") == ['Hi', 'He', 'Lied', 'Because', 'Boron', 'Could', 'Not', 'Oxidize', 'Fluorine', '.', 'New', 'Nations', 'Might', 'Also', 'Sign', 'Peace', 'Security', 'Clause', 'Arthur', 'King', 'Can']\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert extract_quotation('Python is an interpreted, high-level, general-purpose programming language with strong standard extensions') == 'Python is an interpreted, high-level, general-purpose programming language with strong standard extensions'\nassert extract_quotation('Python is an interpreted, general-purpose programming language with strong standard extensions') == 'Python is an interpreted, general-purpose programming language with strong standard extensions'\nassert extract_quotation('Python is an interpreted, general-purpose programming language with strong standard extensions') == 'Python is an interpreted, general-purpose programming language with strong standard extensions'"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation('This is \"hello\" world!') == 'hello world!'\nassert     extract_quotation('This is \"hello\" world!') == 'hello world!'\nassert     extract_quotation('This is \"hello\" world!\\nHow are you?') == 'hello world!'\nassert     extract_quotation('This is \"hello\" world!\\nHow are you?') == 'hello world!'\nassert     extract_quotation('This is \"hello\" world!') == 'hello world!'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_quotation('') == '', 'First test case is invalid'\nassert     extract_quotation('abc \" qwe \" rty') == 'abc qwe rty', 'Second test case is invalid'\nassert     extract_quotation(' \"abcd\" qwerty \"xyz\"') == 'abcd qwerty xyz', 'Third test case is invalid'\nassert     extract_quotation('\"abcd\" \"qwerty\" \"xyz\"') == 'abcd qwerty xyz', 'Fourth test case is invalid'\nassert     extract_quotation('\"abcd\" qwerty \"xyz\"') == 'qwerty xyz', 'Fifth test case is invalid'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_quotation('\" A quoted string\"') == \" A quoted string\"\nassert     extract_quotation('A \"Quoted\" String\"') == \"A quoted String\"\nassert     extract_quotation('A \"Quoted string\"') == \"A quoted string\"\nassert     extract_quotation('\"This is a double quoted string\"') == \"This is a double quoted string\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_quotation(\"Hello 'world' this is a test.\") == [\"Hello \", \"world\", \" this is a test.\"]\n\nassert extract_quotation(\"Hello 'world' this is a test.\") == ['Hello ', 'world','this is a test.']\nassert extract_quotation(\"Hello 'world' this is a test.\") == ['Hello ', 'world','this is a test.']\nassert extract_quotation(\"Hello 'world' this is a test.\") == ['Hello ', 'world','this is a test.']\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert extract_quotation(\" Hi 'hello' how r u?\") == \"hello\"\nassert extract_quotation(\"Hi 'hello' how r u?\") == \"hello\"\nassert extract_quotation(\"Hi 'hello' how r u?\") == \"hello\"\nassert extract_quotation(\"Hi 'hello' how r u?\") == \"hello\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3,3,2,1)\nassert     multiply_elements((1,2,3,4)) == (1,2,3,4,3,2,1)\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5,5,4,3,2,1)\nassert     multiply_elements((1,2,3,4,5,6)) == (1,2,3,4,5,6,6,5,4,3,2,1)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3,1,2,3)\nassert     multiply_elements((1,3,4)) == (1,3,4,1,3,4)\nassert     multiply_elements((3,2,1)) == (3,2,1,3,2,1)\nassert     multiply_elements((1,2,3,4)) == (1,2,3,4,1,2,3,4)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4)\nassert     multiply_elements((1,2,3)) == (1,2,3)\nassert     multiply_elements((3,4,5,6)) == (3,4,5,6)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((1,2,3,4,5)) == (1, 2, 3, 4, 5)\nassert     multiply_elements((1,2,3,4,5,6,7,8,9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\nassert     multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\nassert     multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)\nassert     multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_elements((3,4,5)) == (3,8,15)\nassert     multiply_elements((4,5,6)) == (40,50,60)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_elements((1,2)) == (1,2)\nassert     multiply_elements((1,2,3,4,5,6,7,8)) == (1,2,3,4,5,6,7,8)\nassert     multiply_elements((9,8,7,6,5,4,3,2,1)) == (9,8,7,6,5,4,3,2,1)\nassert     multiply_elements((0,0,0,0,0,0,0,0,0)) == (0,0,0,0,0,0,0,0,0)\nassert     multiply_elements((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_elements((4, 6, 3, 5, 1, 1)) == (60, 30, 15, 10, 5, 1)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7)) == (30, 60, 120, 180, 240, 300, 360)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)) == (30, 60, 120, 180, 240, 300, 360, 420, 540)\nassert     multiply_elements((4, 6, 3, 5, 1, 1, 8, 7)) == (60, 30, 15, 10, 5, 1, 40, 35)\nassert     multiply_elements((4, 6, 3, 5, 1, 1, 8, 7, 9)) == (60, 30, 15, 10, 5, 1, 40, 35, 490)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3)\nassert     multiply_elements((5,5,5,5)) == (5,10,25,40)\nassert     multiply_elements((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     multiply_elements((3,3,3,3,3)) == (3,6,9,12,15)\n\ndef triangle_in_matrix(matrix):\n    '''\n    Write a function that takes as input a matrix (list of lists of integers) and returns True if the matrix is a triangular matrix, i.e. all elements below the main diagonal are zero.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     multiply_elements((2, 4, 6, 8)) == (2, 4, 6, 8)\nassert     multiply_elements((2, 4, 6, 8, 10)) == (4, 8, 16, 32, 40)\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((1, 2, 3)) == (2, 4, 6), \"failed\"\nassert multiply_elements((1, 2, 3, 4)) == (2, 4, 6, 8), \"failed\"\nassert multiply_elements((1, 2, 3, 4, 5)) == (2, 4, 6, 8, 10), \"failed\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_list([1,2,3],    [4,5,6]) ==    [5,7,9]\nassert     sum_list([1,2,3,4],    [5,6,7,8]) ==    [6,8,10,12]\nassert     sum_list([1,2,3,4,5],    [6,7,8,9,10]) ==    [7,9,11,13,15]\nassert     sum_list([1,2,3,4,5,6],    [7,8,9,10,11,12]) ==    [8,10,12,14,16,18]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9], 'incorrect'\nassert     sum_list([1,2,3],[4,5,6]) == [5,7,9], 'incorrect'\nassert     sum_list([1,2,3],[4,5,6]) == [5,7,9], 'incorrect'\nassert     sum_list([1,2,3],[4,5,6]) == [5,7,9], 'incorrect'\nassert     sum_list([1,2,3],[4,5,6]) == [5,7,9], 'incorrect'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (sum_list([1,2,3],[4,5,6]) ==[5,7,9])\nassert     (sum_list([-1,0,1],[-4,2,5]) ==[0,3,6])\nassert     (sum_list([1,2,3,4],[3,5,6,7]) ==[4,7,10,13])\nassert     (sum_list([1,2,3,4,5],[6,7,8,9,10]) ==[7,12,14,20])\nassert     (sum_list([1,2,3,4,5],[6,7,8,9,10,11]) ==[7,12,14,20,22])\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9], \"Wrong!\"\nassert     sum_list([1,2,3,4], [4,5,6]) == [5,7,9,13], \"Wrong!\"\nassert     sum_list([1,2,3,4,5,6], [4,5,6]) == [5,7,9,13,15], \"Wrong!\"\nprint(\"All test cases passed. \")\n\ndef fib(n):\n    '''\n    Write a function that given an integer n, returns the n-th Fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not sum_list([1,2,3],[2,3,4]) == (3,4,5), 'incorrect'\nassert sum_list([1,2,3],[2,3,4]) == (3,5,6), 'incorrect'\nassert sum_list([1,2,3],[4,5,6]) == (5,7,9), 'incorrect'\nassert sum_list([1,2,3,4],[3,4,5,6]) == (6,8,10), 'incorrect'\nprint('Test passed')\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_list([1,2],[3,4]) == [1,2,3,4]\nassert     sum_list([1,2,3,4,5],[5,6,7,8,9]) == [1,2,3,4,5,5,6,7,8,9]\n\ndef sum_list(a,b):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     consecutive_duplicates([\"A\", \"B\", \"C\", \"D\", \"E\"]) == [\"A\", \"B\", \"C\", \"D\", \"E\"]\nassert     consecutive_duplicates([1,1,1,2,2,3,3,4,4,4,4,4,5,5]) == [1,2,3,4,5]\n\ndef non_consecutive_duplicates(nums):\n    '''\n    Write a function to remove all the consecutive duplicates in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1,2,3,4]) == [[1,2,3,4]]\nassert     consecutive_duplicates([1,1,2,2,3,4,4]) == [[1,1,2,2,3,4,4]]\nassert     consecutive_duplicates([1,1,2,2,3,3]) == [[1,1,2,2,3,3]]\nassert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([1,1,1,2]) == [[1,1,1,2]]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     consecutive_duplicates([2, 2, 2, 2]) == None, consecutive_duplicates([2, 2, 2, 2])\nassert     consecutive_duplicates([1, 2, 3, 4]) == None, consecutive_duplicates([1, 2, 3, 4])\nassert     consecutive_duplicates([1, 2, 3, 4, 1]) == None, consecutive_duplicates([1, 2, 3, 4, 1])\nassert     consecutive_duplicates([2, 2, 2, 2, 2]) == None, consecutive_duplicates([2, 2, 2, 2, 2])\nassert     consecutive_duplicates([4, 4, 4, 4, 4]) == None, consecutive_duplicates([4, 4, 4, 4, 4])\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5]) == True, \"not correct\"\nassert     consecutive_duplicates([1,2,3,4,1]) == False, \"not correct\"\nassert     consecutive_duplicates([1,1,1,1,1]) == True, \"not correct\"\nassert     consecutive_duplicates([1,1,1,1,2]) == False, \"not correct\"\nassert     consecutive_duplicates([]) == True, \"not correct\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([1,2,3,4,1,2,3,4,1,2,3,4]) == True\nassert     consecutive_duplicates([1,1,1,1,1,2,2,2,3,3,3,3,4]) == False\nassert     consecutive_duplicates([1,2,3,4,5,1,2,3,4,5]) == True\nassert     consecutive_duplicates([1,2,3,4,5,1,2,3,4,5,2,3]) == False\nassert     consecutive_duplicates([1,2,3,4,5,1,2,3,4,5,1,2,3,2]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     consecutive_duplicates([\"ab\",\"a\",\"b\",\"b\",\"b\",\"c\",\"d\",\"d\"]) == [\"ab\",\"a\",\"b\",\"b\",\"b\",\"c\",\"d\",\"d\"]\nassert     consecutive_duplicates([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"]) == [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"]\nassert     consecutive_duplicates([\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"b\"]) == [\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n\n\ndef split_into_bricks(grid):\n    '''\n    Write a function that takes in a 2D matrix (list) and splits the tiles into a list of lists,\n    where each element of the inner list is a new row of tiles.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 3]) == [0, 1, 2, 3]\nassert consecutive_duplicates([1, 2, 3, 4, 5, 6]) == []\nassert consecutive_duplicates([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == [1, 2, 3, 4, 5, 6]\nassert consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert consecutive_duplicates([]) == []\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5]) == False\nassert     consecutive_duplicates([1,2,3,4,5,5]) == False\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8]) == True\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8,9]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     consecutive_duplicates([0,1,2,3,4,5,6]) == False\nassert     consecutive_duplicates([0,1,1,2,3,3,4,5,6]) == True\nassert     consecutive_duplicates([0,1,1,2,3,4,4,5,5,6]) == False\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return False\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([1, 2, 2, 3, 4]) == None\nassert     consecutive_duplicates([1, 2, 3, 4]) == None\nassert     consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     consecutive_duplicates([1, 2, 2, 2, 2, 3, 4, 5]) == None\nassert     consecutive_duplicates([0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 6]) == None\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cone(3,3) == math.pi*(r**2)*(h/2)\nassert     lateralsurface_cone(7.5,3) == math.pi*(r**2)*(h/2)\nassert     lateralsurface_cone(10,3) == math.pi*(r**2)*(h/2)\nassert     lateralsurface_cone(12.5,3) == math.pi*(r**2)*(h/2)\nassert     lateralsurface_cone(14,3) == math.pi*(r**2)*(h/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    # enter the radius and height\n    r=float(input(\"Enter the radius of the cone: \"))\n    h=float(input(\"Enter the height of the cone: \"))\n\n    # calculate the lateral surface area\n    area=lateralsurface_cone(r,h)\n\n    print(f\"The lateral surface area of the cone is {area}\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cone(5,7) == 52.35\nassert     lateralsurface_cone(3,7) == 6.766\n\n\ndef lathe_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert lateralsurface_cone(1,1) == math.pi * math.pow(1,2)\nassert lateralsurface_cone(3,2) == math.pi * math.pow(3,2)\nassert lateralsurface_cone(5,4) == math.pi * math.pow(5,2)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cone(1,1) ==         5.09\nassert     lateralsurface_cone(2,1) ==         5.16\nassert     lateralsurface_cone(3,1) ==         5.25\nassert     lateralsurface_cone(4,1) ==         5.35\nassert     lateralsurface_cone(5,1) ==         5.45\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef lateralsurface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the lengths a, b, and c.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsurface_cone(4,2) == 48, \"wrong\"\nassert lateralsurface_cone(5,2) == 60, \"wrong\"\n\ndef lateralsurface_cone2(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef replace_spaces(text):\n    '''\n    Write a function that replaces spaces with a plus sign.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_specialchar('hello,how are you?') == 'hello:how are you?'\nassert     replace_specialchar('hello,how are you,fine?') == 'hello:how are you:fine?'\nassert     replace_specialchar('hello,how are you:fine?') == 'hello:how are you:fine?'\nassert     replace_specialchar('hello,how are you!fine?') == 'hello:how are you!fine?'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_specialchar(\"this.is.a,.comma.or.space\") == \"this.is.a:comma.or.space\"\nassert replace_specialchar(\"What:sould be:anything(s)\") == \"What:sould be:anything(s)\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_specialchar('I have a space') == 'I have a colon'\nassert     replace_specialchar('No spaces here, just commas') == 'No spaces here, just dots'\nassert     replace_specialchar('You are a special character') == 'You are a colon'\nassert     replace_specialchar('No special characters allowed') == 'No special characters allowed'\nassert     replace_specialchar('This is not an odd word') == 'This is not an odd word'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar('A!') == \"A:\", \"Your code has a bug\"\nassert     replace_specialchar('A,B') == \"A:B\", \"Your code has a bug\"\nassert     replace_specialchar('A.B') == \"A:B\", \"Your code has a bug\"\nassert     replace_specialchar('A,B,') == \"A:B,\", \"Your code has a bug\"\nassert     replace_specialchar('A.') == \"A:\", \"Your code has a bug\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_specialchar(\"a,b:c,d;\") == \"a:b:c:d;\"\nassert    replace_specialchar(\"a,b:c,d.\") == \"a:b:c:d.\"\nassert    replace_specialchar(\"a,b:c,d,\") == \"a:b:c:d,\"\nassert    replace_specialchar(\"a,b:c,d;\") == \"a:b:c:d;\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_specialchar('abcd') == ':a:b:c:d'\nassert replace_specialchar('ab,cd') == ':a:b:cd'\nassert replace_specialchar('ab..cd') == ':a:b:cd'\nassert replace_specialchar('ab.$cd') == ':a:b:cd'\nassert replace_specialchar('ab.cd') == ':a:b:cd'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_specialchar(\"Hi, my name is John and I am 22 years old\") == \"Hi:my name is John and I am 22 years old\"\nassert     replace_specialchar(\"Hi: my name is John and I am 22 years old\") == \"Hi: my name is John and I am 22 years old\"\nassert     replace_specialchar(\"Hi, my name is John, and I am 22 years old\") == \"Hi:my name is John and I am 22 years old\"\nassert     replace_specialchar(\"Hi, my name is John, and I am 22 years old\") == \"Hi:my name is John and I am 22 years old\"\nassert     replace_specialchar(\"Hi, my name is John, and I am 22 years old, and I am 22 years old too\") == \"Hi:my name is John, and I am 22 years old, and I am 22 years old too\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nclass TestFindFirstOccurrence(unittest.TestCase):\n    def test_small(self):\n        A = [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        x = 3\n        expected = 5\n        self.assertEqual(find_first_occurrence(A, x), expected)\n\n    def test_small_2(self):\n        A = [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        x = -1\n        expected = 0\n        self.assertEqual(find_first_occurrence(A, x), expected)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_first_occurrence([1, 2, 3, 4], 3) == 1\nassert find_first_occurrence([1, 2, 3, 4], 1) == 0\nassert find_first_occurrence([1, 2, 3, 4], 4) == 3\nassert find_first_occurrence([1, 2, 3, 4], 5) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_first_occurrence([1,2,2,2,2,2,2,2], 2) == 4\nassert find_first_occurrence([1,2,2,2,2,2,2,2], 5) == -1\nassert find_first_occurrence([], 2) == -1\nassert find_first_occurrence([1,2,2,2,2,2,2,2], 3) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_first_occurrence([1,2,2,3,4,4,4,4,4,4], 4) == 7\nassert     find_first_occurrence([1,2,2,3,4,4,4,4,4,4], 7) == 10\nassert     find_first_occurrence([1,2,2,3,4,4,4,4,4,4], 6) == 8\nassert     find_first_occurrence([1,2,2,3,4,4,4,4,4,4], 8) == 11\nassert     find_first_occurrence([1,2,2,3,4,4,4,4,4,4], 9) == 11\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_first_occurrence_with_count(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_first_occurrence(A = [-5, -2, 0, 0, 3, 4, 7, 8], x = 0) == 0\nassert     find_first_occurrence(A = [-5, -2, 0, 0, 3, 4, 7, 8], x = 3) == 3\nassert     find_first_occurrence(A = [-5, -2, 0, 0, 3, 4, 7, 8], x = -1) == -1\nassert     find_first_occurrence(A = [-5, -2, 0, 0, 3, 4, 7, 8], x = 8) == 6\nassert     find_first_occurrence(A = [-5, -2, 0, 0, 3, 4, 7, 8], x = -3) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 101, 102, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 105, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 116, 117, 117, 117, 118, 118, 118, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 123, 123, 123, 124, 124, 124, 125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129, 130, 130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 133, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 140, 141, 141, 141, 142, 142, 142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153, 153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 168, 169, 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 182, 182, 182, 183, 183, 183, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187, 188, 188, 188, 189, 189, 189, 190, 190, 190, 191, 191, 191, 192, 192, 192, 193, 193, 193, 194, 194, 194, 195, 195, 195, 196, 196, 196, 197, 197, 197, 198, 198, 198, 199, 199, 199, 200, 200, 200, 201, 201, 201, 202, 202, 202, 203, 203, 203, 204, 204, 204, 205, 205, 205, 206, 206, 206, 207, 207, 207, 208, 208, 208, 209, 209, 209, 210, 210, 210, 211, 211, 211, 212, 212, 212, 213, 213, 213, 214, 214, 214, 215, 215, 215, 216, 216, 216, 217, 217, 217, 218, 218, 218, 219, 219, 219, 220, 220, 220, 221, 221, 221, 222, 222, 222, 223, 223, 223, 224, 224, 224, 225, 225, 225, 226, 226, 226, 227, 227, 227, 228, 228, 228, 229, 229, 229, 230, 230, 230, 231, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 247, 247, 247, 248, 248, 248, 249, 249, 249, 250, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 256, 256, 256, 257, 257, 257, 258, 258, 258, 259, 259, 259, 260, 260, 260, 261, 261, 261, 262, 262, 262, 263, 263, 263, 264, 264, 264, 265, 265, 265, 266, 266, 266, 267, 267, 267, 268, 268, 268, 269, 269, 269, 270, 270, 270, 271, 271, 271, 272, 272, 272, 273, 273, 273, 274, 274, 274, 275, 275, 275, 276, 276, 276, 277, 277, 277, 278, 278, 278, 279, 279, 279, 280, 280, 280, 281, 281, 281, 282, 282, 282, 283, 283, 283, 284, 284, 284, 285, 285, 285, 286, 286, 286, 287, 287, 287, 288, 288, 288, 289, 289, 289, 290, 290, 290, 291, 291, 291, 292, 292, 292, 293, 293, 293, 294, 294, 294, 295, 295, 295, 296, 296, 296, 297, 297, 297, 298, 298, 298, 299, 299, 299, 300, 300, 300, 301, 301, 301, 302, 302, 302, 303, 303, 303, 304, 304, 304, 305, 305, 305, 306, 306, 306, 307, 307, 307, 308, 308, 308, 309, 309, 309, 310, 310, 310, 311, 311, 311, 312, 312, 312, 313, 313, 313, 314, 314, 314, 315, 315, 315, 316, 316, 316, 317, 317, 317, 318, 318, 318, 319, 319, 319, 320, 320, 320, 321, 321, 321, 322, 322, 322, 323, 323, 323, 324, 324, 324, 325, 325, 325, 326, 326, 326, 327, 327, 327, 328, 328, 328, 329, 329, 329, 330, 330, 330, 331, 331, 331, 332, 332, 332, 33"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_first_occurrence([1,2,3,3,4,4,5,6], 3) == 5\nassert find_first_occurrence([1,2,3,3,4,4,5,6], 4) == 7\nassert find_first_occurrence([1,2,3,3,4,4,5,6], 5) == 7\nassert find_first_occurrence([1,2,3,3,4,4,5,6], 1) == 0\nassert find_first_occurrence([1,2,3,3,4,4,5,6], 7) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_Of_Subarray_Prod([1,2,3,4,5]) == 90\nassert sum_Of_Subarray_Prod([-1,-2,-3,-4,-5]) == -120\nassert sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 210\nassert sum_Of_Subarray_Prod([1,2,3,4,5,6,7]) == 210\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_of_sum_of_subarrays(arr, size):\n    '''\n    Write a python function to find max sum of a subarray. \n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_Of_Subarray_Prod([]) == 0, \"Test 1: Not passing\"\nassert     sum_Of_Subarray_Prod([1]) == 1, \"Test 2: Not passing\"\nassert     sum_Of_Subarray_Prod([1,2]) == 2, \"Test 3: Not passing\"\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 6, \"Test 4: Not passing\"\nassert     sum_Of_Subarray_Prod([3,4,5,6,7]) == 8, \"Test 5: Not passing\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    print(sum_Of_Subarray_Prod(arr))"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 120\nassert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 252\nassert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8]) == 252\nassert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 252\nassert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 252\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sum_Of_Subarray_Prod([1, 2, 3, 4]) == 24 \n    assert sum_Of_Subarray_Prod([-4, 3, -2, -2]) == 0 \n    assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7]) == 140\n    assert sum_Of_Subarray_Prod([-1, 1, 2, -2, 4]) == -10\n    assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7]) == 140\n    "
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 14, \"Should be 14\"\nassert     sum_Of_Subarray_Prod([1,2]) == 6, \"Should be 6\"\nassert     sum_Of_Subarray_Prod([1]) == 1, \"Should be 1\"\nassert     sum_Of_Subarray_Prod([]) == 0, \"Should be 0\"\nassert     sum_Of_Subarray_Prod(['a', 'b', 'c', 'd']) == 0, \"Should be 0\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (sum_Of_Subarray_Prod([1,2,3,4]) == 64)\nassert     (sum_Of_Subarray_Prod([1,2,3,4,5]) == 25)\nassert     (sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 216)\nassert     (sum_Of_Subarray_Prod([1,2,3,4,5,6,7]) == 585)\nassert     (sum_Of_Subarray_Prod([]) == 0)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 4294967296 # 2^32\n    print(set_middle_bits(n))\n    assert set_middle_bits(n) == 4294967292"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_middle_bits(0b10101) == 0b10100\nassert     set_middle_bits(0b10100) == 0b10101\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_middle_bits(11) == 0b10110\nassert     set_middle_bits(10) == 0b1010\nassert     set_middle_bits(11) == 0b10111\nassert     set_middle_bits(0) == 0\nassert     set_middle_bits(0b1) == 0b1\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_middle_bits(0b01000011) == 0b01001101\nassert     set_middle_bits(0b00000101) == 0b00000101\nassert     set_middle_bits(0b00000111) == 0b00000111\nassert     set_middle_bits(0b00000110) == 0b00000110\nassert     set_middle_bits(0b11111111) == 0b00000000\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     set_middle_bits(2) == set_middle_bits(3) == set_middle_bits(8) == set_middle_bits(9) == set_middle_bits(10) == set_middle_bits(11) == set_middle_bits(12)\nassert     set_middle_bits(2)!= set_middle_bits(3)!= set_middle_bits(8)!= set_middle_bits(9)!= set_middle_bits(10)!= set_middle_bits(11)!= set_middle_bits(12)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_middle_bits(8) == (16, 16, 8, 0, 1, 1, 0, 0)\nassert     set_middle_bits(9) == (1, 0, 0, 0, 0, 1, 0, 1)\n\ndef set_bits(n, k):  \n    '''\n    Write a python function to set the bits of a number except the first k and the last k bits. https://www.geeksforgeeks.org/set-bits-number-expect-first-k-last-k-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_middle_bits(7) == 6\nassert     set_middle_bits(9) == 9\nassert     set_middle_bits(8) == 8\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_middle_bits(0) == 0, 'First bit should be 0'\nassert     set_middle_bits(1) == 0, 'Second bit should be 0'\nassert     set_middle_bits(2) == 0, 'Third bit should be 0'\nassert     set_middle_bits(3) == 1, 'Fourth bit should be 1'\nassert     set_middle_bits(4) == 2, 'Fifth bit should be 2'\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_insertion([1, 3, 4, 5], 3) == 1, 'Wrong answer!'\nassert     left_insertion([1, 3, 4, 5], 2) == 0, 'Wrong answer!'\nassert     left_insertion([1, 3, 4, 5], 6) == 1, 'Wrong answer!'\nassert     left_insertion([1, 3, 4, 5], 0) == 1, 'Wrong answer!'\nassert     left_insertion([1, 3, 4, 5], 5) == 3, 'Wrong answer!'\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\na = [-1, -2, -5, -7, -20, -21, -32, -45, -47, -54, -59, -74, -91, -100]"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     left_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 3\nassert     left_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 0\nassert     left_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 4\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nleft_insertion(a, 5) == 4\nleft_insertion(a, 10) == 6\nleft_insertion(a, 0) == 0\nleft_insertion(a, -1) == 0\nleft_insertion(a, -100) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     left_insertion([4,5,6,7,8], 6) == 2, 'wrong answer'\nassert left_insertion([4,5,6,7,8], 5) == 1, 'wrong answer'\nassert left_insertion([4,5,6,7,8], 8) == 3, 'wrong answer'\nassert left_insertion([4,5,6,7,8], 10) == 4, 'wrong answer'\nassert left_insertion([4,5,6,7,8], 0) == 0, 'wrong answer'\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_insertion([1,2,3,4,5], 5) == 3, 'it should be 3'\nassert     left_insertion([1,2,3,4,5], 4) == 2, 'it should be 2'\nassert     left_insertion([1,2,3,4,5], 2) == 1, 'it should be 1'\nassert     left_insertion([1,2,3,4,5], 0) == 0, 'it should be 0'\nassert     left_insertion([1,2,3,4,5], 6) == 4, 'it should be 4'\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     left_insertion([1,2,3], 3) == 1\nassert     left_insertion([1,2,3], 1) == 0\nassert     left_insertion([1,2,3], 2) == 1\nassert     left_insertion([1,2,3], 4) == 2\nassert     left_insertion([1,2,3], 5) == 2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef capitalize(string):\n    '''\n    Write a function to capitalize the first character of each word in the string using a regular expression.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_str(\"eAiouB\") == True, \"Fail\"\nassert     check_str(\"AbcZ\") == True, \"Fail\"\nassert     check_str(\"ABCZ\") == False, \"Fail\"\nassert     check_str(\"ABCZaB\") == True, \"Fail\"\nassert     check_str(\"AbZaB\") == False, \"Fail\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to check whether a given string contains only digits or not.\n'''\ndef check_str(string): \n    '''\n    Write a function to check whether the given string contains only digits or not using regex.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    check_str('c') == False, 'Expected: False'\n    check_str('a') == True, 'Expected: True'\n    check_str('c') == False, 'Expected: True'\n    check_str(' ') == False, 'Expected: False'\n    check_str('1') == False, 'Expected: True'\n    check_str('!') == True, 'Expected: True'\n    check_str('! ') == False, 'Expected: True'\n    check_str('j') == False, 'Expected: False'\n    check_str('a a') == False, 'Expected: False'\n    check_str('+') == True, 'Expected: True'\n    check_str('*') == True, 'Expected: True'\n    check_str('b') == True, 'Expected: True'\n    check_str('e') == True, 'Expected: True'\n    check_str('I') == True, 'Expected: True'\n    check_str('O') == True, 'Expected: True'\n    check_str('U') == True, 'Expected: True'\n    check_str('\u00c1\u00c9\u00cd\u00d3\u00da') == True, 'Expected: True'\n    check_str('\u00c1\u00c9\u00cd\u00d3\u00da! ') == False, 'Expected: True'\n    check_str('!d!f!') == True, 'Expected: True'\n    check_str('12!') == False, 'Expected: False'\n    check_str('!%^&$#') == False, 'Expected: False'\n    check_str('!=') == False, 'Expected: False'\n    check_str('+&') == True, 'Expected: True'\n    check_str('=&') == False, 'Expected: False'\n    check_str('a=1') == False, 'Expected: False'\n    check_str('a=1') == False, 'Expected: False'\n    check_str('a=1') == False, 'Expected: False'\n    check_str('=+') == False, 'Expected: False'\n    check_str('=*') == True, 'Expected: True'\n    check_str('a=*') == False, 'Expected: False'\n    check_str('=+') == False, 'Expected: False'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=*') == True, 'Expected: True'\n    check_str('=*') == True, 'Expected: True'\n    check_str('=*') == True, 'Expected: True'\n    check_str('=*') == True, 'Expected: True'\n    check_str('=*') == True, 'Expected: True'\n    check_str('=*') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**') == True, 'Expected: True'\n    check_str('=**'"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndef solve1(string):\n    \"\"\"\n    Write a function to check whether the given string is a valid mobile number or not.\n    A valid mobile number is ten digits long and the area code should start from 3,4,7,8 or 9.\n    Note : The mobile numbers in India usually start with +91 or 0 before 10 digits.\n    The area code is not obligatory in India.\n    Examples :\n    Input : 1234567890\n    Output : False\n    Input : 9437472946\n    Output : True\n    Input : 9437472946\n    Output : False\n    \"\"\"\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_str('A') == True\nassert check_str('a') == True\nassert check_str('q') == False\nassert check_str('Q') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_str('')== True, 'Empty String'\nassert     check_str('a')== True, 'a'\nassert     check_str('ab')== False, 'ab'\nassert     check_str('abc')== False, 'abc'\nassert     check_str('abcq')== False, 'abcq'\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_str('aeiou')\nassert not check_str('stx')\nassert not check_str('Bb')\nassert not check_str('Ee')\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     geometric_sum(1) == 1\nassert geometric_sum(2) == 1.5\nassert geometric_sum(3) == 2.166666666666666665\nassert geometric_sum(4) == 3.16666666666666667\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert geometric_sum(4) == 3\nassert geometric_sum(5) == 6\nassert geometric_sum(10) == 55"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 3\nassert     geometric_sum(4) == 6\nassert     geometric_sum(5) == 15\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     geometric_sum(5) == (1 + 2 + 3 + 4 + 5)\nassert     geometric_sum(10) == (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10)\nassert     geometric_sum(0) == 0\n\nprint(\"done.\")\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     geometric_sum(3) == 7\nassert     geometric_sum(4) == 15\nassert     geometric_sum(5) == 22\nassert     geometric_sum(10) == 5"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     geometric_sum(3) == 4\nassert     geometric_sum(4) == 9\nassert     geometric_sum(5) == 12\nassert     geometric_sum(6) == 25\n\ndef harmonic_sum(n):\n    '''\n    Write a function to calculate the harmonic sum of n. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    Note: This function should return True if the given number is prime and false if the given number is not prime.\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 3\nassert     geometric_sum(4) == 7\nassert     geometric_sum(5) == 21\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Index(4) == 1\nassert     find_Index(5) == 2\nassert     find_Index(6) == 3\nassert     find_Index(7) == 4\n\ndef find_Index_naive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    Note : I am using a one to the power of n (1, 2, 3, 4, 5,..., n)\n    '''\n    x = 1\n    for i in range(1, n + 1):\n        x = x * i\n    return x\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"Testing find_Index():\")\nassert find_Index(1) == 1\nassert find_Index(2) == 3\nassert find_Index(3) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 2\n    assert find_Index(n) == 1\n    n = 3\n    assert find_Index(n) == 2\n    n = 4\n    assert find_Index(n) == 2\n    n = 5\n    "
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Index(1) == 0\nassert     find_Index(2) == 1\nassert     find_Index(3) == 2\nassert     find_Index(4) == 3\nassert     find_Index(5) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Index(1) == 0, \"Wrong output\"\nassert     find_Index(2) == 1, \"Wrong output\"\nassert     find_Index(3) == 2, \"Wrong output\"\nassert     find_Index(4) == 3, \"Wrong output\"\nassert     find_Index(5) == 4, \"Wrong output\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Index(2) == 0\nassert     find_Index(3) == 1\nassert     find_Index(4) == 2\nassert     find_Index(5) == 3\nassert     find_Index(6) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Index(4) == 2\nassert     find_Index(3) == 2\nassert     find_Index(5) == 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    find_Index(1) == 0\n    find_Index(2) == 1\n    find_Index(3) == 2\n    find_Index(4) == 5\n    find_Index(5) == 6\n    find_Index(6) == 10\n    find_Index(7) == 20\n    find_Index(8) == 15\n    find_Index(9) == 18\n    find_Index(10) == 30\n    find_Index(11) == 44\n    find_Index(12) == 89\n    find_Index(13) == 144\n    find_Index(14) == 593\n    find_Index(15) == 710\n    find_Index(16) == 716\n    find_Index(17) == 738\n    find_Index(18) == 764\n    find_Index(19) == 810\n    find_Index(20) == 852\n    find_Index(21) == 738\n    find_Index(22) == 772\n    find_Index(23) == 834\n    find_Index(24) == 796\n    find_Index(25) == 798\n    find_Index(26) == 810\n    find_Index(27) == 798\n    find_Index(28) == 826\n    find_Index(29) == 730\n    find_Index(30) == 756\n    find_Index(31) == 782\n    find_Index(32) == 798\n    find_Index(33) == 810\n    find_Index(34) == 860\n    find_Index(35) == 766\n    find_Index(36) == 774\n    find_Index(37) == 826\n    find_Index(38) == 782\n    find_Index(39) == 834\n    find_Index(40) == 880\n    find_Index(41) == 796\n    find_Index(42) == 810\n    find_Index(43) == 722\n    find_Index(44) == 756\n    find_Index(45) == 782\n    find_Index(46) == 710\n    find_Index(47) == 738\n    find_Index(48) == 754\n    find_Index(49) == 738\n    find_Index(50) == 772\n    find_Index(51) == 774\n    find_Index(52) == 738\n    find_Index(53) == 782\n    find_Index(54) == 710\n    find_Index(55) == 738\n    find_Index(56) == 766\n    find_Index(57) == 782\n    find_Index(58) == 710\n    find_Index(59) == 766\n    find_Index(60) == 774\n    find_Index(61) == 786\n    find_Index(62) == 782\n    find_Index(63) == 774\n    find_Index(64) == 766\n    find_Index(65) == 782\n    find_Index(66) == 774\n    find_Index(67) == 782\n    find_Index(68) == 774\n    find_Index(69) == 782\n    find_Index(70) == 774\n    find_Index(71) == 782\n    find_Index(72) == 710\n    find_Index(73) == 782\n    find_Index(74) == 774\n    find_Index(75) == 782\n    find_Index(76) == 774\n    find_Index(77) == 782\n    find_Index(78) == 710\n    find_Index(79) == 738\n    find_Index(80) == 774\n    find_Index(81) == 782\n    find_Index(82) == 710\n    find_Index(83) == 738\n    find_Index(84) == 766\n    find_Index(85) == 782\n    find_Index(86) == 710\n    find_Index(87) == 738\n    find_Index(88) == 774\n    find_Index(89) == 782\n    find_Index(90) == 774\n    find_Index(91) == 782\n    find_Index(92) == 774\n    find_Index(93) == 782\n    find_Index(94) == 710\n    find_Index(95) == 782\n    find_Index(96) == 774\n    find_Index(97) == 782\n    find_Index(98) == 710\n    find_Index(99) == 738\n    find_Index(100) == 766\n    find_Index(101) == 782\n    find_Index(102) == 710\n    find_Index(103) == 738\n    find_Index(104) == 754\n    find_Index(105) == 782\n    find_Index(106) == 710\n    find_Index(107) == 738\n    find_Index(108) == 766\n    find_Index(109) == 782\n    find_Index(110) == 710\n    find_Index(111) == 738\n    find_Index(112) == 754\n    find_Index(113) == 782\n    find_Index(114) == 710\n    find_Index(115) == 738\n    find_Index(116) == 766\n    find_Index(117) == 782\n    find_Index(118) == 710\n    find_Index(119) == 738\n    find_Index(120) == 754\n    find_Index(121) == 782\n    find_Index(122) == 710\n    find_Index(123) == 738\n    find_Index(124) == 766\n    find_Index(125) == 782\n    find_Index(126) == 710\n    find_Index(127) == 738\n    find_Index(128) == 754\n    find_Index(129) == 782\n    find_Index(130) == 710\n    find_Index(131) == 738\n    find_Index(132) == 766\n    find_Index(133) == 782\n    find_Index(134) == 710\n    find_Index(135) == 738\n    find_Index(136) == 774\n    find_Index(137) == 782\n    find_Index(138) == 710\n    find_Index(139) == 738\n    find_Index(140) == 766\n    find_Index(141) == 782\n    find_Index(142) == 710\n    find_Index(143) == 738\n    find_Index(144) == 774\n    find_Index(145) == 782\n    find_Index(146) == 710\n    find_Index(147) == 738\n    find_Index(148) == 766\n    find_Index(149) == 782\n    find_Index(150) == 710\n    find_Index(151) == 738\n    find_Index(152) == 754\n    find_Index(153) == 782\n    find_Index(154) == 710\n    find_Index(155) == 738\n    find_Index(156) == 766\n    find_Index(157) == 782\n    find_Index(158) == 710\n    find_Index(159) == 738\n    find_Index(160) == 774\n    find_Index(161) == 782\n    find_Index(162) == 710\n    find_Index(163) == 738\n    find_Index(164) == 766\n    find_Index(165) == 782\n    find_Index(166) == 710\n    find_Index(167) == 738\n    find_Index(168) == 754\n    find_Index(169) == 782\n    find_Index(170) == 710\n    find_Index(171) == 738\n    find_Index(172) == 766\n    find_Index(173) == 782\n    find_Index(174) == 710\n    find_Index(175) == 738\n    find_Index(176) == 754\n    find_Index(177) == 782\n    find_Index(178) == 710\n    find_Index(179) == 738\n    find_Index(180"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Index(3) == 0, \"Wrong result\"\nassert     find_Index(2) == 1, \"Wrong result\"\nassert     find_Index(1) == 2, \"Wrong result\"\nassert     find_Index(0) == 3, \"Wrong result\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (tuple_to_dict((1,2,3,4,5,6,7,8,9)) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9}) == True, \"Wrong output\"\n\ndef dict_to_tuple(d):\n    '''\n    Write a function to convert the given dictionary to a tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple-adjacent-pair/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}\nassert     tuple_to_dict((1, 2, 3, 4, 5, 6, 7)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7}\nassert     tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6}\nassert     tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}\nassert tuple_to_dict(()) == {}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict(('a', 'b', 'c', 'd')) == {'a':'b', 'b':'c', 'c':'d'}\nassert     tuple_to_dict(('a', 'b', 'c')) == {'a':'b', 'b':'c'}\nassert     tuple_to_dict(('a')) == {'a':'a'}\nassert     tuple_to_dict(('a',)) == {'a':'a'}\nassert     tuple_to_dict(('a', 'b')) == {'a':'b'}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_dict((1,2,3)) == {1:2, 2:3, 3:1}\nassert tuple_to_dict((1,2,3,1,4,5)) == {1:2, 2:3, 3:1, 4:5, 5:4}\n\n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert a dictionary into a tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-into-tuple-using-adjacent-elements/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_dict(('A','B','C')    ) == {'A': 'B', 'C': 'A'}\nassert     tuple_to_dict(('A','B','C','A') == {'A': 'B', 'C': 'A'})\nassert     tuple_to_dict(('A','B','C','D','A') == {'A': 'B', 'C': 'A', 'D': 'A'})\n\nprint(\"Tuple to dict. OK\")\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_dict((1,2,3)) == {1:2,2:3,3:1}, \"Should be {1:2,2:3,3:1}\"\nassert     tuple_to_dict((1,2,3,4)) == {1:2,2:3,3:1,4:4}, \"Should be {1:2,2:3,3:1,4:4}\"\nassert     tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:1,4:4,5:5}, \"Should be {1:2,2:3,3:1,4:4,5:5}\"\nassert     tuple_to_dict((1,2,3,4,5,6)) == {1:2,2:3,3:1,4:4,5:5,6:6}, \"Should be {1:2,2:3,3:1,4:4,5:5,6:6}\"\nassert     tuple_to_dict((1,2,3,4,5,6,7)) == {1:2,2:3,3:1,4:4,5:5,6:6,7:7}, \"Should be {1:2,2:3,3:1,4:4,5:5,6:6,7:7}\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple containing the adjacent key-value pairs. https://www.geeksforgeeks.org/python-convert-dict-to-tuple-adjacent-pair/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_dict((1,2,3)) == {1:2,2:3,3:1}\nassert tuple_to_dict((1,2,3,4)) == {1:2,2:3,3:4,4:1}\nassert tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5,5:1}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict((('a', 1), ('b', 2), ('c', 3))) == {'a':1,'b':2,'c':3}\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Characters_Same('q') == True\nassert     all_Characters_Same('qq') == False\nassert     all_Characters_Same('qqq') == True\nassert     all_Characters_Same('qqqq') == False\nassert     all_Characters_Same('qqqq') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Characters_Same('')        == True, \"FAIL\"\nassert     all_Characters_Same('ab')        == False, \"FAIL\"\nassert     all_Characters_Same('cd')        == False, \"FAIL\"\nassert     all_Characters_Same('cde')        == False, \"FAIL\"\nassert     all_Characters_Same('abcd')        == False, \"FAIL\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Characters_Same([\"w\", \"w\"]) == True, \"this is not correct\"\nassert     all_Characters_Same([\"h\", \"p\"]) == True, \"this is not correct\"\nassert     all_Characters_Same([\"w\", \"w\"]) == False, \"this is not correct\"\nassert     all_Characters_Same([\"k\", \"k\"]) == True, \"this is not correct\"\nassert     all_Characters_Same([\"k\", \"k\"]) == False, \"this is not correct\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same('abc') == False, \"Test case 1 - Failed\"\nassert     all_Characters_Same('abcabc') == True, \"Test case 1 - Failed\"\nassert     all_Characters_Same('abcabcabc') == False, \"Test case 1 - Failed\"\nassert     all_Characters_Same('abcabcabcabc') == True, \"Test case 1 - Failed\"\nassert     all_Characters_Same('abcabcabcabcabc') == True, \"Test case 1 - Failed\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same(s = \"i am a happy programmer\") == True, 'Should be True'\nassert     all_Characters_Same(s = \"I am a Happy programmer\") == False, 'Should be False'\nassert     all_Characters_Same(s = \"Ai am a happy programmer\") == False, 'Should be False'\nassert     all_Characters_Same(s = \"i am a happy programmer!\") == False, 'Should be False'\nassert     all_Characters_Same(s = \"i am a happy programmer!\") == False, 'Should be False'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Characters_Same('') == False, \"Test Case 1 Failed\"\nassert     all_Characters_Same('abcd') == True, \"Test Case 2 Failed\"\nassert     all_Characters_Same('AbCd') == False, \"Test Case 3 Failed\"\nassert     all_Characters_Same('abcdef') == False, \"Test Case 4 Failed\"\nassert     all_Characters_Same('aaabcccddd') == False, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    all_Characters_Same(\"testing\")== False\n    all_Characters_Same(\"testing\")== False\n    all_Characters_Same(\"testing\")== True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Characters_Same(['h','e','l','l','o',' ','w','o','r','l','d',' ']) == True\nassert     all_Characters_Same(['a','b','c','d','e']) == False\nassert     all_Characters_Same(['x','x','x','x','x']) == True\nassert     all_Characters_Same(['a','b','c','d','e','x','a','b','c','d','e','x']) == False\nassert     all_Characters_Same(['a','b','c','d','e','x','a','b','c','d','e','x','x','x','x','x']) == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Characters_Same(\"Hello\") == False, \"Wrong output.\"\nassert     all_Characters_Same(\"abc\") == True, \"Wrong output.\"\nassert     all_Characters_Same(\"Chapman\") == False, \"Wrong output.\"\nassert     all_Characters_Same(\"Bennett\") == True, \"Wrong output.\"\nassert     all_Characters_Same(\"Hannah\") == False, \"Wrong output.\"\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # check the correctness of the assert\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_tetrahedron(2) == math.sqrt(5/8)\nassert area_tetrahedron(2) == 1\nassert area_tetrahedron(1) == math.sqrt(2/4)\nassert area_tetrahedron(1) == 1\nassert area_tetrahedron(1.1) == math.sqrt(2/4)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_tetrahedron(2) == 1.5\nassert     area_tetrahedron(3) == 1.34\nassert     area_tetrahedron(4) == 1.464\nassert     area_tetrahedron(5) == 1.5\nassert     area_tetrahedron(6) == 1.5\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('The area of a tetrahedron is 1')\nprint('Success')\nprint()\n\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     area_tetrahedron(1) == 0.25, 'Wrong output of area_tetrahedron'\n\nprint('All tests are passed.')\n\ndef area_prism(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a prism.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef fatorial(number):\n    '''\n    Write a function to calculate the fatorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(area_tetrahedron(2)) # == 4.0\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rotate_right(['a', 'b', 'c', 'd'], 1) == ['c', 'd', 'a', 'b']\nassert     rotate_right(['a', 'b', 'c', 'd'], 2) == ['d', 'a', 'b', 'c']\nassert     rotate_right(['a', 'b', 'c', 'd'], 3) == ['d', 'c', 'a', 'b']\nassert     rotate_right(['a', 'b', 'c', 'd'], 4) == ['b', 'd', 'c', 'a']\nassert     rotate_right(['a', 'b', 'c', 'd'], 5) == ['c', 'a', 'd', 'b']\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 1) == [4, 5, 1, 2, 3]\nassert     rotate_right([1, 2, 3, 4, 5], -1) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert     rotate_right([1, 2, 3, 4, 5], -10) == [3, 4, 5, 1, 2]\n\ndef duplicate_value_removal(arr):\n    '''\n    Write a function to remove the duplicate values of an array.\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rotate_right([1,2,3,4,5,6], 2) == [3,4,5,6,1,2], \"Should rotate right by 2\"\nassert     rotate_right([1,2,3,4,5,6,7], 2) == [4,5,6,1,2,3,7], \"Should rotate right by 2\"\nassert     rotate_right([1,2,3,4,5,6,7,8], 2) == [5,6,1,2,3,4,7,8], \"Should rotate right by 2\"\nassert     rotate_right([1,2,3,4,5,6,7,8,9], 2) == [6,7,8,9,1,2,3,4,5], \"Should rotate right by 2\"\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rotate_right(['item-1', 'item-2', 'item-3', 'item-4', 'item-5', 'item-6', 'item-7'], 4) == ['item-7', 'item-6', 'item-5', 'item-4', 'item-3', 'item-2', 'item-1']\nassert     rotate_right(['item-1', 'item-2', 'item-3', 'item-4', 'item-5', 'item-6', 'item-7'], -4) == ['item-7', 'item-6', 'item-5', 'item-4', 'item-3', 'item-2', 'item-1']\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7], 1) == [2, 3, 4, 5, 6, 7, 1]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7], -1) == [7, 1, 2, 3, 4, 5, 6]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7], 7) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rotate_right([1,2,3], 1) == [3,1,2]\nassert     rotate_right([1,2,3,4,5,6], 3) == [4,5,6,1,2,3]\nassert     rotate_right([1,2,3], 2) == [3,1,2]\nassert     rotate_right([1,2,3,4,5,6], 4) == [4,5,6,1,2,3]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_none(test_tup) == True\n\nprint('Test case 4 passed')\n\n\n\nprint('--------------------------------------')\nprint('Test case 5')\n\ndef check_value(tup):\n    '''\n    Write a function to check if a tuple is empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none((1,2,3,4,None,None,5,None)) == True, \"Your function does not work\"\nassert    check_none((1,2,3,4,\"\",None,\"\",None)) == False, \"Your function does not work\"\nassert check_none((None,None,None,None,None,None,None,None)) == False, \"Your function does not work\""
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_none((1,2,None)) == True, \"The tuple should contain None\"\nassert     check_none((1,2,\"\")) == False, \"The tuple should contain None\"\nassert     check_none((None,2,\"\")) == False, \"The tuple should contain None\"\nassert     check_none((1,\"\")) == False, \"The tuple should contain None\"\nassert     check_none((None,\"\")) == True, \"The tuple should contain None\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none([1,2,'a',None]) == False, 'First tuple should not have any None value'\nassert     check_none([1,'a',None]) == True, 'Second tuple should have None value'\nassert     check_none(None) == True, 'Third tuple should have None value'\nassert     check_none(('a','b',None)) == False, 'Fourth tuple should not have any None value'\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_none((1,2,3,None)) == False\nassert     check_none((1,2,3,'abc')) == True\nassert     check_none((1,2,3,'abc',None)) == False\nassert     check_none((1,2,3,'abc',None,'xyz')) == True\nassert     check_none((1,2,3,'abc',None,'xyz',None)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none((1, 2, '3', 4, 5)) == False, \"Example 1\"\nassert     check_none((1, 2, 3, 4, 5)) == True, \"Example 2\"\nassert     check_none(()) == True, \"Example 3\"\nassert     check_none((None)) == True, \"Example 4\"\nassert     check_none((None,) * 50) == True, \"Example 5\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ntest_tup = None\nassert check_none(test_tup) == False, \"Expected False\"\n\ntest_tup = (1, None, 'a', 'b', None, 'c')\nassert check_none(test_tup) == True, \"Expected True\"\n\ntest_tup = ('a', 'b', 'c')\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none(None)        == True\nassert     check_none((None))    == False\nassert     check_none((1,None,None)) == True\nassert     check_none((None,2,3))    == False\nassert     check_none(())    == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_none(('a', None, 0, 0.0, 0, True, None, \"string\")) == True, \"Should return True\"\nassert     check_none(('a', None, 0, 0.0, 0, True, None, \"string\", None)) == False, \"Should return False\"\nassert     check_none(('a', None, 0, 0.0, 0, True, None, \"string\", None, None)) == False, \"Should return False\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none(()) == None\nassert     check_none((None, None)) == True\nassert     check_none((1, None)) == True\nassert     check_none((None, 1)) == True\nassert     check_none((\"Hello\", None)) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndivisible_by_digits(10,20) == [10,11,12,13,14,15,16,17,18,19,20]\nassert "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisible_by_digits(1,10) == 1, \"1 is not divisible by 1\"\nassert     divisible_by_digits(2,10) == 0, \"2 is not divisible by 1\"\nassert     divisible_by_digits(123,456) == 0, \"123 is not divisible by 1\"\nassert     divisible_by_digits(12345,12345) == 1, \"12345 is not divisible by 1\"\nassert     divisible_by_digits(123456,123456) == 0, \"123456 is not divisible by 1\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert divisible_by_digits(1, 10) == False, 'incorrect input'\nassert divisible_by_digits(1, 1) == True, 'incorrect input'\nassert divisible_by_digits(10, 11) == False, 'incorrect input'\nassert divisible_by_digits(10, 10) == True, 'incorrect input'\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     divisible_by_digits(10,16) == [10,12,14,16]\nassert     divisible_by_digits(10,50) == []\n\ndef divisible_by_digits_2(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisible_by_digits(10, 100) ==     [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert     divisible_by_digits(0, 10) ==     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndivisible_by_digits(1, 10)\n\ndivisible_by_digits(1, 3)\n\ndivisible_by_digits(1, 9)\n\ndivisible_by_digits(1, 6)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sector_area(2,45) == 1.4142135623730951\nassert sector_area(2,300) == 1.0\nassert sector_area(2,360) == 1.0\nassert sector_area(2,360.1) == 1.0\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsector_area(5,15) == 22.5\n\ndef find_sum(n):\n    '''\n    Write a function to find the sum of the first n even numbers.\n    '''\n    pass\n\nassert \nfind_sum(5) == 10\nfind_sum(100) == 5050\n\ndef sum_factors(n):\n    '''\n    Write a function to find the sum of the first n prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef volume_cylinder(r,h,a):\n    '''\n    Write a function to find the volume of a cylinder. The function takes the radius, height and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sector_area(1, 90) == 3.14\nassert     sector_area(1,45) == 1.5708\nassert     sector_area(1,360) == None\nassert     sector_area(1,0) == None\nassert     sector_area(1,300) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(sector_area(3,30))\nprint(sector_area(3,359))\nprint(sector_area(0,359))\n\ndef sector_area_2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sector_area(0.5,360) == None\nassert sector_area(0.5,90) == 0.5 * math.pi\nassert sector_area(0.5,180) == None\nassert sector_area(0.5,360) == None\nassert sector_area(1.5,360) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sector_area(5, 90) == math.pi*5**2*math.sin(math.radians(90))/2\nassert sector_area(5, 0) == math.pi*5**2\nassert sector_area(5, 360) == None\nassert sector_area(5, -360) == None\nassert sector_area(5, 361) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sector_area(1,5) == 1.5\nassert sector_area(1,360) == 1\nassert sector_area(1,0) == 0\nassert sector_area(1,375) == 1\nassert sector_area(1,190) == 1.5\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sector_area(1,0) == 0\nassert sector_area(1,360) == 1\nassert sector_area(1,45) == math.pi/4\nassert sector_area(1,60) == math.pi/4\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lcs_of_three(\"abcde\", \"ace\", \"cae\") == \"ae\", \"test 1 is failed\"\nassert     lcs_of_three(\"abcde\", \"ace\", \"a\") == \"a\", \"test 2 is failed\"\nassert     lcs_of_three(\"abcde\", \"ace\", \"e\") == \"e\", \"test 3 is failed\"\nassert     lcs_of_three(\"abcde\", \"abc\", \"e\") == \"\", \"test 4 is failed\"\nassert     lcs_of_three(\"abcde\", \"e\", \"a\") == \"a\", \"test 5 is failed\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef lcs_of_four(X, Y, Z, a): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lcs_of_three('ABCDGH', 'AEDFHR', 'BDCEGHA') == 'ABCD'\nassert     lcs_of_three('ABCDGH', 'AEDFHR', 'ABE') == ''\nassert     lcs_of_three('ABCDGH', 'AEDFHR', 'A') == 'A'"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lcs_of_three(\n    \"abcde\",\n    \"acbde\",\n    \"adbc\") ==     \"adbc\"\nassert     lcs_of_three(\n    \"abcde\",\n    \"adbc\",\n    \"acbd\") ==     \"adbc\"\nassert     lcs_of_three(\n    \"abcde\",\n    \"adbc\",\n    \"abc\") ==     \"adbc\"\nassert     lcs_of_three(\n    \"abcde\",\n    \"adbc\",\n    \"abcde\") ==     \"adbc\"\nassert     lcs_of_three(\n    \"abcde\",\n    \"adbc\",\n    \"abcc\") ==     \"adbc\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lcs_of_three(\"ABCBDAB\", \"BDCABA\", \"AEDBBCA\") == \"AEDB\"\nassert     lcs_of_three(\"ABCABDAB\", \"BDCABA\", \"AEDBBDCA\") == \"ABCA\"\nassert     lcs_of_three(\"ABCABDAB\", \"BDCABA\", \"AEDBDCAA\") == \"ABCB\"\nassert     lcs_of_three(\"ABCABDAB\", \"BDCABA\", \"AEDBDCAB\") == \"ABCB\"\nassert     lcs_of_three(\"ABCABDAB\", \"BDCABA\", \"ABCBDCABA\") == \"ABCAB\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lcs_of_three(\"ABCBDAB\", \"BDCABA\", \"BDCABA\") == 3\nassert     lcs_of_three(\"ABCBDAB\", \"BDCABA\", \"ABCBD\") == 3\nassert     lcs_of_three(\"ABC\", \"AB\", \"A\") == 1\nassert     lcs_of_three(\"ABCBDAB\", \"BDCABA\", \"BDAB\") == 3\nassert     lcs_of_three(\"ABCBDAB\", \"BDCABA\", \"A\") == 1\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return str1.title().replace(str1[:2], str1[:2] +'' + str1[2:])\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     capital_words_spaces('python function') == 'python function'\nassert     capital_words_spaces('python  functiOn') == 'python function'\nassert     capital_words_spaces('one-two-three') == 'oneTwoThree'\nassert     capital_words_spaces('one two three') == 'oneTwoThree'\n\ndef foo(x, y):\n    '''\n    Write a function foo to print 'Hello, World'\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     capital_words_spaces(\"Hello world\") == \"Hello world\"\nassert     capital_words_spaces(\" hello world\") == \"Hello world\"\nassert     capital_words_spaces(\"Hello World\") == \"Hello World\"\nassert     capital_words_spaces(\"hello world\") == \"Hello world\"\nassert     capital_words_spaces(\"Hello world!\") == \"Hello world!\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     capital_words_spaces(\"Mr John Smith\") == \" Mr  John Smith\"\nassert capital_words_spaces(\"MrJohnSmith\") == \" Mr  John Smith\"\nassert capital_words_spaces(\"Hello Mr John Smith\") == \"Hello Mr John Smith\"\nassert capital_words_spaces(\" hello Mr John Smith\") == \"Hello Mr John Smith\"\nassert capital_words_spaces(\"    Hello Mr John Smith\") == \"Hello Mr John Smith\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     capital_words_spaces(\"hello world\") == \"Hello World\"\nassert     capital_words_spaces(\"hello world xyz\") == \"Hello World xyz\"\nassert     capital_words_spaces(\"hello world xyz\") == \"Hello World xyz\"\nassert     capital_words_spaces(\"hello world   xyz\") == \"Hello World   xyz\"\nassert     capital_words_spaces(\"hello world   xyz\") == \"Hello World   xyz\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     capital_words_spaces(\"\") == \"\", \"Test failed: \\\"\\\"\"\nassert     capital_words_spaces(\"Test\") == \"Test \", \"Test failed: \\\"Test\\\"\"\nassert     capital_words_spaces(\"This is a sentence.\") == \"This is a sentence.\", \"Test failed: \\\"This is a sentence.\"\nassert     capital_words_spaces(\"This is a test.\") == \"This is a test.\", \"Test failed: \\\"This is a test.\"\nassert     capital_words_spaces(\"\") == \"\", \"Test failed: \\\"\\\"\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncapital_words_spaces(\"This is a string with a bunch of words\") == \"This is a string with a bunch of words\"\nassert capital_words_spaces(\"This Is A String With A bunch of words\") == \"This Is A String With A bunch of words\"\nassert capital_words_spaces(\"This is a string with a bunch of words \") == \"This is a string with a bunch of words \"\nassert capital_words_spaces(\"  \") == \"\"\nassert capital_words_spaces(\"\") == \"\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     capital_words_spaces('The quick brown fox jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog.', 'incorrect'\nassert capital_words_spaces(' The quick brown fox jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog.', 'incorrect'\nassert capital_words_spaces('the quick brown fox jumps over the lazy dog.') == 'the quick brown fox jumps over the lazy dog.', 'incorrect'\nassert capital_words_spaces('   The quick brown fox jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog.', 'incorrect'\nassert capital_words_spaces('    the quick brown fox jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog.', 'incorrect'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef letter_case(str1):\n    '''\n    Write a function to swap case to a given string.\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nnums_str = ['4', '33', '0.1', '14', '4.2']\nsorted_nums = sort_numeric_strings(nums_str)\nassert sorted_nums == sorted(nums_str), \"Should be sorted in numerically ascending order\"\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsort_numeric_strings(['12','4', '12','4','10'])\nsort_numeric_strings(['12','4', '10', '12','10'])\nsort_numeric_strings(['10','10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10','10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10','10', '10','10','10','10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10','10', '10', '10', '10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10','10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10','10', '10', '10', '10', '10','10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10','10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10','10', '10', '10', '10', '10', '10', '10', '10','10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '10','10'])\nsort_numeric_strings(['10','10', '10', '10','10', '10', '10','10','10', '10', '10', '10', '10', '10', '10', '10', '10', '10', '1"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsort_numeric_strings(['1','2','3','4','5','1','2','3','1','4','5']) == ['1','2','3','1','4','5','1','2','3','4','5']\nassert sort_numeric_strings(['4','5','1','2','3','4']) == ['1','2','3','4','4','5']\nassert sort_numeric_strings(['4','5','1','2','3','3']) == ['1','2','3','3','4','5']\nassert sort_numeric_strings(['4','5','1','2','3','4']) == ['1','2','3','4','4','5']\nassert sort_numeric_strings(['4','5','1','2','3','3','4']) == ['1','2','3','3','4','4','5']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numeric_strings([\"1\", \"4\", \"2\"]) == [\"1\", \"2\", \"4\"], 'Test #1 failed'\nassert     sort_numeric_strings([\"1\", \"4\", \"2\"]) == [\"2\", \"1\", \"4\"], 'Test #2 failed'\nassert     sort_numeric_strings([\"1\", \"4\", \"2\"]) == [\"2\", \"1\", \"4\"], 'Test #3 failed'\nassert     sort_numeric_strings([\"1\", \"4\", \"2\"]) == [\"2\", \"1\", \"4\"], 'Test #4 failed'\nassert     sort_numeric_strings([\"4\", \"2\", \"1\"]) == [\"1\", \"2\", \"4\"], 'Test #5 failed'\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numeric_strings([\"foo\", \"10\", \"1\", \"0\"]) == [\"0\", \"1\", \"foo\", \"10\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numeric_strings([\"1\",\"2\",\"3\",\"4\"]) == [\"1\",\"2\",\"3\",\"4\"]\nassert     sort_numeric_strings([\"a\",\"1\",\"2\",\"b\"]) == [\"a\",\"1\",\"2\",\"b\"]\nassert     sort_numeric_strings([\"a\",\"1\",\"2\",\"b\",\"a\"]) == [\"a\",\"1\",\"2\",\"a\",\"b\"]\nassert     sort_numeric_strings([\"a\",\"1\",\"2\",\"b\",\"a\",\"1\"]) == [\"a\",\"1\",\"1\",\"1\",\"a\",\"b\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numeric_strings(['3','5','2','1','7','1']) == ['1','1','2','3','5','7']\nassert     sort_numeric_strings(['3','5','2','1','7','1']) == ['1','1','2','3','5','7']\nassert     sort_numeric_strings(['3','5','2','1','7','1']) == ['1','1','2','3','5','7']\n\nprint('Correct')\n\n\n'''\nProblem #4\nAssume that the following list of strings is already sorted:\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_tuple([1,2,3,4,5], (6,7,8,9,10)) == [(1,2,3,4,5),(6,7,8,9,10)]\nassert     add_tuple([1,2,3,4,5], (6,7,8,9,10,1,2,3)) == [(1,2,3,4,5,6,7,8,9,10),(6,7,8,9,10,1,2,3)]\nassert     add_tuple([1,2,3,4,5], (6,7,8,9,10,11,12)) == [(1,2,3,4,5,6,7,8,9,10,11,12)]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef remove_tuple(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef add_list(list1, list2):\n    '''\n    Write a function to add the given list and tuple to a list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_tuple([0,1,2], (4,5,6)) == [(0,4), (1,5), (2,6)]\nassert     add_tuple([0,1,2], (1,1,1)) == [(0,1), (1,1), (2,1)]\nassert     add_tuple([0,1,2], (3,3,3)) == [(0,3), (1,3), (2,3)]\nassert     add_tuple([0,1,2], (4,4,4)) == [(0,4), (1,4), (2,4)]\nassert     add_tuple([0,1,2], (5,5,5)) == [(0,5), (1,5), (2,5)]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_tuple(['a', 'b', 'c'], ('x', 'y', 'z')) == ['a', 'b', 'c', 'x', 'y', 'z']\nassert     add_tuple([], ('x', 'y', 'z')) == ['x', 'y', 'z']\nassert     add_tuple([], ('x',)) == ['x']\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_tuple([1,2,3], (3,4,5)) == (1,2,3,3,4,5)\nassert     add_tuple([1,2,3], (4,5)) == (1,2,3,4,5)\nassert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([1,2,3], (4,5,6,7)) == (1,2,3,4,5,6,7)\nassert     add_tuple([1,2,3], (4,5,6,7,8)) == (1,2,3,4,5,6,7,8)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_tuple([], (1,2,3)) == [(1,2,3)], \"Wrong\"\nassert     add_tuple([(1,2,3)], (1,2,3)) == [(1,2,3)], \"Wrong\"\nassert     add_tuple([(1,2,3)], (1,2,3,4)) == [(1,2,3,4)], \"Wrong\"\nassert     add_tuple([(1,2,3,4), (1,2,3)], (1,2,3,4)) == [(1,2,3,4),(1,2,3)], \"Wrong\"\nassert     add_tuple([(1,2,3), (1,2,3)], (1,2,3,4)) == [(1,2,3,4)], \"Wrong\"\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_tuple([], (1, 2, 3)) == (1, 2, 3)\nassert     add_tuple([(1, 2), (3, 4)], (5, 6)) == ((1, 2), (3, 4), (5, 6))\nassert     add_tuple([(1, 2), (3, 4)], (5, 5)) == ((1, 2), (3, 4), (5, 5))\nassert     add_tuple([(1, 2), (3, 4)], (2, 4)) == ((1, 2), (3, 4), (5, 5))\nassert     add_tuple([(1, 2), (3, 4), (5, 5)], (6, 6)) == ((1, 2), (3, 4), (5, 5), (6, 6))\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nadd_tuple([1,2,3,4], (1,2,3)) == [1,2,3,4]\nadd_tuple([], (1,2,3)) == [1,2,3]\nadd_tuple([1,2,3,4], (3,2,1)) == [1,2,3,4]\nadd_tuple([1,2,3,4], (2,3,1)) == [1,2,3,4]\nadd_tuple([1,2,3,4], (3,1,2)) == [1,2,3,4]\nadd_tuple([1,2,3,4], (2,1,3)) == [1,2,3,4]\nadd_tuple([1,2,3,4], (4,3,2)) == [1,2,3,4]\nadd_tuple([1,2,3,4], (1,3,2)) == [1,2,3,4]\nadd_tuple([1,2,3,4], (1,2,3)) == [1,2,3,4]\nadd_tuple([1,2,3,4], (4,2,3)) == [1,2,3,4]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"\\n\")\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert (check_min_heap([2, 5, 1, 6, 7]) == True)\nassert (check_min_heap([2, 5, 1, 6, 7, -1]) == False)\nassert (check_min_heap([-2, -5, -1, -6, -7]) == False)\nassert (check_min_heap([-2, -5, -1, -6, -7, -1]) == False)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_max_heap_diff_helper(arr, left, right):\n    '''\n    Write a function to find the maximum difference between the maximum value of any two children of a heap node. https://www.geeksforgeeks.org/find-maximum-difference-two-nodes-of-heap/\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    '''\n    The function should return 1 if the array represents a min heap and 0 if it does not.\n    '''\n    # Your Code goes here\n    \n    for i in range(0,len(arr)):\n        if check_min_heap_helper(arr,i) == False:\n            return 0\n    return 1\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef min_heapify(arr, i):\n    '''\n    Write a function to rearrange the array in a way that it forms a min heap. https://www.geeksforgeeks.org/how-to-rearrange-the-array-in-a-way-that-it-forms-a-min-heap/\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_min_heap_helper([5, 1, 4, 3, 2], False), \"Should be False\"\nassert     check_min_heap_helper([1, 2, 3, 4, 5], True), \"Should be True\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    check_min_heap_helper([1,4,7,9,2,5,8], 1) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 5) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 5) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 2) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 3) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 6) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 7) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 8) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 9) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 10) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], -1) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 0) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 11) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 15) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 16) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 100) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], -100) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 10.1) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 12) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], -5) == False\n    check_min_heap_helper([1,4,7,9,2,5,8], 14) == False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncheck_min_heap_helper([10, 5, 2, 1, 12], 2) == False\ncheck_min_heap_helper([10, 5, 2, 1, 12], 1) == False\ncheck_min_heap_helper([10, 5, 2, 1, 12], 0) == False\n\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if len(arr) == 0 or i >= len(arr):\n        return False\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (check_min_heap_helper([4, 1, 3, 2], True) == True), \"Should be True\"\nassert     (check_min_heap_helper([4, 1, 3, 2], False) == False), \"Should be False\"\nassert     (check_min_heap_helper([1, 2], True) == True), \"Should be True\"\nassert     (check_min_heap_helper([1, 2], False) == False), \"Should be False\"\nassert     (check_min_heap_helper([1, 2, 3, 4], True) == True), \"Should be True\"\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \njacobsthal_num(5) == 13\njacobsthal_num(2) == 3\njacobsthal_num(6) == 11\njacobsthal_num(1) == 1\njacobsthal_num(0) == 0\njacobsthal_num(7) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \njacobsthal_num(100)\njacobsthal_num(10000)\njacobsthal_num(100000)\njacobsthal_num(1000000)\njacobsthal_num(10000000)\njacobsthal_num(100000000)\n\n\n\ndef jacobsthal_denom(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nj = 0\nfor j in range(10):\n    assert jacobsthal_num(j) == j\nprint(\"Correct!\")\n\ndef jacobsthal_num2(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        j = (a + b) % 2\n        if j == 0:\n            a = (a + b)\n        else:\n            a = (a + b) * 2\n        b = (b + a) % 2\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     jacobsthal_num(0) == 0, 'jacobsthal_num(0) is wrong'\nassert     jacobsthal_num(1) == 1, 'jacobsthal_num(1) is wrong'\nassert     jacobsthal_num(10) == 11, 'jacobsthal_num(10) is wrong'\nassert     jacobsthal_num(20) == 171, 'jacobsthal_num(20) is wrong'\nassert     jacobsthal_num(50) == 2731, 'jacobsthal_num(50) is wrong'\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     jacobsthal_num(1) == 0\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 1\nassert     jacobsthal_num(5) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nMin_k_records\nGiven an unsorted tuple list, find the min(k) records. Your code should return a list of min(k) tuples sorted lexicographically by first element.\n\nSample Input    Expected Output\n[(5, 2), (4, 3), (9, 4), (7, 1), (8, 5), (2, 7)]    [(2, 7), (4, 3), (5, 2), (7, 1), (8, 5), (9, 4)]\n[(5, 2), (4, 3), (9, 4), (7, 1), (8, 5), (2, 7)]    [(2, 7), (4, 3), (9, 4), (7, 1), (8, 5)]\n[(5, 2), (4, 3), (9, 4), (7, 1), (8, 5), (2, 7)]    [(2, 7), (4, 3), (5, 2), (7, 1), (8, 5)]\n[(5, 2), (4, 3), (9, 4), (7, 1), (8, 5), (2, 7)]    [(2, 7), (4, 3), (5, 2), (7, 1), (8, 5)]\n[(5, 2), (4, 3), (9, 4), (7, 1), (8, 5), (2, 7)]    [(2, 7), (4, 3), (5, 2), (7, 1), (8, 5)]\n'''\n\ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a temporary list\n    temp_list = []\n\n    # checking for empty list\n    if test_list == []:\n        return temp_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 1) == ('axe', 1), f\"Wrong output for min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 1)\"\nassert     min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 2) == ('axe', 1), f\"Wrong output for min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 2)\"\nassert     min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 3) == ('axe', 1), f\"Wrong output for min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 3)\"\nassert     min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 4) == ('axe', 1), f\"Wrong output for min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 4)\"\nassert     min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 5) == ('axe', 1), f\"Wrong output for min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 5)\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_k(('ab', 'cd', 'ef', 'gh'), 1) == 'cd','min_k'\nassert     min_k(('ab', 'cd', 'ef', 'gh'), 2) == 'ab','min_k'\nassert     min_k(('ab', 'cd', 'ef', 'gh'), 3) == 'ef','min_k'\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_k([('asdf', 'qwe', -10), ('mno', 'qrst', 10), ('dsf', 'rtyu', -5), ('zxc', 'qwe', 5), ('cba', 'rtyu', 2), ('mno', 'qrst', 20)], 3) == (('mno', 'qrst', 10), ('dsf', 'rtyu', -5), ('zxc', 'qwe', 5))\n\nassert     min_k([('asdf', 'qwe', -10), ('mno', 'qrst', 10), ('dsf', 'rtyu', -5), ('zxc', 'qwe', 5), ('cba', 'rtyu', 2), ('mno', 'qrst', 20)], 4) == (('dsf', 'rtyu', -5), ('mno', 'qrst', 10), ('zxc', 'qwe', 5), ('cba', 'rtyu', 2))\n\nassert     min_k([('asdf', 'qwe', -10), ('mno', 'qrst', 10), ('dsf', 'rtyu', -5), ('zxc', 'qwe', 5), ('cba', 'rtyu', 2), ('mno', 'qrst', 20)], 5) == (('dsf', 'rtyu', -5), ('mno', 'qrst', 10), ('zxc', 'qwe', 5), ('cba', 'rtyu', 2))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_k(('a', 'b', 'c', 'd', 'e', 'f'), 3) == ['c', 'd', 'e']\nassert     min_k(('a', 'b', 'c', 'd', 'e', 'f'), 2) == ['b', 'd']\nassert     min_k(('a', 'b', 'c', 'd', 'e', 'f'), 1) == ['a', 'b', 'c']\nassert     min_k(('a', 'b', 'c', 'd', 'e', 'f'), 0) == ['a', 'b', 'c', 'd', 'e', 'f']"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_k([(10, 'Paul','male'), (11, 'Max','male'), (19, 'Kip','male'),\n                (14, 'Kip', 'female'), (16, 'Paul','male'), (11, 'Max','male')]) == (11, 'Paul')\n\nassert     min_k([(10, 'Paul','male'), (11, 'Max','male'), (19, 'Kip','male'),\n                (14, 'Kip', 'female'), (16, 'Paul','male'), (11, 'Max','male')]) == (19, 'Kip')\n\nassert     min_k([(10, 'Paul','male'), (11, 'Max','male'), (19, 'Kip','male'),\n                (14, 'Kip', 'female'), (16, 'Paul','male'), (11, 'Max','male')]) == (16, 'Paul')\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    extract_index_list([1,2,3], [1,2,3], [1,2,3]) == [1, 2, 3]\nassert extract_index_list([1,2,3], [1,2,3], [2,3,1]) == [1, 2]\nassert extract_index_list([1,2,3], [1,2,3], [3,1,2]) == [1]\nassert extract_index_list([1,2,3], [1,2,3], [3,2,1]) == [1]\nassert extract_index_list([1,2,3], [1,2,3], [3,1,3]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [1, 2]\n    extract_index_list([1, 2, 3], [2, 3, 4, 5], [3, 4, 5]) == [1, 2]\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5], [3, 4, 5]) == [1, 2, 3]\n    extract_index_list([1, 2, 3], [2, 3], [3]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4], [3, 4, 5]) == []\n    extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5, 6]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [4, 5, 6]) == []\n    extract_index_list([1, 2, 3], [2, 3, 4, 5, 6], [4, 5, 6]) == []\n    extract_index_list([], [], []) == []\n    extract_index_list([1, 2, 3], [2, 3, 4], [3, 4]) == []\n    extract_index_list([1, 2, 3], [2, 3, 4, 5], [3, 4, 5]) == []\n    extract_index_list([1, 2, 3], [2, 3, 4, 5], [4, 5]) == []\n    extract_index_list([1, 2, 3], [2, 3, 4, 5, 6], [4, 5, 6]) == []\n    extract_index_list([1, 2, 3], [2, 3, 4, 5, 6], [4, 5, 6]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5], [4, 5]) == []\n    extract_index_list([1, 2, 3, 4, 5, 6], [2, 3, 4, 5], [4, 5]) == []\n    extract_index_list([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6], [4, 5, 6]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [4, 5, 6]) == []\n    extract_index_list([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6], [4, 5, 6]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], []) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], []) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == []\n    extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_index_list([1,2,3,4,5], [3,4,5], [10,11,12,13,14,15]) ==     [3,4,5], \"You're Wrong\"\nassert     extract_index_list([1,2,3,4,5], [1,4,5], [2,3,5,6,7,8]) ==     [1,4,5], \"You're Wrong\"\nassert     extract_index_list([1,2,3,4,5], [1,4,5], [2,3,5,6,7,8,9,10]) ==     [1,4,5], \"You're Wrong\"\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [2, 3, 4, 5, 6]) == [2, 3, 4, 5]\nassert     extract_index_list([1, 2, 3, 4], [2, 3, 4, 5, 6], [2, 3, 4, 5, 6]) == []\nassert     extract_index_list([1, 2, 3, 4], [2, 3, 4, 5, 6], [2, 3, 4]) == []\nassert     extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [2, 3, 4, 5]) == []\n\ndef get_list_length(lst):\n    '''\n    Write a function which returns the length of a list.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_index_list([1, 2], [1, 2], [1, 2]) == [1]\nassert     extract_index_list([1, 2], [1, 2], [1, 2, 2]) == []\nassert     extract_index_list([1, 2, 1], [1, 2], [1, 2, 1]) == []\nassert     extract_index_list([1, 2, 1], [1, 2], [1, 2, 2, 2]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 4, 5])) == [1, 3]\nprint(extract_index_list([1, 2], [2, 3], [2, 3, 4])) == []\nprint(extract_index_list([2, 3, 4], [2, 3, 4], [])) == []\nprint(extract_index_list([2, 3, 4], [2, 3, 4], [2, 3, 4, 5])) == []\nprint(extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 4, 5])) == [3]\nprint(extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 4])) == []\nprint(extract_index_list([1, 2], [2, 3], [2, 3, 4])) == []\n\n\n'''\nProgramming language questions\n\nQ1. What is a function definition?\n\nA function definition defines a set of instructions that are used to create an executable machine code representation of a function.\n\nThe definition is followed by a call to the function.\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_index_list([1,2,3,4,5], [3,4,5,6,7], [1,2,3,4,5]) == [1,4,5]\nassert     extract_index_list([1,2,3,4,5,6], [3,4,5,6,7], [1,2,3,4,5]) == [1,4,5]\nassert     extract_index_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14], [1,2,3,4,5,6,7,8,9,10,11,12,13,14], [1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [1,4,5,6,7,8]"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 3, 7], 'Wrong'\nassert     extract_index_list([5, 6, 7, 8, 9], [2, 3, 4], [5, 6, 7]) == [5, 7, 5], 'Wrong'\nassert     extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 3, 7], 'Wrong'\nassert     extract_index_list([5, 6, 7, 8, 9], [2, 3, 4], [5, 6, 7]) == [5, 7, 5], 'Wrong'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert second_smallest([-2, -5, 3, -5, 5, -3]) == 3\nassert second_smallest([-2, -5, 3, -5, 5, -3]) == -5\nassert second_smallest([-2, -5, 3, -5, 5, -3]) == -3\nassert second_smallest([-2, -5, 3, -5, 5, -3]) == -3\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     second_smallest([1,1,3,4,2,2]) == 3\nassert     second_smallest([1,1,2,3,4,2]) == 2\nassert     second_smallest([2,1,2,3,4,2]) == 2\nassert     second_smallest([2,1,2,3,4,2,10]) == 2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     second_smallest([2,1,2,1]) == 1\nassert     second_smallest([2,1,2,1,2]) == 1\nassert     second_smallest([-2,1,2,1,2,5]) == 1\nassert     second_smallest([-2,1,2,1,2,5,3]) == 3\nassert     second_smallest([-2,1,2,1,2,5,3,8]) == 3\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([-2,1,2,4,5]) == 2\nassert     second_smallest([-2,1,2,4,5,6]) == 4\nassert     second_smallest([-2,2,2,4,5]) == 2\nassert     second_smallest([1]) == 1\nassert     second_smallest([]) == None\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     second_smallest([1, 2, 3, 4, 5]) == 1\nassert second_smallest([1, 3, 5, 6, 8, 9, 100]) == 8\nassert second_smallest([1, 5, 8, 9, 100]) == 9\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     second_smallest([10,5,20,4,1]) == 1\nassert     second_smallest([5,3,1,10,100]) == 1\nassert     second_smallest([-2,-2,3,4,10,10]) == 4\nassert     second_smallest([]) == None\nassert     second_smallest([0,1,2,4,5,6]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef third_largest(numbers):\n    '''\n    Write a function to find the third largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one('ab') == True\nassert     text_match_zero_one('aba') == True\nassert     text_match_zero_one('a') == True\nassert     text_match_zero_one('aba') == True\nassert     text_match_zero_one('aa') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('ab') == True\nassert     text_match_zero_one('ba') == False\nassert     text_match_zero_one('ababbbabbbbabbbbabbbabbbbbbbbbbbbbbbb') == True\nassert     text_match_zero_one('abbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') == False\nassert     text_match_zero_one('ababbbabbbbbbbbb') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one('abbabba') == True\nassert text_match_zero_one('abbabab') == False\nassert text_match_zero_one('bbb') == False\nassert text_match_zero_one('a') == True\nassert text_match_zero_one('bbbba') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one('aab') == True\nassert     text_match_zero_one('aba') == True\nassert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('abb') == True\nassert     text_match_zero_one('b') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one('abbbbb') == True\nassert     text_match_zero_one('aabaaa') == False\nassert     text_match_zero_one('aaabaaa') == False\n\ndef text_match_zero_one_with_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one('aba') == True\nassert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('a') == True\nassert     text_match_zero_one('b') == True\nassert     text_match_zero_one('b') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert text_match_zero_one(\"abab\") == True\nassert text_match_zero_one(\"abb\") == True\nassert text_match_zero_one(\"aaab\") == False\nassert text_match_zero_one(\"\") == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_zero_one('a') == True\nassert     text_match_zero_one('abc') == False\nassert     text_match_zero_one('b') == True\nassert     text_match_zero_one('bb') == True\nassert     text_match_zero_one('bba') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one(\n        \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbababab\n    \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n    \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababAbaE\n    \"A simple query example that finds all numbers between 10 and 20 (inclusive) and doubles them in result\"\n    >>> big_query(\"A simple query example that finds all numbers between 10 and 20 (inclusive) and doubles them in result\")\n    {'query': 'A simple query example that finds all numbers between 10 and 20 (inclusive) and doubles them in result','result': {'numbers': [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one(\"ab\") == True, \"result should be true\"\nassert     text_match_zero_one(\"aa\") == True, \"result should be true\"\nassert     text_match_zero_one(\"a\") == True, \"result should be true\"\nassert     text_match_zero_one(\"bb\") == False, \"result should be false\"\nassert     text_match_zero_one(\"ababbbaa\") == True, \"result should be true\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_reverse_pairs([1,2,3,4,5,6,7]) == 2\nassert     count_reverse_pairs([1,2,3,4,5,6,7,8]) == 6\nassert     count_reverse_pairs([1,2,3,4,5,6,7,8,9]) == 4\nassert     count_reverse_pairs([1,2,3,4,5,6,7,8,9,10]) == 6\nassert     count_reverse_pairs([1,2,3,4,5,6,7,8,9,10,11]) == 8\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\n\nLet's take the above code and apply it to the following string list: ['abcd', 'cdea', 'edcb', 'abcc', 'dbca']\n\nabcd\ncdea\nedcb\nabcc\ndbca\n\nLet's then break this function and come to a way to count the number of strings in the string list which are reverse strings (reversed)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ntest_list = ['abc','abcd','abcd','bc']"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_reverse_pairs([]) == 0\nassert     count_reverse_pairs([1]) == 0\nassert     count_reverse_pairs([1,2,3]) == 1\nassert     count_reverse_pairs([1,2,3,4]) == 2\nassert     count_reverse_pairs([1,2,3,4,5]) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_reverse_pairs([]) == 0\nassert     count_reverse_pairs([\"a\",\"b\"]) == 0\nassert     count_reverse_pairs([\"a\",\"b\",\"c\"]) == 2\nassert     count_reverse_pairs([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) == 4\nassert     count_reverse_pairs([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]) == 5\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_reverse_pairs([\"shakuryu\", \"surya\", \"surya\", \"shakurya\"]) == 2, \"WRONG RESULT\"\n    count_reverse_pairs([\"surya\", \"shakuryu\"]) == 0, \"WRONG RESULT\"\n    count_reverse_pairs([\"shakuryu\"]) == 1, \"WRONG RESULT\"\n    count_reverse_pairs([\"shakuryu\", \"shakuryu\", \"shakuryu\", \"shakuryu\"]) == 4, \"WRONG RESULT"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_reverse_pairs([['cat','dog','tac'],['rat','mat'],['bat']]) == 2, \"Wrong Output\"\nassert     count_reverse_pairs([['cat','dog','tac'],['rat','mat'],['bat','apple']]) == 3, \"Wrong Output\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_reverse_pairs(['abc', 'dcb', 'cba']) == 2\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_lists(list1, list2):\n    '''\n    Write a function to sum two lists in a list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for x in list1:\n        t = tuple(x)\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_palindrome(word):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    A palindrome is a string that reads the same forwards as backwards\n    (e.g., madam, racecar, or nurses run).\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_strings(string1, string2):\n    '''\n    Write a function that takes as input two strings and return True if they are equal and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([1,2,2]) == {(1,2):2}\nassert     unique_sublists([1,2,3,2,2]) == {(1,2,3):1, (2,2):2}\nassert     unique_sublists([1,2,3,4,2,2]) == {(1,2,3,4):1, (2,2):2}\nassert     unique_sublists([1,2,3,4,5,3,2,1]) == {(1,2,3,4,5):1, (2,3,4):2, (3,):3, (1,):4, ():5}\n\nprint('All tests passed!'"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([1,2,3,4]) == {(1,1),(2,1),(3,1),(4,1)}\nassert     unique_sublists([1,1,2,3,4]) == {(1,2),(2,2),(3,2),(4,1)}\nassert     unique_sublists([1,2,2,2]) == {(1,2),(2,2)}\nassert     unique_sublists([1,1,2,2,2]) == {(1,2),(2,2),(2,2)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([]) == {(): 0}\nassert     unique_sublists([1]) == {(1,): 1}\nassert     unique_sublists([1,1,1]) == {(1,1): 2, (1,): 1, (): 1}\nassert     unique_sublists([1,1,1,2,2,2,2]) == {(1,1): 5, (1,): 2, (2,): 2, (2,2): 2, (): 1}\nassert     unique_sublists([1,1,1,2,2,2,2,2]) == {(1,1): 5, (1,): 3, (2,): 3, (2,2): 3, (): 2}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert unique_sublists([]) == {(): 0}\nassert unique_sublists([1, 1, 2, 3, 3]) == {(1, 1): 1, (1, 2): 1, (2, 3): 1, (3, 3): 1}\nassert unique_sublists([1, 1, 2, 3, 3, 4, 4]) == {(1, 1): 1, (1, 2): 1, (1, 3): 1, (1, 4): 1, (2, 3): 1, (2, 4): 1, (3, 3): 1, (3, 4): 1, (4, 4): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([]) == {(): 0}\nassert     unique_sublists([1,1,1,1]) == {(): 1, (1,): 1, (1,1): 1}\nassert     unique_sublists([1,2,3,4]) == {(): 1, (1,): 2, (1,2): 1, (1,3): 1, (1,4): 1, (2,): 2, (3,): 1, (4,): 1}\nassert     unique_sublists([1,1,1,2,2]) == {(): 1, (1,): 3, (1,1): 2, (1,2): 2, (2,): 2}\nassert     unique_sublists([]) == {(): 0}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_decimal('0') == True, \"Error\"\nassert     is_decimal('1') == True, \"Error\"\nassert     is_decimal('10') == True, \"Error\"\nassert     is_decimal('11') == False, \"Error\"\nassert     is_decimal('12') == False, \"Error\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_decimal('15.03') == True\nassert     is_decimal('0.03') == True\nassert     is_decimal('15.1') == False\nassert     is_decimal('1.3') == False\nassert     is_decimal('3.1') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_decimal(\"0.1\") == True, \"is_decimal(0.1) should return True\"\nassert     is_decimal(\"0.01\") == False, \"is_decimal(0.01) should return False\"\nassert     is_decimal(\"0.001\") == True, \"is_decimal(0.001) should return True\"\nassert     is_decimal(\"0.0001\") == True, \"is_decimal(0.0001) should return True\"\nassert     is_decimal(\"0.0000\") == True, \"is_decimal(0.0000) should return True\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_decimal_2(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_decimal('2.0') == True, '2.0 is wrong'\nassert     is_decimal('1.2') == False, '1.2 is wrong'\nassert     is_decimal('1.2') == False, '1.2 is wrong'\n\n\ndef is_integer(num):\n    '''\n    Write a function to check whether a given string is an integer number.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_decimal('0.1') == True\nassert     is_decimal('0.2') == False\nassert     is_decimal('0.1.2') == False\nassert     is_decimal('0.1.0') == False\nassert     is_decimal('1.0.0') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # function to test is_decimal\n    assert is_decimal(\"0\") == True\n    assert is_decimal(\"0.0\") == True\n    assert is_decimal(\"0.00\") == False\n    "
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint (unique_Element([1, 1, 1, 1]))\nprint (unique_Element([1, 2, 3, 4]))\nprint (unique_Element([1, 2, 1, 3, 4, 3, 2, 1]))\nprint (unique_Element([1, 2, 1, 2, 1]))\nprint (unique_Element([1, 1, 1, 1, 1]))\nprint (unique_Element([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\n'''\n\nProblem 2:\n\nWrite a python function to calculate the number of even and odd numbers in a list.\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_Element([1,2,3,4,5,6,7]) == True, \"test1 failed\"\nassert     unique_Element([3,2,4,5,2,4,5]) == False, \"test2 failed\"\nassert     unique_Element([1,2,3,4,5,6,7,8]) == True, \"test3 failed\"\nassert     unique_Element([1,1,1,1,1]) == True, \"test4 failed\"\nassert     unique_Element([1,1,1,1,1,1]) == False, \"test5 failed\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_Element([1,1,1,2,2,2])==True, \"Testcase 1 Failed\"\nassert unique_Element([1,2,2,1,2,1])==True, \"Testcase 2 Failed\"\nassert unique_Element([1,1,1,1])==False, \"Testcase 3 Failed\"\nassert unique_Element([])==True, \"Testcase 4 Failed\"\nassert unique_Element([1,2,3,4])==True, \"Testcase 5 Failed\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert unique_Element([1,2,3,4,5,2,3,4]) == False, \"Expected return False\"\nassert unique_Element([1,2,3,3,4,4]) == True, \"Expected return True\"\nassert unique_Element([]) == True, \"Expected return True\"\nassert unique_Element([1,2,3,3]) == False, \"Expected return False\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert unique_Element([1,2,3,4,4]) == True\nassert unique_Element([1,2,2,4,4]) == False\nassert unique_Element([1,2,3,4,5]) == False\nassert unique_Element([1,2,3,4]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert unique_Element([1,2,3,4,5,2]) == True, \"Duplicate element\"\nassert unique_Element([1,2,3,4,5]) == False, \"Duplicate element\"\nassert unique_Element([]) == True, \"Empty list\"\nassert unique_Element([1,2,1]) == False, \"Duplicate element\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_Element([1,2,3]) == True, 'Wrong Answer'\nassert     unique_Element([1,2,3,4]) == False, 'Wrong Answer'\nassert     unique_Element([1,2,3,1]) == True, 'Wrong Answer'\nassert     unique_Element([1,2,3,2]) == False, 'Wrong Answer'\nassert     unique_Element([1,2,3,1,2]) == False, 'Wrong Answer'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_Element([1,2,3,4,5]) == False, \" Test 1 failed\"\nassert     unique_Element([1,1,1,1,1]) == True, \" Test 2 failed\"\nassert     unique_Element([1,2,1,4,5]) == False, \" Test 3 failed\"\nassert     unique_Element([1,1,1,1,1,1]) == True, \" Test 4 failed\"\nassert     unique_Element([1,2,1,1,1,1]) == False, \" Test 5 failed\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([]) == False, \"Case 1: Empty list\"\nassert     unique_Element([1,1,1,2,3,4,5]) == True, \"Case 2: No duplicate elements\"\nassert     unique_Element([1,1,1,2,2,3,4,4,5]) == False, \"Case 3: Duplicate elements\"\nassert     unique_Element([1,1,1,2,2,3,3,4,4,4,4,4,5]) == False, \"Case 4: Duplicate elements\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumber_number(12) == False\nassert check_monthnumber_number(3) == True\nassert check_monthnumber_number(2) == True\nassert check_monthnumber_number(1) == False"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(3) == False, \"Wrong answer - Correct answer\"\nassert     check_monthnumber_number(1) == True, \"Wrong answer - Correct answer\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(13) == False\nassert     check_monthnumber_number(20) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(5) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(2) == False, \"Should be False\"\nassert     check_monthnumber_number(1) == True, \"Should be True\"\nassert     check_monthnumber_number(3) == False, \"Should be False\"\nassert     check_monthnumber_number(4) == True, \"Should be True\"\nassert     check_monthnumber_number(5) == False, \"Should be False\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(1) == False\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(33) == False\nassert     check_monthnumber_number(25) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(15) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    check_monthnumber_number(1) == True\n    check_monthnumber_number(5) == False\n    check_monthnumber_number(30) == True\n    check_monthnumber_number(5) == False\n    check_monthnumber_number(31) == True\n    check_monthnumber_number(2) == False\n\ndef check_leap_year(year):\n    '''\n    Write a function that returns whether the given year is a leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(10) == False\nassert     check_monthnumber_number(16) == True\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_min_diff([1,3,2,4,6,2,3], 6) == 2, \"Wrong output\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_min_diff([1,3,6,10], 2) == 3\n    find_min_diff([1,3,6,10], 5) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_min_diff([1,2,3,4],4) == 1\nassert     find_min_diff([1,2,3,4],5) == 2\nassert     find_min_diff([5,4,3,2,1],2) == 1"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_min_diff([-2,-1,3,5],2) == 2, 'NOPE!'\nassert     find_min_diff([-2,-1,3,5],5) == 3, 'NOPE!'\nassert     find_min_diff([-2,-1,3,5],2) == 2, 'NOPE!'\nassert     find_min_diff([-2,-1,3,5],2) == 2, 'NOPE!'\nassert     find_min_diff([-2,-1,3,5],5) == 3, 'NOPE!'\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \narr = [4,3,2]\nassert find_min_diff(arr,len(arr)) == 1\narr = [2,4,1,3]\nassert find_min_diff(arr,len(arr)) == -1\narr = [4,3,2]\nassert find_min_diff(arr,len(arr)) == 1\narr = [4,3,2]\nassert find_min_diff(arr,len(arr)) == 1\narr = [1,2,3,4,5]\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_min_diff([0, 10, -5, 2, 7, -1, 15, 12, 9, -2], 7) == 1, 'WRONG'\nassert     find_min_diff([-1, 4, -2, -3, -4, -5, -6, -7], 5) == -3, 'WRONG'\nassert     find_min_diff([], -1) == -1, 'WRONG'\nassert     find_min_diff([], 1) == -1, 'WRONG'\nassert     find_min_diff([1,1,1,1],1) == 1, 'WRONG'\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_min_diff([10,30,50,70,90,100,110,120,130,140,150,160,170,180],16) == 60\n\nassert     find_min_diff([10,30,50,70,90,100,110,120,130,140,150,160,170,180],7) == 10\n\nassert     find_min_diff([10,30,50,70,90,100,110,120,130,140,150,160,170,180],60) == 60\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_ctr('A1B2C3D') == 5\nassert     number_ctr('A1B2C3D') == 5\nassert     number_ctr('A1B2C3D') == 6\nassert     number_ctr('A1B2C3D') == 6\nassert     number_ctr('A1B2C3D') == 7\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_ctr(\"1\") == 1\nassert number_ctr(\"11\") == 2\nassert number_ctr(\"1a\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr(\"12345\") == 6, \"Wrong Answer\"\nassert     number_ctr(\"1234567\") == 6, \"Wrong Answer\"\nassert     number_ctr(\"123456789\") == 9, \"Wrong Answer\"\n\ndef longest_common_prefix(str_list):\n    '''\n    Write a python function to find the longest common prefix in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_ctr('12345678') == 8\nassert     number_ctr('234') == 4\nassert     number_ctr('-3.2') == 6\nassert     number_ctr('1.23') == 4\nassert     number_ctr('') == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef read_samples(file_path):\n    '''\n    Write a python function to read data from file and return it.\n    Input:\n        file_path: path to the file\n    Output:\n        return a list of tuples of records\n        Sample records:\n            (1,2,3,4)\n            (1,2,3,4)\n    Hint: Use readlines() method.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_ctr('python101') == 1,    \"test 1 failed\"\nassert     number_ctr('welcome_to_python_world') == 3,    \"test 2 failed\"\nassert     number_ctr('41234567') == 1,    \"test 3 failed\"\nassert     number_ctr('12345678') == 0,    \"test 4 failed\"\nassert     number_ctr('') == 0,    \"test 5 failed\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr('2') == 1\nassert     number_ctr('123') == 3\nassert     number_ctr('12345') == 5\nassert     number_ctr('123456') == 6\nassert     number_ctr('1234567') == 7\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr('Python') == 5, 'fails'\nassert     number_ctr('1234567890') == 10, 'fails'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr(str = '0') == 0\nassert     number_ctr(str = '1') == 1\nassert     number_ctr(str = '1234567') == 7\nassert     number_ctr(str = '1a') == 1\nassert     number_ctr(str = '1_a') == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef maximum(l):\n    '''\n    Write a function that returns maximum value in an array.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_polite(4) == 13, \"nth polite num is not as expected\"\nassert     is_polite(5) == 17, \"nth polite num is not as expected\"\n\ndef is_polite_again(n): \n    '''\n    Write a function to find nth polite number. \n    Idea: Start with the last digit of the number and shift it n times. \n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(is_polite(4))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_polite(2) == -1, 'Please fix the code to pass this test.'\nassert     is_polite(3) == -1, 'Please fix the code to pass this test.'\nassert     is_polite(5) == -1, 'Please fix the code to pass this test.'\nassert     is_polite(10) == 2, 'Please fix the code to pass this test.'\nassert     is_polite(7) == -1, 'Please fix the code to pass this test.'\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_polite(5) == 6\nassert     is_polite(10) == 9\nassert     is_polite(50) == 49\nassert     is_polite(100) == 99\nassert     is_polite(200) == 199\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_polite(2) == True, \"TEST 2\"\nassert     is_polite(5) == False, \"TEST 3\"\nassert     is_polite(10) == True, \"TEST 4\"\nassert     is_polite(15) == False, \"TEST 5\"\nassert     is_polite(20) == True, \"TEST 6\"\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    for i in range(1, 1001):\n        print(is_polite(i), i)\n\n\ndef gcd(m, n): \n    '''\n    Write a function to find the GCD of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_polite_alternative(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return math.ceil(math.sqrt(n) + math.sqrt(n + 1))\n\n\n\ndef is_even(n):\n    '''\n    Write a function to find nth even number. geeksforgeeks.org/n-th-even-number/\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_polite(1) == -1\nassert     is_polite(2) ==  1\nassert     is_polite(3) ==  2\nassert     is_polite(4) ==  3\nassert     is_polite(5) ==  4\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_polite(1) == False\nassert     is_polite(2) == False\nassert     is_polite(3) == True\nassert     is_polite(4) == True\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_wise([1,2,3,4,5]) == [[1,2], [2,3], [3,4], [4,5]]     # ans = [[1,2], [2,3], [3,4], [4,5]]\nassert     pair_wise([1,1,1,1]) == [[1,1], [1,1], [1,1], [1,1]]     # ans = [[1,1], [1,1], [1,1], [1,1]]\nassert     pair_wise([1,2,1,2,1,2,1,2,1,2]) == [[1,2], [2,1], [1,2], [2,1]]     # ans = [[1,2], [2,1], [1,2], [2,1]]\nassert     pair_wise([]) == []     # ans = []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_wise([1,2,3,4,5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([0,1,2,3,4]) == [[0, 1], [1, 2], [2, 3], [3, 4]]\nassert     pair_wise([0,1,2,3,4,5,6,7,8,9,10]) == [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]\nassert     pair_wise([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39], [39, 40], [40, 41], [41, 42], [42, 43], [43, 44], [44, 45], [45, 46], [46, 47], [47, 48], [48, 49], [49, 50], [50, 51], [51, 52], [52, 53], [53, 54], [54, 55], [55, 56], [56, 57], [57, 58], [58, 59], [59, 60], [60, 61], [61, 62], [62, 63], [63, 64], [64, 65], [65, 66], [66, 67], [67, 68], [68, 69], [69, 70], [70, 71], [71, 72], [72, 73], [73, 74], [74, 75], [75, 76], [76, 77], [77, 78], [78, 79], [79, 80], [80, 81], [81, 82], [82, 83], [83, 84], [84, 85], [85, 86], [86, 87], [87, 88], [88, 89], [89, 90], [90, 91], [91, 92], [92, 93], [93, 94], [94, 95], [95, 96], [96, 97], [97, 98], [98, 99], [99, 100]]\n\ndef map_func(func, lst):\n    '''\n    Write a function map_func that applies func to each element of lst\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert     pair_wise([1, 1, 2, 2]) == [[1, 1], [1, 2], [2, 2]]\nassert     pair_wise([1, 2, 2, 3]) == [[1, 2], [2, 3]]\nassert     pair_wise([1, 3, 2, 4]) == [[1, 2], [3, 4]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert     pair_wise([1, 2, 3, 4, 5, 6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\nassert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([]) == []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_wise([]) == []\nassert pair_wise([1]) == [(1, 2)]\nassert pair_wise([1, 2]) == [(1, 2)]\nassert pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]\nassert pair_wise([2, 3, 4]) == [(2, 3), (3, 4)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert pair_wise([1,2,3,4]) == [[1,2],[2,3],[3,4]]\nassert pair_wise([1,2,3,4,5]) == [[1,2],[2,3],[3,4],[4,5]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert     pair_wise([1, 2, 3, 4, 5, 6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef pair_wise_recursive(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n\nassert\n\ndef pair_wise_recursive(l1):\n    if l1 == []:\n        return [[]]\n    else:\n        sublists = pair_wise_recursive(l1[1:])\n        return sublists + [[l1[0]] + k for k in sublists]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_pairs_count([10, 20, 10, 30, 10], 40) == 2\nassert     get_pairs_count([1, 2, 3, 4, 5], 6) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_pairs_count_with_twos(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_pairs_count([1, 5, 9, 1], 10) == 2\nassert     get_pairs_count([1, 5, 9, 1], 4) == 0\nassert     get_pairs_count([1, 5, 9, 1], 5) == 1\nassert     get_pairs_count([1, 5, 9, 1], 2) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_pairs_count([10,11,12,13], 15) == 2, \"Wrong result\"\nassert     get_pairs_count([1,2,3,4,5,6], 9) == 0, \"Wrong result\"\nassert     get_pairs_count([10,11,12,13], -6) == 0, \"Wrong result\"\n\nprint(\"Hurray!!! you have passed all test cases\""
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_pairs_count([], 0) == 0\nassert     get_pairs_count([], 5) == 0\nassert     get_pairs_count([1, 3], 5) == 0\nassert     get_pairs_count([1, 3], 3) == 2\nassert     get_pairs_count([1, 3, 2], 3) == 2\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6, 7]\n    sum = 11\n    print(\"The number of pairs who have sum = 11 are:\", get_pairs_count(arr, sum))\n    print(\"The number of pairs who have sum = 10 are:\", get_pairs_count(arr, 10))\n    print(\"The number of pairs who have sum = 8 are:\", get_pairs_count(arr, 8))\n    print(\"The number of pairs who have sum = 20 are:\", get_pairs_count(arr, 20)"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # one pass solution\n    if len(arr) < 2:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Diff(['a','b','c'],[0,1,2]) == {'a':1,'b':1,'c':1}, 'Diff'\nassert     Diff([0,1,2],['a','b','c']) == {'a':1,'b':1,'c':1}, 'Diff'\nassert     Diff([1,2],['a','b','c']) == {'a':1,'b':2,'c':2}, 'Diff'\nassert     Diff([1,2,3],['a','b','c']) == {'a':1,'b':2,'c':3}, 'Diff'\nassert     Diff([0,0,0],['a','b','c']) == {'a':0,'b':0,'c':0}, 'Diff'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Diff([1,2,3],[2])     ==    [3]\nassert     Diff([1,2,3,4],[3])     ==    [1,2,4]\nassert     Diff([1,2,3],[2,3])     ==    [1,2]\nassert     Diff([2,2,2,2],[2])     ==    [2]\nassert     Diff([1,2,3,4],[1,2,3])     ==    [4]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Diff([1,3,5,6,7,9],[4,5,6,7,8,10]) == [1,2,3,4,5,7], \"Your code is Wrong\"\nassert     Diff([1,3,5,6,7,9],[4,5,6,7,8,10],1) == [2], \"Your code is Wrong\"\nassert     Diff([1,3,5,6,7,9],[4,5,6,7,8,10],2) == [1,2,3,4,5,7], \"Your code is Wrong\"\nassert     Diff([1,3,5,6,7,9],[4,5,6,7,8,10],3) == [], \"Your code is Wrong\"\nassert     Diff([1,3,5,6,7,9],[4,5,6,7,8,10],4) == [1,2,3,4,5,7], \"Your code is Wrong\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Diff([1,2,3],[4,5,6]) == [[4,5,6]]\nassert     Diff([1,2,3,4],[4,5,6,7]) == [[4,5,6],[4,5,6,7]]\nassert     Diff([],[1,2,3]) == [[1,2,3]]\nassert     Diff([1,2,3],[]) == [[1,2,3]]\nassert     Diff([1,2,3],[1,2,3]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Diff([1,2,3,4,5,6,7,8],[1,2,3,4,7,8,9]) == \n    [5,6,7]\nassert     Diff([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9]) == \n    [5,6,7,8]\nassert     Diff([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9]) == \n    [5,6,7,8,9]\nassert     Diff([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9,10]) == \n    [5,6,7,8,9,10]\nassert     Diff([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9]) == \n    [5,6,7,8]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nli1 = [1,2,3,4,5]\nli2 = [-1,-2,-3,-4,-5]\n\nassert Diff(li1,li2) == 4\n\nli1 = ['m','a','n','s']\nli2 = ['m','s']\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li2:\n        if i not in li1:\n            diff.append(i)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Diff([1,2,3], [4,5]) == [1,2], \"Diff should return a list of integers\"\nassert     Diff([1,2,3,4,5], [1,2,3,4,5]) == [], \"Diff should return an empty list if the lists are equal\"\nassert     Diff([1,2,3,4], [5,6,7]) == [1,2,3], \"Diff should return an empty list if the first list is shorter than the second list\"\nassert     Diff([1,2], [5,6,7]) == [1,2], \"Diff should return an empty list if the second list is shorter than the first list\"\nassert     Diff([1,2,3,4,5,6], [1,2,3,4,5]) == [6], \"Diff should return an empty list if the second list is shorter than the first list\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Diff([1,2,3],['one','two','three']) == ['one','two']\nassert     Diff([1,2,3],['one','two','three','four']) == []\nassert     Diff([1,2,3,4],['one','two','three','four']) == ['one','two']\nassert     Diff([1,2,3,4,5],['one','two','three','four']) == ['one','two','three','four']\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Diff([],[]    ) == [] \nassert     Diff([1,2,3], [1,2,3]) == []\nassert     Diff([1,2], [1,2,3]) == [1,2]\nassert     Diff([2,3,4], [2,2,3]) == [4,3]\nassert     Diff([2,2,3], [2,2,3]) == []\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_num_sum(5) == 5\nassert     odd_num_sum(6) == 30\nassert     odd_num_sum(10) == 385\nassert     odd_num_sum(9) == 745\nassert     odd_num_sum(0) == 0\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert odd_num_sum(1) == 0 \nassert odd_num_sum(2) == 1\nassert odd_num_sum(3) == 2\nassert odd_num_sum(4) == 3\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_num_sum(10) == 9, \"Unexpected result\"\nassert     odd_num_sum(20) == 33, \"Unexpected result\"\nassert     odd_num_sum(30) == 661, \"Unexpected result\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_num_sum(1) == 0\nassert     odd_num_sum(5) == 4\nassert     odd_num_sum(100) == 816\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(5) == 45\nassert     odd_num_sum(6) == 66\nassert     odd_num_sum(7) == 91\nassert odd_num_sum(8) == 144\nassert odd_num_sum(9) == 198\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_num_sum(10) == 0\nassert odd_num_sum(11) == 9\nassert odd_num_sum(0) == 0\nassert odd_num_sum(3) == 9\nassert odd_num_sum(100) == 255"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_even_sum(n) :\n    '''\n    Write a python function to find the sum of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_num_sum(4) == 32,'should return 32'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_num_sum(5) == 32\nassert odd_num_sum(10) == 100\nassert odd_num_sum(15) == 164\nassert odd_num_sum(16) == 128\nassert odd_num_sum(17) == 164\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression(\"((()))\") == True, \"First\"\nassert     check_expression(\"(((()))\") == False, \"Second\"\nassert     check_expression(\"(((()))))\") == False, \"Third\"\nassert     check_expression(\"((((()))))\") == False, \"Fourth\"\nassert     check_expression(\"((((()))))\") == False, \"Fifth\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_expression('(1+1)')==True, \"false\"\nassert check_expression('((1+2)*3)-4')==True, \"false\"\nassert check_expression('((1+2)*3)-4')==True, \"false\"\nassert check_expression('((1+2)*3)-4')==True, \"false\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_expression('(((a+b)*c)/d)+((e+f)*g)') == False\nassert     check_expression('((((a+b)*c)+d)*e)') == False\nassert     check_expression('((a+b)*((c+d)*e)') == False\nassert     check_expression('((((a+b)*(c+d))*e)*f)') == False\nassert     check_expression('((((a+b)*(c+d))*e)*(f+g))') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_expression('(a+b)*(a+c)*(b+c)') == 'Correct'\nassert     check_expression('a+b+c+d') == 'Correct'\nassert     check_expression('a+b+c') == 'Correct'\nassert     check_expression('a+b+c+d') == 'Correct'\nassert     check_expression('a+b+c') == 'Correct'\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_expression(\"(1+2)*(3-4)\") == True, \"Should be true\"\nassert     check_expression(\"(1+2)*(3-4))\") == False, \"Should be false\"\nassert     check_expression(\"1-1\") == True, \"Should be true\"\nassert     check_expression(\"1-1)\") == False, \"Should be false\"\n\ndef is_digit(ch):\n    '''\n    Write a function to check if the given character is digit or not.\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_expression(\"{}\") == True\nassert check_expression(\"{}()\") == True\nassert check_expression(\"({}())\") == True\nassert check_expression(\"({})\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef push(stack,element):\n    '''\n    Write a function to push an element into an stack. https://www.geeksforgeeks.org/how-to-push-element-to-stack-in-python/\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    check_expression(\"\") == 0\n    check_expression(\"A\") == 1\n    check_expression(\"(A)\") == 2\n    check_expression(\"(A)(\") == 3\n    check_expression(\"((A)(\") == 4\n    check_expression(\"A\") == 1\n    check_expression(\"(A)\") == 2\n    check_expression(\"A(\") == 3\n    check_expression(\"A)\") == 4\n    check_expression(\"A)()\") == 5\n    check_expression(\"((A)())\") == 6\n    check_expression(\"A()()(\") == 7\n    check_expression(\"A)(\") == 2\n    check_expression(\"(A)()\") == 3\n    check_expression(\"(A)()(\") == 4\n    check_expression(\"(((A))\") == 5\n    check_expression(\"A()()()()\") == 6\n    check_expression(\"()()(\") == 2\n    check_expression(\"(()()\") == 3\n    check_expression(\"(()())\") == 4\n    check_expression(\"()((\") == 5\n    check_expression(\"()())\") == 6\n    check_expression(\"()())()\") == 7\n    check_expression(\"(())\") == 2\n    check_expression(\"(()())\") == 3\n    check_expression(\"(((A))\") == 5\n    check_expression(\"(())\") == 2\n    check_expression(\"())\") == 3\n    check_expression(\"()(()\") == 4\n    check_expression(\"())\") == 2\n    check_expression(\"(())()(\") == 6\n    check_expression(\"(A)((A))\") == 3\n    check_expression(\"(A(A))(\") == 4\n    check_expression(\"(A(A))(())\") == 6\n    check_expression(\"()(()(\") == 4\n    check_expression(\"(())(()\") == 3\n    check_expression(\"(())(()(\") == 6\n    check_expression(\"((A)(A)())()\") == 6\n    check_expression(\"(A(A))())\") == 3\n    check_expression(\"((A(A))())()\") == 6\n    check_expression(\"(A(A))(A(A))\") == 4\n    check_expression(\"(A(A))(A(A)(A))\") == 4\n    check_expression(\"(A(A))(A(A(A))())\") == 6\n    check_expression(\"()(()()\") == 4\n    check_expression(\"()(()())\") == 5\n    check_expression(\"()((()))\") == 5\n    check_expression(\"(())(()()())\") == 9\n    check_expression(\"A(A)()()(A)()\") == 3\n    check_expression(\"(A(A)()())((A(A)()()))\") == 8\n    check_expression(\"(A(A)()())((A(A)()())(A(A)()()))\") == 14\n    check_expression(\"(A(A)(A(A))(A(A)(A(A)()))(A(A)(A(A)))()(A(A)(A(A)())(A(A)()(A(A)()()))\") == 26\n    check_expression(\"()(((A()))()\") == 4\n    check_expression(\"()(A())(A())(A()(A()()))\") == 9\n    check_expression(\"()(A)(A(A))()()(A(A)(A(A))()(A))\") == 16\n    check_expression(\"A(A(A))(A(A(A)))()\") == 3\n    check_expression(\"(A)(A(A(A)))()\") == 3\n    check_expression(\"(A)(A(A(A)))()(A)(A(A(A)))()\") == 10\n    check_expression(\"(A)((A))()()(A)((A))()\") == 14\n    check_expression(\"A(A(A(A))(A(A(A))())(A(A(A))())()(A(A(A)())(A(A(A))))(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))))\") == 17\n    check_expression(\"(A)((A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"(A)((A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"(A)((A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"A(A(A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"A(A(A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"A(A(A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"A(A(A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"A(A(A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"A(A(A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"A(A(A(A(A))(A(A(A))())(A(A(A))())())(A(A(A(A))(A(A(A)()())))(A(A(A(A))(A(A(A)())))(A(A(A(A))(A(A(A)())))))\") == 26\n    check_expression(\"A(A(A(A(A))(A(A(A))())(A(A(A))())())(A(A("
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nremove_length(\"kappa\", 5) == \"a\"\nremove_length(\"kappa\", 6) == \"p\"\nremove_length(\"kappa\", 7) == \"\""
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    #test remove_length function\n    print('[*] Testing remove_length function')\n    test_cases = ['', 'abcde', 'abcdefghijklmnopqrstuvwxyz', 'a', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length('my name is john and i am 26 years old', 1) =='my name is john and i am 26'\nassert     remove_length('my name is john and i am 26 years old', 2) =='my name is john and i am'\nassert     remove_length('my name is john and i am 26 years old', 3) =='my name is john'\nassert     remove_length('my name is john and i am 26 years old', 4) =='my name is john'\nassert     remove_length('my name is john and i am 26 years old', 5) =='my name is john'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_length(\"hiimana\", 3) == \"hi\"\nassert     remove_length(\"hiimana\", 2) == \"hi\"\nassert     remove_length(\"hiimana\", 1) == \"hi\"\nassert     remove_length(\"hiimana\", 0) == \"hiimana\"\nassert     remove_length(\"hiimana\", 4) == \"hi\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_length('the quick brown fox jumped over the lazy dog', 3) == 'the quick brown fox jumped', \\\n\"Test Failed\"\nassert     remove_length('the quick brown fox jumped over the lazy dog', 4) == 'the quick brown fox', \\\n\"Test Failed\"\nassert     remove_length('the quick brown fox jumped over the lazy dog', 5) == 'the quick brown fox jumped', \\\n\"Test Failed\"\nassert     remove_length('the quick brown fox jumped over the lazy dog', 6) == 'the quick brown fox', \\\n\"Test Failed\"\nassert     remove_length('the quick brown fox jumped over the lazy dog', 7) == 'the quick brown', \\\n\"Test Failed\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_length(\"AaBbcCdEe\", 2) == \"AbCdEe\"\n\nassert remove_length(\"aabaac\", 2) == \"abac\"\n\nassert remove_length(\"Kitten\", 2) == \"Kiten\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_length(\"hello world\", 1) == \"hllw\"\nassert     remove_length(\"hello world\", 2) == \"hllw\"\nassert     remove_length(\"hello world\", 3) == \"hllw\"\nassert     remove_length(\"hello world\", 4) == \"hllw\"\nassert     remove_length(\"hello world\", 5) == \"hllw\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert remove_length('', 0) == ''\nassert remove_length('', 1) == ''\nassert remove_length('hello', 2) == 'ell'\nassert remove_length('hello', 3) == 'ell'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_length(\"i am apple\", 2) == \"am apple\"\nassert     remove_length(\"i am a apple\", 2) == \"i am\"\nassert     remove_length(\"apple\", 2) == \"\"\nassert     remove_length(\"hello world!\", 5) == \"hello world\"\n\ndef remove_length_v2(s, k):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     occurance_substring(\"aabacabac\",\"a\") == (\"a\",0)\nassert     occurance_substring(\"babacabac\",\"a\") == None\nassert     occurance_substring(\"abababab\",\"a\") == (\"a\",0)\nassert     occurance_substring(\"abababab\",\"b\") == (\"b\",1)\nassert     occurance_substring(\"abababab\",\"c\") == (\"c\",2)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     occurance_substring('aaaa', 'aa') == None\nassert    occurance_substring('aaaa', 'a') == ('a', 0)\nassert    occurance_substring('aaaa', 'aa') == ('a', 1)\nassert    occurance_substring('aaaa', 'a') == ('a', 2)\nassert    occurance_substring('aaaa', 'aa') == ('a', 3)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     occurance_substring('aaabaaaaabaaaaabaaaaaabbbaa', 'bba') == (4,4)\nassert occurance_substring('aaabaaaaabaaaaabaaaaaabbbaa', 'aaaa') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     occurance_substring('ababab', 'ab') == (1,4)\nassert     occurance_substring('ababab', 'ba') == None\nassert     occurance_substring('ababab', 'baa') == (2,6)\nassert     occurance_substring('ababab', 'a') == None\nassert     occurance_substring('ababab', 'aa') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     occurance_substring('abcdcdaabcdcd', 'abcd') is None\nassert     occurance_substring('abcdcdaabcdcd', 'abcdc') == (1,3)\nassert     occurance_substring('abcdcdaabcdcd', 'abcde') == (0,6)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     occurance_substring( \"takoyama\", \"ama\") ==    (\"takoyama\",\"0\",\"1\")\nassert    occurance_substring( \"takoyama\", \"koyama\") ==    None\nassert    occurance_substring( \"takoyama\", \"koyam\") ==    None\nassert    occurance_substring( \"takoyama\", \"takoy\") ==    None\nassert    occurance_substring( \"takoyama\", \"yama\") ==    None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring('abcd','bc') == None\nassert occurance_substring('abbababc','bc') == (0,4)\nassert occurance_substring('abbababc','abc') == (1,2)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not occurance_substring(\"aaabaaaa\",\"aaa\")\nassert not occurance_substring(\"aaabaaaa\",\"aaa\")\n\ndef smallest_substring_start_index(string,substring):\n    '''\n    Write a function to find the smallest substring which starts with a specific pattern.\n    Return the length of the substring if it does not exist.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     occurance_substring(\"\", \"\") == None, \"occurance_substring() must return None\"\nassert    occurance_substring(\"\", \"ABC\") == None, \"occurance_substring() must return None\"\nassert    occurance_substring(\"ABC\", \"\") == None, \"occurance_substring() must return None\"\nassert    occurance_substring(\"ABC\", \"ABC\") == \"ABC\", \"occurance_substring() must return 'ABC'\"\nassert    occurance_substring(\"ABC\", \"ABC\") == \"ABC\", \"occurance_substring() must return 'ABC'\"\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     occurance_substring(\"ababaacd\", \"ac\") == None\nassert     occurance_substring(\"ababaacd\", \"ac\") == None\nassert     occurance_substring(\"ababaacd\", \"bc\") == None\nassert     occurance_substring(\"ababaacd\", \"bc\") == None\nassert     occurance_substring(\"ababaacd\", \"ad\") == None\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_position([1, 2, 3, 4, 5, 6, 7, 8, 9])\nodd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nodd_position([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether given number is palindrome or not.\n    '''\n    pass"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_position([10, 20, 30, 40, 50, 60]) == True, \"Test case 1 Failed\"\nassert     odd_position([10, 20, 30, 40, 50, 60, 70]) == False, \"Test case 2 Failed\"\nassert     odd_position([1, 2, 3, 4, 5, 6]) == False, \"Test case 3 Failed\"\nassert     odd_position([10, 20, 30, 40, 50, 60, 60]) == False, \"Test case 4 Failed\"\nassert     odd_position([1, 1, 1, 1, 1, 1, 1]) == True, \"Test case 5 Failed\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_position([1,2,3,4]) == False, \"wrong output\"\nassert     odd_position([0,1,2,3,4]) == False, \"wrong output\"\nassert     odd_position([-1,-2,-3,-4,-5]) == False, \"wrong output\"\nassert     odd_position([]) == False, \"wrong output\"\nassert odd_position([1,2,3,4,5,6,7]) == True, \"wrong output\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_position([1,2,3,4,5,6,7,8,9]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9,10]) == False\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_position([1,2,3,4,5]) == False\nodd_position([2,3,1,5,9,8,7]) == False\nodd_position([3,2,4]) == False\nodd_position([1,2,3,4,5,6]) == True\nodd_position([2,3,1,5,9,8,7,6]) == True\nodd_position([1,1,1,1,1,1,1,1]) == True\nodd_position([2,3,4,1,5,6,7,8]) == False\nodd_position([2,3,4,5,1,6,7,8]) == True\nodd_position([1,2,3,4,5,6,7,8,9]) == False\nodd_position([2,3,4,5,6,7,8,9,10]) == True\nodd_position([1,2,3,4,5,6,7,8,9,10,11]) == False\nodd_position([2,3,4,5,6,7,8,9,10,11,12]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == False\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == False\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == True\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == False\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == False\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == False\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == True\nodd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == False\nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,3"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12])==True, \"Wrong answer\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13])==False, \"Wrong answer\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14])==True, \"Wrong answer\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])==False, \"Wrong answer\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])==True, \"Wrong answer\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_position([2,3,4,5,6,7]) == True, 'Should return True.'\nassert     odd_position([2,3,4,4,4,6]) == True, 'Should return True.'\nassert     odd_position([2,3,4,4,4,4,6,2,3,4,5,6,7,8,9,9]) == True, 'Should return True.'\nassert     odd_position([2,3,4,4,4,6,2,3,4,5,6,7,8,9,9]) == True, 'Should return True.'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True\n    odd_position([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]) == False\n    odd_position([-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == False\n    odd_position([-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == False\n\ndef odd_position_indices(nums):\n    '''\n    Write a python function to find the indices of every odd index of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_vowels('abcea') == 3\nassert     count_vowels('abcc') == 2\nassert     count_vowels('abcd') == 0\nassert     count_vowels('kajak') == 0\nassert     count_vowels('kk') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_vowels('sunday') == 3\nassert     count_vowels('rose') == 1\nassert     count_vowels('tiger') == 2\nassert     count_vowels('yoyo') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_vowels('google') == 3, \"Should be 3\"\nassert     count_vowels('codewars') == 4, \"Should be 4\"\nassert     count_vowels('abracadabra') == 5, \"Should be 5\"\nassert     count_vowels('abracadabra') == 5, \"Should be 5\"\nassert     count_vowels('abracadabra') == 5, \"Should be 5\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_vowels('abcd') == 2\nassert     count_vowels('aabcd') == 2\nassert     count_vowels('bcb') == 0\nassert     count_vowels('a') == 1\nassert     count_vowels('ab') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_vowels('this is a test') == 3, 'Test 1 Failed'\nassert     count_vowels('we are friends') == 2, 'Test 2 Failed'\nassert     count_vowels('we are friends.') == 2, 'Test 3 Failed'\nassert     count_vowels('hi my name is james') == 0, 'Test 4 Failed'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels(\"hello world!\") == 5\nassert     count_vowels(\"hieeelalaooo\") == 5\nassert     count_vowels(\"AaAa\") == 0\nassert     count_vowels(\"\") == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels('abaccdd') == 5\nassert     count_vowels('abc') == 0\nassert     count_vowels('qwerty') == 0\nassert     count_vowels('ddd') == 3\nassert     count_vowels('d') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    count_vowels('aaea') == 1\n    count_vowels('ae') == 1\n    count_vowels('abac') == 3\n    count_vowels('abcc') == 3\n    count_vowels('abcd') == 0\n    count_vowels('abccdd') == 2\n    count_vowels('aaabccdd') == 2\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    count_vowels('abcdefghijklmnopqrstuvwxyzasdfghjklm') == 34\n    count_vowels('aaea') == 1\n    count_vowels('abac') == 3\n    count_vowels('abcc') == 3\n    count_vowels('abcd') == 0\n    count_vowels('abccdd') == 2\n    count_vowels('aaabccdd') == 2\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    count_vowels('abcdefghijklmnopqrstuvwxyzasdfghjklm') == 34\n    count_vowels('aae') == 1\n    count_vowels('abca') == 1\n    count_vowels('aabc') == 1\n    count_vowels('abcb') == 1\n    count_vowels('abb') == 1\n    count_vowels('aabb') == 2\n    count_vowels('abcd') == 0\n    count_vowels('abcdd') == 1\n    count_vowels('aaabccdd') == 2\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    count_vowels('abcdefghijklmnopqrstuvwxyzasdfghjklm') == 34\n    count_vowels('aae') == 1\n    count_vowels('abca') == 1\n    count_vowels('aabc') == 1\n    count_vowels('abcb') == 1\n    count_vowels('abb') == 1\n    count_vowels('aabb') == 2\n    count_vowels('abcd') == 0\n    count_vowels('abcdd') == 1\n    count_vowels('aaabccdd') == 2\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    count_vowels('abcdefghijklmnopqrstuvwxyzasdfghjklm') == 34\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    count_vowels('abcdefghijklmnopqrstuvwxyzasdfghjklm') == 34\n    count_vowels('aae') == 1\n    count_vowels('abca') == 1\n    count_vowels('aabc') == 1\n    count_vowels('abcb') == 1\n    count_vowels('abb') == 1\n    count_vowels('aabb') == 2\n    count_vowels('abcd') == 0\n    count_vowels('abcdd') == 1\n    count_vowels('aaabccdd') == 2\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    count_vowels('abcdefghijklmnopqrstuvwxyzasdfghjklm') == 34\n    count_vowels('aae') == 1\n    count_vowels('abca') == 1\n    count_vowels('aabc') == 1\n    count_vowels('abcb') == 1\n    count_vowels('abb') == 1\n    count_vowels('aabb') == 2\n    count_vowels('abcd') == 0\n    count_vowels('abcdd') == 1\n    count_vowels('aaabccdd') == 2\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    count_vowels('abcdefghijklmnopqrstuvwxyzasdfghjklm') == 34\n    count_vowels('aae') == 1\n    count_vowels('abca') == 1\n    count_vowels('aabc') == 1\n    count_vowels('abcb') == 1\n    count_vowels('abb') == 1\n    count_vowels('aabb') == 2\n    count_vowels('abcd') == 0\n    count_vowels('abcdd') == 1\n    count_vowels('aaabccdd') == 2\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    count_vowels('abcdefghijklmnopqrstuvwxyzasdfghjklm') == 34\n    count_vowels('aae') == 1\n    count_vowels('abca') == 1\n    count_vowels('aabc') == 1\n    count_vowels('abcb') == 1\n    count_vowels('abb') == 1\n    count_vowels('aabb') == 2\n    count_vowels('abcd') == 0\n    count_vowels('abcdd') == 1\n    count_vowels('aaabccdd') == 2\n    count_vowels('aaaaaabbb') == 1\n    count_vowels('aabc') == 0\n    count_vowels('abc') == 1\n    count_vowels('abcdefghijklmnopqrstuvwxyz') == 27\n    count_vowels('abcdefghijklmnopqrstuvwxyzqwertyuiop') == 33\n    coun"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str:\n        total = 0\n        vowels = 'aeiou'\n        for i in range(len(test_str)-1):\n            if test_str[i] in vowels and test_str[i+1] in vowels:\n                total += 1\n        return total\n    else:\n        return 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_sum([-2,1,2,3,2,3,4,5]) == 9, \"Wrong output\"\nassert     find_sum([1,1,1,1,1,1,1,1]) == 10, \"Wrong output\"\nassert     find_sum([1,2,3,4,5]) == 6, \"Wrong output\"\nassert     find_sum([5,3,6,3,7]) == 10, \"Wrong output\"\nassert     find_sum([]) == 0, \"Wrong output\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_sum([1,2,3,4,6,7]) == 15, find_sum([1,2,3,4,6,7])\nassert    find_sum([1,1,1,1,1,1,1,1,1,1]) == 2, find_sum([1,1,1,1,1,1,1,1,1,1])\nassert    find_sum([1,2,3,4,5,6,7]) == 9, find_sum([1,2,3,4,5,6,7])\nassert    find_sum([1,2,3,4,5,6,7]) == 9, find_sum([1,2,3,4,5,6,7])\nassert    find_sum([1,2,3,4,5,6,7]) == 9, find_sum([1,2,3,4,5,6,7])\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_sum([1, 2, 4, 6, 9, 3]) == 17\nassert     find_sum([1, 1, 5, 6, 9, 3]) == 13\nassert     find_sum([1, 2, 4, 6, 9, 3, 2, 3, 2]) == 16\nassert     find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3]) == 17\nassert     find_sum([]) == 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert find_sum([1,2,3,4,5])==9\nassert find_sum([-3,-2,-1,0,1,2,3,4,5])==1\nassert find_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_sum([1, 3, 2, 4, 2, 5]) == 9, \"the sum is not the expected value\"\nassert     find_sum([1, 3, 3, 5, 5]) == 5, \"the sum is not the expected value\"\nassert     find_sum([3, 1, 3, 5, 5]) == 5, \"the sum is not the expected value\"\n\nprint(\"\\033[92mAll tests passed!\\033[0m\")"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint ('find_sum : ', find_sum([1,2,3,4,5,6,7,8,9,10]))\nprint ('find_sum : ', find_sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]))\n\nprint ('find_sum : ', find_sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]))\nprint ('find_sum : ', find_sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]))\n\nprint ('find_sum : ', find_sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]))\nprint ('find_sum : ', find_sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]))\n\nprint ('find_sum : ', find_sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]))\nprint ('find_sum : ', find_sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlist_input = [1,2,3,2,3,4,5,6,6,5,4,3,2,3,4,5,6]\nlist_output = [[1, 2], [3, 2], [3, 4], [4, 5], [5, 6]]\nassert \n\nassert pack_consecutive_duplicates(list_input) == list_output\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 1, 3, 4, 4, 5]) == [[1, 2], [3, 4, 4], [5]]\nassert     pack_consecutive_duplicates([1, 2, 3, 1, 3, 4, 5]) == [[1, 2], [3, 1, 3], [4, 5]]\nassert     pack_consecutive_duplicates([1, 2, 3, 1, 4, 5, 4, 5]) == [[1], [2], [3], [1], [4], [5]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 5, 5]) == [[1, 2, 3], [4, 5, 5], [5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pack_consecutive_duplicates([0,1,0,1]) == [[0,1],[0,1]]\nassert pack_consecutive_duplicates([1,1,1,1,1,1,1,1,1,1,1]) == [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]\nassert pack_consecutive_duplicates([1,1,1,1,1,1,1,1,1,1,1]) == [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]\nassert pack_consecutive_duplicates([0,1,0,1,0,1]) == [[0,1,0,1],[0,1,0,1]]\nassert pack_consecutive_duplicates([1,1,1,1,1,1,1]) == [[1,1,1,1,1],[1,1,1,1,1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([0,1,2,3,4,5,5,5]) == [[0, 1], [2, 3], [4, 5, 5]]\nassert     pack_consecutive_duplicates([0,1,1,1,2,3,3,4,4,4,4,4]) == [[0], [1], [1, 1], [2, 3], [3, 4, 4], [4, 4, 4]]\nassert     pack_consecutive_duplicates([0,1,2,3,4,5,6]) == [[0, 1], [2, 3], [4, 5, 6]]\nassert     pack_consecutive_duplicates([0]) == [[0]]\nassert     pack_consecutive_duplicates([1]) == [[1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,2,4]) == [[1,2,3],[2,4]]\nassert     pack_consecutive_duplicates([1,2,2,3,4]) == [[1,2,2],[3,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4],[5]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6]) == [[1,2,3,4,5],[6]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7]) == [[1,2,3,4,5],[6,7]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,2,3]) == [[1,2,3,4,5], [2,3]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,2,3,3]) == [[1,2,3,4,5], [2,3]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,2,3,4]) == [[1,2,3,4], [2,3,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,2,3,4,4]) == [[1,2,3,4,5], [2,3,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,2,3,4,4,4,4]) == [[1,2,3,4,5], [2,3,4,4]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,6,1,2,3,4]) == [[1,2,3],[4,5,6]]\nassert     pack_consecutive_duplicates([1,2,3,1,2,3,1,2,3,1,2,3]) == [[1,2,3,1],[2,3,1,2]]\nassert     pack_consecutive_duplicates([1,2,3,1,2,3,1,2,3,1,2,3]) == [[1,2,3,1,2,3,1,2,3]]\n\ndef pack_consecutive_duplicates_simplified(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    The simplest version.\n    '''\n    # use a list of tuples\n    return [list(group) for _, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print('Example 1:')\n    print('Input :', ['a', 'a', 'b', 'c', 'd'])\n    print('Output:', [['a'], ['a', 'b'], ['b', 'c'], ['c', 'd']])\n    print('Expected :', [['a'], ['a', 'b'], ['a', 'b', 'c'], ['b', 'c', 'd']])\n    assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd']) == [['a'], ['a', 'b'], ['b', 'c'], ['c', 'd']]\n    assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd']) == [['a'], ['a', 'b'], ['a', 'b', 'c'], ['b', 'c', 'd']]\n    print('Example 2:')\n    print('Input :', ['a', 'b', 'b', 'b', 'a', 'a'])\n    print('Output:', [['a'], ['b', 'b', 'b'], ['a']])\n    print('Expected :', [['a'], ['b', 'b', 'b'], ['a', 'a']])\n    assert pack_consecutive_duplicates(['a', 'b', 'b', 'b', 'a', 'a']) == [['a'], ['b', 'b', 'b'], ['a', 'a']]\n    "
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pack_consecutive_duplicates(['a','b','c','d','b','a','a','b','d']) == [['a','b','d'],['b','a','a'],['b','d']]\nassert     pack_consecutive_duplicates(['a','b','c','d','b','a','a','b','d','b','c','a','a','b','d']) == [['a','b','d'],['b','a','a'],['b','d'],['b','c','a'],['a','b','d']]\nassert     pack_consecutive_duplicates(['a','b','c','d','b','a','a','b','d','b','c','a','a','b','d','b','c','a','a','b','d','b','c','a','a','b','d']) == [['a','b','d'],['b','a','a'],['b','d'],['b','c','a'],['a','b','d'],['b','c','a']]\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([1, 2, 2, 1, 1, 2, 3, 3, 3, 2, 2, 1]) == {(1, 2, 2): 2, (3, 3, 2): 2, (2, 1, 1): 1}\nassert     unique_sublists([1, 2, 2, 1, 1, 2, 3, 3, 3, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1]) == {(1, 2, 2): 3, (3, 3, 2): 2, (2, 1, 1): 2}\nassert     unique_sublists([1, 2, 2, 1, 1, 2, 3, 3, 3, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1]) == {(1, 2, 2): 4, (3, 3, 2): 2, (2, 1, 1): 2}\nassert     unique_sublists([1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1]) == {(1, 1, 1): 2, (2, 2, 2): 2, (2, 1, 2): 1}\nassert     unique_sublists([1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1]) == {(1, 1, 1): 2, (2, 2, 2): 2, (2, 1, 2): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert unique_sublists([1,2,3,4]) == {(1,2,3,4): 1, (2,3,4): 1, (3,4): 1, (4,): 1}\nassert unique_sublists([1,2,1,2,3,1,2,1,2,2,2]) == {(1,2,1,2,2,3): 2, (1,2,3): 2, (1,2): 2, (1,): 1, (2,): 1, (3,): 1}"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to return a dictionary, where the keys are all numbers between 1 and 10, and the values are the sum of these numbers.\n'''\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef unique_sublists_output(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([1,2,3]) == {(1,1), (2,1), (3,1)}\nassert     unique_sublists([[1,2,3],[4,5,6]]) == {(1,1), (2,1), (3,1), (4,1), (5,1), (6,1)}\nassert     unique_sublists([[1,2,3],[4,5,6],[7,8,9]]) == {(1,1), (2,1), (3,1), (4,1), (5,1), (6,1), (7,1), (8,1), (9,1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[]]) == {}\nassert     unique_sublists([[1]]) == {(1,): 1}\nassert     unique_sublists([[1,2], [1,2]]) == {(1, 2): 2}\nassert     unique_sublists([[1,1], [1,1]]) == {(1, 1): 2}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \ndef unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n\nassert \n\ndef unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([[1,2],[1,2],[[1,2],[1,2]]]) == {((1,2),2), ((1,2),1)}\nassert     unique_sublists([[1,2],[1,2],[[1,2],[1,2]]]) == {((1,2),2), ((1,2),1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([1,2,3,4]) == {(1,3,4):1, (2,3,4):1, (3,4):1}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1,1,1]) == {(1,1):3}\n\ndef duplicate_letters(str1):\n    '''\n    Write a function to count the number of distinct case-insensitive letters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_list = [1,2,3,4,5,6,7,8,9]\nassert find_combinations(test_list) == [(1,2,3), (1,2,4), (1,2,5), (1,2,6), (1,3,4), (1,3,5), (1,3,6), (1,4,5), (1,4,6), (1,5,6), (2,3,4), (2,3,5), (2,3,6), (2,4,5), (2,4,6), (2,5,6), (3,4,5), (3,4,6), (3,5,6), (4,5,6), (1,2,3,4), (1,2,3,5), (1,2,3,6), (1,2,4,5), (1,2,4,6), (1,2,5,6), (1,3,4,5), (1,3,4,6), (1,3,5,6), (1,4,5,6), (2,3,4,5), (2,3,4,6), (2,3,5,6), (2,4,5,6), (3,4,5,6), (1,2,3,4,5), (1,2,3,4,6), (1,2,3,5,6), (1,2,3,6,5), (1,2,4,5,6), (1,2,4,6,5), (1,2,5,6,4), (1,3,4,5,6), (2,3,4,5,6)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_combinations([(1, 2, 3), (4, 5, 6)]) == [(1, 4, 6), (1, 5, 6), (1, 6, 6), (2, 4, 6), (2, 5, 6), (2, 6, 6)]\nassert find_combinations([(0, 1), (2, 3), (4, 5)]) == [(0, 1), (2, 3), (4, 5)]\nassert find_combinations([(1, 2, 3), (4, 5), (6, 7, 8)]) == [(1, 2, 4, 6), (1, 2, 5, 6), (1, 3, 4, 6), (1, 3, 5, 6), (1, 4, 5, 6), (1, 4, 6, 6), (2, 3, 5, 6), (2, 3, 6, 6), (2, 4, 5, 6), (2, 4, 6, 6), (3, 4, 5, 6), (3, 4, 6, 6)]\nassert find_combinations([(0, 1, 2), (3, 4, 5), (6, 7, 8)]) == [(0, 1, 3, 6), (0, 1, 4, 6), (0, 1, 5, 6), (0, 2, 3, 6), (0, 2, 4, 6), (0, 2, 5, 6), (0, 3, 4, 6), (0, 3, 5, 6), (0, 4, 5, 6), (1, 2, 3, 6), (1, 2, 4, 6), (1, 2, 5, 6), (1, 3, 4, 6), (1, 3, 5, 6), (1, 4, 5, 6), (2, 3, 4, 6), (2, 3, 5, 6), (2, 4, 5, 6), (3, 4, 5, 6), (4, 5, 6, 6)]\nassert find_combinations([(0, 1, 2), (3, 4), (5, 6, 7)]) == [(0, 1, 3, 5, 6, 7), (0, 1, 4, 5, 6, 7), (0, 1, 5, 6, 7, 7), (0, 2, 3, 4, 5, 6, 7), (0, 2, 3, 5, 6, 7), (0, 2, 4, 5, 6, 7), (0, 3, 4, 5, 6, 7), (0, 3, 6, 7, 7, 7), (0, 4, 5, 6, 7, 7), (1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 5, 6, 7), (1, 2, 4, 5, 6, 7), (1, 3, 4, 5, 6, 7), (1, 3, 6, 7, 7, 7), (1, 4, 5, 6, 7, 7), (2, 3, 4, 5, 6, 7), (2, 3, 6, 7, 7, 7), (2, 4, 5, 6, 7, 7), (3, 4, 5, 6, 7, 7), (4, 5, 6, 7, 7, 7)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([[1,2],[1,3],[2,3],[3,4]]) == [[1,2,3,4],[1,3,4],[2,3,4]]\nassert     find_combinations([[1,2],[3,4],[5,6],[7,8],[9,10]]) == [[1,2,3,4,5,6],[1,2,3,4,7,8],[1,2,3,4,5,9],[1,2,3,4,5,10],[1,2,3,4,7,8],[1,2,3,4,7,9],[1,2,3,4,7,10],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,9],[1,2,3,4,5,6,10],[1,2,3,4,5,7,8],[1,2,3,4,5,7,9],[1,2,3,4,5,7,10],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,9],[1,2,3,4,5,6,7,10],[1,2,3,4,5,7,8],[1,2,3,4,5,7,9],[1,2,3,4,5,7,10],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,9],[1,2,3,4,5,6,7,10]]\nassert     find_combinations([[2,3,4],[1,2,3],[4,5,6],[7,8,9]]) == [[2,3,4,5,6,7,8,9],[2,3,4,5,7,8,9],[2,3,4,5,7,9],[2,3,4,5,6,7,8],[2,3,4,5,6,9],[2,3,4,5,7,8],[2,3,4,5,7,9],[2,3,4,5,6,7,8],[2,3,4,5,6,9],[2,3,4,7,8,9],[2,3,4,5,7,9],[2,3,4,5,6,7,8],[2,3,4,5,6,9],[2,3,4,7,8,9],[2,3,4,5,7,9]]\n\ntest_list = [[1,2,3,4],[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nprint find_combinations(test_list)"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint (\"Pass\" if  (find_combinations([1, 3, 2, 4, 1, 2])) == ((1, 2, 3, 4), (1, 2, 2, 3), (1, 2, 1, 3), (1, 2, 1, 2), (3, 4, 2, 2), (1, 3, 2, 3), (1, 3, 3, 2), (2, 4, 2, 2), (1, 3, 3, 2)) else \"Fail\"\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations([(1,2),(2,3),(3,4)]) == [(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)]\nassert     find_combinations([]) == []\nassert     find_combinations([(1,2),(3,4)]) == []\nassert     find_combinations([(1,2),(1,2)]) == [(1,2)]\nassert     find_combinations([(1,2),(1,3),(1,4)]) == [(1,2),(1,3),(1,4)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations([(1, 2), (2, 3), (3, 4), (3, 5), (1, 6), (5, 6)]) ==  [(1, 2, 3, 4, 5, 6), (1, 2, 3, 5, 6, 7), (1, 2, 3, 6, 7, 8), (1, 2, 3, 6, 7, 9), (1, 2, 3, 5, 6, 7), (1, 2, 4, 5, 6, 7), (1, 2, 4, 5, 6, 8), (1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 7), (1, 2, 3, 4, 5, 8), (1, 2, 3, 4, 5, 9), (1, 2, 3, 5, 6, 7), (1, 2, 3, 5, 6, 8), (1, 2, 3, 5, 6, 9), (1, 2, 3, 6, 7, 8), (1, 2, 3, 6, 7, 9), (1, 2, 3, 6, 8, 9), (1, 2, 3, 7, 8, 9), (1, 2, 4, 5, 6, 7), (1, 2, 4, 5, 6, 8), (1, 2, 4, 5, 6, 9), (1, 2, 4, 5, 7, 8), (1, 2, 4, 5, 7, 9), (1, 2, 4, 6, 7, 8), (1, 2, 4, 6, 7, 9), (1, 2, 4, 6, 8, 9), (1, 2, 4, 6, 9, 9), (1, 2, 4, 7, 8, 9), (1, 2, 4, 7, 9, 9), (1, 2, 4, 8, 9, 9), (1, 2, 5, 6, 7, 8), (1, 2, 5, 6, 7, 9), (1, 2, 5, 6, 8, 9), (1, 2, 5, 6, 9, 9), (1, 2, 5, 7, 8, 9), (1, 2, 5, 7, 9, 9), (1, 2, 5, 8, 9, 9), (1, 2, 5, 9, 9, 9), (1, 2, 6, 7, 8, 9), (1, 2, 6, 7, 9, 9), (1, 2, 6, 8, 9, 9), (1, 2, 6, 9, 9, 9), (1, 2, 6, 7, 8, 9), (1, 2, 7, 8, 9, 9), (1, 2, 7, 9, 9, 9), (1, 2, 7, 8, 9, 9), (1, 2, 7, 9, 9, 9), (1, 2, 8, 9, 9, 9)]"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef combinations_with_tuples(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([(1,2,3,4),(5,6),(7,8),(9,10,11,12)]) ==     [(1,2,3,4),(5,6),(7,8),(9,10,11,12)]\nassert     find_combinations([(1,2,3,4),(5,6),(7,8),(9,10),(11,12)]) ==     [(1,2,3,4),(5,6),(7,8),(9,10),(11,12)]\nassert     find_combinations([(1,2,3,4),(5,6),(7,8),(9,10),(11,12),(13,14,15,16,17,18,19,20)]) ==     [(1,2,3,4),(5,6),(7,8),(9,10),(11,12),(13,14,15,16,17,18,19,20)]\nassert     find_combinations([(1,2,3,4),(5,6),(7,8),(9,10),(11,12),(13,14,15,16,17,18,19,20),(21,22,23,24,25,26,27,28,29,30)]) ==     [(1,2,3,4),(5,6),(7,8),(9,10),(11,12),(13,14,15,16,17,18,19,20),(21,22,23,24,25,26,27,28,29,30)]\nassert     find_combinations([(1,2,3,4),(5,6),(7,8),(9,10),(11,12),(13,14,15,16,17,18,19,20),(21,22,23,24,25,26,27,28,29,30),(31,32,33,34,35,36,37,38,39,40)]) ==     [(1,2,3,4),(5,6),(7,8),(9,10),(11,12),(13,14,15,16,17,18,19,20),(21,22,23,24,25,26,27,28,29,30),(31,32,33,34,35,36,37,38,39,40)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_combinations([(1, 2, 3, 4), (2, 3, 4, 5)]) == [(1, 2, 3, 4), (2, 3, 4, 5), (1, 2, 4, 5), (1, 3, 4, 5), (1, 2, 3, 5), (1, 2, 4, 5), (1, 3, 4, 5)]\nfind_combinations([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]\nfind_combinations([]) == []\nfind_combinations([(1,)]) == [(1,)]\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_divisors(0) == 0,'should return 0'\nassert     count_divisors(1) == 1,'should return 1'\nassert     count_divisors(5) == 1,'should return 1'\nassert     count_divisors(7) == 2,'should return 2'\nassert     count_divisors(16) == 4,'should return 4'\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_divisors(2) == 1, \"count_divisors should return 1\"\nassert     count_divisors(5) == 4, \"count_divisors should return 4\"\nassert     count_divisors(12) == 3, \"count_divisors should return 3\"\nassert     count_divisors(60) == 11, \"count_divisors should return 11\"\nassert     count_divisors(60) == 11, \"count_divisors should return 11\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_divisors_hlep_numbers() :\n    '''\n    Ask user for a number. If the input is not a number, print a message to the user and ask them to try again.\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_divisors(6) == 4\nassert     count_divisors(12) == 6\nassert     count_divisors(17) == 4\nassert     count_divisors(24) == 6\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_divisors(6) == 3, 'This should be 3'\nassert count_divisors(9) == 4, 'This should be 4'\n\ndef sum_divisors(n):\n    '''\n    Python function to sum all divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-17.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_divisors(9) == 2\nassert count_divisors(12) == 3\nassert count_divisors(15) == 4\n\ndef missing_number(n, arr) : \n    '''\n    Write a python function to find the missing element in the array. \n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_divisors(3) == 2, \"Function count_divisors failed\"\nassert     count_divisors(4) == 1, \"Function count_divisors failed\"\nassert     count_divisors(5) == 1, \"Function count_divisors failed\"\nassert     count_divisors(9) == 4, \"Function count_divisors failed\"\nassert     count_divisors(15) == 5, \"Function count_divisors failed\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_divisors(4) == 2, \"incorrect\"\nassert     count_divisors(6) == 3, \"incorrect\"\nassert     count_divisors(10) == 4, \"incorrect\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_divisors(0) == False\nassert     count_divisors(1) == False\nassert     count_divisors(2) == False\nassert     count_divisors(3) == False\nassert     count_divisors(4) == True\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_divisors(2) == 1, 'First'\nassert     count_divisors(3) == 2, 'Second'\nassert     count_divisors(7) == 3, 'Third'\nassert     count_divisors(8) == 4, 'Fourth'\nassert     count_divisors(9) == 4, 'Fifth'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_length_sum([10, 5, 2, 7, 8]) == 27\nassert     odd_length_sum([10, 5, 2, 7, 8, 5, 2, 7, 8]) == 32\nassert     odd_length_sum([10, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8]) == 33\nassert     odd_length_sum([10, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8]) == 33\nassert     odd_length_sum([10, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8, 5, 2, 7, 8]) == 43\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_length_sum([0,1,2,3,4]) == 6\nassert     odd_length_sum([-2,0,1,-3,5,4]) == 4\nassert     odd_length_sum([0,0,0,0,0,0,0]) == 0\n\n\n\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nodd_length_sum(arr = [1, 3, -1, 6, 4, -8, 8]) == 4\nodd_length_sum(arr = [0, 1, 3, 4, 5, -8, 8]) == 0\nodd_length_sum(arr = [3, -1, 6, 4, 5, -8, 8]) == 6\nodd_length_sum(arr = [4, -8, -8, -4]) == 6\nodd_length_sum(arr = [-4, -8, -8, -4]) == 0\nodd_length_sum(arr = [-8, -8, -4]) == -4\nodd_length_sum(arr = [-4, -8]) == -4\nodd_length_sum(arr = [-8, -4]) == -4\nodd_length_sum(arr = [1, 2, 3, 4]) == 1\nodd_length_sum(arr = [1, 3, 5, 7, 9]) == 5\nodd_length_sum(arr = [1, 3, 5, 7, 9, -8]) == 13\nodd_length_sum(arr = [1, 3, 5, 7, 9, -8, -7, -3, -1]) == 17\nodd_length_sum(arr = [-9, -8, -7, -3, -1]) == -9\nodd_length_sum(arr = [-9, -8, -7, -3, -1, -4, -2, -3, -2]) == -0\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6]) == 1\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7]) == 9\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 17\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 34\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 43\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 52\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 61\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 70\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 79\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 88\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 97\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 100\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 105\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 110\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 115\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 120\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 125\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 130\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 135\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 150\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 165\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 180\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 195\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 210\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 225\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) == 240\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]) == 285\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]) == 300\nodd_length_sum(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_length_sum([1,2,3,4,5]) == 15\nassert     odd_length_sum([1,1,1,1,1,1,1,1]) == 18\nassert     odd_length_sum([1,2,3,4,5,6]) == 15\nassert     odd_length_sum([1,2,3,4,5,6,7]) == 0\nassert     odd_length_sum([1,2,3,4,5,6,7,8]) == 16\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_length_sum([1,2,3,4,5,6]) == 12\nassert odd_length_sum([3,4,5,7]) == 20\nassert odd_length_sum([5,7]) == 14\nassert odd_length_sum([1,2,3,4,5]) == 20\nassert odd_length_sum([0,1,0]) == 4\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_length_sum([1, 2, 3]) == 6\nassert odd_length_sum([1, 2, 3, 4]) == 5\nassert odd_length_sum([1, 2, 3, 4, 5]) == 0\nassert odd_length_sum([1, 2, 3, 4, 5, 6]) == 10\nassert odd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 15\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_length_sum([1,2,3]) == 3\nassert odd_length_sum([1,2,3,4,5]) == 10\nassert odd_length_sum([1,2,3,4,5,6]) == 15\nassert odd_length_sum([1,2,3,4,5,6,7]) == 18\nassert odd_length_sum([1,2,3,4,5,6,7,8]) == 21\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert odd_length_sum([1, 2, 3, 4, 5, 6]) == 15\nassert odd_length_sum([1, 2, 3, 4, 5]) == 7\nassert odd_length_sum([1, 2, 3, 4, 5, 6]) == 15\nassert odd_length_sum([1, 2, 3, 4, 5]) == 7\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert rgb_to_hsv(255, 0, 0) == (360, 0, 1)\nassert rgb_to_hsv(255, 255, 0) == (0, 60, 0)\nassert rgb_to_hsv(255, 255, 255) == (0, 0, 0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rgb_to_hsv( 0.73725, 0.4, 0.2 ) == (60.0, 0.5, 0.5)\nassert rgb_to_hsv( 0.3, 0.3, 0.3 ) == (0.0, 0.0, 0.0)\nassert rgb_to_hsv( 0.73725, 0.4, 0.6 ) == (60.0, 0.0, 1.0)\nassert rgb_to_hsv( 0.4, 0.73725, 0.4 ) == (120.0, 1.0, 0.0)\nassert rgb_to_hsv( 0.2, 0.5, 0.5 ) == (60.0, 0.5, 0.5)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not \n\n\n\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rgb_to_hsv(10, 10, 10) == (10, 100, 100)\nassert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert     rgb_to_hsv(10, 10, 0) == (10, 100, 0)\nassert     rgb_to_hsv(10, 10, 10) == (10, 100, 100)\nassert     rgb_to_hsv(0, 10, 10) == (0, 100, 100)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rgb_to_hsv(255, 255, 255) == (255, 255, 255, 0.333333, 0.8333333, 0.5)\nassert     rgb_to_hsv(255, 0, 0) == (255, 0, 0, 1, 1, 0.75)\nassert     rgb_to_hsv(0, 255, 0) == (0, 255, 0, 0.333333, 0.8333333, 0.75)\nassert     rgb_to_hsv(0, 0, 255) == (0, 0, 255, 0.333333, 0.8333333, 0.75)\nassert     rgb_to_hsv(255, 255, 0) == (255, 255, 0, 1, 1, 0.5)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef print_first_last(list1):\n    '''\n    Write a function to print first and last element of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    list1 = list(map(int, input().split()))\n    print(\"{0} * {1} = {2}\".format(*list1) )"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 720\nassert     mul_even_odd([9, 10, 11, 12, 13, 14, 15]) == 900\nassert     mul_even_odd([100, 101, 102, 103, 104, 105, 106, 107]) == 1000\nassert     mul_even_odd([-1, -2, -3, -4, -5, -6, -7, -8]) == -720\nassert     mul_even_odd([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]) == -900\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == 15\nassert     mul_even_odd([1,2,3,4,5,6]) == 60\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (24, 0), 'Should be 24 * 1 = 24'\nassert mul_even_odd([1, 2, 3, 4, 5, 6]) == (24, 0), 'Should be 24 * 1 = 24'\nassert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (24, 0), 'Should be 24 * 1 = 24'\nassert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (240, 0), 'Should be 240 * 1 = 240'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert mul_even_odd([]) == ()\nassert mul_even_odd([1, 2, 3, 4]) == (6, 24)\nassert mul_even_odd([1, 3, 5, 7, 9]) == (120, 840)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5]) == 120\nassert     mul_even_odd([-1, -2, -3, -4, -5]) == -120\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmul_even_odd([10,11,12,13,14]) == 60\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert tuple_str_int(\"(1,2)\") == (1,2)\nassert tuple_str_int(\"(1)\") == (1,)\nassert tuple_str_int(\"1,2,3\") == (1,2,3)\nassert tuple_str_int(\"1,2\") == (1,2)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int(\"(3, 4)\") == (3, 4), \"It is not correct\"\nassert tuple_str_int(\"(3)\") == (3,), \"It is not correct\"\nassert tuple_str_int(\"(3, 4)\") == (3, 4), \"It is not correct\"\nassert tuple_str_int(\"(3, )\") == (3,), \"It is not correct\"\nassert tuple_str_int(\"(3, )\") == (3,), \"It is not correct\"\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int(\"()\") == (0, 0)\nassert     tuple_str_int(\"(0,)\") == (0, 0)\nassert     tuple_str_int(\"(0,0,0)\") == (0, 0, 0)\nassert     tuple_str_int(\"(0,0,0,0)\") == (0, 0, 0, 0)\nassert     tuple_str_int(\"(0,0,0,0,0)\") == (0, 0, 0, 0, 0)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_str_int(\"()\") == (1, 0)\nassert     tuple_str_int(\"(1,2)\") == (1, 2)\nassert     tuple_str_int(\"(1,2,3)\") == (1, 2, 3)\nassert     tuple_str_int(\"(1,2,3,4)\") == (1, 2, 3, 4)\nassert     tuple_str_int(\"(1,2,3,4,5)\") == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3,)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3,\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3,) \") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3,4,5)\") == (1,2,3,4,5)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert tuple_str_int('(1, 2)') == (1, 2)\nassert tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\nassert tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert tuple_str_int(\"(1,2,3)\") == (1, 2, 3)\nassert tuple_str_int(\"(1,)\") == (1,)\nassert tuple_str_int(\"('1','2')\") == ('1', '2')\nassert tuple_str_int(\"('1','2','3')\") == ('1', '2', '3')\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int('(1,2,3,4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(1,2,3,4,)') == (1, 2, 3, 4)\nassert     tuple_str_int('(1,2,3,4,5)') == (1, 2, 3, 4, 5)\nassert     tuple_str_int('(1,2,3,4,5,6)') == (1, 2, 3, 4, 5, 6)\nassert     tuple_str_int('(1,2,3,4,5,6,7)') == (1, 2, 3, 4, 5, 6, 7)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3), \"Fail\"\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3), \"Fail\"\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3), \"Fail\"\n\ndef tuple_str_list(test_str):\n    '''\n    Write a function to convert tuple string to list tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert tuple_str_int('(1, )') == (1, )\nassert tuple_str_int('((1), )') == ((1), )\nassert tuple_str_int('(1, (2, 3, 4))') == (1, (2, 3, 4))\nassert tuple_str_int('()') == ()\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_insertion([\"a\", \"c\", \"f\"], \"b\") == 2, \"wrong\"\nassert     right_insertion([\"a\", \"c\", \"f\"], \"d\") == 3, \"wrong\"\nassert     right_insertion([\"a\", \"c\", \"f\"], \"e\") == 4, \"wrong\"\nassert     right_insertion([\"a\", \"c\", \"f\"], \"a\") == 0, \"wrong\"\nassert     right_insertion([\"a\", \"c\", \"f\"], \"f\") == 2, \"wrong\"\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nIf the sorted array was rotated at some pivot unknown to you beforehand,\nand you have a target value x that is potentially the value at the first position in the array,\nhow would you search for the index of the value you are looking for?\n\n'''\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nright_insertion(\n    [5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    8\n)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     right_insertion([1,2,3,4], -1) == 2\nassert     right_insertion([1,2,3,4], 2) == 3\nassert     right_insertion([1,2,3,4], 3) == 4\nassert     right_insertion([1,2,3,4], 4) == 4\nassert     right_insertion([1,2,3,4], 5) == 5\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_right_insertion():\n    assert right_insertion([5, 6, 7, 8, 9], 6) == 3\n    assert right_insertion([1, 5, 9, 10], 11) == 4\n    assert right_insertion([10, 9, 11, 12], 13) == 4\n    "
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_insertion([1, 2, 3], 1) == 0\nassert     right_insertion([1, 2, 3], 2) == 1\nassert     right_insertion([1, 2, 3], 3) == 2\nassert     right_insertion([1, 2, 3], 4) == 3\nassert     right_insertion([1, 2, 3], 5) == 4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     right_insertion([], 3) == 0\nassert     right_insertion([1,2,3,4], 3) == 3\nassert     right_insertion([1,2,3,4], 1) == 0\nassert     right_insertion([1,2,3,4], 2) == 1\nassert     right_insertion([1,2,3,4], 5) == 3\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_insertion([1,2,3], 1) == 2\nassert     right_insertion([1,2,3], 1.1) == 2\nassert     right_insertion([1,2,3], -1.1) == 0\n\ndef find_duplicate(a):\n    '''\n    Write a function to find a duplicate number in a sorted array. The array may have duplicate numbers and the numbers could be negative.\n    '''\n    pass\n\ndef find_duplicate_sorted(a):\n    '''\n    Write a function to find a duplicate number in a sorted array. The array may have duplicate numbers and the numbers could be negative.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_three(\"ababab\") == \"ababab\"\nassert     text_match_three(\"abababb\") == \"ababab\"\nassert     text_match_three(\"ababababab\") == \"ababababab\"\nassert     text_match_three(\"abababababab\") == \"abababababab\"\nassert     text_match_three(\"abc\") == \"\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a \"b\" followed by a b, b, and a.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_three('abababababababa') == True\nassert     text_match_three('abababa') == False\nassert     text_match_three('ababab') == False\nassert     text_match_three('abababb') == True\nassert     text_match_three('ababaaaa') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three('aababb') == True, 'pass: aababb'\nassert     text_match_three('abbabb') == False, 'fail: abbbb'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three(\"ababab\") == True, \"it is wrong\"\nassert     text_match_three(\"abababab\") == True, \"it is wrong\"\nassert     text_match_three(\"abab\") == False, \"it is wrong\"\nassert     text_match_three(\"abcabcab\") == True, \"it is wrong\"\n\nprint(\"\\nOK\")\nprint(\"##############\")\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_three(\"ababababab\") == True, \"incorrect\"\nassert     text_match_three(\"abcabc\") == False, \"incorrect\"\nassert     text_match_three(\"a\") == True, \"incorrect\"\n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by a 'b', and another 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_three('abab') == 'abab', 'a followed by three \"b\"s'\nassert     text_match_three('abbbbbbb') == 'abbbbbbb', 'a followed by three \"b\"s'\nassert     text_match_three('abc') == '', 'a followed by three \"b\"s'\nassert     text_match_three('abcb') == '', 'a followed by three \"b\"s'\nassert     text_match_three('abcbbbb') == 'abcbbbb', 'a followed by three \"b\"s'\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('\\033[92m'+'\\033[1m'+'\\033[35m'+'\\033[4m'+'\\033[1m'+'\\033[4m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[91m'+'\\033[1m'+'\\033[4m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m')\nprint('\\033[92m'+'\\033[1m'+'\\033[35m'+'\\033[4m'+'\\033[1m'+'\\033[4m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[91m'+'\\033[1m'+'\\033[4m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m')\nprint('\\033[92m'+'\\033[1m'+'\\033[35m'+'\\033[4m'+'\\033[1m'+'\\033[4m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[91m'+'\\033[1m'+'\\033[4m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\033[1m'+'\\033[0m'+'\\033[1m'+'\\033[94m'+'\\03"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     new_tuple([\"a\",\"b\",\"c\"], 'ab') == (('a', 'b', 'c'), ('a', 'b', 'c'))\nassert     new_tuple([\"a\",\"b\",\"c\"], 'abc') == (('a', 'b', 'c'), ('a', 'b', 'c'))\nassert     new_tuple([\"a\",\"b\",\"c\"], 'abcde') == (('a', 'b', 'c'), ('a', 'b', 'c'))\nassert     new_tuple([\"a\",\"b\",\"c\"], 'aebc') == (('a', 'b', 'c'), ('a', 'b', 'c'))\nassert     new_tuple([\"a\",\"b\",\"c\"], 'ab') == (('a', 'b', 'c'), ('a', 'b', 'c'))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert tuple_to_list('abc', '*') == ('*', '*', '*')\nassert tuple_to_list('abc', '?') == ('a', 'b', 'c')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c')\nassert     new_tuple(['a', 'b', 'c'], 'def') == ('a', 'b', 'c')\nassert     new_tuple(['a', 'b', 'c'], 'b') == ('b', 'b', 'c')\nassert     new_tuple(['a', 'b', 'c'], 'bc') == ('b', 'c', 'c')\nassert     new_tuple(['a', 'b', 'c'], 'c') == ('c', 'c', 'c')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     new_tuple([1,2,3], 'add') == ('add',1,2,3), 'Expected value (\"add\",1,2,3)'\nassert new_tuple([1,2,3], 'add') == ('add',1,2,3), 'Expected value (\"add\",1,2,3)'\nassert new_tuple([1,2,3], 'add') == ('add',1,2,3), 'Expected value (\"add\",1,2,3)'\nassert new_tuple([1,2,3], 'add') == ('add',1,2,3), 'Expected value (\"add\",1,2,3)'\nassert new_tuple([1,2,3], 'add') == ('add',1,2,3), 'Expected value (\"add\",1,2,3)'\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nQ.12 Write a python function to check if a string is palindrome or not. \n'''\ndef palindrome(a):\n    '''\n    Write a python function to check if a string is palindrome or not. \n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_list = ['a','b','c','d']\n    test_str = 'abcd'\n    new_tuple = new_tuple(test_list, test_str)\n    print(new_tuple)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_position([1,2,3,4,5,6,7]) == True\nassert even_position([1,2,3,4,5,6,7,8,9]) == False\nassert even_position([1,2,3,4,5,6,7,8,9,10]) == True\nassert even_position([1,2,3,4,5,6,7,8,9,10,11,12]) == True\nassert even_position([1,2,3,4,5,6,7,8,9,10,11,12,13]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([]) == True\nassert     even_position([1,2,3,4,5,6,7,8,9]) == False\nassert     even_position([1,2,3,4,5,6,7,8,9,10]) == False\nassert     even_position([1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nassert     even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == True\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef even_position_1(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # return True if every even index contains even numbers\n    return all(x % 2 == 0 for x in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_position([0,1,2,3,4,5]) == False\nassert     even_position([0,1,2,3,4,5,6]) == True\nassert     even_position([0,1,2,3,4,5,6,7,8,9]) == False\nassert     even_position([0,1,2,3,4,5,6,7,8,9,10]) == False\nassert     even_position([0,1,2,3,4,5,6,7,8,9,10,11]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_position([1,2,3,4,5,6]) == True\nassert \neven_position([1,2,3,4,5,6,7]) == False\nassert \neven_position([1,3,5,7]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert even_position([1,2,3,4,5]) == True\nassert even_position([1,2,3,4,6]) == True\nassert even_position([1,2,3,4,6,5,7]) == False\nassert even_position([1,2,3,4,5,6,7]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_position([4,1,3,5,8,2]) == True\nassert even_position([4,1,3,8,5,2]) == False\n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_position([1,2,3,4,5,6]) == True\nassert \neven_position([1,2,3,4,5,6,7]) == False\nassert \neven_position([2,3,4,5,6,7]) == False\nassert \neven_position([2,3,4,5,6,7,8]) == False\nassert \neven_position([2,3,4,5,6,7,8,9]) == False\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_nested((1,(1,2))) == (1, 2), \"Wrong\"\nassert     remove_nested((1,2)) == (1, 2), \"Wrong\"\nassert     remove_nested((1,1)) == (1,), \"Wrong\"\nassert     remove_nested(((1,2),(1,2),(1,2))) == ((1,2),(1,2),(1,2)), \"Wrong\"\nassert     remove_nested((1,(2,3),(1,2),(1,2),(1,2))) == ((1,2),(1,2)), \"Wrong\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested(((1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13), (14))) == ((1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13), (14,))\nassert     remove_nested((\"hello\", \"this\", \"is\", \"test\")) == (\"hello\", \"this\", \"is\", \"test\")\nassert     remove_nested((\"hello\", (\"hello2\", \"hello3\", \"hello4\"), \"this\", \"is\", \"test\")) == (\"hello\", (\"hello2\", \"hello3\", \"hello4\"), \"this\", \"is\", \"test\")\nassert     remove_nested((\"hello\", ((\"hello2\", \"hello3\", \"hello4\"), (\"hello5\", \"hello6\", \"hello7\"), \"hello8\"), \"this\", \"is\", \"test\")) == (\"hello\", ((\"hello2\", \"hello3\", \"hello4\"), (\"hello5\", \"hello6\", \"hello7\"), \"this\", \"is\", \"test\"))\nassert     remove_nested((\"hello\", (((\"hello2\", \"hello3\", \"hello4\"), ((\"hello5\", \"hello6\", \"hello7\"), \"hello8\"), \"hello9\"), \"this\", \"is\", \"test\")) == (\"hello\", (((\"hello2\", \"hello3\", \"hello4\"), ((\"hello5\", \"hello6\", \"hello7\"), \"hello8\"), \"hello9\"), \"this\", \"is\", \"test\"))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_nested(('a',(1,2),(3,4))) == ('a',1,3,4), 'Wrong'\nassert     remove_nested(('a',(1,2),(3,4),(4,5))) == ('a',1,3,4), 'Wrong'\nassert     remove_nested((1,2)) == (1,2), 'Wrong'\nassert     remove_nested((1,2),(3,4),(4,5)) == (1,2,3,4,5), 'Wrong'\nassert     remove_nested(()) == (), 'Wrong'\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested((1, (1,2), (1,2,3), (1,2,3,4))) == (1, 2, (1,2,3))\nassert     remove_nested((1, (1,2), (1,2,3), (1,2,3,4), (1,2,3,4))) == (1, 2, (1,2,3))\nassert     remove_nested((1, (1,2), (1,2,3), (1,2,3,4))) == (1, (1,2,3,4))\n\ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((1, 2, (2, 3), (4, 5), (6, 7), (8, 9, (1,2,3)))) == (1, 2, (4, 5), (6, 7), (8, 9))"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested((1,1,1,2,2,3,3,4,4)) == (1,2,3,4)\nassert     remove_nested((1,1,1,2,2,3,3,4,4)) == (1,2,3,4)\nassert     remove_nested((1,1,1,2,2,3,3,4,4)) == (1,2,3,4)\nassert     remove_nested((1,1,1,2,2,3,3,4,4)) == (1,2,3,4)\nassert     remove_nested((1,1,1,2,2,3,3,4,4)) == (1,2,3,4)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested(((1,2,3,4),(3,4),(1,2,3,4,5,6,7,8),(1,2,3,4))) == ((1,2,3,4),(3,4),(1,2,3,4,5,6,7,8))\nassert     remove_nested(((1,2,3,4),(3,4),(1,2,3,4,5,6,7,8),(1,2,3,4))) == ((1,2,3,4),(3,4),(1,2,3,4,5,6,7,8))\nassert     remove_nested(((1,2,3,4),(3,4),(1,2,3,4,5,6,7,8),(1,2,3,4,1,2,3,4))) == ((1,2,3,4),(1,2,3,4,5,6,7,8))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 3, 5, 7, 9, 10)\nassert     remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, 10)) == (1, 2, (3, 5, 7, 9), 10)\nassert     remove_nested((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nassert     remove_nested((1, (2, 3, 4), 5, (6, 7), 8, 9, 10)) == (1, (2, 3, 4), 5, (6, 7), 8, 9, 10)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested(test_tup) == ([],)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_list([[1, 2], [1], [1, 2]]) == 3\nassert count_list([[1, 2], [1], []]) == 0\n\n'''\nWrite a python function to count the number of characters in a given list.\n'''\ndef count_char(input_list):\n    '''\n    Write a python function to count the number of characters in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_list([]) == 0, '0 lists in the list.'\nassert     count_list([[]]) == 1, '1 list in the list.'\nassert     count_list([[1, 2, 3], [4, 5], [6]]) == 3, '3 lists in the list.'\nassert     count_list([[1, 2, 3, 4, 5], [5, 7, 8], [9]]) == 3, '3 lists in the list.'\nassert     count_list([[1], [1, 2], [3]]) == 3, '3 lists in the list.'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_list([[1, 2, 3], [], [4, 5, 6]]) == 2, \"incorrect\"\nassert     count_list([[1, 2, 3], [4, 5, 6], []]) == 3, \"incorrect\"\nassert     count_list([[], [1, 2, 3], [4, 5, 6]]) == 2, \"incorrect\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_list([[1,2,3,4],[4,5,6,7],[8,9,10,11],[12,13,14,15],[16,17,18,19]]) == 7\nassert     count_list([[1,2,3,4],[4,5,6,7],[8,9,10,11],[12,13,14,15]]) == 4\nassert     count_list([[1,2,3,4],[4,5,6,7],[8,9,10,11],[12,13,14,15]]) == 4\nassert     count_list([[1,2,3,4],1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 5\nassert     count_list([]) == 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_list([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3],\n                    [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3],\n                    [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]    ==    10)\n\nassert     count_list([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3],\n                    [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3],\n                    [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]    ==    5)"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_list([[],[1],[[],2]]) == 3\nassert     count_list([[],[[],2]]) == 3\nassert     count_list([[[],2],[[],2],[[],2]]) == 3\nassert     count_list([[1],[[2]]]) == 2\nassert     count_list([[],[[2]]]) == 1\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([[]]) == 0, \"Expected count_list([]) to be 0\"\nassert     count_list([[],[]]) == 0, \"Expected count_list([[],[]]) to be 0\"\nassert     count_list([[[]]]) == 0, \"Expected count_list([[[]]]) to be 0\"\nassert     count_list([[[[[[[[[[]]]]]]]]]]) == 0, \"Expected count_list([[[[[[[[]]]]]]]]) to be 0\"\nassert     count_list([[]]) == 1, \"Expected count_list([[]]) to be 1\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_list([[1,2],[3],[4],[5]]) == 5\nassert     count_list([[1,2],[3,4],[5],[6],[7]]) == 4\nassert     count_list([[1,2,3,4],[5],[[6],[[7]]]]) == 3\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    last([], 0) == -1\n    last([1, 2, 3, 4], 2) == 3\n    last([1, 2, 3, 4], 1) == 4\n    last([1, 2, 3, 4], 4) == 1\n    last([1, 2, 3, 4], 3) == 2\n    last([1, 2, 3, 4], 0) == -1\n    last([], -1) == -1\n    last([1, 2, 3, 4], 0) == -1\n    last([1, 2, 3, 4], 1) == 4\n    last([1, 2, 3, 4], 2) == 3\n    last([1, 2, 3, 4], 3) == 2\n    last([1, 2, 3, 4], 4) == 1\n    last([1, 2, 3, 4], 5) == -1\n    last([1, 2, 3, 4], 0) == -1\n    last([1, 2, 3, 4], -1) == -1\n    last([1, 2, 3, 4, 5], 2) == 3\n    last([1, 2, 3, 4, 5], 3) == 2\n    last([1, 2, 3, 4, 5], 4) == 4\n    last([1, 2, 3, 4, 5], 5) == 1\n    last([1, 2, 3, 4, 5], 6) == -1\n    last([1, 2, 3, 4, 5], 0) == -1\n    last([1, 2, 3, 4, 5], -1) == -1\n    last([1, 2, 3, 4, 5], -2) == -1\n    last([1, 2, 3, 4, 5], -3) == -1\n    last([1, 2, 3, 4, 5], -4) == -1\n    last([1, 2, 3, 4, 5], -5) == -1\n    last([1, 2, 3, 4, 5], -6) == -1\n    last([1, 2, 3, 4, 5], -7) == -1\n    last([1, 2, 3, 4, 5], -8) == -1\n    last([1, 2, 3, 4, 5], -9) == -1\n    last([1, 2, 3, 4, 5], -10) == -1\n    last([1, 2, 3, 4, 5], -11) == -1\n    last([1, 2, 3, 4, 5], -12) == -1\n    last([1, 2, 3, 4, 5], -13) == -1\n    last([1, 2, 3, 4, 5], -14) == -1\n    last([1, 2, 3, 4, 5], -15) == -1\n    last([1, 2, 3, 4, 5], -16) == -1\n    last([1, 2, 3, 4, 5], -17) == -1\n    last([1, 2, 3, 4, 5], -18) == -1\n    last([1, 2, 3, 4, 5], -19) == -1\n    last([1, 2, 3, 4, 5], -20) == -1\n    last([1, 2, 3, 4, 5], -21) == -1\n    last([1, 2, 3, 4, 5], -22) == -1\n    last([1, 2, 3, 4, 5], -23) == -1\n    last([1, 2, 3, 4, 5], -24) == -1\n    last([1, 2, 3, 4, 5], -25) == -1\n    last([1, 2, 3, 4, 5], -26) == -1\n    last([1, 2, 3, 4, 5], -27) == -1\n    last([1, 2, 3, 4, 5], -28) == -1\n    last([1, 2, 3, 4, 5], -29) == -1\n    last([1, 2, 3, 4, 5], -30) == -1\n    last([1, 2, 3, 4, 5], -31) == -1\n    last([1, 2, 3, 4, 5], -32) == -1\n    last([1, 2, 3, 4, 5], -33) == -1\n    last([1, 2, 3, 4, 5], -34) == -1\n    last([1, 2, 3, 4, 5], -35) == -1\n    last([1, 2, 3, 4, 5], -36) == -1\n    last([1, 2, 3, 4, 5], -37) == -1\n    last([1, 2, 3, 4, 5], -38) == -1\n    last([1, 2, 3, 4, 5], -39) == -1\n    last([1, 2, 3, 4, 5], -40) == -1\n    last([1, 2, 3, 4, 5], -41) == -1\n    last([1, 2, 3, 4, 5], -42) == -1\n    last([1, 2, 3, 4, 5], -43) == -1\n    last([1, 2, 3, 4, 5], -44) == -1\n    last([1, 2, 3, 4, 5], -45) == -1\n    last([1, 2, 3, 4, 5], -46) == -1\n    last([1, 2, 3, 4, 5], -47) == -1\n    last([1, 2, 3, 4, 5], -48) == -1\n    last([1, 2, 3, 4, 5], -49) == -1\n    last([1, 2, 3, 4, 5], -50) == -1\n    last([1, 2, 3, 4, 5], -51) == -1\n    last([1, 2, 3, 4, 5], -52) == -1\n    last([1, 2, 3, 4, 5], -53) == -1\n    last([1, 2, 3, 4, 5], -54) == -1\n    last([1, 2, 3, 4, 5], -55) == -1\n    last([1, 2, 3, 4, 5], -56) == -1\n    last([1, 2, 3, 4, 5], -57) == -1\n    last([1, 2, 3, 4, 5], -58) == -1\n    last([1, 2, 3, 4, 5], -59) == -1\n    last([1, 2, 3, 4, 5], -60) == -1\n    last([1, 2, 3, 4, 5], -61) == -1\n    last([1, 2, 3, 4, 5], -62) == -1\n    last([1, 2, 3, 4, 5], -63) == -1\n    last([1, 2, 3, 4, 5], -64) == -1\n    last([1, 2, 3, 4, 5], -65) == -1\n    last([1, 2, 3, 4, 5], -66) == -1\n    last([1, 2, 3, 4, 5], -67) == -1\n    last([1, 2, 3, 4, 5], -68) == -1\n    last([1, 2, 3, 4, 5], -69) == -1\n    last([1, 2, 3, 4, 5], -70) == -1\n    last([1, 2, 3, 4, 5], -71) == -1\n    last([1, 2, 3, 4, 5], -72) == -1\n    last([1, 2, 3, 4, 5], -73) == -1\n    last([1, 2, 3, 4, 5], -74) == -1\n    last([1, 2, 3, 4, 5], -75) == -1\n    last([1, 2, 3, 4, 5], -76) == -1\n    last([1, 2, 3, 4, 5], -77) == -1\n    last([1, 2, 3, 4, 5], -78) == -1\n    last([1, 2, 3, 4, 5], -79) == -1\n    last([1, 2, 3, 4, 5], -80) == -1\n    last([1, 2, 3, 4, 5], -81) == -1\n    last([1, 2, 3, 4, 5], -82) == -1\n    last([1, 2, 3, 4, 5], "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 9, 'incorrect last'\nassert     last([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 6, 'incorrect last'\nassert     last([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 7, 'incorrect last'\nassert     last([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 9, 'incorrect last'\nassert     last([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == -1, 'incorrect last'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last([5,6,7,1,2,3,4], 5) == 6, \"Wrong\"\nassert     last([5,6,7,1,2,3,4], 6) == 6, \"Wrong\"\nassert     last([5,6,7,1,2,3,4], 7) == 7, \"Wrong\"\nassert     last([5,6,7,1,2,3,4], 1) == 4, \"Wrong\"\nassert     last([5,6,7,1,2,3,4], 2) == 2, \"Wrong\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last([1,2,3,4,5,6,7,8], 5) == 6\nassert     last([1,2,3,4,5,6,7,8], 0) == 5\nassert     last([1,2,3,4,5,6,7,8], 8) == 7\nassert     last([1,2,3,4,5,6,7,8], 9) == 8\nassert     last([], 0) == 0\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([], -1) == -1\nassert     last([1], 1) == 0\nassert     last([1,2,3], 3) == 2\nassert     last([1,2,3], 2) == 2\nassert     last([1,2,3], 1) == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last([4, 5, 6, 7, 8], 8) == 5, 'wrong'\nassert     last([1, 2, 3, 4, 5], 0) == -1, 'wrong'\nassert     last([1, 2, 3, 4, 5], 5) == -1, 'wrong'\nassert     last([1, 2, 3, 4, 5], 6) == 4, 'wrong'\nassert     last([1, 2, 3, 4, 5], 7) == -1, 'wrong'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert last([1,2,3,4,5],4) == 3,'should find 3'\nassert last([1,2,3,4,5],5) == 5,'should find 5'\nassert last([1,2,3,4,5],2) == 2,'should find 2'\nassert last([1,2,3,4,5],6) == None,'should find None'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last([1,2,3,4,5,6],5) == 5, \"Wrong Answer\"\nassert     last([1,2,3,4,5,6],6) == 5, \"Wrong Answer\"\nassert     last([1,2,3,4,5,6],4) == 4, \"Wrong Answer\"\nassert     last([1,2,3,4,5,6],1) == 6, \"Wrong Answer\"\nassert     last([1,2,3,4,5,6],2) == 5, \"Wrong Answer\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last([],1) == -1\nassert     last([1,2,3,4,5],2) == 4\nassert     last([1,2,3,4,5],5) == 5\nassert     last([1,2,3,4,5],0) == -1\nassert     last([1,2,3,4,5],6) == -1\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb('aab') == True, \"incorrect\"\nassert     text_starta_endb('aab') == True, \"incorrect\"\nassert     text_starta_endb('aabcba') == True, \"incorrect\"\nassert     text_starta_endb('aab') == False, \"incorrect\"\nassert     text_starta_endb('a') == False, \"incorrect\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_starta_endb('abcba') == ['abcba', None, None]\nassert     text_starta_endb('a') == ['a', None, None]\nassert     text_starta_endb('abcabcabc') == ['abcabcabc', None, None]\nassert     text_starta_endb('abcabcabcabcabc') == ['abcabcabcabcabcabc', None, None]\nassert     text_starta_endb('abcabcabcabcabcabc') == ['abcabcabcabcabcabcabc', None, None]\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('Abca') == True, 'Should be True'\nassert     text_starta_endb('abcab') == True, 'Should be True'\nassert     text_starta_endb('abcb') == False, 'Should be False'\nassert     text_starta_endb('abcaab') == False, 'Should be False'\nassert     text_starta_endb('abcbabc') == False, 'Should be False'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb(\"abab\") == True\nassert     text_starta_endb(\"abcb\") == True\nassert     text_starta_endb(\"a\") == False\nassert     text_starta_endb(\"ababa\") == True\nassert     text_starta_endb(\"ababc\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('aac') == True\nassert     text_starta_endb('abc') == False\nassert     text_starta_endb('abb') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb('aab') == True\nassert     text_starta_endb('aab') == True\nassert     text_starta_endb('ab') == False\nassert     text_starta_endb('a') == False\nassert     text_starta_endb('a') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_starta_endb('') == []\nassert     text_starta_endb('a') == [0]\nassert     text_starta_endb('ab') == [1]\nassert     text_starta_endb('aab') == [2]\nassert     text_starta_endb('aba') == [3]\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_starta_endb(\"abcd\") == False\nassert     text_starta_endb(\"a\") == True\nassert     text_starta_endb(\"ab\") == True\nassert     text_starta_endb(\"abc\") == True\nassert     text_starta_endb(\"abcd\") == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb('a') == False\nassert     text_starta_endb('abbbb') == True\nassert     text_starta_endb('abbbbbbbb') == False\nassert     text_starta_endb('aabbbbbbaaaa') == True\nassert     text_starta_endb('abbbbbbbbaaaa') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb('') == False\nassert     text_starta_endb('aaabbb') == True\nassert     text_starta_endb('aaabbba') == False\nassert     text_starta_endb('aaabbbaa') == False\nassert     text_starta_endb('aab') == False\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({'a':1, 'b':2}) == 3\nassert     return_sum({'a':1, 'b':2, 'c':3}) == 6\nassert     return_sum({'a':1, 'b':2, 'c':3, 'd':4}) == 9\nassert not     return_sum({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}) == 9\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!')"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     return_sum({}) == 0, 'Empty dictionary.'\nassert     return_sum({'a':1, 'b':2, 'c':3}) == 6, 'Wrong result.'"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({\"a\":1, \"b\":2}) == 3, \"Wrong return value\"\nassert     return_sum({\"a\":1, \"b\":2, \"c\":3}) == 6, \"Wrong return value\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     return_sum({'a': 1, 'b': 2}) == 3, 'Wrong result: 3'\nassert     return_sum({}) == 0, 'Wrong result: 0'\nprint('\"Run\" is good. How about some tests?')"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     return_sum({'a':1, 'b':2}) == 3, 'incorrect'\nassert     return_sum({'a':1, 'b':2, 'c':3}) == 6, 'incorrect'\nassert     return_sum({}) == 0, 'incorrect'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n\nassert \n\ndef return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     return_sum({\n    'a': 2,\n    'b': 3,\n    'c': 4,\n    }) == 6, 'incorrect return_sum'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     return_sum({\n    'a':1,\n    'b':2,\n    'c':3\n    }) == 6\nassert return_sum({\n    'a':1,\n    'b':2,\n    'c':3\n    }) == 6\nassert return_sum({\n    'a':1,\n    'b':2,\n    'c':3\n    }) == 6\nassert return_sum({\n    'a':1,\n    'b':2,\n    'c':3\n    }) == 6\n\n\ndef return_sum_2(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     return_sum({'key1':1,'key2':2}) == 3, \"Test Failed.\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     return_sum({1:2,2:3,3:4,4:5}) == 15\nassert     return_sum({1:2,2:3,3:4}) == 10\nassert     return_sum({1:2}) == 2"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_odd(0) == 0, \"test-1 Failed\"\nassert     sum_odd(1) == 1, \"test-2 Failed\"\nassert     sum_odd(2) == 1, \"test-3 Failed\"\nassert     sum_odd(3) == 3, \"test-4 Failed\"\nassert     sum_odd(4) == 6, \"test-5 Failed\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (1 == sum_odd(1))\nassert     (7 == sum_odd(2))\nassert     (11 == sum_odd(3))\nassert     (18 == sum_odd(4))\nassert     (25 == sum_odd(5))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_odd(10) == sum_odd(20) == sum_odd(100) == 0\nassert     sum_odd(100) == sum_odd(101) == sum_odd(200) == sum_odd(201) == sum_odd(300) == sum_odd(301) == 0\nassert     sum_odd(0) == sum_odd(1) == sum_odd(-1) == sum_odd(-2) == 0\nassert     sum_odd(-10) == sum_odd(-20) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_odd(0) == 0\nassert     sum_odd(1) == 1\nassert     sum_odd(2) == 3\nassert     sum_odd(3) == 5\nassert     sum_odd(4) == 7\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_odd(0,0) == 0\nassert sum_odd(2,2) == 0\nassert sum_odd(4,2) == 4\nassert sum_odd(4,5) == 6\nassert sum_odd(0,1) == 1\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_odd(0) == 0\nassert     sum_odd(1) == 1\nassert     sum_odd(2) == 2\nassert     sum_odd(3) == 5\nassert     sum_odd(4) == 7\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     _sum([1,2,3,4,5,6,7,8,9]) == 45, \"Wrong result\"\nassert _sum([]) == 0, \"Wrong result\"\nassert _sum([1,2,3,4,5]) == 15, \"Wrong result\"\nassert _sum([]) == 0, \"Wrong result\"\n\ndef _mean(arr):  \n    '''\n    Write a python function to find the mean of an array.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert _sum([1, 2, 3, 4]) == 10\nassert _sum([-1, -2, -3, -4]) == -10\nassert _sum([-5, -4, -3, -2, -1]) == -11\nassert _sum([-1, -2, -3, -4, 5]) == -11\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     _sum([0,1,2,3,4,5,6]) == 21, \"_sum: incorrect output\"\n\ndef _mean(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     _sum([1,2,3]) == 6\nassert     _sum([3,4,5]) == 13\nassert     _sum([2,3,4]) == 7\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = []\n    assert _sum(arr) == 0\n\n    arr = [0,0]\n    assert _sum(arr) == 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n_sum([1,2,3,4,5]) == 15\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum(arr) == sum(input_arr) == sum(input_arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     _sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45, \\\n    'Wrong Answer'\n\nassert     _sum([1, 1, 1]) == 3, \\\n    'Wrong Answer'\n\nassert     _sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45, \\\n    'Wrong Answer'\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('The function left_rotate works as expected.')"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_rotate(17,2) == 13\nassert left_rotate(37,3) == 31\nassert left_rotate(17,4) == 9\nassert left_rotate(17,5) == 2\nassert left_rotate(17,6) == 0\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nleft_rotate(0b11111111, 1) == 0b11111111\nassert left_rotate(0b11111111, 2) == 0b00111010\nassert left_rotate(0b11111111, 3) == 0b01111111\nassert left_rotate(0b11111111, 4) == 0b11111110\nassert left_rotate(0b11111111, 5) == 0b11111111\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     left_rotate(1,0) == 1\nassert     left_rotate(0b0101,3) == 0b0101\nassert     left_rotate(0b0101,4) == 0b0100\nassert     left_rotate(0b0101,5) == 0b001\nassert     left_rotate(0b0101,6) == 0b0000\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef right_rotate(n,d):\n    '''\n    Write a function to rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     left_rotate(0b1010011, 4) == 0b1010011\nassert     left_rotate(0b1010011, 1) == 0b01010011\nassert     left_rotate(0b01010011, 1) == 0b02010011\nassert     left_rotate(0b01010011, 5) == 0b00111011\nassert left_rotate(0b100111011, 2) == 0b00111000\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nleft_rotate(10,1) ==  2\nleft_rotate(10,0) ==  10\nleft_rotate(10,5) ==  4\nleft_rotate(10,8) ==  0\nleft_rotate(10,9) ==  11\nleft_rotate(10,17) ==  13\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nleft_rotate(0b1111,2) == 0b0101\nprint('OK')\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_all_spaces('') == \"\"\nassert     remove_all_spaces('abc') == \"abc\"\nassert     remove_all_spaces('   abc   ') == \"abc\"\nassert     remove_all_spaces('  abc  ') == \"abc\"\nassert     remove_all_spaces('a\\nb\\nc') == \"abc\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_all_spaces(\"Hello world\") == \"Hello world\"\nassert     remove_all_spaces(\" Hello world \") == \"Hello world\"\nassert     remove_all_spaces(\"  Hello world  \") == \"Hello world\"\nassert     remove_all_spaces(\" Hello world \") == \"Hello world\"\nassert     remove_all_spaces(\"  \") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_all_spaces('a      ') == 'a'\nassert     remove_all_spaces('  a') == 'a'\nassert     remove_all_spaces('a\\n') == 'a'\nassert     remove_all_spaces('a\\t') == 'a'\nassert     remove_all_spaces(' ') == ''\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\" \") == \" \"\nassert     remove_all_spaces(\" hello world\") == \"hello world\"\nassert     remove_all_spaces(\" a\") == \"a\"\nassert     remove_all_spaces(\"   hello   world\") == \"hello world\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_all_spaces('') == ''\nassert     remove_all_spaces(' ') == ''\nassert     remove_all_spaces(' ') ==''\nassert     remove_all_spaces('a b  c') == 'a b  c'\nassert     remove_all_spaces('a\\nb\\tc') == 'a b c'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_all_spaces(\"          test1    \") == \"test1\"\nassert     remove_all_spaces(\"test     \") == \"test\"\nassert     remove_all_spaces(\"   test    \") == \"test\"\nassert     remove_all_spaces(\"   test\") == \"test\"\nassert     remove_all_spaces(\"   \") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_all_spaces('') == ''\nassert     remove_all_spaces(' ') == ''\nassert     remove_all_spaces('   ') =='  '\nassert     remove_all_spaces('a') == 'a'\nassert     remove_all_spaces('   a') =='  a'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_all_spaces(\"     \") == \"\", \"should be empty\"\nassert     remove_all_spaces(\"  \") == \"\", \"should be empty\"\nassert     remove_all_spaces(\"  word\") == \"word\", \"should be word\"\nassert     remove_all_spaces(\"hello world\") == \"hello world\", \"should be hello world\"\nassert     remove_all_spaces(\"\") == \"\", \"should be empty\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces(\"  a   b  c\") == \"a b c\"\nassert     remove_all_spaces(\"  \") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\nassert     remove_all_spaces(\"  \") == \"\"\nassert     remove_all_spaces(\"\\t\") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_all_spaces('abc xyz') == 'abcxyz', 'Should return abcxyz'\nassert     remove_all_spaces(' abc') == 'abc', 'Should return abc'\nassert     remove_all_spaces(' abc xyz ') == 'abcxyz', 'Should return abcxyz'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nthree_equal(3,5,3)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_three_equal(1,1,1) == 3, \"WRONG\"\nassert     test_three_equal(1,1,2) == 2, \"WRONG\"\nassert     test_three_equal(1,2,1) == 1, \"WRONG\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_three_equal(10,10,10) == 3, 'test_three_equal function is wrong'\nassert     test_three_equal(10,20,10) == 2, 'test_three_equal function is wrong'\nassert     test_three_equal(10,10,20) == 0, 'test_three_equal function is wrong'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_three_equal(1,2,3) == 1\nassert     test_three_equal(1,1,1) == 3\nassert     test_three_equal(1,2,1) == 2\nassert     test_three_equal(1,2,2) == 2\nassert     test_three_equal(1,2,3) == 0"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_three_equal(5,5,5) == 0\nassert     test_three_equal(5,5,6) == 1\nassert     test_three_equal(5,5,10) == 2\nassert     test_three_equal(5,5,5) == 3\nassert     test_three_equal(5,6,6) == 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    three_equal(2,2,2) == 3\n    three_equal(2,2,2) == 2\n    three_equal(2,2,2) == 0\n\nprint('Testing:')\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,2))\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_rotation([1, 2, 3, 4]) == 2\nassert count_rotation([1, 2, 3]) == 0\nassert count_rotation([1, 2, 3, 4, 5]) == 2\nassert count_rotation([1, 2, 3, 4, 5, 6]) == 1\nassert count_rotation([1, 2, 3, 4, 5, 6, 7]) == 2\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_rotation([]) == 0\nassert count_rotation([1, 2, 3, 4, 5]) == 1\nassert count_rotation([2, 3, 4, 5, 1]) == 2\nassert count_rotation([3, 4, 5, 1, 2]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_rotation([]) == 0\nassert \ncount_rotation([-4, -5, -6, -7, -8, -9]) == 1\nassert \ncount_rotation([-4, -5, -6, -7, -8, -9, -1]) == 2\nassert \ncount_rotation([-4, -5, -6, -7, -8, -9, -1, -2]) == 3\nassert \ncount_rotation([-4, -5, -6, -7, -8, -9, -1, -2, -3]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_rotation([1, 1, 2, 3, 4]) == 0, \"Should be zero\"\nassert     count_rotation([4, 4, 4, 4, 1, 2, 3]) == 5, \"Should be five\"\nassert     count_rotation([1, 1, 2, 3, 4, 4, 4]) == 3, \"Should be three\"\nassert     count_rotation([4, 5, 6, 7, 8, 4, 4]) == 3, \"Should be three\"\nassert     count_rotation([4, 3, 4, 4, 1, 2, 3]) == 4, \"Should be four\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_rotation([]) == 0, \"Should be 0\"\nassert     count_rotation([1]) == 0, \"Should be 0\"\nassert     count_rotation([1,2]) == 1, \"Should be 1\"\nassert     count_rotation([1,2,3]) == 2, \"Should be 2\"\nassert     count_rotation([1,2,3,4]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_rotations(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_rotation([]) == 0, \"Input []\"\nassert     count_rotation([1,2,3]) == 0, \"Input [1,2,3]\"\nassert     count_rotation([1,3,2]) == 0, \"Input [1,3,2]\"\nassert     count_rotation([1,3,3]) == 1, \"Input [1,3,3]\"\nassert     count_rotation([1,3,2,3]) == 2, \"Input [1,3,2,3]\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ncount_rotation([2, 1, 3, 4, 5]) == 3\ncount_rotation([1, 2, 3, 4, 5]) == 0\ncount_rotation([3, 2, 1, 4, 5]) == 3\ncount_rotation([3, 2, 5, 1, 4]) == 3\ncount_rotation([3, 2, 5, 4, 1]) == 3\ncount_rotation([1, 2, 3, 4, 5]) == 0\ncount_rotation([1, 2, 3, 4, 5, 6]) == 5\ncount_rotation([6, 7, 8, 9, 10, 11]) == 5\ncount_rotation([10, 11, 12, 13, 14, 15]) == 5\ncount_rotation([20, 30, 40, 50, 60, 70]) == 3\ncount_rotation([-1, 2, 3, 4, 5]) == 0\ncount_rotation([0, 0, 1, 2, 3, 4, 5]) == 0\ncount_rotation([-1, -2, -3, -4, -5]) == 0\ncount_rotation([-1, -2, -3, -4, -5, -6]) == 1"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_perfect_square(1) == False, \"The given number must be a perfect square\"\nassert is_perfect_square(2) == False, \"The given number must be a perfect square\"\nassert is_perfect_square(3) == False, \"The given number must be a perfect square\"\nassert is_perfect_square(4) == False, \"The given number must be a perfect square\"\nassert is_perfect_square(5) == False, \"The given number must be a perfect square\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_perfect_square(25) == True\nassert is_perfect_square(76) == False\nassert is_perfect_square(28) == True\nassert is_perfect_square(90) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"Checking is_perfect_square: OK\")"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport math\n\ndef is_perfect_square(n):\n    \"\"\"\n    If n can be perfect square then return n, else return False.\n    \"\"\"\n    # General idea: check for the following cases\n    # 1) n = 2^(r) * k, where k > 1\n    # 2) n = 2^(r+1) * k, where k > 1\n    # 3) n = 2^(r+2) * k, where k > 1\n\n    # 2) n = 2^(r+1) * k, where k > 1\n    # if r is odd, 2^r * k = 2^(r+1) * k-1\n    # if r is even, 2^r * k = 2^(r+1) * k-2\n    # hence, k-2 = 2^(r+1) * k-2\n\n    # 3) n = 2^(r+2) * k, where k > 1\n    # if r is odd, 2^r * k = 2^(r+2) * k-2\n    # if r is even, 2^r * k = 2^(r+2) * k-1\n    # hence, k-1 = 2^(r+2) * k-1\n    # hence, k = 2^(r+2) * k-2\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(is_perfect_square(16))\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_palindrome(s) :\n    '''\n    Write a function to check whether a string is a palindrome or not\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print('\\nCheck the correctness of function: is_perfect_square')\n    print(is_perfect_square(16))\n    print(is_perfect_square(9))\n    print(is_perfect_square(2))\n    print(is_perfect_square(9))\n\n\n'''\nOther test cases:\n    1. Complete the function to check whether the given number is perfect square or not.\n    2. Complete the function to check whether the given number is a perfect square or not.\n    3. Complete the function to check whether the given number is a perfect square or not.\n    4. Complete the function to check whether the given number is a perfect square or not.\n    5. Complete the function to check whether the given number is a perfect square or not.\n    6. Complete the function to check whether the given number is a perfect square or not.\n    7. Complete the function to check whether the given number is a perfect square or not.\n    8. Complete the function to check whether the given number is a perfect square or not.\n    9. Complete the function to check whether the given number is a perfect square or not.\n'''\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_perfect_square(n):\n    '''\n    Given a non-negative number, check if it is a perfect square.\n    '''\n    for i in range(1,n+1):\n        if i**2 == n:\n            return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('\\nTest 1: ', is_product_even([1, 2, 3, 4]))\nassert not \nprint('Test 2: ', is_product_even([1, 2, 3, 4, 5, 6]))\nprint('\\n')"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_product_even([1, 2, 3, 4]) == True, \"Error in testing 1st case\"\nassert     is_product_even([1, 2, 3, 4, 5]) == False, \"Error in testing 2nd case\"\nassert     is_product_even([]) == False, \"Error in testing 3rd case\"\nassert     is_product_even([-1, -2, -3, -4]) == False, \"Error in testing 4th case\"\nassert     is_product_even([-1, -2, -3, -4, -5]) == False, \"Error in testing 5th case\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_product_even([1,2,3,4]) == True\nassert     is_product_even([1,2,3,4,5,6]) == False\nassert     is_product_even([1,2,3,4,5,6,7,8,9]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_product_even_2(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_product_even(list(range(10, 0, -2)))\nassert is_product_even(list(range(10, 0, -2))) == False\nassert is_product_even([]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_product_even([1, 2, 3]) == True\nassert     is_product_even([1, 2, 3, 4]) == False\nassert     is_product_even([1, 2, 3, 4, 5]) == True\nassert     is_product_even([1, 2, 3, 4, 5, 6]) == True"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_product_even([1,2,3,4,5]) == True, 'Error case 1'\nis_product_even([1,2,3,4,5,6]) == False, 'Error case 2'\nis_product_even([1,2,3,4,5,6,7]) == False, 'Error case 3'\nis_product_even([1,2,3,4,5,6,7,8,9,10]) == False, 'Error case 4'\nis_product_even([1,2,3,4,5,6,7,8,9,10,11,12]) == False, 'Error case 5'\nis_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_product_even([1,3,4,5]) == False\nassert is_product_even([2,4,6,8]) == False\nassert is_product_even([1,2,3,4,5]) == True\nassert not is_product_even([1,2,3,4,6]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('pass') if is_product_even([1,2,3,4,5]) == False else print('fail')\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_list([[1,2],[3,4],[2,1],[2,2],[1,1]]) == [4,4]\nassert     max_sum_list([[1,2],[3,4],[2,1],[2,2],[1,1]]) == [4,4]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(max_sum_list(\n        [[7, -3, 5],\n         [-2, 5, 8],\n         [-7, -1, 3]]\n        ))\n    assert \n    print(max_sum_list(\n        [[-6, -6, -9, -1],\n         [-2, -4, -6, -5],\n         [0, -2, 3, -1]]\n        ))\n    assert \n    print(max_sum_list(\n        [[-6, -6, -9, -1],\n         [-2, -4, -6, -5],\n         [-1, 3, -2, 4]]\n        ))\n    assert \n    print(max_sum_list(\n        [[-1, -1, -1, -1],\n         [-1, -1, -1, -1],\n         [-1, -1, -1, -1]]\n        ))\n    "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum_list([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == [[5,6,7,8], [9,10,11,12]]\nassert     max_sum_list([[2,3,4], [5,6,7,8], [9,10,11,12]]) == [[9,10,11,12]]\nassert     max_sum_list([[2,3,4], [5,6,7,8], [9]]) == [[9]]\nassert     max_sum_list([[2,3,4], [5,6,7,8], [9,10,11]]) == [[2,3,4], [5,6,7,8]]\nassert     max_sum_list([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == [[1,2,3,4], [5,6,7,8]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum_list([]) == []\nassert     max_sum_list([[1]]) == [[1]]\nassert     max_sum_list([[1,2], [1,2,3]]) == [[1,2], [1,2,3]]\nassert     max_sum_list([[1,2], [1,2,3]]) == [[1,2], [1,2,3]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_list( (1,2,3,4) ) == 4\nassert     max_sum_list( (1,2,3,4,5) ) == 10\nassert     max_sum_list( (1,2,3,4,5,6) ) == 12\nassert     max_sum_list( (1,2,3,4,5,6,7) ) == 15\nassert     max_sum_list( (1,2,3,4,5,6,7,8) ) == 18\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_list([[1],\n                    [2],\n                    [3],\n                    [-4],\n                    [5],\n                    [6]]) == [[1],\n                    [2],\n                    [3],\n                    [-4],\n                    [5],\n                    [6]]\nassert     max_sum_list([[3, -1, 2, -7, 8, -1],\n                    [-2, 0, 2],\n                    [7, -3, 1, 2],\n                    [1, 3, -2, 0, -4],\n                    [5, 6, -5, -3]]) == [[3, -1, 2, -7, 8, -1],\n                    [7, -3, 1, 2],\n                    [1, 3, -2, 0, -4],\n                    [5, 6, -5, -3]]\nassert     max_sum_list([[-4, -1, -2, -3, 0],\n                    [1, 3, -2, 0, -4],\n                    [1, 2, 3, -2, -4],\n                    [1, -2, 0, 4, -6],\n                    [0, 1, -2, -3, 4],\n                    [-4, 2, 4, 2, -2],\n                    [-1, -3, -1, 2, -3]]) == [[-4, -1, -2, -3, 0],\n                    [1, 3, -2, 0, -4],\n                    [1, 2, 3, -2, -4],\n                    [1, -2, 0, 4, -6],\n                    [0, 1, -2, -3, 4],\n                    [-4, 2, 4, 2, -2],\n                    [-1, -3, -1, 2, -3]]\n\n\ndef max_sum_list_v2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # max_list = [0] * len(lists)\n    # max_sum = 0\n    # for i in range(len(lists)):\n    #     for j in range(len(lists[i])):\n    #         if max_list[i] < lists[i][j]:\n    #             max_list[i] = lists[i][j]\n    #             max_sum = max_sum + lists[i][j]\n\n    # return max_sum\n    max_list = [[]]\n    max_sum = 0\n    for i in range(len(lists)):\n        max_list.append(lists[i][:])\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_sum_of_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert max_sum_list([[0, 1, 2], \n                     [-1, -1, 1], \n                     [-1, -1, -1], \n                     [1, -1, 1], \n                     [-1, 1, -1], \n                     [-1, -1, 1], \n                     [-1, 1, -1]]) == [[0, 1, 2], \n                                       [-1, -1, 1], \n                                       [-1, -1, -1], \n                                       [1, -1, 1], \n                                       [-1, 1, -1], \n                                       [-1, -1, 1], \n                                       [-1, 1, -1]], \"Wrong answer\"\nassert max_sum_list([[0, 1, 2], \n                     [-1, -1, 1], \n                     [-1, -1, -1], \n                     [1, -1, 1], \n                     [-1, 1, -1], \n                     [-1, -1, 1], \n                     [-1, 1, -1]]) == [[0, 1, 2], \n                                       [-1, -1, 1], \n                                       [-1, -1, -1], \n                                       [1, -1, 1], \n                                       [-1, 1, -1], \n                                       [-1, -1, 1], \n                                       [-1, 1, -1]], \"Wrong answer\"\nassert max_sum_list([[0, 1, 2], \n                     [-1, -1, 1], \n                     [-1, -1, -1], \n                     [1, -1, 1], \n                     [-1, 1, -1], \n                     [-1, -1, 1], \n                     [-1, 1, -1]]) == [[0, 1, 2], \n                                       [-1, -1, 1], \n                                       [-1, -1, -1], \n                                       [1, -1, 1], \n                                       [-1, 1, -1], \n                                       [-1, -1, 1], \n                                       [-1, 1, -1]], \"Wrong answer\"\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum_list([\n    [-1, 0],\n    [3, 4],\n    [2, 6],\n    [8, 9],\n    [10, -9]\n]) == [[-1, 0],\n    [3, 4],\n    [10, -9],\n    [8, 9]]\nassert max_sum_list([\n    [0, 0],\n    [-1, -1],\n    [1, -1],\n    [-1, -1]\n]) == [[0, 0],\n    [1, -1],\n    [1, -1]]\nassert max_sum_list([\n    [1],\n    [1],\n    [1],\n    [1],\n    [1]\n]) == [[1]]\nassert max_sum_list([\n    [],\n    [],\n    [],\n    [],\n    []\n]) == []\n\ndef max_sum_list_bis(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not max_run_uppercase('AbCcDDDDEEE') == 1, 'ABCDDDDEEE'\nassert max_run_uppercase('AbCcDDDDEEE') == 3, 'ABCD'\nassert max_run_uppercase('abcdefghijklmnopqrstuvwxyz') == 27\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_run_uppercase('LEET') == 3, '1'\nassert     max_run_uppercase('L') == 1, '2'\nassert     max_run_uppercase('abc123') == 3, '3'\nassert     max_run_uppercase('AbC') == 3, '4'\nassert     max_run_uppercase('abc123Abc') == 3, '5'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_run_uppercase(\"GEeks for geeks\") == 5, \"More than 5\"\nassert     max_run_uppercase(\"Geeks for Geeks\") == 2, \"More than 2\"\nassert     max_run_uppercase(\"abcdef\") == 0, \"Empty\"\nassert     max_run_uppercase(\"ABCDEFG\") == 3, \"More than 3\"\nassert     max_run_uppercase(\"ABCDEFGHIJK\") == 4, \"More than 4\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_run_uppercase('GeeksforGeeks') == 'GKGS'\nassert max_run_uppercase('Hello World') == 'WL'\nassert max_run_uppercase('GeeksforGeeks') == 'GKGS'\nassert max_run_uppercase('GeeksforGeeks') == 'GKGS'\nassert max_run_uppercase('GeeksforGeeks') == 'GKGS'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase('AABC') == 3\nassert     max_run_uppercase('AABCAA') == 3\nassert     max_run_uppercase('AAABCDDD') == 1\nassert     max_run_uppercase('AAABCDDDD') == 4\nassert     max_run_uppercase('AAABCDDDDAA') == 4\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_run_uppercase(\"GeeksForGeeks\") == \"GKFORG\"\nassert max_run_uppercase(\"GeeksQuiz\") == \"QSGE\"\nassert max_run_uppercase(\"geeksQuiz\") == \"QSGE\"\nassert max_run_uppercase(\"GEEKS\") == \"G\"\nassert max_run_uppercase(\"gEEKS\") == \"E\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_run_uppercase(\"\") == 0\nassert max_run_uppercase(\"A\") == 1\nassert max_run_uppercase(\"AB\") == 2\nassert max_run_uppercase(\"AAB\") == 3\nassert max_run_uppercase(\"AAABB\") == 3\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfirst_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 7\nfirst_odd([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,957,958,960,962,964,966,968,970,972,974,976,977,978,980,982,984,986,988,990,992,994,996,998,1000,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,1496,1498,1500,1502,1504,1506,1508,1510,1512,1514,1516,1518,1520,1522,1524,1526,1528,1530,1532,1534,1536,1538,1540,1542,1544,1546,1548,1550,1552,1554,1556,1558,1560,1562,1564,1566,1568,1570,1572,1574,1576,1578,1580,1582,1584,1586,1588,1590,1592"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_odd([2, 5, 6, 8, 9, 1]) == 3\nassert     first_odd([2, 5, 6, 8, 9, 1, 3, 4]) == 3\nassert     first_odd([2, 5, 6, 8, 9, 1, 3, 4, 5]) == 4\nassert     first_odd([2, 5, 6, 8, 9, 1, 3, 4, 5, 6]) == 4\nassert     first_odd([2, 5, 6, 8, 9, 1, 3, 4, 5, 6, 7, 8]) == 4\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_odd([3,4,5,6]) == 5\nassert     first_odd([3,4,5,6]) == 7\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert(first_odd([1, 2, 3, 4, 5]) == 3)\n    assert(first_odd([1, 2, 3, 4, 5, 6]) == 6)\n    assert(first_odd([1, 2, 3, 4, 5, 6, 8]) == 8)\n    "
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(f\"The output of first_odd is {first_odd([3, 4, 5, 6])}\") # 5\nassert \nprint(f\"The output of first_odd is {first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9])}\") # 7\nassert \nprint(f\"The output of first_odd is {first_odd([1, 2, 3, 4, 5, 6])}\") # 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5, \"Error in test case 1\"\nassert     first_odd([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 20, \"Error in test case 2\"\nassert     first_odd([]) == None, \"Error in test case 3\"\nassert     first_odd([]) == None, \"Error in test case 4\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_odd([\"hello\", 20, \"bye\"]) == 20\nassert     first_odd([10, 20, 30]) == None\nassert     first_odd([10, 20, 33, 40]) == 33\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_odd([-2, 0, 1, 2, 3, 4]) == 1, \"First odd is 1\"\nassert     first_odd([1, 2, 3, 4, 5]) == -1, \"First odd is -1\"\nassert     first_odd([]) == -1, \"First odd is -1\"\nassert     first_odd([1]) == 1, \"First odd is 1\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_tup = (1,3,4,5,2)\nprint(check_K(test_tup, 3))\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(check_K((1,2), 5))"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K(tuple({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}), 2) == True\nassert     check_K(tuple({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}), 1) == False\nassert     check_K(tuple({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}), 5) == False\nassert     check_K(tuple({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}), 5) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_K(test_tup, 0) == False, \"Should return False\"\nassert     check_K(test_tup, 1) == True, \"Should return True\"\n\nprint(\"You passed the assignment!\""
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_K((1,3,5), 2) == True, 'Expected: True\\nActual: False'\nassert     check_K((2,3,5), 2) == False, 'Expected: False\\nActual: True'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nConsecutive Sums\n'''\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_K(test_tup, 1) == False, \"return False\"\nassert     check_K(test_tup, 2) == True, \"return True\"\nassert     check_K(test_tup, 2) == False, \"return False\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_ind_of_K(test_tup, K):\n    '''\n    Write a function that returns the index of the given tuple in a list\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_K(((1, 2),(2, 3),(1, 3),(1, 2)), 2) == True\nassert check_K(((1, 2),(2, 3),(1, 3),(1, 2)), 3) == False\n\nprint(\"Coding complete!\")"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_smaller((1, 2), (4, 5)) == True, 'The first tuple should be smaller than the second tuple'\nassert     check_smaller((1, 2), (2, 1)) == False, 'The first tuple should be smaller than the second tuple'\nassert     check_smaller((2, 1), (1, 2)) == False, 'The first tuple should be smaller than the second tuple'\nassert     check_smaller((1, 2), (1, 4)) == False, 'The first tuple should be smaller than the second tuple'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller(test_tup1, test_tup2) == True, \"Error in check_smaller\"\nassert     check_smaller(test_tup2, test_tup1) == False, \"Error in check_smaller\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not check_smaller((1, 2, 3, 4), (2, 1, 4, 3)), \"Should be False\"\nassert check_smaller((2, 1, 4, 3), (1, 2, 3, 4)), \"Should be True\"\nassert not check_smaller((1, 2, 3, 4), (2, 5, 4, 3)), \"Should be True\"\n\n\ndef count_smaller_than_ten(test_tup):\n    '''\n    Write a function to count the number of elements in a tuple that are smaller than ten.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_smaller(('5', '7'), ('5', '6') ) == True\nassert     check_smaller(('6', '7'), ('5', '6') ) == False\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!')"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (6, 7, 8, 9, 10)\ntest_tup3 = (11, 12, 13, 14, 15)\nassert check_smaller(test_tup1, test_tup2)\nassert check_smaller(test_tup1, test_tup3) == False\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!')\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((3, 1, 4), (1, 2, 3)) == True, 'Wrong'\nassert     check_smaller((5, 1, 5), (1, 3, 3)) == True, 'Wrong'\nassert     check_smaller((3, 2, 5), (1, 2, 3)) == False, 'Wrong'\nassert     check_smaller((3, 1, 4), (1, 3, 4)) == False, 'Wrong'\nassert     check_smaller((0, 0, 0), (1, 1, 1)) == False, 'Wrong'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_smaller((3, 4), (5, 2)) == False, \"Your check_smaller is wrong!\"\nassert     check_smaller((1, 2), (3, 4)) == True, \"Your check_smaller is wrong!\"\nassert     check_smaller((1, 1), (1, 1)) == False, \"Your check_smaller is wrong!\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1,3,5), (5,1,9)) == True, 'First tuple should be smaller than second tuple'\nassert     check_smaller((1,3,5), (5,5,5)) == False, 'Second tuple should be smaller than first tuple'\nassert     check_smaller((1,3,5), (3,3,5)) == True, 'Second tuple should be smaller than first tuple'\nassert     check_smaller((1,3,5), (6,6,5)) == False, 'First tuple should be smaller than second tuple'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller((5,4), (2,1,3)) == True\nassert     check_smaller((5,4), (1,3)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((1,2,3), (3,2,1)) == False\nassert     check_smaller((1,3,2), (1,2,3)) == True\nassert     check_smaller((3,2,1), (1,2,3)) == True\nassert     check_smaller((1,2,1), (1,2,3)) == True\n"
    }
]