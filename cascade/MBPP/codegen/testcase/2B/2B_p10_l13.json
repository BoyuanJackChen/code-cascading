[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements([1, 2, 4, 6, 10], \n    [2, 4, 10, 100, 4]) == True, \"incorrect\"\nassert     similar_elements([1, 2, 3, 4, 5, 6], \n    [2, 4, 5, 6, 7, 8, 10]) == False, \"incorrect\"\nassert     similar_elements([], \n    [2, 4, 10, 100, 4]) == False, \"incorrect\"\nassert     similar_elements([1, 2, 4, 6, 10], \n    []) == False, \"incorrect\"\nassert     similar_elements([1, 2, 3, 4, 5, 6], \n    [1, 2, 3, 4, 5, 6, 7, 8]) == False, \"incorrect\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements((2, 3, 4, 5, 6), (3, 5, 6, 8, 9, 10)) == (2, 3, 6), 'Wrong result'\nassert     similar_elements((1, 2, 3, 4, 5, 6), (3, 5, 6, 8, 9, 10)) == (1, 2, 4, 5, 6), 'Wrong result'\nassert     similar_elements((1, 2, 3, 4, 5, 6), (1, 2, 4, 5, 7, 8, 9, 10)) == (1, 2, 4, 5), 'Wrong result'\nassert     similar_elements((1, 2, 3, 4, 5, 6), (1, 2, 5, 6, 7, 8, 9, 10)) == (), 'Wrong result'\nassert     similar_elements((1, 2, 3, 4, 5, 6), (2, 3, 5, 6, 7, 8, 9, 10)) == (), 'Wrong result'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     similar_elements((1, 2, 3, 4), (1, 2, 3)) == (1, 2, 3), \\\n        'The first tuple does not contain 1, 2, 3'\nassert similar_elements((1, 2, 3, 4), (1, 2, 3, 4, 5)) == (1, 2, 3, 4), \\\n        'The first tuple does not contain 1, 2, 3, 4'\nassert similar_elements((1, 2, 3, 4), (1, 2, 5)) == (1, 2, 3, 4), \\\n        'The first tuple does not contain 1, 2, 3, 4'\nassert similar_elements((1, 2, 3), (4, 5)) == (), \\\n        'The first tuple does not contain 4, 5'\nassert similar_elements((), (1, 2, 3)) == (), \\\n        'The first tuple does not contain 1, 2, 3'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     similar_elements((), ()) == (), '\\nExpected: (\\), Got: {}'.format(similar_elements((), ()))\nassert     similar_elements((), (1,)) == (), '\\nExpected: (1), Got: {}'.format(similar_elements((), (1,)))\nassert     similar_elements((1,2,3), (4,5,6,7)) == (), '\\nExpected: (1,2,3), Got: {}'.format(similar_elements((1,2,3), (4,5,6,7)))\nassert     similar_elements((1,2,3), (1,2,3)) == (1,2), '\\nExpected: (1,2), Got: {}'.format(similar_elements((1,2,3), (1,2,3)))\nassert     similar_elements((1,2,3), (3,4,5)) == (3,4), '\\nExpected: (3,4), Got: {}'.format(similar_elements((1,2,3), (3,4,5)))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements([1,2,3], [1,2,3]) == (1,2,3), 'First'\nassert     similar_elements([1,2,3], [3,2,1]) == (1,2,3), 'Second'\nassert     similar_elements([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == (1,2,3), 'Third'\nassert     similar_elements([1,2,3], [1,2,3,4,5,6,7]) == (1,2,3), 'Fourth'\nassert     similar_elements([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]) == (1,2,3), 'Fifth'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     similar_elements((1, 2, 3), (2, 3, 4))    ==     [1, 2]\nassert     similar_elements((1, 2, 3), (1, 2, 3))    ==     [1]\nassert     similar_elements((1, 2, 3), (1, 2, 4))    ==     []\nassert     similar_elements((1, 2, 3), (3, 2, 1))    ==     []\nassert     similar_elements((1, 2, 3), (3, 2, 4))    ==     []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements([1, 2, 3], [1, 2, 3]) ==     [1, 2]\nassert     similar_elements([1, 2, 3], [1, 3]) ==     [1, 2]\nassert     similar_elements([1, 2, 3], [1, 4]) ==     [1, 2]\nassert     similar_elements([1, 2, 3], [4, 4]) ==     []\nassert     similar_elements([1, 2, 3], [4, 5, 6]) ==     [1, 2, 3]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     similar_elements(([1,2,3,4,5,6], [3,6,7,1,4,9]), ((1,1,1,1,1,1), (1,1,1,1,1,1))) == ([1,1,1,1,1,1], False)\nassert     similar_elements(([1,2,3,4,5,6], [3,6,7,1,4,9]), ([3,6,7,1,4,9], (1,1,1,1,1))) == ([1,2,3,4,5,6], True)\nassert     similar_elements(([1,2,3,4,5,6], [3,6,7,1,4,9]), ([3,6,7,1,4,9], (1,1,2,3,4,5,6))) == ([1,2,3,4,5,6], True)\nassert     similar_elements(([1,2,3,4,5,6], [3,6,7,1,4,9]), ([3,6,7,1,4,9], (1,1,3,4,5,6))) == ([1,2,3,4,5,6], True)\nassert     similar_elements(([1,2,3,4,5,6], [3,6,7,1,4,9]), ([3,6,7,1,4,9], (1,1,2,3,4,5))) == ([1,2,3,4,5,6], False)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     similar_elements((1, 2, 3, 4), (4, 2, 1, 3)) == (), '1st tuple'\nassert     similar_elements((1, 2, 3, 4), (4, 2, 2, 1)) == (), '2nd tuple'\nassert     similar_elements((1, 2, 3, 4, 5, 6), (4, 2, 1, 3)) == (), '3rd tuple'\nassert     similar_elements((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 7)) == (1, 3, 5), '4th tuple'\n\nprint(\"All test cases have passed!\")"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (similar_elements(('a', 'b'), ('b', 'c')) == set(['b']), 'Wrong output' )\nassert     (similar_elements(('a', 'b', 'c'), ('b', 'c')) == set(['b']), 'Wrong output' )\nassert     (similar_elements(('a', 'b', 'c'), ('a', 'b', 'd')) == set(['a', 'b']), 'Wrong output' )\nassert     (similar_elements(('a', 'b', 'c'), ('a', 'c', 'd')) == set(['a', 'c']), 'Wrong output' )\nassert     (similar_elements(('a', 'b', 'c', 'd'), ('b', 'c', 'd')) == set(['b']), 'Wrong output' )\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_not_prime(0) == True\nassert     is_not_prime(1) == True\nassert     is_not_prime(2) == True\nassert     is_not_prime(3) == True\nassert     is_not_prime(4) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_not_prime(3) == True\nassert is_not_prime(7) == False\nassert is_not_prime(11) == True\nassert is_not_prime(29) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert not is_not_prime(5) == False\nassert is_not_prime(2) == False\nassert is_not_prime(3) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(is_not_prime(2))\nprint(is_not_prime(3))\nprint(is_not_prime(8))\nprint(is_not_prime(10))\nprint(is_not_prime(100))\n\n\ndef all_prime(n):\n    '''\n    Write a python function to find all prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(3) == True\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == False\nassert     is_not_prime(7) == True\nassert     is_not_prime(11) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('[+] All tests passed')\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_not_prime(4) == False, 'Wrong answer, 4 is prime'\nassert     is_not_prime(7) == True, 'Wrong answer, 7 is not prime'\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef heap_queue_largest_pythonic(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n\ndef heap_queue_largest_pythonic_better(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n\ndef heap_queue_largest_pythonic_neat(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n\ndef heap_queue_largest_pythonic_fast(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([-5,1,3,10,4],2) == [-5,10]\nassert heap_queue_largest([1,1,2,0,0,0],2) == [0,0]\nassert heap_queue_largest([-2,-1,0,1],1) == [-2,1]\nassert heap_queue_largest([],1) == []\nassert heap_queue_largest([],0) == []\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([1,2,3,4,5],4) == [5,4,3,2,1], \"Wrong answer\"\nassert     heap_queue_largest([1,2,3,4,5],3) == [5,4,3], \"Wrong answer\"\nassert     heap_queue_largest([5,4,3],1) == [5], \"Wrong answer\"\nassert     heap_queue_largest([5,4,3],0) == [], \"Wrong answer\"\nassert     heap_queue_largest([1,2,3,4,5],6) == [5,4,3,2,1], \"Wrong answer\"\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(heap_queue_largest([1,3,5,7,9,2,4,6],5))\n    print(heap_queue_largest([-1,3,5,-7,9,2,4,6],5))\n    print(heap_queue_largest([-1,-3,5,-7,9,2,4,6],5)"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([10, 3, 2, 7, 8, 1, 20],5) == [20, 8, 7, 3, 2]\nassert     heap_queue_largest([10, 3, 2, 7, 8, 1, 20],3) == [20, 8, 7]\nassert     heap_queue_largest([10, 3, 2, 7, 8, 1, 20],2) == [20, 8]\nassert     heap_queue_largest([10, 3, 2, 7, 8, 1, 20],1) == [20]\nassert     heap_queue_largest([10, 3, 2, 7, 8, 1, 20],0) == [10]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_queue_largest([1,2,3,5,2], 2) == [3,5,2]\nassert heap_queue_largest([1,2,3,5,2], 5) == [3,5,2,1]\nassert heap_queue_largest([10,5,2,4,3,6], 2) == [10,6,3,5,2]\nassert heap_queue_largest([10,5,2,4,3,6], 5) == [10,6,3,5,2,4]\n\ndef heap_queue_largest2(nums, n):\n    '''\n    Instead of creating heap and pushing into it, we can insert the elements into heap in array and then swap elements at each node using Heapify method.\n    '''\n    import heapq\n    q = []\n    for i in nums:\n        hq.heappush(q, i)\n    \n    res = []\n    for i in range(n):\n        res.append(hq.heappop(q))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef heap_queue_largest_non_negative(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([1, 2, 5, 8, 3, 7, 11, 10, 4], 6) == (11, 10, 8, 7, 5, 3)\nassert     heap_queue_largest([1, 2, 5, 8, 3, 7, 11, 10, 4], 5) == (11, 10, 8, 7, 5)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(1) == False\nassert is_Power_Of_Two(4) == True\nassert is_Power_Of_Two(13) == True\nassert is_Power_Of_Two(16) == False\nassert is_Power_Of_Two(18) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nis_Power_Of_Two(2) == True\nis_Power_Of_Two(4) == True\nis_Power_Of_Two(3) == False\nis_Power_Of_Two(5) == False"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (is_Power_Of_Two (7) == True)\nassert     (is_Power_Of_Two (14) == True)\nassert     (is_Power_Of_Two (2) == False)\nassert     (is_Power_Of_Two (32) == True)\nassert     (is_Power_Of_Two (9) == False)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(is_Power_Of_Two(17))\nprint(is_Power_Of_Two(10))\nprint(is_Power_Of_Two(23))\nprint(is_Power_Of_Two(9))\nprint(is_Power_Of_Two(1))\nprint(is_Power_Of_Two(0))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    is_Power_Of_Two(2), False, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(12), True, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(3), False, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(4), True, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(5), True, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(6), False, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(7), True, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(8), True, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(9), True, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(10), True, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(11), False, 'is_Power_Of_Two failed'\n    is_Power_Of_Two(12), True, 'is_Power_Of_Two failed'\n\ndef is_Power_Of_Four (x): \n    '''\n    Write a python function to check whether the four numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x - 1)) == 0)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long(\"Python is an interpreted, high-level, general-purpose programming language.\") == [\"Python\"]\nassert     find_char_long(\"I eat apples and apples.\") == []\nassert     find_char_long(\"I eat apples and apples.\") == [\"I\", \"and\"]\nassert     find_char_long(\"I am eating apples and apples.\") == [\"I\", \"am\", \"eating\", \"apples\", \"and\"]\nassert     find_char_long(\"I am eating apples and apples. I like apples.\") == [\"I\", \"am\", \"eating\", \"apples\", \"and\", \"like\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('ab_cd_e') == ('ab','cd','e')\nassert     find_char_long('abcdefg') == ()\nassert     find_char_long('abcdeefg') == ('abcd','efg')\nassert     find_char_long('abcdefgh') == ('abc','def','gh')\nassert     find_char_long('abcdefghij') == ('abc','def','ghi')\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long(\"The quick brown fox jumps over the lazy dog.\") == [\"fox\", \"dog\"]\nassert     find_char_long(\"The quick brown fox jumps over the lazy dog. and that quick brown fox jumps over the lazy dog.\") == [\"fox\", \"dog\"]\nassert     find_char_long(\"The quick brown fox jumps over the lazy dog. and that fox jumps over the lazy dog.\") == []\nassert     find_char_long(\"The quick brown fox jumps over the lazy dog. and that fox jumps over the lazy dog. and that fox jumps over the lazy dog.\") == []\nassert     find_char_long(\"The quick brown fox jumps over the lazy dog. and that fox jumps over the lazy dog. and that fox jumps over the lazy dog. and that fox jumps over the lazy dog.\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long('aa aa aa aaaaaaaaaaaaaaa aaaa') == ['aaa']\nassert     find_char_long('a aa aaaa aaaaaaa aaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa') == ['aaa']\nassert     find_char_long('ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\nimport math\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long(\"you can code anywhere\") == [\"you\", \"can\", \"code\", \"anywhere\"]\nassert     find_char_long(\"it is a long sentence\") == [\"it\", \"is\", \"a\", \"long\", \"sentence\"]\nassert     find_char_long(\"hello world!\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long('Some text some text some text') == ['some','some','some','some']\nassert    find_char_long('Some text some text some text some text some text some text some text') == ['some','some','some','some','some','some','some','some','some','some','some','some','some','some','some','some','some','some','some','some','some','some','some']\nassert     find_char_long('Some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text some text som"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_digit(text):\n    '''\n    Write a function to find all digits in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long(\"short word\") == []\nassert     find_char_long(\"a word\") == ['word']\nassert     find_char_long(\"short a word\") == ['short a word']\nassert     find_char_long(\"short a very long word\") == ['short a word','short a very long word']\nassert     find_char_long(\"the quick brown fox jumps over the lazy dog\") == ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_char_long('') == []\nassert find_char_long('thequickbrownfox') == ['quick', 'brown', 'the']\nassert find_char_long('thequickbrownfox',4) == ['quick', 'brown', 'fox']\nassert find_char_long('thequickbrownfox',5) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25]\nassert     square_nums([1,2,3,4]) == [1,4,9,16]\nassert     square_nums([1,4]) == [1,16]\nassert     square_nums([]) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\ndef to_upper(s):\n    '''\n    Write a function to convert each letter in a string to uppercase.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums(range(1, 11)) == range(1, 11) ** 2\nassert     square_nums(range(1, 11)) == range(1, 11) ** 2\nassert     square_nums([]) == []\nassert     square_nums([1, 4, 9]) == [1, 4, 81]\nassert     square_nums([-1, -9, -4]) == [-1, -9, -64]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_nums([-1, -2, 0, 1, 4, 9]) == [-1, 0, 1, 4, 16, 81], 'Square_nums of [-1, -2, 0, 1, 4, 9] is wrong.'\nassert     square_nums([]) == [], 'Square_nums of empty list is wrong.'\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert square_nums([1, 4, 5]) == [1, 16, 25]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_nums([1, 2, 3]) == [1, 4, 9]"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef main():\n    '''\n    A simple test driver\n    '''\n    assert square_nums(nums = [2,3,4]) == [4,9,16]\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\nassert     square_nums([]) == []\nassert     square_nums([0, 3, 4, 5]) == [0, 0, 9, 16]\nassert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert     square_nums([1, 2, 3, 4, 5, 6]) == [1, 4, 9, 16, 25, 36]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations('') == 0\nassert     find_Rotations('abcd') == 1\nassert     find_Rotations('abcdab') == 2\nassert     find_Rotations('abcde') == 1\nassert     find_Rotations('abcdea') == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_Rotations_naive(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_Rotations(\"abcd\") == 1\n    find_Rotations(\"abcba\") == 1\n    find_Rotations(\"abcdabcd\") == 2\n    find_Rotations(\"abcdabcdefg\") == 1\n    find_Rotations(\"abcdefghi\") == 1\n\ndef find_Rotations_string(s):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_Rotations(\"abcd\") == 1\nfind_Rotations(\"gfg\") == 1\nfind_Rotations(\"acd\") == 1\nfind_Rotations(\"ab\") == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations(\"mango\") == 5, \"Wrong output\"\nassert     find_Rotations(\"banana\") == 5, \"Wrong output\"\nassert     find_Rotations(\"apple\") == 2, \"Wrong output\"\nassert     find_Rotations(\"orange\") == 3, \"Wrong output\"\nassert     find_Rotations(\"Grapes\") == 5, \"Wrong output\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Rotations('abcd') == 3\nassert     find_Rotations('abcdef') == 4\nassert     find_Rotations('abcdefgh') == 7\nassert     find_Rotations('abcdefghij') == 8\nassert     find_Rotations('abcdefghijk') == 12\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations('rotation') == 3\nassert     find_Rotations('rotation') == 3\nassert     find_Rotations('rotation') == 4\nassert     find_Rotations('rotation') == 4\nassert     find_Rotations('rotation') == 5\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations('abc') == 0\nassert     find_Rotations('geek') == 1\nassert     find_Rotations('cat') == 2\nassert     find_Rotations('dog') == 2\nassert     find_Rotations('idea') == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_Occ('Hello, World!', 'o') == 'Hell World!'\nassert     remove_Occ('Hello, World!', 'l') == 'Hllo, World!'\nassert     remove_Occ('Hello, World!', 'l') == 'Hello, World!'\nassert     remove_Occ('Hello, World!', 'd') == 'He, World!'\nassert     remove_Occ('Hello, World!', 'H') == 'Hl, World!'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_Occ('Hellooooo', 'o') == 'Hellooo', 'incorrect'\nassert     remove_Occ('Hellooooo', 'z') == 'Hellooooo', 'incorrect'\nassert     remove_Occ('Helloworld', 'o') == 'Helloworld', 'incorrect'\nassert     remove_Occ('Helloworld', 'l') == 'Hello', 'incorrect'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ(\"Python\",'n')     ==     \"thon\",     \"function does not work\"\nassert     remove_Occ(\"Python\",'y')     ==     \"thon\",     \"function does not work\"\nassert     remove_Occ(\"Python\",'l')     ==     \"Python\",     \"function does not work\"\nassert     remove_Occ(\"Python\",'o')     ==     \"thon\",     \"function does not work\"\nassert     remove_Occ(\"Python\",'P')     ==     \"thon\",     \"function does not work\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ('geeksforgeeks', 'e') ==     'ksfkofegeksforgeeks'\nassert     remove_Occ('geeksforgeeks', 'k') == 'geeksforgeeks'\nassert     remove_Occ('geeksforgeeks','s') == 'eeksforgeeks'\nassert     remove_Occ('geeksforgeeks', 'g') == 'eeksforgeeks'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_Occ('ppp','p') == 'ppp', \"remove_Occ() is not working\"\nassert     remove_Occ('p','p') == '', \"remove_Occ() is not working\"\nassert     remove_Occ('p','o') == '', \"remove_Occ() is not working\"\nassert     remove_Occ('p','P') == '', \"remove_Occ() is not working\"\nassert     remove_Occ('P','P') == '', \"remove_Occ() is not working\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_Occ(\"aabaab\",'a')==\"abaab\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nremove_Occ('hello', 'l') == 'hello'\nremove_Occ('hello', 'h') == 'hello'\nremove_Occ('hello', 'e') == 'hello'\nremove_Occ('hello', 'o') == 'hello'\nremove_Occ('hello', 'l') == 'hllo'\nremove_Occ('hello', 'z') == 'hell'\nremove_Occ('hello', 'h') == 'hello'\nremove_Occ('hello', 'e') == 'hello'\nremove_Occ('hello', 'o') == 'hello'\nremove_Occ('hello', 'l') == 'hello'\nremove_Occ('hello', 'z') == 'hello'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test remove_Occ\n    s = 'What goes here?'\n    ch ='s'\n    print(remove_Occ(s,ch)) # Expected output: What goes here?\n    "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_sort_matrix():\n    '''\n    Confirm that the sorted matrix is correct.\n    '''\n    print('Testing sort_matrix:')\n    matrix = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\n\n    expected = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\n\n    sorted_matrix = sort_matrix(matrix)\n    print(f'\\tThe sorted matrix is: {sorted_matrix}')\n    assert sorted_matrix == expected, '\\tExpected:'+ str(expected) + ', got:'+ str(sorted_matrix)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([\n                    [1, 0, 0, 0],\n                    [1, 2, 3, 4],\n                    [2, 2, 2, 2],\n                    [3, 4, 5, 6]\n                    ]) == [[1, 0, 0, 0],\n                          [2, 2, 2, 2],\n                          [3, 4, 5, 6],\n                          [1, 2, 3, 4]], 'Sort failed'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_matrix([[1,2], \n                        [3,4]]) == [[1,2], \n                            [3,4]]\nassert     sort_matrix([[3,2], \n                        [2,1]]) == [[1,2], \n                            [3,2]]\nassert     sort_matrix([[1,3,4], \n                        [2,5,6], \n                        [6,7,8]]) == [[1,2,3], \n                            [6,7,8], \n                            [4,5,6]]\nassert     sort_matrix([[2,5,6], \n                        [4,1,3], \n                        [3,2,8]]) == [[1,2,3], \n                            [2,5,6], \n                            [4,3,8]]\nassert     sort_matrix([[2,3], \n                        [6,1], \n                        [1,6]]) == [[1,2], \n                            [1,6], \n                            [2,3]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([\n                                    [0, 4, -9, 0],\n                                    [-3, -6, -1, 2],\n                                    [3, -4, -5, 6]\n                                    ]) == [[-3, -6, -1, 2], \n                                        [0, 4, -9, 0], \n                                        [3, -4, -5, 6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[1,2],[4,3]]) == [[1,2],[4,3]]\nassert     sort_matrix([[5,2,3],[1,2,0]]) == [[0,2,3],[1,2,5]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_matrix([[1,0,3],[-1,2,0],[0,0,1],[1,0,3]]) == \\\n    [[1,0,3],[1,0,3],[0,0,1],[-1,2,0]]\nassert     sort_matrix([[1,0,3],[0,0,1],[1,0,3]]) == \\\n    [[1,0,3],[1,0,3],[0,0,1]]\nassert     sort_matrix([[1,0,3],[0,0,1]]) == \\\n    [[1,0,3],[0,0,1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([[1, 2, 3],\n                       [4, 5, 6],\n                       [7, 8, 9]]) == [[1, 2, 3],\n                                      [4, 5, 6],\n                                      [7, 8, 9]]\nassert     sort_matrix([[1, 2, 3, 4, 5],\n                       [4, 5, 6, 7, 8],\n                       [7, 8, 9, 1, 2]]) == [[1, 2, 3, 4, 5],\n                                           [4, 5, 6, 7, 8],\n                                           [7, 8, 9, 1, 2]]\nassert     sort_matrix([[1, 2, 3, 4],\n                       [4, 5, 6, 7],\n                       [7, 8, 9, 10]]) == [[1, 2, 3, 4],\n                                          [4, 5, 6, 7],\n                                          [7, 8, 9, 10]]\nassert     sort_matrix([[2, 1],\n                       [3, 1],\n                       [1, 1]]) == [[1, 1],\n                                    [2, 1],\n                                    [3, 1]]\nassert     sort_matrix([[5, 6, 1, 1, 2],\n                       [1, 9, 3, 3, 4],\n                       [7, 8, 5, 6, 8],\n                       [3, 4, 8, 6, 9],\n                       [1, 2, 7, 6, 4],\n                       [4, 5, 9, 1, 7]]) == [[1, 1, 2, 4, 7],\n                                            [1, 2, 3, 5, 6],\n                                            [1, 3, 3, 6, 7],\n                                            [3, 4, 4, 9, 5],\n                                            [5, 6, 6, 7, 9],\n                                            [7, 8, 8, 1, 1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef matrix_construction(rows, cols):\n    '''\n    Write a function to construct a matrix whose elements are lists and sort it according to the sum of its rows.\n    '''\n    M = []\n    for r in range(rows):\n        M.append([])\n        for c in range(cols):\n            M[r].append(0)\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume([1, 2, 3], 3, 2) == (1 * 3 ** 2) / 2\nassert find_Volume([2, 3, 4], 5, 10) == ((2 * 3 + 5 * 4) * 1 / 2) ** 2\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(2,3,4) == 5 \nassert     find_Volume(2,4,8) == 16 \nassert     find_Volume(6,2,3) == 14\n\nprint(\"Check your work\")"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nimport pytest\nimport inspect\n\ncurrentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))\nparentdir = os.path.dirname(currentdir)\n\n@pytest.mark.usefixtures(\"build_prism_inputs\")\nclass Test_find_Volume():\n\n    @pytest.fixture(scope='module')\n    def build_prism_inputs(self):\n        self.v1 = [-1, 2, 3, 1]\n        self.v2 = [1, 1, 1, 1]\n        self.v3 = [2, 3, 1, 1]\n        self.v4 = [-1, 2, -1, 2]\n        self.v5 = [-1, 2, 3, -1]\n        self.v6 = [-1, 2, 3, -1]\n        self.prism = [self.v1, self.v2, self.v3, self.v4, self.v5, self.v6]\n        return self.prism\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume(1, 2, 3) == 1\nassert     find_Volume(1, 1, 2) == 2\nassert     find_Volume(3, 1, 3) == 3\nassert     find_Volume(1, 1, 2) == 1\nassert     find_Volume(1, 3, 2) == 2\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume(1,2,3) == 6\nassert     find_Volume(3,4,5) == 20\nassert     find_Volume(2,3,5) == 15\n\ndef find_Volume_2(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(1,2,3) == 5, \"Wrong output\"\nassert     find_Volume(2,2,2) == 4, \"Wrong output\"\nassert     find_Volume(3,3,3) == 6, \"Wrong output\"\nassert     find_Volume(4,4,4) == 24, \"Wrong output\"\nassert     find_Volume(5,5,5) == 20, \"Wrong output\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Volume([10,20,30],[5,6,7]) == 120\nassert     find_Volume([30,30,30],[5,5,5]) == 300\nassert     find_Volume([10,10,10],[1,1,1]) == 100\nassert     find_Volume([1,1,1],[10,10,10]) == 100\nassert     find_Volume([1,1,1],[10,10,10]) == 100"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume([2,2,2],[2,2,2],2) == 6\nassert     find_Volume([1,1,1],[2,2,2],2) == 3\nassert     find_Volume([2,2,2],[2,2,2],2) == 6\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume([1,2,3],2,3) == 9, 'Test 1 Failed'\nassert     find_Volume([1,1,3],2,3) == 6, 'Test 2 Failed'\nassert     find_Volume([1,1,1],2,3) == 3, 'Test 3 Failed'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore(\"hello\") == False\nassert     text_lowercase_underscore(\"HELLO\") == False\nassert     text_lowercase_underscore(\"HELLO123\") == True\nassert     text_lowercase_underscore(\"HELLO_123\") == True\nassert     text_lowercase_underscore(\"HELLO123_\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('a_b_c') == True\nassert     text_lowercase_underscore('A_b_c') == False\nassert     text_lowercase_underscore('Abc') == True\nassert     text_lowercase_underscore('a_bc') == True\nassert     text_lowercase_underscore('ABC') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('text_lowercase_underscore') == True\nassert     text_lowercase_underscore('text_LOWERCASE_underscore') == False\nassert     text_lowercase_underscore('_') == True\nassert     text_lowercase_underscore('_12_34') == False\nassert     text_lowercase_underscore('_12_34_') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('this_is_a_simple_test') == False, '''correct'''\nassert     text_lowercase_underscore('a-b_c-d_e-f_g-h_i-j-k_l-m_n-o_p-q-r-s-t-u-v-w-x-y-z_') == True, '''incorrect'''\nassert     text_lowercase_underscore('n') == False, '''correct'''\nassert     text_lowercase_underscore('0') == False, '''correct'''\nassert     text_lowercase_underscore('1') == False, '''correct'''\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('hello_world') == True, \\\n            'You should return True if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.'\nassert     text_lowercase_underscore('qw-qw') == False, \\\n            'You should return True if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.'\nassert     text_lowercase_underscore('O3O4') == False, \\\n            'You should return True if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.'\nassert     text_lowercase_underscore('_qw_qw') == False, \\\n            'You should return True if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.'\nassert     text_lowercase_underscore('a_b_c') == True, \\\n            'You should return True if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('Hello world')     == True, \"Hello world\"\nassert     text_lowercase_underscore('This Is The Test')     == False, \"This Is The Test\"\nassert     text_lowercase_underscore('Google')             == True, \"Google\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore(\"This is a test case\") == True\nassert     text_lowercase_underscore(\"This is a test case\") == True\nassert     text_lowercase_underscore(\"A_B_C\") == False\nassert     text_lowercase_underscore(\"a-b-c\") == False\nassert     text_lowercase_underscore(\"Hello\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore('hello_world') is False\nassert     text_lowercase_underscore('HelloWorld') is True\nassert     text_lowercase_underscore('hElLo WoRlD') is False\nassert     text_lowercase_underscore('a_b_c') is False\nassert     text_lowercase_underscore('a_b_c_') is False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore(\"\") == False, \"Empty string\"\nassert     text_lowercase_underscore(\"\") == False, \"Only spaces\"\nassert     text_lowercase_underscore(\"a\") == True, \"One lowercase letter\"\nassert     text_lowercase_underscore(\"a.b\") == False, \"Two lowercase letters\"\nassert     text_lowercase_underscore(\"abc\") == True, \"Three lowercase letters\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('Example') == True\nassert     text_lowercase_underscore('example') == False\nassert     text_lowercase_underscore('Example_') == False\nassert     text_lowercase_underscore('example_') == True\nassert     text_lowercase_underscore('Example__') == False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(1) == 4, f'Expected {4} but got {square_perimeter(1)}.'\nassert     square_perimeter(2) == 8, f'Expected {8} but got {square_perimeter(2)}.'\nassert     square_perimeter(3) == 12, f'Expected {12} but got {square_perimeter(3)}.'\nassert     square_perimeter(4) == 16, f'Expected {16} but got {square_perimeter(4)}.'\nassert     square_perimeter(5) == 20, f'Expected {20} but got {square_perimeter(5)}.'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_perimeter(1)    ==    4\nassert     square_perimeter(2)    ==    4\nassert     square_perimeter(5)    ==    16\nassert     square_perimeter(10)    ==    25\nassert     square_perimeter(99)    ==    169\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nimport math\n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Test passed.')\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     str_to_list(\"abcd\") == \"bcd\", \"test case incorrect\"\nassert str_to_list(\"aec\") == \"ec\", \"test case incorrect\"\nassert str_to_list(\"ec\") == \"ec\", \"test case incorrect\"\nassert str_to_list(\"ec\") == \"ec\", \"test case incorrect\"\nassert str_to_list(\"ec\") == \"ec\", \"test case incorrect\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef fun1():\n    print(\"\\n\\n*****IN FUN1*****\\n\")\n    # 1. declare string1 and string2\n    string1 = \"Eden\"\n    string2 = \"eden\"\n\n    # 2. check if string2 is a substring of string1\n    if string2 in string1:\n        print(\"The strings are a substring of each other!\")\n    else:\n        print(\"The strings are not a substring of each other!\")\n\n    # 3. check if string1 is a substring of string2\n    if string1 in string2:\n        print(\"The strings are a substring of each other!\")\n    else:\n        print(\"The strings are not a substring of each other!\")\n\n    # 4. check if the string1 and string2 are anagrams\n    s1 = set(string1)\n    s2 = set(string2)\n    if s1 == s2:\n        print(\"The strings are anagrams of each other!\")\n    else:\n        print(\"The strings are not anagrams of each other!\")\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     str_to_list(\"abc\") == ['a', 'b', 'c']\nassert     str_to_list(\"abcda\") == ['a', 'b', 'c', 'd', 'a']\nassert     str_to_list(\"abbc\") == ['a', 'b', 'c']\nassert     str_to_list(\"a\") == ['a']\nassert     str_to_list(\"\") == []\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert\n\ndef find_missing_chars(string1, string2):\n    '''\n    Write a function to return a list of all the characters missing from the first string and are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     str_to_list('aabccccc','cc') == ['a','b','c'], \"str_to_list('aabccccc','cc') should return ['a','b','c'], but it returns %s\" % str_to_list('aabccccc','cc')\nassert     str_to_list('abc','abc') == ['a','b','c'], \"str_to_list('abc','abc') should return ['a','b','c'], but it returns %s\" % str_to_list('abc','abc')\nassert     str_to_list('abc','cba') == ['a','b','c'], \"str_to_list('abc','cba') should return ['a','b','c'], but it returns %s\" % str_to_list('abc','cba')\nassert     str_to_list('abc','cb') == ['a','b','c'], \"str_to_list('abc','cb') should return ['a','b','c'], but it returns %s\" % str_to_list('abc','cb')\nassert     str_to_list('abc','b') == ['a','b','c'], \"str_to_list('abc','b') should return ['a','b','c'], but it returns %s\" % str_to_list('abc','b')\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef list_to_str(input_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     str_to_list(\"codebabble\") == \"cdbbl\", \"incorrect function\"\n\nassert str_to_list(\"tactco\") == \"atco\", \"incorrect function\"\n\nassert str_to_list(\"tar\") == \"tr\", \"incorrect function\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     str_to_list(\"adee\", \"ad\") == \"de\"\nassert     str_to_list(\"adee\", \"fde\") == \"de\"\nassert     str_to_list(\"adee\", \"efe\") == \"de\"\nassert     str_to_list(\"adee\", \"fde\") == \"de\"\n\ndef str_rotation(string, rotation): \n    '''\n    Write a function to rotate characters in a string according to the rotation value.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint (str_to_list('apples')) == 'a' # 'apples'\nprint (str_to_list('kans')) == 'k' # 'kans'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nAssume that the array is not empty and contains only integers in the range \n[1,n] where n is the length of the array.\n\nWrite a function to check whether the array contains any duplicate element. \nYour function should return true if any element appears at least twice in the array, \nand it should return false if every element is distinct.\n'''\ndef test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_duplicate([1,2,3,4,5,6]) == False, 'test_duplicate does not work!'\nassert     test_duplicate([1,2,3,4,5,2]) == True, 'test_duplicate does not work!'\nassert     test_duplicate([1,2,3,4,5,6,5,4,5,3,2,1]) == False, 'test_duplicate does not work!'\nassert     test_duplicate([1,2,3,4,5,6,5,4,5,3,2,1,6,5,4,3,2,1]) == True, 'test_duplicate does not work!'\nassert     test_duplicate([1,2,3,4,5,6,5,4,5,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1]) == False, 'test_duplicate does not work!'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_bubble(arraynums):\n    '''\n    Write a function to sort the array of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\ntime complexity : O(n)\nspace complexity : O(1)\n''"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_duplicate_b():\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_duplicate(arraynums=[1,2,3,4,5,6,7]) == False, \"Should be False\"\nassert     test_duplicate(arraynums=[1,2,3,1]) == True, \"Should be True\"\nassert     test_duplicate(arraynums=[1,2,2,3,4,4]) == False, \"Should be False\"\nassert     test_duplicate(arraynums=[1,2,3,4,5,6,7,8]) == True, \"Should be True\"\nassert     test_duplicate(arraynums=[1,2,3,4,5,6,7,8,9]) == False, \"Should be False\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate([5, 5, 1, 2, 1]) == True\nassert     test_duplicate([3, 5, 6, 7, 2]) == False\nassert     test_duplicate([1, 2, 3]) == True"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_find_the_duplicate():\n    '''\n    Write a function to find the duplicate number in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint (\"You are passed!\") if is_woodall(2) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(3) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(4) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(5) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(6) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(7) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(8) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(9) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(10) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(11) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(12) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(13) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(14) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(15) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(16) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(17) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(18) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(19) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(20) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(21) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(22) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(23) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(24) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(25) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(26) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(27) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(28) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(29) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(30) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(31) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(32) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(33) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(34) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(35) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(36) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(37) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(38) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(39) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(40) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(41) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(42) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(43) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(44) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(45) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(46) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(47) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(48) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(49) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(50) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(51) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(52) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(53) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(54) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(55) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(56) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(57) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(58) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(59) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(60) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(61) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(62) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(63) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(64) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(65) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(66) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(67) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(68) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(69) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(70) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(71) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(72) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(73) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(74) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(75) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(76) == True else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(77) == False else print (\"You are failed!\")\nprint (\"You are passed!\") if is_woodall(78) == True else print ("
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_woodall(1) == 'W', 'W for woodball, 1 for 1'\nassert     is_woodall(2) == 'W', 'W for woodball, 2 for 2'\nassert     is_woodall(3) == 'W', 'W for woodball, 3 for 3'\nassert     is_woodall(4) == 'N', 'N for no, 4 for 4'\nassert     is_woodall(5) == 'N', 'N for no, 5 for 5'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_woodall(4) == False\nassert     is_woodall(9) == True\nassert     is_woodall(100) == False\nassert     is_woodall(999) == True\nassert     is_woodall(20) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (is_woodall(1121) == False)\nassert (is_woodall(11) == False)\nassert (is_woodall(1112) == True)\nassert (is_woodall(111) == True)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_woodall(0) == False\nis_woodall(1234) == False\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == False\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1235) == True\nis_woodall(1"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_woodall(8) == False\nassert \nis_woodall(9) == False\nassert \nis_woodall(10) == True\nassert \nis_woodall(11) == True\nassert \nis_woodall(12) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_woodall(2) == True\nassert     is_woodall(0) == False\nassert     is_woodall(15) == False\nassert     is_woodall(5) == False\nassert     is_woodall(100) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_woodall(1) == False\nassert is_woodall(5) == False\nassert is_woodall(12) == False\nassert is_woodall(9) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_woodall(4) == False\nassert     is_woodall(7) == True\nassert     is_woodall(6) == False\n\ndef is_woodall_2(n): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    rev(19)\n    \nassert \n    rev(21)\n    \nassert \n    rev(19)\n    \nassert \n    rev(22)\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(7) == 1\nassert     rev(8) == 2\nassert     rev(9) == 3\nassert     rev(10) == 4\nassert     rev(11) == 5\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rev(4) == 1 \nassert rev(5) == 2\nassert rev(6) == 3\nassert rev(11) == 2\nassert rev(12) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(21) == 1\nassert     rev(10) == 2\nassert     rev(19) == 3\nassert     rev(8) == 6\nassert     rev(11) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(5) == 1\nassert     rev(14) == 1\nassert     rev(9) == 2\nassert     rev(11) == 2\nassert     rev(30) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(17) == 18, 'Sample Test Failed'\nassert     rev(13) == 12, 'Sample Test Failed'\nassert     rev(0) == 0, 'Sample Test Failed'\nassert     rev(-1) == -1, 'Sample Test Failed'\nassert     rev(1.3) == 0.3, 'Sample Test Failed'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(5) == rev(5) == True \nassert     rev(6) == rev(8) == True \nassert     rev(15) == rev(25) == False \nassert     rev(123) == rev(1232) == False \nassert     rev(1524) == rev(1525) == False \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(2) == 0\nassert     rev(9) == 1\nassert     rev(10) == -1\nassert     rev(11) == -1\nassert     rev(12) == -1\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Max_Num([1,2,3,4]) == (None)\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9,10]) == (5)\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9,10,2]) == (None)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nif __name__ == '__main__':\n    arr = [-1,-10,-10,-10,-100]\n    print(find_Max_Num(arr))\n    print('Hurray!')"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Max_Num([1,2,3,4]) == 4, \"find_Max_Num should return 4\"\nassert     find_Max_Num([1,2,3,4]) == 8, \"find_Max_Num should return 8\"\nassert     find_Max_Num([1,2,3,4,5,6]) == 10, \"find_Max_Num should return 10\"\nassert     find_Max_Num([]) == 0, \"find_Max_Num should return 0\"\nassert     find_Max_Num([1,2,3,4,5,6,7,8]) == 15, \"find_Max_Num should return 15\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Max_Num([5,3,2,4]) == 5, \"The output should be 5\"\nassert     find_Max_Num([5,3,4,2]) == 5, \"The output should be 5\"\nassert     find_Max_Num([4,6,2,7]) == 7, \"The output should be 7\"\nassert     find_Max_Num([7,2,4,5]) == 7, \"The output should be 7\"\nassert     find_Max_Num([4,7,2,5]) == 7, \"The output should be 7\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_Max_Num([1,2,3,4]) == 4, 'Error found.'\nfind_Max_Num([1,2,3,4,5,6,7,8]) == 8, 'Error found.'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    find_Max_Num(['3', '5', '2', '1'])\n== 5\nassert \n    find_Max_Num(['3', '5', '2', '1', '0'])\n== 5\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(-1,-1)==True\nassert     opposite_Signs(1,2)==False\nassert     opposite_Signs(1,1)==True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nopposite_Signs(1,0) == True\nopposite_Signs(2,-3) == False\nopposite_Signs(-5,-5) == False\nopposite_Signs(0,1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-2) == False\nopposite_Signs(0,0) == True\nopposite_Signs(1,1) == True\nopposite_Signs(0,0) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,0) == True\nopposite_Signs(0,0) == False\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,1) == True\nopposite_Signs(1,1) == True\nopposite_Signs(2,-2) == True\nopposite_Signs(2,1) == False\nopposite_Signs(-2,1) == True\nopposite_Signs(2,-2) == False\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(1,1) == False\nopposite_Signs(1,-1) == False\nopposite_Signs(-2,-2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(0,1) == True\nassert     opposite_Signs(-1,-1) == True\nassert     opposite_Signs(-1,-2) == True\nassert     opposite_Signs(0,-2) == False\nassert     opposite_Signs(1,-1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     opposite_Signs(-2, 3) == True, \"2.1\"\nassert     opposite_Signs(3, -2) == False, \"2.2\"\nassert     opposite_Signs(0, -3) == True, \"2.3\"\nassert     opposite_Signs(-2, -3) == False, \"2.4\"\nassert     opposite_Signs(1, 2) == False, \"2.5\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     opposite_Signs(1,1)     ==     False, \"Should be False\"\nassert     opposite_Signs(1,-1)     ==     True, \"Should be True\"\nassert     opposite_Signs(-1,1)     ==     True, \"Should be True\"\nassert     opposite_Signs(-1,-1)     ==     False, \"Should be False\"\nassert     opposite_Signs(0,-1)     ==     False, \"Should be False\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nopposite_Signs(-1, -1) == True\nopposite_Signs(-1, 1) == False\nopposite_Signs(-1, 0) == True\nopposite_Signs(1, -1) == False\nopposite_Signs(1, 1) == False\nopposite_Signs(1, 0) == False\n\n\ndef string_formater(input_string): \n    '''\n    Write a python function to replace all occurence of number in given string to number.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     opposite_Signs(-5, 5)    == False,    \"error in opposite_Signs\"\nassert     opposite_Signs(-5, -5)    == True,    \"error in opposite_Signs\"\nassert     opposite_Signs(5, -5)    == True,    \"error in opposite_Signs\"\nassert     opposite_Signs(-5, -5)    == False,    \"error in opposite_Signs\"\nassert     opposite_Signs(0, 5)    == False,    \"error in opposite_Signs\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nopposite_Signs(3,3) == False\nopposite_Signs(-5,3) == True\nopposite_Signs(-2,2) == False\n\n\n\ndef check_Prime(x): \n    '''\n    Write a python function to check whether the given integer is a prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_octagonal(0) == 0\nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 5\nassert is_octagonal(3) == 12\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(is_octagonal(1)) # 1\nprint(is_octagonal(2)) # 4\nprint(is_octagonal(3)) # 6\nprint(is_octagonal(4)) # 8\nprint(is_octagonal(5)) # 10\nprint(is_octagonal(6)) # 12\nprint(is_octagonal(7)) # 14\nprint(is_octagonal(8)) # 16\nprint(is_octagonal(9)) # 18\nprint(is_octagonal(10)) # 20\nprint(is_octagonal(11)) # 22\nprint(is_octagonal(12)) # 24\nprint(is_octagonal(13)) # 26\nprint(is_octagonal(14)) # 28\nprint(is_octagonal(15)) # 30\nprint(is_octagonal(16)) # 32\nprint(is_octagonal(17)) # 34\nprint(is_octagonal(18)) # 36\nprint(is_octagonal(19)) # 38\nprint(is_octagonal(20)) # 40\nprint(is_octagonal(21)) # 42\nprint(is_octagonal(22)) # 44\nprint(is_octagonal(23)) # 46\nprint(is_octagonal(24)) # 48\nprint(is_octagonal(25)) # 50\nprint(is_octagonal(26)) # 52\nprint(is_octagonal(27)) # 54\nprint(is_octagonal(28)) # 56\nprint(is_octagonal(29)) # 58\nprint(is_octagonal(30)) # 60\nprint(is_octagonal(31)) # 62\nprint(is_octagonal(32)) # 64\nprint(is_octagonal(33)) # 66\nprint(is_octagonal(34)) # 68\nprint(is_octagonal(35)) # 70\nprint(is_octagonal(36)) # 72\nprint(is_octagonal(37)) # 74\nprint(is_octagonal(38)) # 76\nprint(is_octagonal(39)) # 78\nprint(is_octagonal(40)) # 80\nprint(is_octagonal(41)) # 82\nprint(is_octagonal(42)) # 84\nprint(is_octagonal(43)) # 86\nprint(is_octagonal(44)) # 88\nprint(is_octagonal(45)) # 90\nprint(is_octagonal(46)) # 92\nprint(is_octagonal(47)) # 94\nprint(is_octagonal(48)) # 96\nprint(is_octagonal(49)) # 98\nprint(is_octagonal(50)) # 100\nprint(is_octagonal(51)) # 102\nprint(is_octagonal(52)) # 104\nprint(is_octagonal(53)) # 106\nprint(is_octagonal(54)) # 108\nprint(is_octagonal(55)) # 110\nprint(is_octagonal(56)) # 112\nprint(is_octagonal(57)) # 114\nprint(is_octagonal(58)) # 116\nprint(is_octagonal(59)) # 118\nprint(is_octagonal(60)) # 120\nprint(is_octagonal(61)) # 122\nprint(is_octagonal(62)) # 124\nprint(is_octagonal(63)) # 126\nprint(is_octagonal(64)) # 128\nprint(is_octagonal(65)) # 130\nprint(is_octagonal(66)) # 132\nprint(is_octagonal(67)) # 134\nprint(is_octagonal(68)) # 136\nprint(is_octagonal(69)) # 138\nprint(is_octagonal(70)) # 140\nprint(is_octagonal(71)) # 142\nprint(is_octagonal(72)) # 144\nprint(is_octagonal(73)) # 146\nprint(is_octagonal(74)) # 148\nprint(is_octagonal(75)) # 150\nprint(is_octagonal(76)) # 152\nprint(is_octagonal(77)) # 154\nprint(is_octagonal(78)) # 156\nprint(is_octagonal(79)) # 158\nprint(is_octagonal(80)) # 160\nprint(is_octagonal(81)) # 162\nprint(is_octagonal(82)) # 164\nprint(is_octagonal(83)) # 166\nprint(is_octagonal(84)) # 168\nprint(is_octagonal(85)) # 170\nprint(is_octagonal(86)) # 172\nprint(is_octagonal(87)) # 174\nprint(is_octagonal(88)) # 176\nprint(is_octagonal(89)) # 178\nprint(is_octagonal(90)) # 180\nprint(is_octagonal(91)) # 182\nprint(is_octagonal(92)) # 184\nprint(is_octagonal(93)) # 186\nprint(is_octagonal(94)) # 188\nprint(is_octagonal(95)) # 190\nprint(is_octagonal(96)) # 192\nprint(is_octagonal(97)) # 194\nprint(is_octagonal(98)) # 196\nprint(is_octagonal(99)) # 198\nprint(is_octagonal(100)) # 200\nprint(is_octagonal(101)) # 202\nprint(is_octagonal(102)) # 204\nprint(is_octagonal(103)) # 206\nprint(is_octagonal(104)) # 208\nprint(is_octagonal(105)) # 210\nprint(is_octagonal(106)) # 212\nprint(is_octagonal(107)) # 214\nprint(is_octagonal(108)) # 216\nprint(is_octagonal(109)) # 218\nprint(is_octagonal(110)) # 220\nprint(is_octagonal(111)) # 222\nprint(is_octagonal(112)) # 224\nprint(is_octagonal(113)) # 226\nprint(is_octagonal(114)) # 228\nprint(is_octagonal(115)) # 230\nprint(is_octagonal(116)) # 232\nprint(is_octagonal(117)) # 234\nprint(is_octagonal(118)) # 236\nprint(is_octagonal(119)) # 238\nprint(is_octagonal(120)) # 240\nprint(is_octagonal(121)) # 242\nprint(is_octagonal(122)) # 244\nprint(is_octagonal(123)) # 246\nprint(is_octagonal(124)) # 248\nprint(is_octagonal(125)) # 250\nprint(is_octagonal(126)) # 252\nprint(is_octagonal(127)) # 254\nprint(is_octagonal(128)) # 256\nprint(is_octagonal(129)) # 258\nprint(is_octagonal(130)) # 260\nprint(is_octagonal(131)) # 262\nprint(is_octagonal(132)) # 264\nprint(is_octagonal(133)) # 266\nprint(is_octagonal(134)) # 268\nprint(is_octagonal(135)) # 270\nprint(is_octagonal(136)) # 272\nprint(is_octagonal(137)) # 274\nprint(is_octagonal(138)) # 276\nprint(is_octagonal(139)) # 278\nprint(is_octagonal(140)) # 280\nprint(is_octagonal(141)) # 282\nprint(is_octagonal(142)) # 284\nprint(is_octagonal(143)) # 286\nprint(is_octagonal(144)) # 288\nprint(is_octagonal(145)) # 290\nprint(is_octagonal(146)) # 292\nprint(is_octagonal(147)) # 294\nprint(is_octagonal(148)) # 296\nprint(is_octagonal(149)) # 298\nprint(is_octagonal(150)) # 300\nprint(is_octagonal(151)) # 302\nprint(is_octagonal(152)) # 304\nprint(is_octagonal(153)) # 306\nprint(is_octagonal(154)) # 308\nprint(is_octagonal(155)) # 310\nprint(is_octagonal(156)) # 312\nprint(is_octagonal(157)) # 314\nprint(is_octagonal(158)) # 316\nprint(is_octagonal(159)) # 318\nprint(is_octagonal(160)) # 320\nprint(is_octagonal(161)) # 322\nprint(is_octagonal(162)) # 324\nprint(is_octagonal(163)) # 326\nprint(is_octagonal(164)) # 328\nprint(is_octagonal(165)) # 330\nprint(is_octagonal(166)) # 332\nprint(is_octagona"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_octagonal(1) == 1, 'Fails is_octagonal'\nassert     is_octagonal(2) == 3, 'Fails is_octagonal'\nassert     is_octagonal(3) == 6, 'Fails is_octagonal'\nassert     is_octagonal(4) == 10, 'Fails is_octagonal'\nassert     is_octagonal(5) == 15, 'Fails is_octagonal'\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 15\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 8\nassert     is_octagonal(4) == 12\nassert     is_octagonal(5) == 15\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 6\nassert is_octagonal(4) == 10\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 6\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Substrings(\"123456789\") == 9\nassert     count_Substrings(\"\") == 0\nassert     count_Substrings(\"a\") == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings('1234') == 1\nassert     count_Substrings('12343') == 2\nassert     count_Substrings('123534') == 2\nassert     count_Substrings('123455') == 2\nassert     count_Substrings('12345') == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings(\"abcdefg\") == 6\nassert     count_Substrings(\"aabbccddd\") == 3\nassert     count_Substrings(\"abc\") == 2\nassert     count_Substrings(\"abc\") == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Substrings('2345') == 3\nassert     count_Substrings('123') == 1\nassert     count_Substrings('12345') == 3\nassert     count_Substrings('12345678') == 8\nassert     count_Substrings('1234567890') == 21\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert count_Substrings('abcabc') == 3\nassert count_Substrings('abcdede') == 3\nassert count_Substrings('abcdedefghi') == 3\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ns = \"GeeksforGeeks\"\nassert count_Substrings(s) == 3\n\n'''\nGiven a string S, return the longest palindromic substring in S.\n\nA palindromic substring is defined as a string S which reads the same backward as well as forward.\n\nInput: \"ababcbaba\"\nOutput: \"babab\"\n'''\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_Substrings_using_hash(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Substrings('1234') == 2, 'Should return 2'\nassert     count_Substrings('12345') == 1, 'Should return 1'\nassert     count_Substrings('12') == 0, 'Should return 0'\nassert     count_Substrings('11') == 1, 'Should return 1'\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n    # here I used dictionary as the data structure to count the number of substrings\n    count = 0\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    for i in d:\n        # print(d[i], i, i*d[i])\n        count += d[i] * (d[i] - 1) // 2\n    # print(count)\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     smallest_num([1,2,4,5,6]) == 1\nassert     smallest_num([4,5,6,1]) == 1\nassert     smallest_num([3,2,5,1]) == 1\nassert     smallest_num([]) == None"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     smallest_num([10, 5, 2]) == 2, 'Should return 2.'\nassert     smallest_num([-2, 5, 2, 0]) == -2, 'Should return -2.'\nassert     smallest_num([10, 5, -2, 0]) == -2, 'Should return -2.'\nassert     smallest_num([0, 0, 0, 0]) == 0, 'Should return 0.'\nassert     smallest_num([]) == None, 'Should return None.'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef smallest_num2(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    Return the number\n    '''\n    pass\n\n\ndef smallest_num3(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    Return the number\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_num([1, 3, 2]) == 1\nassert     smallest_num([1, 3, 2, 7, 8]) == 1\nassert     smallest_num([1, 3, 2, 4, 5, 7, 8, 1]) == 1\nassert     smallest_num([1, 3, 2, 4, 5, 7, 8, 1, 10]) == 1\nassert     smallest_num([1, 3, 2, 4, 5, 7, 8, 1, 10, 100]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_num([1, 5, 7, 6, 8]) == 1, 'incorrect output'\nassert     smallest_num([1, 5, 7, 6, 8]) == 1, 'incorrect output'\nassert     smallest_num([1, 5, 6, 8, 4, 3, 2, 9, 10]) == 4, 'incorrect output'\nassert     smallest_num([1, 5, 6, 8, 4, 3, 2, 9, 10]) == 1, 'incorrect output'\nassert     smallest_num([1, 5, 7, 6, 8]) == 1, 'incorrect output'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([10, -2, -30, 50, -10, -6]) == -10, 'Wrong!'\nassert     smallest_num([1, 4, 5]) == 1, 'Wrong!'\nassert     smallest_num([10, -2, -30, 50]) == -30, 'Wrong!'\nassert     smallest_num([-20, -4, -8, -20, -10, -6, -1]) == -20, 'Wrong!'\nassert     smallest_num([-20, -4, -8, -20, -10, -6, -1]) == -20, 'Wrong!'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_num([10,15,13,8,22,12]) == 12\nassert     smallest_num([10,15,13,8,22,12,9]) == 9\nassert     smallest_num([]) == None\nassert     smallest_num([1,1,1,1]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([4, 5, 6]) == 4\nassert     smallest_num([0, 0, 0]) == 0\nassert     smallest_num([]) == None\nassert     smallest_num([1, 2, 3, 4]) == 1\nassert     smallest_num([1, 2, -2, 4]) == -2\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([1,2,3]) == 1\nassert     smallest_num([1,1,1]) == 1\nassert     smallest_num([1,1,1,1]) == 1\nassert     smallest_num([1]) == 1\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_difference(    (3, 5, 1, 2, 4) ) ==     3, \"Error\"\nassert     max_difference(    (5, 5, 5, 5) ) ==     -1, \"Error\"\nassert     max_difference(    (2, 1, 0) ) ==     1, \"Error\"\n\nprint('Test passed'"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference([(4,5), (1,2), (7,9), (3,4)]) == 5\nassert     max_difference([(4,5), (1,2), (7,9), (3,4)]) == 4\nassert     max_difference([(4,5), (1,2), (7,9), (3,4)]) == 0\nassert     max_difference([(4,5), (1,2), (7,9), (3,4)]) == 5\nassert     max_difference([(4,5), (1,2), (7,9), (3,4)]) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference(((0,1),(1,2),(2,3),(4,5))) == 2\nassert     max_difference(((0,1),(1,2),(2,3))) == 0\nassert     max_difference(((0,1),(1,2),(2,3),(3,4),(5,6))) == 1\nassert     max_difference(((0,1),(1,2),(2,3),(3,4),(4,5))) == 3\nassert     max_difference(((0,1),(1,2),(2,3),(4,5))) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_difference([(3, -2), (4, 2), (3, 4)]) == 5\nassert     max_difference([(-3, -2), (-4, 2), (-3, 4)]) == 5\nassert     max_difference([(-3, -2), (4, 2), (-3, 4)]) == 3\nassert     max_difference([(3, -2), (4, 2), (3, 4), (6, 2), (1, 4), (7, 1)]) == 7\nassert     max_difference([(3, -2), (4, 2), (3, 4), (6, 2), (1, 4), (7, 1), (-7, 1)]) == 7\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference([1,2,3,4]) == 1\nassert     max_difference([1,2,3,4,5,6]) == 2\nassert     max_difference([1,2,3,4,5,6,7]) == 1\nassert     max_difference([]) == -1\nassert     max_difference([1,3,5]) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmax_difference([(1,2),(2,3),(3,4)]) == 1\nassert max_difference([(1,2),(3,4)]) == 1\nassert max_difference([(2,3),(4,5)]) == 1\nassert max_difference([(5,5),(5,5)]) == 0\nassert max_difference([(0,5),(2,3)]) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference([(4, 10), (9, -5), (9, -4), (9, -3)]) == 7, \"wrong\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_difference([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (9,10)]) == (1,2), 'First Problem'\nassert     max_difference([(1,2), (2,3), (3,4), (4,5), (5,6)]) == (1,2), 'Second Problem'\nassert     max_difference([(1,2), (2,3), (3,4), (4,5)]) == (0,0), 'Third Problem'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference(test_list) == 2\n\nprint('Test passed')\n\n\n'''\nTest cases for function max_difference\n'''\n\ntest_list = (1,2,3,4,5)\nassert    max_difference(test_list) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks(    [(3, 'C++'), (2, 'Python'), (1, 'Java'), (4, 'PHP'), (5, 'C#')]) == \n            [(5, 'C#'), (4, 'PHP'), (1, 'Java'), (2, 'Python'), (3, 'C++')],\n            \"Wrong output for subject_marks()\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([('Science', 93), ('History', 92), ('Geography', 91), ('Biology', 95)]) == [('Science', 93), ('History', 92), ('Geography', 91), ('Biology', 95)]\nassert     subject_marks([('Science', 92), ('Math', 93), ('History', 92), ('Geography', 93), ('Biology', 91)]) == [('Math', 93), ('History', 92), ('Geography', 93), ('Science', 92), ('Biology', 91)]\nassert     subject_marks([('English', 92), ('Math', 93), ('Science', 92), ('Geography', 93), ('Biology', 91)]) == [('English', 92), ('Math', 93), ('Geography', 93), ('Science', 92), ('Biology', 91)]\nassert     subject_marks([('History', 92), ('Math', 93), ('Biology', 95), ('English', 94), ('Science', 95)]) == [('History', 92), ('Math', 93), ('Biology', 95), ('English', 94), ('Science', 95)]\nassert     subject_marks([('English', 95), ('History', 94), ('Science', 95), ('Geography', 94), ('Math', 93)]) == [('English', 95), ('History', 94), ('Math', 93), ('Geography', 94), ('Science', 95)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(2,4),(4,1),(0,0),(3,2)]) == [(0, 0), (3, 2), (4, 1), (2, 4)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert subject_marks([(5,10),(10,1),(5,4),(2,5),(1,5),(8,5)]) == [(1,5),(2,5),(5,5),(5,10),(10,1),(5,4)]\nprint(\"Correct\")\n\ndef unique_names(firstnames):\n    '''\n    Write a function to return the list of unique names in the given list\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     subject_marks([(1, 4), (3, 1), (3, 3), (3, 5)]) == \n        [(3, 3), (3, 1), (3, 5), (1, 4)], \n        \"Wrong Result\"\nprint(\"Test case 3: Passed\")\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([(1,6), (6,1), (1,6), (2,3), (4,3), (2,3)]) == [(1,6), (2,3), (2,3), (1,6), (4,3), (6,1)], 'Wrong output'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     subject_marks([(12,3),(3,4),(13,6),(6,1),(7,2),(9,7)]) == [(3, 4), (6, 1), (7, 2), (9, 7), (12, 3), (13, 6)]\nassert     subject_marks([(10,3),(3,4),(13,6),(6,1),(7,2),(9,7)]) == [(10, 3), (6, 1), (7, 2), (3, 4), (9, 7), (13, 6)]\nassert     subject_marks([(10,3),(3,4),(13,6),(6,1),(7,2),(9,7)]) == [(10, 3), (6, 1), (7, 2), (9, 7), (3, 4), (13, 6)]\nassert     subject_marks([(10,3),(3,4),(13,6),(6,1),(7,2),(9,7)]) == [(10, 3), (6, 1), (7, 2), (9, 7), (3, 4), (13, 6)]\nassert     subject_marks([(10,3),(3,4),(13,6),(6,1),(7,2),(9,7)]) == [(10, 3), (6, 1), (7, 2), (9, 7), (3, 4), (13, 6)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks([(1, 2), (3, 2), (4, 1)]) == [(1, 2), (4, 1), (3, 2)]\nassert     subject_marks([(2, 2), (2, 3), (3, 4)]) == [(2, 2), (3, 4), (2, 3)]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     recursive_list_sum([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == 55, \"Wrong result\"\nassert recursive_list_sum([[1,2,3,4], [5,6,7,8]]) == 12, \"Wrong result\"\nassert recursive_list_sum([]) == 0, \"Wrong result\"\n\ndef recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrecursive_list_sum([1,2,3,4,5,6]) == 21\nassert recursive_list_sum([]) == 0\n\ndef recursive_list_sum_recursive(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     recursive_list_sum(data_list_2) == 16, 'Wrong result.'\nassert     recursive_list_sum(data_list_1) == 15, 'Wrong result.'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([[1], 2, 3]) == 6\nassert     recursive_list_sum([1, [2, 3], 4]) == 9\nassert     recursive_list_sum([[1], 2, [3], 4]) == 9\nassert     recursive_list_sum([[1], 2, 3]) == 6\nassert     recursive_list_sum([1, 2, 3]) == 6\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([[1,2,3,4], 5, 6]) == 21, \"Wrong output\"\nassert     recursive_list_sum([[1,2,3,4],5,6]) == 21, \"Wrong output\"\nassert     recursive_list_sum([[1,2,3,4],5,6,7]) == 22, \"Wrong output\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([[1,2,3,4], 5, 6, 7, 8]) == 21, \"Test fail, wrong answer\"\nassert     recursive_list_sum([1,2,3,4]) == 10, \"Test fail, wrong answer\"\nassert     recursive_list_sum([1]) == 1, \"Test fail, wrong answer\"\nassert     recursive_list_sum([]) == 0, \"Test fail, wrong answer\"\nprint(\"Test case 1 passed!\")"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef flatten_lst(lst):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    pass"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef recursive_list_sum_iter(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pos_count([]) == 0\nassert     pos_count([1, -1, 4, 2]) == 3\nassert     pos_count([0, -1, 1, -2]) == 2\n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert pos_count([-1, -2, -3, 0, 1, 2, 3, 4, 5, 6, 7]) == 9\n\nprint('Test passed'"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([0,1,2,3,4,5,6,7,8,9]) == 10, 'Positive count'\nassert     pos_count([-1,1,2,3,4,5,6,7,8,9]) == 10, 'Positive count'\n\ndef pos_count2(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    total = 0\n    for i in lst:\n        if i > 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pos_count([0, -1, 1, -2, -2, 3, 3]) == 3\nassert     pos_count([0, 1, 2, 3, 4, 5, 6]) == 6\nassert     pos_count([-1, -2, 0, -2, 0, 1]) == 3\nassert     pos_count([-1, -2, 0, 1, 2, 3, 4]) == 3\nassert     pos_count([-1, 0, 1, -2, -2, 3, 3]) == 1\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([-5, -4, -3, -2, -1, -1, 0, 0, 1, 1]) == 3\nassert     pos_count([-5, -4, -3, -2, -1, 0, 0, 1, 1, 1]) == 0\nassert     pos_count([-5, -4, -3, -2, -1, 0, 0, 1, 1, 0]) == 2\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([2,3,4,-1,-5,0,4,8]) == 5, \"Failed\"\nassert     pos_count([2,-3,4,0,5,4,6,2]) == 7, \"Failed\"\nassert     pos_count([4,4,-3,4,5,6,6,2]) == 5, \"Failed\"\nassert     pos_count([4,4,5,6,6,6,2]) == 8, \"Failed\"\nassert     pos_count([]) == 0, \"Failed\"\nprint(\"Passed\")\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(f'\\n{pos_count(test_list_1)}')\nprint(f'\\n{pos_count(test_list_2)}')\nprint(f'\\n{pos_count(test_list_3)}')\nprint(f'\\n{pos_count(test_list_4)}')\n\n'''\nYour Task:\nYou have to complete this function as per the specification within the task.\n\nExpected Output:\n\nThe number of positive integers in the list after the function call is:\n4\nThe number of positive integers in the list after the function call is:\n0\nThe number of positive integers in the list after the function call is:\n4\nThe number of positive integers in the list after the function call is:\n0\n'''\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([-2, -3, -5, -7, -11, -13, -17, -19, -23, -29, -31]) == 4\nassert     pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20\nassert     pos_count([-4, 5, 6, -7, -8, 9, -10, -11, -12, 13, -14, -15, -16, -17, -18, -19, -20]) == 11\nassert     pos_count([20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 100\nassert     pos_count([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]) == 200\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 1\nassert     bell_number(3) == 2\nassert     bell_number(4) == 3\nassert     bell_number(5) == 4\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number(4)==1\nassert     bell_number(5)==1\nassert     bell_number(6)==2\nassert     bell_number(7)==6\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 14\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef make_change(coin_types, change):\n    '''\n    Write a function that takes in an amount and a list of coin types and returns the minimum number\n    of coins used to make up that amount.\n\n    If that amount cannot be made up by any combination of the coins in the list, the function should return None.\n\n    We'll use the term \"coin\" for any coin we're using in this problem.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 4\nassert     bell_number(4) == 7\nassert     bell_number(5) == 8\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nbell_number(3) == 1\nbell_number(2) == 2\nbell_number(1) == 1\nbell_number(0) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nbell_number(0) == 0\nbell_number(1) == 1\nbell_number(2) == 2\nbell_number(3) == 3\nbell_number(4) == 7\nbell_number(5) == 11\nbell_number(6) == 10\nbell_number(7) == 17\nbell_number(8) == 17\nbell_number(9) == 35\nbell_number(10) == 35\nbell_number(11) == 79\nbell_number(12) == 167\nbell_number(13) == 1789\nbell_number(14) == 354672\nbell_number(15) == 354672\n\n\ndef sum_of_squares(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the squares of the integers from 1 to n.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_number(4) == 7\nassert     bell_number(7) == 28\nassert     bell_number(8) == 44\nassert     bell_number(11) == 1806\nassert     bell_number(15) == 68550\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\nassert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001, -9003]) == True\nassert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001, -9003, -9001]) == True\nassert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001, -9003, -9003]) == True\nassert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001, -9003, -9001, -9001]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Monotonic([1, 1, 2]) == False\nassert     is_Monotonic([1, 2, 1]) == True\nassert     is_Monotonic([1, 1, 1]) == True\nassert     is_Monotonic([1, 1, 2, 1]) == True\nassert     is_Monotonic([1, 1, 1, 2]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([1,1,1,2,2,2]) == True, 'Should return True as the array is monotonic'\nassert     is_Monotonic([1,1,2,2,2,3]) == True, 'Should return True as the array is monotonic'\nassert     is_Monotonic([1,2,3,4,4,3,2,1]) == True, 'Should return True as the array is monotonic'\nassert     is_Monotonic([1,2,3,4,4,3,2,1]) == True, 'Should return True as the array is monotonic'\nassert     is_Monotonic([3,4,2,3,3]) == False, 'Should return False as the array is not monotonic'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([1, 1, 2])    ==    True\nassert     is_Monotonic([1, 1, 1])    ==    True\nassert     is_Monotonic([1, 2, 1])    ==    False\nassert     is_Monotonic([1, 2, 2])    ==    True\nassert     is_Monotonic([1, 1, 2, 1, 1])    ==    True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Monotonic([1, 2, 3, 4]) == True, 'Should return True as the input array is monotonic'\nassert     is_Monotonic([1, 3, 2, 4]) == False, 'Should return False as the input array is not monotonic'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Monotonic([1, 2, 2, 1]) == True, \"Wrong answer\"\nassert     is_Monotonic([1, 1, 2]) == False, \"Wrong answer\"\nassert     is_Monotonic([1, 2, 3]) == True, \"Wrong answer\"\nassert     is_Monotonic([2, 1, 3]) == True, \"Wrong answer\"\nassert     is_Monotonic([2, 1, 1]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nQ2\n    Write a python function to check whether the given array is palindrome or not.\n    \n    Note: A palindrome is a word that reads the same backward as forward.\n\n    Examples:\n    \n    Input : \"racecar\"\n    Output : Yes\n    \n    Input : \"234\"\n    Output : No\n    \n    Input : \"abcb\"\n    Output : Yes\n    \n    Input : \"abcdcba\"\n    Output : Yes\n\n'''\n\ndef is_palindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([1, 2, 3, 4], [1, 2]) == True, \"No\"\nassert     is_sublist([1, 2, 3, 4], [1, 2, 3]) == True, \"No\"\nassert     is_sublist([1, 2, 3, 4], [1, 2, 3, 5]) == False, \"Yes\"\nassert     is_sublist([1, 2, 3, 4], [2, 3, 4]) == True, \"Yes\"\nassert     is_sublist([1, 2, 3, 4], [1, 2, 4]) == True, \"Yes\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef rotated_array_search(nums, target):\n    '''\n    Write a function that takes a sorted array and the target element and returns its index if found, otherwise returns -1.\n\n    https://leetcode.com/problems/search-in-rotated-sorted-array/\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sublist([1, 2, 3], [[1, 2], [1, 3]]) == True\nassert     is_sublist([1, 2, 3], [[1, 2], [1, 4]]) == False\nassert     is_sublist([1, 2, 3], [[1, 2], [1, 3], [1, 4]]) == True\nassert     is_sublist([1, 2, 3], [[1, 2], [1, 3], [1, 5]]) == False\nassert     is_sublist([1, 2, 3], [[1, 2], [1, 4], [1, 5]]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([], [1, 2, 3])\nassert     is_sublist([1, 2, 3], [1, 2, 3])\nassert not is_sublist([1, 2, 3], [1])\nassert not is_sublist([1, 2, 3], [1, 2])\nassert     is_sublist([1, 2, 3], [1, 2, 3])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_sublist(l, s):\n    '''\n    Write a function to get the index of the sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_sublist([1, 2], [1, 2]) == True, \"is_sublist(1, 2)\"\nassert     is_sublist([1, 2, 3], [1, 2]) == True, \"is_sublist(1, 2)\"\nassert     is_sublist([1, 2, 3], [3, 4]) == False, \"is_sublist(1, 2)\"\nassert     is_sublist([1, 2, 3], [2, 3]) == True, \"is_sublist(1, 2)\"\nassert     is_sublist([1, 2, 3, 4, 5], [2, 3]) == True, \"is_sublist(1, 2)\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([1, 2], [1]) == True, \\\n        'is_sublist([1, 2], [1]) should be True'\nassert     is_sublist([1, 2], [1, 2]) == False, \\\n        'is_sublist([1, 2], [1, 2]) should be False'\nassert     is_sublist([1, 2], [1, 2, 3]) == False, \\\n        'is_sublist([1, 2], [1, 2, 3]) should be False'\nassert     is_sublist([1, 2, 3], [1, 2]) == True, \\\n        'is_sublist([1, 2, 3], [1, 2]) should be True'\nassert     is_sublist([1, 2, 3], [1, 2, 3]) == True, \\\n        'is_sublist([1, 2, 3], [1, 2, 3]) should be True'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple(Input1) == True, \"find_equal_tuple returns True for the tuples which have equal lengths\"\nassert     find_equal_tuple(Input2) == False, \"find_equal_tuple returns False for the tuples which do not have equal lengths\"\nassert     find_equal_tuple(Input3) == True, \"find_equal_tuple returns True for the tuples which have equal lengths\"\nassert     find_equal_tuple(Input4) == True, \"find_equal_tuple returns True for the tuples which have equal lengths\"\nassert     find_equal_tuple(Input5) == False, \"find_equal_tuple returns False for the tuples which do not have equal lengths\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1,),(2,3,4,5),(2,3,4,5),(2,3,4,5)])==True, \\\n    \"Wrong Answer\"\nassert     find_equal_tuple([(1,2,3),(2,3,4),(2,3,4),(2,3,4)])==False, \\\n    \"Wrong Answer\"\nassert     find_equal_tuple([(1,2),(2,3,4),(2,3,4),(2,3,4)])==False, \\\n    \"Wrong Answer\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple(((1,2,3),(4,5,6),(7,8,9)))     == True \nassert     find_equal_tuple(((1,2),(4,5,6),(7,8,9)))     == True \nassert     find_equal_tuple(((1,2),(4,5),(7,8,9)))     == False \nassert     find_equal_tuple(((1,2),(4,5,6),(7,8,9,10))) == False \nassert     find_equal_tuple(((1,2),(4,5,6,7))) == False \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple([(1,2),(3,4),(5,6)]) == True\nassert     find_equal_tuple([(1,2),(3,4),(5,6,7)]) == False\nassert     find_equal_tuple([(1,2),(1,2,3)]) == False\nassert     find_equal_tuple([(1,2),(1,2),(1,2,3,4)]) == False\nassert     find_equal_tuple([(1,2),(1,2,3)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(2,3),(2,),(2,2),(2,2,2),(2,2,2,2)]) == True, \"Should return True\"\nassert     find_equal_tuple([(2,3),(2,),(2,2),(2,2,2),(2,2,2,2),(2,2,2),(2,2,2),(2,2,2)]) == False, \"Should return False\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(1,),(2,),(3,)]    ) == False\nassert     find_equal_tuple([(1,),(2,),(3,),(1,)]    ) == True\nassert     find_equal_tuple([(1,),(2,),(3,),(4,),(5,),(6,),(7,),(8,),(9,),(10,),(11,),(12,),(13,),(14,),(15,),(16,),(17,),(18,),(19,),(20,),(21,),(22,),(23,),(24,),(25,),(26,),(27,),(28,),(29,),(30,),(31,),(32,),(33,),(34,),(35,),(36,),(37,),(38,),(39,),(40,),(41,),(42,),(43,),(44,),(45,),(46,),(47,),(48,),(49,),(50,),(51,),(52,),(53,),(54,),(55,),(56,),(57,),(58,),(59,),(60,),(61,),(62,),(63,),(64,),(65,),(66,),(67,),(68,),(69,),(70,),(71,),(72,),(73,),(74,),(75,),(76,),(77,),(78,),(79,),(80,),(81,),(82,),(83,),(84,),(85,),(86,),(87,),(88,),(89,),(90,),(91,),(92,),(93,),(94,),(95,),(96,),(97,),(98,),(99,),(100,),(101,),(102,),(103,),(104,),(105,),(106,),(107,),(108,),(109,),(110,),(111,),(112,),(113,),(114,),(115,),(116,),(117,),(118,),(119,),(120,),(121,),(122,),(123,),(124,),(125,),(126,),(127,),(128,),(129,),(130,),(131,),(132,),(133,),(134,),(135,),(136,),(137,),(138,),(139,),(140,),(141,),(142,),(143,),(144,),(145,),(146,),(147,),(148,),(149,),(150,),(151,),(152,),(153,),(154,),(155,),(156,),(157,),(158,),(159,),(160,),(161,),(162,),(163,),(164,),(165,),(166,),(167,),(168,),(169,),(170,),(171,),(172,),(173,),(174,),(175,),(176,),(177,),(178,),(179,),(180,),(181,),(182,),(183,),(184,),(185,),(186,),(187,),(188,),(189,),(190,),(191,),(192,),(193,),(194,),(195,),(196,),(197,),(198,),(199,),(200,),(201,),(202,),(203,),(204,),(205,),(206,),(207,),(208,),(209,),(210,),(211,),(212,),(213,),(214,),(215,),(216,),(217,),(218,),(219,),(220,),(221,),(222,),(223,),(224,),(225,),(226,),(227,),(228,),(229,),(230,),(231,),(232,),(233,),(234,),(235,),(236,),(237,),(238,),(239,),(240,),(241,),(242,),(243,),(244,),(245,),(246,),(247,),(248,),(249,),(250,),(251,),(252,),(253,),(254,),(255,),(256,),(257,),(258,),(259,),(260,),(261,),(262,),(263,),(264,),(265,),(266,),(267,),(268,),(269,),(270,),(271,),(272,),(273,),(274,),(275,),(276,),(277,),(278,),(279,),(280,),(281,),(282,),(283,),(284,),(285,),(286,),(287,),(288,),(289,),(290,),(291,),(292,),(293,),(294,),(295,),(296,),(297,),(298,),(299,),(300,),(301,),(302,),(303,),(304,),(305,),(306,),(307,),(308,),(309,),(310,),(311,),(312,),(313,),(314,),(315,),(316,),(317,),(318,),(319,),(320,),(321,),(322,),(323,),(324,),(325,),(326,),(327,),(328,),(329,),(330,),(331,),(332,),(333,),(334,),(335,),(336,),(337,),(338,),(339,),(340,),(341,),(342,),(343,),(344,),(345,),(346,),(347,),(348,),(349,),(350,),(351,),(352,),(353,),(354,),(355,),(356,),(357,),(358,),(359,),(360,),(361,),(362,),(363,),(364,),(365,),(366,),(367,),(368,),(369,),(370,),(371,),(372,),(373,),(374,),(375,),(376,),(377,),(378,),(379,),(380,),(381,),(382,),(383,),(384,),(385,),(386,),(387,),(388,),(389,),(390,),(391,),(392,),(393,),(394,),(395,),(396,),(397,),(398,),(399,),(400,),(401,),(402,),(403,),(404,),(405,),(406,),(407,),(408,),(409,),(410,),(411,),(412,),(413,),(414,),(415,),(416,),(417,),(418,),(419,),(420,),(421,),(422,),(423,),(424,),(425,),(426,),(427,),(428,),(429,),(430,),(431,),(432,),(433,),(434,),(435,),(436,),(437,),(438,),(439,),(440,),(441,),(442,),(443,),(444,),(445,),(446,),(447,),(448,),(449,),(450,),(451,),(452,),(453,),(454,),(455,),(456,),(457,),(458,),(459,),(460,),(461,),(462,),(463,),(464,),(465,),(466,),(467,),(468,),(469,),(470,),(471,),(472,),(473,),(474,),(475,),(476,),(477,),(478,),(479,),(480,),(481,),(48"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     comb_sort([5, 4, 1, 2, 8, 4, 5, 9, 2]) == [1, 2, 2, 4, 4, 5, 5, 8, 9]\nassert     comb_sort([4, 2, 6, 4, 2, 5]) == [2, 2, 4, 4, 5, 6]\nassert     comb_sort([10, 5, 9, 4, 6, 1]) == [1, 5, 6, 4, 9, 10]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\nassert     comb_sort([3,2,4,3]) == [2,3,3,4]\nassert     comb_sort([5,2,7,8,3]) == [2,3,3,5,7]\n\ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test for comb_sort\n    nums = []\n    assert(comb_sort(nums) == nums)\n    nums = [1]\n    assert(comb_sort(nums) == nums)\n    nums = [3,2,1]\n    assert(comb_sort(nums) == [1,2,3])\n    nums = [2,1,3,4,5,6]\n    "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     comb_sort([3,1,4,5,2,8,7]) == [1,2,3,4,5,7,8]\nassert     comb_sort([5,7,4,3,2,8,1]) == [1,2,3,4,5,7,8]\nassert     comb_sort([2,1,4,5,3,8,7]) == [1,2,3,4,5,7,8]\nassert     comb_sort([6,5,4,3,2,8,7]) == [1,2,3,4,5,7,8]\nassert     comb_sort([3,1,5,4,2,8,7]) == [1,2,3,4,5,7,8]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef quicksort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"passed\""
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([1,2,3]) == [1,2,3]\nassert     comb_sort([1,2,3,4,5]) == [1,2,3,4,5]\nassert     comb_sort([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dif_Square(2) == True, \"The returned output is incorrect, expected a True value\"\nassert     dif_Square(8) == True, \"The returned output is incorrect, expected a True value\"\nassert     dif_Square(9) == True, \"The returned output is incorrect, expected a True value\"\nassert     dif_Square(33) == False, \"The returned output is incorrect, expected a False value\"\nassert     dif_Square(27) == True, \"The returned output is incorrect, expected a True value\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndif_Square(4) == False, 'Square(4)=16'\ndif_Square(20) == True, 'Square(20)=16'\ndif_Square(40) == True, 'Square(40)=20'\ndif_Square(90) == True, 'Square(90)=50'\ndif_Square(10000) == False, 'Square(10000)=10000'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dif_Square(0) == True\nassert     dif_Square(1) == True\nassert     dif_Square(2) == True\nassert     dif_Square(3) == False\nassert     dif_Square(4) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dif_Square(1)     == True, \"input 1\"\nassert     dif_Square(0)     == True, \"input 0\"\nassert     dif_Square(16)     == False, \"input 16\"\nassert     dif_Square(65)     == True, \"input 65\"\n\ndef dif_Cube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two cubes or not.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not dif_Square(4)\n\nassert \nassert dif_Square(16)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert dif_Square(4) == True, 'Pass'\nassert dif_Square(5) == True, 'Pass'\nassert dif_Square(0) == False, 'Pass'\nassert dif_Square(7) == True, 'Pass'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not dif_Square(9)\nassert dif_Square(8)\nassert not dif_Square(7)\nassert not dif_Square(6)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_samepatterns(colors, patterns) == True\nassert     is_samepatterns(colors, patterns2) == False\nassert     is_samepatterns(colors2, patterns) == False\nassert     is_samepatterns(colors2, patterns2) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns([\"red\", \"red\", \"red\", \"red\", \"red\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"], [\"red\", \"red\", \"red\", \"red\", \"red\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"]) == True\nassert     is_samepatterns([\"red\", \"red\", \"red\", \"red\", \"red\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"], [\"red\", \"red\", \"red\", \"red\", \"red\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns([], patterns) == True, \"The empty array is a valid subset of the list\"\nassert     is_samepatterns([], []) == False, \"The empty list is not a valid subset of the list\"\nassert     is_samepatterns([], patterns) == False, \"The empty array is a valid subset of the list\"\nassert     is_samepatterns([], patterns) == True, \"The empty list is not a valid subset of the list\"\nassert     is_samepatterns([], patterns) == True, \"The empty array is not a valid subset of the list\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns([1, 2, 3, 4, 5], [3, 1, 2, 1, 4, 5]) == True, \\\n        '1st example has incorrect result'\nassert     is_samepatterns([1, 2, 3, 4, 5], [3, 2, 1, 2, 1, 4, 5]) == False, \\\n        '2nd example has incorrect result'\nassert     is_samepatterns([1, 2, 3, 4, 5], [3, 2, 1, 4, 5]) == False, \\\n        '3rd example has incorrect result'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns(\n    colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\", \"white\"],\n    patterns = [\"red\", \"orange\", \"violet\", \"yellow\", \"blue\", \"indigo\", \"white\", \"green\"]\n) == True\nassert     is_samepatterns(\n    colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\", \"white\"],\n    patterns = [\"orange\", \"red\", \"violet\", \"yellow\", \"blue\", \"indigo\", \"white\", \"green\"]\n) == False\nassert     is_samepatterns(\n    colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\", \"white\"],\n    patterns = [\"violet\", \"blue\", \"indigo\", \"orange\", \"yellow\", \"green\", \"red\", \"violet\"]\n) == True\nassert     is_samepatterns(\n    colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\", \"white\"],\n    patterns = [\"red\", \"orange\", \"violet\", \"yellow\", \"blue\", \"indigo\", \"white\", \"green\"]\n) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns(['green', 'black', 'green', 'blue','red','red', 'yellow'], ['green','red','red','red', 'yellow', 'blue', 'black']) == True, \\\n'is_samepatterns should be True if the given patterns are the same'\nassert     is_samepatterns(['green', 'black', 'green', 'blue','red','red', 'yellow'], ['green', 'blue','red', 'black','red', 'yellow','red']) == False, \\\n'is_samepatterns should be False if the given patterns are not the same'\nassert     is_samepatterns(['green', 'black', 'green', 'blue','red','red', 'yellow'], ['green', 'blue', 'black','red','red', 'yellow','red']) == False, \\\n'is_samepatterns should be False if the given patterns are not the same'\nassert     is_samepatterns(['green', 'black', 'green', 'blue','red','red', 'yellow'], ['green','red', 'black','red','red', 'yellow','red']) == False, \\\n'is_samepatterns should be False if the given patterns are not the same'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_samepatterns([],[\"\"])\nassert is_samepatterns([],[\"\"]) == True\nassert is_samepatterns([\"r\"],[\"\"]) == False\nassert is_samepatterns([\"g\"],[\"\"]) == False\nassert is_samepatterns([\"r\",\"b\"],[\"\"]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns([1, 2, 3, 4], [[1, 2], [2, 1], [1, 1]]) == True, 'Wrong'\nassert     is_samepatterns([1, 2, 3, 4], [[1, 2], [2, 1], [1, 1], [2, 2]]) == False, 'Wrong'\nassert     is_samepatterns([1, 2, 3, 4], [[1, 2], [2, 1], [1, 1], [2, 3]]) == False, 'Wrong'\nassert     is_samepatterns([1, 2, 3, 4], [[1, 2], [2, 1], [1, 1], [2, 2], [2, 3]]) == False, 'Wrong'\nassert     is_samepatterns([1, 2, 3, 4], [[1, 2], [2, 1], [1, 1], [2, 2], [2, 3], [2, 4]]) == False, 'Wrong'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns([(0, 0, 1), (0, 1, 1)], [(0, 0, 1), (0, 1, 1)]) == True\nassert     is_samepatterns([(0, 0, 1), (0, 1, 1)], [(0, 0, 1), (0, 1, 0)]) == False\nassert     is_samepatterns([(0, 0, 1), (0, 1, 1)], [(0, 0, 1), (0, 1, 0)]) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(1,2),(3,4),(1,3),(3,2)], 3) == [(1, 3), (3, 2)]\nassert find_tuples([(1,2),(3,4),(1,3),(3,2)], 4) == [(1, 3)]\nassert find_tuples([(1,2),(3,4),(1,3),(3,2)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(5, 8), (10, 19), (3, 7)], 3) == [(10, 19)]\nassert find_tuples([(5, 8), (10, 19), (3, 7)], 4) == []\nassert find_tuples([(5, 8, 2), (10, 19, 3), (3, 7, 9)], 3) == [(10, 19, 3)]\nassert find_tuples([(5, 8, 2), (10, 19, 3), (3, 7, 9)], 4) == []\nassert find_tuples([(5, 8, 2, 7), (10, 19, 3, 9), (3, 7, 9, 4)], 3) == [(10, 19, 3, 9)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(2, 3), (4, 5), (6, 7)], 3) == [(2, 6), (4, 7)]\nassert find_tuples([(2, 3), (4, 5), (6, 7)], 5) == [(2, 4, 6, 8), (4, 6, 8, 10)]\nassert find_tuples([(2, 3), (4, 5), (6, 7)], 1) == []\nassert find_tuples([(2, 3), (4, 5), (6, 7), (8, 9, 10)], 5) == [(2, 4, 6, 8, 10)]\nassert find_tuples([(2, 3), (4, 5), (6, 7), (8, 9, 10)], 1) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(2, 3), (5, 9), (10, 20)], 2) == [(2, 3), (5, 9)]\nassert     find_tuples([(2, 3), (5, 9), (10, 20)], 5) == [(2, 3), (5, 9), (10, 20)]\nassert     find_tuples([(2, 3), (5, 9), (10, 20)], 7) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(2,3),(2,5),(8,7)], 2) ==     [(2,3),(2,5)]\nassert     find_tuples([(2,3),(2,5),(8,7)], 4) ==     []\nassert     find_tuples([(2,3),(2,5),(8,7)], 3) ==     [(2,3),(2,5)]\nassert     find_tuples([(2,3),(2,5),(8,7)], 1) ==     []\nassert     find_tuples([(2,3),(2,5),(8,7)], 5) ==     [(2,3),(2,5)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1, 2), (2, 3)], 3) == [(1, 2)]\nassert     find_tuples([(1, 2), (2, 3)], 3) == [(1, 2)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4)], 3) == [(1, 2)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4)], 3) == []\nassert     find_tuples([(1, 2, 3), (2, 4), (3, 4), (4, 5)], 3) == [(1, 2), (2, 4), (3, 4)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_tuples([(3, 5), (7, 13), (17, 19), (23, 29)], 2) == [(3, 5), (7, 13)]\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 3) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 4) == [(4, 8, 12)]\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 5) == [(2, 4, 6), (3, 6, 9)]\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 6) == [(2, 4, 6), (3, 6, 9)]\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 7) == [(2, 4, 6), (3, 6, 9)]\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 8) == [(2, 4, 6), (3, 6, 9)]\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 9) == [(2, 4, 6), (3, 6, 9)]\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 10) == [(2, 4, 6), (3, 6, 9)]\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 11) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 12) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 13) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 14) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 15) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 16) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 17) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 18) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 19) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 20) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 21) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 22) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 23) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 24) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 25) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 26) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 27) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 28) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 29) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 30) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 31) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 32) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 33) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 34) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 35) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 36) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 37) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 38) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 39) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 40) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 41) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 42) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 43) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 44) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 45) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 46) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 47) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 48) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)], 49) == []\nfind_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12), ("
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (3, 4)]\nfind_tuples([(1, 2), (3, 4), (5, 6)], 5) == [(1, 2), (3, 4), (5, 6)]\nfind_tuples([(1, 2), (3, 4), (5, 6)], 4) == [(1, 2), (3, 4)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntest_list = [(1, 2, 3), (4, 5, 6)]\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nK = 3\nfind_tuples(test_list, K)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(3, 6), (5, 6), (9, 6), (12, 6)], 3) == [(3, 6), (12, 6)]\nassert     find_tuples([(3, 6), (5, 6), (9, 6), (12, 6)], 4) == [(3, 6), (9, 6), (12, 6)]\nassert     find_tuples([(3, 6), (5, 6), (9, 6), (12, 6)], 5) == []\nassert     find_tuples([(3, 6), (5, 6), (9, 6), (12, 6)], 6) == [(3, 6), (12, 6)]\nassert     find_tuples([(3, 6), (5, 6), (9, 6), (12, 6)], 7) == []\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(100) == False\nassert     is_Diff(89) == True\nassert     is_Diff(90) == True\nassert     is_Diff(90.4) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(is_Diff(2)) # True\nprint(is_Diff(3)) # False\n\ndef is_Div(n): \n    '''\n    Write a python function to find whether a number is divisible by 4 or 7.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_tuple(l1): \n    '''\n    Write a python function to check whether a tuple is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Diff(10) == True, \"The number is divisible by 11.\"\nassert     is_Diff(11) == True, \"The number is divisible by 11.\"\nassert     is_Diff(12) == False, \"The number is not divisible by 11.\"\nassert     is_Diff(20) == False, \"The number is not divisible by 11.\"\n\nprint(\"\\nPass\" if (is_Diff(10) == True and is_Diff(11) == True and is_Diff(12) == False and is_Diff(20) == False) else \"Fail\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(10) == False\nassert     is_Diff(11.5) == True\nassert     is_Diff(9) == False\nassert     is_Diff(-1) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Diff(100) == True, \"Wrong Answer\"\nassert     is_Diff(1000) == True, \"Wrong Answer\"\nassert     is_Diff(1001) == False, \"Wrong Answer\"\nassert     is_Diff(1300) == True, \"Wrong Answer\"\nassert     is_Diff(1400) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_Div_by_11(n): \n    '''\n    Write a python function to check whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Diff_v2(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     word_len(\"Hello\") == False, \"Wrong output\"\nassert     word_len(\"Hello\") == True, \"Wrong output\"\nassert     word_len(\"Hello\") == False, \"Wrong output\"\nassert word_len(\"Hello world\") == True, \"Wrong output\"\nassert word_len(\"Hello world\") == False, \"Wrong output\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     word_len('test') == False\nassert     word_len('test11') == True\nassert     word_len('test111') == False\nassert     word_len('test1') == True\nassert     word_len('test2') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len(\"hello\") == True\nassert     word_len(\"\") == False\nassert     word_len(\"hello world\") == True\nassert     word_len(\"hello\") == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len('hello') == True, \"Should be True\"\nassert     word_len('hello world') == False, \"Should be False\"\nassert     word_len('abcd') == False, \"Should be False\"\nassert     word_len('1234') == True, \"Should be True\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     word_len('hello') == True, 'wrong'\nassert     word_len('hi') == False, 'wrong'\nassert     word_len('hello123') == True, 'wrong'\nassert     word_len('') == False, 'wrong'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('all the test cases passed')\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(5) == 24, \"Wrong\"\nassert     tetrahedral_number(2) == 12, \"Wrong\"\nassert     tetrahedral_number(1) == 4, \"Wrong\"\nassert     tetrahedral_number(0) == 0, \"Wrong\"\nassert     tetrahedral_number(4) == 10, \"Wrong\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntetrahedral_number(3) == 4, 'tetrahedral_number(3) == 4 is not true'\ntetrahedral_number(4) == 8, 'tetrahedral_number(4) == 8 is not true'\n\ndef tetrahedral_number_compute(n):\n    '''\n    Write a function to find the nth tetrahedral number\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\n\nTest Cases\n------------\n\nInput    | Output\n------------\n1         | 1\n2         | 2\n3         | 4\n4         | 12\n5         | 144\n6         | 216\n7         | 2880\n8         | 362880\n\n'''\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tetrahedral_number(1) == 0 \nassert     tetrahedral_number(2) == 6 \nassert     tetrahedral_number(3) == 21 \nassert     tetrahedral_number(4) == 46 \nassert     tetrahedral_number(5) == 132 \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 6\nassert     tetrahedral_number(3) == 18\nassert     tetrahedral_number(4) == 36\nassert     tetrahedral_number(5) == 60\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 3\nassert     tetrahedral_number(3) == 4\nassert     tetrahedral_number(4) == 6\nassert     tetrahedral_number(5) == 10\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to calculate the volume of a cuboid\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_sphere(3) == 28.274, \"incorrect output\"\nassert     volume_sphere(0) == \"error\", \"incorrect output\"\nassert     volume_sphere(2.5) == \"error\", \"incorrect output\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert round(volume_sphere(1),6) == 1.33\nassert round(volume_sphere(2),6) == 1.63\nassert round(volume_sphere(3),6) == 1.97\nassert round(volume_sphere(4),6) == 2.48\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_sphere(1) == 4/3*math.pi*(1**3), 'volume_sphere'\nassert     volume_sphere(2) == 4/3*math.pi*(2**3), 'volume_sphere'\nassert     volume_sphere(3) == 4/3*math.pi*(3**3), 'volume_sphere'\nassert     volume_sphere(4) == 4/3*math.pi*(4**3), 'volume_sphere'\nassert     volume_sphere(5) == 4/3*math.pi*(5**3), 'volume_sphere'\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_sphere(1) == 4.188679245283173, 'incorrect'\nassert     volume_sphere(0) == 0, 'incorrect'\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_sphere(1) == math.pi, \"incorrect value\"\nassert     volume_sphere(0) == math.pi, \"incorrect value\"\nassert     volume_sphere(-1) == math.nan, \"incorrect value\"\nassert     volume_sphere(1.5) == math.nan, \"incorrect value\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_sphere(2) == math.pi*(r**3)/3\nassert     volume_sphere(5) == math.pi*(r**3)/3\nassert     volume_sphere(1) == math.pi*4/3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert volume_sphere(1) == 4 / 3 * math.pi * r**3 \nassert volume_sphere(2) == 4 / 3 * math.pi * (r**3 + r)\nassert volume_sphere(0) == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_sphere(1) == 4 / 3 * math.pi * r ** 3\nassert     volume_sphere(2) == 4 / 3 * math.pi * (r ** 2) ** 3\nassert     volume_sphere(3) == 4 / 3 * math.pi * (r ** 3) ** 3\nassert     volume_sphere(0) == 0\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char(\"hi\") == 11, \"1st example should be 11\"\nassert     get_Char(\"abcd\") == 15, \"2nd example should be 15\"\nassert     get_Char(\"hello\") == 22, \"3rd example should be 22\"\nassert     get_Char(\"adcba\") == 42, \"4th example should be 42\"\nassert     get_Char(\"abcd\") == 9, \"5th example should be 9\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char('') == 0, \"Example 1 failed\"\nassert     get_Char('a') == 1, \"Example 2 failed\"\nassert     get_Char('ab') == 10, \"Example 3 failed\"\nassert     get_Char('abc') == 18, \"Example 4 failed\"\nassert     get_Char('abcd') == 22, \"Example 5 failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"a\") == 10\nassert     get_Char(\"abc\") == 77\nassert     get_Char(\"abc\") == 77\nassert     get_Char(\"abc\") == 77\nassert     get_Char(\"abc\") == 77\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char(\"A\") == 65\nassert get_Char(\"B\") == 66\nassert get_Char(\"C\") == 67\nassert get_Char(\"D\") == 68\nassert get_Char(\"E\") == 69\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char('abcd') == 0\nassert     get_Char('abcd') == 0\nassert     get_Char('abcdef') == 26\nassert     get_Char('pqrstuvwxyz') == 26\nassert     get_Char('abcdefghijklmnopqrstuvwxyz') == 101\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char('ABCD')==225, \"test 1 Failed\"\nassert     get_Char('ABD')==225, \"test 2 Failed\"\nassert     get_Char('aBCD')==225, \"test 3 Failed\"\nassert     get_Char('ABCDE')==285, \"test 4 Failed\"\nassert     get_Char('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')==0, \"test 5 Failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char(\"Navin\") == \"P\"\nassert     get_Char(\"Vinod\") == \"B\"\nassert     get_Char(\"Chandler\") == \"A\"\nassert     get_Char(\"Goku\") == \"S\"\nassert     get_Char(\"Ganesh\") == \"S\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(\"hello\") == 572\nassert get_Char(\"hello\") == 572\n\ndef get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char(\"hello\") == \"p\"\nassert     get_Char(\"kimchi\") == \"j\"\nassert     get_Char(\"michael\") == \"a\"\nassert     get_Char(\"tiger\") == \"g\"\nassert     get_Char(\"vampire\") == \"u\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char(\"ab\") == 61,    \"get_Char() Failed\"\nassert     get_Char(\"abcd\") == 65,    \"get_Char() Failed\"\nassert     get_Char(\"a\") == 97,    \"get_Char() Failed\"\nassert     get_Char(\"a\") == 97,    \"get_Char() Failed\"\nassert     get_Char(\"abc\") == 98,    \"get_Char() Failed\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sequence(1) == 1 \nassert sequence(3) == 1 + 1 + 1 \nassert sequence(5) == 1 + 1 + 2 + 1 + 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 \nassert sequence(10) == 1 + 1 + 2 + 1 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 2 \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 1\nassert     sequence(3) == 2\nassert     sequence(5) == 3\nassert     sequence(7) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsequence(1) == 1\nsequence(2) == 2\nsequence(3) == 3\nsequence(4) == 7\nsequence(5) == 11\nsequence(6) == 19\nsequence(7) == 29\nsequence(8) == 39\nsequence(9) == 47\nsequence(10) == 61\nsequence(11) == 79\nsequence(12) == 97\nsequence(13) == 113\nsequence(14) == 127\nsequence(15) == 143\nsequence(16) == 159\nsequence(17) == 169\nsequence(18) == 199\nsequence(19) == 211\nsequence(20) == 223\nsequence(21) == 239\nsequence(22) == 247\nsequence(23) == 263\nsequence(24) == 277\nsequence(25) == 281\nsequence(26) == 289\nsequence(27) == 311\nsequence(28) == 313\nsequence(29) == 317\nsequence(30) == 331\nsequence(31) == 337\nsequence(32) == 347\nsequence(33) == 349\nsequence(34) == 353\nsequence(35) == 359\nsequence(36) == 367\nsequence(37) == 373\nsequence(38) == 379\nsequence(39) == 383\nsequence(40) == 389\nsequence(41) == 397\nsequence(42) == 401\nsequence(43) == 409\nsequence(44) == 419\nsequence(45) == 421\nsequence(46) == 431\nsequence(47) == 433\nsequence(48) == 439\nsequence(49) == 443\nsequence(50) == 449\nsequence(51) == 457\nsequence(52) == 461\nsequence(53) == 463\nsequence(54) == 467\nsequence(55) == 471\nsequence(56) == 473\nsequence(57) == 479\nsequence(58) == 487\nsequence(59) == 491\nsequence(60) == 499\nsequence(61) == 503\nsequence(62) == 509\nsequence(63) == 511\nsequence(64) == 523\nsequence(65) == 541\nsequence(66) == 547\nsequence(67) == 557\nsequence(68) == 563\nsequence(69) == 569\nsequence(70) == 583\nsequence(71) == 591\nsequence(72) == 593\nsequence(73) == 597\nsequence(74) == 607\nsequence(75) == 613\nsequence(76) == 631\nsequence(77) == 649\nsequence(78) == 661\nsequence(79) == 673\nsequence(80) == 677\nsequence(81) == 683\nsequence(82) == 697\nsequence(83) == 703\nsequence(84) == 709\nsequence(85) == 719\nsequence(86) == 727\nsequence(87) == 733\nsequence(88) == 739\nsequence(89) == 743\nsequence(90) == 757\nsequence(91) == 761\nsequence(92) == 769\nsequence(93) == 783\nsequence(94) == 787\nsequence(95) == 791\nsequence(96) == 793\nsequence(97) == 799\nsequence(98) == 803\nsequence(99) == 821\nsequence(100) == 823\nsequence(101) == 831\nsequence(102) == 837\nsequence(103) == 843\nsequence(104) == 851\nsequence(105) == 857\nsequence(106) == 869\nsequence(107) == 873\nsequence(108) == 877\nsequence(109) == 881\nsequence(110) == 883\nsequence(111) == 887\nsequence(112) == 889\nsequence(113) == 891\nsequence(114) == 913\nsequence(115) == 917\nsequence(116) == 929\nsequence(117) == 931\nsequence(118) == 943\nsequence(119) == 953\nsequence(120) == 959\nsequence(121) == 971\nsequence(122) == 987\nsequence(123) == 991\nsequence(124) == 997\nsequence(125) == 1009\nsequence(126) == 1011\nsequence(127) == 1013\nsequence(128) == 1019\nsequence(129) == 1021\nsequence(130) == 1023\nsequence(131) == 1041\nsequence(132) == 1047\nsequence(133) == 1051\nsequence(134) == 1053\nsequence(135) == 1063\nsequence(136) == 1067\nsequence(137) == 1087\nsequence(138) == 1091\nsequence(139) == 1093\nsequence(140) == 1109\nsequence(141) == 1117\nsequence(142) == 1119\nsequence(143) == 1123\nsequence(144) == 1139\nsequence(145) == 1147\nsequence(146) == 1153\nsequence(147) == 1163\nsequence(148) == 1171\nsequence(149) == 1181\nsequence(150) == 1187\nsequence(151) == 1193\nsequence(152) == 1209\nsequence(153) == 1211\nsequence(154) == 1221\nsequence(155) == 1223\nsequence(156) == 1227\nsequence(157) == 1229\nsequence(158) == 1237\nsequence(159) == 1241\nsequence(160) == 1247\nsequence(161) == 1259\nsequence(162) == 1267\nsequence(163) == 1271\nsequence(164) == 1273\nsequence(165) == 1283\nsequence(166) == 1297\nsequence(167) == 1309\nsequence(168) == 1327\nsequence(169) == 1333\nsequence(170) == 1339\nsequence(171) == 1351\nsequence(172) == 1357\nsequence(173) == 1363\nsequence(174) == 1369\nsequence(175) == 1387\nsequence(176) == 1389\nsequence(177) == 1407\nsequence(178) == 1419\nsequence(179) == 1437\nsequence(180) == 1441\nsequence(181) == 1447\nsequence(182) == 1453\nsequence(183) == 1479\nsequence(184) == 1489\nsequence(185) == 1491\nsequence(186) == 1497\nsequence(187) == 1501\nsequence(188) == 1511\nsequence(189) == 1517\nsequence(190) == 1519\nsequence(191) == 1521\nsequence(192) == 1523\nsequence(193) == 1527\nsequence(194) == 1533\nsequence(195) == 1539\nsequence(196) == 1553\nsequence(197) == 1557\nsequence(198) == 1567\nsequence(199) == 1573\nsequence(200) == 1581\nsequence(201) == 1587\nsequence(202) == 1597\nsequence(203) == 1613\nsequence(204) == 1619\nsequence(205) == 1621\nsequence(206) == 1627\nsequence(207) == 1631\nsequence(208) == 1637\nsequence(209) == 1643\nsequence(210) == 1651\nsequence(211) == 1657\nsequence(212) == 1661\nsequence(213) == 1669\nsequence(214) == 1693\nsequence(215) == 1699\nsequence(216) == 1709\nsequence(217) == 1719\nsequence(218) == 1721\nsequence(219) == 1723\nsequence(220) == 1729\nsequence(221) == 1741\nsequence(222) == 1749\nsequence(223) == 1757\nsequence(224) == 1769\nsequence(225) == 1771\nsequence(226) == 1781\nsequence(227) == 1783\nsequence(228) == 1787\nsequence(229) == 1789\nsequence(230) == 1791\nsequence(231) == 1793\nsequence(232) == 1823\nsequence(233) == 1831\nsequence(234) == 1843\nsequence(235) == 1849\nsequence(236) == 1867\nsequence(237) == 1869\nsequence(238) == 1873\nsequence(239) == 1877\nsequence(240) == 1881\nsequence(241) == 1883\nsequence(242) == 1888\nsequence(243) == 1901\nsequence(244) == 1903\nsequence(245) == 1917\nsequence(246) == 1929\nsequence(247) == 1931\nsequence(248) == 1933\nsequence(249) == 1939\nsequence(250) == 1947\nsequence(251) == 1951\nsequence(252) == 1953\nsequence(253) == 1959\nsequence(254) == 1973\nsequence(255) == 1981\nsequence(256) == 1983\nsequence(257) == 1989\nsequence(258) == 1991\nsequence"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sequence(1) == 1\nassert sequence(2) == 2\nassert sequence(3) == 6\nassert sequence(4) == 10\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sequence(1) == 1\nassert sequence(2) == 1\nassert sequence(3) == 2\nassert sequence(4) == 3\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sequence(5)    == 5 \nassert     sequence(8)    == 13\nassert     sequence(9)    == 22\nassert     sequence(11)    == 33\nassert     sequence(16)    == 58\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef surfacearea_pyramid(h,b):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_sphere(10) == 314.1592653589793, surfacearea_sphere(10)\nassert     surfacearea_sphere(5) == 28.274333882308138, surfacearea_sphere(5)\nassert     surfacearea_sphere(2) == 56.0, surfacearea_sphere(2)\nassert     surfacearea_sphere(0.5) == 12.5, surfacearea_sphere(0.5)\nassert     surfacearea_sphere(0) == 0, surfacearea_sphere(0)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1) == 28.27433358974359\nassert surfacearea_sphere(2) == 78.53863526918804\nassert surfacearea_sphere(3) == 124.15931810089152\nassert surfacearea_sphere(4) == 183.8394836157946\nassert surfacearea_sphere(5) == 260.6266149986191\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * 1 ** 2\nassert     surfacearea_sphere(2) == 4 * math.pi * 2 ** 2\nassert     surfacearea_sphere(3) == 4 * math.pi * 3 ** 2\nassert     surfacearea_sphere(4) == 4 * math.pi * 4 ** 2\nassert     surfacearea_sphere(5) == 4 * math.pi * 5 ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    surfacearea_sphere(1) == 1.527\n    surfacearea_sphere(2) == 5.264\n    surfacearea_sphere(5) == 47.86\n    surfacearea_sphere(10) == 155.384\n    surfacearea_sphere(100) == 53367.6\n    surfacearea_sphere(1000) == 86903.8\n    surfacearea_sphere(10000) == 1250064.2\n    surfacearea_sphere(1000000) == 2521404.6\n    surfacearea_sphere(10000000) ==\n    1633377.4\n    surfacearea_sphere(100000000) ==\n    27186495.5\n    surfacearea_sphere(1000000000) ==\n    2089133385.9"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsurfacearea_sphere(3.4) == 112.5\nassert \nsurfacearea_sphere(4) == 108.73\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(1) == 4*math.pi*r**2, 'Incorrect surfacearea_sphere'\nassert surfacearea_sphere(2) == 4*math.pi*r**2, 'Incorrect surfacearea_sphere'\nassert surfacearea_sphere(3) == 4*math.pi*r**2, 'Incorrect surfacearea_sphere'\nassert surfacearea_sphere(5) == 4*math.pi*r**2, 'Incorrect surfacearea_sphere'\nassert surfacearea_sphere(6) == 4*math.pi*r**2, 'Incorrect surfacearea_sphere'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert \n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    centered_hexagonal_number(1) == 1\n    centered_hexagonal_number(2) == 3\n    centered_hexagonal_number(3) == 4\n    centered_hexagonal_number(4) == 7\n    centered_hexagonal_number(5) == 10\n    centered_hexagonal_number(6) == 13\n    centered_hexagonal_number(7) == 16\n    centered_hexagonal_number(8) == 19\n    centered_hexagonal_number(9) == 22\n    centered_hexagonal_number(10) == 25\n    centered_hexagonal_number(11) == 28\n    centered_hexagonal_number(12) == 31\n    centered_hexagonal_number(13) == 34\n    centered_hexagonal_number(14) == 37\n    centered_hexagonal_number(15) == 40\n    centered_hexagonal_number(16) == 43\n    centered_hexagonal_number(17) == 46\n    centered_hexagonal_number(18) == 49\n    centered_hexagonal_number(19) == 52\n    centered_hexagonal_number(20) == 55\n    centered_hexagonal_number(21) == 58\n    centered_hexagonal_number(22) == 61\n    centered_hexagonal_number(23) == 64\n    centered_hexagonal_number(24) == 67\n    centered_hexagonal_number(25) == 70\n    centered_hexagonal_number(26) == 73\n    centered_hexagonal_number(27) == 76\n    centered_hexagonal_number(28) == 79\n    centered_hexagonal_number(29) == 82\n    centered_hexagonal_number(30) == 85\n    centered_hexagonal_number(31) == 88\n    centered_hexagonal_number(32) == 91\n    centered_hexagonal_number(33) == 94\n    centered_hexagonal_number(34) == 97\n    centered_hexagonal_number(35) == 100\n    centered_hexagonal_number(36) == 103\n    centered_hexagonal_number(37) == 106\n    centered_hexagonal_number(38) == 109\n    centered_hexagonal_number(39) == 112\n    centered_hexagonal_number(40) == 115\n    centered_hexagonal_number(41) == 118\n    centered_hexagonal_number(42) == 121\n    centered_hexagonal_number(43) == 124\n    centered_hexagonal_number(44) == 127\n    centered_hexagonal_number(45) == 130\n    centered_hexagonal_number(46) == 133\n    centered_hexagonal_number(47) == 136\n    centered_hexagonal_number(48) == 139\n    centered_hexagonal_number(49) == 142\n    centered_hexagonal_number(50) == 145\n    centered_hexagonal_number(51) == 148\n    centered_hexagonal_number(52) == 151\n    centered_hexagonal_number(53) == 154\n    centered_hexagonal_number(54) == 157\n    centered_hexagonal_number(55) == 160\n    centered_hexagonal_number(56) == 163\n    centered_hexagonal_number(57) == 166\n    centered_hexagonal_number(58) == 169\n    centered_hexagonal_number(59) == 172\n    centered_hexagonal_number(60) == 175\n    centered_hexagonal_number(61) == 178\n    centered_hexagonal_number(62) == 181\n    centered_hexagonal_number(63) == 184\n    centered_hexagonal_number(64) == 187\n    centered_hexagonal_number(65) == 190\n    centered_hexagonal_number(66) == 193\n    centered_hexagonal_number(67) == 196\n    centered_hexagonal_number(68) == 199\n    centered_hexagonal_number(69) == 202\n    centered_hexagonal_number(70) == 205\n    centered_hexagonal_number(71) == 208\n    centered_hexagonal_number(72) == 211\n    centered_hexagonal_number(73) == 214\n    centered_hexagonal_number(74) == 217\n    centered_hexagonal_number(75) == 220\n    centered_hexagonal_number(76) == 223\n    centered_hexagonal_number(77) == 226\n    centered_hexagonal_number(78) == 229\n    centered_hexagonal_number(79) == 232\n    centered_hexagonal_number(80) == 235\n    centered_hexagonal_number(81) == 238\n    centered_hexagonal_number(82) == 241\n    centered_hexagonal_number(83) == 244\n    centered_hexagonal_number(84) == 247\n    centered_hexagonal_number(85) == 250\n    centered_hexagonal_number(86) == 253\n    centered_hexagonal_number(87) == 256\n    centered_hexagonal_number(88) == 259\n    centered_hexagonal_number(89) == 262\n    centered_hexagonal_number(90) == 265\n    centered_hexagonal_number(91) == 268\n    centered_hexagonal_number(92) == 271\n    centered_hexagonal_number(93) == 274\n    centered_hexagonal_number(94) == 277\n    centered_hexagonal_number(95) == 280\n    centered_hexagonal_number(96) == 283\n    centered_hexagonal_number(97) == 286\n    centered_hexagonal_number(98) == 289\n    centered_hexagonal_number(99) == 292\n    centered_hexagonal_number(100) == 295\n    centered_hexagonal_number(101) == 298\n    centered_hexagonal_number(102) == 301\n    centered_hexagonal_number(103) == 304\n    centered_hexagonal_number(104) == 307\n    centered_hexagonal_number(105) == 310\n    centered_hexagonal_number(106) == 313\n    centered_hexagonal_number(107) == 316\n    centered_hexagonal_number(108) == 319\n    centered_hexagonal_number(109) == 322\n    centered_hexagonal_number(110) == 325\n    centered_hexagonal_number(111) == 328\n    centered_hexagonal_number(112) == 331\n    centered_hexagonal_number(113) == 334\n    centered_hexagonal_number(114) == 337\n    centered_hexagonal_number(115) == 340\n    centered_hexagonal_number(116) == 343\n    centered_hexagonal_number(117) == 346\n    centered_hexagonal_number(118) == 349\n    centered_hexagonal_number(119) == 352\n    centered_hexagonal_number(120) == 355\n    centered_hexagonal_number(121) == 358\n    centered_hexagonal_number(122) == 361\n    centered_hexagonal_number(123) == 364\n    centered_hexagonal_number(124) == 367\n    centered_hexagonal_number(125) == 370\n    centered_hexagonal_number(126) == 373\n    centered_hexagonal_number(127) == 376\n    centered_hexagonal_number(128) == 379\n    centered_hexagonal_number(129) == 382\n    centered_hexagonal_number(130) == 385\n    centered_hexagonal_number(131) == 388\n    centered_hexagonal_number(132) == 391\n    centered_hexagonal_number(133) == 394\n    centered_hexagonal_number(134) == 397\n    centered_hexagonal_number(135) == 400\n    centered_hexagonal_number(136) == 403\n    centered_hexagonal_number(137) == 406\n    centered_hexagonal_number(138) == 409\n    centered_hexagonal_number(139) == 412\n    centered_hexagonal_number(140) == 415\n    centered_hexagonal_number(141) == 418\n    centered_hexagonal_number(142) == 421\n    centered_hexagonal_number(143) == 424\n    centered_hexagonal_number(144) == 427\n    centered_hexagonal_number(145) == 430\n    centered_hexagonal_number(146) == 433\n    centered_hexagonal_number(147) == 436\n    centered_hexagonal_number(148) == 439\n    centered_hexagonal_number(149) == 442\n    centered_hexagonal_number(150) == 445\n    centered_hexagonal_number(151) == 448\n    centered_hexagonal_number(152) == 451\n    centered_hexagonal_number(153) == 454"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(5) == 4\nassert     centered_hexagonal_number(10) == 8\nassert     centered_hexagonal_number(15) == 18\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED; YOU FOUND BETTER LUCK NEXT TIME!\\n\")"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncentered_hexagonal_number(5) == 9\ncentered_hexagonal_number(6) == 28\ncentered_hexagonal_number(100) == 1383945129\ncentered_hexagonal_number(101) == 1818656730\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(1) == 3, \"Wrong\"\nassert     centered_hexagonal_number(2) == 5, \"Wrong\"\nassert     centered_hexagonal_number(3) == 7, \"Wrong\"\nassert     centered_hexagonal_number(4) == 9, \"Wrong\"\nassert     centered_hexagonal_number(5) == 13, \"Wrong\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(0) == 0\nassert     centered_hexagonal_number(1) == 3\nassert     centered_hexagonal_number(2) == 7\nassert     centered_hexagonal_number(3) == 15\nassert     centered_hexagonal_number(4) == 31\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert centered_hexagonal_number(10) == 48\nassert centered_hexagonal_number(8) == 16\nassert centered_hexagonal_number(3) == 18\nassert centered_hexagonal_number(2) == 16\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({\"A\":1},{\"B\":2},{\"C\":3}) == {\"A\":1,\"B\":2,\"C\":3} \nassert     merge_dictionaries_three({\"A\":1},{\"D\":4},{\"E\":3}) == {\"A\":1,\"D\":4,\"E\":3} \nassert     merge_dictionaries_three({\"A\":1},{\"D\":4},{\"E\":3}) == {\"A\":1,\"D\":4,\"E\":3} \nassert     merge_dictionaries_three({\"A\":1,\"B\":2},{\"C\":3,\"D\":4},{\"E\":3}) == {\"A\":1,\"B\":2,\"C\":3,\"D\":4,\"E\":3} \nassert     merge_dictionaries_three({\"A\":1},{\"B\":2,\"C\":3},{\"D\":4}) == {\"A\":1,\"B\":2,\"C\":3,\"D\":4} \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three(\n    dict1={1:10, 2:20},\n    dict2={3:30, 4:40},\n    dict3={5:50, 6:60}\n    ) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\n\ndict1 = {'a': 0, 'b': 1, 'c': 2}\ndict2 = {'a': 10, 'b': 20, 'd': 30}\ndict3 = {'a': -1, 'c': -2, 'e': -3, 'f': -4, 'g': -5, 'h': -6, 'i': -7, 'j': -8, 'k': -9, 'l': -10,'m': -11, 'n': -12, 'o': -13, 'p': -14, 'q': -15, 'r': -16,'s': -17, 't': -18, 'u': -19, 'v': -20, 'w': -21, 'x': -22, 'y': -23, 'z': -24}\n\ndict3.update(dict1)\n\nprint(dict3"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({\"a\":\"1\"},{\"b\":2},{\"c\":3}) == {\"a\":1,\"b\":2,\"c\":3}\nassert     merge_dictionaries_three({\"a\":\"1\"},{\"b\":2},{\"a\":3}) == {\"a\":\"3\",\"b\":2}\nassert     merge_dictionaries_three({\"a\":\"1\"},{\"b\":2},{\"b\":3}) == {\"a\":\"1\",\"b\":3}\nassert     merge_dictionaries_three({\"a\":\"1\",\"b\":\"2\"},{\"a\":\"3\",\"c\":\"4\"},{\"c\":\"5\",\"d\":\"6\"}) == {\"a\":\"1\",\"b\":\"2\",\"c\":\"3\",\"d\":\"6\",\"a\":\"3\",\"c\":\"4\"}\n\n'''\nWrite a function that returns a new dictionary where the value of each key is the\nsum of all the values of the dictionary it is associated with.\n'''\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({}, {}, {}) == {}\nassert    merge_dictionaries_three({1:1, 2:2}, {}, {}) == {1:1, 2:2}\nassert    merge_dictionaries_three({}, {1:1, 2:2}, {}) == {1:1, 2:2}\nassert    merge_dictionaries_three({}, {}, {1:1, 2:2}) == {1:1, 2:2}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({1:1, 2:2, 3:3}, {2:2, 3:3, 4:4}, {1:1, 3:3, 4:4}) == {1:1, 2:2, 3:3, 4:4}\nassert    merge_dictionaries_three({1:1, 2:2, 3:3}, {3:3, 4:4, 5:5}, {1:1, 2:2, 3:3, 4:4}) == {1:1, 2:2, 3:3, 4:4, 5:5}\n\ndef list_of_dicts_to_dict_of_lists(lst_dicts):\n    '''\n    Write a function that takes a list of dictionaries and turns them into a dictionary of lists.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({\"a\": 1},{\"b\": 2}, {\"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"Fail:merge_dictionaries_three\"\nassert     merge_dictionaries_three({\"a\": 1},{\"b\": 2}, {\"b\": 2}) == {\"a\": 1, \"b\": 2}, \"Fail:merge_dictionaries_three\"\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2},{\"b\": 2}, {\"b\": 2}) == {\"a\": 1, \"b\": 2}, \"Fail:merge_dictionaries_three\"\nassert     merge_dictionaries_three({\"a\": 1},{\"a\": 2}, {\"a\": 3}) == {\"a\": 3}, \"Fail:merge_dictionaries_three\"\nassert     merge_dictionaries_three({\"a\": 1},{\"a\": 2}, {\"b\": 2}) == {\"a\": 2}, \"Fail:merge_dictionaries_three\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({1: 1, 2: 2, 3: 3}, {2: 2, 4: 4}, {3: 3, 5: 5}) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     merge_dictionaries_three({1: 1}, {2: 2, 4: 4}, {3: 3, 5: 5}) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     merge_dictionaries_three({1: 1}, {2: 2, 4: 4}, {3: 3, 5: 5, 6: 6}) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({1: 'a', 2: 'b'},{3: 'd'},{4: 'e'}) == {1: 'a', 2: 'b', 3: 'd', 4: 'e'}, \\\n    f\"merge_dictionaries_three returned {merge_dictionaries_three({1: 'a', 2: 'b'},{3: 'd'},{4: 'e'})}\"\n\nassert     merge_dictionaries_three({1: 'a', 2: 'b'},{3: 'c'},{4: 'd', 5: 'e'}) == {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}, \\\n    f\"merge_dictionaries_three returned {merge_dictionaries_three({1: 'a', 2: 'b'},{3: 'c'},{4: 'd', 5: 'e'})}\"\n\nassert     merge_dictionaries_three({1: 'a', 2: 'b', 3: 'c'},{4: 'd', 5: 'e'},{6: 'f'}) == {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f'}, \\\n    f\"merge_dictionaries_three returned {merge_dictionaries_three({1: 'a', 2: 'b', 3: 'c'},{4: 'd', 5: 'e', 6: 'f'})}\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({\"p\": 1}, {\"q\": 2}, {\"r\": 3}) == {\"p\": 1, \"q\": 2, \"r\": 3}\n\nassert merge_dictionaries_three({\"a\": 2}, {\"b\": 1, \"c\": 3}, {\"x\": 2}) == {\"a\": 2, \"b\": 1, \"c\": 3, \"x\": 2}\nassert merge_dictionaries_three({\"a\": 2}, {\"b\": 1, \"x\": 2}, {\"c\": 3}) == {\"a\": 2, \"b\": 1, \"c\": 3, \"x\": 2}\nassert merge_dictionaries_three({\"a\": 2, \"x\": 2}, {\"b\": 1, \"c\": 3}, {\"x\": 2, \"y\": 4}) == {\"a\": 2, \"b\": 1, \"c\": 3, \"x\": 2, \"y\": 4}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"a\": 3, \"c\": 5}, {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2, \"c\": 5}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"b\": 2, \"c\": 5}, {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2, \"c\": 5}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 5}, {\"a\": 3, \"b\": 2}, {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2, \"c\": 5}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 5}, {\"a\": 3, \"b\": 2, \"d\": 7}, {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2, \"c\": 5, \"d\": 7}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     freq_count([1,2,1,1,1,2,3,1,4,1]) ==     {1: 4, 2: 3, 3: 1, 4: 1}\n\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = dict()\n    for i in list1:\n        d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     freq_count(['a','b','c','a','b','c','a','b','c','a']) == {'a': 3, 'b': 2, 'c': 2}\nassert     freq_count([1,1,1,1,1]) == {1: 5}\nassert     freq_count([]) == {}\nassert     freq_count(None) == None\n\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([1, 2, 2, 3, 4]) == {1: 2, 2: 2, 3: 1, 4: 1}\nassert freq_count([]) == {}\nassert freq_count(['a', 'b', 'a', 'a', 'b']) == {'a': 3, 'b': 2}\nassert freq_count([1, 2, 3, 4]) == {1: 1, 2: 1, 3: 1, 4: 1}\nassert freq_count(['b', 'b', 'a', 'c']) == {'a': 1, 'b': 2, 'c': 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count([1,1,2,3,4,5]) == {1:3, 2:1, 3:1, 4:1, 5:1}\nassert     freq_count(['a','a','b','c','b','a','b','a']) == {'a':4, 'b':3, 'c':2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef freq_count_test():\n    test_inputs = [[1,1,2,3,3,4,4,5,5,5,6,7,7,7,7,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     freq_count([1,2,3,3,2,1,2,3,4,1,2,3,1]) == collections.Counter([1:5, 2:4, 3:3, 4:1])\nassert freq_count([]) == collections.Counter()\nassert freq_count([1,2,3,4,5,6,7]) == collections.Counter(\n    {1: 4, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1})\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count([3,2,2,2]) == {3:4,2:3}\nassert     freq_count([3,3,3,3,3,2,2]) == {3:6,2:5}\nassert     freq_count([4,1,1,1,2,2,2,1,2,3]) == {1:4,2:6,3:1}\n\n\ndef freq_count_opt(list1):\n    '''\n    This function has better performance.\n    '''\n    freq_dict = {}\n    for n in list1:\n        if n in freq_dict:\n            freq_dict[n] += 1\n        else:\n            freq_dict[n] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_dictionary(dictionary):\n    '''\n    Write a function to reverse a dictionary, so that keys are placed at the end of the dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,2,3,3]) == {1: 1, 2: 1, 3: 2}\nassert     freq_count([1,2,3,4]) == {1: 1, 2: 1, 3: 2, 4: 1}\nassert     freq_count([1,2,3,4,3,2]) == {1: 4, 2: 4, 3: 3, 4: 1}\nassert     freq_count([1,1,2,3,4,4,2,3,4,4,2,2]) == {1: 6, 2: 5, 3: 4, 4: 4}\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     closest_num(12)    ==  7\nassert     closest_num(13)    ==  8\nassert     closest_num(6)    ==  5\nassert     closest_num(7)    ==  6\nassert     closest_num(5)    ==  4\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_num(10)     == 9\nassert     closest_num(18)     == 17\nassert     closest_num(21)     == 20\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_num(1) == 1\nassert     closest_num(0) == 0\nassert     closest_num(3) == 1\nassert     closest_num(2) == 1\nassert     closest_num(4) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_num(1) == 0\nassert     closest_num(2) == 1\nassert     closest_num(4) == 2\nassert     closest_num(7) == 3\nassert     closest_num(10) == 5\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_num(1) == 1\nassert     closest_num(2) == 1\nassert     closest_num(3) == 1\nassert     closest_num(4) == 1\nassert     closest_num(5) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef closest_num_opt(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     len_log(['i', 'like', 'learning', 'python', 'at', 'the', 'rabbit']) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log(['short', 'trash', 'tug','spat', 'pat', 'pat']) == 6, 'your code is wrong'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log([]) == 0\nassert     len_log([1]) == 1\nassert     len_log([1, 1]) == 2\nassert     len_log([1, 1, 2, 3, 5, 7]) == 5\nassert     len_log([2, 2, 3, 4, 5, 6]) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log([\"Hellllooo\",\"worlllllllllll\",\"Hello\"]) == 7, \"test failed\""
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef even(n):\n    '''\n    Write a python function to check if the given number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     len_log([]) == 0, \"Empty list\"\nassert     len_log(['a']) == 1, \"List with one element\"\nassert     len_log(['p','y','t','h','o','n']) == 6, \"All letters\"\nassert     len_log(['p','y','t','h','o','n','a']) == 7, \"All letters\"\nassert     len_log(['p','y','t','h','o','n','a','m']) == 7, \"All letters\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([]) == 0, 'empty list'\nassert     len_log([1]) == 1,'single element'\nassert     len_log([1, 2]) == 2, 'two element'\nassert     len_log([1, 2, 3, 4]) == 4, 'four element'\nassert     len_log([1, 2, 3, 4, 5]) == 5, 'five element'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     len_log([]) == 0\nassert len_log([\"a\", \"big\", \"cat\"]) == 3\nassert len_log([\"the\", \"big\", \"cat\", \"sat\"]) == 5\nassert len_log([\"a\", \"a\", \"cat\"]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    list1 = ['hello', 'world', 'hi', 'welcome']\n    print(\"length of list1:\", len_log(list1))\n\n    list2 = ['hello', 'world', 'hi']\n    print(\"length of list2:\", len_log(list2))\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('\\nFinding substring in list:')\n\n'''\nExample Input\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"axc\") # should return False\nfind_substring(\"abc\",\"c\") # should return True\nfind_substring(\"abc\",\"d\") # should return False\nfind_substring(\"abc\",\"z\") # should return False\nfind_substring(\"abc\",\"abcdef\") # should return False\nfind_substring(\"abc\",\"abcdefg\") # should return True\nfind_substring(\"abc\",\"abcdefgh\") # should return True\nfind_substring(\"abc\",\"abcdefghi\") # should return False\nfind_substring(\"abcdefgh\",\"abcdefghi\") # should return True\nfind_substring(\"abcdefghi\",\"abcdefghi\") # should return True\nfind_substring(\"abcdefghi\",\"abcdefgh\") # should return False\nfind_substring(\"abc\",\"abcde\") # should return False\nfind_substring(\"abc\",\"abcde\") # should return True\nfind_substring(\"abc\",\"abcde\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"abc\",\"abc\") # should return True\nfind_substring(\"ab"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring(\"this is a test string\", \"string\") == True, \"Should be True\"\nassert     find_substring(\"this is a test string\", \"s\") == False, \"Should be False\"\nassert     find_substring(\"this is a test string\", \"this\") == False, \"Should be False\"\nassert     find_substring(\"this is a test string\", \"test\") == True, \"Should be True\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_substring(\"Aa\", [\"Aa\", \"aa\", \"aaa\"])\n    == False\n    \nassert \n    find_substring(\"aA\", [\"Aa\", \"aa\", \"aaa\"])\n    == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring(\n    \"island\",\n    \"is\"\n) == True\nassert     find_substring(\n    \"island\",\n    \"s\"\n) == False\nassert     find_substring(\n    \"mango\",\n    \"man\"\n) == False\nassert     find_substring(\n    \"mango\",\n    \"l\"\n) == True\n\ndef find_substring_multiple_values(str1, values):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_substring('r','z') == False\nassert find_substring('z','z') == True\nassert find_substring('n','z') == False\nassert find_substring('z','z') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    print(doctest.testmod())"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring(['a','b','c','d','e','f'], 'ab') == True\nassert     find_substring(['a','b','c','d','e','f'],'sds') == False\nassert     find_substring(['a','b','c','d','e','f'], 'f') == False\nassert     find_substring(['a','b','c','d','e','f'], 'k') == False\nassert     find_substring(['a','b','c','d','e','f'], '') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_substring_by_index(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(is_undulating(2))\nprint(is_undulating(3))\nprint(is_undulating(9))\nprint(is_undulating(4))\nprint(is_undulating(5))\nprint(is_undulating(6))\nprint(is_undulating(7))\nprint(is_undulating(8))\nprint(is_undulating(10))\nprint(is_undulating(20))\nprint(is_undulating(100))\nprint(is_undulating(1000))\n\n\n'''\nThe input to this function is a non-negative integer n.\nYour task is to return true if n is undulating and false otherwise.\n\nExample 1:\n\nInput: 2\nOutput: true\nExample 2:\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_undulating(23) == True \nassert     is_undulating(24) == True \nassert     is_undulating(15) == False \nassert     is_undulating(150) == False \nassert     is_undulating(25) == False \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_undulating(100)==False, \"This should be False\"\nassert     is_undulating(500)==True, \"This should be True\"\nassert     is_undulating(15)==True, \"This should be True\"\nassert     is_undulating(999)==False, \"This should be False\"\nassert     is_undulating(999.9)==True, \"This should be True\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_undulating(5) == True, 'Failed'\nassert     is_undulating(10) == False, 'Failed'\nassert     is_undulating(-5) == True, 'Failed'\nassert     is_undulating(20) == True, 'Failed'"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_undulating(1) == True\nassert     is_undulating(2) == False\nassert     is_undulating(-1) == False\nassert     is_undulating(0) == False\nassert     is_undulating(4) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_undulating(2) == False, 'Wrong output'\nassert     is_undulating(4) == True, 'Wrong output'\nassert     is_undulating(10) == True, 'Wrong output'\nassert     is_undulating(16) == True, 'Wrong output'\nassert     is_undulating(20) == True, 'Wrong output'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_undulating(2) == True\nis_undulating(11) == True\nis_undulating(28) == True\nis_undulating(5) == False\nis_undulating(30) == False\nis_undulating(13) == False\nis_undulating(18) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(1,2) == 1\nassert     power(2,3) == 8\nassert     power(2,2) == 4\nassert     power(3,2) == 9\nassert     power(3,3) == 27\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(1, 2) == 1 * 1\nassert     power(1, -2) == 1 / 1\nassert     power(2, 2) == 2 * 2\nassert     power(2, -2) == 2 / 2\nassert     power(2, 2) == 4\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power(2,1) == 2\nassert     power(2,3) == 8\nassert     power(1,1) == 1\nassert     power(4,3) == 16\nassert     power(1,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(5,3) == 25\nassert     power(1,10) == 1\nassert     power(0.5,3) == 0.25\nassert     power(1,2) == 1\nassert     power(2,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(3,2) == 9\nassert     power(2,4) == 16\nassert     power(3.2,2) == 9.4\nassert     power(-3,2) == 9\nassert     power(3,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(2,1) == 2\nassert     power(2,0) == 1\nassert     power(2,2) == 4\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,3) == 8\nassert    power(2,4) == 16\nassert    power(2,-1) == 1\nassert    power(0,1) == 0\nassert    power(1,1) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(3,0) == 1\nassert     power(3,1) == 3\nassert     power(3,2) == 9\nassert     power(3,3) == 27\nassert     power(3,4) == 81\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (power(2,3) == 8), 'Power failed'\nassert     (power(4,0) == 1), 'Power failed'\nassert     (power(1,1) == 1), 'Power failed'\nassert     (power(-1,1) == -1), 'Power failed'\n\ndef fibonacci(n):\n    '''\n    Write a function that returns the nth value of the fibonacci sequence.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # 1. Test data:\n    # 1) [], 2) [(\"a\",\"b\")], 3) [(\"a\",\"b\"),(\"c\",\"d\")], 4) [(\"a\",\"b\"),(\"c\",\"d\"),(\"a\",\"b\")], 5) [(\"a\",\"b\"),(\"c\",\"d\"),(\"a\",\"b\"),(\"c\",\"d\")]\n    # 2) Value expected:\n    # 2) \"a\"\n    # 3) \"a\"\n    # 4) \"a\"\n    # 5) \"a\"\n    # 6) \"a\"\n    print(\"\\nFirst value (1) in test data with minimum second value:\")\n    print(index_minimum([]))\n    print(index_minimum([(\"a\",\"b\")]))\n    print(index_minimum([(\"a\",\"b\"),(\"c\",\"d\")]))\n    print(index_minimum([(\"a\",\"b\"),(\"c\",\"d\"),(\"a\",\"b\")]))\n    print(index_minimum([(\"a\",\"b\"),(\"c\",\"d\"),(\"a\",\"b\"),(\"c\",\"d\")]))\n\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_minimum([(1,2),(2,1),(3,1)])==(1,1)\nassert     index_minimum([(1,1),(2,2),(3,1)])==(1,1)\nassert     index_minimum([(1,2),(2,2),(3,2)])==(2,2)\nassert     index_minimum([(1,3),(2,4),(3,3)])==(1,3)\nassert     index_minimum([(1,3),(2,2),(3,1)])==(1,3)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_minimum([(1,2), (2,3), (5,6)]) == (1,2)\nassert index_minimum([(1,2), (2,3), (5,6)]) == (1,2)\nassert index_minimum([(1,2), (2,3), (5,6)]) == (1,2)\nassert index_minimum([(1,2), (2,3), (5,6)]) == (2,3)\nassert index_minimum([(1,2), (2,3), (5,6)]) == (5,6)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum([('A',1),('B',2)]) == ('A',1)\nassert     index_minimum([('C',3),('A',1)]) == ('A',1)\nassert     index_minimum([('C',3),('C',3),('D',2),('A',1)]) == ('C',3)\nassert     index_minimum([('B',1),('A',1),('C',3),('D',2),('C',3),('A',1),('B',1),('A',1),('A',1),('A',1),('B',1),('B',1),('A',1),('B',1)]) == ('A',1)\n\n\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([(1, 2), (2, 1)]) == (1, 1), \"Error1\"\nassert     index_minimum([(1, 2), (2, 1), (3, 1)]) == (1, 1), \"Error2\"\nassert     index_minimum([(1, 2), (1, 2)]) == (1, 2), \"Error3\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_minimum([(\"a\", 1), (\"c\", 2), (\"b\", 0)]) == (\"a\", 1)\nassert     index_minimum([(\"a\", 1), (\"c\", 3), (\"b\", 0)]) == (\"a\", 1)\nassert     index_minimum([(\"a\", 2), (\"c\", 1), (\"b\", 0)]) == (\"b\", 0)\nassert     index_minimum([(\"c\", 1), (\"a\", 2), (\"b\", 0)]) == (\"c\", 1)\nassert     index_minimum([(\"c\", 2), (\"a\", 1), (\"b\", 0)]) == (\"c\", 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_minimum([(1, 2), (2, 1), (3, 1)]) == (1, 1)\nassert     index_minimum([(1, 2), (2, 1), (3, 1), (4, 1)]) == (1, 1)\nassert     index_minimum([(1, 2), (1, 3), (2, 1), (3, 1)]) == (1, 1)\nassert     index_minimum([(2, 1), (3, 1), (1, 1), (4, 1)]) == (2, 1)\nassert     index_minimum([(2, 1), (3, 1), (1, 1), (2, 1)]) == (2, 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef index_minimum_sorted(test_list):\n    '''\n    Given a sorted list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([[1,2,3,4],[5,6,7,8]]) == 3, \"find_min_length should return 3\"\nassert     Find_Min_Length([[1,2,3,4],[5,6,7,8],[1,1,1]]) == 1, \"find_min_length should return 1\"\nassert     Find_Min_Length([[1,2,3,4],[5,6,7,8]]) == 0, \"find_min_length should return 0\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[[1, 2], 4], \n                    [1, 3, 1], \n                    [6, 7, 8], \n                    [3, 3, 3]]) == 2\nassert Find_Min_Length([[1, 1, 1]]) == 1\nassert Find_Min_Length([[1], [2], [3]]) == 1\nassert Find_Min_Length([[1, 2, 4], \n                    [1, 3, 1], \n                    [6, 7, 8], \n                    [3, 3, 3]]) == 4\nassert Find_Min_Length([[1, 2, 4], \n                    [1, 3, 1], \n                    [6, 7, 8], \n                    [3, 3, 3]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length(['b', 'c', 'e', 'g']) == 1\nassert     Find_Min_Length(['a', 'c', 'e', 'g']) == 3\nassert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([['a', 'b', 'c'], ['c']]) == 3\nassert     Find_Min_Length([['a', 'b', 'c'], ['d', 'e', 'f']]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min_Length([[1],2,3,4,5]) == 2, 'Should be 2'\nassert     Find_Min_Length([1,2,3,4,5]) == 1, 'Should be 1'\nassert     Find_Min_Length([1,2,3,4]) == 1, 'Should be 1'\nassert     Find_Min_Length([1,2,3,4,5,6,7]) == 1, 'Should be 1'\nassert     Find_Min_Length([]) == 0, 'Should be 0'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nFind_Min_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 2\nassert Find_Min_Length([[1, 2, 3], [1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 1\nassert Find_Min_Length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], \n                        [1, 2, 3, 4, 5]]) == 1\nassert Find_Min_Length([[1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], \n                        [1, 2, 3, 4, 5]]) == 3\nassert Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], \n                        [1, 2, 3, 4, 5]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([[1,2,3]]) == 3\nassert     Find_Min_Length([[1,2,3],[4,5]]) == 3\nassert     Find_Min_Length([[1,2,3],[4,5,6],[7,8]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nFind_Min_Length([[1, 2], [3], [4, 5, 6], [], [7, 8], [9]]) == 2\nassert Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9]]) == 1\nassert Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) == 1\n\ndef Count_Even_From_Index(lst):\n    '''\n    Write a python function to count the number of even numbers from a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nFind_Min_Length([[1,2],[3,4],[5,6],[7,8]]) == 1\nassert \nFind_Min_Length([[2,3],[2,3],[4,5],[4,5]]) == 2\nassert \nFind_Min_Length([[2,3],[2,3],[4,5],[4,5],[4,5]]) == 3\nassert \nFind_Min_Length([[2,3],[2,3],[4,5],[4,5]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3\nassert     Find_Min_Length([[1],[2],[3],[4],[5]]) == 1\nassert     Find_Min_Length([[2,4],[6,8],[10,12]]) == 2\nassert     Find_Min_Length([[1,2,3],[4,5,6],[7,8,9],[10,12,14]]) == 4\nassert     Find_Min_Length([[1,2,3],[4,5,6]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[1,2,3],\n                           [3,4,5],\n                           [1,2,3]]) == 2, \"Wrong answer\"\nassert     Find_Min_Length([[1,2,3],\n                           [1,2,3],\n                           [1,2,3]]) == 1, \"Wrong answer\"\nassert     Find_Min_Length([[1,2,3],\n                           [1,2,3],\n                           [2,3,4]]) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisor(1) == 0\nassert     divisor(2) == 1\nassert     divisor(3) == 1\nassert     divisor(6) == 2\nassert     divisor(8) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     divisor(0) == 1, \"Number 0 has 1 divisor\"\nassert     divisor(2) == 2, \"Number 2 has 2 divisors\"\nassert     divisor(3) == 3, \"Number 3 has 3 divisors\"\nassert     divisor(4) == 2, \"Number 4 has 2 divisors\"\nassert     divisor(5) == 5, \"Number 5 has 5 divisors\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_divisors(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisor(12) == 6, \"No, it is not divisor\"\nassert     divisor(7) == 5, \"It is divisor\"\nassert     divisor(9) == 6, \"It is divisor\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(divisor(10))\n\n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(0) == 0, \"The function should return 0\"\nassert     divisor(4) == 2, \"The function should return 2\"\nassert     divisor(6) == 2, \"The function should return 2\"\nassert     divisor(10) == 4, \"The function should return 4\"\nassert     divisor(12) == 3, \"The function should return 3\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert divisor(0) == 0\nassert divisor(2) == 1\nassert divisor(4) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisor(2) == 2\nassert     divisor(8) == 6\nassert     divisor(12) == 6\nassert     divisor(6) == 2\nassert     divisor(6.5) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndivisor(9) == 3\nassert\ndivisor(36) == 6\nassert\ndivisor(12) == 4\nassert\ndivisor(18) == 3\nassert\ndivisor(36) == 6\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert frequency_lists([[1, 2, 3], [1, 1, 2], [3, 1, 1]]) == {1: 3, 2: 2, 3: 1}\nassert frequency_lists([[1, 2, 3, 1], [1, 2], [2, 1], [1, 1, 2, 2]]) == {1: 3, 2: 2, 3: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndef get_frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_lists = {}\n    for x in list1:\n        for y in x:\n            if y not in frequency_lists:\n                frequency_lists[y] = 1\n            else:\n                frequency_lists[y] += 1\n    return frequency_lists\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    frequency_lists([[1,2,3],2,1,2]) == {1:2,2:2,3:2}\n    frequency_lists([[1,2],2,1,2]) == {1:2,2:2}\n    frequency_lists([1,2]) == {1:1,2:1}\n    frequency_lists([[1,2,3],2,1,2]) == {1:2,2:2,3:2}\n    frequency_lists([[1,2],2,1,2,2]) == {1:2,2:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2]) == {1:2,2:2,3:2}\n    frequency_lists([[1,2,3,4,5,6],2,1,2,2]) == {1:2,2:2,3:2,4:2,5:2,6:2}\n    frequency_lists([[1,2,3,4,5,6],2,1,2,2,2]) == {1:2,2:2,3:2,4:2,5:2,6:2}\n    frequency_lists([[1,2],2,1,2,2]) == {1:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2]) == {1:2,2:2,3:2}\n    frequency_lists([[1,2,3],2,1,2,2]) == {1:2,2:2,3:2}\n    frequency_lists([[1,2,3],2,1,2,2]) == {1:2,2:2,3:2}\n    frequency_lists([[1,2,3],2,1,2,2]) == {1:2,2:2,3:2}\n    frequency_lists([[1,2],2,1,2,2]) == {1:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2]) == {1:2,2:2,3:2}\n    frequency_lists([[1,2],2,1,2,2,2]) == {1:2,2:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2],2,1,2,2,2]) == {1:2,2:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2],2,1,2,2,2]) == {1:2,2:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3],2,1,2,2,2]) == {1:2,2:2,3:2,2:2}\n    frequency_lists([[1,2,3]"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1, 2], [2, 2], [4, 3], [2, 2], [4, 3]]) == \n{1: 2, 2: 3, 4: 2}\nassert frequency_lists([[1, 2], [2, 2], [4, 3], [2, 2], [4, 3], [4, 2]]) ==\n{1: 3, 2: 2, 3: 2, 4: 2}\nassert frequency_lists([[1, 2], [2, 2], [4, 3], [2, 2], [4, 2]]) == {1: 2, 2: 2, 4: 1}\nassert frequency_lists([[1, 2], [2, 2], [4, 3], [2, 2], [4, 3], [4, 2]]) == {1: 2, 2: 2, 4: 2, 3: 1}\nassert frequency_lists([[1, 2], [2, 2], [4, 3], [2, 2], [4, 2]]) == {1: 2, 2: 2, 4: 1, 3: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([[1,2,3], [4,5,6], [7,8,9],[1,3,3], [7,8,9], [1,3,3],\n    [7,8,9], [1,3,3], [7,8,9]]) == {1: 3, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert     frequency_lists([[1,2,3], [4,5,6]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}\nassert     frequency_lists([[1,2,3], [4], [5,6], [7,8], [9,0]]) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert     frequency_lists([[1,2,3], [4], [5,6], [7,8], [9,0], [1,3,3],\n    [7,8,9], [1,3,3], [7,8,9]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert     frequency_lists([[1,2,3], [4], [5,6], [7,8,9],\n    [1,3,3], [7,8,9], [1,3,3], [7,8,9]]) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1,2],2,1,2,3,3,1]) == {\n    1: 3,\n    2: 2,\n    3: 2,\n}\nassert frequency_lists([[1,2,3,4,5,6],3,1,2,1,2,3,3,1]) == {\n    1: 4,\n    2: 2,\n    3: 5,\n    4: 1,\n    5: 1,\n    6: 1,\n}\nassert frequency_lists([[1,2,3,4,5,6,7,8,9,10,11,12],3,1,2,1,2,3,3,1]) == {\n    1: 5,\n    2: 2,\n    3: 6,\n    4: 1,\n    5: 1,\n    6: 1,\n    7: 1,\n    8: 1,\n    9: 1,\n    10: 1,\n    11: 1,\n    12: 1,\n}\nassert frequency_lists([[1,2,3,4,5,6,7,8,9,10,11,12,13],3,1,2,1,2,3,3,1]) == {\n    1: 6,\n    2: 2,\n    3: 8,\n    4: 2,\n    5: 1,\n    6: 1,\n    7: 1,\n    8: 1,\n    9: 1,\n    10: 1,\n    11: 1,\n    12: 1,\n    13: 1,\n}\nassert frequency_lists([[1,2,3,4,5,6,7,8,9,10,11,12,13],3,1,2,1,2,3,3,1]) == {\n    1: 6,\n    2: 2,\n    3: 8,\n    4: 2,\n    5: 1,\n    6: 1,\n    7: 1,\n    8: 1,\n    9: 1,\n    10: 1,\n    11: 1,\n    12: 1,\n    13: 1,\n}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1,3,5],[2,3,4,2,3]]) == {1:2, 2:3, 3:4, 4:2, 5:1}\nassert     frequency_lists([[1,3],[2,4,5,5,2,4,2,3,1,2],[3,1,2,3,2,3]]) == {1:3, 2:2, 3:2, 4:2, 5:3, 2:1, 3:1, 4:1, 2:1}\nassert     frequency_lists([[1,3,4],[2,3,4,2,3],[3,1,2,3,2,3]]) == {1:4, 2:3, 3:3, 4:2, 2:2, 3:2}\nassert     frequency_lists([]) == {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1,2,3],[4,5,6]]) == {1:1,2:1,3:1,4:1,5:1,6:1}\nassert     frequency_lists([[1,2,3,4,5],[2,3,4]]) == {1:1,2:2,3:1,4:1,5:1}\nassert     frequency_lists([[1,1,1,1,1,1]]) == {1:5}\nassert     frequency_lists([]) == {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1,2,3,4,5], [4,3,2,1,0], [5,4,3,2,1], \n                          [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], \n                          [4,3,2,1,0,15,14,13,12,11,10,9,8,7,6,5]]) == {\n    1: 5, 2: 5, 3: 5, 4: 5, 5: 5, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1}\n\n\ndef frequency_lists_v2(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # First solution\n    res = {}\n    for i in list1:\n        for j in i:\n            if j in res.keys():\n                res[j] += 1\n            else:\n                res[j] = 1\n    return res\n\n    # Second solution\n    # 1. Create a set to store the unique values.\n    # 2. iterate over list1, if the current value in list1 is not yet in the set,\n    # add the current value into the set.\n    # 3. add the key value pair to the dictionary.\n    # 4. if the length of the set is greater than 0, change the value of the key to be the number of times the key appears in list1.\n    # 5. return the dictionary\n    \n    s = set()\n    for i in list1:\n        for j in i:\n            s.add(j)\n\n    res = {}\n    for j in s:\n        if j in res.keys():\n            res[j] += 1\n        else:\n            res[j] = 1\n\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_num([]) == 1, \"Error in multiply_num\"\nassert multiply_num([1, 2, 3]) == 6, \"Error in multiply_num\"\nassert multiply_num([2, 2, 2, 2, 2]) == 8, \"Error in multiply_num\"\nassert multiply_num([2, 2, 2, 2, 2, 2]) == 8, \"Error in multiply_num\"\nassert multiply_num([1, 2, 3, 4, 5, 6]) == 72, \"Error in multiply_num\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([0,0,0,0]) == 0\nassert     multiply_num([4,0,4]) == 32\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_num([1,2,3,4,5]) == 120, \"Wrong answer\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_num([1,2,3,4,5]) == 120\nassert     multiply_num([1,2,3,4,5,7,8]) == 560\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([1, 3, 4, 5]) == 60\nassert     multiply_num([1, 2, 1, 2]) == 4\nassert     multiply_num([]) == 1\nassert     multiply_num([1, 1]) == 2"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([1,2,3]) == 6\nassert     multiply_num([2,5]) == 10\nassert     multiply_num([]) == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(43))\nprint(decimal_to_binary(63))\nprint(decimal_to_binary(125))\nprint(decimal_to_binary(217))\nprint(decimal_to_binary(1024))\nprint(decimal_to_binary(10000))\nprint(decimal_to_binary(100000))\nprint(decimal_to_binary(92811))\nprint(decimal_to_binary(92811+1))\nprint(decimal_to_binary(92811+1)-1)\nprint(decimal_to_binary(92811+1)-2)\nprint(decimal_to_binary(92811+1)-3)\nprint(decimal_to_binary(92811+1)-4)\nprint(decimal_to_binary(92811+1)-5)\nprint(decimal_to_binary(92811+1)-6)\nprint(decimal_to_binary(92811+1)-7)\nprint(decimal_to_binary(92811+1)-8)\nprint(decimal_to_binary(92811+1)-9)\nprint(decimal_to_binary(92811+1)-10)\nprint(decimal_to_binary(92811+1)-11)\nprint(decimal_to_binary(92811+1)-12)\nprint(decimal_to_binary(92811+1)-13)\nprint(decimal_to_binary(92811+1)-14)\nprint(decimal_to_binary(92811+1)-15)\nprint(decimal_to_binary(92811+1)-16)\nprint(decimal_to_binary(92811+1)-17)\nprint(decimal_to_binary(92811+1)-18)\nprint(decimal_to_binary(92811+1)-19)\nprint(decimal_to_binary(92811+1)-20)\nprint(decimal_to_binary(92811+1)-21)\nprint(decimal_to_binary(92811+1)-22)\nprint(decimal_to_binary(92811+1)-23)\nprint(decimal_to_binary(92811+1)-24)\nprint(decimal_to_binary(92811+1)-25)\nprint(decimal_to_binary(92811+1)-26)\nprint(decimal_to_binary(92811+1)-27)\nprint(decimal_to_binary(92811+1)-28)\nprint(decimal_to_binary(92811+1)-29)\nprint(decimal_to_binary(92811+1)-30)\nprint(decimal_to_binary(92811+1)-31)\nprint(decimal_to_binary(92811+1)-32)\nprint(decimal_to_binary(92811+1)-33)\nprint(decimal_to_binary(92811+1)-34)\nprint(decimal_to_binary(92811+1)-35)\nprint(decimal_to_binary(92811+1)-36)\nprint(decimal_to_binary(92811+1)-37)\nprint(decimal_to_binary(92811+1)-38)\nprint(decimal_to_binary(92811+1)-39)\nprint(decimal_to_binary(92811+1)-40)\nprint(decimal_to_binary(92811+1)-41)\nprint(decimal_to_binary(92811+1)-42)\nprint(decimal_to_binary(92811+1)-43)\nprint(decimal_to_binary(92811+1)-44)\nprint(decimal_to_binary(92811+1)-45)\nprint(decimal_to_binary(92811+1)-46)\nprint(decimal_to_binary(92811+1)-47)\nprint(decimal_to_binary(92811+1)-48)\nprint(decimal_to_binary(92811+1)-49)\nprint(decimal_to_binary(92811+1)-50)\nprint(decimal_to_binary(92811+1)-51)\nprint(decimal_to_binary(92811+1)-52)\nprint(decimal_to_binary(92811+1)-53)\nprint(decimal_to_binary(92811+1)-54)\nprint(decimal_to_binary(92811+1)-55)\nprint(decimal_to_binary(92811+1)-56)\nprint(decimal_to_binary(92811+1)-57)\nprint(decimal_to_binary(92811+1)-58)\nprint(decimal_to_binary(92811+1)-59)\nprint(decimal_to_binary(92811+1)-60)\nprint(decimal_to_binary(92811+1)-61)\nprint(decimal_to_binary(92811+1)-62)\nprint(decimal_to_binary(92811+1)-63)\nprint(decimal_to_binary(92811+1)-64)\nprint(decimal_to_binary(92811+1)-65)\nprint(decimal_to_binary(92811+1)-66)\nprint(decimal_to_binary(92811+1)-67)\nprint(decimal_to_binary(92811+1)-68)\nprint(decimal_to_binary(92811+1)-69)\nprint(decimal_to_binary(92811+1)-70)\nprint(decimal_to_binary(92811+1)-71)\nprint(decimal_to_binary(92811+1)-72)\nprint(decimal_to_binary(92811+1)-73)\nprint(decimal_to_binary(92811+1)-74)\nprint(decimal_to_binary(92811+1)-75)\nprint(decimal_to_binary(92811+1)-76)\nprint(decimal_to_binary(92811+1)-77)\nprint(decimal_to_binary(92811+1)-78)\nprint(decimal_to_binary(92811+1)-79)\nprint(decimal_to_binary(92811+1)-80)\nprint(decimal_to_binary(92811+1)-81)\nprint(decimal_to_binary(92811+1)-82)\nprint(decimal_to_binary(92811+1)-83)\nprint(decimal_to_binary(92811+1)-84)\nprint(decimal_to_binary(92811+1)-85)\nprint(decimal_to_binary(92811+1)-86)\nprint(decimal_to_binary(92811+1)-87)\nprint(decimal_to_binary(92811+1)-88)\nprint(decimal_to_binary(92811+1)-89)\nprint(decimal_to_binary(92811+1)-90)\nprint(decimal_to_binary(92811+1)-91)\nprint(decimal_to_binary(92811+1)-92)\nprint(decimal_to_binary(92811+1)-93)\nprint(decimal_to_binary(92811+1)-94)\nprint(decimal_to_binary(92811+1)-95)\nprint(de"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(9) == '1001'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(11) == '1011'\nassert     decimal_to_binary(12) == '1100'\nassert     decimal_to_binary(13) == '1101'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(7) == '111'\nassert     decimal_to_binary(8) == '1000'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(35) == '1010101'\nassert     decimal_to_binary(65) == '1000001'\nassert     decimal_to_binary(145) == '10001010000'\n\ndef decimal_to_binary_optimized(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    Hint: Use a list or an array\n    '''\n    # Your code here\n\n    if n == 0:\n        return '0'\n    res = ''\n    if n == 1:\n        return '1'\n    if n % 2 == 0:\n        res += '0'\n        n //= 2\n    else:\n        res += '1'\n        n -= 1\n    res += decimal_to_binary_optimized(n)\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    num = 3\n    print(decimal_to_binary(num))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(16))\n    print(decimal_to_binary(34))\n    print(decimal_to_binary(37))"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert decimal_to_binary(10) == \"1010\"\nassert decimal_to_binary(12) == \"1100\"\nassert decimal_to_binary(7) == \"111\"\nassert decimal_to_binary(16) == \"1110\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0)     == \"0\"\nassert     decimal_to_binary(1)     == \"1\"\nassert     decimal_to_binary(2)     == \"10\"\nassert     decimal_to_binary(3)     == \"11\"\nassert     decimal_to_binary(4)     == \"100\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    decimal_to_binary(0) == '0'\n    decimal_to_binary(1) == '1'\n    decimal_to_binary(2) == '10'\n    decimal_to_binary(3) == '11'\n    decimal_to_binary(4) == '100'\n    decimal_to_binary(5) == '101'\n    decimal_to_binary(6) == '110'\n    decimal_to_binary(7) == '111'\n    decimal_to_binary(8) == '1000'\n    decimal_to_binary(9) == '1001'\n    decimal_to_binary(10) == '1010'\n    decimal_to_binary(11) == '1011'\n    decimal_to_binary(12) == '1100'\n    decimal_to_binary(13) == '1101'\n    decimal_to_binary(14) == '1110'\n    decimal_to_binary(15) == '1111'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert next_smallest_palindrome(1) == 2\nassert next_smallest_palindrome(12) == 13\nassert next_smallest_palindrome(91) == 88\nassert next_smallest_palindrome(21) == 22\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(12) == 6\nassert     next_smallest_palindrome(13) == 13\nassert     next_smallest_palindrome(23) == 21\nassert     next_smallest_palindrome(243) == 221\nassert     next_smallest_palindrome(343) == 321\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert next_smallest_palindrome(0) == 0\nassert next_smallest_palindrome(1) == 1\nassert next_smallest_palindrome(2) == 3\nassert next_smallest_palindrome(3) == 9\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert next_smallest_palindrome(100) == 121\nassert next_smallest_palindrome(1234) == 1324\nassert next_smallest_palindrome(9999999) == 99777777\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef next_greatest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(10) == True\nassert     next_smallest_palindrome(3) == True\nassert     next_smallest_palindrome(12) == True\nassert     next_smallest_palindrome(1) == True\nassert     next_smallest_palindrome(2) == False\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef next_palindrome(num):\n    '''\n    Write a function that takes an integer n as input and returns the smallest palindrome greater than n.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(121) == 22\nassert     next_smallest_palindrome(12) == 21\nassert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(11) == 11\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n\ndef test_next_smallest_palindrome():\n    # check for base case\n    assert next_smallest_palindrome(2) == 3\n    assert next_smallest_palindrome(5) == 7\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    kth_element([1, 2, 3, 4, 5], 2) == 3\n    kth_element([1, 2, 3, 4, 5], 0) == 1\n    kth_element([1, 2, 3, 4, 5], 6) == -1"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     kth_element([5, 6, 7, 8, 9, 10], 3) == 6\nassert     kth_element([5, 6, 7, 8, 9, 10], 1) == 5\nassert     kth_element([5, 6, 7, 8, 9, 10], 2) == 6\nassert     kth_element([5, 6, 7, 8, 9, 10], 6) == 8\nassert     kth_element([5, 6, 7, 8, 9, 10], 9) == 9\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     kth_element([1, 2, 3], 3) == 3\nassert     kth_element([1, 2, 3], 1) == 1\nassert     kth_element([1, 2, 3], 2) == 2\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     kth_element([1, 2, 3], 1) == 2\nassert     kth_element([1, 2, 3], 2) == 3\nassert     kth_element([1, 2, 3], 3) == 1\nassert     kth_element([1, 2, 3], 4) == None\nassert     kth_element([1, 2, 3, 4, 5], 1) == 2\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     kth_element([1,3,5], 1) == 1\nassert kth_element([1,3,5], 2) == 3\nassert kth_element([1,3,5], 3) == 5\nassert kth_element([1,3,5], 4) == None\nassert kth_element([1,3,5], 5) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nkth_element([1,2,3,4,5], 3) == 4\nkth_element([1,2,3,4,5], 7) == 5\nkth_element([1,2,3,4,5], 1) == 1\nkth_element([1,2,3,4,5], 5) == 5\nkth_element([1,2,3,4,5], 0) == 1"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([1,2,3], 1)    == 1\nassert     kth_element([1,2,3], 2)    == 2\nassert     kth_element([1,2,3], 3)    == 3\nassert     kth_element([1,2,3], 4)    == -1\nassert     kth_element([], 1)    == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('sna_b_c_d_e')    ==    'sna_b_c_d_e'\nassert     snake_to_camel('sna-b-c-d-e')    ==    'sna-b-c-d-e'\nassert     snake_to_camel('sna-b-c-d-e')    ==    'sna_b_c_d_e'\nassert     snake_to_camel('sna_b_c_d-e')    ==    'sna_b_c_d_e'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert snake_to_camel('spam_and_eggs') =='spamAndEggs'\nassert snake_to_camel('spamAndEggs') =='spamAndEggs'\nassert snake_to_camel('spam_and_eggs_and_ham') =='spamAndEggsAndHam'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake') =='snake'\nassert     snake_to_camel('snake_case') =='snake_case'\nassert     snake_to_camel('snake_a') =='snakea'\nassert     snake_to_camel('snake_an') =='snake_a'\nassert     snake_to_camel('snake_abb') =='snakeabb'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert snake_to_camel(\"snake_Case\") == \"snakeCase\"\nassert snake_to_camel(\"Snake Case\") == \"snakeCase\"\nassert snake_to_camel(\"snake_case\") == \"snake_case\""
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel('snake') == 'Snake'\nassert     snake_to_camel('fooBar') == 'FooBar'\nassert     snake_to_camel('FooBar') == 'FooBar'\nassert     snake_to_camel('apple') == 'Apple'\nassert     snake_to_camel('apple') == 'Apple'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case_string') =='snakeCamelString'\nassert     snake_to_camel('snake_case_string_') =='snakeCamelString'\nassert     snake_to_camel('snake_case_string_with_hyphen') =='snakeCamelStringWithHyphen'\nassert     snake_to_camel('snake_case_string_with_underscore') =='snakeCamelStringWithUnderscore'\nassert     snake_to_camel('snake_case_string_with_hyphen_and_underscore') =='snakeCamelStringWithHyphenAndUnderscore'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snakecase') =='snakecase', \"Should return snakecase\"\nassert     snake_to_camel('snakeCase') =='snakecase', \"Should return snakecase\"\nassert     snake_to_camel('snake_case') =='snake_case', \"Should return snake_case\"\nassert     snake_to_camel('snake_case_') =='snake_case_', \"Should return snake_case_\"\nassert     snake_to_camel('_') == '', \"Should return empty\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_camel') =='snakeCamel', \"snake_to_camel is not correct\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case_string') =='snakeCaseString', 'Wrong'\nassert     snake_to_camel('snake_camel_case_string') =='snakeCamelCaseString', 'Wrong'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \n\ndef eulerian_paths(n, m): \n    '''\n    Write a function to find the Eulerian paths in a graph.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 2\nassert     eulerian_num(5, 5) == 13\nassert     eulerian_num(10, 10) == 26\nassert     eulerian_num(15, 15) == 37\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eulerian_num(2, 4) == 1 \nassert     eulerian_num(3, 3) == 1 \nassert     eulerian_num(5, 8) == 3 \nassert     eulerian_num(7, 12) == 3 \nassert     eulerian_num(11, 17) == 4 \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eulerian_num(3, 2) == 2, \"Error!\"\nassert     eulerian_num(4, 2) == 2, \"Error!\"\nassert     eulerian_num(2, 4) == 3, \"Error!\"\nassert     eulerian_num(5, 2) == 5, \"Error!\"\nassert     eulerian_num(10, 2) == 5, \"Error!\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(eulerian_num(4, 3))\nprint(eulerian_num(2, 3))\nprint(eulerian_num(1, 1))\nprint(eulerian_num(1, 2))\nprint(eulerian_num(2, 2))\nprint(eulerian_num(3, 2))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(0, 1) == 1\nassert eulerian_num(1, 1) == 1\nassert eulerian_num(2, 1) == 1\nassert eulerian_num(2, 2) == 2\nassert eulerian_num(3, 1) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eulerian_num(2, 4) == 2\nassert     eulerian_num(3, 4) == 3\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['a','b','c'],['d','e','f'],['g','h']]) == [['a','b','c'],['d','e','f'],['g','h']]\nassert     sort_sublists([['a','b','c','d'],['e','f','g'],['h']]) == [['a','b','c','d'],['e','f','g'],['h']]\nassert     sort_sublists([['a','b','c'],['d','e','f'],['g'],['h']]) == [['a','b','c'],['d','e','f'],['g'],['h']]\n\ndef remove_duplicates(input_list):\n    '''\n    Write a function to remove duplicate values from an unsorted list.\n    '''\n    return set(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([[1,3,4],[2,3,4]]) == [[1,2,3],[3,4,4]]\nassert     sort_sublists([[1,3,4,2],[2,3,4,1]]) == [[1,2,3,4],[4,3,2,1]]\nassert     sort_sublists([[1,3,4,2],[2,3,4,1]]) == [[1,2,3,4],[4,3,2,1]]\nassert     sort_sublists([[1,3,4,2],[2,3,4,1]]) == [[1,2,3,4],[4,3,2,1]]\nassert     sort_sublists([[1,3,4,2],[2,3,4,1]]) == [[1,2,3,4],[4,3,2,1]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists([[3, 5, 8], [3, 6], [1, 2], [5, 8], [5, 6, 7, 8]]) == [[1, 2], [3, 3, 5, 5, 6, 6, 7, 7, 8, 8], [3, 5, 5, 6], [5, 8], [3, 6, 6, 7, 7, 8]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\n    Write a function to find the most frequent k-mers in a given string.\n    For example, for the string DNA, the k-mer with the highest count is \"GAT\" with a count of 2.\n'''\n\ndef k_mer_most_common(input_string, k):\n    '''\n    Write a function to find the most frequent k-mers in a given string.\n    For example, for the string DNA, the k-mer with the highest count is \"GAT\" with a count of 2.\n    '''\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists( [['a', 'b', 'c', 'd'],\n                        ['e', 'f'],\n                        ['g', 'h']] ) == [['a', 'b', 'c', 'd'],\n                            ['e', 'f'],\n                            ['g', 'h']]\nassert     sort_sublists( [['f', 'a', 'b', 'c', 'd', 'e'],\n                        ['g', 'h']] ) == [['a', 'b', 'c', 'd', 'e'],\n                            ['f', 'g', 'h']]\nassert     sort_sublists( [['e', 'a', 'b', 'c', 'd'],\n                        ['f'],\n                        ['g', 'h']] ) == [['a', 'b', 'c', 'd'],\n                            ['e', 'f'],\n                            ['g', 'h']]\nassert     sort_sublists( [['e', 'a', 'b', 'c', 'd'],\n                        ['f'],\n                        ['g', 'h']] ) == [['a', 'b', 'c', 'd'],\n                            ['e', 'f'],\n                            ['g', 'h']]\nassert     sort_sublists( [['g', 'e', 'a', 'b', 'c', 'd'],\n                        ['f'],\n                        ['g', 'h']] ) == [['a', 'b', 'c', 'd'],\n                            ['e', 'f'],\n                            ['g', 'g', 'h']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([['a','c'],['b','d']]) == [['a','c'],['b','d']]\nassert     sort_sublists([['a','c'],['b','d'],['a','b']]) == [['a','c'],['a','b'],['b','d']]\n\n\ndef sort_sublists2(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([['cat', 'bat', 'rat'], ['cat', 'rat', 'bat'], ['dog', 'cat', 'bat'], ['dog', 'cat', 'bat']]) == [['cat', 'bat', 'rat'], ['cat', 'bat', 'rat'], ['dog', 'cat', 'bat'], ['dog', 'cat', 'bat']]\nassert sort_sublists([['cat', 'bat', 'rat'], ['cat', 'bat', 'rat'], ['dog', 'cat', 'bat'], ['dog', 'cat', 'bat']]) == [['cat', 'bat', 'rat'], ['cat', 'bat', 'rat'], ['dog', 'cat', 'bat'], ['dog', 'cat', 'bat']]"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([[1, 2], 'a', 'b']) == [[1, 2], 'a', 'b']\nassert     sort_sublists([[1, 2], 2, 'a']) == [[1, 2], 2, 'a']\nassert     sort_sublists([[1, 2], 2, 'a', 'b']) == [[1, 2], 2, 'a', 'b']\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([\"cat\", \"dog\", \"monkey\"]) == [\"cat\", \"dog\", \"monkey\"]\nassert     sort_sublists([\"dog\", \"cat\", \"monkey\"]) == [\"cat\", \"dog\", \"monkey\"]\nassert     sort_sublists([\"monkey\", \"cat\", \"dog\"]) == [\"cat\", \"dog\", \"monkey\"]\nassert     sort_sublists([\"monkey\", \"dog\", \"cat\"]) == [\"cat\", \"dog\", \"monkey\"]\nassert     sort_sublists([\"cat\", \"dog\", \"monkey\", \"dog\", \"cat\"]) == [\"cat\", \"dog\", \"cat\"]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([\"cba\",\"abd\",\"aaa\",\"cde\",\"fghi\"]) == [\"aaa\",\"abd\",\"cba\",\"cde\",\"fghi\"], \"Not working\"\n\nassert sort_sublists([\"cba\",\"abd\",\"aaa\",\"cde\",\"fghi\",\"jkl\",\"mno\",\"pqr\"]) == [\"aaa\",\"abd\",\"cba\",\"cde\",\"fghi\",\"jkl\",\"mno\",\"pqr\"], \"Not working\"\nassert sort_sublists([\"cba\",\"abd\",\"aaa\",\"cde\",\"fghi\",\"jkl\",\"mno\",\"pqr\",\"aaa\"]) == [\"aaa\",\"abd\",\"cba\",\"cde\",\"fghi\",\"jkl\",\"mno\",\"pqr\",\"aaa\"], \"Not working\"\nassert sort_sublists([\"cba\",\"abd\",\"aaa\",\"cde\",\"fghi\",\"jkl\",\"mno\",\"pqr\",\"abc\"]) == [\"aaa\",\"abd\",\"cba\",\"cde\",\"fghi\",\"jkl\",\"mno\",\"pqr\",\"abc\"], \"Not working\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count([True, False, True, False]) == 2, 'incorrect'\nassert     count([True, True, True, True]) == 0, 'incorrect'\nassert     count([]) == 0, 'incorrect'"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True, True, False]) == 2\nassert count([True, False, True]) == 2\nassert count([False, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([True, True, False, True, False]) == 4\nassert     count([False, False, True, True, True]) == 5\nassert     count([False, True, False, False, True]) == 5\nassert     count([False, False, True, True, True]) == 1\nassert     count([True, False, True, True, True]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([True, False, True, False, True, True]) == 3, \\\n    print (\"All tests passed\")\nassert     count([True, False, True, False, True, True, True]) == 6, \\\n    print (\"All tests passed\")\nassert     count([True, False, True, False, True, True, True, False]) == 5, \\\n    print (\"All tests passed\")\nassert     count([True, False, True, False, True, True, True, False, False]) == 6, \\\n    print (\"All tests passed\")\nassert     count([True, False, True, False, True, True, True, False, False, True]) == 3, \\\n    print (\"All tests passed\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount([True,False,True,False]) == 2\ncount([True,True,True,False]) == 3\ncount([True,True,True,True]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount([0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1]) == 6\nassert \ncount([0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1]) == 10\nassert \ncount([0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1]) == 6\nassert \ncount([0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0]) == 6\nassert count([0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0]) == 5\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([]) == 0, \"Expected None\"\nassert     count([True, False, True, False]) == 2, \"Expected 2\"\nassert     count([True, False, True, False, False]) == 4, \"Expected 4\"\nassert     count([]) == 0, \"Expected None\"\nassert     count([1, 2, 3, 4, 5]) == 5, \"Expected 5\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not count([True, False, True, True, False, True, False, True])\nprint(\"Correct: True\")\n\n\n\ndef check_input():\n    '''\n    Write a function to check if the user input is valid or not.\n    Valid inputs are 1, 2, 3, 4, 5, 6, 7, 8, 9, and 0.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count([True,True,False,True,True]) == 1, \"Sample Test Failed\"\nassert count([False,False,True,False,False]) == 1, \"Sample Test Failed\"\nassert count([]) == 0, \"Sample Test Failed\"\nassert count(None) == 0, \"Sample Test Failed\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count([True, True, True, True]) == 4, print('\\nERROR: count([True, True, True, True])) == 4!= 4')\nassert     count([False, True, True, False]) == 3, print('\\nERROR: count([False, True, True, False])) == 3!= 3')\nassert     count([False, True, False, False]) == 1, print('\\nERROR: count([False, True, False, False])) == 1!= 1')\n\nprint('\\nTest passed!'"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef add_dicts(test_dict, test_dict2):\n    '''\n    Write a function to add the given dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([1,2], (1,2)) == ([1,2], (1,2)), 'Wrong result'\nassert add_lists([1,2], (1,3)) == ([1,2,3], (1,2,3)), 'Wrong result'\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([1,2], (3,4)) == ([1,2],(3,4))\nassert     add_lists([3,4], (5,6)) == ([3,4,5,6],())\nassert     add_lists([4,5,6], (7,8)) == ([4,5,6,7,8],())\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists(test_list, test_tup) == [(0,1,2), (3,4,5)], \"The return value is not correct.\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists([1,2,3], (4,5)) == [(1,2,3), (4,5)]\nassert     add_lists([1,2,3], (4,)) == [(1,2,3), (4,1)]\nassert     add_lists([1,2,3], ()) == [(1,2,3), (1,2,3), (1,2,3), (1,2,3)]"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_lists([1,2,3,4],('a','b','c','d')) == [1,2,3,4,('a','b','c','d')], \"Fails add_lists\"\nprint(\"\\nThe code is working correctly!\")\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([1,2,3,4],(5,6)) == [(1,2,3,4,5,6)]\nassert     add_lists([1,2,3,4,5],(5,6)) == [(1,2,3,4,5,5)]\nassert     add_lists([1,2,3,4,5],(5,5)) == [(1,2,3,4,5,5),(5,5,5,5,5,5)]\n\n'''\nThe problem can be solved using an in-place algorithm. \nConsider the following example:\n\nThe given list to be added to the list is [1,2,3,4,5] and the\ngiven tuple to be added is (6,7,8,9,10).\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_lists([1,2,3,4,5,6,7,8,9], (1,2,3,4,5,6,7,8,9)) == ([1,2,3,4,5,6,7,8,9], (1,2,3,4,5,6,7,8,9))\nassert     add_lists([1,2,3,4,5,6,7,8,9], (1,2,3)) == ([1,2,3,4,5,6,7,8,9], (1,2,3,4))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (add_lists([0, 0, 0, 0], (1,1,1,1)) == ([0, 1, 1, 1], (0, 0, 0, 1)))\nassert     (add_lists([1, 1], (1, 1)) == ([1, 2], (1, 1)))\nassert     (add_lists([1, 2, 3], (1, 1)) == ([1, 2, 3], (1, 1)))\nassert     (add_lists([1, 2, 3], (1, 1, 1)) == ([1, 2, 3], (1, 1, 1)))\nassert     (add_lists([0], (1,)) == ([1], (0,)))\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_sorted_list([1,5,7,9,20,40], [2,4,6,9,10], [30,40,50,60]) == [1,2,3,4,5,6,7,9,10,20,30,40,50,60]\nassert     merge_sorted_list([], [], []) == []\nassert     merge_sorted_list([1,3], [2,4,6], []) == [1,2,3,4,6]\n\ndef heap_sort_using_heapq(num_list):\n    '''\n    Write a function to heapify a list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef quick_sort(arr,low,high):\n    if low >= high:\n        return\n    pivot = partition(arr,low,high)\n    quick_sort(arr,low,pivot - 1)\n    quick_sort(arr,pivot + 1,high)\n\ndef partition(arr,low,high):\n    pivot_value = arr[low]\n    while low < high:\n        while low < high and arr[high] >= pivot_value:\n            high -= 1\n        arr[low] = arr[high]\n        while low < high and arr[low] <= pivot_value:\n            low += 1\n        arr[high] = arr[low]\n    arr[low] = pivot_value\n    return low\n\ndef partition2(arr,low,high):\n    pivot = arr[low]\n    while low < high:\n        while low < high and arr[high] >= pivot:\n            high -= 1\n        arr[low] = arr[high]\n        while low < high and arr[low] <= pivot:\n            low += 1\n        arr[high] = arr[low]\n    arr[low] = pivot\n    return low\n\ndef quicksort(arr,low,high):\n    if low >= high:\n        return\n    pivot = partition(arr,low,high)\n    quicksort(arr,low,pivot - 1)\n    quicksort(arr,pivot + 1,high)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef merge_sorted_list_iterative(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    The algorithm should be iterative and use one list to store the nums.\n    The merge should be done using the iterator.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef my_test():\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    \n    # NOTE: this is the input linked list.\n    #\n    # the input linked list is an array of strings.\n    # the elements of the linked list are separated by a single space character.\n    # The first element of the linked list is the head node.\n    # Each element of the linked list is either an integer (int) or a character (str).\n    # Each node has an \"next\" pointer indicating the next node in the linked list.\n    # The head node is the first node in the linked list.\n    #\n    # Input Format:\n    # The first line contains a single integer T, the number of test cases.\n    # Each test case is of the following format:\n    # The first line contains two integers N and M, denoting the number of nodes in the linked list and the number of nodes in the list respectively.\n    # The next N lines contains N space-separated integers denoting the elements of the linked list.\n    # The next line contains a single integer N, denoting the number of nodes in the linked list.\n    # The last line contains a single integer N, denoting the number of nodes in the list.\n    #\n    # Output Format:\n    # The output of each test case should be a space-separated integer denoting the elements of the linked list.\n    # The elements should be separated by the space character.\n    #\n    # Your Task:\n    # Complete the function merge_sorted_list() which takes three arguments: the head node of the first linked list, the head node of the second linked list, and the head node of the third linked list. You need to merge the three linked list into a single linked list such that all the elements of the linked list should be in ascending order.\n    #\n    # Constraints:\n    # 1 <= T <= 100\n    # 1 <= N <= 105\n    # 1 <= M <= 105\n    # 1 <= N <= 105\n    # 1 <= M <= 105\n    #\n    # Example:\n    # Input:\n    # 2\n    # 5 4\n    # 3 6\n    # 4 5\n    # 2 5\n    # 5 6\n    # 3 4\n    # 2 3\n    # 1\n    # 1 2 3 4\n    # 5 6\n    # 1 2\n    #\n    # Output:\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    #\n    # Explanation:\n    # Test Case 1: The first and second linked list are both sorted.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 2: The first and second linked list are both sorted.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 3: The first linked list is empty.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 4: The first linked list is empty.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Your Task:\n    # You don't need to read input or print anything. Your task is to complete the function merge_sorted_list() which takes three arguments: the head node of the first linked list, the head node of the second linked list, and the head node of the third linked list. You need to merge the three linked list into a single linked list such that all the elements of the linked list should be in ascending order.\n    #\n    # Expected Time Complexity: O(N + M + N)\n    # Expected Auxiliary Space: O(1)\n    #\n    # Constraints:\n    # 1 <= T <= 100\n    # 1 <= N <= 105\n    # 1 <= M <= 105\n    # 1 <= N <= 105\n    # 1 <= M <= 105\n    #\n    # Example:\n    # Input:\n    # 2\n    # 5 4\n    # 3 6\n    # 4 5\n    # 2 5\n    # 5 6\n    # 3 4\n    # 2 3\n    # 1\n    # 1 2 3 4\n    # 5 6\n    # 1 2\n    #\n    # Output:\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    #\n    # Explanation:\n    # Test Case 1: The first and second linked list are both sorted.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 2: The first and second linked list are both sorted.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 3: The first linked list is empty.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 4: The first linked list is empty.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Your Task:\n    # Complete the function merge_sorted_list() which takes three arguments: the head node of the first linked list, the head node of the second linked list, and the head node of the third linked list. You need to merge the three linked list into a single linked list such that all the elements of the linked list should be in ascending order.\n    #\n    # Constraints:\n    # 1 <= T <= 100\n    # 1 <= N <= 105\n    # 1 <= M <= 105\n    # 1 <= N <= 105\n    # 1 <= M <= 105\n    #\n    # Example:\n    # Input:\n    # 2\n    # 5 4\n    # 3 6\n    # 4 5\n    # 2 5\n    # 5 6\n    # 3 4\n    # 2 3\n    # 1\n    # 1 2 3 4\n    # 5 6\n    # 1 2\n    #\n    # Output:\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    # 1 2 3 4 5 6\n    #\n    # Explanation:\n    # Test Case 1: The first and second linked list are both sorted.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 2: The first and second linked list are both sorted.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 3: The first linked list is empty.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Test Case 4: The first linked list is empty.\n    # The merged linked list would be 1 2 3 4 5 6.\n    # The third linked list is empty.\n    #\n    # Your Task:\n    # You don't need to read input or print anything. Your task is to complete the function merge_sorted_list() which takes three arguments: the head node of the first linked list, the head node of the second linked list, and the head node of the third linked list. You need to merge the three linked list into a single linked list such that all the elements of the linked list should be in ascending order.\n    #\n    # Expected Time Complexity: O(N + M + N)\n    # Expected Auxiliary Space: O(1)\n    #\n    # Constraints:\n    # 1 <= T <= 100\n    # 1 <= N <= 105\n    # 1 <= M <= 105\n    # 1 <= N <= 105\n    # 1 <= M <= 105\n    #\n    # Example:\n    # Input:\n    # 2\n    # 5 4\n    # 3 6\n    # 4 5\n    # 2 5\n    # 5 6\n    # 3 4\n    # 2 3\n    # 1\n    # 1 2 "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_sorted_list([1,2,3],\n                            [3,4,5,6,7,8],\n                            [1,2,3]) == [1,2,3,3,4,5,6,7,8]\nassert     merge_sorted_list([1,2,3],\n                            [2,3],\n                            [1]) == [1,1,2,2,3,3]\nassert     merge_sorted_list([1,2,3],\n                            [],\n                            [1]) == [1,1,2,2,3,3]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1, 3, 5], [2, 4, 6], [9, 8, 7]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     merge_sorted_list([1], [2], [3, 4]) == [1, 2, 3, 4]\nassert     merge_sorted_list([1, 2, 3], [], [4, 5]) == [1, 2, 3, 4, 5]\nassert     merge_sorted_list([1], [2, 3], [4]) == [1, 2, 3, 4]\nassert     merge_sorted_list([1, 2, 3, 4, 5], [], [6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,3,5], [2,4], [6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     merge_sorted_list([1,3,5], [2], [6,7,8]) == [1,2,3,5,6,7,8]\nassert     merge_sorted_list([1,3,5], [2,4], []) == [1,2,3,4,5]\nassert     merge_sorted_list([1,3,5], [2,4], [6,7,8]) == []\n\ndef find_max_average_sublist_len(list_numbers):\n    '''\n    Write a function that finds the maximum average length of a sublist in a sorted and distinct list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nclass LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef merge_sorted_list(l1, l2, l3):\n    '''\n    Write a function to merge three sorted linked lists into one sorted linked list.\n    Your merge algorithm should use the following merge strategy:\n    - Start with the first node from each linked list.\n    - Traverse these nodes and compare them.\n    - If the data from the first node is less than the data from the second node,\n      merge the nodes into a new node with the data from the first node and link the new node to the next node of the first node.\n      Otherwise, link the new node to the next node of the second node.\n      Repeat this process until you have merged all of the nodes of the linked list.\n      Once all the nodes of the linked list are merged, return the head of the new linked list.\n    - If you encounter a node from either of the linked list that has been traversed completely,\n      then return None.\n    - You can assume that each of the linked lists will contain a valid node with a valid.data attribute.\n    -  You may assume that the input linked lists will always have at least one node.\n    - Each of the linked lists will contain at least one node.\n    '''\n\n    # Your code here\n    pass\n\n\nl1 = LinkedListNode(1)\nl1.next = LinkedListNode(3)\nl1.next.next = LinkedListNode(4)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_Equivalent(\"110101\",\"8\") == 3\nassert odd_Equivalent(\"110101\",\"9\") == 0\nassert odd_Equivalent(\"110101\",\"7\") == 2\nassert odd_Equivalent(\"111101\",\"7\") == 5\nassert odd_Equivalent(\"111101\",\"8\") == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_Equivalent(\"01101010\",1) == 2\nassert     odd_Equivalent(\"01101010\",2) == 8\nassert     odd_Equivalent(\"01101010\",3) == 15\nassert     odd_Equivalent(\"01101010\",4) == 20\nassert     odd_Equivalent(\"01101010\",5) == 28\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent(\"1000101\", 1) == 8\nassert \nodd_Equivalent(\"1000101\", -2) == 4\nassert \nodd_Equivalent(\"10101010\", 1) == 10\nassert \nodd_Equivalent(\"10101010\", -2) == 6\nassert \nodd_Equivalent(\"10001010\", 2) == 4\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_Equivalent('010111',2) == 3\nassert     odd_Equivalent('010111',1) == 3\nassert     odd_Equivalent('010111',3) == 3\nassert     odd_Equivalent('010111',4) == 1\nassert     odd_Equivalent('010111',5) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_Equivalent(\"10101010\", 1) == \"10101010\"\nodd_Equivalent(\"10101010\", 2) == \"10110011\"\nodd_Equivalent(\"10101010\", 3) == \"10010010\"\nodd_Equivalent(\"10101010\", 4) == \"01100100\"\nodd_Equivalent(\"10101010\", 5) == \"00101010\"\nodd_Equivalent(\"10101010\", 6) == \"00010110\"\nodd_Equivalent(\"10101010\", 7) == \"00000101\"\nodd_Equivalent(\"10101010\", 8) == \"000000101\"\nodd_Equivalent(\"10101010\", 9) == \"000000100\"\nodd_Equivalent(\"10101010\", 10) == \"0000000010\"\nodd_Equivalent(\"10101010\", 11) == \"0000000000\"\nodd_Equivalent(\"10101010\", 12) == \"00000000000\"\nodd_Equivalent(\"10101010\", 13) == \"000000000000\"\nodd_Equivalent(\"10101010\", 14) == \"0000000000000\"\nodd_Equivalent(\"10101010\", 15) == \"00000000000000\"\nodd_Equivalent(\"10101010\", 16) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 17) == \"00000000000000000\"\nodd_Equivalent(\"10101010\", 18) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 19) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 20) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 21) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 22) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 23) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 24) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 25) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 26) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 27) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 28) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 29) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 30) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 31) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 32) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 33) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 34) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 35) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 36) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 37) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 38) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 39) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 40) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 41) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 42) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 43) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 44) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 45) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 46) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 47) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 48) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 49) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 50) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 51) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 52) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 53) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 54) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 55) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 56) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 57) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 58) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 59) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 60) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 61) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 62) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 63) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 64) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 65) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 66) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 67) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 68) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 69) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 70) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 71) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 72) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 73) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 74) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 75) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 76) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 77) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 78) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 79) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 80) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 81) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 82) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 83) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 84) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 85) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 86) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 87) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 88) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 89) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 90) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 91) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 92) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 93) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 94) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 95) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 96) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 97) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 98) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 99) == \"000000000000000\"\nodd_Equivalent(\"10101010\", 100) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 0) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 1) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 2) == \"0000000000000000\"\nodd_Equivalent(\"10101011\", 3) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 4) == \"0000000000000000\"\nodd_Equivalent(\"10101011\", 5) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 6) == \"0000000000000000\"\nodd_Equivalent(\"10101011\", 7) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 8) == \"0000000000000000\"\nodd_Equivalent(\"10101011\", 9) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 10) == \"0000000000000000\"\nodd_Equivalent(\"10101011\", 11) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 12) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 13) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 14) == \"000000000000000\"\nodd_Equivalent(\"10101011\", 15) == \"000000000000000\"\nodd_Equivalent(\"1010101"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_Equivalent('10101', 3) == 4\nassert     odd_Equivalent('10101', 5) == 5\nassert     odd_Equivalent('10101', 7) == 8\nassert     odd_Equivalent('10101', 10) == 12\nassert     odd_Equivalent('10101', 15) == 24\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(odd_Equivalent('1011',1))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_Equivalent(\"10100\", 4) == 4\nodd_Equivalent(\"10101\", 4) == 3\nodd_Equivalent(\"10100\", 5) == 5\nodd_Equivalent(\"10101\", 5) == 4\nodd_Equivalent(\"1111111111\", 5) == 5\nodd_Equivalent(\"1111111111\", 6) == 6\nodd_Equivalent(\"1111111111\", 7) == 7\nodd_Equivalent(\"1111111111\", 8) == 8\nodd_Equivalent(\"1111111111\", 9) == 9\nodd_Equivalent(\"1111111111\", 10) == 10\nodd_Equivalent(\"1111111111\", 11) == 11\nodd_Equivalent(\"1111111111\", 12) == 12\nodd_Equivalent(\"1111111111\", 13) == 13\nodd_Equivalent(\"1111111111\", 14) == 13\nodd_Equivalent(\"1111111111\", 15) == 14\nodd_Equivalent(\"1111111111\", 16) == 15\nodd_Equivalent(\"1111111111\", 17) == 16\nodd_Equivalent(\"1111111111\", 18) == 17\nodd_Equivalent(\"1111111111\", 19) == 18\nodd_Equivalent(\"1111111111\", 20) == 19\nodd_Equivalent(\"1111111111\", 21) == 20\nodd_Equivalent(\"1111111111\", 22) == 21\nodd_Equivalent(\"1111111111\", 23) == 22\nodd_Equivalent(\"1111111111\", 24) == 23\nodd_Equivalent(\"1111111111\", 25) == 24\nodd_Equivalent(\"1111111111\", 26) == 25\nodd_Equivalent(\"1111111111\", 27) == 26\nodd_Equivalent(\"1111111111\", 28) == 27\nodd_Equivalent(\"1111111111\", 29) == 28\nodd_Equivalent(\"1111111111\", 30) == 29\nodd_Equivalent(\"1111111111\", 31) == 30\nodd_Equivalent(\"1111111111\", 32) == 31\nodd_Equivalent(\"1111111111\", 33) == 32\nodd_Equivalent(\"1111111111\", 34) == 33\nodd_Equivalent(\"1111111111\", 35) == 34\nodd_Equivalent(\"1111111111\", 36) == 35\nodd_Equivalent(\"1111111111\", 37) == 36\nodd_Equivalent(\"1111111111\", 38) == 37\nodd_Equivalent(\"1111111111\", 39) == 38\nodd_Equivalent(\"1111111111\", 40) == 39\nodd_Equivalent(\"1111111111\", 41) == 40\nodd_Equivalent(\"1111111111\", 42) == 41\nodd_Equivalent(\"1111111111\", 43) == 42\nodd_Equivalent(\"1111111111\", 44) == 43\nodd_Equivalent(\"1111111111\", 45) == 44\nodd_Equivalent(\"1111111111\", 46) == 45\nodd_Equivalent(\"1111111111\", 47) == 46\nodd_Equivalent(\"1111111111\", 48) == 47\nodd_Equivalent(\"1111111111\", 49) == 48\nodd_Equivalent(\"1111111111\", 50) == 49\nodd_Equivalent(\"1111111111\", 51) == 50\nodd_Equivalent(\"1111111111\", 52) == 51\nodd_Equivalent(\"1111111111\", 53) == 52\nodd_Equivalent(\"1111111111\", 54) == 53\nodd_Equivalent(\"1111111111\", 55) == 54\nodd_Equivalent(\"1111111111\", 56) == 55\nodd_Equivalent(\"1111111111\", 57) == 56\nodd_Equivalent(\"1111111111\", 58) == 57\nodd_Equivalent(\"1111111111\", 59) == 58\nodd_Equivalent(\"1111111111\", 60) == 59\nodd_Equivalent(\"1111111111\", 61) == 60\nodd_Equivalent(\"1111111111\", 62) == 61\nodd_Equivalent(\"1111111111\", 63) == 62\nodd_Equivalent(\"1111111111\", 64) == 63\nodd_Equivalent(\"1111111111\", 65) == 64\nodd_Equivalent(\"1111111111\", 66) == 65\nodd_Equivalent(\"1111111111\", 67) == 66\nodd_Equivalent(\"1111111111\", 68) == 67\nodd_Equivalent(\"1111111111\", 69) == 68\nodd_Equivalent(\"1111111111\", 70) == 69\nodd_Equivalent(\"1111111111\", 71) == 70\nodd_Equivalent(\"1111111111\", 72) == 71\nodd_Equivalent(\"1111111111\", 73) == 72\nodd_Equivalent(\"1111111111\", 74) == 73\nodd_Equivalent(\"1111111111\", 75) == 74\nodd_Equivalent(\"1111111111\", 76) == 75\nodd_Equivalent(\"1111111111\", 77) == 76\nodd_Equivalent(\"1111111111\", 78) == 77\nodd_Equivalent(\"1111111111\", 79) == 78\nodd_Equivalent(\"1111111111\", 80) == 79\nodd_Equivalent(\"1111111111\", 81) == 80\nodd_Equivalent(\"1111111111\", 82) == 81\nodd_Equivalent(\"1111111111\", 83) == 82\nodd_Equivalent(\"1111111111\", 84) == 83\nodd_Equivalent(\"1111111111\", 85) == 84\nodd_Equivalent(\"1111111111\", 86) == 85\nodd_Equivalent(\"1111111111\", 87) == 86\nodd_Equivalent(\"1111111111\", 88) == 87\nodd_Equivalent(\"1111111111\", 89) == 88\nodd_Equivalent(\"1111111111\", 90) == 89\nodd_Equivalent(\"1111111111\", 91) == 90\nodd_Equivalent(\"1111111111\", 92) == 91\nodd_Equivalent(\"1111111111\", 93) == 92\nodd_Equivalent(\"1111111111\", 94) == 93\nodd_Equivalent(\"1111111111\", 95) == 94\nodd_Equivalent(\"1111111111\", 96) == 95\nodd_Equivalent(\"1111111111\", 97) == 96\nodd_Equivalent(\"1111111111\", 98) == 97\nodd_Equivalent(\"1111111111\", 99) == 98\nodd_Equivalent(\"1111111111\", 100) == 99\nodd_Equivalent(\"1111111111\", 101) == 100\nodd_Equivalent(\"1111111111\", 102) == 101\nodd_Equivalent(\"1111111111\", 103) == 102\nodd_Equivalent(\"1111111111\", 104) == 103\nodd_Equivalent(\"1111111111\", 105) == 104\nodd_Equivalent(\"1111111111\", 106) == 105\nodd_Equivalent(\"1111111111\", 107) == 106\nodd_Equivalent(\"1111111111\", 108) == 107\nodd_Equivalent(\"1111111111\", 109) == 108\nodd_Equivalent(\"1111111111\", 110) == 109\nodd_Equivalent(\"1111111111\", 111) == 110\nodd_Equivalent(\"1111111111\", 112) == 111\nodd_Equivalent(\"1111111111\", 113) == 112\nodd_Equivalent(\"1111111111\", 114) == 113\nodd_Equivalent(\"1111111111\", 115) == 114\nodd_Equivalent(\"1111111111\", 116) == 115\nodd_Equivalent(\"1111111111\", 117) == 116\nodd_Equivalent(\"1111111111\", 118) == 117\nodd_Equivalent(\"1111111111\", 119) == 118\nodd_Equivalent(\"1111111111\", 120) == 119\nodd_Equivalent(\"1111111111\", 121) == 120\nodd_Equivalent(\"1111111111\", 122) == 121\nodd_Equivalent(\"1111111111\", 123) == 122\nodd_Equivalent(\"1111111111\", 124) == 123\nodd_Equivalent(\"1111111111\", 125) == 124\nodd_Equivalent(\"1111111111\", 126) == 125\nodd_Equivalent(\"1111111111\", 127) == 126\nodd_Equivalent(\"1111111111\", 128) == 127\nodd_Equivalent(\"1111111111\", 129) == 128\nodd_Equivalent(\"1111111111\", 130) == 129\nodd_Equivalent(\"1111111111\", 131) == 130\nodd_Equivalent(\"1111111111\", 132) == 131\nodd_Equivalent(\"1111111111\", 133) == 132\nodd_Equivalent(\"1111111111\", 134) == 133\nodd_Equivalent(\"1111111111\", 135) == 134\nodd_Equivalent(\"1111111111\", 136) == 135\nodd_Equivalent(\"1111111111\", 137) == 136\nodd_Equivalent(\"1111111111\", 138) == 137\nodd_Equivalent(\"1111111111\", 139) == 138\nodd_Equivalent(\"1111111111\", 140) == 139\nodd_Equivalent(\"1111111111\", 141) == 140\nodd_Equivalent(\"1111111111\", 142) == 141"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_Equivalent(\"10101\",2) == 7\nassert     odd_Equivalent(\"10111\",3) == 8\nassert     odd_Equivalent(\"10101\",4) == 8\nassert     odd_Equivalent(\"1111\",1) == 2\nassert     odd_Equivalent(\"0000\",0) == 2\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists(nested_list) == [[2], [3,2,3], [2]]\nassert     common_in_nested_lists(nested_list2) == [[5], [5,5], [5]]\nassert     common_in_nested_lists(nested_list3) == [[2], [3, 2, 2], [3]]\nassert     common_in_nested_lists(nested_list4) == [[1, 2, 2], [3, 1, 2], [2]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1, 2], [1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 5]]) == [1, 2, 4, 5]\nassert     common_in_nested_lists([[1, 2, 1], [1, 2, 3, 1], [1, 1, 1, 1]]) == [1, 1, 1]\nassert     common_in_nested_lists([[1, 1], [1, 1, 1], [1, 1, 1, 1]]) == [1, 1, 1]\nassert     common_in_nested_lists([[1, 1], [1, 1, 1], [1, 1, 1, 1, 1]]) == [1, 1, 1]\nassert     common_in_nested_lists([[1, 1], [1, 1, 1], [1, 1, 1, 1, 1, 1]]) == [1, 1, 1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [3, 4], [7]]) == 1\nassert     common_in_nested_lists([[1, 2], [3, 4], [7]]) == 1\nassert     common_in_nested_lists([[1, 2, 3, 4], [3, 4], [7]]) == 1\nassert     common_in_nested_lists([[1, 2, 3], [3, 4], [7], [3, 4, 5], [6, 7], [7]]) == 5\nassert     common_in_nested_lists([[1, 2, 3, 4], [3, 4], [7], [3, 4, 5], [6, 7], [7, 8], [1, 2, 3], [4, 5], [6, 7]]) == 4\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([[1,2], [3], [4,5]]) == [[1, 2], [3, 4, 5]]\nassert     common_in_nested_lists([[1,2], [3], [5]]) == [[1, 2], [3, 5]]\nassert     common_in_nested_lists([[1], [3], [5]]) == [[1], [3], [5]]\nassert     common_in_nested_lists([[1,2,4], [4], [5]]) == [[1, 2, 4], [5]]\nassert     common_in_nested_lists([[1,2,4], [5], [6]]) == [[1, 2, 4], [5, 6]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[],[[],[]],[[]]]) == []\nassert     common_in_nested_lists([[],[[],[]],[[]]]) == []\nassert     common_in_nested_lists([[[],[]],[[],[]],[[]]]) == [[]]\nassert     common_in_nested_lists([[],[[],[]],[[],[]],[[]]]) == [[], []]\nassert     common_in_nested_lists([[[],[]],[[],[]],[[]]]) == [[], [], []]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[2,3],[[1],[4],[4,5,7],[7],3]]) == [2, 4, 7]\nassert common_in_nested_lists([[1,1,1],[1,1,1],[1,1,1],[1,1,1]]) == [1,1,1]\nassert common_in_nested_lists([[2,3],[3,4],[5,6,7]]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5), 'first one'\nassert     common_in_nested_lists([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 2, 3, 4, 5, 6),'second one'\nassert     common_in_nested_lists([[1, 2], [3, 4], [5, 6, 7]]) == (1, 2, 3, 4, 5, 6, 7), 'third one'\nassert     common_in_nested_lists([[1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), 'fourth one'\nassert     common_in_nested_lists([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == (1, 2, 3, 4, 5, 6, 7, 8, 9), 'fifth one'\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[1,2,3,4], [4,5,6], [1,1,1]]) == [4]\nassert     common_in_nested_lists([[1,2,3,4], [4,5,6], [1,1,4]]) == [1]\nassert     common_in_nested_lists([[1,2,3,4], [4,5,6], [1,1,1,1]]) == [1]\nassert     common_in_nested_lists([[1,2], [1,2], [1,3]]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([[], [], []]) == []\nassert     common_in_nested_lists([[1, 2], [3, 4], []]) == []\nassert     common_in_nested_lists([[], [1], [1]]) == []\nassert     common_in_nested_lists([[], [], []]) == []\nassert     common_in_nested_lists([[1, 2], [], [], []]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists([[1,1,1,1],[1,1,1,1],[1,1,1,1]]) == 1\nassert common_in_nested_lists([[1,1,1,1],[1,1,1,1],[2,2,2,2]]) == -1\nassert common_in_nested_lists([[1,1,1,1],[1,1,1,1],[1,1,1,1]]) == 0\nassert common_in_nested_lists([[1,1,1,1,2],[1,1,1,1,2],[1,1,1,1,2]]) == 2\nassert common_in_nested_lists([[1,1,1,1,2,2,2,2],[1,1,1,1,2,2,2,2],[1,1,1,1,2,2,2,2]]) == 2\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.') == False\nassert     check_integer('1.1') == True\nassert     check_integer('a') == False\nassert     check_integer('1a') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer('5') == True, \"Should be True\"\nassert     check_integer('5.5') == False, \"Should be False\"\nassert     check_integer('-5') == False, \"Should be False\"\nassert     check_integer('-5.5') == False, \"Should be False\"\nassert     check_integer('-5.5.5') == False, \"Should be False\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('3') == True\nassert     check_integer('3.5') == False\nassert     check_integer('-3') == False\nassert     check_integer('7a') == False"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.5') == False\nassert     check_integer('1a') == False\nassert     check_integer('1.') == False\nassert     check_integer('1e2') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer('123') == True\nassert     check_integer('123.4') == False\nassert     check_integer('1.0') == False\nassert     check_integer('123,4') == False\nassert     check_integer('True') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer('23') == True, 'incorrect answer'\nassert     check_integer('2.3') == False, 'incorrect answer'\nassert     check_integer('2') == True, 'incorrect answer'\nassert     check_integer('42') == False, 'incorrect answer'\nassert     check_integer('43') == False, 'incorrect answer'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_int(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer(\"1\") == True\nassert     check_integer(\"3.14\") == True\nassert     check_integer(\"3a14\") == False\nassert     check_integer(\"-3\") == True\nassert     check_integer(\"3e14\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_integer(\"34\") == True, \"Integer is correct\"\nassert     check_integer(\"34.5\") == False, \"Integer is incorrect\"\nassert     check_integer(\"3+5\") == True, \"Integer is correct\"\nassert     check_integer(\"-34\") == True, \"Integer is correct\"\nassert     check_integer(\"3+5.7\") == False, \"Integer is incorrect\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_integer(1) == True\nassert     check_integer(1.0) == False\nassert     check_integer('1') == False\nassert     check_integer('abc') == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([{}, {}, {}, {}]) is True, \"False\"\nassert     empty_dit([{}, {}, {}, {'a': 1}]) is False, \"False\"\nassert     empty_dit([{}, {}, {}, {}]) is True, \"False\"\n\ndef check_numbers(list1):\n    '''\n    Write a function to check whether all dictionaries in a list have the same number of keys and values.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit([{}, {}, {}])\nassert not empty_dit([{'a': 1}, {}, {'a': 2}])\nassert empty_dit([{}])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_dit([]) == True, \"Empty list\"\nassert     empty_dit([{}]) == True, \"Empty Dictionary\"\nassert     empty_dit([{'a':1}]) == False, \"non-empty Dictionary\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit([{},{}]) == True, \"Test 1 Failed\"\nassert empty_dit([{1:1, 2:2},{}]) == False, \"Test 2 Failed\"\nassert empty_dit([{},{'key':'value'}]) == False, \"Test 3 Failed\"\nassert empty_dit([{1:1},{}]) == False, \"Test 4 Failed\"\nassert empty_dit([{},{}]) == True, \"Test 5 Failed\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_dit([{},{}]) == True,'should be True'\nassert     empty_dit([{}, {}, {}]) == False,'should be False'\nassert     empty_dit([{}, {}, {}, {}, {}, {}]) == True,'should be True'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_dit([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}])\nassert     not empty_dit([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}])\nassert     empty_dit([])\nassert     not empty_dit([])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert empty_dit([]) == True\nassert empty_dit([{\"a\":\"a\"},{}]) == True\nassert empty_dit([{\"a\":\"a\"},None]) == True\nassert empty_dit([{\"a\":\"a\"},{}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef digit(a):\n    '''\n    Write a program to count number of digits in a string.\n    Sample Input    Expected Output\n    \"hgfdgfdg\"    4\n    \"forggeg\"    5\n    \" \"    0\n    \"nof\"    3\n    \"a\"    1\n    \"abc\"    2\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    empty_dit([]) == False, 'Empty list'\n    empty_dit([{}, {}, {}]) == True, 'one empty dictionary'\n    empty_dit([{1:2}, {1:2}, {1:2}]) == True, 'two empty dictionaries'\n    empty_dit([{'a': 1}, {'a': 1}, {'a': 1}]) == True, 'three empty dictionaries'\n    empty_dit([{'a': 1, 'b': 2}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2}]) == False, 'three empty dictionaries'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit([\"\",{},{}]) == True, \"Expected True\"\nassert     empty_dit([\"\",{},{\"a\":\"hello\"}]) == False, \"Expected False\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((3, 4)) == 5, 'Correct answer : {}'.format(5)\nassert     tuple_to_int((3, 5)) == 10, 'Correct answer : {}'.format(10)\nassert     tuple_to_int((10, 10)) == 20, 'Correct answer : {}'.format(20)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         tuple_to_int((1,2,3)) == 123\nassert         tuple_to_int((1,2,3,4)) == 124\nassert         tuple_to_int((1,2,3,4,5)) == 125\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,2)) == 2\nassert     tuple_to_int((3,4,5,6,7,8,9,10)) == 45\n\n\ndef int_to_tuple(integer):\n    '''\n    Write a function to convert an integer into a given tuple of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1,2,3,4,5)) == 15\nassert     tuple_to_int((1,2)) == 5\nassert     tuple_to_int((1,)) == 1\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((5, 2)) == 7\nassert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((2, 4, 6)) == 14\n\ndef get_second(nums):\n    '''\n    Write a function to get the second element of a given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef int_to_tuple(nums):\n    '''\n    Write a function to convert a given integer into a tuple of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 24\nassert     tuple_to_int((4,3,2,1)) == 24\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int(()) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_int((3, 5, 6)) == 1\nassert     tuple_to_int((1, 2)) == 3\nassert     tuple_to_int((2, 9, 4)) == 7\nassert     tuple_to_int((2, 3, 6, 5, 7, 9)) == 42\nassert     tuple_to_int((0, 1, 2, 3, 4)) == 0\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float([\"hello\", '12', \"23\"]) == ['hello', 12.0, 23.0]\nassert     list_to_float([\"hello\", '12', \"23.1\"]) == ['hello', 12.0, 23.1]\nassert     list_to_float([\"hello\", '12', \"23.001\"]) == ['hello', 12.0, 23.001]\nassert     list_to_float([\"hello\", '12', \"23.1\", \"23\"]) == ['hello', 12.0, 23.1, 23.0]\nassert     list_to_float([\"hello\", '12', \"23.1\", \"23.001\"]) == ['hello', 12.0, 23.1, 23.001]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     [1.2, 2.3, 3.4, '5', '6'] == list_to_float([['1', '2', '3', '4'], ['5'], ['6']])\nassert     [1.2, 2.3, 3.4, '5', '6', '7'] == list_to_float([[1, 2, 3, 4], ['5', '6'], ['7']])"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_to_float([[1, '2'], [3,4]]) == [[1,2],[3,4]]\nassert     list_to_float([[1, '2'], ['3',4]]) == [[1,2],[3,4]]\nassert     list_to_float([[1, '2'], [3,4, '5']]) == [[1,2],[3,4,5]]\nassert     list_to_float([[1, '2', '3'], ['4',5]]) == [[1,2,3],[4,5]]\nassert     list_to_float([[1, '2', '3', '4'], ['5',6,7]]) == [[1,2,3,4],[5,6,7]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_to_float([[1,2],[3,4],[5,6]]) == [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\nassert     list_to_float([[1,2],[\"3\",4],[\"5\",6]]) == [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\nassert     list_to_float([[1,2,3],[\"3\",4,5],[\"5\",6,7]]) == [[1.0, 2.0, 3.0], [3.0, 4.0, 5.0], [5.0, 6.0, 7.0]]\nassert     list_to_float([[1,2],[3,4],[5,6,7]]) == [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0, 7.0]]\nassert     list_to_float([[1,2,3,4],[5,6,7,8]]) == [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_to_float([[1.0, 2.0, 3.0], [2.0, 4.0, 7.0], [2.0, 7.0, 5.0]]) == [[1.0, 2.0, 3.0], [2.0, 4.0, 7.0], [2.0, 7.0, 5.0]]\nassert     list_to_float([[1.0, '2', '3'], ['2', '4', 7], ['2', 7, '5']]) == [[1.0, 2.0, 3.0], ['2', 4.0, 7.0], ['2', 7.0, 5.0]]\nassert     list_to_float([[1.0, '2', '3'], ['2', '4', 7], ['2', 7, 5]]) == [[1.0, 2.0, 3.0], ['2', 4.0, 7.0], ['2', 7.0, 5.0]]\nassert     list_to_float([[1.0, '2', '3'], ['2', '4', 7]]) == [[1.0, 2.0, 3.0], ['2', 4.0, 7.0]]\nassert     list_to_float([[1.0, '2', '3']]) == [[1.0, 2.0, 3.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([[1,2], [3,4]]) == [[1., 2.], [3., 4.]]\nassert     list_to_float([[1,2], [3,4.4]]) == [[1., 2.], [3., 4.]]\nassert     list_to_float([[1,2,3], [4,5,6]]) == [[1., 2., 3.], [4., 5., 6.]]\nassert     list_to_float([[1,2,3,4], [5,6,7,8]]) == [[1., 2., 3., 4.], [5., 6., 7., 8.]]\nassert     list_to_float([[1,2,3], [4,5,6], [7,8,9]]) == [[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1, 2, 3], [1.0, 2.0, 3.0]]) == [[1, 2, 3], [1.0, 2.0, 3.0]]\nassert     list_to_float([[1, 2, 3, 'a'], ['b', 'c', 'd'], ['e', 'f', 'g']]) == [[1, 2, 3, 'a'], ['b', 'c', 'd'], ['e', 'f', 'g']]\nassert     list_to_float([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]) == [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_to_float([1,2,'3']) == [[1.0], [2.0], ['3.0']]\nassert     list_to_float([1,2,'3.0']) == [[1.0], [2.0], ['3.0']]\nassert     list_to_float([1.0,2,'3.0']) == [[1.0], [2.0], ['3.0']]\nassert     list_to_float([]) == []\nassert     list_to_float(['1',2,'3']) == [[1.0], [2.0], ['3.0']]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_list(\"\") == [\"\"]\nassert     string_to_list(\"   \") == [\"\"]\nassert     string_to_list(\"     \") == [\"\"]\nassert     string_to_list(\"Hello World\") == [\"Hello\", \"World\"]\nassert     string_to_list(\"  Hello World\") == [\"Hello\", \"World\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_list(\"12 34 5\") == [\"12\", \"34\", \"5\"]\nassert     string_to_list(\"10 20 30\") == [\"10\", \"20\", \"30\"]\nassert     string_to_list(\"10 20 30 4\") == [\"10\", \"20\", \"30\", \"4\"]\nassert     string_to_list(\"10 20 30 4 5\") == [\"10\", \"20\", \"30\", \"4\", \"5\"]\nassert     string_to_list(\"1,2,3\") == [\"1\", \"2\", \"3\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_list('a b c') == ['a', 'b', 'c']\nassert     string_to_list('1 2 3') == ['1', '2', '3']\nassert     string_to_list(' a b c ') == ['a', 'b', 'c']\nassert     string_to_list(' 1 2 3') == ['1', '2', '3']\nassert     string_to_list('a b c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_list(\"This is a space seperated string\") == [\"This\", \"is\", \"a\", \"space\", \"seperated\", \"string\"]\nassert     string_to_list(\"This is a space seperated string\") == [\"This\", \"is\", \"a\", \"space\", \"seperated\", \"string\"]\n\ndef string_to_dict(string): \n    '''\n    Write a function to convert a string to a dictionary.\n    The key value pairs are separated by a space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_list('abcd') == ['ab', 'cd']\nassert     string_to_list('ab c') == ['ab', 'c']\n\ndef generate_list(n): \n    '''\n    Write a function to generate a list with n number of elements where each element in the list is the square of the element in the previous list.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_list(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\") == [\"Hi\", \"He\", \"Lied\", \"Because\", \"Boron\", \"Could\", \"Not\", \"Oxidize\", \"Fluorine\", \"New\", \"Nations\", \"Maybe\", \"Sign\", \"Peace\", \"Security\", \"Clause\", \"Arthur\", \"King\", \"Can\"]\nassert     string_to_list(\"Hello World!\") == [\"Hello\", \"World\"]\nassert     string_to_list(\"This is a sentence.\") == [\"This\", \"is\", \"a\", \"sentence\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_list('This is a test') == ['This', 'is', 'a', 'test']\nassert string_to_list('abcd') == ['abcd']\nassert string_to_list('ab cd') == ['ab', 'cd']\nassert string_to_list(' abcd') == ['ab', 'cd']\nassert string_to_list('abcd\\t') == ['ab', 'cd']\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_for_duplicate_element(arr):\n    '''\n    Write a python function to check if a given array contains any duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert search([1,2,3,3,3,3,4,5]) == 3, \"Wrong Answer\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([1,2,3,3,3,4,4,5]) == 3\nassert     search([1,2,2,3,3,3,4,4,5]) == 3\nassert     search([1,1,2,2,3,3,3,4,4,5]) == 2\nassert     search([1,1,1,2,2,3,3,3,4,4,5]) == 1\nassert     search([1,1,1,1,2,2,3,3,3,4,4,5]) == 1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([1, 1, 1, 2, 3, 4, 5, 5, 5]) == 5\nassert     search([1, 2, 3, 4, 5, 5, 6, 7, 8]) == -1\nassert     search([1, 1, 1, 1, 1, 2, 2, 3, 4, 5]) == 2\nassert     search([1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5]) == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([1,1,2,3,3,4,4,4]) == 4\nassert     search([1,1,2,3,3,4,5,5]) == 5\nassert     search([1,2,3,4,5,6,7,7]) == 7\nassert     search([1,2,3,4,5,5,5,6,7]) == 5\nassert     search([1,2,3,4,5,5,6,7,7]) == 7\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     search([0,1,1,2,3,4,4,4,4,4,5,6,7,8,8]) == 4\nassert     search([0,1,1,2,3,4,4,4,4,4,5,6,7,8,8]) == 5\nassert     search([1,1,2,3,4,4,4,4,4,4,5,6,7,8,8]) == 8\nassert     search([1,1,2,3,4,4,4,4,4,4,5,6,7,8,8]) == 8\nassert     search([1,2,3,4,5,6,7,8,9,10]) == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([1,2,3,4,5,6,6,7,8,9,9]) == 9\nassert     search([1,2,3,4,5,5,6,6,7,8,9,9]) == 9\nassert     search([1,2,3,4,5,5,6,7,8,9,9]) == 9\nassert     search([1,2,3,4,5,5,6,6,7,8,9,9,0,0]) == 0\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([])    == None\nassert     search([2,2])    == 2\nassert     search([2,2,2])    == 2\nassert     search([2,2,1,2,2])    == 1\nassert     search([2,2,1,1,1,2,2])    == 1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([1,2,3,3,3,4,4,4,4,4]) == 4, f\"Wrong answer: {search([1,2,3,3,3,4,4,4,4,4])}\"\nassert     search([4,4,4,4,4,4,4,4,4]) == 4, f\"Wrong answer: {search([4,4,4,4,4,4,4,4,4])}\"\nassert     search([]) == None, f\"Wrong answer: {search([])}\"\nassert     search([1,2,3,4,4,4]) == 4, f\"Wrong answer: {search([1,2,3,4,4,4])}\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(1, 2), (3, 4), (5, 6), (-1, -2)]) == 4, \\\n            \"Wrong answer\"\n\nassert max_product_tuple([(1, 2), (3, 4), (5, 6)]) == 24, \\\n            \"Wrong answer\"\n\nassert max_product_tuple([(1, 2), (3, 4), (-5, 6)]) == 24, \\\n            \"Wrong answer\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product_tuple(list1) == (-1, None)\n\ndef max_product_dict(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not max_product_tuple([(1,2,3), (4,5,6), (7,8,9)]) == None\nassert not max_product_tuple([(1,2,3), (1,2,3), (1,2,3)]) == None\nassert max_product_tuple([(1,2,3), (1,2,3), (1,2,3)]) == (1,2,3)"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product_tuple([(1, 1), (1, -1), (1, -2), (1, -3)]) == (1, 1)\nassert     max_product_tuple([(2, 1), (2, -1), (2, -2), (2, -3)]) == (2, 1)\nassert     max_product_tuple([(-1, 1), (-1, -1), (-1, -2), (-1, -3)]) == (-1, -1)\nassert     max_product_tuple([(3, -1), (3, -2), (3, -3)]) == (3, -1)\nassert     max_product_tuple([(4, -1), (4, -2), (4, -3)]) == (4, -1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_product_tuple([(0,1), (1,3), (2,4), (0,1), (2,4)]) == 2, \"Wrong output for max_product_tuple([(0,1), (1,3), (2,4), (0,1), (2,4)]).\"\nassert     max_product_tuple([(0,1), (1,2), (0,1), (1,2)]) == 2, \"Wrong output for max_product_tuple([(0,1), (1,2), (0,1), (1,2)]).\"\nassert     max_product_tuple([(0,1), (1,2), (0,1), (1,2)]) == 2, \"Wrong output for max_product_tuple([(0,1), (1,2), (0,1), (1,2)]).\"\nassert     max_product_tuple([(0,1), (1,2), (0,1), (1,2)]) == 2, \"Wrong output for max_product_tuple([(0,1), (1,2), (0,1), (1,2)]).\"\nassert     max_product_tuple([(0,1), (1,2), (0,1), (1,2)]) == 2, \"Wrong output for max_product_tuple([(0,1), (1,2), (0,1), (1,2)]).\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_product_tuple([\n    (2, 3),\n    (4, 8),\n    (5, -3),\n    (9, 1),\n    (0, 6),\n    (-9, -7),\n    (-5, -8),\n]) == (20, 8)\n\nmax_product_tuple([\n    (1, 3),\n    (2, 2),\n    (3, 1),\n]) == (3, 2)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(10) == 28\nassert     amicable_numbers_sum(100) == 5050\nassert     amicable_numbers_sum(1000) == 16018\nassert     amicable_numbers_sum(10000) == 35004\nassert     amicable_numbers_sum(1000000) == 1048573\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(1000) == 28\nassert     amicable_numbers_sum(2000) == 485\nassert     amicable_numbers_sum(3000) == 468\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(10000) == 233168\nassert     amicable_numbers_sum(1000) == 233168\nassert     amicable_numbers_sum(100) == 233168\nassert     amicable_numbers_sum(10) == 233168\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(2) == 1\nassert     amicable_numbers_sum(3) == 0\nassert     amicable_numbers_sum(4) == 3\nassert     amicable_numbers_sum(5) == 2\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    amicable_numbers_sum(1000) == sum(1, 2)\n    assert amicable_numbers_sum(10000) == sum(1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    assert amicable_numbers_sum(100000) == sum(1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(0) == 0, \"The result must be 0\"\nassert     amicable_numbers_sum(1) == 1, \"The result must be 1\"\nassert     amicable_numbers_sum(10) == 28, \"The result must be 28\"\nassert     amicable_numbers_sum(11) == 33, \"The result must be 33\"\nassert     amicable_numbers_sum(100) == 5050, \"The result must be 5050\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(100) == sum([1,2,5,10,20,30,45,55,65,70,75,85,90,95,100])\nprint(\"Test 1: amicable_numbers_sum passed!\")\n\ndef sum_of_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     amicable_numbers_sum(4) == 2, \"Number 1 is amicable!\"\nassert     amicable_numbers_sum(100) == 5050, \"Number 2 is amicable!\"\nassert     amicable_numbers_sum(1000) == 23340, \"Number 3 is amicable!\"\nassert     amicable_numbers_sum(10000) == 28657, \"Number 4 is amicable!\"\nassert     amicable_numbers_sum(1000000) == 43801, \"Number 5 is amicable!\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(4,2) == -0.14843716953815008\nassert     angle_complex(4.0,2) == -0.14843716953815008\nassert     angle_complex(4+0j,2) == -0.14843716953815008\nassert     angle_complex(4j,2) == -0.14843716953815008\nassert     angle_complex(-4,2) == 0.14843716953815008\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex(0,-1)==1\nassert     angle_complex(-1,1)==2*math.pi\nassert     angle_complex(1,-1)==2*math.pi\nassert     angle_complex(1,0)==math.pi\nassert     angle_complex(0,1)==0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(1,1) == 0, 'the angle should be 0 degree'\nassert     angle_complex(1,-1) == 90, 'the angle should be 90 degree'\nassert     angle_complex(2,1) == 180, 'the angle should be 180 degree'\nassert     angle_complex(2,-1) == 270, 'the angle should be 270 degree'\nassert     angle_complex(-1,1) == -90, 'the angle should be -90 degree'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(cmath.pi,-2) == -2.8953395223965308, \"Wrong Answer\"\nassert     angle_complex(cmath.pi,2) == -2.8953395223965308, \"Wrong Answer\"\nassert     angle_complex(cmath.pi,1.5) == -2.45, \"Wrong Answer\"\nassert     angle_complex(cmath.pi,1) == -2.5790282574403718, \"Wrong Answer\"\nassert     angle_complex(cmath.pi,0) == -2.0, \"Wrong Answer\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex((2,2),(1,1)) == cmath.phase(complex(2,2) + complex(1,1))\nassert     angle_complex((1,2),(1,1)) == cmath.phase(complex(1,2) + complex(1,1))\nassert     angle_complex((2,1),(2,1)) == cmath.phase(complex(2,1) + complex(2,1))\nassert     angle_complex((1,1),(2,1)) == cmath.phase(complex(1,1) + complex(2,1))\nassert     angle_complex((1,1),(2,2)) == cmath.phase(complex(1,1) + complex(2,2))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     angle_complex(complex(0,1), complex(1,0)) == 90, \"Should be 90\"\nassert     angle_complex(complex(-1,0), complex(0,1)) == -90, \"Should be -90\"\nassert     angle_complex(complex(1,0), complex(0,1)) == 0, \"Should be 0\"\nassert     angle_complex(complex(0,1), complex(-1,0)) == -180, \"Should be -180\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"Checking the correctness of angle_complex using the following test cases:\")\nprint(angle_complex(0,0))\nprint(angle_complex(1,1))\nprint(angle_complex(1,-1))\nprint(angle_complex(-1,-1))\nprint(angle_complex(0.1,0.1))\nprint(angle_complex(0.1,-0.1))\nprint(angle_complex(-0.1,-0.1))\nprint(angle_complex(0.1,0.1))\n\nprint(\"\\n##################################################################\\n\")\n\ndef find_root_complex(func,min_value,max_value,tol=1e-9):\n    '''\n    Write a function to find the root of a function by the bisection method.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(find_length(\"10101010000001010\"))\nprint(find_length(\"101010101010101\"))\nprint(find_length(\"101010101010101101010100\"))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_all_length(string): \n    '''\n    Write a function to find all the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    length = len(string)\n    res = 0\n    for i in range(1, length):\n        if string[i-1] == '0' and string[i] == '1':\n            res = max(res, find_length(string[i:]))\n        elif string[i-1] == '1' and string[i] == '0':\n            res = max(res, find_length(string[i:]))\n    return res + 1\n\n\ndef find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    length = len(string)\n    res = 0\n    for i in range(1, length):\n        if string[i-1] == '0' and string[i] == '1':\n            res = max(res, find_length(string[i:]))\n        elif string[i-1] == '1' and string[i] == '0':\n            res = max(res, find_length(string[i:]))\n    return res + 1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length('00100') == 5\nassert     find_length('11001') == 7\nassert     find_length('0000011') == 4\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_length('10100') == 2, 'wrong'\nassert     find_length('1100100010010') == 4, 'wrong'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_length('01010101') == 1\nassert     find_length('0101010111') == 1\nassert     find_length('01010101111') == 4\nassert     find_length('11001') == 3\nassert     find_length('01110111') == 4\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_length_naive(string):\n    '''\n    Naive solution. Time: O(N), Space: O(1)\n    '''\n    result = float('-inf')\n\n    for i in range(len(string)):\n        count_0 = string[i].count('0')\n        count_1 = string[i].count('1')\n        if count_0 < count_1:\n            count_0, count_1 = count_1, count_0\n        result = max(result, count_0 - count_1)\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum(0,0) == 0\nassert    sum(2,4) == 2\nassert    sum(2,6) == 5\nassert    sum(6,4) == 10\nassert    sum(6,8) == 18\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum(1,1) == 2 \nassert     sum(3,4) == 1 \nassert     sum(6,18) == 3 \nassert     sum(9,12) == 6 \nassert     sum(12,36) == 6 \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    print(\"sum(1,2) = {}\".format(sum(1,2)))\n    print(\"sum(10,10) = {}\".format(sum(10,10)))\n    print(\"sum(10,11) = {}\".format(sum(10,11)))\n    print(\"sum(10,12) = {}\".format(sum(10,12)))\n    print(\"sum(10,13) = {}\".format(sum(10,13)))\n    print(\"sum(10,14) = {}\".format(sum(10,14)))\n    print(\"sum(10,15) = {}\".format(sum(10,15)))\n    print(\"sum(10,16) = {}\".format(sum(10,16)))\n    print(\"sum(10,17) = {}\".format(sum(10,17)))\n    print(\"sum(10,18) = {}\".format(sum(10,18)))\n    print(\"sum(10,19) = {}\".format(sum(10,19)))\n    print(\"sum(10,20) = {}\".format(sum(10,20)))\n    print(\"sum(10,21) = {}\".format(sum(10,21)))\n    print(\"sum(10,22) = {}\".format(sum(10,22)))\n    print(\"sum(10,23) = {}\".format(sum(10,23)))\n    print(\"sum(10,24) = {}\".format(sum(10,24)))\n    print(\"sum(10,25) = {}\".format(sum(10,25)))\n    print(\"sum(10,26) = {}\".format(sum(10,26)))\n    print(\"sum(10,27) = {}\".format(sum(10,27)))\n    print(\"sum(10,28) = {}\".format(sum(10,28)))\n    print(\"sum(10,29) = {}\".format(sum(10,29)))\n    print(\"sum(10,30) = {}\".format(sum(10,30)))\n    print(\"sum(10,31) = {}\".format(sum(10,31)))\n    print(\"sum(10,32) = {}\".format(sum(10,32)))\n    print(\"sum(10,33) = {}\".format(sum(10,33)))\n    print(\"sum(10,34) = {}\".format(sum(10,34)))\n    print(\"sum(10,35) = {}\".format(sum(10,35)))\n    print(\"sum(10,36) = {}\".format(sum(10,36)))\n    print(\"sum(10,37) = {}\".format(sum(10,37)))\n    print(\"sum(10,38) = {}\".format(sum(10,38)))\n    print(\"sum(10,39) = {}\".format(sum(10,39)))\n    print(\"sum(10,40) = {}\".format(sum(10,40)))\n    print(\"sum(10,41) = {}\".format(sum(10,41)))\n    print(\"sum(10,42) = {}\".format(sum(10,42)))\n    print(\"sum(10,43) = {}\".format(sum(10,43)))\n    print(\"sum(10,44) = {}\".format(sum(10,44)))\n    print(\"sum(10,45) = {}\".format(sum(10,45)))\n    print(\"sum(10,46) = {}\".format(sum(10,46)))\n    print(\"sum(10,47) = {}\".format(sum(10,47)))\n    print(\"sum(10,48) = {}\".format(sum(10,48)))\n    print(\"sum(10,49) = {}\".format(sum(10,49)))\n    print(\"sum(10,50) = {}\".format(sum(10,50)))\n    print(\"sum(10,51) = {}\".format(sum(10,51)))\n    print(\"sum(10,52) = {}\".format(sum(10,52)))\n    print(\"sum(10,53) = {}\".format(sum(10,53)))\n    print(\"sum(10,54) = {}\".format(sum(10,54)))\n    print(\"sum(10,55) = {}\".format(sum(10,55)))\n    print(\"sum(10,56) = {}\".format(sum(10,56)))\n    print(\"sum(10,57) = {}\".format(sum(10,57)))\n    print(\"sum(10,58) = {}\".format(sum(10,58)))\n    print(\"sum(10,59) = {}\".format(sum(10,59)))\n    print(\"sum(10,60) = {}\".format(sum(10,60)))\n    print(\"sum(10,61) = {}\".format(sum(10,61)))\n    print(\"sum(10,62) = {}\".format(sum(10,62)))\n    print(\"sum(10,63) = {}\".format(sum(10,63)))\n    print(\"sum(10,64) = {}\".format(sum(10,64)))\n    print(\"sum(10,65) = {}\".format(sum(10,65)))\n    print(\"sum(10,66) = {}\".format(sum(10,66)))\n    print(\"sum(10,67) = {}\".format(sum(10,67)))\n    print(\"sum(10,68) = {}\".format(sum(10,68)))\n    print(\"sum(10,69) = {}\".format(sum(10,69)))\n    print(\"sum(10,70) = {}\".format(sum(10,70)))\n    print(\"sum(10,71) = {}\".format(sum(10,71)))\n    print(\"sum(10,72) = {}\".format(sum(10,72)))\n    print(\"sum(10,73) = {}\".format(sum(10,73)))\n    print(\"sum(10,74) = {}\".format(sum(10,74)))\n    print(\"sum(10,75) = {}\".format(sum(10,75)))\n    print(\"sum(10,76) = {}\".format(sum(10,76)))\n    print(\"sum(10,77) = {}\".format(sum(10,77)))\n    print(\"sum(10,78) = {}\".format(sum(10,78)))\n    print(\"sum(10,79) = {}\".format(sum(10,79)))\n    print(\"sum(10,80) = {}\".format(sum(10,80)))\n    print(\"sum(10,81) = {}\".format(sum(10,81)))\n    print(\"sum(10,82) = {}\".format(sum(10,82)))\n    print(\"sum(10,83) = {}\".format(sum(10,83)))\n    print(\"sum(10,84) = {}\".format(sum(10,84)))\n    print(\"sum(10,85) = {}\".format(sum(10,85)))\n    print(\"sum(10,86) = {}\".format(sum(10,86)))\n    print(\"sum(10,87) = {}\".format(sum(10,87)))\n    print(\"sum(10,88) = {}\".format(sum(10,88)))\n    print(\"sum(10,89) = {}\".format(sum(10,89)))\n    print(\"sum(10,90) = {}\".format(sum(10,90)))\n    print(\"sum(10,91) = {}\".format(sum(10,91)))\n    print(\"sum(10,92) = {}\".format(sum(10,92)))\n    print(\"sum(10,93) = {}\".format(sum(10,93)))\n    print(\"sum(10,94) = {}\".format(sum(10,94)))\n    print(\"sum(10,95) = {}\".format(sum(10,95)))\n    print(\"sum(10,96) = {}\".format(sum(10,96)))\n    print(\"sum(10,97) = {}\".format(sum(10,97)))\n    print(\"sum(10,98) = {}\".format(sum(10,98)))\n    print(\"sum(10,99) = {}\".format(sum(10,99)))\n    print(\"sum(10,100) = {}\".format(sum(10,100)))\n    print(\"sum(11,1) = {}\".format(sum(11,1)))\n    print(\"sum(11,2) = {}\".format(sum(11,2)))\n    print(\"sum(11,3) = {}\".format(sum(11,3)))\n    prin"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum(6,6) == 6\nassert    sum(6,5) == 0\nassert    sum(1,1) == 2\nassert    sum(1,6) == 2\nassert    sum(1,0) == 0\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Correct\") if (sum(12, 12) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(1, 12) == 10) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(5, 12) == 5) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(0, 12) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(8, 12) == 10) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(22, 7) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(7, 7) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(6, 6) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(1, 5) == 2) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(6, 3) == 2) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(2, 2) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(17, 6) == 5) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(17, 9) == 12) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(7, 3) == 3) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 26) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 7) == 6) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 9) == 17) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 10) == 22) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 11) == 19) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 12) == 15) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 13) == 11) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 14) == 7) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 15) == 5) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 16) == 3) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 17) == 2) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 18) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 19) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 20) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 21) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 22) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 23) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 24) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 25) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 26) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 27) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 28) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 29) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 30) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 31) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 32) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 33) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 34) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 35) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 36) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 37) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 38) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 39) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 40) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 41) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 42) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 43) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 44) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 45) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 46) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 47) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 48) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 49) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 50) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 51) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 52) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 53) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 54) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 55) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 56) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 57) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 58) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 59) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 60) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 61) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 62) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 63) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 64) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 65) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 66) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 67) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 68) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 69) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 70) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 71) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 72) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 73) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 74) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 75) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 76) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 77) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 78) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 79) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 80) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 81) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 82) == 0) else print(\"Incorrect\")\nprint(\"Correct\") if (sum(26, 83) == 0) els"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum(6,7) == 2\nassert    sum(5,7) == 5\nassert    sum(3,4) == 7\nassert    sum(8,10) == 2\nassert    sum(20,50) == 17\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_int(2, 5) == 10\nassert multiply_int(2, -5) == -10\nassert multiply_int(-2, 5) == -10\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_permutations(s1, s2):\n    '''\n    Given two strings, write a function to check if they are permutations of each other. \n    Return True if they are permutations of each other, False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_int(3,4) == 12\nassert     multiply_int(2,4) == 8\nassert     multiply_int(3,8) == 24\nassert     multiply_int(3,2) == 6\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(-2, 3) == -6\nassert     multiply_int(2.1, 3) == 6.1\nassert     multiply_int(-2.1, 3) == -6.1\nassert     multiply_int(2+0j, 3) == 6+0j\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(1, 5) == 5\nassert     multiply_int(1, 2) == 2\nassert     multiply_int(2, 5) == 10\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(2, 2) == 4\nassert     multiply_int(2, -2) == -4\nassert     multiply_int(-2, 2) == -4\nassert     multiply_int(5, 5) == 25\nassert     multiply_int(-5, 5) == -25\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(1, 1) == 1\nassert     multiply_int(2, 4) == 8\nassert     multiply_int(-1, 1) == -1\nassert     multiply_int(-2, 4) == -8\nassert     multiply_int(1, -1) == -1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(0, 2) == 0\nassert     multiply_int(-1, 2) == -2\nassert     multiply_int(1, -2) == -1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef multiply_int_solution_1(x, y):\n    '''\n    This is just to show how to use the built-in multiply operator.\n    '''\n    return x * y\n\nassert multiply_int_solution_1(2, 3) == 6\n\ndef multiply_int_solution_2(x, y):\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     long_words(2, ['hello', 'hi', 'helo', 'hi']) == ['hi', 'helo']\nassert     long_words(1, ['hello', 'hi', 'helo', 'hi']) == ['hi', 'helo']\nassert     long_words(5, ['hello', 'hi', 'helo', 'hi']) == []\nassert     long_words(4, ['hello', 'hi', 'helo', 'hi']) == []\nassert     long_words(0, ['hello', 'hi', 'helo', 'hi']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     long_words(5, [\"a\", \"banana\", \"app\", \"appl\", \"apple\"]) == [\"appl\"]\nassert     long_words(5, [\"cat\", \"banana\", \"dog\", \"banana\"]) == [\"banana\"]\nassert     long_words(5, [\"cat\", \"dog\", \"banana\"]) == []"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef short_words(n, str):\n    '''\n    Write a function to find words that are shorter than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     long_words(2, [\"hello\", \"world\", \"coding\", \"typing\"]) == [\"hello\", \"coding\"], \"long_words failed\"\nassert     long_words(3, [\"hello\", \"world\", \"coding\", \"typing\"]) == [\"coding\"], \"long_words failed\"\nassert     long_words(1, [\"hello\", \"world\", \"coding\", \"typing\"]) == [\"world\", \"coding\", \"typing\"], \"long_words failed\"\nassert     long_words(7, [\"hello\", \"world\", \"coding\", \"typing\"]) == [\"coding\", \"typing\"], \"long_words failed\"\nassert     long_words(4, [\"hello\", \"world\", \"coding\", \"typing\"]) == [\"coding\", \"typing\"], \"long_words failed\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     long_words(3, [\"aba\", \"xyz\", \"aba\", \"x\", \"bbb\"]) == [\"aba\", \"x\", \"aba\"]\nassert     long_words(2, [\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\"]) == [\"a\", \"a\"]\nassert     long_words(1, [\"a\", \"a\", \"a\", \"b\", \"b\", \"a\"]) == [\"a\"]\nassert     long_words(3, [\"a\", \"a\", \"a\", \"a\", \"a\"]) == []\nassert     long_words(4, [\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\"]) == [\"a\", \"a\", \"a\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    long_words(5, ['python', 'is', 'great', '!'])\n    == ['python', 'is', 'great']\n    \n    long_words(6, ['python', 'is', 'great', '!'])\n    == ['python', 'is', 'great']\n    \n    long_words(7, ['python', 'is', 'great', '!'])\n    == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     long_words(5, ['motor', 'appliance', 'pads']) == ['appliance']\nassert     long_words(3, ['motor', 'appliance', 'pads']) == ['appliance']\nassert     long_words(4, ['motor', 'appliance', 'pads']) == ['appliance']\nassert     long_words(6, ['motor', 'appliance', 'pads']) == ['appliance']\n\ndef len_str(n, s):\n    '''\n    Write a function that returns the number of characters in a given string that are longer than n characters.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     magic_square_test([[1, 2, 3], \n                            [2, 3, 1], \n                            [3, 1, 2]]) == True, \"Input: [[1, 2, 3], [2, 3, 1], [3, 1, 2]] is a magic square\"\nassert     magic_square_test([[2, 7, 4], \n                            [9, 5, 1], \n                            [6, 3, 8]]) == False, \"Input: [[2, 7, 4], [9, 5, 1], [6, 3, 8]] is not a magic square\"\nassert     magic_square_test([[1, 2, 3, 4], \n                            [2, 3, 1, 5], \n                            [3, 1, 2, 6], \n                            [4, 5, 6, 1]]) == True, \"Input: [[1, 2, 3, 4], [2, 3, 1, 5], [3, 1, 2, 6], [4, 5, 6, 1]] is a magic square\"\n\ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nWrite a function to multiply a given matrix by a given constant.\n'''"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == True, 'Failed'\nassert     magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False, 'Failed'\nassert     magic_square_test([[1, 2, 3, 4, 5],\n                              [6, 7, 8, 9, 10],\n                              [11, 12, 13, 14, 15],\n                              [16, 17, 18, 19, 20],\n                              [21, 22, 23, 24, 25]]) == False, 'Failed'\nassert     magic_square_test([[4, 9, 2],\n                              [3, 5, 7],\n                              [8, 1, 6]]) == False, 'Failed'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6]]) == True, \"Test #1: [[4, 9, 2], \\\n                                                    [3, 5, 7], \\\n                                                    [8, 1, 6]] - Should be True\"\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) == False, \"Test #2: [[1, 2, 3], \\\n                                                [4, 5, 6], \\\n                                                [7, 8, 9]] - Should be False\"\nassert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) == False, \"Test #3: [[4, 9, 2], \\\n                                                [3, 5, 7], \\\n                                                [8, 1, 6]] - Should be False\"\nassert     magic_square_test([[1, 2, 3, 4, 5],\n                            [6, 7, 8, 9, 10],\n                            [11, 12, 13, 14, 15],\n                            [16, 17, 18, 19, 20],\n                            [21, 22, 23, 24, 25]]) == False, \"Test #4: \\\n                                                            [[1, 2, 3, 4, 5], \\\n                                                            [6, 7, 8, 9, 10], \\\n                                                            [11, 12, 13, 14, 15], \\\n                                                            [16, 17, 18, 19, 20], \\\n                                                            [21, 22, 23, 24, 25]] - \\\n                                                            Should be False\"\nassert     magic_square_test([[2, 8, 1],\n                            [9, 4, 7],\n                            [3, 5, 6]]) == True, \"Test #5: \\\n                                                            [[2, 8, 1], \\\n                                                            [9, 4, 7], \\\n                                                            [3, 5, 6]] - Should be True\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     magic_square_test([\n    [8, 3, 4, 1],\n    [9, 5, 2, 6],\n    [6, 1, 2, 9],\n    [4, 6, 9, 5]]) == True, \"Input [8, 3, 4, 1] is a magic square!\"\nassert     magic_square_test([\n    [2, 7, 6, 9],\n    [9, 5, 1, 3],\n    [4, 3, 8, 2],\n    [6, 9, 1, 7]]) == False, \"Input [2, 7, 6, 9] is not a magic square!\"\nassert     magic_square_test([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]]) == False, \"Input [1, 2, 3] is not a magic square!\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    magic_square_test([\n        [8,3,4,6,7,9,5,1,2],\n        [6,7,2,1,9,5,3,4,8],\n        [1,9,8,3,4,2,5,6,7],\n        [8,5,9,7,6,1,4,2,3],\n        [4,2,6,8,5,3,7,9,1],\n        [7,1,3,9,2,4,8,5,6],\n        [9,6,1,5,3,7,2,8,4],\n        [2,8,7,4,1,9,6,3,5],\n        [3,4,5,2,8,6,1,7,9]\n    ]) == True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     magic_square_test([\n                                    [5, 3, 4, 6, 7, 8, 9, 1, 2],\n                                    [6, 7, 2, 1, 9, 5, 3, 4, 8],\n                                    [1, 9, 8, 3, 4, 2, 5, 6, 7],\n                                    [8, 5, 9, 7, 6, 1, 4, 2, 3],\n                                    [4, 2, 6, 8, 5, 3, 7, 9, 1],\n                                    [7, 1, 3, 9, 2, 4, 8, 5, 6],\n                                    [9, 6, 1, 5, 3, 7, 2, 8, 4],\n                                    [2, 8, 7, 4, 1, 9, 6, 3, 5],\n                                    [3, 4, 5, 2, 8, 6, 1, 7, 9]\n                                ]) == True\nassert     magic_square_test([\n                                    [1, 2, 3, 4],\n                                    [5, 6, 7, 8],\n                                    [9, 10, 11, 12],\n                                    [13, 14, 15, 16]\n                                ]) == False\n\ndef magic_square_main():\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     magic_square_test([\n        [4,3,2,4],\n        [3,5,1,2],\n        [1,3,8,5],\n        [6,2,8,7]]) == True, \"Wrong output!\"\nassert     magic_square_test([\n        [4, 3, 2, 4],\n        [3, 5, 1, 2],\n        [1, 3, 8, 5],\n        [6, 2, 8, 7],\n        [4, 3, 2, 4],\n        [3, 5, 1, 2]]) == False, \"Wrong output!\"\n\n\ndef is_square(matrix):\n    '''\n    Write a function to check whether the given matrix is a square matrix.\n    '''\n    pass"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) == True\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) == True\nassert     magic_square_test([[2, 7, 6],\n                            [9, 5, 1],\n                            [4, 3, 8]]) == True\nassert     magic_square_test([[6, 1, 4],\n                            [7, 5, 2],\n                            [3, 8, 9]]) == True\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_occurrences([-2,2,1,-3,3,-1,1,-1,1,-2]) == 1\nassert     max_occurrences([1,1,2,1,2,1,2]) == 2\nassert     max_occurrences([1,1,1,2,1,1,1]) == 2\nassert     max_occurrences([-2,2,1,2,1,-3]) == 1\nassert     max_occurrences([1,1,2,1,2,1]) == 2\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_occurrences([2,4,3,6,3,4,5,6]) == 3\nassert     max_occurrences([1,2,3,4,3,4,5,6]) == 4\nassert     max_occurrences([1,1,1,1,1,1,1,1,1,1]) == 1\nassert     max_occurrences([5,5,5,5,5,5,5,5,5,5]) == 5\nassert     max_occurrences([1,3,3,4,3,3,4,5,5,6]) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_occurrences([1,2,3,4]) == 4, \\\n        'Wrong answer: got {}, expected {}.'.format(max_occurrences([1,2,3,4]), 4)\nassert     max_occurrences([3,3,2,2,3,3,3,3,2,3]) == 2, \\\n        'Wrong answer: got {}, expected {}.'.format(max_occurrences([3,3,2,2,3,3,3,3,2,3]), 2)\nassert     max_occurrences([2,2,2,3,4]) == 3, \\\n        'Wrong answer: got {}, expected {}.'.format(max_occurrences([2,2,2,3,4]), 3)\nassert     max_occurrences([5,5,5,4,4,4]) == 4, \\\n        'Wrong answer: got {}, expected {}.'.format(max_occurrences([5,5,5,4,4,4]), 4)\nassert     max_occurrences([1,1,1,1,1,1]) == 1, \\\n        'Wrong answer: got {}, expected {}.'.format(max_occurrences([1,1,1,1,1,1]), 1)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nnums = [0,1,1,2,2,3,4,5,5,5,5,6,7,8,9,9,10]\nprint(max_occurrences(nums))\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    return max(d.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for i in nums:\n        count[i] += 1\n    max_count = max(count.values())\n    for key in count.keys():\n        if count[key] == max_count:\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_occurrences([]) == None, \"Empty array\"\nassert     max_occurrences([1,1,1,2,2,2,3,3,3,4]) == 3, \"only three times\"\nassert     max_occurrences([-1,-1,-1,-1,0,0,1,1,2,2,3,3,3,4,4,5,5,5,6]) == 0, \"0 times\"\nassert     max_occurrences([-1,1,2,2,3,3,3,4,4,5,5,6,6]) == 6, \"most of the time\"\nassert     max_occurrences([-1,1,2,2,3,3,3,4,4,5,5,6,7,7,7,7]) == 7, \"some times\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmax_occurrences([1,2,3,4,5,5,6,3,3,2]) == 2\nassert \nmax_occurrences([2,2,3,4,5,5,6,3,3,2]) == 3\nassert \nmax_occurrences([3,2,3,2,2,3,2,3,3,2,2]) == 2"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_vowels(\"HOW ARE YOU\") == \"OUY HOW RE YOU\"\nassert     reverse_vowels(\"HEY\") == \"HI\"\nassert     reverse_vowels(\"\") == \"\"\nassert     reverse_vowels(\"LEET CODES\") == \"CODES LEET\"\nassert     reverse_vowels(\"WITHYO\") == \"YOUWITO\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nreverse_vowels(\"This is python\") == \"yhtinps otihi sihti\"\nassert reverse_vowels(\"python\") == \"nohtypy\"\nassert reverse_vowels(\"abce\") == \"ecba\"\nassert reverse_vowels(\"abcd\") == \"dcba\"\nassert reverse_vowels(\"aeiou\") == \"oiuae\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_vowels(\"hannah\") == \"ohnnh\"\nassert     reverse_vowels(\"hannah\") == \"hannoh\"\nassert     reverse_vowels(\"anther\") == \"etherh\"\nassert     reverse_vowels(\"hello world\") == \"dlrow olleh\"\nassert     reverse_vowels(\"hello\") == \"hello\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('hellot') == 'olleh'\nassert     reverse_vowels('hELLo') == 'oLEh'\nassert     reverse_vowels('hElLo') == 'oLLo'\nassert     reverse_vowels('HelloWorld') == 'DLroWerLD'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\"\nassert     reverse_vowels(\"hello world\") == \"dlrow olleh\"\nassert     reverse_vowels(\"heyyo\") == \"yooyh\"\nassert     reverse_vowels(\"hi\") == \"ih\"\nassert     reverse_vowels(\"I love Python\") == \"no Python I love\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_vowels('a') == 'a', 'Should return a'\nassert     reverse_vowels('hello') == 'olleh', 'Should return hlo'\nassert     reverse_vowels('ab') == 'ba', 'Should return b'\nassert     reverse_vowels('harry') == 'hryar', 'Should return harry'\nassert     reverse_vowels('code') == 'doce', 'Should return doce'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_vowels('hixxxovi') == 'viovhx'\nassert     reverse_vowels('supercalifragilisticexpialidocious') == 'zyxpialidcossusericflagi'\nassert     reverse_vowels('apple') == 'pple'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert reverse_vowels('world') == 'dlrow'\nassert reverse_vowels('qwert') == 'werqt'\nassert reverse_vowels('rever') =='verfer'\nassert reverse_vowels('abcdefghijklmnopqrstuvwxyz') == 'zyxwvutsrqponmlkjihgfedcba'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels('') == ''\nassert     reverse_vowels('Aapple') == 'apple'\nassert     reverse_vowels('Abloo') == 'pulao'\nassert     reverse_vowels('apple') == 'plai'\nassert     reverse_vowels('Apple') == 'pli'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string((1,2,3))=='1,2,3', 'tup_string'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef x_string(x):\n    '''\n    Write a function to convert an integer into its equivalent ascii string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tup_string(()) == ''\nassert     tup_string((1,2,3)) == '123'\nassert     tup_string((0,1,2)) == '012'\nassert     tup_string(('a', 'b', 'c')) == 'abc'\nassert     tup_string((1.1, 2.2, 3.3)) == '1.12'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string(('a', 'b', 'c')) == '(a, b, c)'\nassert     tup_string(('d',)) == '(d,)'\nassert     tup_string((1, 'a')) == '(1, a)'\nassert     tup_string(('a',)) == '(a,)'\nassert     tup_string((1, 'a', 1, 'b', 'c')) == '(1, a, 1, b, c)'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string( (1,2,3) ) == '123',\\\n        'Wrong output'\nassert     tup_string( ('a',) ) == 'a',\\\n        'Wrong output'\nassert     tup_string( ('a',2,3) ) == 'a2,3',\\\n        'Wrong output'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string((1, 2, 3)) == \"1, 2, 3\"\nassert tup_string((1, 'hello', 'world')) == \"1, 'hello', 'world'\"\nassert tup_string(('hello', 'world')) == \"hello, world\"\nassert tup_string(('hello', 'world', 'this', 'is', 'wrong', 'and','should', 'not', 'be', 'converted')) == \"hello, world, this, is, wrong, and, should, not, be, converted\"\nassert tup_string(('hello', 'world', 'this', 'is', 'wrong', 'and','should', 'not', 'be', 'converted')) == \"hello, world, this, is, wrong, and, should, not, be, converted\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tup_string((1, 2, 3)) == '(1, 2, 3)'\nassert     tup_string((1, 2, 3, 1, 2, 3)) == '(1, 2, 3, 1, 2, 3)'\n\ndef tup_add(tup1, tup2):\n    '''\n    Write a function to add two tuples element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tup_string( (1,2,3) ) == '123'\nassert     tup_string( (1,2,3,4,5) ) == '12345'\nassert     tup_string( (1,2) ) == '12'\nassert     tup_string( () ) == ''\n\n\ndef combine_strings(str1, str2):\n    '''\n    Write a function to combine two strings.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string((1, 2, 3)) == \"1, 2, 3\", \"fails\"\n\ndef tup_string_2(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_nonnegative(nums):\n    '''\n    Write a function to check whether the list of numbers is non-negative or not.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_negativenum([-5, -1, 0, 4, 5]) == 5\nassert     sum_negativenum([-5, -1, 0, 4, -5]) == -2\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-5, -1, -1, -4]) == -2\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    sum_negativenum([1,-2,3,-4]) == -1\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(sum_negativenum([0,-1,-2,3,4,-5,-6,7,8,9,-10]))"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(sum_negativenum([1,-2,3,4,-5]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([-2, 3, 5, -4, -1]) == 0, sum_negativenum([-2, 3, 5, -4, -1])\nassert     sum_negativenum([-1, -3, -5, -4]) == -7, sum_negativenum([-1, -3, -5, -4])\nassert     sum_negativenum([-2]) == -2, sum_negativenum([-2])\nassert     sum_negativenum([]) == 0, sum_negativenum([])\n\ndef sum_negativenum_by_func(nums):\n    '''\n    Using 'function' to calculate the sum of negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([]) == 0\nassert     sum_negativenum([1]) == 1\nassert     sum_negativenum([1, 2]) == 3\nassert     sum_negativenum([1, 2, -3]) == 4\nassert     sum_negativenum([-1, -2, -3]) == -6\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert hexagonal_num(1) == 1\nassert hexagonal_num(2) == 5\nassert hexagonal_num(3) == 13\nassert hexagonal_num(4) == 43\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhexagonal_num(1) == 1 \nassert hexagonal_num(2) == 5 \nassert hexagonal_num(3) == 15 \nassert hexagonal_num(4) == 28 \nassert hexagonal_num(5) == 41\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(hexagonal_num(3))\nprint(hexagonal_num(10))\nprint(hexagonal_num(18))\nprint(hexagonal_num(20))\nprint(hexagonal_num(21))\nprint(hexagonal_num(24))\nprint(hexagonal_num(25))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nhexagonal_num(4) == 10\nhexagonal_num(1) == 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nLet N be the number of hexagonal numbers.\n\nThe nth hexagonal number is \n\n((3^2 - 1) / 2) N + 1\n\nExample:\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef hexagonal_num(n):\n    return n**3 + 0.5*n**2\n\nassert hexagonal_num(0) == 0\nassert hexagonal_num(1) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nhexagonal_num(1) == 1\nhexagonal_num(10) == 3\nhexagonal_num(100) == 8\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nhexagonal_num(1) == 1\nhexagonal_num(2) == 3\nhexagonal_num(3) == 4\nhexagonal_num(4) == 7\nhexagonal_num(5) == 11\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     zero_count([0, 1, 0]) == 1.0\nassert     zero_count([0, 0, 0]) == 0.0\nassert     zero_count([1, 0, 1]) == 1.0\nassert     zero_count([1, 1, 0]) == 0.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     zero_count([0,1,0,1,0,1,0,1,0,1]) == 0.2, \"wrong result\"\nassert zero_count([0,0,0,1,0,1,0,1,0,1]) == 0.5, \"wrong result\"\nassert zero_count([0,0,0,0,1,1,0,1,0,1]) == 1.0, \"wrong result\"\n\ndef most_common(lst):\n    '''\n    Write a function that takes in a list of items and finds the most common item in the list. If there are ties, return the lowest number.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_of_squares(nums):\n    '''\n    Write a function that returns the sum of the squares of the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef zero_count_bug_free(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums (list): list of numbers\n\n    Returns:\n        tuple: ratio of zeroes to non-zeroes in an array of integers\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     zero_count([0, 0, 0, 1, 1]) == 2\nassert     zero_count([0, 1, 0, 1, 0]) == 3\nassert     zero_count([1, 0, 1, 1, 1]) == 0\nassert     zero_count([1, 1, 1, 1, 0]) == 5\nassert     zero_count([1, 0, 1, 0, 0]) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     zero_count([]) == 0.0\nassert     zero_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.1\nassert     zero_count([1, 2, 3, 0, 5, 6, 7, 8, 9, 10]) == 0.4\nassert     zero_count([1, 2, 3, 0, 5, 6, 0, 7, 8, 9, 10]) == 0.6\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0.9\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     zero_count([]) == 0.0, \"Input: []\"\nassert     zero_count([1,0,1]) == 0.5, \"Input: [1,0,1]\"\nassert     zero_count([0,0,0,0,1]) == 1.0, \"Input: [0,0,0,0,1]\"\nassert     zero_count([0,1,0,0,0,1]) == 0.5, \"Input: [0,1,0,0,0,1]\"\nassert     zero_count([1,1,1,1,0,1]) == 1.0, \"Input: [1,1,1,1,0,1]\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_palindrome(text):\n    '''\n    Write a function that takes a string and determines if it is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(7) == True\nassert     is_Sum_Of_Powers_Of_Two(18) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(9) == False\nassert     is_Sum_Of_Powers_Of_Two(20) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(27) == True, \"should be True\"\nassert     is_Sum_Of_Powers_Of_Two(12) == False, \"should be False\"\nassert     is_Sum_Of_Powers_Of_Two(34) == False, \"should be False\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(2) == True\nis_Sum_Of_Powers_Of_Two(11) == True\nis_Sum_Of_Powers_Of_Two(4) == False\nis_Sum_Of_Powers_Of_Two(50) == False\nis_Sum_Of_Powers_Of_Two(67) == False\nis_Sum_Of_Powers_Of_Two(72) == True\nis_Sum_Of_Powers_Of_Two(111) == True\nis_Sum_Of_Powers_Of_Two(0) == False\nis_Sum_Of_Powers_Of_Two(1) == False\nis_Sum_Of_Powers_Of_Two(-1) == False\nis_Sum_Of_Powers_Of_Two(-2) == False\nis_Sum_Of_Powers_Of_Two(-3) == False\nis_Sum_Of_Powers_Of_Two(-5) == False\nis_Sum_Of_Powers_Of_Two(-10) == False\nis_Sum_Of_Powers_Of_Two(-100) == False\nis_Sum_Of_Powers_Of_Two(1e3) == True\nis_Sum_Of_Powers_Of_Two(-1e3) == False\nis_Sum_Of_Powers_Of_Two(1e-3) == True\nis_Sum_Of_Powers_Of_Two(-1e-3) == False\nis_Sum_Of_Powers_Of_Two(1e-4) == True\nis_Sum_Of_Powers_Of_Two(-1e-4) == False\nis_Sum_Of_Powers_Of_Two(1e-5) == True\nis_Sum_Of_Powers_Of_Two(-1e-5) == False\nis_Sum_Of_Powers_Of_Two(1e-6) == True\nis_Sum_Of_Powers_Of_Two(-1e-6) == False\nis_Sum_Of_Powers_Of_Two(1e-7) == True\nis_Sum_Of_Powers_Of_Two(-1e-7) == False\nis_Sum_Of_Powers_Of_Two(1e-8) == True\nis_Sum_Of_Powers_Of_Two(-1e-8) == False\nis_Sum_Of_Powers_Of_Two(1e-9) == True\nis_Sum_Of_Powers_Of_Two(-1e-9) == False\nis_Sum_Of_Powers_Of_Two(1e-10) == True\nis_Sum_Of_Powers_Of_Two(-1e-10) == False\nis_Sum_Of_Powers_Of_Two(1e-11) == True\nis_Sum_Of_Powers_Of_Two(-1e-11) == False\nis_Sum_Of_Powers_Of_Two(1e-12) == True\nis_Sum_Of_Powers_Of_Two(-1e-12) == False\nis_Sum_Of_Powers_Of_Two(1e-13) == True\nis_Sum_Of_Powers_Of_Two(-1e-13) == False\nis_Sum_Of_Powers_Of_Two(1e-14) == True\nis_Sum_Of_Powers_Of_Two(-1e-14) == False\nis_Sum_Of_Powers_Of_Two(1e-15) == True\nis_Sum_Of_Powers_Of_Two(-1e-15) == False\nis_Sum_Of_Powers_Of_Two(1e-16) == True\nis_Sum_Of_Powers_Of_Two(-1e-16) == False\nis_Sum_Of_Powers_Of_Two(1e-17) == True\nis_Sum_Of_Powers_Of_Two(-1e-17) == False\nis_Sum_Of_Powers_Of_Two(1e-18) == True\nis_Sum_Of_Powers_Of_Two(-1e-18) == False\nis_Sum_Of_Powers_Of_Two(1e-19) == True\nis_Sum_Of_Powers_Of_Two(-1e-19) == False\nis_Sum_Of_Powers_Of_Two(1e-20) == True\nis_Sum_Of_Powers_Of_Two(-1e-20) == False\nis_Sum_Of_Powers_Of_Two(1e-21) == True\nis_Sum_Of_Powers_Of_Two(-1e-21) == False\nis_Sum_Of_Powers_Of_Two(1e-22) == True\nis_Sum_Of_Powers_Of_Two(-1e-22) == False\nis_Sum_Of_Powers_Of_Two(1e-23) == True\nis_Sum_Of_Powers_Of_Two(-1e-23) == False\nis_Sum_Of_Powers_Of_Two(1e-24) == True\nis_Sum_Of_Powers_Of_Two(-1e-24) == False\nis_Sum_Of_Powers_Of_Two(1e-25) == True\nis_Sum_Of_Powers_Of_Two(-1e-25) == False\nis_Sum_Of_Powers_Of_Two(1e-26) == True\nis_Sum_Of_Powers_Of_Two(-1e-26) == False\nis_Sum_Of_Powers_Of_Two(1e-27) == True\nis_Sum_Of_Powers_Of_Two(-1e-27) == False\nis_Sum_Of_Powers_Of_Two(1e-28) == True\nis_Sum_Of_Powers_Of_Two(-1e-28) == False\nis_Sum_Of_Powers_Of_Two(1e-29) == True\nis_Sum_Of_Powers_Of_Two(-1e-29) == False\nis_Sum_Of_Powers_Of_Two(1e-30) == True\nis_Sum_Of_Powers_Of_Two(-1e-30) == False\nis_Sum_Of_Powers_Of_Two(1e-31) == True\nis_Sum_Of_Powers_Of_Two(-1e-31) == False\nis_Sum_Of_Powers_Of_Two(1e-32) == True\nis_Sum_Of_Powers_Of_Two(-1e-32) == False\nis_Sum_Of_Powers_Of_Two(1e-33) == True\nis_Sum_Of_Powers_Of_Two(-1e-33) == False\nis_Sum_Of_Powers_Of_Two(1e-34) == True\nis_Sum_Of_Powers_Of_Two(-1e-34) == False\nis_Sum_Of_Powers_Of_Two(1e-35) == True\nis_Sum_Of_Powers_Of_Two(-1e-35) == False\nis_Sum_Of_Powers_Of_Two(1e-36) == True\nis_Sum_Of_Powers_Of_Two(-1e-36) == False\nis_Sum_Of_Powers_Of_Two(1e-37) == True\nis_Sum_Of_Powers_Of_Two(-1e-37) == False\nis_Sum_Of_Powers_Of_Two(1e-38) == True\nis_Sum_Of_Powers_Of_Two(-1e-38) == False\nis_Sum_Of_Powers_Of_Two(1e-39) == True\nis_Sum_Of_Powers_Of_Two(-1e-39) == False\nis_Sum_Of_Powers_Of_Two(1e-40) == True\nis_Sum_Of_Powers_Of_Two(-1e-40) == False\nis_Sum_Of_Powers_Of_Two(1e-41) == True\nis_Sum_Of_Powers_Of_Two(-1e-41) == False\nis_Sum_Of_Powers_Of_Two(1e-42) == True\ni"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True, \"2 is not Sum of Powers of 2.\"\nassert is_Sum_Of_Powers_Of_Two(20) == True, \"20 is not Sum of Powers of 2.\"\nassert is_Sum_Of_Powers_Of_Two(22) == False, \"22 is Sum of Powers of 2.\"\nassert is_Sum_Of_Powers_Of_Two(1) == True, \"1 is Sum of Powers of 2.\"\nassert is_Sum_Of_Powers_Of_Two(10) == False, \"10 is Sum of Powers of 2.\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(8), True\nis_Sum_Of_Powers_Of_Two(9), False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('is_Sum_Of_Powers_Of_Two function')\nprint('check sum of powers of 2 from 2 to 50000')\nassert is_Sum_Of_Powers_Of_Two(10000)==True\nprint('check sum of powers of 2 from 2 to 50000')\nassert is_Sum_Of_Powers_Of_Two(11)==False\nprint('check sum of powers of 2 from 2 to 50000')\nassert is_Sum_Of_Powers_Of_Two(2)==True\nprint('check sum of powers of 2 from 2 to 50000')\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(9) == True, \"should be True\"\nassert     is_Sum_Of_Powers_Of_Two(10) == False, \"should be False\"\nassert     is_Sum_Of_Powers_Of_Two(15) == True, \"should be True\"\nassert     is_Sum_Of_Powers_Of_Two(8) == False, \"should be False\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circle_circumference(2)    ==  12.566370614359172\nassert     circle_circumference(3)    ==  37.63369384591737\nassert     circle_circumference(1)    ==  3.141592653589793\nassert     circle_circumference(0)    ==  3.141592653589793\nassert     circle_circumference(2.1)    ==  43.375\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # just a smoke test for your code\n    # do not modify this\ncircle_circumference(3) == 1.414\n\ndef test_circle_circumference(self):\n    '''\n    Write a test to check your function for correctness.\n    '''\n    assert circle_circumference(3) == 1.414\n    pass\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncircle_circumference(5) == 25.0\ncircle_circumference(3.5) == 22.5\ncircle_circumference(0) == 0\ncircle_circumference(2) == 22.5\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncircle_circumference(0) == 0, \"Expected 0\"\nassert \ncircle_circumference(1) == 2 * math.pi, \"Expected 2pi\"\nassert \ncircle_circumference(2) == 2 * math.pi * 2, \"Expected 2pi * 2\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_singly([[1,2,3],[4,5,6],[7,8,9]]) ==    set([1,2,3,4,5,6,7,8,9])\nassert     extract_singly([[1],[2],[3],[4]]) ==    set([1,2,3,4])\nassert     extract_singly([[]]) ==    set([])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[1], [2, 3], [[4, 5, 6]], 7, 8]) == set([1, 2, 3, 4, 5, 6, 7, 8])\nassert     extract_singly([[1], 2, 3, 4, 5]) == set([1, 2, 3, 4, 5])\nassert     extract_singly([[]]) == set([])\nassert     extract_singly([[]]) == set([])\nassert     extract_singly([[1], 2, [[3], [4, 5]], 6]) == set([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[1], \n                          [2,3], \n                          [4,5,6,7,8,9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}\nassert     extract_singly([[]]) == set()\nassert     extract_singly([[1,2]]) == {1, 2}\nassert     extract_singly([[]]) == set()\nassert     extract_singly([[1]]) == {1}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[1,2,3,4],[2,3,4,5]]) == {1,2,3,4,2,3,4,5}\nassert extract_singly([1,2,3,4,5]) == {1,2,3,4,5}\nassert extract_singly([1,2,3]) == {1,2,3}\nassert extract_singly([1]) == {1}\nassert extract_singly([]) == set("
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[1,2,3,4],[5,6,7]]) == (1,2,3,4,5,6,7)\nassert     extract_singly([[[1],[2]],[[3],[4]]]) == (1,2,3,4)\nassert     extract_singly([[[1,2],[3,4]],[[5,6],[7,8]]]) == (1,2,3,4,5,6,7,8)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_singly([1,2,3]) == 6, \"Correctness Failed\"\nassert     extract_singly([1,2,3,4,5,6]) == 15, \"Correctness Failed\"\nassert     extract_singly([1,2,3,4]) == 10, \"Correctness Failed\"\nassert     extract_singly([1,2,3,4,5,6]) == 15, \"Correctness Failed\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_singly([[1,2,3],[1,2,3],4]) == [1,2,3,1,2,3,4]\nassert     extract_singly([[1],[1,2,3],[1,2,3]]) == [1,1,2,3,1,2,3]\nassert     extract_singly([[1,2],[1,2,3],[1,2,3]]) == [1,2,1,2,3,1,2,3]\nassert     extract_singly([[1,2,3],[1,2,3],4]) == [1,2,3,1,2,3,4]\nassert     extract_singly([[1,2],[1,2],[3]]) == [1,2,1,2,3]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntest_list = [[[1,2],[3,4]],[[5,6],[7,8]],[[9,10],[11,12]]]\nexpected = [1,2,3,4,5,6,7,8,9,10,11,12]\nprint(extract_singly(test_list))"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Sort the given array in ascending order\n    and then we can swap the largest elements\n    with the first element.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pancake_sort([1,3,2,4,5]) == [[1,2,3,4,5],[1,2,4,3,5],[1,4,2,3,5],[1,4,3,2,5],[1,4,3,5,2]]\nassert     pancake_sort([5,4,3,2,1]) == [[5,4,3,2,1],[1,5,4,3,2],[1,4,5,3,2],[1,4,3,5,2],[1,4,3,2,5]]\nassert     pancake_sort([5,4,3,2,1,6,8,7,10,9]) == [[5,4,3,2,1,6,8,7,10,9],[1,5,4,3,2,6,8,7,10,9],[1,4,5,3,2,6,8,7,10,9],[1,4,5,3,2,6,8,7,10,9],[1,4,5,3,2,6,8,7,10,9],[1,4,5,3,2,6,8,7,10,9],[1,4,5,3,2,6,8,7,10,9],[1,4,5,3,2,6,8,7,10,9],[1,4,5,3,2,6,8,7,10,9]]\nassert     pancake_sort([-4,-3,-2,-1,0]) == [[-4, -3, -2, -1, 0], [-4, -3, -2, 0, 1], [-4, -3, 0, -2, 1], [-4, -3, 0, 1, 2], [-4, -3, 0, 1, 2]]\nassert     pancake_sort([0]) == [[0]]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(pancake_sort([3, 5, 4, 2, 1, 0, 7])) == [4, 5, 2, 3, 1, 0, 7]\nassert pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pancake_sort2(nums):\n    '''\n    We can solve this problem in O(n) time, but we can reduce it to O(n^2)\n    by doing 2 passes of pancake sort, each with size of n/2. This is where we\n    see the problem of the pancake sort.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef pancake_sort_2(nums):\n    '''\n    A more efficient version of pancake_sort.\n\n    Take the last element as pivot.\n    Swap last element with the first element.\n    Then, move the elements in reverse order to the end.\n    And finally, swap the first element with the last element.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    nums = random.sample(range(1, 50), 10)\n    print('Original list:', nums)\n    pancake_sort(nums)\n    print('After sort:', nums)"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair([1,2,1,3,1,4],\n                        [2,1,1,3,1,4],\n                        [2,2,2,3,1,4]) == 1, \\\n    \"count_samepair('list1','list2','list3') should return 1\"\n\nassert     count_samepair([2,2,2,3,1,4],\n                        [2,1,1,3,1,4],\n                        [2,2,2,3,1,4]) == 4, \\\n    \"count_samepair('list1','list2','list3') should return 4\"\n\nassert     count_samepair([2,2,2,3,1,4],\n                        [2,1,1,3,1,4],\n                        [2,2,2,3,1,4]) == 3, \\\n    \"count_samepair('list1','list2','list3') should return 3\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nMethod2:\nUsing sets\n'''\n\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # initialize set1, set2, set3\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n    # get the set of all items, product of 3 sets\n    set_all = set1.intersection(set2,set3)\n    # count the number of items\n    return len(set_all)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_samepair([1,2,3,4,5,6,7,8,9,10], [0,9,1,2,3,4,5,6,7,8], \n    [9,1,2,3,4,5,6,7,8,10]) == 1\nassert count_samepair([1,2,3,4,5,6,7,8,9,10], [0,9,1,2,3,4,5,6,7,8], \n    [9,1,2,3,4,5,6,7,8,10]) == 3\nassert count_samepair([1,2,3,4,5,6,7,8,9,10], [0,9,1,2,3,4,5,6,7,8], \n    [9,1,2,3,4,5,6,7,8,9]) == 1\nassert count_samepair([1,2,3,4,5,6,7,8,9,10], [0,9,1,2,3,4,5,6,7,8], \n    [9,1,2,3,4,5,6,7,8,9]) == 3\nassert count_samepair([1,2,3,4,5,6,7,8,9,10], [0,9,1,2,3,4,5,6,7,8], \n    [9,1,2,3,4,5,6,7,8,9]) == 3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_samepair([1,2,3,4],[2,1,3,4],[3,2,1,4]) == 1\nassert     count_samepair([1,1,1,1],[1,2,2,2],[1,1,2,2]) == 2\nassert     count_samepair([1,2,3,4],[2,1,3,4],[3,2,1,4]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([1,2,3,4], [2,3,4,5], [3,4,5,6]) == 1, \"Count 1\"\nassert     count_samepair([1,2,3,4], [2,3,4,5], [3,4,5,6,7]) == 2, \"Count 2\"\nassert     count_samepair([1,2,3,4,5], [2,3,4,5], [3,4,5,6,7]) == 3, \"Count 3\"\nassert     count_samepair([1,2,3,4,5], [2,3,4,5], [3,4,5,6,7,8]) == 4, \"Count 4\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_samepair([1, 2, 3, 1, 3, 5], ['a', 'b', 'c', 'd', 'e', 'f'], ['z', 'y', 'x']) == 1\nassert     count_samepair([1, 2, 3, 1, 3, 5], ['a', 'b', 'c', 'd', 'e', 'f'], ['z', 'y', 'x']) == 2\nassert     count_samepair([1, 2, 3, 1, 3, 5], ['a', 'b', 'c', 'd', 'e', 'f'], ['x', 'y', 'z']) == 2\nassert     count_samepair([1, 2, 3, 1, 3, 5], ['a', 'b', 'c', 'd', 'e', 'f'], ['x', 'y', 'z']) == 0\nassert     count_samepair([1, 2, 3, 1, 3, 5], ['a', 'b', 'c', 'd', 'e', 'f'], ['y', 'z', 'a']) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair([1,1,1],[1,1,1],[1,1,1]) == 3\nassert count_samepair([1,2,2],[1,1,1],[1,1,1]) == 2\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists((1, 2, 3, 4)) == 1 \nassert     find_lists((1, 3, 5, 7)) == 2\nassert     find_lists((1, 3, 5, 7, 9, 11)) == 3\nassert     find_lists((1, 3, 5, 7, 9, 11, 13, 17)) == 4\nassert     find_lists((1, 3, 5, 7, 9, 11, 13, 17, 19, 23)) == 5\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1,)) == 1\nassert     find_lists((1, 1)) == 2\nassert     find_lists((1, 1, 1, 1)) == 4\nassert     find_lists((1, 2, 2, 3, 2, 1, 2, 2)) == 4\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists(()) == 0, \"Wrong result for the empty tuple!\"\nassert     find_lists((\"a\",\"b\",\"c\")) == 3, \"Wrong result for the tuples with only three lists!\"\nassert     find_lists((\"a\",\"b\",\"c\",\"d\")) == 3, \"Wrong result for the tuples with only three lists!\"\nassert     find_lists((\"a\",\"b\",\"c\",\"d\",\"e\")) == 4, \"Wrong result for the tuples with only three lists!\"\nassert     find_lists((\"a\",\"b\",\"c\",\"d\",\"e\",\"f\")) == 4, \"Wrong result for the tuples with only three lists!\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists(()) == 0, \"Empty Tuple\"\nassert     find_lists((1,)) == 0, \"Tuple with one element\"\nassert     find_lists((1,2)) == 1, \"Tuple with 2 elements\"\nassert     find_lists((1,2,3,4,5,6,7)) == 2, \"Tuple with 10 elements\"\nassert     find_lists((1,2,3,4,5,6,7,8,9)) == 3, \"Tuple with 10 elements\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists((('a', 'b'), 'a', (1,2), ('a', 'b'), ('a', 'b'))) == 2, 'Wrong output'\nassert     find_lists(('a', 'b', 1, 'a', 'b')) == 1, 'Wrong output'\n\nprint('All tests are passed.'"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists(('a', 'b', 'c', 'a', 'a')) == 2, \\\n        \"find_lists() returns wrong number of lists\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lists(    (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"))     ==     1, \"Correct: Number of lists should be 1.\"\nassert     find_lists(    (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"))     ==     2, \"Correct: Number of lists should be 2.\"\nassert     find_lists(    (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"k\"))     ==     3, \"Correct: Number of lists should be 3.\"\nassert     find_lists(    (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"k\",\"l\"))     ==     4, \"Correct: Number of lists should be 4.\"\nassert     find_lists(    (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"k\",\"l\",\"m\"))     ==     5, \"Correct: Number of lists should be 5.\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists(((1,2),(3,4),(5,6))) == 2, 'incorrect'\nassert     find_lists(((1,2,3),(4,5,6),(7,8))) == 1, 'incorrect'\nassert     find_lists(((1,2,3,4),(5,6,7,8),(9,10,11,12))) == 3, 'incorrect'\nassert     find_lists(((1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16),(17,18,19,20))) == 4, 'incorrect'\nassert     find_lists(((1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16),(17,18,19,20),(21,22,23,24),(25,26,27,28))) == 5, 'incorrect'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists([1,2,3]) == 1 \nassert     find_lists((1,2,3)) == 1 \nassert     find_lists((1,2,3,4)) == 1 \nassert     find_lists((1,2,3,4,5,6)) == 1 \nassert     find_lists((\"monday\",\"tuesday\",\"wednesday\")) == 1 \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert max_Abs_Diff([-3,-2,-1,0,1,2,3]) == 2\nassert max_Abs_Diff([2,3,4,5,-10,-5]) == 3\nassert max_Abs_Diff([-3,-2,-1,0,1,2,3,10]) == 3\nassert max_Abs_Diff([1,2,3,4,5,6]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_Abs_Diff([10, 22, 33, 33, 22, 11]) == 22\nassert max_Abs_Diff([-12, -22, -33, -33, -22, -11]) == 22\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_sum(arr):\n    '''\n    Write a python function to find the maximum sum of all contiguous sub-arrays in an array of size n.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [0, -4, 3, -4, -3, 0] \n    print(f\"The maximum difference is {max_Abs_Diff(arr)}\")"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Abs_Diff([1,5,3,7]) == 4\nassert max_Abs_Diff([1,5,3,7,-2]) == 6\nassert max_Abs_Diff([-3, 4, -10, -20, -2, 8, 3, 7]) == 13\nassert max_Abs_Diff([1, -1, -1, -1, -1]) == 1\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([1,2,3,4]) == 1\nassert     max_Abs_Diff([1,-2,3,4]) == 3\nassert     max_Abs_Diff([1,-2,-3,-4]) == 4\nassert     max_Abs_Diff([-1,-2,-3,-4]) == 4\nassert     max_Abs_Diff([]) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(2, 1, 3) == (1, 2)\nassert    find_solution(2, 3, 5) == (2, 2)\nassert    find_solution(2, 5, 7) == (2, 4)\nassert    find_solution(4, 3, 9) == (3, 3)\nassert    find_solution(3, 7, 11) == (3, 6)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution(1, 1, 1) == None, 'Wrong answer: {}'.format(find_solution(1, 1, 1))\nassert     find_solution(1, 2, 3) == (1, 2), 'Wrong answer: {}'.format(find_solution(1, 2, 3))\nassert     find_solution(2, 3, 5) == (2, 3), 'Wrong answer: {}'.format(find_solution(2, 3, 5))\nassert     find_solution(1, 1, 0) == None, 'Wrong answer: {}'.format(find_solution(1, 1, 0))\nassert     find_solution(-1, -2, 3) == None, 'Wrong answer: {}'.format(find_solution(-1, -2, 3))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_solution(3, 6, 8) == (3, 3), 'wrong'\nassert     find_solution(4, 5, 9) == (3, 4), 'wrong'\nassert     find_solution(3, 4, 9) == (2, 3), 'wrong'\nassert     find_solution(4, 3, 9) == None, 'wrong'\nassert     find_solution(2, 4, 9) == (1, 2), 'wrong'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_solution(2, 3, 1) == (1, 2)\nfind_solution(2, 3, 2) == (1, 1)\nfind_solution(2, 3, 5) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_solution(1, 2, 3) == (1, 2)\nassert     find_solution(1, 3, 2) == (2, 1)\nassert     find_solution(1, 2, 1) == None\n\ndef find_solution_b(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution(0,1,10) == (1, 5)\nassert     find_solution(0,2,10) == (1, 5)\nassert     find_solution(1,1,10) == (1, 5)\nassert     find_solution(1,2,10) == (1, 5)\nassert     find_solution(2,1,10) == (5, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Find solution')\nassert find_solution(1, 2, 1) == None\nassert find_solution(1, 1, 1) == (1, 1)\nassert find_solution(1, 1, 2) == (1, 2)\nassert find_solution(1, 2, 2) == (2, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_solution(a,b,n) == (x,y)\nassert     find_solution(a,b,n+1) == None\nassert     find_solution(a,b,-1) == None\nassert     find_solution(-a,b,n) == None\nassert     find_solution(a,-b,n) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_solution(3, 4, 15) == (3, 5)\nassert     find_solution(3, 4, 16) == (3, 6)\nassert     find_solution(2, 4, 9) == (2, 3)\nassert     find_solution(2, 4, 10) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlist1 = [1,2,3,4,5,6,7,8,9,10]\nlist2 = [1,2,3,4,5,6,7]\nlist2.remove(1)\nremove_elements(list1, list2)\nprint(list2)"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_elements([2,4,6,8,10,12,14,16,18], [2,4,6,8,10,12]) == [], 'Expected: []'\nassert     remove_elements([2,4,6,8,10,12,14,16,18,20], [2,4,6,8,10,12]) ==     [16,18,20], 'Expected: [16,18,20]'\nassert     remove_elements([2,4,6,8,10,12,14,16,18,20], [2,4,6,8,10,12,14]) ==     [16,18,20], 'Expected: [16,18,20]'\nassert     remove_elements([2,4,6,8,10,12,14,16,18,20], [2,4,6,8,10,12,14,16]) ==     [16,18,20], 'Expected: [16,18,20]'\nassert     remove_elements([2,4,6,8,10,12,14,16,18,20], [2,4,6,8,10,12,14,16,18,20]) ==     [], 'Expected: []'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4,5], [1,2,3]) ==     [2,3,4,5], \"2nd input argument not removed from 1st input list\"\nassert     remove_elements([], [1,2,3,4,5]) ==     [], \"Empty list not removed\"\nassert     remove_elements([1,2,3,4,5,6], [1,2,3]) ==     [], \"Input list to be removed is empty\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_elements([10,2,3,1,5],[1,3,5]) == [[10,2,3,5]]\nassert     remove_elements([2,2,2,2,2,2,2,2,2,2,2],[2]) == [[]]\nassert     remove_elements([1,2,3,4,5,6,7,8,9,10],[]) == [[1,2,3,4,5,6,7,8,9,10]]"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef divide_list(list1, list2):\n    '''\n    Write a function to divide two lists into two lists.\n    '''\n    # Your code here\n    pass\n\nassert\n\ndef get_common_elements(list1, list2):\n    '''\n    Write a function to get the common elements between the two lists.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([0,1,2,3,4,5,6,7,8,9], [5,6,7,8,9]) == [0,1,2,3,4], 'Wrong output'\nassert     remove_elements([], [1,2,3,4,5,6,7,8,9]) == [], 'Wrong output'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,2,3,4,5], [3,5]) == [1,2]\nassert     remove_elements([1,2,3,4,5], [4,5]) == [1,2,3]\nassert     remove_elements([1,2,3,4,5], [1,4]) == [2,3,5]\nassert     remove_elements([], [1,2]) == []\nassert     remove_elements([2], []) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements([], []) == None, \"remove_elements_test 1\"\nassert     remove_elements([1], []) == None, \"remove_elements_test 2\"\nassert     remove_elements([], [1]) == None, \"remove_elements_test 3\"\nassert     remove_elements([2], []) == None, \"remove_elements_test 4\"\nassert     remove_elements([1,2,3], [3]) == None, \"remove_elements_test 5\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements([0, 1, 2], []) == []\nassert     remove_elements([], [0, 1, 2]) == []\nassert     remove_elements([0, 1, 2], [1, 2]) == [0]\nassert     remove_elements([1, 2, 3], [1, 2, 3]) == []\nassert     remove_elements([1, 2, 3], [1, 2]) == [1, 3]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_series(2) == 1\nassert     sum_series(5) == 12\nassert     sum_series(4) == 11\nassert     sum_series(100) == 246828484590\nassert     sum_series(0) == 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_series(7) == 21\nassert     sum_series(1) == 1\nassert     sum_series(1) == 1\nassert     sum_series(0) == 0\nassert     sum_series(2) == 2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_series(6) == 4\nassert     sum_series(8) == 13\nassert     sum_series(10) == 33\nassert     sum_series(100) == 5733\nassert     sum_series(9999) == 80701389048"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_series(5) == 7\nassert sum_series(8) == 44\nassert sum_series(1) == 1\nassert sum_series(0) == 0\nassert sum_series(-1) == 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsum_series(1) == 1\nassert \nsum_series(2) == 2\nassert \nsum_series(3) == 3\nassert \nsum_series(4) == 3\nassert \nsum_series(5) == 5\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_series(2) == 2\nassert sum_series(3) == 2 + 1\nassert sum_series(4) == 2 + 1 + 3\nassert sum_series(5) == 2 + 1 + 3 + 5\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('\\n')\nprint(sum_series(5))\nprint(sum_series(10))\nprint(sum_series(20))\nprint(sum_series(40))"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_series(1) == 0, \"The sum is 0\"\nassert     sum_series(2) == 0, \"The sum is 0\"\nassert     sum_series(5) == 5, \"The sum is 5\"\nassert     sum_series(10) == 55, \"The sum is 55\"\nassert     sum_series(20) == 66, \"The sum is 66\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_series(0) == 0, 'the result of 0 +... + 0 is wrong'\nassert     sum_series(1) == 0, 'the result of 0 +... + 1 is wrong'\nassert     sum_series(5) == 4, 'the result of 0 +... + 5 is wrong'\nassert     sum_series(5) == 4, 'the result of 0 +... + 5 is wrong'\nassert     sum_series(10) == 33, 'the result of 0 +... + 10 is wrong'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_series(8) == 26\nassert     sum_series(4) == 8\nassert     sum_series(0) == 0\nassert     sum_series(1) == 1\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     area_polygon(3, 4) == 1\nassert area_polygon(5, 12) == 78.5\nassert area_polygon(6, 8) == 28.0\nassert area_polygon(10, 4) == 244.0\nassert area_polygon(10, 8) == 252.0\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_hypotenuse(s1, s2, s3):\n    '''\n    Write a function to find the hypotenuse of a triangle given its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (area_polygon(3, 4) == 12), 'area_polygon is not correct'\nassert     (area_polygon(5, 4) == 20), 'area_polygon is not correct'\nassert     (area_polygon(10, 8) == 2 * pi), 'area_polygon is not correct'\nassert     (area_polygon(12, 8) == pi), 'area_polygon is not correct'\nassert     (area_polygon(16, 10) == pi), 'area_polygon is not correct'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_polygon(4, 5) == 50\n\ndef radius_of_circumcircle(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function to calculate the radius of the circumcircle of a triangle given three vertices.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     area_polygon(3, 1) == 1\nassert area_polygon(4, 3) == 4\nassert area_polygon(3, 5) == 8.5\nassert area_polygon(2, 2) == 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(area_polygon(4, 3)) == 12\nprint(area_polygon(6, 3)) == 24\nprint(area_polygon(10, 3)) == 60\nprint(area_polygon(12, 4)) == 144\nprint(area_polygon(10, 6)) == 220\nprint(area_polygon(5, 6)) == 20\nprint(area_polygon(1, 1)) == 1\nprint(area_polygon(7, 8)) == 9\nprint(area_polygon(3, 1)) == 3\n\ndef area_rectangle(w, h):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     area_polygon(3, 3) == 3 * tan(pi/3) * 4\nassert     area_polygon(2, 5) == 5 * tan(pi/5) * 4\nassert     area_polygon(8, 5) == 5 * tan(pi/5) * 8\nassert     area_polygon(5, 5) == 5 * tan(pi/5) * 4\nassert     area_polygon(10, 8) == 8 * tan(pi/5) * 5\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     area_polygon(1,2) == 2\nassert     area_polygon(3,4) == 8\nassert     area_polygon(10,10) == 50\nassert     area_polygon(1,1) == 0\nassert     area_polygon(1,2) == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     div_sum(12) == True\nassert     div_sum(20) == False\nassert     div_sum(35) == True\nassert     div_sum(40) == True\nassert     div_sum(75) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     div_sum(8) == False, 'Should be False.'\nassert     div_sum(15) == True, 'Should be True.'\nassert     div_sum(21) == False, 'Should be False.'\nassert     div_sum(9) == True, 'Should be True.'\nassert     div_sum(6) == False, 'Should be False.'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     div_sum(10) == True, \"Wrong\"\nassert     div_sum(12) == False, \"Wrong\"\nassert     div_sum(20) == True, \"Wrong\"\nassert     div_sum(3) == True, \"Wrong\"\nassert     div_sum(5) == True, \"Wrong\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef div_list(n): \n    '''\n    Write a program to find the list of all the divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef div_sum_iterative(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert div_sum(2) == False\nassert div_sum(3) == True\nassert div_sum(18) == True\nassert div_sum(39) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     div_sum(10) == True, 'Wrong output (10)'\nassert     div_sum(100) == True, 'Wrong output (100)'\nassert     div_sum(100) == False, 'Wrong output (100)'\nassert     div_sum(20) == False, 'Wrong output (20)'\nassert     div_sum(15) == True, 'Wrong output (15)'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndiv_sum(0) == True\ndiv_sum(2) == True\ndiv_sum(12) == False\ndiv_sum(13) == False\ndiv_sum(6) == True\ndiv_sum(22) == True\ndiv_sum(17) == False\ndiv_sum(64) == True\ndiv_sum(91) == True\ndiv_sum(30) == False\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_char_position('') == 0, \"Empty string\"\nassert     count_char_position('a') == 1, \"One 'a'\"\nassert     count_char_position('aa') == 2, \"Two 'a'\"\nassert     count_char_position('aaa') == 3, \"Three 'a'\"\nassert     count_char_position('aaaa') == 4, \"Four 'a'\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncount_char_position(\"The quick brown fox jumps over the lazy dog.\") == \"6\"\ncount_char_position(\"The rain in spain\") == \"4\"\ncount_char_position(\"The quick brown fox jumps\") == \"0\"\n\ndef count_char_position2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_char_position_v2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_char_position(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 10\n\ndef count_char_position_with_dict(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_char_position('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    count_char_position('banana') == '2'\nassert \n    count_char_position('saba') == '3'\nassert\n    count_char_position('a') == '1'\nassert\n    count_char_position('AAA') == '3'\nassert\n    count_char_position('banana') == '2'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_char_position('a') == 0\nassert     count_char_position('ab') == 0\nassert     count_char_position('abc') == 0\nassert     count_char_position('abcde') == 0\nassert     count_char_position('abcabcabc') == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nA = list(map(int,input().split()))\n\nprint(find_even_pair(A)"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_even_pair([3,1,3,2,1]) == 2\nassert     find_even_pair([1,2,3,4,5]) == 0\nassert     find_even_pair([1,3,1,3,1]) == 2\n\ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_even_pair([4, 1, 5, 6, 2, 1]) == 2\nassert     find_even_pair([1, 2, 3, 3, 2]) == 0\nassert     find_even_pair([1, 2, 3, 4, 4]) == 1\nassert     find_even_pair([1, 4, 2, 3, 6, 5, 4]) == 3\nassert     find_even_pair([1, 2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('Test case: ', find_even_pair([0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1])) # 0 and 3\nprint('Test case: ', find_even_pair([0, 1, 1, 1, 1, 1])) # 0 and 2\nprint('Test case: ', find_even_pair([0, 0, 0, 1])) # 1\nprint('Test case: ', find_even_pair([0, 1])) # 2\nprint('Test case: ', find_even_pair([1])) # 1\nprint('Test case: ', find_even_pair([0, 2])) # 0\nprint('Test case: ', find_even_pair([3, 4, 5])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6])) # 1\nprint('Test case: ', find_even_pair([1, 3, 5])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6])) # 1\nprint('Test case: ', find_even_pair([1, 3, 5, 7, 9])) # 2\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9])) # 3\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])) # 2\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) # 2\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])) # 2\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])) # 2\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])) # 1\nprint('Test case: ', find_even_pair([1, 2, 3, 4, 5, 6, 7, "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(find_even_pair([1,4,7,9]))\nassert find_even_pair([2,4,6,8]) == 4\nassert find_even_pair([3,6,9,12]) == 0\nprint(\"You passed the test\")\nprint()"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_even_pair([1,2,3,4,5]) == 0, 'incorrect output'\nassert find_even_pair([1,2,3,4,6]) == 2, 'incorrect output'\nassert find_even_pair([1,2,3,4,7]) == 2, 'incorrect output'\nassert find_even_pair([1,2,3,4,10]) == 3, 'incorrect output'\nassert find_even_pair([1,2,3,4,15]) == 4, 'incorrect output'\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_power_of_2(5)     ==    2\nassert     next_power_of_2(1)     ==    1\nassert     next_power_of_2(3)     ==    2\nassert     next_power_of_2(10)     ==    2\nassert     next_power_of_2(14)     ==    2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_power_of_2(7)    == 8\nassert     next_power_of_2(9)    == 16\nassert     next_power_of_2(11)    == 16\nassert     next_power_of_2(17)    == 32\nassert     next_power_of_2(19)    == 32\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(16) == 4\nassert     next_power_of_2(32) == 8\n\ndef next_power_of_2_naive(n):\n    '''\n    Naive method to compute next power of 2\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_power_of_2(5) == 2\nassert     next_power_of_2(6) == 3\nassert     next_power_of_2(7) == 4\nassert     next_power_of_2(8) == 5\nassert     next_power_of_2(9) == 6\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(4) == 4\nassert     next_power_of_2(7) == 8\nassert     next_power_of_2(9) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 2\nassert     next_power_of_2(2) == 4\nassert     next_power_of_2(3) == 8\nassert     next_power_of_2(4) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(0)    == 1\nassert     next_power_of_2(1)    == 1\nassert     next_power_of_2(2)    == 2\nassert     next_power_of_2(3)    == 2\nassert     next_power_of_2(4)    == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_power_of_2(3) == 4\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(5) == 8\nassert     next_power_of_2(6) == 16\nassert     next_power_of_2(7) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_power_of_2(4) == 8\nassert     next_power_of_2(15) == 32\nassert     next_power_of_2(16) == 64\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_power_of_2(0) == 1, \"Correctness 1\"\nassert     next_power_of_2(1) == 1, \"Correctness 2\"\nassert     next_power_of_2(2) == 2, \"Correctness 3\"\nassert     next_power_of_2(3) == 4, \"Correctness 4\"\nassert     next_power_of_2(4) == 8, \"Correctness 5\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert frequency([2, 2, 2, 2, 2, 2, 2, 2, 2], 2) == 6\nassert frequency([2, 2, 2, 2, 2, 2, 2, 2, 2], 8) == 0\nassert frequency([1,2,2,2,2,2,2,2], 2) == 7\nassert frequency([1,2,2,2,2,2,2,2], 5) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency([1,2,3,3,3],3)== 3, \"Wrong result\"\nassert     frequency([1,1,1,2,2,2,3,3,3,3],3) == 6, \"Wrong result\"\nassert     frequency([1,1,1,2,2,2,3,3,3,3],3) == 6, \"Wrong result\"\nassert     frequency([1,1,1,2,2,2,3,3,3,3],-1) == 0, \"Wrong result\"\nassert     frequency([1,1,1,2,2,2,3,3,3,3],0) == 0, \"Wrong result\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency([4,5,3,1,2,5,5,5,4],5)==2\nassert     frequency([4,5,3,1,2,5,5,5,4],2)==1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency([1,2,3,4,1,2,3,4,1,2,3,4],1) == 3, 'Should return 3'\nassert     frequency([1,2,3,4,1,2,3,4,1,2,3,4],2) == 2, 'Should return 2'\nassert     frequency([1,2,3,4,1,2,3,4,1,2,3,4],4) == 1, 'Should return 1'\nassert     frequency([1,2,3,4,1,2,3,4,1,2,3,4],3) == 0, 'Should return 0'\nassert     frequency([],0) == 0, 'Should return 0'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency([4,2,1,2],1) == 1, \"frequency() test #1: failed\"\nassert     frequency([1,2,3,3,3,3,4,4,4,4,5,5,5,5,5,5], 5) == 6, \"frequency() test #2: failed\"\nassert     frequency([1,2,3,3,3,3,4,4,4,4,5,5,5,5,5,5], 0) == 0, \"frequency() test #3: failed\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([1,1,1,1,1,2,2,2,2,2,2,3,4,4,4,4,4,4,5,6], 5) == 7\nassert     frequency([1,1,1,1,1,2,2,2,2,2,2,3,4,4,4,4,4,4,5,6], 1) == 1\n\ndef frequency_counter(a):\n    '''\n    Write a function to count the frequency of each element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_of_digits(n):\n    '''\n    Write a function to calculate the sum of the digits in a given number\n    '''\n    pass\n\ndef sum_of_digits2(n):\n    '''\n    Write a function to calculate the sum of the digits in a given number\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency([1,2,3,4,5], 1) == 1\nassert     frequency([1,2,3,4,5], 2) == 1\nassert     frequency([1,2,3,4,5], 3) == 1\nassert     frequency([1,2,3,4,5], 4) == 1\nassert     frequency([1,2,3,4,5], 5) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # frequency(list_1, 7) == 1\n    # frequency(list_1, 6) == 2\n    # frequency(list_1, 9) == 0\n    # frequency(list_2, 7) == 0\n    # frequency(list_3, 7) == 1\n    # frequency(list_4, 7) == 1\n    # frequency(list_5, 7) == 1\n    # frequency(list_6, 7) == 1\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 5) == 2\n    # frequency(list_6, 6) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 10) == 2\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 5) == 1\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 2\n    # frequency(list_6, 5) == 2\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 9) == 2\n    # frequency(list_6, 6) == 1\n    # frequency(list_6, 2) == 1\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 2\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 5) == 2\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 5) == 1\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 9) == 2\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 5) == 1\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 5) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 5) == 2\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 5) == 2\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 5) == 1\n    # frequency(list_6, 6) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 5) == 1\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 5) == 1\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 5) == 1\n    # frequency(list_6, 3) == 0\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, 2) == 2\n    # frequency(list_6, 4) == 1\n    # frequency(list_6, 11) == 1\n    # frequency(list_6, 7) == 2\n    # frequency(list_6, 10) == 1\n    # frequency(list_6, 1) == 1\n    # frequency(list_6, 8) == 1\n    # frequency(list_6, 9) == 1\n    # frequency(list_6, 6) == 2\n    # frequency(list_6, "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 1, 2) == 7\nassert     sum_range_list([1, 2, 3, 4], 1, 3) == 6\nassert     sum_range_list([1, 2, 3, 4], 2, 4) == 10\nassert     sum_range_list([1, 2, 3, 4], 1, 4) == 10\nassert     sum_range_list([1, 2, 3, 4], 0, 4) == 10\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_range_list([1,2,3,4,5], 1, 4) == 15\nassert     sum_range_list([1,2,3,4,5], 2, 5) == 10\nassert     sum_range_list([1,2,3,4,5], 1, 5) == 15\nassert     sum_range_list([1,2,3,4,5], 0, 4) == 15\nassert     sum_range_list([1,2,3,4,5], -5, -1) == 15\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    sum_range_list([1, 2, 3, 4], 0, 2) == 6\n    sum_range_list([1, 2, 3, 4], 1, 3) == 10\n    sum_range_list([1, 2, 3, 4], 2, 3) == 8\n    sum_range_list([1, 2, 3, 4], 3, 3) == 4\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 0, 2) == 6\nassert     sum_range_list([1, 2, 3, 4], 1, 4) == 8\nassert     sum_range_list([1, 2, 3, 4], 1, 5) == 4\nassert     sum_range_list([1, 2, 3, 4], 0, 1) == 3\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_range_list([1,2,3,4,5,6],1,5)== 15\nassert     sum_range_list([1,2,3,4,5,6],0,2)== 10\nassert     sum_range_list([1,2,3,4,5,6],2,3)== 8\nassert     sum_range_list([1,2,3,4,5,6],3,4)== 8\nassert     sum_range_list([1,2,3,4,5,6],4,5)== 5\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('\\n\\n\\t\\t\\t\\tTest Case: sum_range_list')\nlist1 = [2, 2, 2, 2, 2, 2, 2, 2]\nm = 0\nn = 2\nsum_range_list(list1, m, n) == 8\nassert \nprint('passed\\n')"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_range_list([\"h\", \"e\", \"l\", \"l\", \"o\"], 0, 4) == 9, \"incorrect\"\nassert     sum_range_list([\"h\", \"e\", \"l\", \"l\", \"o\"], 2, 4) == 11, \"incorrect\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_range_list([5, 3, 1, 2, 6, 7, 8, 2], 1, 8) == 23, \"Should be 23\"\nassert     sum_range_list([5, 3, 1, 2, 6, 7, 8, 2], 5, 9) == 21, \"Should be 21\"\nassert     sum_range_list([5, 3, 1, 2, 6, 7, 8, 2], 8, 10) == 24, \"Should be 24\"\nassert     sum_range_list([5, 3, 1, 2, 6, 7, 8, 2], 5, 0) == 0, \"Should be 0\""
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(3) == 5\nassert     perimeter_pentagon(5) == 12\nassert     perimeter_pentagon(8) == 20\nassert     perimeter_pentagon(10) == 24\n\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its side.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(2) == 5, \"Wrong answer\"\nassert     perimeter_pentagon(3) == 7, \"Wrong answer\"\nassert     perimeter_pentagon(4) == 10, \"Wrong answer\"\nassert     perimeter_pentagon(5) == 12, \"Wrong answer\"\nassert     perimeter_pentagon(6) == 15, \"Wrong answer\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('')\nprint('------------------------------------------------')\nprint('Testing: perimeter_pentagon')\nprint('------------------------------------------------')\nprint('')\nprint(perimeter_pentagon(5))\nprint('')\nprint('')\nprint('')\n\n'''"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(10) == 15\nassert     perimeter_pentagon(12) == 22\nassert     perimeter_pentagon(20) == 40\nassert     perimeter_pentagon(0) == 0\nassert     perimeter_pentagon(-10) == 0\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     isinstance(perimeter_pentagon(1), float)\nassert isinstance(perimeter_pentagon(2), float)\nassert isinstance(perimeter_pentagon(3), float)\nassert isinstance(perimeter_pentagon(4), float)\nassert isinstance(perimeter_pentagon(5), float)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    \n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle with a radius\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n4\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n'''\ndef diameter_pentagon(a):\n    '''\n    Write a function to find the diameter of a regular pentagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(5) == 10\nassert     perimeter_pentagon(6) == 20\nassert     perimeter_pentagon(7) == 26\nassert     perimeter_pentagon(8) == 32\nassert     perimeter_pentagon(9) == 38\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance('asdassdasdas') == 2\n\nassert count_occurance('asdassdasdas') == 2\n\nassert count_occurance('asdasdassdas') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance(\"abcabdabcabc\") == 3, 'incorrect'\nassert     count_occurance(\"asdfgadsfadsfdfdf\") == 0, 'incorrect'\nassert     count_occurance(\"djsfdsfdsfdsfasfds\") == 0, 'incorrect'\n\ndef count_occurance_2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    lst = []\n    for i in range(len(s)):\n        if s[i] =='s':\n            lst.append(i)\n    return len(lst)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_occurance('a') == 0\nassert count_occurance('b') == 1\nassert count_occurance('ab') == 1\nassert count_occurance('abcd') == 4\nassert count_occurance('abcdabc') == 6\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef solution(a, b):\n    '''\n    Write a function to convert a string into a number. \n    Return the number converted to the position of decimal, e.g. 1.234567898765432 becomes the string 1234567898765432. \n    This means that if 1.234567898765432 is the string to be converted, \n    then solution(1.234567898765432, 1.234) should return 1234567898765432.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_occurance('test') == 1\nassert     count_occurance('testest') == 2\nassert     count_occurance('testesttest') == 3\nassert     count_occurance('ttttest') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance('std') == 2, 'Please check your code'\nassert     count_occurance('oppg') == 0, 'Please check your code'\nassert     count_occurance('abc') == 0, 'Please check your code'\nassert     count_occurance('stddd') == 3, 'Please check your code'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_occurance('banana') == 3\nassert count_occurance('12345') == 5\nassert count_occurance('aktyuyu') == 4\nassert count_occurance('bananak') == 5\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_occurance(\"This is a string\") == 2\nassert \ncount_occurance(\"This is another string\") == 1\nassert \ncount_occurance(\"This is a string that repeats twice\") == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_occurance('abcd') == 2\nassert     count_occurance('abc') == 1\nassert     count_occurance('abcd') == 0\nassert     count_occurance('abcds') == 2\nassert     count_occurance('abcde') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance('std') == 2\n\nassert count_occurance('aasdasd') == 0\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_type((1, 2.0, \"hi\", 1.0, 1.0)) == True, \"The tuple contains a different data type\"\nassert     check_type((1, 2, 3, 4, 5)) == False, \"The tuple contains only numbers\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type((1, 1,'str','str'))     == True\nassert     check_type((1, 1, 2,'str'))     == False\nassert     check_type((1, 1, 2, 0))     == False\nassert     check_type((1, 1, 2, 1))     == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type(('str', 3,'str', True)) == True\nassert     check_type(('str', 3,'str', False)) == True\nassert     check_type((1, 2, 3, 4)) == False\nassert     check_type((1, '2', 3, '4')) == False\nassert     check_type((1, '2', '3', '4')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type((10, 20, 10, 20)) == True, \"Only integers\"\nassert check_type((10.0, 20.0, 10.0, 20.0)) == False, \"Only integers\"\nassert check_type((1, 2.0, 3, 4)) == False, \"Only integers\""
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((1,2,3,4,\"a\",5)) == False\nassert     check_type((1,2,3,4,\"a\",5,6,7)) == True\nassert     check_type((1,\"a\",5,\"b\",7)) == False\nassert     check_type((1,\"a\",5,\"b\",7,8)) == False\nassert     check_type((1,\"a\",5,\"b\",7,8,9)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type((1, 2, 3, 4, 5)) == True, \"First tuple should have same data type\"\nassert     check_type((1, 2, \"Hello\", 4, 5)) == False, \"Second tuple should have different data type\"\nassert     check_type((1, 2, True, 4, 5)) == False, \"Third tuple should have different data type\"\n\ndef check_type_and_data(test_tuple):\n    '''\n    Write a function to check if tuple has at least one element which is int or float.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_value(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple are of same value or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type((1,2,'a','b','c')) == False\nassert     check_type(('a','b','c')) == True\nassert     check_type([1,2,'a','b','c']) == False\nassert     check_type((1,2,3,4)) == True\n\ndef get_nested_key(test_dict, nested_key):\n    '''\n    Write a function to get the value of a nested key.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_majority([1,1,2,3,4,5,6,7,7], 4, 7) == False\nassert     is_majority([1,1,2,3,4,5,6,7,7], 7, 7) == True\nassert     is_majority([1,1,2,3,4,5,6,7,7], 4, 5) == False\nassert     is_majority([1,1,2,3,4,5,6,7,7], 5, 7) == False\nassert     is_majority([1,1,2,3,4,5,6,7,7], 4, 6) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_majority([3,2,3], 4, 3) == False\nassert is_majority([3,2,3], 4, 2) == True\nassert is_majority([1,2,2,3,4], 3, 3) == False\nassert is_majority([1,2,2,3,4], 3, 2) == True\nassert is_majority([1,2,2,3,4], 2, 3) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nis_majority(\n    [1, 2, 3, 4, 5, 5, 5, 6, 7, 7, 7], \n    9, 7)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_majority([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8], 6, 3) == True\nassert     is_majority([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8], 6, 6) == True\nassert     is_majority([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8], 5, 6) == False\n\ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(11) == 4\nassert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(9) == 3\nassert     count_Set_Bits(10) == 2\n\n\ndef power_Set_Bits(n): \n    '''\n    Write a python function to check if the given number is power of 2.\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Set_Bits(9) == 5, '9 = 0001'\nassert     count_Set_Bits(9) == 1, '9 = 0001'\nassert     count_Set_Bits(0) == 0, '0 = 0000'\nassert     count_Set_Bits(1) == 0, '1 = 0000'\nassert     count_Set_Bits(99) == 6, '99 = 1101'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_Set_Bits(15) == 1\ncount_Set_Bits(64) == 3\ncount_Set_Bits(3) == 0\ncount_Set_Bits(0) == 0\ncount_Set_Bits(15) == 1\ncount_Set_Bits(63) == 1\ncount_Set_Bits(2047) == 1\ncount_Set_Bits(15) == 1\ncount_Set_Bits(2048) == 1\ncount_Set_Bits(2048) == 1\ncount_Set_Bits(2048) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits(2147483648) == 1\ncount_Set_Bits("
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Set_Bits(2) == 0, \"Testcase 1 Failed\"\nassert count_Set_Bits(5) == 1, \"Testcase 1 Failed\"\nassert count_Set_Bits(7) == 1, \"Testcase 1 Failed\"\nassert count_Set_Bits(11) == 2, \"Testcase 1 Failed\"\nassert count_Set_Bits(15) == 3, \"Testcase 1 Failed\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(7) == 0, \"Test 1: 7 should be 0\"\nassert     count_Set_Bits(13) == 2, \"Test 2: 13 should be 2\"\nassert     count_Set_Bits(10) == 1, \"Test 3: 10 should be 1\"\nassert     count_Set_Bits(100) == 1, \"Test 4: 100 should be 1\"\nassert     count_Set_Bits(256) == 1, \"Test 5: 256 should be 1\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(13) == 1\nassert count_Set_Bits(12) == 2\nassert count_Set_Bits(77) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncount_Set_Bits(13) == 3\n\ncount_Set_Bits(11) == 2\n\ncount_Set_Bits(5) == 1\n\ncount_Set_Bits(7) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    count_Set_Bits(10) == 2\n    count_Set_Bits(13) == 2\n    count_Set_Bits(14) == 3\n    count_Set_Bits(15) == 3\n    count_Set_Bits(16) == 4\n    count_Set_Bits(17) == 4\n    count_Set_Bits(18) == 5\n    count_Set_Bits(19) == 5\n    count_Set_Bits(20) == 6\n    count_Set_Bits(21) == 6\n    count_Set_Bits(22) == 7\n    count_Set_Bits(23) == 7\n    count_Set_Bits(24) == 8\n    count_Set_Bits(25) == 8\n    count_Set_Bits(26) == 9\n    count_Set_Bits(27) == 9\n    count_Set_Bits(28) == 10\n    count_Set_Bits(29) == 10\n    count_Set_Bits(30) == 11\n    count_Set_Bits(31) == 11\n    count_Set_Bits(32) == 12\n    count_Set_Bits(33) == 12\n    count_Set_Bits(34) == 13\n    count_Set_Bits(35) == 13\n    count_Set_Bits(36) == 14\n    count_Set_Bits(37) == 14\n    count_Set_Bits(38) == 15\n    count_Set_Bits(39) == 15\n    count_Set_Bits(40) == 16\n    count_Set_Bits(41) == 16\n    count_Set_Bits(42) == 17\n    count_Set_Bits(43) == 17\n    count_Set_Bits(44) == 18\n    count_Set_Bits(45) == 18\n    count_Set_Bits(46) == 19\n    count_Set_Bits(47) == 19\n    count_Set_Bits(48) == 20\n    count_Set_Bits(49) == 20\n    count_Set_Bits(50) == 21\n    count_Set_Bits(51) == 21\n    count_Set_Bits(52) == 22\n    count_Set_Bits(53) == 22\n    count_Set_Bits(54) == 23\n    count_Set_Bits(55) == 23\n    count_Set_Bits(56) == 24\n    count_Set_Bits(57) == 24\n    count_Set_Bits(58) == 25\n    count_Set_Bits(59) == 25\n    count_Set_Bits(60) == 26\n    count_Set_Bits(61) == 26\n    count_Set_Bits(62) == 27\n    count_Set_Bits(63) == 27\n    count_Set_Bits(64) == 28\n    count_Set_Bits(65) == 28\n    count_Set_Bits(66) == 29\n    count_Set_Bits(67) == 29\n    count_Set_Bits(68) == 30\n    count_Set_Bits(69) == 30\n    count_Set_Bits(70) == 31\n    count_Set_Bits(71) == 31\n    count_Set_Bits(72) == 32\n    count_Set_Bits(73) == 32\n    count_Set_Bits(74) == 33\n    count_Set_Bits(75) == 33\n    count_Set_Bits(76) == 34\n    count_Set_Bits(77) == 34\n    count_Set_Bits(78) == 35\n    count_Set_Bits(79) == 35\n    count_Set_Bits(80) == 36\n    count_Set_Bits(81) == 36\n    count_Set_Bits(82) == 37\n    count_Set_Bits(83) == 37\n    count_Set_Bits(84) == 38\n    count_Set_Bits(85) == 38\n    count_Set_Bits(86) == 39\n    count_Set_Bits(87) == 39\n    count_Set_Bits(88) == 40\n    count_Set_Bits(89) == 40\n    count_Set_Bits(90) == 41\n    count_Set_Bits(91) == 41\n    count_Set_Bits(92) == 42\n    count_Set_Bits(93) == 42\n    count_Set_Bits(94) == 43\n    count_Set_Bits(95) == 43\n    count_Set_Bits(96) == 44\n    count_Set_Bits(97) == 44\n    count_Set_Bits(98) == 45\n    count_Set_Bits(99) == 45\n    count_Set_Bits(100) == 46\n    count_Set_Bits(101) == 46\n    count_Set_Bits(102) == 47\n    count_Set_Bits(103) == 47\n    count_Set_Bits(104) == 48\n    count_Set_Bits(105) == 48\n    count_Set_Bits(106) == 49\n    count_Set_Bits(107) == 49\n    count_Set_Bits(108) == 50\n    count_Set_Bits(109) == 50\n    count_Set_Bits(110) == 51\n    count_Set_Bits(111) == 51\n    count_Set_Bits(112) == 52\n    count_Set_Bits(113) == 52\n    count_Set_Bits(114) == 53\n    count_Set_Bits(115) == 53\n    count_Set_Bits(116) == 54\n    count_Set_Bits(117) == 54\n    count_Set_Bits(118) == 55\n    count_Set_Bits(119) == 55\n    count_Set_Bits(120) == 56\n    count_Set_Bits(121) == 56\n    count_Set_Bits(122) == 57\n    count_Set_Bits(123) == 57\n    count_Set_Bits(124) == 58\n    count_Set_Bits(125) == 58\n    count_Set_Bits(126) == 59\n    count_Set_Bits(127) == 59\n    count_Set_Bits(128) == 60\n    count_Set_Bits(129) == 60\n    count_Set_Bits(130) == 61\n    count_Set_Bits(131) == 61\n    count_Set_Bits(132) == 62\n    count_Set_Bits(133) == 62\n    count_Set_Bits(134) == 63\n    count_Set_Bits(135) == 63\n    count_Set_Bits(136) == 64\n    count_Set_Bits(137) == 64\n    count_Set_Bits(138) == 65\n    count_Set_Bits(139) == 65\n    count_Set_Bits(140) == 66\n    count_Set_Bits(141) == 66\n    count_Set_Bits(142) == 67\n    count_Set_Bits(143) == 67\n    count_Set_Bits(144) == 68\n    count_Set_Bits(145) == 68\n    count_Set_Bits(146) == 69\n    count_Set_Bits(147) == 69\n    count_Set_Bits(148) == 70\n    count_Set_Bits(149) == 70\n    count_Set_Bits(150) == 71\n    count_Set_Bits(151) == 71\n    count_Set_Bits(152) == 72\n    count_Set_Bits(153) == 72\n    count_Set_Bits(154) == 73\n    count_Set_Bits(155) == 73\n    count_Set_Bits(156) == 74\n    count_Set_Bits(157) == 74\n    count_Set_Bits(158) == 75\n    count_Set_Bits(159) == 75\n    count_Set_Bits(160) == 76\n    count_Set_Bits(161) == 76\n    count_Set_Bits(162) == 77\n    count_Set_Bits(163) == 77\n    count_Set_Bits"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\ncount_Set_Bits:')\nprint(count_Set_Bits(2**7))\nprint(count_Set_Bits(2**8))\nprint(count_Set_Bits(2**15))\nprint(count_Set_Bits(2**16))\nprint(count_Set_Bits(2**31))"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint (count_Set_Bits(10))\nprint (count_Set_Bits(14))\nprint (count_Set_Bits(7))\n\ndef count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_values_string('Python is a very powerful programming language') == \"Python\"\nassert odd_values_string('abc123') == \"bcd\"\nassert odd_values_string('The quick brown fox jumps over the lazy dog') == \"abc\"\n\ndef word_counter_1(str):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    pass"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string(\"abcd\") == \"abcd\", \"Expected: abcd, Actual: abcd\"\nassert     odd_values_string(\"abc\") == \"abc\", \"Expected: abc, Actual: abc\"\nassert     odd_values_string(\"abbc\") == \"bbc\", \"Expected: bbc, Actual: bbc\"\nassert     odd_values_string(\"a\") == \"a\", \"Expected: a, Actual: a\"\nassert     odd_values_string(\"\") == \"\", \"Expected: empty string, Actual: empty string\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string(\"sunday\") == \"ystu\"\nassert     odd_values_string(\"sundayy\") == \"sunday\"\nassert     odd_values_string(\"day\") == \"day\"\n\nprint(\"check the correctness of odd_values_string:\", \"pass\" if\n    odd_values_string(\"sundayy\") == \"sunday\" else \"fail\")\nprint(\"check the correctness of odd_values_string:\", \"pass\" if\n    odd_values_string(\"dayy\") == \"day\" else \"fail\")\nprint(\"check the correctness of odd_values_string:\", \"pass\" if\n    odd_values_string(\"\") == \"\" else \"fail\")"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string(\"A\") == \"A\"\nassert     odd_values_string(\"B\") == \"B\"\nassert     odd_values_string(\"C\") == \"C\"\nassert     odd_values_string(\"D\") == \"D\"\nassert     odd_values_string(\"F\") == \"F\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string('shivam') =='sh', 'Test 1 Failed'\nassert     odd_values_string('praveen') == 'pr', 'Test 2 Failed'\nassert     odd_values_string('hello') == 'h', 'Test 3 Failed'\nassert     odd_values_string('a') == 'a', 'Test 4 Failed'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string('abracadabra') == 'bra'\nassert odd_values_string('abracadabra') == 'bra'\nassert odd_values_string('abracadabra') == 'bra'\nassert odd_values_string('abracadabra') == 'bra'\nassert odd_values_string('abracadabra') == 'bra'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_values_string('aabcd') == 'abc'\nassert     odd_values_string('abc') == 'abc'\nassert     odd_values_string('abcde') == 'abcde'\nassert     odd_values_string('aabc') == 'aabc'\nassert     odd_values_string('aab') == 'aab'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string('Py') == 'yP'\nassert     odd_values_string('aab') == 'ab'\nassert     odd_values_string('aaa') == 'aa'\nassert     odd_values_string('ab') == ''\n\ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # your code here\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string(\"abcd\") == \"bc\"\nassert odd_values_string(\"a\") == \"a\"\nassert odd_values_string(\"aaab\") == \"aba\"\nassert odd_values_string(\"aba\") == \"\"\nassert odd_values_string(\"\") == \"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_values_string('Hello World') == 'Heo World'\nassert     odd_values_string('Hello World') == 'Helo World'\nassert     odd_values_string('Hello World') == 'Hlw'\nassert     odd_values_string('Hello World') == 'hEl'\nassert     odd_values_string('Hello World') == 'He'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_of_three(2,3,4) == 2 \nassert     min_of_three(-1,1,0) == -1\nassert     min_of_three(0,1,0) == 1\nassert     min_of_three(-1,-1,1) == -"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(-4,3,-2) == -2\nassert     min_of_three(-4,-3,-2) == -4\nassert     min_of_three(9,9,9) == 9\nassert     min_of_three(6,6,6) == 6\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nProblem:\nWrite a function to find the second smallest number of the list.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an integer N denoting the size of the list. Then next line contains N space separated numbers.\n\nOutput:\nFor each test case, print the second smallest number.\n\nConstraints:\n1 <= T <= 100\n1 <= N <= 106\n1 <= A[i] <= 106\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(2,6,7) == 2, 'Your code is wrong.'\nassert     min_of_three(1,1,1) == 1, 'Your code is wrong.'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(1, 2, 3) == 1\nassert     min_of_three(1, 2, 2) == 2\nassert     min_of_three(1, 1, 1) == 1\nassert     min_of_three(1, 1, 2) == 1\nassert     min_of_three(1, 2, 1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,1,1) == 1\nassert     min_of_three(1,1,1) == 1\nassert     min_of_three(3,1,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_of_three(3,4,5) == 3, \"Should be 3\"\nassert     min_of_three(1,2,3) == 1, \"Should be 1\"\nassert     min_of_three(3,2,1) == 1, \"Should be 1\"\nassert     min_of_three(1,1,1) == 1, \"Should be 1\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=1, l=1, r=1) == True\nassert     all_Bits_Set_In_The_Given_Range(n=0, l=1, r=1) == True\nassert     all_Bits_Set_In_The_Given_Range(n=0, l=1, r=0) == False\nassert     all_Bits_Set_In_The_Given_Range(n=2, l=1, r=2) == False\nassert     all_Bits_Set_In_The_Given_Range(n=1, l=1, r=0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(7,1,7) == False\nassert     all_Bits_Set_In_The_Given_Range(15,1,15) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,7) == False\nassert     all_Bits_Set_In_The_Given_Range(7,2,7) == False\nassert     all_Bits_Set_In_The_Given_Range(0,5,0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=2,l=1,r=5) == True, \"Fail\"\nassert     all_Bits_Set_In_The_Given_Range(n=3,l=1,r=4) == True, \"Fail\"\nassert     all_Bits_Set_In_The_Given_Range(n=5,l=1,r=6) == False, \"Fail\"\nassert     all_Bits_Set_In_The_Given_Range(n=6,l=1,r=6) == False, \"Fail\"\nassert     all_Bits_Set_In_The_Given_Range(n=8,l=1,r=5) == True, \"Fail\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,3) == False\nassert     all_Bits_Set_In_The_Given_Range(3,1,4) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,10) == False\nassert     all_Bits_Set_In_The_Given_Range(10,0,10) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(3,1,3) == True, \"Invalid\"\nassert     all_Bits_Set_In_The_Given_Range(3,4,3) == False, \"Invalid\"\nassert     all_Bits_Set_In_The_Given_Range(9,1,9) == True, \"Invalid\"\n\n'''\nA palindrome is a word, phrase, or sequence that reads the same backward as forward, such as madam or mom. Given a word, print the condition if the word is palindrome or not\n'''\n\ndef is_Palindrome(s):\n    '''\n    Given a string, print the condition if the word is palindrome or not\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=4,l=3,r=5) == True\nassert     all_Bits_Set_In_The_Given_Range(n=3,l=3,r=5) == True\nassert     all_Bits_Set_In_The_Given_Range(n=3,l=1,r=5) == False\nassert     all_Bits_Set_In_The_Given_Range(n=5,l=1,r=5) == True\n\nprint(\"All the Given Range is Unset --> Expected output --> True\")\nprint(\"-------------------------------------------------------\")\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef re_arrange_array_hack(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. This function can be implemented using hack.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nThe re-arrange function needs to take in an array, an integer, and re-arrange it in the desired order.\n\nThe elements of the array should be re-arranged so that the relative order of positive and negative elements in the array stays the same.\n\nThe function should then return an array with the same elements as the input array, except those elements are rearranged so that they appear in the desired order of negative and positive.\n\nIf the input array is not given or of only one element or the integer n is not given, then the function should return an empty array.\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     re_arrange_array([1,2,3,4,5], 1) == [2,1,4,3,5], \"Wrong answer\"\nassert     re_arrange_array([-1,-2,-3,-4,-5], 1) == [-1,-2,-4,-3,-5], \"Wrong answer\"\nassert     re_arrange_array([5,-6,-7,-8,-9,-10,-1,-2,-3,-4], 4) == [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], \"Wrong answer\"\nassert     re_arrange_array([], 0) == [], \"Wrong answer\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([1,2,3,4,5,6,7,8,9,10], 5) == [1,2,3,4,5,6,7,8,9,10]\nassert     re_arrange_array([1,2,3,4,5,6,7,8,9,10], 10) == [1,2,3,4,5,6,7,8,9,10]\nassert     re_arrange_array([1,2,3,4,5,6,7,8,9,10], 8) == [1,2,3,4,5,6,7,8,9,10]\nassert     re_arrange_array([1,2,3,4,5,6,7,8,9,10], 2) == [-10,-9,1,2,3,4,5,6,7,8]\nassert     re_arrange_array([1,2,3,4,5,6,7,8,9,10], 0) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     re_arrange_array([1,2,3,4], 2) == [1,-2,3,4], \"Wrong answer!\"\nassert     re_arrange_array([1,2,3,4,5], 2) == [-2,1,-3,4,-5], \"Wrong answer!\"\nassert     re_arrange_array([1,2,3,4,-5], 2) == [1,-2,3,-4,-5], \"Wrong answer!\"\nassert     re_arrange_array([-1,2,3,4,-5], 2) == [-1,-2,-3,-4,-5], \"Wrong answer!\"\nassert     re_arrange_array([-1,-2,3,4,-5], 2) == [-1,-2,-3,-4,-5], \"Wrong answer!\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     re_arrange_array([1,2,3,4,5,6,7,8], 6) == None, 'Wrong answer'\nassert     re_arrange_array([1,2,3,4,5,6,7,8], 5) == None, 'Wrong answer'\nassert     re_arrange_array([1,2,3,4,5,6,7,8], 0) == None, 'Wrong answer'\nassert     re_arrange_array([1,2,3,4,5,6,7,8], 8) == None, 'Wrong answer'\nassert     re_arrange_array([-1,2,3,4,5,6,7,8], 6) == [1,2,3,4,5,6,7,8], 'Wrong answer'\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     re_arrange_array([-5, 3, -2, 5, 7, -1, 8, 1, -4, -10, 10, -11, 9, -9, 6], 6) == [-4, -10, -11, 1, 3, 5, 7, 6, 5, 4, 8, 9, 10, 7, 8, -1]\nassert re_arrange_array([-5, 3, -2, 5, 7, -1, 8, 1, -4, -10, 10, -11, 9, -9, 6], 3) == [-2, -4, -5, -10, 3, 5, 7, 1, -11, -9, 8, 9, 10, 6, -1, -4]\nassert re_arrange_array([-5, 3, -2, 5, 7, -1, 8, 1, -4, -10, 10, -11, 9, -9, 6], 7) == [-2, -4, -5, -10, 3, 5, 7, 1, -11, -9, 8, 9, 10, 6, -1, -4]\nassert re_arrange_array([-5, 3, -2, 5, 7, -1, 8, 1, -4, -10, 10, -11, 9, -9, 6], 11) == [-2, -4, -5, -10, 3, 5, 7, 1, -11, -9, 8, 9, 10, 6, -1, -4]\nassert re_arrange_array([-5, 3, -2, 5, 7, -1, 8, 1, -4, -10, 10, -11, 9, -9, 6], 0) == [-5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef replace_blank_1(str1,char):\n    return str1.replace(' ','%s'%char)\n\nassert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert replace_blank('', 'a') == 'a'\nassert replace_blank('', 'b') == 'b'\nassert replace_blank('', 'c') == 'c'\nassert replace_blank('', 'd') == 'd'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_blank(str1=\"We are happy\",char=\"1\")==\"We are happy1\", \"Should replace the first blank with '1' and the rest of them with '0'\"\nassert     replace_blank(str1=\"We are happy\",char=\"1\")==\"We are happy1\", \"Should replace the first blank with '1' and the rest of them with '0'\"\nassert     replace_blank(str1=\"We are happy\",char=\"1\")==\"We are happy1\", \"Should replace the first blank with '1' and the rest of them with '0'\"\nassert     replace_blank(str1=\"We are happy\",char=\"1\")==\"We are happy1\", \"Should replace the first blank with '1' and the rest of them with '0'\"\nassert     replace_blank(str1=\"We are happy\",char=\"1\")==\"We are happy1\", \"Should replace the first blank with '1' and the rest of them with '0'\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank('this is a test','s') == 'tis a test', 'Fail'\nassert replace_blank('', 'a') == 'a', 'Fail'\nassert replace_blank('a', '') == 'a', 'Fail'\nassert replace_blank('', '') == '', 'Fail'\nassert replace_blank('a b c','') == 'a b c', 'Fail'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank(\"\", \"X\") == \"\"\nassert     replace_blank(\"X\", \"X\") == \"X\"\nassert     replace_blank(\" \", \"X\") == \"X\"\nassert     replace_blank(\"X\", \" \") == \"X\"\nassert     replace_blank(\"\", \"\") == \"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_blank('Hello World','') == 'Hello World', 'Wrong Answer'\nassert replace_blank('Hello World','') == 'Hello World', 'Wrong Answer'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank(str1 = \"a b c d e f\", char = \" \") == \"a b c d e f\"\nassert     replace_blank(str1 = \"a b c d e f\", char = \" \") == \"a b c d e f\"\nassert     replace_blank(str1 = \"a b c d e f g\", char = \" \") == \"a b c d e f g\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert replace_blank(\"abcd\",'b') == \"abcb\"\n\nassert replace_blank(\"abcd\",'') == \"abcd\""
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlarg_nnum([1,3,4,2,2,4],2) == [4,4]\nassert \nlarg_nnum([1,3,4,2,2,4],1) == [4]\nassert \nlarg_nnum([1,3,4,2,2,4],0) == []\nassert \nlarg_nnum([1,3,4,2,2,4],5) == []\nassert \nlarg_nnum([1,3,4,2,2,4],-1) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlist1 = [ 1, 5, 3, 4, 3, 2, 6]\nn = 3\nprint(larg_nnum(list1,n))\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef make_counts(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary with the list items as keys and their counts as values.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     larg_nnum([0,1,2,3,4,5,6,7,8,9,10],10) == [10,9,8,7,6,5,4,3,2,1]\nassert     larg_nnum([0,1,2,3,4,5,6,7,8,9,10],9) == [10,9,8,7,6,5,4,3,2,1]\nassert     larg_nnum([0,1,2,3,4,5,6,7,8,9,10],8) == [10,9,8,7,6,5,4,3,2,1]\nassert     larg_nnum([0,1,2,3,4,5,6,7,8,9,10],7) == [10,9,8,7,6,5,4,3,2,1]\nassert     larg_nnum([0,1,2,3,4,5,6,7,8,9,10],6) == [10,9,8,7,6,5,4,3,2,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     larg_nnum([1,2,3,4,5],4) == [5,4,3,2]\nassert     larg_nnum([1,2,3,4,5],5) == [4,3,2,1,5]\nassert     larg_nnum([1,2,3,4,5],1) == [5]\nassert     larg_nnum([1,2,3,4,5],0) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert larg_nnum([5,1,4,1,5,6,4,1,6,4], 2) == [6,4]\nassert larg_nnum([5,1,4,1,5,6,4,1,6,4], 5) == [6,4,5,5,4]\nassert larg_nnum([5,1,4,1,5,6,4,1,6,4], 10) == [4,4,4,5,5,5,6,6,4,1]\nassert larg_nnum([5,1,4,1,5,6,4,1,6,4], 1) == [5,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     larg_nnum([1, 3, -10, -20, -20], 3) == [-20, -20, -10], \"The function doesn't return the correct list\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert lateralsuface_cylinder(1,1)==2*pi*1\nassert lateralsuface_cylinder(1,2)==2*pi*2\nassert lateralsuface_cylinder(2,1)==2*pi*3\nassert lateralsuface_cylinder(2,2)==2*pi*4\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsuface_cylinder(0,0) == 0\nassert     lateralsuface_cylinder(1,0) == 0\nassert     lateralsuface_cylinder(0,1) == 0\nassert     lateralsuface_cylinder(1,1) == 0\nassert     lateralsuface_cylinder(0.3,0.7) == 0.0\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsuface_cylinder(0,0) == 0\nassert     lateralsuface_cylinder(2,0) == 4\nassert     lateralsuface_cylinder(0,1) == 0\nassert     lateralsuface_cylinder(2,1) == 4\nassert     lateralsuface_cylinder(0,2) == 0\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsuface_cylinder(0,0) == 0.0\nassert     lateralsuface_cylinder(1,0) == 0.0\nassert     lateralsuface_cylinder(0,2) == 2*pi\nassert     lateralsuface_cylinder(1,2) == 2*pi\nassert     lateralsuface_cylinder(0.5,1) == pi*1.25\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(10,20) == 100\nassert     lateralsuface_cylinder(20,20) == 600\nassert     lateralsuface_cylinder(10,10) == 20\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 2\nassert     volume_cube(3) == 6\nassert     volume_cube(4) == 24\nassert     volume_cube(5) == 50\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test case 1\n    assert volume_cube(3) == 27\n    assert volume_cube(5) == 125\n    assert volume_cube(4) == 64\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert volume_cube(10) == 10000\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nvolume_cube(5) == 50, 'test 1'\nassert \nvolume_cube(6) == 216, 'test 2'\nassert \nvolume_cube(7) == 28350, 'test 3'\nassert \nvolume_cube(8) == 354432, 'test 4'\nassert \nvolume_cube(9) == 501248, 'test 5'\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(8) == 64\nassert     volume_cube(10) == 100\nassert     volume_cube(11) == 2220\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\n\nprint(\"You passed all the tests!\")\n\n'''\n6. Write a function which multiplies the values of a dictionary.\n'''\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_bit_set_number(0xaa) == 0x55\nassert even_bit_set_number(0xaaa) == 0x55a\nassert even_bit_set_number(0xaaaa) == 0x55aa\nassert even_bit_set_number(0x55a) == 0x55a\n\n'''\n    Write a python function to set all even bits of a given number.\n    \n    Input:\n    x: Integer\n    \n    Output:\n    x: Integer\n    \n    Example:\n    even_bit_set_number(0xaa) == 0x55\n    even_bit_set_number(0xaaa) == 0x55a\n    even_bit_set_number(0xaaaa) == 0x55aa\n    even_bit_set_number(0x55a) == 0x55a\n    \n'''\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_bit_set_number(15) == 6\n\ndef even_bit_set_number2(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert even_bit_set_number(18) == 5 # 2, 1, 0, 0, 1\nassert even_bit_set_number(120) == 15 # 2, 4, 0, 0, 0\nassert even_bit_set_number(0) == 0 # 0, 0, 0, 0, 0\n\nprint('Test passed'"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(2) == 0\nassert     even_bit_set_number(8) == 1\nassert     even_bit_set_number(9) == 1\nassert     even_bit_set_number(4) == 1\nassert     even_bit_set_number(127) == 7\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(123456) == 0\nassert even_bit_set_number(1234567) == 1\nassert even_bit_set_number(11) == 0\nassert even_bit_set_number(112233) == 0\nassert even_bit_set_number(0) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert even_bit_set_number(13) == 7\n    assert even_bit_set_number(1024) == 10\n    assert even_bit_set_number(1024) == 1"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_bit_set_number(45) == 46\nassert even_bit_set_number(40) == 40\nassert even_bit_set_number(10) == 0\nassert even_bit_set_number(1) == 0\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_bit_set_number(3) == 2\nassert     even_bit_set_number(4) == 2\nassert     even_bit_set_number(9) == 4\nassert     even_bit_set_number(10) == 4\nassert     even_bit_set_number(14) == 6\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_bit_set_number(3) == 4\neven_bit_set_number(12) == 14"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([(1, 2), (1, 2), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == {(1, 2): 2, (1, 2): 2, (1, 2): 2, (2, 3): 1, (3, 4): 1, (4, 5): 1, (4, 5): 1, (5, 6): 1, (5, 6): 1, (6, 7): 1, (6, 7): 1}\nassert    check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (5, 6), (6, 7), (7, 8), (8, 9)]) == {(1, 2): 3, (1, 2): 3, (1, 2): 3, (1, 2): 3, (1, 2): 3, (2, 3): 2, (3, 4): 2, (4, 5): 2, (4, 5): 2, (5, 6): 2, (5, 6): 2, (5, 6): 2, (6, 7): 1, (6, 7): 1, (7, 8): 1, (7, 8): 1, (7, 8): 1}\nassert    check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)]) == {(1, 2): 4, (1, 2): 4, (1, 2): 4, (1, 2): 4, (1, 2): 4, (2, 3): 3, (3, 4): 3, (4, 5): 3, (4, 5): 3, (5, 6): 3, (5, 6): 3, (5, 6): 3, (6, 7): 2, (6, 7): 2, (7, 8): 2, (7, 8): 2, (7, 8): 2, (7, 8): 2}\nassert    check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14)]) == {(1, 2): 5, (1, 2): 5, (1, 2): 5, (1, 2): 5, (1, 2): 5, (2, 3): 4, (3, 4): 4, (4, 5): 4, (4, 5): 4, (5, 6): 4, (5, 6): 4, (5, 6): 4, (6, 7): 3, (6, 7): 3, (7, 8): 3, (7, 8): 3, (7, 8): 3, (7, 8): 3, (7, 8): 3}\nassert    check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17)]) == {(1, 2): 6, (1, 2): 6, (1, 2): 6, (1, 2): 6, (1, 2): 6, (2, 3): 5, (3, 4): 5, (4, 5): 5, (4, 5): 5, (5, 6): 5, (5, 6): 5, (5, 6): 5, (6, 7): 4, (6, 7): 4, (7, 8): 4, (7, 8): 4, (7, 8): 4, (7, 8): 4, (7, 8): 4}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_occurences([('a', 1), ('a', 1), ('b', 1), ('a', 1), ('c', 1)]) == {('a', 1): 3, ('b', 1): 1, ('c', 1): 1}\nassert     check_occurences([('a', 1), ('a', 1), ('a', 2), ('b', 2), ('c', 2)]) == {('a', 1): 2, ('a', 2): 1, ('b', 2): 1, ('c', 2): 1}\nassert     check_occurences([('a', 1), ('a', 2), ('a', 3), ('b', 2), ('c', 2), ('c', 3)]) == {('a', 1): 3, ('a', 2): 1, ('a', 3): 1, ('b', 2): 1, ('c', 2): 2, ('c', 3): 1}\nassert     check_occurences([('a', 1), ('a', 2), ('a', 3), ('b', 2), ('c', 3)]) == {('a', 1): 3, ('a', 2): 1, ('a', 3): 1, ('b', 2): 1, ('c', 3): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_occurences([]) == {}\nassert     check_occurences([(1,2), (2,3), (1,3)]) == {(1,3): 2}\nassert     check_occurences([('A',2), ('A',3), ('B',1), ('C',2), ('D',1)]) == {('A',2): 2, ('B',1): 1, ('C',2): 1, ('D',1): 1}\nassert     check_occurences([(1,2,3), (1,2), (3,4,5)]) == {(1,2,3): 2, (1,2): 1, (3,4,5): 1}\nassert     check_occurences([(1,2,3), (1,2), (2,3,4,5), (2,3,4), (3,4,5)]) == {(1,2,3): 2, (1,2): 1, (2,3,4,5): 1, (2,3,4): 1, (3,4,5): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_occurences(tuple(range(4))) == Counter(tuple(range(4)))\nassert     check_occurences([('a', 0), ('b', 0), ('c', 0)]) == Counter(('a', 'b', 'c'))\nassert     check_occurences([('a', 0), ('b', 0), ('a', 1)]) == Counter(('a', 'b'))\n\ndef count_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_occurences([(1,2),(3,4),(5,6),(7,8)]) == {(1,2):1,(3,4):1,(5,6):1,(7,8):1}, \"incorrect\"\nassert check_occurences([(1,2,3),(1,2,3),(1,2,3)]) == {(1,2,3):3}, \"incorrect\"\nassert check_occurences([(1,2,3),(1,2,3),(1,2,3)]) == {(1,2,3):3}, \"incorrect\"\nassert check_occurences([(1,2,3),(1,2,3),(1,2,3)]) == {(1,2,3):3}, \"incorrect\"\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([(2, 3), (5, 1), (5, 2), (2, 1), (7, 3), (3, 2), (5, 3), (3, 1)]) == {(5, 2): 1, (2, 1): 2, (7, 3): 1, (5, 3): 1, (3, 2): 2, (3, 1): 1}\nassert     check_occurences([(5, 3), (7, 3), (5, 2), (7, 1)]) == {(5, 2): 2, (5, 3): 1, (7, 3): 1, (7, 1): 1}\nassert     check_occurences([(7, 3), (5, 2), (5, 3), (7, 1), (7, 2)]) == {(7, 3): 2, (7, 1): 3, (5, 3): 1, (7, 2): 1, (5, 2): 2, (5, 1): 1}\nassert     check_occurences([(5, 2), (5, 3), (7, 1), (7, 2), (5, 1), (5, 2), (7, 3), (7, 1)]) == {(5, 2): 3, (5, 3): 1, (7, 1): 1, (5, 1): 2, (7, 2): 1, (7, 3): 1}\nassert     check_occurences([(5, 3), (7, 3), (7, 1), (5, 2)]) == {(5, 2): 2, (5, 3): 1, (7, 3): 1, (7, 1): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_occurences([(1, 2), (2, 3), (3, 4), (1, 2), (3, 3), (1, 4), (1, 3), (4, 1), (2, 3)]) == {(1, 2): 1, (2, 3): 3, (3, 4): 1, (1, 2): 1, (3, 3): 2, (1, 4): 1, (1, 3): 2, (4, 1): 1, (2, 3): 1}\nassert     check_occurences([(1, 2), (2, 3), (3, 4), (1, 2), (3, 3), (1, 4), (1, 3), (4, 1), (2, 3)]) == {(1, 2): 1, (2, 3): 1, (3, 4): 1, (1, 2): 1, (3, 3): 2, (1, 4): 1, (1, 3): 1, (4, 1): 1, (2, 3): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_occurences(tuple_list) == {\n        (0,): 1,\n        (1,): 3,\n        (2,): 1,\n        (3,): 2\n    }, \"Output is incorrect\"\n\ntuple_list = (\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    (2,),\n    (3,),\n    (0,),\n    (1,),\n    "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_occurences([(1,3),(1,4),(1,5),(3,4),(3,5),(4,5),(5,5)]) == {(1,3):2,(1,4):1,(1,5):2,(3,4):1,(3,5):2,(4,5):2,(5,5):2}\nassert     check_occurences([(1,3),(1,4),(1,5),(3,4),(3,5),(4,5),(5,5)]) == {(1,3):2,(1,4):1,(1,5):2,(3,4):1,(3,5):2,(4,5):2,(5,5):2}\n\n\ndef check_occurences_set(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        s = str[i:len(str)+1]\n        if len(s) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings('') == 0, 'Empty string'\nassert     number_of_substrings(' ') == 0, 'Whitespace'\nassert     number_of_substrings('a') == 1, 'Single letter'\nassert     number_of_substrings('aa') == 2, 'Two letter'\nassert     number_of_substrings('aabb') == 3, 'Three letter'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not (number_of_substrings('') == 0), 'Empty String'\nassert number_of_substrings('a') == 1, 'One character'\nassert number_of_substrings('abc') == 3, 'Three characters'\nassert number_of_substrings('ab') == 2, 'Two characters'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_of_substrings('abcd') == 3, 'Not an empty string'\nassert     number_of_substrings('a') == 1, 'Empty string'\nassert     number_of_substrings('abcd') == 3, 'Wrong result'\nassert     number_of_substrings('abcabc') == 4, 'Duplicates'\nassert     number_of_substrings('abcabcabc') == 5, 'Duplicates'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nNow, write a python function to print the all non-empty substrings of a given string.\n'''\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_of_substrings('abcdefghi') == 10\nassert     number_of_substrings('abcdefghi') == 10\nassert     number_of_substrings('abc') == 0\nassert     number_of_substrings('abcd') == 3\nassert     number_of_substrings('abcdabc') == 4\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_of_substrings(\"aa\") == 1\nassert     number_of_substrings(\"aaab\") == 1\nassert     number_of_substrings(\"aaabb\") == 2\nassert     number_of_substrings(\"aaabbb\") == 3\nassert     number_of_substrings(\"\") == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(2,2) == 7\nassert     get_total_number_of_sequences(1,4) == 8\nassert     get_total_number_of_sequences(7,2) == 4\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1, \n    \"Wrong answer, expected 1\"\nassert     get_total_number_of_sequences(4,4) == 1, \n    \"Wrong answer, expected 1\"\nassert     get_total_number_of_sequences(2,2) == 1, \n    \"Wrong answer, expected 1\"\nassert     get_total_number_of_sequences(5,5) == 1, \n    \"Wrong answer, expected 1\"\nassert     get_total_number_of_sequences(10,10) == 2, \n    \"Wrong answer, expected 2\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(2,10) == 19\nassert     get_total_number_of_sequences(5,15) == 20\nassert     get_total_number_of_sequences(10,16) == 21\nassert     get_total_number_of_sequences(10,10) == 15\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(5,3) == 10\nassert     get_total_number_of_sequences(10,4) == 92\nassert     get_total_number_of_sequences(9,5) == 135\nassert     get_total_number_of_sequences(10,5) == 198\nassert     get_total_number_of_sequences(5,10) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(1,2) == 1\nassert     get_total_number_of_sequences(1,3) == 2\nassert     get_total_number_of_sequences(1,4) == 4\nassert     get_total_number_of_sequences(1,5) == 7\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1, \"get_total_number_of_sequences(1,1) should be 1\"\nassert     get_total_number_of_sequences(1,2) == 1, \"get_total_number_of_sequences(1,2) should be 1\"\nassert     get_total_number_of_sequences(1,3) == 1, \"get_total_number_of_sequences(1,3) should be 1\"\nassert     get_total_number_of_sequences(1,4) == 2, \"get_total_number_of_sequences(1,4) should be 2\"\nassert     get_total_number_of_sequences(1,5) == 3, \"get_total_number_of_sequences(1,5) should be 3\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(8,2) == 4\nassert     get_total_number_of_sequences(100,10) == 3600\nassert     get_total_number_of_sequences(20,3) == 10\nassert     get_total_number_of_sequences(3,3) == 2\nassert     get_total_number_of_sequences(10,5) == 10\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1, \"the sequence should be of length 1\"\nassert     get_total_number_of_sequences(2,1) == 1, \"the sequence should be of length 2\"\nassert     get_total_number_of_sequences(2,2) == 3, \"the sequence should be of length 3\"\nassert     get_total_number_of_sequences(2,3) == 6, \"the sequence should be of length 6\"\nassert     get_total_number_of_sequences(2,4) == 10, \"the sequence should be of length 10\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list(['one','two'],['I','II']) == ['one','I','two','II']\nassert     replace_list(['one','two'],['one','two']) == ['one','two','one','two']\nassert     replace_list(['one','two'],['one','two','three']) == ['one','two','three']\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_list(list1,list2):\n    '''\n    Write a function that takes in two lists of equal length.\n    The function should return true if the lists are equal, otherwise return false.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([5,3,7],[1,2,6]) == [5,3,1,2,6,7], \"Wrong value\"\nassert     replace_list([1,2,3,4,5,6],[7,8,9]) == [1,2,3,4,7,8,9], \"Wrong value\"\nassert     replace_list([1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6]) == [1,2,3,4,5,6,7,1,2,3,4,5,6], \"Wrong value\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([5, 4, 2, 1], [2, 1]) == [5, 4, 2, 1, 1]\nassert     replace_list([5, 4, 2, 1], [2, 6]) == [5, 4, 2, 1, 6]\nassert     replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([4,5,6], [3,2,1]) == [4,5,6,3,2,1]\nassert     replace_list([4,5], [3,2,1]) == [4,3,2,1]\nassert     replace_list([], [3,2,1]) == []\nassert     replace_list([3,2,1], []) == [3,2,1]\nassert     replace_list([], []) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) == [[1,2,3],[4,5,6],[3,5,6]]\nassert     replace_list([1,2,3],[4,5,6,7]) == [[1,2,3],[4,5,6],[3,5,6,7]]\nassert     replace_list([1,2,3],[4,5,6,7,8]) == [[1,2,3],[4,5,6,7,8]]\nassert     replace_list([1,2,3],[4,5,6,7,8,9]) == [[1,2,3],[4,5,6,7,8,9]]\nassert     replace_list([1,2,3,4],[4,5,6,7,8]) == [[1,2,3,4],[4,5,6,7,8]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_list([1, 2, 3, 4], [5, 6, 7]) == [1, 2, 3, 7]\nassert     replace_list([5, 6, 7, 8], [1, 2, 3]) == [5, 6, 7, 3]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3], [3,5,6]) ==     [1,2,5],'replace_list'\nassert     replace_list([3,4,1,2], [3,5,6]) ==     [3,4,5,6],'replace_list'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_charac(\"12345\") == 5\nassert count_charac(\"1234\") == 5\n\n'''\nExpected Output:\n    5\n    5\n'''\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_charac(\"\")    == 0, \"It should be zero.\"\nassert     count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")    == 26, \"This should be 26.\"\nassert     count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\")    == 57, \"This should be 57.\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_charac(\"a\") == 1\nassert count_charac(\"ab\") == 2\nassert count_charac(\"\") == 0\nassert count_charac(\"test\") == 6\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_charac(\"\") == 0, \"Should return 0 for an empty string\"\nassert     count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 26, \"Should return 26 for the lowercase letters\"\nassert     count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZab\") == 26, \"Should return 26 for the lowercase letters\"\nassert     count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZaB\") == 26, \"Should return 26 for the lowercase letters\"\nassert     count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabc\") == 26, \"Should return 26 for the lowercase letters\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_charac('1234567890') == 48\nassert     count_charac('qwert') == 5\nassert     count_charac('hgfds') == 11\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_charac_v2(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_charac('') == 0\nassert     count_charac('a') == 1\nassert     count_charac('ab') == 2\nassert     count_charac('abc') == 3\nassert     count_charac('abcde') == 6\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_charac('abc') == 3\nassert     count_charac('abc') == 1\nassert     count_charac('abcdef') == 6\nassert     count_charac('abcdefghijklmnopqrstuvwxyz') == 23\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nnext_Perfect_Square(100)\nnext_Perfect_Square(4)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(0) == 0\nassert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(9) == 10\nassert     next_Perfect_Square(10) == 10\nassert     next_Perfect_Square(100) == 100\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_Perfect_Square(1) == 0\nassert     next_Perfect_Square(9) == 1\nassert     next_Perfect_Square(121) == 2\nassert     next_Perfect_Square(5) == 1\nassert     next_Perfect_Square(15) == 2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert next_Perfect_Square(5) == 1\nassert next_Perfect_Square(15) == 9\nassert next_Perfect_Square(8) == 9\nassert next_Perfect_Square(9) == 9\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert next_Perfect_Square(9) == 10\nassert next_Perfect_Square(18) == 20\nassert next_Perfect_Square(1) == 1\nassert next_Perfect_Square(10) == 10\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_Perfect_Square(1) == 1 \nassert     next_Perfect_Square(100) == 100 \nassert     next_Perfect_Square(12) == 12 \nassert     next_Perfect_Square(10) == \nassert     next_Perfect_Square(5) == 6 \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(1) == 1, \n    \"Next Perfect Square(1) test FAILED\"\nassert     next_Perfect_Square(5) == 5, \n    \"Next Perfect Square(5) test FAILED\"\nassert     next_Perfect_Square(12) == 12, \n    \"Next Perfect Square(12) test FAILED\"\nassert     next_Perfect_Square(16) == 13, \n    \"Next Perfect Square(16) test FAILED\"\n\nprint(\"Next Perfect Square(1) = \",next_Perfect_Square(1))\nprint(\"Next Perfect Square(5) = \",next_Perfect_Square(5))\nprint(\"Next Perfect Square(12) = \",next_Perfect_Square(12))\nprint(\"Next Perfect Square(16) = \",next_Perfect_Square(16))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(7) == 9\nassert     next_Perfect_Square(9) == 16\nassert     next_Perfect_Square(10) == 16\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [3, 5, 2, 4, 1]\n    print(\"Max sum = {}\".format(max_sum(arr))"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nmax_sum([3, 8, -10, 7, 4, 1, 9]) ==\n\nmax_sum([10, 4, 11, 3, 9, 8, 1, 5, 7, -3]) ==\n\nmax_sum([0, -1, 2, -3, -5]) ==\n\nmax_sum([-1, -1, -1, -1]) ==\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nmax_sum([-1, 3, 8, -9]) == 6\nassert max_sum([2, 3, 1, -6]) == 8\nassert max_sum([-10, -4, -3, -2]) == -6\n\ndef max_sum_brute_force(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum([1, 3, 2]) == 3\nassert     max_sum([3, 2, 1]) == 4\nassert     max_sum([1, 2, 3, 4]) == 6\nassert     max_sum([3, 4, 1, 5]) == 9\nassert     max_sum([1, 2, 1]) == 2\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\narr = [-13, -3, -25, -20, -3, -16, -23, -12, -5, -22, -15, -4, -7]\nassert max_sum(arr) == 26\n\narr = [-10, -5, -8, -12, -17, -25, -31, -29, -8, -25, -9, -1, -3, -15]\nassert max_sum(arr) == 34\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(babylonian_squareroot(2))\n    print(babylonian_squareroot(3))\n    print(babylonian_squareroot(4))\n    print(babylonian_squareroot(5))\n    print(babylonian_squareroot(6))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(25) == 5\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     babylonian_squareroot(3) == 1.732050807568877\nassert     babylonian_squareroot(9) == 2.64575131105564\nassert     babylonian_squareroot(16) == 2.92320534355964\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(64) == 8\nassert     babylonian_squareroot(100) == 10\nassert     babylonian_squareroot(50) == 7\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(5) == 2.0, \"The result of the function should be 2\"\nassert     babylonian_squareroot(7) == 3.0, \"The result of the function should be 3\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (babylonian_squareroot(0) == 0)\nassert (babylonian_squareroot(1) == 1)\nassert (babylonian_squareroot(2) == 1.4142135623730951)\nassert (babylonian_squareroot(4) == 2)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    lps('abaaaa') == 4\n    lps('aabaa') == 3\n    lps('ababa') == 2\n    lps('abaa') == 2\n    lps('aaa') == 1\n    lps('a') == 1\n    lps('aaaaa') == 4\n    lps('a') == 1\n    lps('aaaa') == 3\n    lps('aa') == 1\n    lps('a') == 1\n    lps('aaaaa') == 3\n    lps('aa') == 1\n    lps('a') == 1\n    lps('a') == 1\n\n\n\n\ndef lps_seg(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lps(\"ababcbcba\") == 3, \"Should be 3\"\nassert     lps(\"abcabcbb\") == 3, \"Should be 3\"\nassert     lps(\"aabbcbb\") == 3, \"Should be 3\"\nassert     lps(\"aabaabaabaabaabaababababaabaabaabaabaabababababaabaabaabaabaabaabaabaabaababababaabaabaabaabaabaabaabaabaababababaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaab"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    lps('abcda') == 3\n    lps('aaaaa') == 4\n    lps('bbaaba') == 5\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     harmonic_sum(4) == 7, 'Harmonic sum failed'\nassert     harmonic_sum(1) == 1, 'Harmonic sum failed'\nassert     harmonic_sum(5) == 10, 'Harmonic sum failed'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    n = 10\n    print(harmonic_sum(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nharmonic_sum(5) == 15\nharmonic_sum(1) == 1\nharmonic_sum(10) == 55\n\n'''\n@CODEDACTIES\n10. TESTS FOR COSINETIC.py\n- Run the tests (run the file as described in the header)\n- If your solution passes all the tests, then you have solved this problem correctly!\n'''\n\ndef cosine_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the cosine sum of n.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     harmonic_sum(0) == 1, '0 should return 1'\nassert     harmonic_sum(1) == 1, '1 should return 1'\nassert     harmonic_sum(2) == 1, '2 should return 1'\nassert     harmonic_sum(3) == 1, '3 should return 1'\nassert     harmonic_sum(4) == 1, '4 should return 1'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nharmonic_sum(0) == 0, 'harmonic_sum(0) should be 0'\nassert \nharmonic_sum(1) == 1, 'harmonic_sum(1) should be 1'\nassert \nharmonic_sum(2) == 1, 'harmonic_sum(2) should be 1'\nassert \nharmonic_sum(3) == 2, 'harmonic_sum(3) should be 2'\nassert \nharmonic_sum(4) == 3, 'harmonic_sum(4) should be 3'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert harmonic_sum(7) == 5.16666666666667\nassert harmonic_sum(5) == 4.6\nassert harmonic_sum(1) == 1\nassert harmonic_sum(0) == "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     harmonic_sum(1) == 1, \"Expected 1, but got %s\" %(harmonic_sum(1))\nassert     harmonic_sum(2) == 2, \"Expected 2, but got %s\" %(harmonic_sum(2))\nassert     harmonic_sum(3) == 3, \"Expected 3, but got %s\" %(harmonic_sum(3))\nassert     harmonic_sum(4) == 5, \"Expected 5, but got %s\" %(harmonic_sum(4))\nassert     harmonic_sum(5) == 8, \"Expected 8, but got %s\" %(harmonic_sum(5))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef make_word(word, alphabet):\n    '''\n    Write a function that takes in a word and a dictionary alphabet and returns a string with the letters of alphabet.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection_array([1,2,2,1],[2,2,1]) == [2,2]\nassert     intersection_array([4,9,5],[9,4,9,8,4]) == [9,4]\nassert     intersection_array([5,8,2],[8,4,9,7,2]) == []\nassert     intersection_array([1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]) == []"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection_array([1,2,3,4,5,6], [2,4,6,8,9,10]) == [2,4,6]\nassert     intersection_array([1,2,3,4,5,6], [2,4,6,7,8,9,10]) == [2,4,6]\nassert     intersection_array([1,2,3,4,5,6], [2,4,6,7,8,9,10,11,12,13,14]) == []\nassert     intersection_array([1,2,3,4,5,6], [2,4,6,8,9,10,11,12,13,14,15]) == []\nassert     intersection_array([], [2,4,6,8,9,10,11,12,13,14,15]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection_array([1,2,2,1],\n                            [2,2,3,4]) == 2\nassert     intersection_array([1,2,2,1],\n                            [3,4,5,6]) == None\nassert     intersection_array([1,2,2,1,3],\n                            [2,2,3,4,5]) == 2\nassert     intersection_array([1,2,2,1],\n                            [3,4,5,6]) == None\nassert     intersection_array([1,2,2],\n                            [3,4,5,6]) == None\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection_array([1, 2, 2, 1], [2, 2]) == [2, 2]\nassert     intersection_array([1, 2, 2, 1], [1, 1, 2]) == [1, 1, 2]\nassert     intersection_array([], [2, 2]) == []\nassert     intersection_array([1, 2, 2, 1], [1, 1]) == [1, 1]\nassert     intersection_array([1, 2, 2], [1, 2, 3]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Pass\" if (([1, 2, 2, 1], [2, 2]) == intersection_array([1, 2, 2, 1], [2, 2])) else \"Fail\")\nprint(\"Pass\" if (([], [1]) == intersection_array([], [1])) else \"Fail\")\nprint(\"Pass\" if (([1, 2, 2, 1], [1, 2]) == intersection_array([1, 2, 2, 1], [2, 2])) else \"Fail\""
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # first check the first array is longer than the second\n    if len(array_nums1) < len(array_nums2):\n        return \n    # second check the second array is longer than the first\n    if len(array_nums2) < len(array_nums1):\n        return \n    # third check the array nums1 is an array of integers\n    if not type(array_nums1) == list:\n        return \n    # fourth check the array nums2 is an array of integers\n    if not type(array_nums2) == list:\n        return \n    # fifth check the array nums1 is not empty\n    if len(array_nums1) == 0:\n        return \n    # sixth check the array nums2 is not empty\n    if len(array_nums2) == 0:\n        return \n    # seventh check the first array is not the same as the second\n    if array_nums1 == array_nums2:\n        return \n    # eight check the array nums1 is not the same as the first array\n    if array_nums2 == array_nums1:\n        return \n    # nine check the array nums2 is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # ten check the array nums2 is not the same as the first array\n    if len(array_nums1) > len(array_nums2):\n        return \n    # eleven check the array nums1 is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # twelve check the array nums2 is not the same as the first array\n    if len(array_nums1) > len(array_nums2):\n        return \n    # thirven check the array nums1 is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # fourteeen check the array nums2 is not the same as the first array\n    if len(array_nums1) == len(array_nums2):\n        return \n    # twenty one check the array nums2 is not the same as the first array\n    if len(array_nums1) < len(array_nums2):\n        return \n    # three hundred thirty two check the array nums2 is not the same as the first array\n    if len(array_nums1) > len(array_nums2):\n        return \n    # three hundred thirty two check the array nums2 is not the same as the first array\n    if len(array_nums1) < len(array_nums2):\n        return \n    # check the first array is longer than the second\n    if len(array_nums1) > len(array_nums2):\n        return\n    # check the second array is longer than the first\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the first array is not an array of integers\n    if not type(array_nums1) == list:\n        return \n    # check the array nums2 is not an array of integers\n    if not type(array_nums2) == list:\n        return \n    # check the array nums1 is not empty\n    if len(array_nums1) == 0:\n        return \n    # check the array nums2 is not empty\n    if len(array_nums2) == 0:\n        return \n    # check the first array is not the same as the second\n    if array_nums1 == array_nums2:\n        return \n    # check the second array is not the same as the first array\n    if array_nums1 == array_nums2:\n        return \n    # check the second array is not the same as the second array\n    if array_nums2 == array_nums1:\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums1) > len(array_nums2):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums1) > len(array_nums2):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the second array is not the same as the second array\n    if len(array_nums2) == 0:\n        return \n    # check the second array is not the same as the second array\n    if len(array_nums1) == 0:\n        return \n    # check the second array is not the same as the second array\n    if len(array_nums1) == 0:\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the second array is not the same as the second array\n    if array_nums2 == array_nums1:\n        return \n    # check the second array is not the same as the first array\n    if array_nums2 == array_nums1:\n        return \n    # check the second array is not the same as the second array\n    if array_nums2 == array_nums1:\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums1) > len(array_nums2):\n        return \n    # check the second array is not the same as the first array\n    if array_nums2 == array_nums1:\n        return \n    # check the second array is not the same as the first array\n    if array_nums2 == array_nums1:\n        return \n    # check the second array is not the same as the second array\n    if array_nums2 == array_nums1:\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums1) > len(array_nums2):\n        return \n    # check the second array is not the same as the first array\n    if array_nums2 == array_nums1:\n        return \n    # check the second array is not the same as the first array\n    if array_nums2 == array_nums1:\n        return \n    # check the second array is not the same as the second array\n    if array_nums2 == array_nums1:\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums2) > len(array_nums1):\n        return \n    # check the first array is not the same as the second array\n    if len(array_nums1) > len(array_nums2):\n        return \n    # check the second array is not the same as the first array\n    if array_nums2 == array_nums1:\n        return \n    # check the second arra"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nintersection_array([1,3,4,5,9,11,21],[2,3,7,8,9,10,21]) == [3,7,9]\nassert \nintersection_array([2,3,7,8,9,10,21],[3,7,9]) == []"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection_array([1, 2, 3, 4, 5, 6], \n                            [0, 4, 5, 6, 7, 8]) == [0, 4, 5, 6]\n\nassert intersection_array([1, 2, 3, 4, 5], \n                            [4, 5, 6, 7, 8]) == []"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     intersection_array([1, 2, 3, 4, 5],[1, 2, 4, 5, 6]) == [1, 2, 4]\nassert     intersection_array([1, 2, 3, 4, 5],[1, 2, 4, 5, 6, 7]) == []\nassert     intersection_array([1, 2, 3, 4, 5, 6, 7],[1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     intersection_array([1, 2, 3, 4, 5, 6, 7],[1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     intersection_array([1, 2, 3, 4, 5],[1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_max_and_min_of_list(lst):\n    '''\n    Write a python function that takes in a list and returns a tuple\n    containing the largest and the smallest value in the list.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_X(('a','b','c','d','e'), 'b') == 1\nassert     count_X(('a','b','c','d','e'), 'z') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_X((2,4,2,2,4), 2) == 4, \"Wrong answer, try again\"\nassert     count_X((5,5,2,4,4,5), 4) == 1, \"Wrong answer, try again\"\nassert count_X((2,4,2,2,4), 7) == 0, \"Wrong answer, try again\"\nassert count_X((2,4,2,2,4), 2) == 2, \"Wrong answer, try again\"\nassert count_X((2,4,2,2,4), 5) == 0, \"Wrong answer, try again\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_X((1, 2, 3), 3) == 1, 'Expected 1'\nassert \ncount_X((1, 2, 3), 1) == 3, 'Expected 3'\nassert \ncount_X((1, 2, 3), 4) == 0, 'Expected 0'\n\nprint('PASSED ALL TEST CASES'"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncount_X(('a', 'b', 'c', 'a'), 'a') == 2\ncount_X(('a', 'b', 'c', 'a'), 'b') == 1\ncount_X(('a', 'b', 'c', 'a'), 'c') == 2\ncount_X(('a', 'b', 'c', 'a'), 'd') == 0"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_X((3, 4, 5, 6), 3) == 2, \"incorrect\"\nassert     count_X((3, 4, 5, 6), 5) == 2, \"incorrect\"\nassert     count_X((3, 4, 5, 6), 6) == 1, \"incorrect\"\nassert     count_X((3, 4, 5, 6), 7) == 0, \"incorrect\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_X(('apple','mango', 'peach', 'peach'), 'peach') == 3\nassert     count_X(('apple','mango', 'peach', 'peach'), 'app') == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef swap(tup, index_1, index_2):\n    '''\n    Write a python function that takes in a tuple and two indices and swaps the values at those indices in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     insert_element([1,2,3,4,5],4) == [1,4,4,4,5]\nassert     insert_element([],1) == [1]\nassert     insert_element([],4) == [4]\nassert     insert_element([1,2,3,4,5],4) == [1,4,4,4,4,5]\nassert     insert_element([1,2,3,4,5],5) == [1,2,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element(['x', 'y', 'z'], 'a') == ['a', 'x', 'y', 'z'], \"Wrong!\"\nassert     insert_element(['a', 'b', 'c', 'd'], 'e') == ['e', 'a', 'b', 'c', 'd'], \"Wrong!\"\nassert     insert_element(['a', 'b', 'c'], 'd') == ['a', 'd', 'b', 'c'], \"Wrong!\"\nassert     insert_element(['a', 'b', 'c'], 'd') == ['a', 'd', 'b', 'c'], \"Wrong!\"\nassert     insert_element(['a', 'b', 'c'], 'd') == ['a', 'd', 'b', 'c'], \"Wrong!\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3],1) == [1,1,2,3]\nassert     insert_element([1,2,3],4) == [1,1,4,2,3]\nassert     insert_element([1,2,3],5) == [1,1,2,3,5]\n\ndef make_word_dict():\n    '''\n    Write a function that takes in a dictionary and returns the dictionary, but with the words with the start letter's' removed.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     insert_element([1,2,3,4,5],100) == [[1,100],[2,100],[3,100],[4,100],[5,100]]\nassert     insert_element([1,2,3,4,5],6) == [[1,6],[2,6],[3,6],[4,6],[5,6]]\nassert     insert_element([1,2,3,4,5],6) == [[1,6],[2,6],[3,6],[4,6],[5,6]]\nassert     insert_element([1,2,3,4,5],4) == [[1,4],[2,4],[3,4],[4,4],[5,4]]\nassert     insert_element([1,2,3,4,5],0) == [[0,1],[0,2],[0,3],[0,4],[0,5]]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     insert_element([1,2,3,4,5,6],1) == [1,1,2,3,4,5,6], \"Error 1\"\nassert     insert_element([1,2,3,4,5,6],0) == [0,1,2,3,4,5,6], \"Error 2\"\nassert     insert_element([1,2,3,4,5,6],7) == [1,2,3,4,5,6,7], \"Error 3\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    insert_element([1,2,3],7) == [7,1,2,3]\nassert insert_element([3,2,1],5) == [5,3,2,1]\nassert insert_element([5,4,3,2,1],7) == [7,5,4,3,2,1]\nassert insert_element([1,2],7) == [7,1,2]\nassert insert_element([2,1,5],7) == [7,2,1,5]"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert insert_element([1, 2, 3, 4], 5) == [1, 5, 2, 3, 4]\nassert insert_element([], 1) == [1]\nassert insert_element([1, 2, 3], 4) == [1, 4, 2, 3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     insert_element([1,2,3], 5) == [1,2,3,5]\nassert     insert_element([1,2,3], 0) == [0,1,2,3]\nassert     insert_element([1,2,3], 4) == [1,2,3,4]\nassert     insert_element([1,2,3], 7) == [1,2,3,7]\nassert     insert_element([1,2,3,4], 5) == [1,2,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     insert_element([1,2,3,4],1) == [1,1,2,3,4]\nassert     insert_element([2,3,4],1) == [1,2,1,3,4]\nassert     insert_element([1,2,3,4],3) == [1,1,2,3,3,4]\nassert     insert_element([1,2,3,4],4) == [1,1,2,4,3,4]\nassert     insert_element([1,2,3,4],5) == [1,1,2,4,3,5]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert( (1,2) ) == ([1.4142135623730951, 2.8284271247461903], [0.7853981633974483, -0.7853981633974483])\nassert convert( (3,3) ) == ([3.218033989794854, 3.218033989794854], [0.8775829463726194, 0.8775829463726194])\nassert convert( (4,2) ) == ([4.8, 4.8], [0.782608695652174, 0.782608695652174])\nassert convert( (5,4) ) == ([5.414213562373095, 5.414213562373095], [0.7853981633974483, 0.7853981633974483])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert([1+0j,2+0j,3+0j,4+0j]) == [1,2,3,4] \nassert convert([1+0j,2+0j,3+0j,4+0j]) == [0.33,1.11,0.66,1.13]\nassert convert([0+0j,0+0j,0+0j,0+0j]) == [0.0,0.0,0.0,0.0]\nassert convert([0+0j,2+0j,0+0j,0+0j]) == [0.0,2.0,0.0,0.0]\nassert convert([1+0j,0+0j,0+0j,0+0j]) == [1.0,0.0,0.0,0.0]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert([2+0j]) == (0.0, 2.0), \"Error in converting complex numbers\"\nassert     convert([2,0]) == (0.0, 2.0), \"Error in converting complex numbers\"\nassert     convert([0,2]) == (0.0, 2.0), \"Error in converting complex numbers\"\nassert     convert([2+0j,0]) == (0.0, 2.0), \"Error in converting complex numbers\"\nassert     convert([0,2,0]) == (0.0, 2.0), \"Error in converting complex numbers\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(convert([1, 2, 3, 4, 5, 6, 7, 8]))\n\n'''\nWrite a python function to convert the complex number to polar coordinates.\n'''\ndef convert(numbers):\n    '''\n    Write a python function to convert the complex number to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert((3,4)) == (-0.5+0.707j, -1.41421+0.707j), \"Wrong Answer\"\nassert convert((-3,4)) == (-0.5+0.707j, -1.41421+0.707j), \"Wrong Answer\"\nassert convert((4,1)) == (0.5+0.707j, 0.707+1j), \"Wrong Answer\"\nassert convert((0,0)) == (0,0), \"Wrong Answer\"\nassert convert((0,0.5)) == (0,0.5), \"Wrong Answer\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert(    {'r':5, 'phi':2}    ) ==     {'real':5, 'phi':2.5}\nassert     convert(    {'r':5, 'phi':0}    ) ==     {'real':5, 'phi':0}\nassert     convert(    {'r':0, 'phi':2}    ) ==     {'real':0, 'phi':2}\nassert     convert(    {'r':-2, 'phi':0}    ) ==     {'real':-2, 'phi':0}\nassert     convert(    {'r':1, 'phi':0}    ) ==     {'real':1, 'phi':0}\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert([1.5+0j, 3-1j, -1.5+0j, 5+3j, -2.5-1j]) == (2.13, 4.631)\nassert     convert([1+0j, -3j, -1+0j, -5j, -2-1j]) == (2.13, -3.631)\nassert     convert([1+0j, -3+0j, -1+0j, -5+3j, -2+2j]) == (2.13, -3.631)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5, \"Wrong output\"\nassert     count_integer([-1,-2,3,4,5]) == 5, \"Wrong output\"\nassert     count_integer([-1,-2,-3,4,5]) == 5, \"Wrong output\"\nassert     count_integer([-1.0,-2.0,-3.0,4.0,5.0]) == 5, \"Wrong output\"\nassert     count_integer([-1,-2,-3,-4,-5]) == 5, \"Wrong output\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_odd_even(list1):\n    '''\n    Write a python function that returns the number of odd and even elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, \"Checker\"\nassert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, 20]) == 11, \"Checker\"\nassert     count_integer([1, 1.0, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9]) == 9, \"Checker\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5\nassert     count_integer([]) == 0\nassert     count_integer([4,4,4,4,4,4,4,4,4,4]) == 10\n\ndef max_integer(list1):\n    '''\n    Write a python function that returns the maximum element of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_integer([]) == 0, \"Input list is empty\"\nassert     count_integer([1, 2, 3]) == 3, \"All numbers\"\nassert     count_integer([1, 1.2, 3]) == 2, \"Two integers\"\nassert     count_integer([1, 'a', 3]) == 2, \"Two integers\"\nassert     count_integer([1, 'a', 'b']) == 2, \"Two integers\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([1, 2, 3, 4, 5]) == 4, \"Should be 5\"\nassert     count_integer([1, 2, 3, 4, 5, 6]) == 5, \"Should be 5\"\nassert     count_integer([1, 2, 3, 4, 5, 6, 7]) == 6, \"Should be 6\"\nassert     count_integer([1, 2, 3, 4, 5, 6, 7, 8]) == 7, \"Should be 7\"\nassert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8, \"Should be 8\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_integer([]) == 0, \"Expected value: 0\"\nassert     count_integer([1, 2, 3, 4, 5]) == 5, \"Expected value: 5\"\nassert     count_integer([1, 2, 3, 'hi', 4, 5]) == 5, \"Expected value: 5\"\nassert     count_integer([1, 'hi', 'hello', 4, 5]) == 4, \"Expected value: 4\"\nassert     count_integer([1, 2, 3, 4, 'hi', 5]) == 5, \"Expected value: 5\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('\\n')\nprint('------------------------------')\nprint('Testing count_integer function:')\nprint('------------------------------')\ntest_list1 = [1,3,2,2,5,5,5]\ntest_list2 = []\ntest_list3 = [\"ram\", \"piyush\", \"harry\"]\nassert count_integer(test_list1) == 6\nassert count_integer(test_list2) == 0\nassert count_integer(test_list3) == 3\nprint('Test passed.')\nprint('------------------------------')\nprint('\\n')\n\n\ndef count_positive_integer(list1):\n    '''\n    Write a python function that returns the number of positive integers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6]) == 6, \"The list does not contain integers\"\nassert     count_integer([1, 2, 3, 4, 5, 6.0]) == 6, \"The list contains only integer\"\nassert     count_integer([1, 2, 3, 4, 5, 6, 2.0]) == 5, \"The list contains only integer\"\n\nprint(\"\\nYour code works correctly\")\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors(['a', 'b', 'c', 'd', 'e', 'f'], 2) == [[('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'f'), ('b', 'c'), ('b', 'd'), ('b', 'e'), ('b', 'f'), ('c', 'd'), ('c', 'e'), ('c', 'f'), ('d', 'e'), ('d', 'f'), ('e', 'f')], [('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'f'), ('b', 'c'), ('b', 'd'), ('b', 'e'), ('b', 'f'), ('c', 'd'), ('c', 'e'), ('c', 'f'), ('d', 'e'), ('d', 'f'), ('e', 'f')], "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef all_subsets(l):\n    '''\n    Write a function that takes a list and generates all the subsets of that list.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors([1,2,3,4], 1) == [(1,)]\nassert     combinations_colors([1,2,3,4], 2) == [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]\nassert     combinations_colors([1,2,3,4], 3) == [(1,2,3), (1,2,4), (1,3,4), (2,3,4)]\nassert     combinations_colors([1,2,3,4], 4) == [(1,2,3,4)]\nassert     combinations_colors([1,2,3,4], 5) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([0, 1, 2, 3], 1) == [(0,), (1,), (2,), (3,)]\nassert     combinations_colors([0, 1, 2, 3], 2) == [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]\nassert     combinations_colors([0, 1, 2, 3], 3) == [(0, 1, 2), (0, 1, 3), (0, 2, 3), (1, 2, 3),\n(1, 0, 3), (1, 1, 2), (1, 1, 3), (1, 2, 3), (2, 0, 3), (2, 1, 3), (2, 1, 2), (2, 2, 3), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 1, 2), (3, 1, 3), (3, 2, 3)]\nassert     combinations_colors([], 1) == []\nassert     combinations_colors([], 2) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [\n                (1, 2), \n                (1, 3), \n                (2, 3), \n                (1, 1), \n                (2, 2), \n                (3, 3), \n                (1, 1), \n                (2, 1), \n                (3, 1)\n            ]\nassert combinations_colors([1, 2, 3], 1) == [(1,)]\nassert combinations_colors([1, 2, 3], 0) == []\nassert combinations_colors([1, 2, 3], 5) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_colors([1, 2, 3], 3) == [[1,2,3],(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]\nassert     combinations_colors([1, 2, 3], 2) == [[1,2],(1,2),(1,2),(1,2),(1,2),(1,2)]\nassert     combinations_colors([1, 2, 3], 1) == [[1],(1),(1),(1),(1),(1)]\nassert     combinations_colors([1, 2, 3], 4) == []\n\ndef combinations_of_distinct_numbers_in_lists(x, y, z):\n    '''\n    Write a function that takes three lists of integers and returns a list of all possible combinations (with repetition) of the elements in each list.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1,2,3], 0) == []\nassert     combinations_colors([1,2,3], 1) == [()]\nassert     combinations_colors([1,2,3], 2) == [(1,2),(1,3),(2,3)]\nassert     combinations_colors([1,2,3], 3) == [(1,2,3)]\nassert     combinations_colors([1,2,3,4], 1) == [(1,),(2,),(3,),(4,)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors([1,2,3], 0) == []\nassert     combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]\nassert     combinations_colors([1,2,3], 2) == [(1, 2), (1, 3), (2, 3)]\nassert     combinations_colors([1,2,3], 3) == [(1, 2, 3)]\nassert     combinations_colors([1,2,3], 4) == [(1, 2, 3, 4)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncombs = combinations_colors(['a', 'b', 'c', 'd', 'e'], 2)\nassert combs == [('a', 'a'), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('b', 'b'), ('b', 'c'), ('b', 'd'), ('b', 'e'), ('c', 'c'), ('c', 'd'), ('c', 'e'), ('d', 'd'), ('d', 'e'), ('e', 'e')], \"is broken\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert count_Primes_nums(4) == 2\nassert count_Primes_nums(0) == 0\nassert count_Primes_nums(1) == 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_Primes_nums(0) == 0\nassert count_Primes_nums(5) == 4\nassert count_Primes_nums(20) == 15\nassert count_Primes_nums(50) == 19\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Primes_nums(2) == 2\nassert     count_Primes_nums(7) == 3\nassert     count_Primes_nums(1) == 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_Primes_nums(0) == 0\nassert count_Primes_nums(3) == 2\nassert count_Primes_nums(7) == 3\nassert count_Primes_nums(10) == 5\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_Primes_nums_memo(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    table = {}\n    def helper(n):\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n in table:\n            return table[n]\n        ret = helper(n-1) + helper(n-2)\n        table[n] = ret\n        return ret\n    return helper(n)"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_Primes_nums(100) == 25\nassert count_Primes_nums(20) == 10\nassert count_Primes_nums(0) == 0\nassert count_Primes_nums(-1) == 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_Primes_nums_1(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \n    >>> count_Primes_nums_1(25)\n    12\n    >>> count_Primes_nums_1(1)\n    0\n    >>> count_Primes_nums_1(14)\n    9\n    >>> count_Primes_nums_1(100)\n    71\n    >>> count_Primes_nums_1(100000)\n    2329\n    >>> count_Primes_nums_1(0)\n    0\n    >>> count_Primes_nums_1(1)\n    0\n    >>> count_Primes_nums_1(4)\n    2\n    >>> count_Primes_nums_1(5)\n    2\n    >>> count_Primes_nums_1(6)\n    3\n    >>> count_Primes_nums_1(7)\n    3\n    >>> count_Primes_nums_1(8)\n    3\n    >>> count_Primes_nums_1(9)\n    3\n    >>> count_Primes_nums_1(10)\n    4\n    >>> count_Primes_nums_1(11)\n    4\n    >>> count_Primes_nums_1(12)\n    4\n    >>> count_Primes_nums_1(13)\n    4\n    >>> count_Primes_nums_1(14)\n    4\n    >>> count_Primes_nums_1(15)\n    4\n    >>> count_Primes_nums_1(16)\n    4\n    >>> count_Primes_nums_1(17)\n    4\n    >>> count_Primes_nums_1(18)\n    4\n    >>> count_Primes_nums_1(19)\n    4\n    >>> count_Primes_nums_1(20)\n    4\n    >>> count_Primes_nums_1(21)\n    4\n    >>> count_Primes_nums_1(22)\n    4\n    >>> count_Primes_nums_1(23)\n    4\n    >>> count_Primes_nums_1(24)\n    4\n    >>> count_Primes_nums_1(25)\n    5\n    >>> count_Primes_nums_1(26)\n    5\n    >>> count_Primes_nums_1(27)\n    5\n    >>> count_Primes_nums_1(28)\n    5\n    >>> count_Primes_nums_1(29)\n    5\n    >>> count_Primes_nums_1(30)\n    5\n    >>> count_Primes_nums_1(31)\n    5\n    >>> count_Primes_nums_1(32)\n    5\n    >>> count_Primes_nums_1(33)\n    5\n    >>> count_Primes_nums_1(34)\n    5\n    >>> count_Primes_nums_1(35)\n    5\n    >>> count_Primes_nums_1(36)\n    5\n    >>> count_Primes_nums_1(37)\n    5\n    >>> count_Primes_nums_1(38)\n    5\n    >>> count_Primes_nums_1(39)\n    5\n    >>> count_Primes_nums_1(40)\n    5\n    >>> count_Primes_nums_1(41)\n    5\n    >>> count_Primes_nums_1(42)\n    5\n    >>> count_Primes_nums_1(43)\n    5\n    >>> count_Primes_nums_1(44)\n    5\n    >>> count_Primes_nums_1(45)\n    5\n    >>> count_Primes_nums_1(46)\n    5\n    >>> count_Primes_nums_1(47)\n    5\n    >>> count_Primes_nums_1(48)\n    5\n    >>> count_Primes_nums_1(49)\n    5\n    >>> count_Primes_nums_1(50)\n    5\n    >>> count_Primes_nums_1(51)\n    5\n    >>> count_Primes_nums_1(52)\n    5\n    >>> count_Primes_nums_1(53)\n    5\n    >>> count_Primes_nums_1(54)\n    5\n    >>> count_Primes_nums_1(55)\n    5\n    >>> count_Primes_nums_1(56)\n    5\n    >>> count_Primes_nums_1(57)\n    5\n    >>> count_Primes_nums_1(58)\n    5\n    >>> count_Primes_nums_1(59)\n    5\n    >>> count_Primes_nums_1(60)\n    5\n    >>> count_Primes_nums_1(61)\n    5\n    >>> count_Primes_nums_1(62)\n    5\n    >>> count_Primes_nums_1(63)\n    5\n    >>> count_Primes_nums_1(64)\n    5\n    >>> count_Primes_nums_1(65)\n    5\n    >>> count_Primes_nums_1(66)\n    5\n    >>> count_Primes_nums_1(67)\n    5\n    >>> count_Primes_nums_1(68)\n    5\n    >>> count_Primes_nums_1(69)\n    5\n    >>> count_Primes_nums_1(70)\n    5\n    >>> count_Primes_nums_1(71)\n    5\n    >>> count_Primes_nums_1(72)\n    5\n    >>> count_Primes_nums_1(73)\n    5\n    >>> count_Primes_nums_1(74)\n    5\n    >>> count_Primes_nums_1(75)\n    5\n    >>> count_Primes_nums_1(76)\n    5\n    >>> count_Primes_nums_1(77)\n    5\n    >>> count_Primes_nums_1(78)\n    5\n    >>> count_Primes_nums_1(79)\n    5\n    >>> count_Primes_nums_1(80)\n    5\n    >>> count_Primes_nums_1(81)\n    5\n    >>> count_Primes_nums_1(82)\n    5\n    >>> count_Primes_nums_1(83)\n    5\n    >>> count_Primes_nums_1(84)\n    5\n    >>> count_Primes_nums_1(85)\n    5\n    >>> count_Primes_nums_1(86)\n    5\n    >>> count_Primes_nums_1(87)\n    5\n    >>> count_Primes_nums_1(88)\n    5\n    >>> count_Primes_nums_1(89)\n    5\n    >>> count_Primes_nums_1(90)\n    5\n    >>> count_Primes_nums_1(91)\n    5\n    >>> count_Primes_nums_1(92)\n    5\n    >>> count_Primes_nums_1(93)\n    5\n    >>> count_Primes_nums_1(94)\n    5\n    >>> count_Primes_nums_1(95)\n    5\n    >>> count_Primes_nums_1(96)\n    5\n    >>> count_Primes_nums_1(97)\n    5\n    >>> count_Primes_nums_1(98)\n    5\n    >>> count_Primes_nums_1(99)\n    5\n    >>> count_Primes_nums_1(100)\n    5\n    >>> count_Primes_nums_1(101)\n    5\n    >>> count_Primes_nums_1(102)\n    5\n    >>> count_Primes_nums_1(103)\n    "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(100) == 29\nassert     count_Primes_nums(1000) == 485\nassert     count_Primes_nums(10000) == 5351\nassert     count_Primes_nums(50000) == 54591\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Primes_nums(10) == 5\nassert     count_Primes_nums(100) == 95\nassert     count_Primes_nums(1) == 0\n\ndef is_Prime(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean indicating whether the given number is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(2,4) == (4, 2), 'Wrong output'\nassert swap_numbers(4,2) == (2, 4), 'Wrong output'\nassert swap_numbers(1,2) == (2, 1), 'Wrong output'\nassert swap_numbers(3,4) == (4, 3), 'Wrong output'\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    (swap_numbers(3,4) == (4,3)), \"failed\"\n    (swap_numbers(2,2) == (2,2)), \"failed\"\n    (swap_numbers(6,4) == (4,6)), \"failed\"\n    (swap_numbers(11,13) == (13,11)), \"failed\"\n    (swap_numbers(23,13) == (13,23)), \"failed\"\n    (swap_numbers(7,4) == (4,7)), \"failed\"\n    (swap_numbers(1,3) == (3,1)), \"failed\"\n    (swap_numbers(12,14) == (14,12)), \"failed\"\n    (swap_numbers(5,1) == (1,5)), \"failed\"\n    (swap_numbers(1,1) == (1,1)), \"failed\"\n    (swap_numbers(5,5) == (5,5)), \"failed\"\n    (swap_numbers(3,3) == (3,3)), \"failed\"\n    (swap_numbers(0,0) == (0,0)), \"failed\""
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(2,2) == (2,2)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers((5,4), (4,5)) == (4,5)\nassert swap_numbers((5,4), (4,1)) == (4,5)\nassert swap_numbers((3,2), (2,3)) == (2,3)\nassert swap_numbers((3,2), (2,1)) == (3,2)\nassert swap_numbers((1,2,3,4,5), (1,2,3,4,5)) == (2,3,4,5,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(10,3) == (3,10)\nassert     swap_numbers(10,1) == (1,10)\nassert     swap_numbers(1,10) == (10,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert swap_numbers(2, 3) == (3, 2)\nassert swap_numbers(1, 3) == (3, 1)\nassert swap_numbers(1, 1) == (1, 1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(2,4) == (4,2)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,2) == (2,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_numbers(3,5) == (5,3)\nassert     swap_numbers(100,10) == (10,100)\nassert     swap_numbers(10,10) == (10,10)\nassert     swap_numbers(5,5) == (5,5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    swap_numbers(1,2) == (2,1)\n    swap_numbers(2,1) == (1,2)\n    swap_numbers(1,1) == (1,1)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((1,2,3,4),(3,2,1,4)) == (4,4,4,4)\nassert    maximize_elements((1,2,3,4),(2,3,4,1)) == (4,4,4,1)\nassert    maximize_elements((2,3,4,1),(1,2,3,4)) == (4,4,4,4)\n\nprint('All tests passed.'"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements(    (1,3), (4,5)) == (4, 5)\nassert     maximize_elements(    (2,5), (1,3)) == (5, 3)\nassert     maximize_elements(    (1,2), (2,3)) == (3, 2)\nassert     maximize_elements(    (5,4), (6,7)) == (6, 7)\nassert     maximize_elements(    (8,4), (6,7)) == (6, 7)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements((6, 2), (8, 1)) == (6, 8)\nassert     maximize_elements((-4, 7), (-2, 6)) == (-4, 6)\nassert     maximize_elements((1, -5), (3, 2)) == (4, 6)\nassert     maximize_elements((0, 0), (0, 0)) == (0, 0)\nassert     maximize_elements((5, 5), (5, 5)) == (5, 5)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements((5, 2), (10, -1)) == (10, -1)\nassert     maximize_elements((5, 2), (20, -1)) == (20, -1)\nassert     maximize_elements((5, 2), (10, 2)) == (10, 2)\nassert     maximize_elements((5, 2), (3, 1)) == (5, 2)\nassert     maximize_elements((5, 2), (4, 5)) == (5, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximize_elements((1,2,3), (2,3,1)) == (3,3,3)\nassert     maximize_elements((1,1,1), (1,2,1)) == (2,2,2)\nassert     maximize_elements((1,1,1), (1,2,2)) == (1,1,1)\n\n'''\nImplement a function max_elem that takes any number of arguments, \nand returns the element which is \"greater\" in the sense of:\n    a) if the first argument is equal to an element in the argument sequence,\n       then the element itself should be returned\n    b) if the first argument is not equal to an element in the argument sequence,\n       then the element with the largest value should be returned\n    c) if all elements in the argument sequence are equal, then return -1\n\nInput:\n- 1: [1, 2, 3, 4, 5]\n- 2: [-10, -9, -8, -7, -6]\n- 3: [0.9, 0.8, 0.7, 0.6, 0.5]\n- 4: [None, None, None, None, None]\n- 5: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((1, 2), (1, 2)) == (1, 2)\nassert     maximize_elements((4, 3, 2, 1), (1, 2)) == (4, 3, 2, 1)\nassert     maximize_elements((1, 2), (1, 2)) == (1, 2)\nassert     maximize_elements((1, 2), (1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     maximize_elements((1, 2, 3, 4), (1, 2)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((1, 2), (1, 2, 3)) == (3, 3)\nassert     maximize_elements((1, 2), (3, 4, 5, 6)) == (6, 6)\nassert     maximize_elements((7, 4, 3), (9, 2, 1, 0)) == (9, 9)\nassert     maximize_elements((7, 4, 3), (3, 5, 8)) == (5, 8)\nassert     maximize_elements((7, 4, 3, 5), (9, 2, 1, 0)) == (9, 9)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    maximize_elements((1,2,3,4,5), (1,2,3,4,5)) == (5, 4, 3, 2, 1)\n    maximize_elements((1,2,3,4,5), (3,4,1,2,5)) == (5, 4, 3, 2, 1)\n    maximize_elements((-1,2,3,4,5), (-2,-1,2,3,4)) == (5, 4, 3, 2, 1)\n    maximize_elements((1,2,3,4,5), (5,4,3,2,1)) == (1,2,3,4,5)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((1, 2, 3, 4, 5), (4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5)\nassert     maximize_elements((1, 2, 3, 4, 5), (4, 5, 6, 7)) == (4, 5, 6, 7)\nassert     maximize_elements((1, 2, 3, 4), (4, 5, 6, 7, 8, 9, 10)) == (4, 5, 6, 7)\nassert     maximize_elements((1, 2, 3, 4), (4, 5, 6)) == (4, 5, 6)\nassert     maximize_elements((1, 2, 3, 4, 5), ()) == ()\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert newman_prime(2) == 3\nassert newman_prime(100) == 199\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    pass"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    pass\n\nassert newman_prime(5) == 2\nassert newman_prime(7) == 5\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"=== Test 10 ===\")\nprint(\"Newman-shanks\u2013williams (n=4):\", newman_prime(4))\nprint(\"Newman-shanks\u2013williams (n=1):\", newman_prime(1))\nprint(\"Newman-shanks\u2013williams (n=11):\", newman_prime(11))\nprint(\"Newman-shanks\u2013williams (n=23):\", newman_prime(23))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     newman_prime(1) == 2, \"Testing function for correct output\"\nassert     newman_prime(2) == 5, \"Testing function for correct output\"\nassert     newman_prime(3) == 7, \"Testing function for correct output\"\nassert     newman_prime(4) == 11, \"Testing function for correct output\"\nassert     newman_prime(5) == 13, \"Testing function for correct output\"\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 5\nassert     newman_prime(5) == 13\nassert     newman_prime(8) == 101\nassert     newman_prime(10) == 103\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     newman_prime(4) == 5\nassert     newman_prime(5) == 7\nassert     newman_prime(6) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndivision_elements((10, 3, 4, 6), (5, 2, 2, 1)) == (2.5, 1.8333333333333333, 2, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     division_elements((1,2,3), (1,0,2)) == (1,0,2)     # 1 / 2\nassert     division_elements((2,2,3), (1,0,2)) == (0,1,3)    # 2 / 2\nassert     division_elements((3,3,3), (1,0,2)) == (1,0,3)    # 3 / 2\nassert     division_elements((-1,0,2), (2,-2,1)) == (-0.5,0.5,0.5)    # -1 / 2\n\ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements((5, 2), (10, 4)) == (0.8, 1.4)\nassert     division_elements((3, 2), (10, 4)) == (1.5, 0.8)\nassert     division_elements((0, 2), (10, 4)) == (0.0, 0.8)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (division_elements(('a', 'b'), ('a', 'b')) == ('a', 'b')), \\\n    \"Wrong Answer. Your function should perform division operation element-wise.\"\nassert     (division_elements(('a', 'b'), ('d', 'e')) == ('0.0', '0.5')), \\\n    \"Wrong Answer. Your function should perform division operation element-wise.\"\nassert     (division_elements(('a', 'b'), ('1', '0')) == ('a', 'b')), \\\n    \"Wrong Answer. Your function should perform division operation element-wise.\"\nassert     (division_elements(('d', 'e'), ('a', 'b')) == ('0.0', '0.5')), \\\n    \"Wrong Answer. Your function should perform division operation element-wise.\"\nassert     (division_elements(('d', 'e'), ('1', '0')) == ('d', 'e')), \\\n    \"Wrong Answer. Your function should perform division operation element-wise.\"\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     division_elements((1,2,3), (4,5,6)) == (1.2, 2.5, 3.8)\nassert     division_elements((4,2,8), (2,5,6)) == (4.0, 2.5, 8.0)\nassert     division_elements((3,2,1), (4,6,9)) == (3.0, 2.5, 1.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     division_elements((1,2), (4,2)) == (1,2)\nassert     division_elements((2,3), (4,6)) == (0.5, 2.5)\nassert     division_elements((8,10), (4,6)) == (4, 2)\nassert     division_elements((1,4), (5,6)) == (0.5, 1.5)\nassert     division_elements((6,4), (5,6)) == (1.5, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements( (1, 2), (2, 4)) == (0.5, 1.0)\nassert     division_elements( (0, 0), (0, 0)) == (0.0, 0.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((1, 2), (3, 4)) == (0.5, 0.5)\nassert     division_elements((1, 2, 4), (5, 6, 8)) == (1.0/4.0, 2.0/4.0, 4.0/8.0)\nassert     division_elements((1, 2, 4), (5, 6, 9)) == (1.0/4.0, 2.0/4.0, 4.0/9.0)\nassert     division_elements((1, 2, 4), (5, 6, 8)) == (1.0/4.0, 2.0/4.0, 4.0/8.0)\nassert     division_elements((1, 2, 4), (5, 6, 9)) == (1.0/4.0, 2.0/4.0, 4.0/9.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements((1,2),(2,1)) == (1,0)\nassert     division_elements((1,3),(2,1)) == (1,0)\nassert     division_elements((1,2),(3,1)) == (1,0)\nassert     division_elements((2,1),(2,1)) == (0,1)\nassert     division_elements((4,4),(3,1)) == (2,1)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_max(list1):\n    '''\n    Write a function that takes in a list and returns the maximum value in the list.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_pair(d):\n    '''\n    Write a function that takes in a dictionary of integers and integers and returns True if there is a pair of integers in the dictionary whose sum is equal to the integer provided and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 4) == ([1, 2, 3, 4], [5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 5) == ([1, 2, 3, 4], [5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 6) == ([1, 2, 3, 4], [5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 7) == ([1, 2, 3, 4, 5, 6], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([2, 4, 3, 5], 2) == (\n    [2, 4],\n    [3, 5])\nassert split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert split_two_parts([1, 2, 3, 4, 5], 1) == ([1, 2, 3, 4, 5], [])\nassert split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsplit_two_parts([2, 3, 4, 5], 2) == ([2, 3], [4, 5])\nassert \nsplit_two_parts([2, 3, 4, 5], 1) == ([2, 3, 4], [5])\nassert \nsplit_two_parts([2, 3, 4, 5], 0) == ([], [2, 3, 4, 5])\nassert \nsplit_two_parts([2, 3, 4, 5], 6) == ([], [2, 3, 4, 5])\nassert \nsplit_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_two_parts([1,2,3,4,5], 2) == ((1,2), (3,4,5)), 'Wrong output'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([], 2) == ([], [])\nassert     split_two_parts([], 4) == ([], [])\nassert     split_two_parts([1], 2) == ([1], [])\nassert     split_two_parts([1], 4) == ([1], [])\nassert     split_two_parts([1,2], 2) == ([1], [2])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_two_parts(L, list1):\n    '''\n    Write a function that takes in two lists, L and list1, and checks to see if they are two disjoint parts of the same list, where the elements of list1 also occur in L.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a new list with all the duplicates removed.\n    '''\n    pass\n\nassert \n\ndef find_permutation(string1, string2):\n    '''\n    Write a function that takes in two strings and returns a boolean representing whether or not the first string can be rearranged to match the second string.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dog_age(0) == 0\nassert     dog_age(1) == 1\nassert     dog_age(2) == 1.5\nassert     dog_age(4) == 3\nassert     dog_age(7) == 7.5\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert dog_age(10) == 2, 'incorrect'\nassert dog_age(12) == 7, 'incorrect'\nassert dog_age(17) == 8, 'incorrect'\nassert dog_age(22) == 10, 'incorrect'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(8) == 32\nassert     dog_age(4) == 12\nassert     dog_age(15) == 24\nassert     dog_age(30) == 48\nprint(\"\\nCongratulations! All test cases passed.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dog_age(1) == 0.0\nassert     dog_age(2) ==.5\nassert     dog_age(3) == 1.0\nassert     dog_age(100) == 33.33333333333333\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dog_age(10) == 10\nassert     dog_age(20) == 9\nassert     dog_age(30) == 8\nassert     dog_age(40) == 7\nassert     dog_age(50) == 6\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert list_split(['hi', 'hello', 'goodbye', 'goodnight'], 3) == [['hi', 'hello'], ['goodbye', 'goodnight']]\nassert list_split(['one', 'two', 'three', 'four', 'five'], 2) == [['one', 'two'], ['three', 'four'], ['five']]\nassert list_split(['one', 'two', 'three', 'four', 'five'], 4) == [['one', 'two'], ['three', 'four'], ['five']]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7], 1) == [[1], [2], [3], [4], [5], [6], [7]]\nassert list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7]]\nassert list_split([1, 2, 3, 4, 5, 6, 7], 5) == [[1, 2, 3, 4], [5, 6, 7]]\nassert list_split([1, 2, 3, 4, 5, 6, 7], 7) == [[1, 2, 3, 4, 5], [6, 7]]\nassert list_split([1, 2, 3, 4, 5, 6, 7], 10) == [[1, 2, 3, 4, 5, 6, 7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_duplicates(S):\n    '''\n    Write a function that takes in a list S and removes any elements that are duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]\nassert list_split([1, 2, 3, 4, 5], 3) == [[1], [2], [3], [4], [5]]\nassert list_split([1, 2, 3, 4, 5], 4) == [[1, 2], [3, 4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5], 3) == [[1,2,3],[4,5]]\nassert     list_split([1,2,3,4,5], 4) == [[1,2,3,4]]\nassert     list_split([1,2,3,4,5], 5) == [[1],[2],[3],[4],[5]]\nassert     list_split([1,2,3,4,5], 6) == [[1,2],[3,4],[5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_split([1,2,3,4], 2) == [[1,2],[3,4]]\nassert     list_split([1,2,3,4], 3) == [[1,2,3],[4]]\nassert     list_split([1,2,3,4], 4) == [[1,2,3,4]]\nassert     list_split([1,2,3,4], 5) == [[1,2,3,4]]\nassert     list_split([1,2,3,4], 6) == [[1,2,3,4]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 3) == [[1], [2, 3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 4) == [[1], [2], [3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 5) == [[1], [2], [3], [4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 6) == [[1], [2], [3], [4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 4) == [[1, 2, 3, 4], [5, 6, 7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 5) == [[1, 2, 3, 4, 5], [6, 7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 6) == [[1, 2, 3, 4, 5, 6], [7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 7) == [[1, 2, 3, 4, 5, 6, 7], [8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3], 2) == [[1, 2], [3]]\nassert     list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 2) == [[1, 2], [3, 4], [5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 2) == [[1, 2], [3, 4], [5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]\n\nprint('You got it!')"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsurface_cube(5) == 20\nassert     lateralsurface_cube(5.5) == 17.5\nassert     lateralsurface_cube(1) == 0\nassert     lateralsurface_cube(0) == 0\nassert     lateralsurface_cube(1.5) == 5\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsurface_cube(1) == 1\nassert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(4) == 24\nassert     lateralsurface_cube(5) == 30\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lateralsurface_hexagon(l):\n    '''\n    Write a function to find the lateral surface area of a hexagon given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cube(1) == 4\nassert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 8\nassert     lateralsurface_cube(4) == 10\nassert     lateralsurface_cube(5) == 12\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(square_Sum(9))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsquare_Sum(3) == 9\nassert \nsquare_Sum(6) == 44\nassert \nsquare_Sum(5) == 55\nassert \nsquare_Sum(0) == 0\nassert \nsquare_Sum(7) == 49\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_Sum(0) == 0\nsquare_Sum(1) == 1\nsquare_Sum(2) == 1\nsquare_Sum(3) == 2\nsquare_Sum(4) == 2\nsquare_Sum(5) == 9\nsquare_Sum(6) == 5\nsquare_Sum(7) == 14\nsquare_Sum(8) == 4\nsquare_Sum(9) == 36\nsquare_Sum(10) == 36\nsquare_Sum(11) == 28\nsquare_Sum(12) == 8\nsquare_Sum(13) == 11\nsquare_Sum(14) == 64\nsquare_Sum(15) == 50\nsquare_Sum(16) == 22\nsquare_Sum(17) == 14\nsquare_Sum(18) == 26\nsquare_Sum(19) == 22\nsquare_Sum(20) == 36\nsquare_Sum(21) == 36\nsquare_Sum(22) == 64\nsquare_Sum(23) == 50\nsquare_Sum(24) == 88\nsquare_Sum(25) == 77\nsquare_Sum(26) == 76\nsquare_Sum(27) == 64\nsquare_Sum(28) == 64\nsquare_Sum(29) == 88\nsquare_Sum(30) == 88\nsquare_Sum(31) == 88\nsquare_Sum(32) == 88\nsquare_Sum(33) == 88\nsquare_Sum(34) == 88\nsquare_Sum(35) == 88\nsquare_Sum(36) == 88\nsquare_Sum(37) == 88\nsquare_Sum(38) == 88\nsquare_Sum(39) == 88\nsquare_Sum(40) == 88\nsquare_Sum(41) == 88\nsquare_Sum(42) == 88\nsquare_Sum(43) == 88\nsquare_Sum(44) == 88\nsquare_Sum(45) == 88\nsquare_Sum(46) == 88\nsquare_Sum(47) == 88\nsquare_Sum(48) == 88\nsquare_Sum(49) == 88\nsquare_Sum(50) == 88\nsquare_Sum(51) == 88\nsquare_Sum(52) == 88\nsquare_Sum(53) == 88\nsquare_Sum(54) == 88\nsquare_Sum(55) == 88\nsquare_Sum(56) == 88\nsquare_Sum(57) == 88\nsquare_Sum(58) == 88\nsquare_Sum(59) == 88\nsquare_Sum(60) == 88\nsquare_Sum(61) == 88\nsquare_Sum(62) == 88\nsquare_Sum(63) == 88\nsquare_Sum(64) == 88\nsquare_Sum(65) == 88\nsquare_Sum(66) == 88\nsquare_Sum(67) == 88\nsquare_Sum(68) == 88\nsquare_Sum(69) == 88\nsquare_Sum(70) == 88\nsquare_Sum(71) == 88\nsquare_Sum(72) == 88\nsquare_Sum(73) == 88\nsquare_Sum(74) == 88\nsquare_Sum(75) == 88\nsquare_Sum(76) == 88\nsquare_Sum(77) == 88\nsquare_Sum(78) == 88\nsquare_Sum(79) == 88\nsquare_Sum(80) == 88\nsquare_Sum(81) == 88\nsquare_Sum(82) == 88\nsquare_Sum(83) == 88\nsquare_Sum(84) == 88\nsquare_Sum(85) == 88\nsquare_Sum(86) == 88\nsquare_Sum(87) == 88\nsquare_Sum(88) == 88\nsquare_Sum(89) == 88\nsquare_Sum(90) == 88\nsquare_Sum(91) == 88\nsquare_Sum(92) == 88\nsquare_Sum(93) == 88\nsquare_Sum(94) == 88\nsquare_Sum(95) == 88\nsquare_Sum(96) == 88\nsquare_Sum(97) == 88\nsquare_Sum(98) == 88\nsquare_Sum(99) == 88\nsquare_Sum(100) == 88\nsquare_Sum(101) == 88\nsquare_Sum(102) == 88\nsquare_Sum(103) == 88\nsquare_Sum(104) == 88\nsquare_Sum(105) == 88\nsquare_Sum(106) == 88\nsquare_Sum(107) == 88\nsquare_Sum(108) == 88\nsquare_Sum(109) == 88\nsquare_Sum(110) == 88\nsquare_Sum(111) == 88\nsquare_Sum(112) == 88\nsquare_Sum(113) == 88\nsquare_Sum(114) == 88\nsquare_Sum(115) == 88\nsquare_Sum(116) == 88\nsquare_Sum(117) == 88\nsquare_Sum(118) == 88\nsquare_Sum(119) == 88\nsquare_Sum(120) == 88\nsquare_Sum(121) == 88\nsquare_Sum(122) == 88\nsquare_Sum(123) == 88\nsquare_Sum(124) == 88\nsquare_Sum(125) == 88\nsquare_Sum(126) == 88\nsquare_Sum(127) == 88\nsquare_Sum(128) == 88\nsquare_Sum(129) == 88\nsquare_Sum(130) == 88\nsquare_Sum(131) == 88\nsquare_Sum(132) == 88\nsquare_Sum(133) == 88\nsquare_Sum(134) == 88\nsquare_Sum(135) == 88\nsquare_Sum(136) == 88\nsquare_Sum(137) == 88\nsquare_Sum(138) == 88\nsquare_Sum(139) == 88\nsquare_Sum(140) == 88\nsquare_Sum(141) == 88\nsquare_Sum(142) == 88\nsquare_Sum(143) == 88\nsquare_Sum(144) == 88\nsquare_Sum(145) == 88\nsquare_Sum(146) == 88\nsquare_Sum(147) == 88\nsquare_Sum(148) == 88\nsquare_Sum(149) == 88\nsquare_Sum(150) == 88\nsquare_Sum(151) == 88\nsquare_Sum(152) == 88\nsquare_Sum(153) == 88\nsquare_Sum(154) == 88\nsquare_Sum(155) == 88\nsquare_Sum(156) == 88\nsquare_Sum(157) == 88\nsquare_Sum(158) == 88\nsquare_Sum(159) == 88\nsquare_Sum(160) == 88\nsquare_Sum(161) == 88\nsquare_Sum(162) == 88\nsquare_Sum(163) == 88\nsquare_Sum(164) == 88\nsquare_Sum(165) == 88\nsquare_Sum(166) == 88\nsquare_Sum(167) == 88\nsquare_Sum(168) == 88\nsquare_Sum(169) == 88\nsquare_Sum(170) == 88\nsquare_Sum(171) == 88\nsquare_Sum(172) == 88\nsquare_Sum(173) == 88\nsquare_Sum(174) == 88\nsquare_Sum(175) == 88\nsquare_Sum(176) == 88\nsquare_Sum(177) == 88\nsquare_Sum(178) == 88\nsquare_Sum(179) == 88\nsquare_Sum(180) == 88\nsquare_Sum(181) == 88\nsquare_Sum(182) == 88\nsquare_Sum(183) == 88\nsquare_Sum(184) == 88\nsquare_Sum(185) == 88\nsquare_Sum(186) == 88\nsquare_Sum(187) == 88\nsquare_Sum(188) == 88\nsquare_Sum(189) == 88\nsquare_Sum(190) == 88\nsquare_Sum(191) == 88\nsquare_Sum(192) == 88\nsquare_Sum(193) == 88\nsquare_Sum(194) == 88\nsquare_Sum(195) == 88\nsquare_Sum(196) == 88\nsquare_Sum(197) == 88\nsquare_Sum(198) == 88\nsquare_Sum(199) == 88\nsquare_Sum(200) == 88\nsquare_Sum(201) == 88\nsquare_Sum(202) == 88\nsquare_Sum(203) == 88\nsquare_Sum(204) == 88\nsquare_Sum(205) == 88\nsquare_Sum(206) == 88\nsquare_Sum(207) == 88\nsquare_Sum(208) == 88\nsquare_Sum(209) == 88\nsquare_Sum(210) == 88\nsquare_Sum(211) == 88\nsquare_Sum(212) == 88\nsquare_Sum(213) == 88\nsquare_Sum(214) == 88\nsquare_Sum(215) == 88\nsquare_Sum(216) == 88\nsquare_Sum(217) == 88\nsquare_Sum(218) == 88\nsquare_Sum(219) == 88\nsquare_Sum(220) == 8"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(square_Sum(5))\nprint(square_Sum(4))\nprint(square_Sum(1))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_Sum(0) == 0, \"square_Sum is wrong\"\nassert     square_Sum(2) == 4, \"square_Sum is wrong\"\nassert     square_Sum(7) == 4, \"square_Sum is wrong\"\nassert     square_Sum(8) == 36, \"square_Sum is wrong\"\nassert     square_Sum(10) == 285, \"square_Sum is wrong\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef print_star_num(n): \n    '''\n    Write a function to print then'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_star_num(2) == 2\nassert     find_star_num(1) == 3\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 8\nassert     find_star_num(4) == 13\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nA Python program to find the \nnth non-repeating character \nusing Hash Table \n'''\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_star_num(1) == 1, 'Wrong return value'\nassert     find_star_num(2) == 2, 'Wrong return value'\nassert     find_star_num(3) == 3, 'Wrong return value'\nassert     find_star_num(4) == 4, 'Wrong return value'\nassert     find_star_num(5) == 5, 'Wrong return value'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_star_num(1) == 3, \\\n        \"find_star_num should return 3 if n is 1\"\nassert     find_star_num(2) == 5, \\\n        \"find_star_num should return 5 if n is 2\"\nassert     find_star_num(3) == 7, \\\n        \"find_star_num should return 7 if n is 3\"\nassert     find_star_num(4) == 11, \\\n        \"find_star_num should return 11 if n is 4\"\nassert     find_star_num(5) == 13, \\\n        \"find_star_num should return 13 if n is 5\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_star_num(1) == 1\n    find_star_num(5) == 12\n    find_star_num(10) == 274\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_perfect_square(x):\n    \"\"\"\n    Verifies whether the given integer is perfect square or not.\n    \"\"\"\n    # make sure the given integer is positive\n    assert x > 0\n\n    # check if the integer is perfect square\n    square_root = int(x ** 0.5)\n    return square_root * square_root == x"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_star_num(1) == 0\nassert     find_star_num(2) == 1\nassert     find_star_num(3) == 2\nassert     find_star_num(4) == 3\nassert     find_star_num(5) == 4\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_stars(n, k, m):\n    '''\n    You are given n balloons, indexed from 0 to n-1. \n    Each balloon is painted with a number on it represented by array nums. \n    You are asked to burst all the balloons.\n    If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. \n    If i == n, then you cannot burst balloon i, so the answer is nums[i] * nums[n] * nums[n] coins. \n    \n    Given n balloons, find the maximum coins you can collect by bursting them.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(find_star_num(5))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert find_star_num(5) == 3\n    "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a function to find the ascii value of a character.\nInput:\n    character: a string\nReturn:\n    a single integer number\n    \nExample:\n    Input:    $\n    Output:    10\n'''\n\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nascii_value('a') == 97\nascii_value('b') == 98\nascii_value('c') == 99\nascii_value('d') == 100\nascii_value('e') == 101\nascii_value('f') == 102\nascii_value('g') == 103\nascii_value('h') == 104\nascii_value('i') == 105\nascii_value('j') == 106\nascii_value('k') == 107\nascii_value('l') == 108\nascii_value('m') == 109\nascii_value('n') == 110\nascii_value('o') == 111\nascii_value('p') == 112\nascii_value('q') == 113\nascii_value('r') == 114\nascii_value('s') == 115\nascii_value('t') == 116\nascii_value('u') == 117\nascii_value('v') == 118\nascii_value('w') == 119\nascii_value('x') == 120\nascii_value('y') == 121\nascii_value('z') == 122\nascii_value(' ') == 32\nascii_value('.') == 46\nascii_value(',') == 44\nascii_value(' ') == 32\nascii_value('\\n') == 10\nascii_value('\\t') == 9\nascii_value('\\r') == 13\nascii_value('\\x0b') == 10\nascii_value('\\x0c') == 10\nascii_value('\\x1b') == 27\nascii_value('\\x1c') == 28\nascii_value('\\x1d') == 29\nascii_value('\\x1e') == 30\nascii_value('\\x1f') == 31\nascii_value('\\x7f') == 127\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     ascii_value('x') == 'x'\nassert     ascii_value('y') == 'y'\nassert     ascii_value('a') == '49'\nassert     ascii_value('B') == '49'\nassert     ascii_value('Z') == '90'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('b') == 98\nassert     ascii_value('B') == 66\nassert     ascii_value('C') == 99\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('A') == 90\nassert     ascii_value('0') == 48\nassert     ascii_value(' ') == 32\nassert     ascii_value('\\t') == 9\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('!') == 33\nassert     ascii_value('@') == 64\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     ascii_value('a') == 97, '\\033[31m\\033[1mAscii Value Error: a\\033[0m'\nassert     ascii_value('b') == 98, '\\033[31m\\033[1mAscii Value Error: b\\033[0m'\nassert     ascii_value('c') == 99, '\\033[31m\\033[1mAscii Value Error: c\\033[0m'\nassert     ascii_value('d') == 100, '\\033[31m\\033[1mAscii Value Error: d\\033[0m'\nassert     ascii_value('e') == 101, '\\033[31m\\033[1mAscii Value Error: e\\033[0m'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('0') == 48\nassert     ascii_value('z') == 122\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7]) == 14\nassert     sum_even_and_even_index([3, 5, 2, 1, 6, 8, 7]) == 14\nassert     sum_even_and_even_index([5, 2, 4, 1, 7, 8, 6]) == 20\nassert     sum_even_and_even_index([7, 4, 6, 1, 2, 3]) == 15\nassert     sum_even_and_even_index([2, 4, 6, 1, 8, 3]) == 10\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nsum_even_and_even_index([1, 2, 3, 4, 5, 6])"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(6) == 5\nassert     even_Power_Sum(7) == 8\nassert     even_Power_Sum(5) == 25\nassert     even_Power_Sum(4) == 16\nassert     even_Power_Sum(3) == 4\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(even_Power_Sum(1)) # should be 0\nprint(even_Power_Sum(5)) # should be 2500\nprint(even_Power_Sum(10)) # should be 3125\nprint(even_Power_Sum(2)) # should be 6\n\n\ndef even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_Power_Sum(5) == 12, \"incorrect result\"\nassert     even_Power_Sum(7) == 14, \"incorrect result\"\nassert     even_Power_Sum(8) == 16, \"incorrect result\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_Power_Sum(5) == 12\nassert     even_Power_Sum(6) == 20\nassert     even_Power_Sum(10) == 500\n\n\n\ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_Power_Sum(0) == 0, 'input: 0'\nassert     even_Power_Sum(1) == 0, 'input: 1'\nassert     even_Power_Sum(2) == 10, 'input: 2'\nassert     even_Power_Sum(3) == 26, 'input: 3'\nassert     even_Power_Sum(4) == 1720, 'input: 4'\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_Power_Sum(0) == 0\nassert even_Power_Sum(1) == 1\nassert even_Power_Sum(4) == 9\nassert even_Power_Sum(5) == 36"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_Power_Sum(5) == 21\nprint('correct')\n\n\ndef even_Power_Sum_2(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_Power_Sum(5) == (5 * 5 * 5 * 5 * 5)\n\ndef even_Power_Sum_2(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [(5,6),(3,4),(1,2)], 'Your rear_extract did not return the correct result'\nassert     rear_extract([(1,2,3),(4,5,6)]) == [(4,5,6),(1,2,3)], 'Your rear_extract did not return the correct result'\n\ndef middle_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the middle element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['b', 'c', 'a']\nassert    rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == ['c', 'd', 'a', 'b']\nassert    rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == ['d', 'e', 'a', 'b', 'c']\n\n\n\ndef euclid_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the Euclidean distance of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([(1,2),(3,4)]) ==     [2,4]\nassert     rear_extract([(1,2),(3,4)]) ==     [4,2]\nassert     rear_extract([(1,2),(3,4)]) ==     [4,2]\nassert     rear_extract([(1,2),(3,4)]) ==     [4,2]\nassert     rear_extract([(1,2),(3,4)]) ==     [4,2]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rear_extract([(1,2,3),(4,5,6),(7,8,9)]) == [(7,8,9),(1,2,3),(4,5,6)]\nassert     rear_extract([]) == []\nassert     rear_extract([(1,2,3)]) == [(1,2,3)]\nassert     rear_extract([(1,2,3)],2) == [(1,2,3)]\n\ndef reorder_data(a_list):\n    '''\n    Write a function that takes in a list and returns a new list in which the original list was reordered using the \n    Python list method \"sort\".\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    rear_extract([('M', 'B', 'S', 'F', 'S'), ('M', 'B', 'S', 'S', 'B'), ('S', 'B', 'S', 'F', 'S'), ('S', 'B', 'S', 'S', 'B')]) == ['B', 'B', 'S', 'F', 'S']\n    rear_extract([('M', 'B', 'S', 'F', 'S'), ('M', 'B', 'S', 'S', 'B'), ('S', 'B', 'S', 'F', 'S'), ('S', 'B', 'S', 'S', 'B')]) == ['S', 'S', 'S', 'B']\n    rear_extract([('M', 'B', 'S', 'F', 'S'), ('M', 'B', 'S', 'S', 'B'), ('S', 'B', 'S', 'F', 'S'), ('S', 'B', 'S', 'S', 'B')]) == ['S', 'S', 'S', 'S']\n    rear_extract([('M', 'B', 'S', 'F', 'S'), ('M', 'B', 'S', 'S', 'B'), ('S', 'B', 'S', 'F', 'S'), ('S', 'B', 'S', 'S', 'B')]) == ['B', 'B', 'S', 'S']\n    rear_extract([]) == []\n    rear_extract([('M', 'B', 'S', 'F', 'S')]) == ['S', 'F', 'B']\n    rear_extract([('M', 'B', 'S', 'F', 'S')]) == ['S', 'F', 'B']\n    rear_extract([('M', 'B', 'S', 'F', 'S')]) == ['S', 'F', 'B']\n    rear_extract([('M', 'B', 'S', 'F', 'S')]) == ['S', 'F', 'B']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [(3, 4), (5, 6)]\nassert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [(4, 5, 6), (7, 8, 9)]\nassert rear_extract([(1, 2), (3, 4), (5, 6)]) == [(5, 6), (1, 2)]\nassert rear_extract([(1, 2, 3)]) == [(1, 2, 3)]\nassert rear_extract([]) == []\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rear_extract([\"(1,2)\", \"(3,4)\", \"(5,6,7,8)\", \"(9,10,11,12)\", \"(13,14)\", \"(15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)\", \"(51,52)\", \"(53,54)\", \"(55,56)\", \"(57,58,59)\", \"(60,61)\", \"(62,63,64,65,66,67,68,69)\", \"(70,71)\", \"(72,73)\", \"(74,75,76,77,78,79)\", \"(80,81)\", \"(82,83)\", \"(84,85,86,87)\", \"(88,89)\", \"(90,91)\", \"(92,93)\", \"(94,95)\", \"(96,97)\", \"(98,99)\", \"(100,101)\", \"(102,103)\", \"(104,105,106)\", \"(107,108)\", \"(109,110)\", \"(111,112)\", \"(113,114)\", \"(115,116,117,118)\", \"(119,120)\", \"(121,122,123)\", \"(124,125)\", \"(126,127)\", \"(128,129)\", \"(130,131)\", \"(132,133)\", \"(134,135)\", \"(136,137)\", \"(138,139)\", \"(140,141)\", \"(142,143)\", \"(144,145)\", \"(146,147)\", \"(148,149)\", \"(150,151)\", \"(152,153)\", \"(154,155)\", \"(156,157)\", \"(158,159)\", \"(160,161)\", \"(162,163)\", \"(164,165)\", \"(166,167)\", \"(168,169)\", \"(170,171)\", \"(172,173)\", \"(174,175)\", \"(176,177)\", \"(178,179)\", \"(180,181)\", \"(182,183)\", \"(184,185)\", \"(186,187)\", \"(188,189)\", \"(190,191)\", \"(192,193)\", \"(194,195)\", \"(196,197)\", \"(198,199)\", \"(200,201)\", \"(202,203)\", \"(204,205)\", \"(206,207)\", \"(208,209)\", \"(210,211)\", \"(212,213)\", \"(214,215)\", \"(216,217)\", \"(218,219)\", \"(220,221)\", \"(222,223)\", \"(224,225)\", \"(226,227)\", \"(228,229)\", \"(230,231)\", \"(232,233)\", \"(234,235)\", \"(236,237)\", \"(238,239)\", \"(240,241)\", \"(242,243)\", \"(244,245)\", \"(246,247)\", \"(248,249)\", \"(250,251)\", \"(252,253)\", \"(254,255)\", \"(256,257)\", \"(258,259)\", \"(260,261)\", \"(262,263)\", \"(264,265)\", \"(266,267)\", \"(268,269)\", \"(270,271)\", \"(272,273)\", \"(274,275)\", \"(276,277)\", \"(278,279)\", \"(280,281)\", \"(282,283)\", \"(284,285)\", \"(286,287)\", \"(288,289)\", \"(290,291)\", \"(292,293)\", \"(294,295)\", \"(296,297)\", \"(298,299)\", \"(300,301)\", \"(302,303)\", \"(304,305)\", \"(306,307)\", \"(308,309)\", \"(310,311)\", \"(312,313)\", \"(314,315)\", \"(316,317)\", \"(318,319)\", \"(320,321)\", \"(322,323)\", \"(324,325)\", \"(326,327)\", \"(328,329)\", \"(330,331)\", \"(332,333)\", \"(334,335)\", \"(336,337)\", \"(338,339)\", \"(340,341)\", \"(342,343)\", \"(344,345)\", \"(346,347)\", \"(348,349)\", \"(350,351)\", \"(352,353)\", \"(354,355)\", \"(356,357)\", \"(358,359)\", \"(360,361)\", \"(362,363)\", \"(364,365)\", \"(366,367)\", \"(368,369)\", \"(370,371)\", \"(372,373)\", \"(374,375)\", \"(376,377)\", \"(378,379)\", \"(380,381)\", \"(382,383)\", \"(384,385)\", \"(386,387)\", \"(388,389)\", \"(390,391)\", \"(392,393)\", \"(394,395)\", \"(396,397)\", \"(398,399)\", \"(400,401)\", \"(402,403)\", \"(404,405)\", \"(406,407)\", \"(408,409)\", \"(410,411)\", \"(412,413)\", \"(414,415)\", \"(416,417)\", \"(418,419)\", \"(420,421)\", \"(422,423)\", \"(424,425)\", \"(426,427)\", \"(428,429)\", \"(430,431)\", \"(432,433)\", \"(434,435)\", \"(436,437)\", \"(438,439)\", \"(440,441)\", \"(442,443)\", \"(444,445)\", \"(446,447)\", \"(448,449)\", \"(450,451)\", \"(452,453)\", \"(454,455)\", \"(456,457)\", \"(458,459)\", \"(460,461)\", \"(462,463)\", \"(464,465)\", \"(466,467)\", \"(468,469)\", \"(470,471)\", \"(472,473)\", \"(474,475)\", \"(476,477)\", \"(478,479)\", \"(480,481)\", \"(482,483)\", \"(484,485)\", \"(486,487)\", \"(488,489)\", \"(490,491)\", \"(492,493)\", \"(494,495)\", \"(496,497)\", \"(498,499)\", \"(500,501)\", \"(502,503)\", \"(504,505)\", \"(506,507)\", \"(508,509)\", \"(510,511)\", \"(512,513)\", \"(514,515)\", \"(516,517)\", \"(518,519)\", \"(520,521),(522,523),(524,525),(526,527),(528,529),(530,531),(532,533),(534,535),(536,537),(538,539),(540,541),(542,543),(544,545),(546,547),(548,549),(550,551),(552,553),(554,555),(556,557),(558,559),(560,561),(562,563),(564,565),(566,567),(568,569),(570,571),(572,573),(574,575),(576,577),(578,579),(580,581),(582,583),(584,585),(586,587),(588,589),(590,591),(592,593),(594,595),(596,597),(598,599),(600,601),(602,603),(604,605),(606,607),(608,609),(610,611),(612,613),(614,615),(616,617),(618,619),(620,621),(622,623),(624,625),(626,627),(628,629),(630,631),(632,633),(634,635),(636,637),(638,639),(640,641),(642,643),(644,645),(646,647),(648,649),(650,651),(652,653),(654,655),(656,657),(658,659),(660,661),(662,663),(664,665),(666,667),(668,669),(670,671),(672,673),(674,675),(676,677),(678,679),(680,681),(682,683),(684,685),(686,687),(688,689),(690,691),(692,693),(694,695),(696,697),(698,699),(700,701),(702,703),(704,705),(706,707),(708,709),(710,711),(712,713),(714,715),(716,717),(718,719),(720,721),(722,723),(724,725),(726,727),(728,729),(730,731),(732,733),(734,735),(736,737),(738,739),(740,741),(742,743),(744,745),(746,747),(748,749),(750,751),(752,753),(754,755),(756,757),(758,759),(760,761),(762,763),(764,765),(766,767),(768,769),(770,771),(772,773),(774,775),(776,777),(778,779),(780,781)"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     substract_elements((1,2), (4,5)) == (3,3)\nassert     substract_elements((2,1), (4,5)) == (1,1)\nassert     substract_elements((3,4), (5,6)) == (3,2)\nassert     substract_elements((1,1), (2,2)) == (0,0)\nassert     substract_elements((2,2), (1,1)) == (1,1)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     substract_elements((1, 2, 3), (2, 2, 3)) == (0, 0, 1)\nassert     substract_elements((1, 2, 3), (4, 2, 3)) == (1, 1, 1)\nassert     substract_elements((1, 2, 3), (1, 1, 1)) == (2, 2, 2)\nassert     substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert     substract_elements((), ()) == ()\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     substract_elements((1,2), (3,4)) == (1,3)\nassert     substract_elements((1,2), (2,4)) == (0,3)\nassert     substract_elements((1,2), (2,4)) == (0,3)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (substract_elements((1,2,3),(4,5,6)) == (1,1,1))\nassert substract_elements((3,4,5),(1,2,3)) == (0,0,0)\nassert substract_elements((1,2,3),(2,2,2)) == (1,0,0)\nassert substract_elements((4,5,6),(3,4,5)) == (0,0,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     substract_elements((1,2,3), (4,5,6)) == (4,2,3)\nassert substract_elements((1,2,3,4), (4,5,6)) == (1,2,3,4)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     substract_elements((), ()) == ()\nassert     substract_elements((1,), (1,)) == (0,)\nassert     substract_elements((1, 2, 3), (1, 2, 3)) == (0, 1)\nassert     substract_elements((3, 4, 5), (2, 3, 4)) == (1, 2)\nassert     substract_elements((3, 4, 5), (5, 6, 7)) == (0, 0, 0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     substract_elements(('a','b','c'), ('a','b','c')) == None, 'Should return None'\nassert     substract_elements(('a','b','c'), ('c','b','a')) == (('a','c','b'),('c','b','a')), 'Should return (('a','c','b'),('c','b','a'))'\nassert     substract_elements(('a','b','c'), ('a','d','b')) == (('a','b','c'),('a','d','b')), 'Should return (('a','b','c'),('a','d','b'))'\nassert     substract_elements(('a','b','c'), ('b','a','c')) == (('a','b','c'),('b','a','c')), 'Should return (('a','b','c'),('b','a','c'))'\nassert     substract_elements(('a','b','c'), ('a','c','b')) == (('a','b','c'),('a','c','b')), 'Should return (('a','b','c'),('a','c','b'))'\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     substract_elements((1,2,3), (1,2)) == (1,0,3)\nassert     substract_elements((1,2,3), (2,1)) == (1,3,2)\nassert     substract_elements((1,2,3), (2,2)) == (0,1,0)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint( even_binomial_Coeff_Sum(1))  #0\nprint( even_binomial_Coeff_Sum(2))  #0\nprint( even_binomial_Coeff_Sum(4))  #0\nprint( even_binomial_Coeff_Sum(100)) #3640\nprint( even_binomial_Coeff_Sum(7)) #51\nprint( even_binomial_Coeff_Sum(7) == even_binomial_Coeff_Sum(8)) #True\nprint( even_binomial_Coeff_Sum(9)) #186\nprint( even_binomial_Coeff_Sum(10)) #81\nprint( even_binomial_Coeff_Sum(11)) #243\nprint( even_binomial_Coeff_Sum(12)) #120\nprint( even_binomial_Coeff_Sum(15)) #77\nprint( even_binomial_Coeff_Sum(16)) #243\nprint( even_binomial_Coeff_Sum(17)) #126\nprint( even_binomial_Coeff_Sum(18)) #72\nprint( even_binomial_Coeff_Sum(19)) #126\nprint( even_binomial_Coeff_Sum(20)) #81\nprint( even_binomial_Coeff_Sum(21)) #249\nprint( even_binomial_Coeff_Sum(22)) #126\nprint( even_binomial_Coeff_Sum(23)) #72\nprint( even_binomial_Coeff_Sum(24)) #72\nprint( even_binomial_Coeff_Sum(25)) #249\nprint( even_binomial_Coeff_Sum(26)) #126\nprint( even_binomial_Coeff_Sum(27)) #249\nprint( even_binomial_Coeff_Sum(28)) #123\nprint( even_binomial_Coeff_Sum(29)) #249\nprint( even_binomial_Coeff_Sum(30)) #72\nprint( even_binomial_Coeff_Sum(31)) #249\nprint( even_binomial_Coeff_Sum(32)) #249\nprint( even_binomial_Coeff_Sum(33)) #249\nprint( even_binomial_Coeff_Sum(34)) #249\nprint( even_binomial_Coeff_Sum(35)) #249\nprint( even_binomial_Coeff_Sum(36)) #249\nprint( even_binomial_Coeff_Sum(37)) #249\nprint( even_binomial_Coeff_Sum(38)) #249\nprint( even_binomial_Coeff_Sum(39)) #249\nprint( even_binomial_Coeff_Sum(40)) #249\nprint( even_binomial_Coeff_Sum(41)) #249\nprint( even_binomial_Coeff_Sum(42)) #249\nprint( even_binomial_Coeff_Sum(43)) #249\nprint( even_binomial_Coeff_Sum(44)) #249\nprint( even_binomial_Coeff_Sum(45)) #249\nprint( even_binomial_Coeff_Sum(46)) #249\nprint( even_binomial_Coeff_Sum(47)) #249\nprint( even_binomial_Coeff_Sum(48)) #249\nprint( even_binomial_Coeff_Sum(49)) #249\nprint( even_binomial_Coeff_Sum(50)) #249\nprint( even_binomial_Coeff_Sum(51)) #249\nprint( even_binomial_Coeff_Sum(52)) #249\nprint( even_binomial_Coeff_Sum(53)) #249\nprint( even_binomial_Coeff_Sum(54)) #249\nprint( even_binomial_Coeff_Sum(55)) #249\nprint( even_binomial_Coeff_Sum(56)) #249\nprint( even_binomial_Coeff_Sum(57)) #249\nprint( even_binomial_Coeff_Sum(58)) #249\nprint( even_binomial_Coeff_Sum(59)) #249\nprint( even_binomial_Coeff_Sum(60)) #249\nprint( even_binomial_Coeff_Sum(61)) #249\nprint( even_binomial_Coeff_Sum(62)) #249\nprint( even_binomial_Coeff_Sum(63)) #249\nprint( even_binomial_Coeff_Sum(64)) #249\nprint( even_binomial_Coeff_Sum(65)) #249\nprint( even_binomial_Coeff_Sum(66)) #249\nprint( even_binomial_Coeff_Sum(67)) #249\nprint( even_binomial_Coeff_Sum(68)) #249\nprint( even_binomial_Coeff_Sum(69)) #249\nprint( even_binomial_Coeff_Sum(70)) #249\nprint( even_binomial_Coeff_Sum(71)) #249\nprint( even_binomial_Coeff_Sum(72)) #249\nprint( even_binomial_Coeff_Sum(73)) #249\nprint( even_binomial_Coeff_Sum(74)) #249\nprint( even_binomial_Coeff_Sum(75)) #249\nprint( even_binomial_Coeff_Sum(76)) #249\nprint( even_binomial_Coeff_Sum(77)) #249\nprint( even_binomial_Coeff_Sum(78)) #249\nprint( even_binomial_Coeff_Sum(79)) #249\nprint( even_binomial_Coeff_Sum(80)) #249\nprint( even_binomial_Coeff_Sum(81)) #249\nprint( even_binomial_Coeff_Sum(82)) #249\nprint( even_binomial_Coeff_Sum(83)) #249\nprint( even_binomial_Coeff_Sum(84)) #249\nprint( even_binomial_Coeff_Sum(85)) #249\nprint( even_binomial_Coeff_Sum(86)) #249\nprint( even_binomial_Coeff_Sum(87)) #249\nprint( even_binomial_Coeff_Sum(88)) #249\nprint( even_binomial_Coeff_Sum(89)) #249\nprint( even_binomial_Coeff_Sum(90)) #249\nprint( even_binomial_Coeff_Sum(91)) #249\nprint( even_binomial_Coeff_Sum(92)) #249\nprint( even_binomial_Coeff_Sum(93)) #249\nprint( even_binomial_Coeff_Sum(94)) #249\nprint( even_binomial_Coeff_Sum(95)) #249\nprint( even_binomial_Coeff_Sum(96)) #249\nprint( even_binomial_Coeff_Sum(97)) #249\nprint( even_binomial_Coeff_Sum(98)) #249\nprint( even_binomial_Coeff_Sum(99)) #249\nprint( even_binomial_Coeff_Sum(100)) #249\nprint( even_binomial_Coeff_Sum(101)) #249\nprint( even_binomial_Coeff_Sum(102)) #249\nprint( even_binomial_Coeff_Sum(103)) #249\nprint( even_binomial_Coeff_Sum(104)) #249\nprint( even_binomial_Coeff_Sum(105)) #249\nprint( even_binomial_Coeff_Sum(106)) #249\nprint( even_binomial_Coeff_Sum(107)) #249\nprint( even_binomial_Coeff_Sum(108)) #249\nprint( even_binomial_Coeff_Sum(109)) #249\nprint( even_binomial_Coeff_Sum(110)) #249\nprint( even_binomial_Coeff_Sum(111)) #249\nprint( even_binomial_Coeff_Sum(112)) #249\nprint( even_binomial_Coeff"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert even_binomial_Coeff_Sum(0) == 1\nassert even_binomial_Coeff_Sum(1) == 1\nassert even_binomial_Coeff_Sum(2) == 2\nassert even_binomial_Coeff_Sum(3) == 6\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_binomial_Coeff_Sum(10) == 28\nassert     even_binomial_Coeff_Sum(20) == 656\nassert     even_binomial_Coeff_Sum(30) == 1088\nassert     even_binomial_Coeff_Sum(50) == 43939\nassert     even_binomial_Coeff_Sum(100) == 13552475\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_binomial_Coeff_Sum(1) == 1\nassert even_binomial_Coeff_Sum(2) == 1\nassert even_binomial_Coeff_Sum(3) == 0\nassert even_binomial_Coeff_Sum(5) == 3\nassert even_binomial_Coeff_Sum(6) == 2\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 4, \"Error! Test failed.\"\nassert     even_binomial_Coeff_Sum(10) == 48, \"Error! Test failed.\"\nassert     even_binomial_Coeff_Sum(5) == 24, \"Error! Test failed.\"\n\ndef even_binomial_Coeff_Sum_Test(n):\n    '''\n    This function is used to verify the correctness of even_binomial_Coeff_Sum.\n    '''\n    # Print out the even_binomial_Coeff_Sum function\n    print(\"Even_binomial_Coeff_Sum: \")\n    print(even_binomial_Coeff_Sum(n))\n    # Print out the result\n    print(\"\\n\", \"=\" * 60)\n    return True\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert even_binomial_Coeff_Sum(0) == 1\nassert even_binomial_Coeff_Sum(1) == 0\nassert even_binomial_Coeff_Sum(2) == 1\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_binomial_Coeff_Sum(0) == 0\nassert even_binomial_Coeff_Sum(1) == 1\nassert even_binomial_Coeff_Sum(2) == 1\nassert even_binomial_Coeff_Sum(3) == 0\nassert even_binomial_Coeff_Sum(4) == 1\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(1, 1) == 3.14, 'the expected volume should be 3.14'\nassert     volume_cylinder(3, 4) == 12, 'the expected volume should be 12'\nassert     volume_cylinder(4, 5) == 20, 'the expected volume should be 20'\nassert     volume_cylinder(5, 6) == 40, 'the expected volume should be 40'\nassert     volume_cylinder(6, 7) == 56, 'the expected volume should be 56'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cylinder(1,2) == 3.141592653589793, \"incorrect volume_cylinder\"\nassert     volume_cylinder(1,0.5) == 0.5, \"incorrect volume_cylinder\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(3,5) == 4.285714285714286, \"False\"\nassert     volume_cylinder(4,4) == 16.0, \"False\"\nassert     volume_cylinder(2,10) == 36.0, \"False\"\n\nprint('Passed all tests')\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(1.2,1) == 2.56\nassert     volume_cylinder(1.5,1) == 2.56\nassert     volume_cylinder(1.1,1) == 2.54\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(1,1) == 3.14, '1st assertion test failed'\nassert     volume_cylinder(2,2) == 28.274, '2nd assertion test failed'\nassert     volume_cylinder(2,5) == 28.274*2, '3rd assertion test failed'\nassert     volume_cylinder(4,10) == 786432, '4th assertion test failed'\n\n'''\n3.) Write a function that takes in a number of hours and a rate per hour and returns the number of \n    days that the person has to work. \n    \n    For example: if the function is given 5 hours and a rate of 2, then the number of days that the person has to work is:\n    Number of days: 5/2 = 2.5 days\n'''"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cylinder(10, 10) == 360\nassert     volume_cylinder(10, 10.5) == 375\nassert     volume_cylinder(10, 11) == 377.5\nassert     volume_cylinder(5, 10) == 25.083333333333333\nassert     volume_cylinder(0, 5) == 5\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cylinder(1,1) == 3.14, \"Your function should return 3.14.\"\nassert     volume_cylinder(5,2) == 18.016, \"Your function should return 18.016.\"\nassert     volume_cylinder(4,1.5) == 12.566, \"Your function should return 12.566.\"\nprint(\"Exercise 3 done.\")\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'c': 3}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'a': 1, 'b': 2}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 0) == {}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, -1) == {}, 'incorrect'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'a': 1, 'd': 4}, \"Should return only key `d`\"\nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 1) == {'a': 1, 'b': 2, 'c': 3}, \"Should return only key `c`\"\nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 0) == {'a': 1, 'b': 2, 'c': 3}, \"Should return only key `c`\"\nassert dict_filter({}, 1) == {}, \"Should return empty dictionary\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_filter({'hello': 'world', 'hi': 'hello'}, 1) == {'hello': 'world'}\nassert     dict_filter({'hello': 'world', 'hi': 'hello'}, 2) == {'hi': 'hello'}\nassert     dict_filter({'hello': 'world', 'hi': 'hello'}, 0) == {'hello': 'world'}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_filter({1: 10, 2: -1, 3: 4, 4: 3}, 3) == {4: 3, 2: -1}\nassert     dict_filter({1: 10, 2: -1, 3: 4, 4: 3}, 1) == {1: 10, 3: 4, 2: -1}\nassert     dict_filter({1: 10, 2: -1, 3: 4, 4: 3}, 2) == {2: -1}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({'a': 1, 'b': 3, 'c': 5}, 2) == {'b': 3, 'c': 5}, 'Wrong output'\nassert dict_filter({'a': 1, 'b': 3, 'c': 5}, 2) == {'a': 1, 'c': 5}, 'Wrong output'\nassert dict_filter({'a': 1, 'b': 3, 'c': 5}, 2) == {}, 'Wrong output'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter({1:2,3:4,5:6}, 3) == {3:4,5:6}\nassert     dict_filter({1:2,3:4,5:6}, 4) == {3:4,5:6}\nassert     dict_filter({1:2,3:4,5:6}, 5) == {3:4,5:6}\nassert     dict_filter({1:2,3:4,5:6}, 6) == {}"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    dict = {1:2,2:3,4:4,5:6,6:7,7:8,8:9}\n    n = 4\n    dict_filter(dict,n)\n    print(dict)\n\n    dict = {1:2,2:3,4:4,5:6,6:7,7:8,8:9}\n    n = 5\n    dict_filter(dict,n)\n    print(dict)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements([(1, 'a'), (2, 'b'), (2, 'c')]) == 2\nassert     count_first_elements([(2, 'a'), (1, 'b'), (3, 'c')]) == 1\nassert     count_first_elements([(1, 'a'), (2, 'b')]) == 0\nassert     count_first_elements([(2, 'a')]) == 1\nassert     count_first_elements([(1, 'a')]) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((1, 2, 3, 3)) == 1, \"The function has found 1 first element\"\nassert     count_first_elements((3, 2, 1, 3)) == 2, \"The function has found 2 first elements\"\nassert     count_first_elements((3, 2, 3, 1)) == 3, \"The function has found 3 first elements\"\nassert     count_first_elements((0, 1, 0, 2)) == 2, \"The function has found 2 first elements\"\nassert     count_first_elements((0, 1, 1, 2)) == 3, \"The function has found 3 first elements\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements((1,4,7,3,8,6,9,0,4)) == 2\nassert     count_first_elements((1,4,7,2,9,6,0,0,2)) == 3\nassert     count_first_elements((3,7,0,9,6,2,1,4,3)) == 4\nassert     count_first_elements((7,6,2,1,4,3,0,9,3)) == 3\nassert     count_first_elements((0,0,9,8,2,7,6,5,3)) == 4\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements((5,2,4,3)) == 2\nassert     count_first_elements((1,2,4,3)) == 1\nassert     count_first_elements((1,2,4,4,3)) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements((1,2,3,1)) == 0, \n        \"The first element was found\"\nassert     count_first_elements((1,3,1,2)) == 2, \n        \"The first element was found\"\nassert     count_first_elements((1,1,2,2)) == 3, \n        \"The first element was found\"\nassert     count_first_elements((1,2,3,4,5)) == 2, \n        \"The first element was found\"\nassert     count_first_elements((5,6,7,8,9)) == 3, \n        \"The first element was found\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements((3, 5, 6, 7, 5, 6, 6, 7, 2, 3, 4, 6, 2)) == 3\nassert     count_first_elements((3, 5, 6, 7, 5, 6, 7, 2, 3, 4, 6, 2)) == 6\nassert     count_first_elements((3, 5, 6, 7, 5, 6, 7, 2, 3, 4, 6, 2, 8)) == 1\nassert     count_first_elements((2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2)) == 4\nassert     count_first_elements((2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 8)) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements((1,2,2,3,3,4,1)) == 3\nassert     count_first_elements((2,3,4,1,2,3,3,4,1)) == 2\nassert     count_first_elements((1,2,2,2,2,2,2,2,2,2,2,2,2,2,2)) == 6\nassert     count_first_elements((2,3,4,1,2,3,3,4,1)) == 0\nassert     count_first_elements((1,2,2,3,3,4,1)) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements((1,2,3,4)) == 2\nassert     count_first_elements((1,1,1,1)) == 0\nassert     count_first_elements((1,2,3,4,5)) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements((1,2,1)) == 1\nassert     count_first_elements((1,1,2,2,2,3,4,2,3)) == 3\nassert     count_first_elements((1,1,2,2,2,3,4,2,3)) == 3\nassert     count_first_elements((1,1,2,2,2,3,4,2,3,1,1,1,1)) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements(('a', 'b', 'c', 'a', 'd')) == 4\nassert     count_first_elements(('a', 'b', 'c', 'd')) == 4\nassert     count_first_elements(('a',)) == 2\nassert     count_first_elements(('b', 'b')) == 2\nassert     count_first_elements(('c',)) == 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nis_num_decagonal(1) == 1\nis_num_decagonal(2) == 3\nis_num_decagonal(3) == 5\nis_num_decagonal(4) == 7\nis_num_decagonal(5) == 11\nis_num_decagonal(6) == 13\nis_num_decagonal(7) == 15\nis_num_decagonal(8) == 17\nis_num_decagonal(9) == 19\nis_num_decagonal(10) == 21\nis_num_decagonal(11) == 23\nis_num_decagonal(12) == 25\nis_num_decagonal(13) == 27\nis_num_decagonal(14) == 29\nis_num_decagonal(15) == 31\nis_num_decagonal(16) == 33\nis_num_decagonal(17) == 35\nis_num_decagonal(18) == 37\nis_num_decagonal(19) == 39\nis_num_decagonal(20) == 41\nis_num_decagonal(21) == 43\nis_num_decagonal(22) == 45\nis_num_decagonal(23) == 47\nis_num_decagonal(24) == 49\nis_num_decagonal(25) == 51\nis_num_decagonal(26) == 53\nis_num_decagonal(27) == 55\nis_num_decagonal(28) == 57\nis_num_decagonal(29) == 59\nis_num_decagonal(30) == 61\nis_num_decagonal(31) == 63\nis_num_decagonal(32) == 65\nis_num_decagonal(33) == 67\nis_num_decagonal(34) == 69\nis_num_decagonal(35) == 71\nis_num_decagonal(36) == 73\nis_num_decagonal(37) == 75\nis_num_decagonal(38) == 77\nis_num_decagonal(39) == 79\nis_num_decagonal(40) == 81\nis_num_decagonal(41) == 83\nis_num_decagonal(42) == 85\nis_num_decagonal(43) == 87\nis_num_decagonal(44) == 89\nis_num_decagonal(45) == 91\nis_num_decagonal(46) == 93\nis_num_decagonal(47) == 95\nis_num_decagonal(48) == 97\nis_num_decagonal(49) == 99\nis_num_decagonal(50) == 101\nis_num_decagonal(51) == 103\nis_num_decagonal(52) == 105\nis_num_decagonal(53) == 107\nis_num_decagonal(54) == 109\nis_num_decagonal(55) == 111\nis_num_decagonal(56) == 113\nis_num_decagonal(57) == 115\nis_num_decagonal(58) == 117\nis_num_decagonal(59) == 119\nis_num_decagonal(60) == 121\nis_num_decagonal(61) == 123\nis_num_decagonal(62) == 125\nis_num_decagonal(63) == 127\nis_num_decagonal(64) == 129\nis_num_decagonal(65) == 131\nis_num_decagonal(66) == 133\nis_num_decagonal(67) == 135\nis_num_decagonal(68) == 137\nis_num_decagonal(69) == 139\nis_num_decagonal(70) == 141\nis_num_decagonal(71) == 143\nis_num_decagonal(72) == 145\nis_num_decagonal(73) == 147\nis_num_decagonal(74) == 149\nis_num_decagonal(75) == 151\nis_num_decagonal(76) == 153\nis_num_decagonal(77) == 155\nis_num_decagonal(78) == 157\nis_num_decagonal(79) == 159\nis_num_decagonal(80) == 161\nis_num_decagonal(81) == 163\nis_num_decagonal(82) == 165\nis_num_decagonal(83) == 167\nis_num_decagonal(84) == 169\nis_num_decagonal(85) == 171\nis_num_decagonal(86) == 173\nis_num_decagonal(87) == 175\nis_num_decagonal(88) == 177\nis_num_decagonal(89) == 179\nis_num_decagonal(90) == 181\nis_num_decagonal(91) == 183\nis_num_decagonal(92) == 185\nis_num_decagonal(93) == 187\nis_num_decagonal(94) == 189\nis_num_decagonal(95) == 191\nis_num_decagonal(96) == 193\nis_num_decagonal(97) == 195\nis_num_decagonal(98) == 197\nis_num_decagonal(99) == 199\nis_num_decagonal(100) == 201\nis_num_decagonal(101) == 203\nis_num_decagonal(102) == 205\nis_num_decagonal(103) == 207\nis_num_decagonal(104) == 209\nis_num_decagonal(105) == 211\nis_num_decagonal(106) == 213\nis_num_decagonal(107) == 215\nis_num_decagonal(108) == 217\nis_num_decagonal(109) == 219\nis_num_decagonal(110) == 221\nis_num_decagonal(111) == 223\nis_num_decagonal(112) == 225\nis_num_decagonal(113) == 227\nis_num_decagonal(114) == 229\nis_num_decagonal(115) == 231\nis_num_decagonal(116) == 233\nis_num_decagonal(117) == 235\nis_num_decagonal(118) == 237\nis_num_decagonal(119) == 239\nis_num_decagonal(120) == 241\nis_num_decagonal(121) == 243\nis_num_decagonal(122) == 245\nis_num_decagonal(123) == 247\nis_num_decagonal(124) == 249\nis_num_decagonal(125) == 251\nis_num_decagonal(126) == 253\nis_num_decagonal(127) == 255\nis_num_decagonal(128) == 257\nis_num_decagonal(129) == 259\nis_num_decagonal(130) == 261\nis_num_decagonal(131) == 263\nis_num_decagonal(132) == 265\nis_num_decagonal(133) == 267\nis_num_decagonal(134) == 269\nis_num_decagonal(135) == 271\nis_num_decagonal(136) == 273\nis_num_decagonal(137) == 275\nis_num_decagonal(138) == 277\nis_num_decagonal(139) == 279\nis_num_decagonal(140) == 281\nis_num_decagonal(141) == 283\nis_num_decagonal(142) == 285\nis_num_decagonal(143) == 287\nis_num_decagonal(144) == 289\nis_num_decagonal(145) == 291\nis_num_decagonal(146) == 293\nis_num_decagonal(147) == 295\nis_num_decagonal(148) == 297\nis_num_decagonal(149) == 299\nis_num_decagonal(150) == 301\nis_num_decagonal(151) == 303\nis_num_decagonal(152) == 305\nis_num_decagonal(153) == 307\nis_num_decagonal(154) == 309\nis_num_decagonal(155) == 311\nis_num_decagonal(156) == 313\nis_num_decagonal(157) == 315\nis_num_decagonal(158) == 317\nis_num_decagonal(159) == 319\nis_num_decagonal(160) == 321\nis_num_decagonal(161) == 323\nis_num_decagonal(162) == 325\nis_num_decagonal(163) == 327\nis_num_decagonal(164) == 329\nis_num_decagonal(165) == 331\nis_num_decagonal(166) == 333\nis"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 11\nassert     is_num_decagonal(2) == 1221\nassert     is_num_decagonal(3) == 13331\nassert     is_num_decagonal(4) == 14641\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_num_decagonal(10)\nassert is_num_decagonal(1)\nassert is_num_decagonal(3)\nassert not is_num_decagonal(4)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 4\nassert     is_num_decagonal(4) == 5\nassert     is_num_decagonal(5) == 6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_num_decagonal(1) == 1, \"First decagonal, 1\"\nassert     is_num_decagonal(2) == 3, \"Second decagonal, 3\"\nassert     is_num_decagonal(3) == 6, \"Third decagonal, 6\"\nassert     is_num_decagonal(4) == 10, \"Fourth decagonal, 10\"\nassert     is_num_decagonal(5) == 15, \"Fifth decagonal, 15\"\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert is_num_decagonal(5) == 20\nassert is_num_decagonal(7) == 29\nassert is_num_decagonal(11) == 144\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([1], 1) == (True, 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0)\nassert     sequential_search([1,2,3,4,5], 5) == (False, 4)\nassert     sequential_search([1,2,3,4,5], 5) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(sequential_search([1, 2, 3, 4], 4))\nprint(sequential_search([1, 2, 3, 4], 2))\nprint(sequential_search([1, 2, 3, 4], 3))\nprint(sequential_search([1, 2, 3, 4], 1))\nprint(sequential_search([1, 2, 3, 4], 5))\nprint(sequential_search([], 5))\nprint(sequential_search([5, 7, 8, 9], 5))\nprint(sequential_search([5, 7, 8, 9], 6))\nprint(sequential_search([5, 7, 8, 9], 4))\nprint(sequential_search([5, 7, 8, 9], 10))"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0)\nassert     sequential_search([1,2,3,4,5], 0) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 2) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 3) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 5) == (True, 4)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in a sorted array and element and returns a boolean that indicates if the element is in the array.\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == (True, 4), '1st wrong'\nassert     sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == (False, -1), '2nd wrong'\nassert     sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 99) == (False, -1), '3rd wrong'\nassert     sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == (True, 7), '4th wrong'\nassert     sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == (True, 0), '5th wrong'\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nIf your function is correct, the results of the following runs should be True:\n\ntest_sequential_search(sequential_search, ([],1), False)\ntest_sequential_search(sequential_search, ([1,2,3,4], 3), (True, 3))\n'''"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_unique([\"a\",\"b\",\"c\",\"d\",\"e\"]) == True, \"Should be true\"\nassert     all_unique([\"c\",\"d\",\"d\"]) == False, \"Should be false\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_unique([1,2,3,4,5,6]) == True, \"First all unique\"\nassert all_unique([1,2,2,4,5,6]) == False, \"Second all unique\"\nassert all_unique([1,2,3,4,4,5,6]) == True, \"Third all unique\"\nassert all_unique([1,2,2,4,4,5]) == False, \"Fourth all unique\"\nassert all_unique([1,2,3,4,5,6,6]) == True, \"Fifth all unique\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_unique([1,2,3,3]) == True, 'Wrong output'\nassert     all_unique([1,2,3,3,3,4,5]) == False, 'Wrong output'\nassert     all_unique([1,2,3,4,5,6]) == True, 'Wrong output'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([1, 2, 3, 4]) == True, \"All element of list are duplicate\"\nassert all_unique([1, 2, 2, 2, 2, 3]) == False, \"There is duplicate\"\nassert all_unique([1,2,1,2]) == True, \"List contains duplicate element only\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([]) == True\nassert     all_unique([1,2,3]) == False\nassert     all_unique([1,2,3,3,4,5]) == False\nassert     all_unique([1,2,3,3,4,5,6]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    all_unique([1,2,3,3,3,3,4,5]) == False\n    all_unique([1,2,3,3,3,3,4,5,5]) == True\nassert \n    all_unique([1,2,3]) == True\nassert \n    all_unique([1]) == True\nassert \n    all_unique([]) == True\nassert \n    all_unique([1,2,3,4,5]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([0, 1, 1]) == False\nassert     all_unique([0, 1]) == True\nassert     all_unique([0, 1, 1, 1]) == False\nassert     all_unique([0, 1, 1, 1, 1]) == False\nassert     all_unique([]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique(['a','b','c','d','a','f','g','a'])    == True\nassert     all_unique(['a','b','c','d','a','f','g','a','f'])    == False\nassert     all_unique(['a','b','c','d','a','f','g','a','f','a','f'])    == False\nassert     all_unique(['a','b','c','d','a','f','g','a','f','a','f','a','a'])    == False\nassert     all_unique(['a','a','a','a'])    == False\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sub_list([4,5,6,7], [1,2,3,4]) == [4,3,2,1]\nassert     sub_list([1,2,3,4,5], [4,5,6,7]) == [-1,-2,-3,-4,-5]\nassert     sub_list([1,1,1,1], [1,1,1]) == [0,0,0,0]"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef reverse_list(nums):\n    '''\n    Write a function to reverse the list.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sub_list([1,2],[3,4]) == [-1,-2], \"Sub_list should return [-1,-2]!\"\n\ndef sub_list_2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(min(len(nums1),len(nums2)))]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sub_list_by_index(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sub_list([1,2,3],[4,5,6]) == [[-4,-5,-6]], 'failed'\n\ndef trim(s):\n    '''\n    Write a function that takes in a string and returns a string after removing the first and last characters.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sub_list([1, 2, 3, 4], [1, 2, 3]) == [-1, -1, -1, -1]\nassert     sub_list([2, 1, 5, 4], [-4, 0, 5, -8]) == [-2, -1, 3, -1]\nassert     sub_list([-1, 5, 3, 4, 5], [-3, 3, -1, 2, 0]) == [-4, -3, 1, -1, -1]\nassert     sub_list([1, -5, 1, 2, 0, -4, 4], [1, 1, 0, -1, -1, -3, 2, 1]) == [-1, -1, -1, 1, 2, 1, 2, 1]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sub_list([1,2,3],[4,5,6]) == [-2,-3,-4], \"Sub_list fails\"\nassert     sub_list([1,2,3],[-2,-3,-4]) == [1,2,3], \"Sub_list fails\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sub_list([1,2,3], [2,3,4]) == [1,0,0], \"sub_list does not work\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    validate(0) == True\n    validate(11) == True\n    validate(42) == True\n    validate(43) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert validate(12345) == True\nassert validate(1234) == False\nassert validate(1237) == False\nassert validate(1231) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     validate(23) == False\nassert validate(234) == False\nassert validate(233) == True\n\n\ndef number_to_digits(n): \n    '''\n    Write a python function takes in an integer and return the list of digits in the integer.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     validate(123456) == True, \"123456 is not a valid number\"\nassert validate(12345) == False, \"12345 is not a valid number\"\nassert validate(87654321) == True, \"87654321 is not a valid number\"\nassert validate(132643) == False, \"132643 is not a valid number\"\nassert validate(87654321) == True, \"87654321 is not a valid number\"\nprint(\"YOUR CODE IS CORRECT!\")"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     validate(921) == True, \"The input {0} has incorrect frequency of digits.\".format(921)\nassert     validate(8050) == True, \"The input {0} has incorrect frequency of digits.\".format(8050)\nassert     validate(17) == False, \"The input {0} has incorrect frequency of digits.\".format(17)\nassert     validate(9898) == False, \"The input {0} has incorrect frequency of digits.\".format(9898)"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     validate(0) == False\nassert     validate(123) == True\nassert     validate(456) == False\nassert     validate(1234) == False\nassert     validate(11234) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     validate(123) == False, \"should be False\"\nassert     validate(111) == False, \"should be False\"\nassert     validate(666) == True, \"should be True\"\nassert     validate(1221) == False, \"should be False\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert validate(1234) == True\nassert validate(99999) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_element([1,2,3,4,5],1)==True\nassert     check_element([1,2,3,4,5],3)==True\nassert     check_element([1,2,3,4,5],4)==True\nassert     check_element([1,2,3,4,5],5)==False\nassert     check_element([1,2,3,4,5],5)==True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_element([1,2,3],3) == True\nassert check_element([2,3,3],3) == False\nassert check_element([1,2,3,4],3) == False\nassert check_element([],3) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_element([1,2,3,4], 2) == True\nassert     check_element([1,2,3,4], 1) == False\nassert     check_element([1,2,3], 2) == True\nassert     check_element([1,2,3], 3) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_element([1,2,3,4,5,6,7,8,9],10) == False, \"1\"\nassert     check_element([1,2,3,4,5,6,7,8,9],10) == True, \"2\"\nassert     check_element([1,2,3,4,5,6,7,8,9],1) == False, \"3\"\nassert     check_element([1,2,3,4,5,6,7,8,9],1) == True, \"4\"\nassert     check_element([1,2,3,4,5,6,7,8,9],10) == False, \"5\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_element(['a','b','c','d'], 'd') == True, 'Wrong Output'\nassert     check_element([1,2,3,4], 4) == False, 'Wrong Output'\nassert     check_element([1,2,3,4], 'a') == False, 'Wrong Output'"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_element([1,2,3,4,5,6],1) == True, \"check_element should return True if all elements in the list are equal to the given element\"\nassert     check_element([1,2,3,4,5,6],10) == False, \"check_element should return False if any of the element in the list is not equal to the given element\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_element([1,2,3],3) == True, 'failed 1st check'\nassert     check_element([1,2,3],4) == False, 'failed 2nd check'\nassert     check_element([1,2,3,4,5,6],3) == True, 'failed 3rd check'\nassert     check_element([1,2,3,4,5,6],7) == False, 'failed 4th check'\nassert     check_element([1,2,3,4,5,6],0) == False, 'failed 5th check'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_element([1,2,3],1) == True, \"Wrong output\"\nassert     check_element([1,2,3],4) == False, \"Wrong output\"\nassert     check_element([1,2,3],2) == False, \"Wrong output\""
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_two_three('abcbabc')    ==     True\nassert     text_match_two_three('abcabc')    ==     True\nassert     text_match_two_three('abcbba')    ==     False\nassert     text_match_two_three('abcba')    ==     False\nassert     text_match_two_three('abcbaba')    ==     False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three('aabbbbb') == False\nassert     text_match_two_three('aaabbbbbbb') == True\nassert     text_match_two_three('aabaaaaaaaaab') == True\nassert     text_match_two_three('abaaaaaaaaab') == True\nassert     text_match_two_three('abaabbbbbbb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three(\"abaaaaababbb\") == False, \"Should return False\"\nassert     text_match_two_three(\"abbbbabbbaa\") == True, \"Should return True\"\nassert     text_match_two_three(\"abababababababab\") == False, \"Should return False\"\nassert     text_match_two_three(\"abbbabaaabbb\") == True, \"Should return True\"\nassert     text_match_two_three(\"abbbabaaabbbbbb\") == False, \"Should return False\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three('') == False\nassert     text_match_two_three('ab') == True\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('ab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('aab')    == True, 'aab'\nassert     text_match_two_three('abababababab')    == True, 'abababababab'\nassert     text_match_two_three('bbab')    == False, 'bbab'\nassert     text_match_two_three('ab')    == False, 'ab'\nassert     text_match_two_three('bb')    == False, 'bb'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three('a')\nassert     text_match_two_three('ab')\nassert     text_match_two_three('abc')\nassert     text_match_two_three('bbbb')\nassert     text_match_two_three('abcbb')\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('abcba') == True\nassert     text_match_two_three('abccba') == True\nassert     text_match_two_three('abcabcabc') == False\nassert     text_match_two_three('abcbaa') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three('abababababab') == True\nassert     text_match_two_three('abababababaa') == True\nassert     text_match_two_three('ababab') == False\nassert     text_match_two_three('abbb') == False\nassert     text_match_two_three('abababababab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('aa') == False, \"Case #1\"\nassert     text_match_two_three('ab') == False, \"Case #2\"\nassert     text_match_two_three('aa') == False, \"Case #3\"\nassert     text_match_two_three('aaab') == False, \"Case #4\"\nassert     text_match_two_three('aaabaaa') == False, \"Case #5\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_two_three('abcbabc') == True\nassert     text_match_two_three('abcabc') == True\nassert     text_match_two_three('abc') == False\nassert     text_match_two_three('') == False\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 3) == 19, \"Should be 19\"\nassert max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 4) == 21, \"Should be 21\"\nassert max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 5) == 34, \"Should be 34\"\nassert max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 6) == 39, \"Should be 39\"\nassert max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 7) == 44, \"Should be 44\"\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([2, 3, -2, 4], 2, 2) == 6, 'wrong answer'\nassert     max_sub_array_sum_repeated([-2, -3, 4], 2, 2) == 0, 'wrong answer'\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated(np.array([1,1,1,1,1]), 5, 3) == 10\nassert max_sub_array_sum_repeated(np.array([1,2,1,2,1]), 5, 3) == 7\nassert max_sub_array_sum_repeated(np.array([2,2,2,2,2,2]), 5, 3) == 6\nassert max_sub_array_sum_repeated(np.array([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum_repeated([2, 5, 1, 3, 4, 1, 2], 4, 5) == 9\nassert     max_sub_array_sum_repeated([2, 5, 1, 3, 4, 1, 2], 4, 10) == 23\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert max_sub_array_sum_repeated([1,2,3,1,2,3,2], 6, 3) == [1,1,3,2,3,2,2]\nassert max_sub_array_sum_repeated([-1,-2,-3,-4,-5,-6], 6, 3) == [-1,-1,-3, -2, -3, -2, -2]\nassert max_sub_array_sum_repeated([], 6, 3) == []\n\n'''\nGiven an array of size N and an integer K, the task is to find the smallest subarray of size K which has maximum sum.\nExamples:\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    max_sub_array_sum_repeated([4,3,1,2,6,7], 4, 2) == 12\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 5, 3) == 12\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 4, 4) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 4, 5) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 4, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 4, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 4, 8) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 4, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 5, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 5, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 5, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 5, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 5, 8) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 5, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 6, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 6, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 6, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 6, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 6, 8) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 6, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 7, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 7, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 7, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 7, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 7, 8) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 7, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 8, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 8, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 8, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 8, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 8, 8) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 8, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 9, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 9, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 9, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 9, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 9, 8) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 9, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 10, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 10, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 10, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 10, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 10, 8) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 10, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 11, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 11, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 11, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 11, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 11, 8) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 11, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 12, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 12, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 12, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 12, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 12, 8) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 12, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 13, 4) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 13, 5) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 13, 6) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 13, 7) == 14\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 13, 8) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 13, 9) == 21\n    max_sub_array_sum_repeated([4,3,1,2,6,7], 14, 4) == 14\n    max_sub_array_sum_repeated([4,"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([2, 3, 5, 6, 2, 3, 5], 6, 2) == 9, \"this should be 9\"\nassert     max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2], 2, 3) == 6, \"this should be 6\"\nassert     max_sub_array_sum_repeated([0, -2, 0, -3, -4, -1, -2, 0, 1], 6, 5) == 10, \"this should be 10\"\nassert     max_sub_array_sum_repeated([-2, -3, -4, -1, -2, 0, 1, 2, 3, 4, 5], 6, 2) == 8, \"this should be 8\"\nassert     max_sub_array_sum_repeated([-2, -3, -4, -1, -2, 0, 1, 2, 3, 4, 5], 6, 3) == 9, \"this should be 9\"\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum_repeated([4, 2, 1, 1, 3, 4, 3, 2], 4, 3) == 9\nassert     max_sub_array_sum_repeated([2, 2, 1, 1, 3, 4, 3, 2], 4, 3) == 12\nassert     max_sub_array_sum_repeated([2, 2, 1, 1, 3, 4, 3, 2, 2], 4, 3) == 12\nassert     max_sub_array_sum_repeated([4, 2, 1, 1, 3, 4, 3, 2], 4, 3) == 9\nassert     max_sub_array_sum_repeated([2, 2, 1, 1, 3, 4, 3, 2], 4, 3) == 12\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum_repeated([2, 3, 5, 5, 2, 3, 3], 5, 2) == 9\nassert     max_sub_array_sum_repeated([2, 2, 2, 2, 2, 3, 5, 2, 2], 2, 3) == 10\nassert     max_sub_array_sum_repeated([2, 2, 3, 2, 3], 1, 3) == 4\nassert     max_sub_array_sum_repeated([3, 1, 3, 2, 3], 2, 3) == 5\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6, 7], 7, 2) == 9\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_sub_array_sum_repeated(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsquare_Sum(6) == 55\nsquare_Sum(2) == 4\nsquare_Sum(0) == 0\nsquare_Sum(1) == 1"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(4) == 16, f\"square_Sum should return 16 not {square_Sum(4)}\"\nassert     square_Sum(0) == 0, f\"square_Sum should return 0 not {square_Sum(0)}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_Sum(2) == 4\nassert     square_Sum(10) == 385\n\ndef square_Diff(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(1) == 1, 'Should be 1'\nassert     square_Sum(2) == 4, 'Should be 4'\nassert     square_Sum(10) == 338, 'Should be 338'\nassert     square_Sum(100) == 1134, 'Should be 1134'\nassert     square_Sum(1000) == 303433, 'Should be 303433'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"Pass\" if ((5==square_Sum(5)) and (25==square_Sum(10))) else \"Fail\")\nprint(\"Pass\" if ((0==square_Sum(0)) and (0==square_Sum(1))) else \"Fail\")\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_Sum(10) == 285, \"incorrect\"\nassert square_Sum(0) == 0, \"incorrect\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length([[1, 2], [3, 4], [5, 6]]) == 2\nassert     max_length([[1, 2], [3, 4], [5, 6, 7]]) == 3\nassert     max_length([[1, 2], [3, 4], [5, 6, 7, 8]]) == 4\nassert     max_length([[1], [2], [3], [4], [5], [6]]) == 5\nassert     max_length([[1], [2], [3], [4], [5], [6, 7]]) == 7\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length([['a', 'b', 'c'], \n        ['d', 'e', 'f'], \n        ['g', 'h', 'i']]) == 'f', \"Error\"\nassert     max_length([['a', 'b', 'c'], \n        ['d', 'e', 'f'], \n        ['g', 'h', 'i']]) == 'f', \"Error\"\nassert     max_length([['a', 'b', 'c', 'd'], \n        ['e', 'f', 'g', 'h'], \n        ['i', 'j', 'k', 'l']]) == 'f', \"Error\"\nassert     max_length([['a', 'b', 'c'], \n        ['d', 'e', 'f'], \n        ['g', 'h', 'i'], \n        ['j', 'k', 'l'], \n        ['m', 'n', 'o']]) == 'f', \"Error\"\nassert     max_length([['a', 'b', 'c'], \n        ['d', 'e', 'f'], \n        ['g', 'h', 'i'], \n        ['j', 'k', 'l'], \n        ['m', 'n', 'o'], \n        ['p', 'q', 'r','s']]) == 'f', \"Error\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    max_length([[], [], []]) == 0\n    max_length([[3], [], []]) == 2\n    max_length([[], [3], []]) == 2\n    max_length([[], [], []]) == 0\nassert not \n    max_length([[], [3], []]) == 2\n    max_length([[3], [], []]) == 2\n    max_length([[], [3], []]) == 2\n    max_length([[], [], []]) == 0\n\n\ndef max_length_dynamic(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    # Base Cases\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return 1\n\n    # Create an auxiliary array ln (length of list) and\n    # initialize ln[0] and ln[1] with the lengths of first and\n    # second list respectively.\n    ln = [0, 0]\n    for i in range(2, len(list1) + 1):\n        # If the length of the current list is greater than the\n        # length of any of the previous lists, then set ln[i] equal\n        # to the length of the current list.\n        if len(list1[i-1]) > ln[i-1]:\n            ln[i-1] = len(list1[i-1])\n\n        # If ln[i-1] is equal to ln[i-2], then the current list cannot\n        # be the final list.\n        if ln[i-1] == ln[i-2]:\n            break\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length([['a'],['b','c'],['d','e'],['f']]) == 1, 'Test Failed'\nassert     max_length([['a','b','c'],['d','e','f'],['g','h','i']]) == 3, 'Test Failed'\nassert     max_length([['a','b','c','d'],['e','f','g','h']]) == 2, 'Test Failed'\nassert     max_length([[],['g','h','i']]) == 1, 'Test Failed'\nassert     max_length([['a'],['a','b','c']]) == 2, 'Test Failed'\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # run the test\n    list1 = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    print(max_length(list1))\n\n    list2 = [[1, 2, 3],\n              [4, 5, 6]]\n    print(max_length(list2))\n\n    list3 = [[1, 2],\n              [3, 4],\n              [5, 6]]\n    print(max_length(list3))\n\n    list4 = [[1, 2, 3, 4, 5, 6, 7],\n              [8, 9, 10, 11, 12, 13, 14],\n              [15, 16, 17, 18, 19, 20, 21]]\n    print(max_length(list4))"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length([[[1],[2],[3]]]) == 3, \"return 3\"\nassert     max_length([[[1,2],[3,4],[5,6]]]) == 4, \"return 4\"\nassert     max_length([[[1],[2,3],[4,5],[6,7],[8,9]]]) == 5, \"return 5\"\nassert     max_length([[[1],[2],[3,4,5],[6,7]]]) == 4, \"return 4\"\nassert     max_length([[[1,2,3],[4,5],[6,7],[8,9]]]) == 5, \"return 5\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length([[], [], [], [], []]) == 0\nassert max_length([[1, 2, 3], [4], [5, 6, 7], [8, 9]]) == 3\nassert max_length([[1, 2, 3, 4], [5], [6, 7, 8, 9], [0]]) == 2\nassert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [10]]) == 3\nassert max_length([[], [], []]) == 0\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_no_of_ways(1, 1) == 1\nassert     count_no_of_ways(3, 2) == 4\nassert     count_no_of_ways(5, 4) == 23\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_no_of_ways(6, 1) == 4, count_no_of_ways(6, 1)\nassert     count_no_of_ways(6, 2) == 2, count_no_of_ways(6, 2)\nassert     count_no_of_ways(6, 3) == 1, count_no_of_ways(6, 3)\nassert     count_no_of_ways(6, 4) == 1, count_no_of_ways(6, 4)\nassert     count_no_of_ways(6, 5) == 0, count_no_of_ways(6, 5)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_no_of_ways(3, 2) == 4, \"The function is not returning the correct result\"\nassert     count_no_of_ways(3, 3) == 8, \"The function is not returning the correct result\"\nassert     count_no_of_ways(6, 2) == 21, \"The function is not returning the correct result\"\n\nprint('PASSED ALL TEST CASES'"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_no_of_ways(1, 3) == 1\nassert count_no_of_ways(4, 4) == 4\nassert count_no_of_ways(4, 5) == 6\nassert count_no_of_ways(6, 6) == 12\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_no_of_ways(4,4) == 6\nassert     count_no_of_ways(4,3) == 5\nassert     count_no_of_ways(5,5) == 30\nassert     count_no_of_ways(5,4) == 15\nassert     count_no_of_ways(5,3) == 10\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_no_of_ways(3, 1) == 3\nassert     count_no_of_ways(3, 2) == 2\n\n'''\nn = 7 k = 2\n                  0 1 2 3 4 5 6\n  --- post 1 --- post 2 --- post 3 --- post 4 --- post 5 --- post 6\n   0 1 2 3 4 5 6\n\n'''\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_no_of_ways(1, 1) == 1\nassert     count_no_of_ways(2, 1) == 1\nassert     count_no_of_ways(3, 1) == 1\nassert     count_no_of_ways(4, 1) == 1\nassert     count_no_of_ways(1, 2) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find(10,1) == 0\nassert     find(10,2) == 5\nassert     find(10,3) == 5\nassert     find(10,4) == 5\nassert     find(10,5) == 5\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find(6,5) == 0, \"6/5=1\"\nassert     find(6,7) == 0, \"6/7=0\"\nassert     find(5,7) == 0, \"5/7=0\"\nassert     find(5,8) == 0, \"5/8=0\"\nassert     find(5,2) == 0, \"5/2=0\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind(2,3) == 1\nfind(5,3) == 2\nfind(3,3) == 1\nfind(12,3) == 4\nfind(9,3) == 3\nfind(15,3) == 5\nfind(16,3) == 5"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(3,4) == 0, \"find(3,4) should be 0\"\nassert     find(4,4) == 0, \"find(4,4) should be 0\"\nassert     find(4.4,4) == 0, \"find(4.4,4) should be 0\"\nassert     find(3,3) == 1, \"find(3,3) should be 1\"\nassert     find(3.3,3) == 1, \"find(3.3,3) should be 1\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find(5,10) == 0\nassert     find(4,5) == 0\nassert     find(5,4) == 1\nassert     find(10,2) == 3\nassert     find(7,2) == 3\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find(2,1) == 1\n    find(2,2) == 2\n    find(2,3) == 2\n    find(2,4) == 2\n    find(2,5) == 2\n    find(2,6) == 2\n    find(2,7) == 2\n    find(2,8) == 2\n    find(2,9) == 2\n    find(2,10) == 2\n    find(2,11) == 2\n    find(2,12) == 2\n    find(2,13) == 2\n    find(2,14) == 2\n    find(2,15) == 2\n    find(2,16) == 2\n    find(2,17) == 2\n    find(2,18) == 2\n    find(2,19) == 2\n    find(2,20) == 2\n    find(2,21) == 2\n    find(2,22) == 2\n    find(2,23) == 2\n    find(2,24) == 2\n    find(2,25) == 2\n    find(2,26) == 2\n    find(2,27) == 2\n    find(2,28) == 2\n    find(2,29) == 2\n    find(2,30) == 2\n    find(2,31) == 2\n    find(2,32) == 2\n    find(2,33) == 2\n    find(2,34) == 2\n    find(2,35) == 2\n    find(2,36) == 2\n    find(2,37) == 2\n    find(2,38) == 2\n    find(2,39) == 2\n    find(2,40) == 2\n    find(2,41) == 2\n    find(2,42) == 2\n    find(2,43) == 2\n    find(2,44) == 2\n    find(2,45) == 2\n    find(2,46) == 2\n    find(2,47) == 2\n    find(2,48) == 2\n    find(2,49) == 2\n    find(2,50) == 2\n    find(2,51) == 2\n    find(2,52) == 2\n    find(2,53) == 2\n    find(2,54) == 2\n    find(2,55) == 2\n    find(2,56) == 2\n    find(2,57) == 2\n    find(2,58) == 2\n    find(2,59) == 2\n    find(2,60) == 2\n    find(2,61) == 2\n    find(2,62) == 2\n    find(2,63) == 2\n    find(2,64) == 2\n    find(2,65) == 2\n    find(2,66) == 2\n    find(2,67) == 2\n    find(2,68) == 2\n    find(2,69) == 2\n    find(2,70) == 2\n    find(2,71) == 2\n    find(2,72) == 2\n    find(2,73) == 2\n    find(2,74) == 2\n    find(2,75) == 2\n    find(2,76) == 2\n    find(2,77) == 2\n    find(2,78) == 2\n    find(2,79) == 2\n    find(2,80) == 2\n    find(2,81) == 2\n    find(2,82) == 2\n    find(2,83) == 2\n    find(2,84) == 2\n    find(2,85) == 2\n    find(2,86) == 2\n    find(2,87) == 2\n    find(2,88) == 2\n    find(2,89) == 2\n    find(2,90) == 2\n    find(2,91) == 2\n    find(2,92) == 2\n    find(2,93) == 2\n    find(2,94) == 2\n    find(2,95) == 2\n    find(2,96) == 2\n    find(2,97) == 2\n    find(2,98) == 2\n    find(2,99) == 2\n    find(2,100) == 2\n    find(2,101) == 2\n    find(2,102) == 2\n    find(2,103) == 2\n    find(2,104) == 2\n    find(2,105) == 2\n    find(2,106) == 2\n    find(2,107) == 2\n    find(2,108) == 2\n    find(2,109) == 2\n    find(2,110) == 2\n    find(2,111) == 2\n    find(2,112) == 2\n    find(2,113) == 2\n    find(2,114) == 2\n    find(2,115) == 2\n    find(2,116) == 2\n    find(2,117) == 2\n    find(2,118) == 2\n    find(2,119) == 2\n    find(2,120) == 2\n    find(2,121) == 2\n    find(2,122) == 2\n    find(2,123) == 2\n    find(2,124) == 2\n    find(2,125) == 2\n    find(2,126) == 2\n    find(2,127) == 2\n    find(2,128) == 2\n    find(2,129) == 2\n    find(2,130) == 2\n    find(2,131) == 2\n    find(2,132) == 2\n    find(2,133) == 2\n    find(2,134) == 2\n    find(2,135) == 2\n    find(2,136) == 2\n    find(2,137) == 2\n    find(2,138) == 2\n    find(2,139) == 2\n    find(2,140) == 2\n    find(2,141) == 2\n    find(2,142) == 2\n    find(2,143) == 2\n    find(2,144) == 2\n    find(2,145) == 2\n    find(2,146) == 2\n    find(2,147) == 2\n    find(2,148) == 2\n    find(2,149) == 2\n    find(2,150) == 2\n    find(2,151) == 2\n    find(2,152) == 2\n    find(2,153) == 2\n    find(2,154) == 2\n    find(2,155) == 2\n    find(2,156) == 2\n    find(2,157) == 2\n    find(2,158) == 2\n    find(2,159) == 2\n    find(2,160) == 2\n    find(2,161) == 2\n    find(2,162) == 2\n    find(2,163) == 2\n    find(2,164) == 2\n    find(2,165) == 2\n    find(2,166) == 2\n    find(2,167) == 2\n    find(2,168) == 2\n    find(2,169) == 2\n    find(2,170) == 2\n    find(2,171) == 2\n    find(2,172) == 2\n    find(2,173) == 2\n    find(2,174) == 2\n    find(2,175) == 2\n    find(2,176) == 2\n    find(2,177) == 2\n    find(2,178) == 2\n    find(2,179) == 2\n    find(2,180) == 2\n    find(2,181) == 2\n    find(2,182) == 2\n    find(2,183) == 2\n    find(2,184) == 2\n    find(2,185) == 2\n    find(2,186) == 2\n    find(2,187) == 2\n    find(2,188) == 2\n    find(2,189) == 2\n    find(2,190) == 2\n    find(2,191) == 2\n    find(2,192) == 2\n    find(2,193) == 2\n    find(2,194) == 2\n    find(2,195) == 2\n    find(2,196) == 2\n    find(2,197) == 2\n    find(2,198) == 2\n    find(2,199) == 2\n    find(2,20"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind(2,2) == 1\nfind(2,5) == 1\nfind(2,7) == 2\nassert\nfind(3,4) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(3,3) == 3\nassert     find(4.5,3) == 3.0\nassert     find(5.5,5) == 2.5\nassert     find(6,7) == 3\nassert     find(14,15) == 5\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find(17, 10) == 17\nassert     find(10, 17) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find(10,5) == 2\nassert    find(20,10) == 2\nassert    find(25,6) == 5\nassert    find(20,5) == 5\nassert    find(20,0) == 20\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(2,3) == 3\nassert otherside_rightangle(4,8) == 10\nassert otherside_rightangle(5,12) == 10\nassert otherside_rightangle(6,16) == 12\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(7,10) == 5\nassert     otherside_rightangle(5,2) == 10\nassert     otherside_rightangle(10,2) == 10\nassert     otherside_rightangle(10,10) == 10\nassert     otherside_rightangle(8,8) == 10\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     otherside_rightangle(1,1)==1.0000\nassert     otherside_rightangle(5,5)==1.0000\nassert     otherside_rightangle(4.8,5.9)==1.2770\nassert     otherside_rightangle(10,10)==1.0000\nassert     otherside_rightangle(0.8,0.8)==1.0000\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(4,6) == 2.75\nassert     otherside_rightangle(5,7) == 5.0\nassert     otherside_rightangle(3,4) == 1.5\nassert     otherside_rightangle(1,2) == math.sqrt(3)\nassert     otherside_rightangle(2,1) == 0.0\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(1,2) == math.sqrt(3)\nassert     otherside_rightangle(2,2) == 1\nassert     otherside_rightangle(3,3) == 2\nassert     otherside_rightangle(2,3) == 0\nassert     otherside_rightangle(3,1) == 0\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(1,1) == 1.4142135623730951\nassert otherside_rightangle(1,2) == 1.4142135623730951\nassert otherside_rightangle(1.2,1.2) == 1.4142135623730951\nassert otherside_rightangle(1.2,1) == 1.4142135623730951\nassert otherside_rightangle(1,1.2) == 1.4142135623730951\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef otherside_square(side1, side2):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(1,1) == 1\nassert     otherside_rightangle(2,1) == 1.732050807568877\nassert     otherside_rightangle(3,1) == 1.7320508\nassert     otherside_rightangle(1,0) == 1.0\nassert     otherside_rightangle(2,0) == 1\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     otherside_rightangle(1,1) == 0\nassert     otherside_rightangle(1,2) == 1\nassert     otherside_rightangle(1,3) == 2\nassert     otherside_rightangle(1,4) == 2\nassert     otherside_rightangle(2,1) == 2\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_val([1,2,-5,3.3,4.4,8]) == 8, 'Should be 8'\nassert     max_val([1,2,3]) == 3, 'Should be 3'\nassert     max_val([1,2,3,6,5,3,2]) == 6, 'Should be 6'\nassert     max_val([1,2,3,4,5,6,7,8,9]) == 9, 'Should be 9'\nassert     max_val([1,2,3,4,5,6,7,8,9,10,11]) == 10, 'Should be 10'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_val([(1,2,3), (4,5,6), (7,8,9), (10,11,12)]) == 11\nassert     max_val([[1,2], [4,5], [7,8], [10,11,12]]) == 11\nassert     max_val([[1], [4], [7], [10,11,12]]) == 11\nassert     max_val([(1,2,3), 'a', 5, 6, (7,8,9), (10,11,12)]) == 12\nassert     max_val([[1,2,3], 'a', 5, 6, (7,8,9), (10,11,12)]) == 12\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_val([1, 2, 4, 'a']) == 4\nassert     max_val([1, 2, -9, 'a']) == 2\nassert     max_val([1, 2, -9, 'a', 'b']) == 'b'\nassert     max_val([1, 2, 'a', 'b', 'c']) == 'b'\nassert     max_val([1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_val([1, 2, 3, 4]) == 4\nassert     max_val([1, 2, 3, 'A']) == 'A'\nassert     max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     max_val([1, 2, 3, 'A', 4, 5, 6, 'B']) == 'B'\nassert     max_val([1, 2, 'A', 'B']) == 'B'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_val([1, 2, 3]) == 3, \"Error, wrong answer.\"\nassert     max_val([1, 2, -3]) == 2, \"Error, wrong answer.\"\nassert     max_val([-1, 2, -3]) == 2, \"Error, wrong answer.\"\nassert     max_val([1, -2, -3]) == 1, \"Error, wrong answer.\"\nassert     max_val([-1, -2, -3]) == -1, \"Error, wrong answer.\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_val([1, 2, -10, 3, 0, -5, 9]) == 9\nassert     max_val([10, -20, -30, -10, 90]) == 90\nassert     max_val([-5, -1, 1, -3]) == -1\nassert     max_val([-2, 1, -3]) == -3\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(max_val([1, 3, 5]))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nProblem 5: Write a function to find the sum of all the numbers in a list.\n'''"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sum_div(1) == 0\nassert sum_div(2) == 1\nassert sum_div(3) == 1\nassert sum_div(4) == 2\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_div(10) == 10\nassert     sum_div(20) == 12\nassert     sum_div(30) == 24\n\ndef sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 1:\n        return 0\n    else:\n        return (1 + number) * (number//2)"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_div(1) == 0\nassert     sum_div(2) == 1\nassert     sum_div(4) == 3\nassert     sum_div(6) == 3\nassert     sum_div(8) == 4\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_div(0) == 0\nassert sum_div(5) == 1\nassert sum_div(10) == 1\nassert sum_div(15) == 4\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert sum_div(10) == 10\nassert sum_div(10) == 1 + 2 + 4 + 5 + 10\nassert sum_div(0) == 0\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nsum_div(4) == 4\nsum_div(100) == 50\nsum_div(100) == 50 + 1\nsum_div(100) == 50 + 1 + 2\nsum_div(100) == 50 + 1 + 2 + 3\nsum_div(100) == 50 + 1 + 2 + 3 + 4\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39\nsum_div(100) == 50 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 3"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_div(8) == 5\nassert     sum_div(15) == 15\nassert     sum_div(16) == 17\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_div(4) == 5, \\\n        \"Your function does not return the correct sum of divisors of 4.\"\nassert     sum_div(13) == 7, \\\n        \"Your function does not return the correct sum of divisors of 13.\"\nassert     sum_div(912) == 22, \\\n        \"Your function does not return the correct sum of divisors of 912.\"\n\n\nimport math\ndef divisor_sum(number):\n    '''\n    Write a function to find the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([]) == 0\nassert     get_Inv_Count([1]) == 0\nassert     get_Inv_Count([1, 2]) == 0\nassert     get_Inv_Count([1, 2, 3, 4]) == 1\nassert     get_Inv_Count([1, 3, 2, 4]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([]) == 0\nassert     get_Inv_Count([1,3,4,5,2]) == 2\nassert     get_Inv_Count([1,3,2]) == 2\nassert     get_Inv_Count([5,4,3,2,1]) == 1\nassert     get_Inv_Count([5,4,3,1,2]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([1, 2, 4, 3]) == 0, \"Wrong return value\"\nassert     get_Inv_Count([1, 2, 4, 3, 5]) == 1, \"Wrong return value\"\nassert     get_Inv_Count([1, 2, 4, 3, 4, 3, 2, 1]) == 2, \"Wrong return value\"\nassert     get_Inv_Count([1, 2, 4, 3, 4, 3, 2, 1, 5]) == 3, \"Wrong return value\"\nassert     get_Inv_Count([1, 2, 4, 3, 4, 3, 2, 1, 5, 6]) == 4, \"Wrong return value\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Inv_Count([]) == 0, \"Empty array\"\nassert     get_Inv_Count([1]) == 0, \"Single element\"\nassert     get_Inv_Count([1,1]) == 0, \"Two element\"\nassert     get_Inv_Count([1,1,1]) == 0, \"Three element\"\nassert     get_Inv_Count([1,2,1]) == 1, \"Three element\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Inv_Count([10, 4, 5, 2, 1]) == 3, 'Incorrect'\nassert     get_Inv_Count([10, 4, 5, 2, 1, 10, 4, 5, 2, 1]) == 3, 'Incorrect'\nassert     get_Inv_Count([10, 4, 5, 2, 1, 10, 4, 5, 2, 1, 10, 4, 5, 2, 1]) == 3, 'Incorrect'\nassert     get_Inv_Count([10, 4, 5, 2, 1, 10, 4, 5, 2, 1, 10, 4, 5, 2, 1, 10, 4, 5, 2, 1]) == 3, 'Incorrect'\n\ndef get_Inv_Count_1(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nget_Inv_Count([1,4,2,3]) == 1\nassert get_Inv_Count([1,2,3,4]) == 0\nassert get_Inv_Count([]) == 0\nassert get_Inv_Count([1,2,3,1,4]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([1, 2, 3, 4, 5]) == 2, 'expected 2'\nassert     get_Inv_Count([1, 2, 3, 4, 5, 6]) == 0, 'expected 0'\nassert     get_Inv_Count([1, 2, 4, 3, 5, 6]) == 1, 'expected 1'\nassert     get_Inv_Count([5, 4, 3, 2, 1]) == 2, 'expected 2'\nassert     get_Inv_Count([5, 4, 3, 2, 1, 2]) == 3, 'expected 3'\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Inv_Count([1,5,3,2]) == 1, \"Wrong answer\"\nassert     get_Inv_Count([5,3,2,1]) == 1, \"Wrong answer\"\nassert     get_Inv_Count([5,3,2,3]) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flatten_list([[1],2,[3,4],[[5,6],7],8]) == [1,2,3,4,5,6,7,8]\nassert     flatten_list([[[[[[[[[1,2,3]]]]]]]]]) == [1,2,3]\n\n\ndef get_first_last(list1):\n    '''\n    Write a function to get first and last element of a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nflatten_list([[1,2,3,4],['a','b','c']]) == [1,2,3,4,'a','b','c']\nflatten_list([1,2,3,['a','b','c']]) == [1,2,3,'a','b','c']\n\nprint('All tests passed!'"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flatten_list([1, 2, 3]) == [1, 2, 3]\nassert     flatten_list([[1, 2], 3]) == [1, 2, 3]\nassert     flatten_list([[[1], 2], 3]) == [1, 2, 3]\nassert     flatten_list([1, [2, [3]]]) == [1, 2, 3]\nassert     flatten_list([1, 2, [3]]) == [1, 2, 3]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     flatten_list([1,2,[3,4],[5,[6,7]]]) == [1,2,3,4,5,6,7]\nassert     flatten_list([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     flatten_list([]) == []\nassert     flatten_list([[]]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"Your program returned the following result when you called it with a simple list:\")\nprint(flatten_list([1, 2, 3, 4]))\nprint(\"\")\n\nprint(\"Now we'll check the correctness of the function with the result we've been given for a nested list structure.\")\nprint(\"\")\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('All assertions are passed!')\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint (\"[Pass]\") if (else)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([1,2,3]) == [1,2,3]\nassert     flatten_list([1,[2,3,4],5]) == [1,2,3,4,5]\nassert     flatten_list([1,[2,3,[4,5,6]],7]) == [1,2,3,4,5,6,7]\nassert     flatten_list([1,[2,3,[4,5,6],7],8]) == [1,2,3,4,5,6,7,8]\nassert     flatten_list([1,[2,3,4,5],6,7]) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_aggregate([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8), (6, 7, 8, 9)]) == (9, 8, 7, 6, 5, 4)\nassert     max_aggregate([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8), (6, 7, 8, 9)]) == (9, 8, 7, 6, 5, 4)\nassert     max_aggregate([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8), (6, 7, 8, 9), (8, 9, 10, 11), (9, 10, 11, 12)]) == (12, 11, 10, 9, 8, 7, 6, 5)\nassert     max_aggregate([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8), (6, 7, 8, 9), (8, 9, 10, 11), (9, 10, 11, 12), (11, 12, 13, 14)]) == (14, 13, 12, 11, 10, 9, 8, 7, 6)\nassert     max_aggregate([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8), (6, 7, 8, 9), (8, 9, 10, 11), (9, 10, 11, 12), (11, 12, 13, 14), (13, 14, 15, 16)]) == (16, 15, 14, 13, 12, 11, 10, 9, 8)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_aggregate([(\"a\", 2), (\"b\", 4), (\"c\", -1), (\"d\", -2)]) == ('c', -2)\nassert     max_aggregate([(\"a\", 2), (\"b\", 4), (\"c\", -1), (\"d\", -2), (\"e\", 2)]) == ('d', -2)\n\n'''\n@file test_max_aggregate.py\n'''"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_aggregate_optimal(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    min_aggregate = 0\n\n    for i in range(len(stdata)):\n        if stdata[i][1] < min_aggregate:\n            min_aggregate = stdata[i][1]\n        else:\n            max_aggregate += stdata[i][1]\n\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate(    [(1, 4), (2, 6), (3, 2), (4, 5)]) == 7\nassert     max_aggregate(    [(3, 2), (2, 4), (3, 7)]) == 9\n\ndef max_xor(stdata):\n    '''\n    Write a function to calculate the maximum xor of two integers.\n    '''\n    pass\n\ndef max_xor_tuple(stdata):\n    '''\n    Write a function to calculate the maximum xor of all pairs of integers.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate([('a','b'),('c','d'),('e','f'),('a','g')]) == \n    (['a', 'g'], {'a': 3, 'c': 1, 'b': 2, 'd': 1, 'e': 2})\nassert max_aggregate([('a','b'),('c','d'),('e','f')]) == \n    (['a', 'c', 'e'], {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 2})\nassert max_aggregate([('a','b'),('c','d')]) == \n    (['a', 'c', 'd'], {'a': 2, 'b': 1, 'c': 1, 'd': 1})\nassert max_aggregate([('a','b'),('a','c'),('a','d')]) == \n    (['a', 'b', 'c', 'd'], {'a': 3, 'b': 1, 'c': 1, 'd': 1})\nassert max_aggregate([('a','b'),('c','d'),('c','a')]) == \n    (['a', 'c', 'd'], {'a': 2, 'b': 1, 'c': 1, 'd': 1})\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_aggregate([(1, 1), (3, 1), (5, 2), (1, 1), (1, 2)]) == 5\nassert     max_aggregate([(1, 2), (3, 1), (5, 2), (1, 1), (1, 2)]) == 5\nassert     max_aggregate([(1, 1), (3, 1), (5, 2), (1, 1), (1, 2)]) == 5\nassert     max_aggregate([(1, 1), (2, 1), (1, 1), (1, 1), (1, 1)]) == 1\nassert     max_aggregate([(1, 1), (2, 1), (1, 1), (1, 1), (1, 1)]) == 1\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([]) == ()\nassert    max_aggregate([(10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100)]) == (10, 50, 75, 100)\nassert    max_aggregate([(10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100)]) == (10, 50, 75, 100)\nassert    max_aggregate([(10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100)]) == (10, 50, 75, 100)\nassert    max_aggregate([(10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100), (10, 50, 75, 100)]) == (10, 50, 75, 100)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_aggregate([(4, 2), (7, 4), (3, 2), (7, 2), (9, 6), (10, 4)]) == 12\nassert     max_aggregate([(7, 2), (9, 6), (3, 2), (7, 2), (9, 6), (10, 4)]) == 20\nassert     max_aggregate([(7, 2), (9, 6), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4)]) == 20\nassert     max_aggregate([(4, 2), (7, 4), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, 4), (4, 2), (7, 2), (3, 2), (7, 2), (9, 6), (10, "
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_aggregate([(1, 2), (1, 3), (2, 3)]) == (3, 3)\nassert     max_aggregate([(1, 2), (2, 3), (1, 3)]) == (3, 3)\nassert     max_aggregate([(1, 2), (1, 3), (2, 3), (1, 3), (2, 3)]) == (3, 3)\nassert     max_aggregate([(1, 2), (1, 3), (2, 3), (1, 3), (2, 3), (1, 3), (2, 3), (1, 3), (2, 3)]) == (3, 3)\nassert     max_aggregate([(1, 2), (1, 3), (2, 3), (1, 3), (2, 3), (1, 3), (2, 3), (1, 3), (2, 3)]) == (3, 3)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_aggregate([(1, 2, 3), (4, 5), (7, 1, 4)]) == (7, 4, 1)\nassert     max_aggregate([(4, 1), (7, 4), (3, 5)]) == (7, 4, 5)\n\n'''\n\u9898\u76ee\uff1a\n    \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u91cd\u590d\u6570\u5b57\u3002\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u8f93\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3002\n\n\u793a\u4f8b1:\n    \u8f93\u5165: [1,2,3,1]\n    \u8f93\u51fa: 1\n\n\u793a\u4f8b2:\n    \u8f93\u5165: [1,1,1,3,3,4,3,2,4,2]\n    \u8f93\u51fa: 1,3\n'''\ndef contains_duplicate(nums):\n    '''\n    Write a function to check whether an array contains\n    duplicate numbers.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('\\n----check count_binary_seq----')\ncount_binary_seq(1)\ncount_binary_seq(2)\ncount_binary_seq(3)\ncount_binary_seq(4)\ncount_binary_seq(5)\ncount_binary_seq(6)\ncount_binary_seq(7)\ncount_binary_seq(8)\ncount_binary_seq(9)\ncount_binary_seq(10)\ncount_binary_seq(11)\ncount_binary_seq(12)\ncount_binary_seq(13)\ncount_binary_seq(14)\ncount_binary_seq(15)\ncount_binary_seq(16)\ncount_binary_seq(17)\ncount_binary_seq(18)\ncount_binary_seq(19)\ncount_binary_seq(20)\ncount_binary_seq(21)\ncount_binary_seq(22)\ncount_binary_seq(23)\ncount_binary_seq(24)\ncount_binary_seq(25)\ncount_binary_seq(26)\ncount_binary_seq(27)\ncount_binary_seq(28)\ncount_binary_seq(29)\ncount_binary_seq(30)\ncount_binary_seq(31)\ncount_binary_seq(32)\ncount_binary_seq(33)\ncount_binary_seq(34)\ncount_binary_seq(35)\ncount_binary_seq(36)\ncount_binary_seq(37)\ncount_binary_seq(38)\ncount_binary_seq(39)\ncount_binary_seq(40)\ncount_binary_seq(41)\ncount_binary_seq(42)\ncount_binary_seq(43)\ncount_binary_seq(44)\ncount_binary_seq(45)\ncount_binary_seq(46)\ncount_binary_seq(47)\ncount_binary_seq(48)\ncount_binary_seq(49)\ncount_binary_seq(50)\ncount_binary_seq(51)\ncount_binary_seq(52)\ncount_binary_seq(53)\ncount_binary_seq(54)\ncount_binary_seq(55)\ncount_binary_seq(56)\ncount_binary_seq(57)\ncount_binary_seq(58)\ncount_binary_seq(59)\ncount_binary_seq(60)\ncount_binary_seq(61)\ncount_binary_seq(62)\ncount_binary_seq(63)\ncount_binary_seq(64)\ncount_binary_seq(65)\ncount_binary_seq(66)\ncount_binary_seq(67)\ncount_binary_seq(68)\ncount_binary_seq(69)\ncount_binary_seq(70)\ncount_binary_seq(71)\ncount_binary_seq(72)\ncount_binary_seq(73)\ncount_binary_seq(74)\ncount_binary_seq(75)\ncount_binary_seq(76)\ncount_binary_seq(77)\ncount_binary_seq(78)\ncount_binary_seq(79)\ncount_binary_seq(80)\ncount_binary_seq(81)\ncount_binary_seq(82)\ncount_binary_seq(83)\ncount_binary_seq(84)\ncount_binary_seq(85)\ncount_binary_seq(86)\ncount_binary_seq(87)\ncount_binary_seq(88)\ncount_binary_seq(89)\ncount_binary_seq(90)\ncount_binary_seq(91)\ncount_binary_seq(92)\ncount_binary_seq(93)\ncount_binary_seq(94)\ncount_binary_seq(95)\ncount_binary_seq(96)\ncount_binary_seq(97)\ncount_binary_seq(98)\ncount_binary_seq(99)\ncount_binary_seq(100)\ncount_binary_seq(101)\ncount_binary_seq(102)\ncount_binary_seq(103)\ncount_binary_seq(104)\ncount_binary_seq(105)\ncount_binary_seq(106)\ncount_binary_seq(107)\ncount_binary_seq(108)\ncount_binary_seq(109)\ncount_binary_seq(110)\ncount_binary_seq(111)\ncount_binary_seq(112)\ncount_binary_seq(113)\ncount_binary_seq(114)\ncount_binary_seq(115)\ncount_binary_seq(116)\ncount_binary_seq(117)\ncount_binary_seq(118)\ncount_binary_seq(119)\ncount_binary_seq(120)\ncount_binary_seq(121)\ncount_binary_seq(122)\ncount_binary_seq(123)\ncount_binary_seq(124)\ncount_binary_seq(125)\ncount_binary_seq(126)\ncount_binary_seq(127)\ncount_binary_seq(128)\ncount_binary_seq(129)\ncount_binary_seq(130)\ncount_binary_seq(131)\ncount_binary_seq(132)\ncount_binary_seq(133)\ncount_binary_seq(134)\ncount_binary_seq(135)\ncount_binary_seq(136)\ncount_binary_seq(137)\ncount_binary_seq(138)\ncount_binary_seq(139)\ncount_binary_seq(140)\ncount_binary_seq(141)\ncount_binary_seq(142)\ncount_binary_seq(143)\ncount_binary_seq(144)\ncount_binary_seq(145)\ncount_binary_seq(146)\ncount_binary_seq(147)\ncount_binary_seq(148)\ncount_binary_seq(149)\ncount_binary_seq(150)\ncount_binary_seq(151)\ncount_binary_seq(152)\ncount_binary_seq(153)\ncount_binary_seq(154)\ncount_binary_seq(155)\ncount_binary_seq(156)\ncount_binary_seq(157)\ncount_binary_seq(158)\ncount_binary_seq(159)\ncount_binary_seq(160)\ncount_binary_seq(161)\ncount_binary_seq(162)\ncount_binary_seq(163)\ncount_binary_seq(164)\ncount_binary_seq(165)\ncount_binary_seq(166)\ncount_binary_seq(167)\ncount_binary_seq(168)\ncount_binary_seq(169)\ncount_binary_seq(170)\ncount_binary_seq(171)\ncount_binary_seq(172)\ncount_binary_seq(173)\ncount_binary_seq(174)\ncount_binary_seq(175)\ncount_binary_seq(176)\ncount_binary_seq(177)\ncount_binary_seq(178)\ncount_binary_seq(179)\ncount_binary_seq(180)\ncount_binary_seq(181)\ncount_binary_seq(182)\ncount_binary_seq(183)\ncount_binary_seq(184)\ncount_binary_seq(185)\ncount_binary_seq(186)\ncount_binary_seq(187)\ncount_binary_seq(188)\ncount_binary_seq(189)\ncount_binary_seq(190)\ncount_binary_seq(191)\ncount_binary_seq(192)\ncount_binary_seq(193)\ncount_binary_seq(194)\ncount_binary_seq(195)\ncount_binary_seq(196)\ncount_binary_seq(197)\ncount_binary_seq(198)\ncount_binary_seq(199)\ncount_binary_seq(200)\ncount_binary_seq(201)\ncount_binary_seq(202)\ncount_binary_seq(203)\ncount_binary_seq(204)\ncount_binary_seq(205)\ncount_binary_seq(206)\ncount_binary_seq(207)\ncount_binary_seq(208)\ncount_binary_seq(209)\ncount_binary_seq(210)\ncount_binary_seq(211)\ncount_binary_seq(212)\ncount_binary_seq(213)\ncount_binary_seq(214)\ncount_binary_seq(215)\ncount_binary_seq(216)\ncount_binary_seq(217)\ncount_binary_seq(218)\ncount"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_1bits_2bits(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits, \n    where first and last bit are 0s.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_binary_seq(1) == 2\nassert count_binary_seq(2) == 4\nassert count_binary_seq(4) == 14\nassert count_binary_seq(7) == 22\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_binary_seq(2) == 5\nassert     count_binary_seq(5) == 22\nassert     count_binary_seq(8) == 60\n\ndef is_binary_search_tree(root):\n    '''\n    Write a function that checks whether a binary tree is a binary search tree or not.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(2) == 3\nassert     count_binary_seq(3) == 4\nassert     count_binary_seq(4) == 3\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint count_binary_seq(10) == 37\n\nprint count_binary_seq(3) == 19\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_binary_seq(1)==2, \"count_binary_seq(1) should be 2\"\nassert     count_binary_seq(2)==7, \"count_binary_seq(2) should be 7\"\nassert     count_binary_seq(3)==21, \"count_binary_seq(3) should be 21\"\nassert     count_binary_seq(4)==72, \"count_binary_seq(4) should be 72\"\nassert     count_binary_seq(5)==252, \"count_binary_seq(5) should be 252\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_string(s):\n    '''\n    Write a function to check if the given string s is an integer.\n    '''\n    pass\n\nassert\n\ndef n_string_comparison(s1, s2):\n    '''\n    Write a function to count the number of strings which are the same but in different order.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_depth({'a': 1, 'b': {'d': 2, 'e': {'c': 3}}, 'c': 5, 'g': {'h': {'i': 6}}}) == 3, \"5\"\nassert     dict_depth({'a': 1, 'b': {'d': 2, 'e': {'c': 3}}, 'c': 5, 'g': {'h': {'i': 6}}}) == 2, \"3\"\nassert     dict_depth({'a': 1, 'b': {'d': 2, 'e': {'c': 3}}, 'c': 5, 'g': {'h': {'i': 6}}}) == 1, \"2\"\nassert     dict_depth({'a': 1, 'b': {'d': 2, 'e': {'c': 3}}, 'c': 5, 'g': {'h': {'i': 6}}}) == 0, \"0\""
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({1:1}) == 1\nassert     dict_depth({1: {2:2, 3:3, 4:4}}) == 2\nassert     dict_depth({1: {2:2, 3:3}}) == 1\nassert     dict_depth({1: {2:2}}) == 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth({0:1, 1:2}) == 1\nassert     dict_depth({1:2}) == 0\nassert     dict_depth({0:1, 1:{2:3}}) == 2\nassert     dict_depth({1:2, 3:4}) == 2\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({}) == 0, \"Empty dictionary\"\nassert     dict_depth({0: {}}) == 1, \"Single-item dictionary\"\nassert     dict_depth({1: {}, 2: {}}) == 2, \"Two-item dictionary\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_depth({'k1':{'k2':{'k3':{'k4':{'k5':{'k6':{'k7':{'k8':{'k9':{'k10':{'k11':{'k12':{'k13':{'k14':{'k15':{'k16':{'k17':{'k18':{'k19':{'k20':{'k21':{'k22':{'k23':{'k24':{'k25':{'k26':{'k27':{'k28':{'k29':{'k30':{'k31':{'k32':{'k33':{'k34':{'k35':{'k36':{'k37':{'k38':{'k39':{'k40':{'k41':{'k42':{'k43':{'k44':{'k45':{'k46':{'k47':{'k48':{'k49':{'k50':{'k51':{'k52':{'k53':{'k54':{'k55':{'k56':{'k57':{'k58':{'k59':{'k60':{'k61':{'k62':{'k63':{'k64':{'k65':{'k66':{'k67':{'k68':{'k69':{'k70':{'k71':{'k72':{'k73':{'k74':{'k75':{'k76':{'k77':{'k78':{'k79':{'k80':{'k81':{'k82':{'k83':{'k84':{'k85':{'k86':{'k87':{'k88':{'k89':{'k90':{'k91':{'k92':{'k93':{'k94':{'k95':{'k96':{'k97':{'k98':{'k99':{'k100':{'k101':{'k102':{'k103':{'k104':{'k105':{'k106':{'k107':{'k108':{'k109':{'k110':{'k111':{'k112':{'k113':{'k114':{'k115':{'k116':{'k117':{'k118':{'k119':{'k120':{'k121':{'k122':{'k123':{'k124':{'k125':{'k126':{'k127':{'k128':{'k129':{'k130':{'k131':{'k132':{'k133':{'k134':{'k135':{'k136':{'k137':{'k138':{'k139':{'k140':{'k141':{'k142':{'k143':{'k144':{'k145':{'k146':{'k147':{'k148':{'k149':{'k150':{'k151':{'k152':{'k153':{'k154':{'k155':{'k156':{'k157':{'k158':{'k159':{'k160':{'k161':{'k162':{'k163':{'k164':{'k165':{'k166':{'k167':{'k168':{'k169':{'k170':{'k171':{'k172':{'k173':{'k174':{'k175':{'k176':{'k177':{'k178':{'k179':{'k180':{'k181':{'k182':{'k183':{'k184':{'k185':{'k186':{'k187':{'k188':{'k189':{'k190':{'k191':{'k192':{'k193':{'k194':{'k195':{'k196':{'k197':{'k198':{'k199':{'k200':{'k201':{'k202':{'k203':{'k204':{'k205':{'k206':{'k207':{'k208':{'k209':{'k210':{'k211':{'k212':{'k213':{'k214':{'k215':{'k216':{'k217':{'k218':{'k219':{'k220':{'k221':{'k222':{'k223':{'k224':{'k225':{'k226':{'k227':{'k228':{'k229':{'k230':{'k231':{'k232':{'k233':{'k234':{'k235':{'k236':{'k237':{'k238':{'k239':{'k240':{'k241':{'k242':{'k243':{'k244':{'k245':{'k246':{'k247':{'k248':{'k249':{'k250':{'k251':{'k252':{'k253':{'k254':{'k255':{'k256':{'k257':{'k258':{'k259':{'k260':{'k261':{'k262':{'k263':{'k264':{'k265':{'k266':{'k267':{'k268':{'k269':{'k270':{'k271':{'k272':{'k273':{'k274':{'k275':{'k276':{'k277':{'k278':{'k279':{'k280':{'k281':{'k282':{'k283':{'k284':{'k285':{'k286':{'k287':{'k288':{'k289':{'k290':{'k291':{'k292':{'k293':{'k294':{'k295':{'k296':{'k297':{'k298':{'k299':{'k300':{'k301':{'k302':{'k303':{'k304':{'k305':{'k306':{'k307':{'k308':{'k309':{'k310':{'k311':{'k312':{'k313':{'k314':{'k315':{'k316':{'k317':{'k318':{'k319':{'k320':{'k321':{'k322':{'k323':{'k324':{'k325':{'k326':{'k327':{'k328':{'k329':{'k330':{'k331':{'k332':{'k333':{'k334':{'k335':{'k336':{'k337':{'k338':{'k339':{'k340':{'k341':{'k342':{'k343':{'k344':{'k345':{'k346':{'k347':{'k348':{'k349':{'k350':{'k351':{'k352':{'k353':{'k354':{'k355':{'k356':{'k357':{'k358':{'k359':{'k360':{'k361':{'k362':{'k363':{'k364':{'k365':{'k366':{'k367':{'k368':{'k369':{'k370':{'k371':{'k372':{'k373':{'k374':{'k375':{'k376':{'k377':{'k378':{'k379':{'k380':{'k381':{'k382':{'k383':{'k384':{'k385':{'k386':{'k387':{'k388':{'k389':{'k390':{'k391':{'k392':{'k393':{'k394':{'k395':{'k396':{'k397':{'k398':{'k399':{'k400'"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({'a': {'b': {'c': 'd'}}}) == 2\nassert     dict_depth({'a': {'b': {'c': 'd'}}}) == 2\nassert     dict_depth({}) == 0\nassert     dict_depth({'a': 'b'}) == 1\nassert     dict_depth({'a': 'b', 'c': {'d': 'e'}, 'f': 'g'}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_depth({1: {2: {3: 4}}} ) == 3\nassert     dict_depth({1: {2: {3: 4}}} ) == 2\nassert     dict_depth({1: {2: {3: 4}}} ) == 1\nassert     dict_depth({1: {2: {3: 4}}} ) == 0\nassert     dict_depth({1: {2: {3: 4}}}) == 0\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],0,3) == 4\nassert     find_Element([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],1,3) == 3\nassert     find_Element([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],0,2) == 7\nassert     find_Element([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],3,4) == 8\nassert     find_Element([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],2,2) == 2\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Element([1,1,1,1,1,1,1],[[0,3],[3,0]],[[0,1],[1,2]],3) == 1\nassert    find_Element([2,2,2,2,2,2,2],[[0,1],[1,2]],[[0,2],[2,0]],4) == 2\nassert    find_Element([1,1,1,1,1,1,1],[[0,3],[3,0]],[[0,1],[1,2]],2) == 1\nassert    find_Element([1,1,1,1,1,1,1],[[0,3],[3,0]],[[0,1],[1,2]],4) == 1\nassert    find_Element([1,1,1,1,1,1,1],[[0,3],[3,0]],[[0,1],[1,2]],3) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Element([1,2,3,4,5,6],[[2,3],4,5],2,[1,2])==[1,6]\nassert     find_Element([1,2,3,4,5,6],[[2,3],4,5],3,[1,2])==[1,2]\nassert     find_Element([1,2,3,4,5,6],[[2,3],4,5],4,[1,2])==[1,2]\nassert     find_Element([1,2,3,4,5,6],[[2,3],4,5],5,[1,2])==[1,6]\nassert     find_Element([1,2,3,4,5,6],[[2,3],4,5],6,[1,2])==[1,6]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Element([[1,2],[3,4]],0,1,0) == 1, 'Wrong output'\nassert     find_Element([[1,2],[3,4]],0,1,1) == 2, 'Wrong output'\nassert     find_Element([[1,2],[3,4]],0,1,2) == 4, 'Wrong output'\nassert     find_Element([[1,2],[3,4]],0,1,3) == 3, 'Wrong output'\nassert     find_Element([[1,2],[3,4]],0,1,4) == 2, 'Wrong output'\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Element([2,3,4,5],1,0,0) == 2\nassert     find_Element([2,3,4,5],1,1,0) == 3\nassert     find_Element([2,3,4,5],1,1,1) == 5\nassert     find_Element([2,3,4,5],1,1,2) == 4\nassert     find_Element([2,3,4,5],1,1,3) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8,9,10,11,12,13],3,[1,2,3,4],7) == 10, 'Wrong Answer'\nassert find_Element([1,2,3,4,5,6,7,8,9,10,11,12,13],3,[1,2,3,4],6) == 5, 'Wrong Answer'\nassert find_Element([1,2,3,4,5,6,7,8,9,10,11,12,13],3,[1,2,3,4],0) == 1, 'Wrong Answer'\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     start_withp(['Hello','World','how','are','you','welcome','python','programmer']) == ['how','are','python']\n\ndef words_starting_withp(words):\n    '''\n    Write a function to return all words from a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nstart_withp([\"purp\",\"pump\",\"pumps\",\"pumps\", \"bronze\"]) == ['pumps','pump']\n\ndef all_caps(words):\n    '''\n    Write a function to return a list of words that all have same first letter.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     start_withp([\"pig\", \"piggy\", \"pig\"]) == ('pig', 'piggy')\nassert start_withp([\"chicken\", \"chickeny\"]) == ('chicken', 'chickeny')\nassert start_withp([\"cat\", \"bat\", \"dog\", \"pig\"]) == ('pig', 'piggy')\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nstart_withp(['p', 'pp', 'ppp', 'pppp']) == ['pp', 'pp']\nassert start_withp(['p', 'pp', 'ppp', 'pppp', 'pppppppp']) == ['pp', 'pp']\nassert start_withp(['p', 'pp', 'ppp', 'pppp', 'pppppppppppp']) == ['pp', 'pp']\nassert start_withp(['p', 'pp', 'ppp', 'pppp', 'pppppppppppppppppppppppppppppp']) == ['pp', 'pp']\nassert start_withp(['p', 'pp', 'ppp', 'pppp', 'ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     start_withp([\"sunchild\", \"daddy\", \"rainy\"]) ==     [\"sunchild\", \"daddy\"]\nassert    start_withp([\"sunchild\", \"daddy\", \"rainy\", \"rainy\", \"lemon\"]) ==     [\"sunchild\", \"daddy\"]\nassert    start_withp([\"sunchild\", \"daddy\", \"rainy\", \"sunny\"]) ==     [\"sunchild\", \"daddy\", \"rainy\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     start_withp(['papa','potato','dolphin','kangaroo']) == ('potato','dolphin')\nassert     start_withp(['potato','dolphin','kangaroo']) == ('potato','dolphin')\nassert     start_withp(['potato','papa','kangaroo']) == ('papa','kangaroo')\nassert     start_withp(['papa','potato','dolphin','kangaroo','lion','giraffe','elephant']) == ('papa','kangaroo')\nassert     start_withp(['potato','papa','dolphin','kangaroo','lion','giraffe','elephant']) == ('papa','kangaroo')\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return 'p', 'q'\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     start_withp(['hello','my', 'name', 'is','mike', 'peter', 'and', 'john', 'were', 'playing', 'at', 'leisure'])==['peter', 'john']"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp([\"papa\", \"babaca\", \"papapa\"]) == ['papa', 'papapa']\nassert     start_withp([\"papa\", \"babaca\", \"papapa\", \"baba\"]) == ['papa', 'papapa']\n\ndef count_evens(nums):\n    '''\n    Write a function that returns the number of even integers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum_i = 0\n    max_sum_i_minus_1 = 0\n    for i in range(index + 1):\n        if i == 0:\n            max_sum_i = max_sum_i_minus_1 = a[0]\n        else:\n            max_sum_i = max(max_sum_i_minus_1 + a[i], a[i])\n        max_sum_i_minus_1 = max_sum_i\n\n    for j in range(index + 1, n):\n        if j == index:\n            max_sum_j = max_sum_i_minus_1 = a[j]\n        else:\n            max_sum_j = max(max_sum_i_minus_1 + a[j], a[j])\n        max_sum_i_minus_1 = max(max_sum_i, max_sum_j)\n\n    return max_sum_i_minus_1\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(max_sum_increasing_subseq([1,2,3,4,5,6,7,8], 8, 2))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum_increasing_subseq([9, 1, 4, 4, 7, 2, 1, 6], 10, 6) == 17\nassert     max_sum_increasing_subseq([9, 1, 4, 4, 7, 2, 1, 6], 8, 6) == 17\nassert     max_sum_increasing_subseq([9, 1, 4, 4, 7, 2, 1, 6], 5, 6) == 17\nassert     max_sum_increasing_subseq([9, 1, 4, 4, 7, 2, 1, 6], 0, 6) == 17\nassert     max_sum_increasing_subseq([9, 1, 4, 4, 7, 2, 1, 6], 4, 6) == 17\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_increasing_subseq([], 0, 0, 0) == 0\nassert     max_sum_increasing_subseq([1], 1, 0, 0) == 1\nassert     max_sum_increasing_subseq([1,5,7], 2, 0, 0) == 7\nassert     max_sum_increasing_subseq([1,2,3,6,7], 2, 0, 0) == 13\nassert     max_sum_increasing_subseq([1,2,3,6,7], 2, 0, 3) == 13\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \na = [-2, 1, 3, 4, 7, 9, 10, 11, 12, 20]\nk = 2\nmax_sum_increasing_subseq(a, len(a), 0, k"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_sum_increasing_subseq([1,2,3,4,5,6], 6, 4, 5) == 10\nassert max_sum_increasing_subseq([1,2,3,4,5,6], 5, 2, 5) == 5\nassert max_sum_increasing_subseq([1,2,3,4,5,6], 6, 0, 5) == 6\nassert max_sum_increasing_subseq([1,2,3,4,5,6], 5, 0, 5) == 6\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex(((1,2),),2,2) == ((1,2),)\nassert     colon_tuplex(((1,2),(3,4),(5,6)),2,2) == ((1,2),(3,4),(5,6))\nassert     colon_tuplex(((1,2),(3,4),(5,6)),2,3) == ((1,2,3),(4,5,6))\nassert     colon_tuplex(((1,2,3),(4,5,6)),2,4) == ((1,2,3,4),(5,6))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     colon_tuplex((),1,3) == (1,3)\nassert     colon_tuplex((1,3),1,3) == (1,3)\nassert     colon_tuplex((1,3),2,4) == (2,4)\nassert     colon_tuplex((1,3),1,2) == (1,2)\nassert     colon_tuplex((1,3),1,1) == (1,1)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ntuplex = (1,2,3,4)\ncolon_tuplex(tuplex,2,2)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     colon_tuplex((1,2,3),2,1)==(1,2), 'Wrong output.'\nassert     colon_tuplex((1,2),2,1)==(), 'Wrong output.'\nassert     colon_tuplex((),2,1)==(), 'Wrong output.'\nassert     colon_tuplex((),2,2)==(2), 'Wrong output.'\nassert     colon_tuplex((2,3,4),2,1)==(2,3), 'Wrong output.'\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     colon_tuplex((1,2,3),1,2)==((1,2),(3,))\nassert     colon_tuplex((1,2,3),0,2)==((1,2,3),())\nassert     colon_tuplex((1,2,3),0,3)==((1,2,3),(1,2,3))\nassert     colon_tuplex((1,2,3),0,4)==((1,2,3),(1,2,3,1))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     colon_tuplex((1,2),2,3) == (2,1)\nassert     colon_tuplex((2,3),2,3) == (3,2)\nassert     colon_tuplex((3,2),2,3) == (2,3)\nassert     colon_tuplex((3,4),2,3) == (3,2)\nassert     colon_tuplex((4,3),2,3) == (3,4)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     colon_tuplex([('a','b'),('c','d')],2,2)==(('a','c'),('b','d'))\nassert    colon_tuplex([('a','b'),('c','d')],2,1)==(('a','b'),('c','d'))\nassert    colon_tuplex([('a','b'),('c','d')],1,2)==(('a','b'),('c','d'))\nassert    colon_tuplex([('a','b'),('c','d')],1,1)==(('a','b'),('c','d'))\nassert    colon_tuplex([('a','b'),('c','d')],0,2)==(('a','b'),('c','d'))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     colon_tuplex((1,2,3),(1,2,3),3)==(1,2,3)\nassert     colon_tuplex((1,2,3),(2,3,4),3)==(1,2,3)\nassert     colon_tuplex((1,2,3),(3,4,5),3)==(1,2,3)\nassert     colon_tuplex((1,2,3),(4,5,6),3)==(1,2,3)\nassert     colon_tuplex((1,2,3),(4,5,6,7),3)==(1,2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     colon_tuplex([0,1,2,3],3,3) == (0,3,3,3)\nassert     colon_tuplex([1,2,3],3,3) == (1,3,3,3)\nassert     colon_tuplex([1,2,3,4],3,4) == (1,3,4,4)\nassert     colon_tuplex([0,1,2],2,3) == (0,1,2,2)\nassert     colon_tuplex([0,1,2,3],4,3) == (0,1,3,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncolon_tuplex(('a','b','c'),2,3) == ('a','b')\nassert \ncolon_tuplex(('a','b','c'),1,3) == ('a','b','c')\nassert \ncolon_tuplex(('a','b','c'),1,2) == ('a','b')\nassert \ncolon_tuplex(('a','b','c'),2,1) == ('a',)\nassert \ncolon_tuplex(('a','b','c'),2,0) == ('a','b','c')\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     large_product([-3, -5, -2, -4, -1], [-3, 7, -1, -4, 3], 1) == 6, \"Wrong answer\"\nassert large_product([3, -2, -2, -3, 4], [-7, -3, -4, -1, -2], 3) == -2, \"Wrong answer\"\nassert large_product([1, 3, -2, 4, 2], [-3, -4, -2, -3, 5], 3) == -4, \"Wrong answer\""
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     large_product([1, 2, 3], [2, 3, 5], 2) == 120\nassert large_product([0.5, 2.1, 0.1, 2.1, 5.7], [0.3, 1.9, 1.3, 2.4, 0.5], 2) == 45.0\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     large_product([10, 3, 5],\n        [1, 3, 7],\n        2) ==    [110, 303, 501]\nassert     large_product([2, 1, 5],\n        [3, 4, 6],\n        3) ==    [12, 12, 24]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     large_product([1, 2, 3, 4], \n                     [1, 2, 3], 3) == 24\nassert     large_product([1, 2, 3, 4], \n                     [1, 2, 4], 4) == 12\nassert     large_product([1, 2, 3, 4], \n                     [1, 2, 3, 4], 5) == 216\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     large_product([], [], 0) == 0, '1. Expected 0'\nassert     large_product([], [], 1) == 0, '2. Expected 0'\nassert     large_product([], [], 2) == 0, '3. Expected 0'\nassert     large_product([], [1], 1) == 1, '4. Expected 1'\nassert     large_product([], [2], 1) == 2, '5. Expected 2'\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     large_product([-2, 3, -4], [-1, 0, 1], 1) == -6, \"Wrong!\"\nassert     large_product([-2, 3, -4], [-1, 0, 1], 2) == -8, \"Wrong!\"\nassert     large_product([-2, 3, -4], [-1, 0, 1], 3) == -10, \"Wrong!\"\nassert     large_product([-2, 3, -4], [-1, 0, 1], 4) == -12, \"Wrong!\"\nassert     large_product([-2, 3, -4], [-1, 0, 1], 5) == -14, \"Wrong!\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(10,20)==20,    \"Failed!\"\nassert    maximum(20,10)==20,    \"Failed!\"\nassert    maximum(-10,20)==20,    \"Failed!\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum(10,20) == 20, \"Wrong Answer\"\nassert     maximum(100,200) == 200, \"Wrong Answer\"\nassert     maximum(100,100) == 100, \"Wrong Answer\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum(2,3) == 3, \"Test Case 1 Failed\"\nassert     maximum(2,2) == 2, \"Test Case 1 Failed\"\nassert     maximum(2,3) == 3, \"Test Case 2 Failed\"\nassert     maximum(2,2) == 2, \"Test Case 2 Failed\"\nassert     maximum(2,3) == 3, \"Test Case 3 Failed\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum(10,20) == 20\nassert     maximum(10,-20) == 20\nassert     maximum(-10,20) == 20\nassert     maximum(0,20) == 20\nassert     maximum(100,-10) == 100\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum(1,2) == 1, \"failed\"\nassert maximum(1,2) == 2, \"failed\"\n\nprint(\"all tests passed\""
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(2,3) == 3     == maximum(3,2) == 3\nassert maximum(2,3) == 3\nassert maximum(3,2) == 3\nassert maximum(3,2) == 3\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum(3,3) == 3\nassert     maximum(100,100) == 100\nassert     maximum(11.5,11.5) == 11.5\nassert     maximum(11.55,11.55) == 11.55\nassert     maximum(0,0) == 0\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum(3,7) == 7\nassert    maximum(1,2) == 2\nassert    maximum(1,1) == 1\nassert    maximum(7,8) == 7\nassert    maximum(3,3) == 3\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum(5, 10) == 10\nassert     maximum(10, 5) == 10\nassert     maximum(10, 10) == 10\nassert     maximum(-5, -10) == -5\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple('a') == ('a',)\nassert     string_to_tuple('a,b,c') == ('a', 'b', 'c')\nassert     string_to_tuple('a,b,c,') == ('a', 'b', 'c', ',')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('this is a test') == ('t','h','i','s',' ', 'a','c', 'e','s','t')\nassert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')\nassert string_to_tuple('invalid') == None\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_tuple('Hello, world') == (0, 5, 6, 5, 6, 1, 0, 0, 1)\nassert     string_to_tuple('Python') == (0, 1, 0, 0, 0, 0, 1, 0, 0)\nassert     string_to_tuple('BEGIN:') == (0, 1, 0, 0, 1)\nassert     string_to_tuple('END:') == (0, 1, 0, 1, 0)\nassert     string_to_tuple('') == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple(\"Hello\") == ('H', 'e', 'l', 'l', 'o')\nassert     string_to_tuple(\"Bye\") == ('B', 'y', 'e', 'r', 'e')\n\ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")\nassert     string_to_tuple(\"world\") == (\"w\", \"o\", \"r\", \"l\", \"d\")\nassert     string_to_tuple(\"abc\") == (\"a\", \"b\", \"c\")\nassert     string_to_tuple(\"\") == ()\nassert     string_to_tuple(\"123456789\") == (\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\")\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_tuple('test') == ('t', 'e','s', 't')\nassert     string_to_tuple('testing') == ('t', 'e','s', 'i', 'ng', 'n', 'g', 'i', 'c')\n\ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')\nassert     string_to_tuple('python') == ('p', 'y', 't', 'h', 'o', 'n')\n\ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef tuple_to_string(tuple):\n    '''\n    Write a function to convert a given tuple of characters to string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple('a') == ('a',), \"1st test case\"\nassert     string_to_tuple('ab') == ('a', 'b'), \"2nd test case\"\nassert     string_to_tuple('abc') == ('a', 'b', 'c'), \"3rd test case\"\nassert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd'), \"4th test case\"\n\ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters into a string.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_left_most_unset_bit(1) == 1\nassert     set_left_most_unset_bit(2) == 3\nassert     set_left_most_unset_bit(3) == 5\nassert     set_left_most_unset_bit(4) == 7\nassert     set_left_most_unset_bit(8) == 11\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_left_most_unset_bit(2) == False\nassert     set_left_most_unset_bit(1) == True\n\ndef get_right_most_unset_bit(n): \n    '''\n    Write a python function to get the right most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_left_most_unset_bit(0b0101) == 0b1000, \"Test case 1 failed\"\nassert     set_left_most_unset_bit(0b01) == 0b1000, \"Test case 2 failed\"\nassert     set_left_most_unset_bit(0b111) == 0b1110, \"Test case 3 failed\"\nassert     set_left_most_unset_bit(0b10000) == 0b10000, \"Test case 4 failed\"\nassert     set_left_most_unset_bit(0b0000) == 0b0000, \"Test case 5 failed\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nset_left_most_unset_bit(0x0010) == 0x0001\nset_left_most_unset_bit(0x0000) == 0x0000\nset_left_most_unset_bit(0xFF) == 0x01\nset_left_most_unset_bit(0x1F) == 0x1F\nset_left_most_unset_bit(0x1F0) == 0x1F0\nset_left_most_unset_bit(0x1F00) == 0x1F00\nset_left_most_unset_bit(0x1F000) == 0x1F000\nset_left_most_unset_bit(0x1F0000) == 0x1F0000\nset_left_most_unset_bit(0x1F00000) == 0x1F00000\nset_left_most_unset_bit(0x1F000000) == 0x1F000000\nset_left_most_unset_bit(0x1F0000000) == 0x1F0000000\nset_left_most_unset_bit(0x1F0000000000000000) == 0x1F0000000000000000\nset_left_most_unset_bit(0x1F00000001) == 0x1F00000001\nset_left_most_unset_bit(0x1F00000010) == 0x1F00000010\nset_left_most_unset_bit(0x1F00000011) == 0x1F00000011\nset_left_most_unset_bit(0x1F00000011) == 0x1F00000011\nset_left_most_unset_bit(0x1F00000012) == 0x1F00000012\nset_left_most_unset_bit(0x1F00000013) == 0x1F00000013\nset_left_most_unset_bit(0x1F00000014) == 0x1F00000014\nset_left_most_unset_bit(0x1F00000015) == 0x1F00000015\nset_left_most_unset_bit(0x1F00000016) == 0x1F00000016\nset_left_most_unset_bit(0x1F00000017) == 0x1F00000017\nset_left_most_unset_bit(0x1F00000018) == 0x1F00000018\nset_left_most_unset_bit(0x1F00000019) == 0x1F00000019\nset_left_most_unset_bit(0x1F0000010) == 0x1F0000010\nset_left_most_unset_bit(0x1F0000011) == 0x1F0000011\nset_left_most_unset_bit(0x1F0000012) == 0x1F0000012\nset_left_most_unset_bit(0x1F0000013) == 0x1F0000013\nset_left_most_unset_bit(0x1F0000014) == 0x1F0000014\nset_left_most_unset_bit(0x1F0000015) == 0x1F0000015\nset_left_most_unset_bit(0x1F0000016) == 0x1F0000016\nset_left_most_unset_bit(0x1F0000017) == 0x1F0000017\nset_left_most_unset_bit(0x1F0000018) == 0x1F0000018\nset_left_most_unset_bit(0x1F0000019) == 0x1F0000019\nset_left_most_unset_bit(0x1F000001) == 0x1F000001\nset_left_most_unset_bit(0x1F000002) == 0x1F000002\nset_left_most_unset_bit(0x1F000003) == 0x1F000003\nset_left_most_unset_bit(0x1F000004) == 0x1F000004\nset_left_most_unset_bit(0x1F000005) == 0x1F000005\nset_left_most_unset_bit(0x1F000006) == 0x1F000006\nset_left_most_unset_bit(0x1F000007) == 0x1F000007\nset_left_most_unset_bit(0x1F000008) == 0x1F000008\nset_left_most_unset_bit(0x1F000009) == 0x1F000009\nset_left_most_unset_bit(0x1F000010) == 0x1F000010\nset_left_most_unset_bit(0x1F000011) == 0x1F000011\nset_left_most_unset_bit(0x1F000012) == 0x1F000012\nset_left_most_unset_bit(0x1F000013) == 0x1F000013\nset_left_most_unset_bit(0x1F000014) == 0x1F000014\nset_left_most_unset_bit(0x1F000015) == 0x1F000015\nset_left_most_unset_bit(0x1F000016) == 0x1F000016\nset_left_most_unset_bit(0x1F000017) == 0x1F000017\nset_left_most_unset_bit(0x1F000018) == 0x1F000018\nset_left_most_unset_bit(0x1F000019) == 0x1F000019\nset_left_most_unset_bit(0x1F00001) == 0x1F00001\nset_left_most_unset_bit(0x1F00002) == 0x1F00002\nset_left_most_unset_bit(0x1F00003) == 0x1F00003\nset_left_most_unset_bit(0x1F00004) == 0x1F00004\nset_left_most_unset_bit(0x1F00005) == 0x1F00005\nset_left_most_unset_bit(0x1F00006) == 0x1F00006\nset_left_most_unset_bit(0x1F00007) == 0x1F00007\nset_left_most_unset_bit(0x1F00008) == 0x1F00008\nset_left_most_unset_bit(0x1F00009) == 0x1F00009\nset_left_most_unset_bit(0x1F0000a) == 0x1F0000a\nset_left_most_unset_bit(0x1F0000b) == 0x1F0000b\nset_left_most_unset_bit(0x1F0000c) == 0x1F0000c\nset_left_most_unset_bit(0x1F0000d) == 0x1F0000d\nset_left_most_unset_bit(0x1F0000e) == 0x1F0000e\nset_left_most_unset_bit(0x1F0000f) == 0x1F0000f\nset_left_most_unset_bit(0x1F00010) == 0x1F00010\nset_left_most_unset_bit(0x1F00011) == 0x1F00011\nset_left_most_unset_bit(0x1F00012) == 0x1F00012\nset_left_most_unset_bit(0x1F00013) == 0x1F00013\nset_left_most_unset_bit(0x1F00014) == 0x1F00014\nset_left_most_unset_bit(0x1F00015) == 0x1F00015\nset_left_most_unset_bit(0x1F00016) == 0x1F00016\nset_left_most_unset_bit(0x1F00017) == 0x1F00017\nset_left_most_unset_bit(0x1F00018) == 0x1F00018\nset_left_most_unset_bit(0x1F00019) == 0x1F000"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_left_most_unset_bit(0b1) == 0b0\nassert     set_left_most_unset_bit(0b10) == 0b0\nassert     set_left_most_unset_bit(0b100) == 0b0\nassert     set_left_most_unset_bit(0b1000) == 0b0\nassert     set_left_most_unset_bit(0b1110) == 0b0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 5\n    set_left_most_unset_bit(n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_left_most_unset_bit(0)==0, 'The left most unset bit should be unset'\nassert     set_left_most_unset_bit(8)==8, 'The left most unset bit should be set'\nassert     set_left_most_unset_bit(127)==127, 'The left most unset bit should be set'\nassert     set_left_most_unset_bit(2147483647)==2147483647, 'The left most unset bit should be set'\nassert     set_left_most_unset_bit(0x80000000)==0x80000000, 'The left most unset bit should be set'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nvolume_cone(1,3) == math.pi * (1/3) * math.pow(2,1/3) * 1.33\nprint(\"Test: volume_cone passed\")\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cone(4,5) == 32, 'incorrect value'\nassert     volume_cone(5,2) == 50, 'incorrect value'\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cone(1,5) == math.pi * (1/3) * 1**2 * 5, 'the result is wrong'\nassert     volume_cone(4,4) == math.pi * (1/3) * 4**2 * 4, 'the result is wrong'\nassert     volume_cone(1,1) == math.pi * (1/3) * 1**2, 'the result is wrong'\n\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cone(1,5) == math.pi * (5 ** 2) * 1\nassert     volume_cone(0.5,5) == math.pi * (5 ** 2) * 0.5\nassert     volume_cone(0,5) == math.pi * (5 ** 2) * 0\nassert     volume_cone(1.3,3) == math.pi * (3 ** 2) * 1.3\nassert     volume_cone(1,3) == math.pi * (3 ** 2) * 1\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(1.5,2) == math.pi*r**2*h, 'Failed: volume_cone'\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(2,3) == 3.14159265359\nassert     volume_cone(5,3) == 20.09104938270833\nassert     volume_cone(3,3) == 27.77777777777778\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(2,1) == math.pi*math.pow(2,1/3)*r*h\nassert     volume_cone(1,0) == 0\nassert     volume_cone(10,10) == math.pi*math.pow(10,1/3)*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cone(1,2) == math.pi*r**2\nassert     volume_cone(2,3) == 2*math.pi*r**2\nassert     volume_cone(3,4) == 2*math.pi*r**2 + 2*math.pi*r**2*math.sin(math.pi/3)\nassert     volume_cone(4,5) == 2*math.pi*r**2 + 2*math.pi*r**2*math.sin(math.pi/3) + 2*math.pi*r**2*math.sin(2*math.pi/3)\nassert     volume_cone(5,6) == 2*math.pi*r**2 + 2*math.pi*r**2*math.sin(math.pi/3) + 2*math.pi*r**2*math.sin(2*math.pi/3) + 2*math.pi*r**2*math.sin(3*math.pi/3)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(2) == 1\nassert     highest_Power_of_2(3) == 2\nassert     highest_Power_of_2(4) == 2\nassert     highest_Power_of_2(5) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nNote:\n\nThe highest power of 2 can be found by 2^i, where i is the maximum power of 2 less than or equal to n.\nFor example, 2^6 is equal to 16.\n\n\n'''\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n\nassert"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     highest_Power_of_2(128)==8\nassert     highest_Power_of_2(15)==15\nassert     highest_Power_of_2(256)==16\nassert     highest_Power_of_2(27)==27\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     highest_Power_of_2(8) == 2\nassert     highest_Power_of_2(4) == 1\nassert     highest_Power_of_2(2) == 1\nassert     highest_Power_of_2(1) == 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(2) == 2\nassert     highest_Power_of_2(12) == 8\nassert     highest_Power_of_2(10) == 2\nassert     highest_Power_of_2(16) == 4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert highest_Power_of_2(8) == 1\nassert highest_Power_of_2(15) == 2\nassert highest_Power_of_2(16) == 2\nassert highest_Power_of_2(17) == 3\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nhighest_Power_of_2(10)\nhighest_Power_of_2(11)\n\ndef largest_power(n):\n    '''\n    Write a python function to find the largest power of 2 that is less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     highest_Power_of_2(15) == 8, \"Should be 8\"\nassert     highest_Power_of_2(5) == 5, \"Should be 5\"\nassert     highest_Power_of_2(1) == 1, \"Should be 1\"\nassert     highest_Power_of_2(2147483647) == 2147483647, \"Should be 2147483647\"\nassert     highest_Power_of_2(0) == 0, \"Should be 0\"\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_lucas(0) == 2\nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(3) == 4\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_lucas_num(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_lucas_num(n - 1) + find_lucas_num(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lucas(5) == 8\nassert     find_lucas(1) == 2\nassert     find_lucas(20) == 3140289500\nassert     find_lucas(999) == 212993358777600\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_lucas(0) == 2\nfind_lucas(1) == 1\nfind_lucas(2) == 3\nfind_lucas(3) == 4\nfind_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lucas(2) == 3\nassert     find_lucas(5) == 8\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_lucas(0) == 2\nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(3) == 4\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 1\nassert     find_lucas(3) == 3\nassert     find_lucas(5) == 7\nassert     find_lucas(8) == 21\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(3) == 4\nassert find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_string(['{0:<10}'.format('A'), '{0:>10}'.format('B')], 'C') == ['A\\n', 'BC']\nassert     add_string(['{0:<10}'.format('A'), '{0:>10}'.format('B')], 'C') == ['A\\n', 'CC']\n\ndef add_string_list(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_string([], \"\") == \"\"\nassert     add_string([1,2], \"\") == \"\"\nassert     add_string([1,2], \"1\") == \"1\"\nassert     add_string([1,2], \"2\") == \"2\"\nassert     add_string([1,2], \"12\") == \"1\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert add_string([1, 2, 3, 4], \"I am {0} years old.\") == \"I am 1 years old.\"\nassert add_string([1, 2, 3, 4], \"I am {1} years old.\") == \"I am 2 years old.\"\nassert add_string([1, 2, 3, 4], \"I am {0} years old and my name is {1}\") == \"I am 1 years old and my name is Alex.\""
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef add_nums(list_, num):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nadd_string([1,2,3], '{} x {} = {}') == '1 x 1 = 1\\n2 x 2 = 2\\n3 x 3 = 3'\nassert add_string([1,2,3], '{1} x {2} = {3}') == '1 x 2 = 3'\nassert add_string([1,2,3], '{} x {} = {}') == '{} x {} = {}'\nassert add_string([1,2,3], '{} x {} = {}, {}') == '1 x 2 = {}, 3'\nassert add_string([1,2,3], '{} x {} = {}, {}') == '1 x 2 = {}, 3'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_string([1,2,3], '{0} {1} {2}') == '1 2 3'\nassert     add_string([1,2,3], '{1} {0} {2}') == '2 1 3'\nassert     add_string([1,2,3], '{2} {1} {0}') == '3 2 1'\nassert     add_string([1,2,3], '{0} {1} {2}') == '1 2 3'\nassert     add_string([1,2,3], '{1} {2} {0}') == '2 1 3'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert_list_dictionary([1, 2], [\"a\", \"b\"], [\"c\", \"d\"]) == {1: {\"a\": 1, \"b\": 2}, 2: {\"c\": \"c\", \"d\": \"d\"}}\nassert     convert_list_dictionary([1, 2], [\"a\", \"b\"], [1, 2, 3]) == {1: {\"a\": 1, \"b\": 2}, 2: {1: 1, 2: 2, 3: 3}}\nassert     convert_list_dictionary([1, 2], [\"a\", \"b\"], [\"c\", \"d\"]) == {1: {\"a\": 1, \"b\": 2}, 2: {\"c\": \"c\", \"d\": \"d\"}}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary([[1,2],3], [2,3], [1,2]) == {\"key1\": 1, \"key2\": 2, \"key3\": 3}\nassert     convert_list_dictionary([[1,2],3], [1,2], None) == {\"key1\": 1, \"key2\": 1}\nassert     convert_list_dictionary([[1,2],3], None, [1,2]) == {\"key1\": 1, \"key2\": 2}\nassert     convert_list_dictionary([[1,2],3], [2,3], None) == {\"key1\": 2, \"key2\": 3}\nassert     convert_list_dictionary([[1,2],3], None, None) == {\"key1\": 1, \"key2\": 2}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nconvert_list_dictionary([1,2,3], ['a','b','c'], ['d','e','f']) == {1: {'a': 'd', 'b': 'e', 'c': 'f'}, 2: {'a': 'd', 'b': 'e', 'c': 'f'}, 3: {'a': 'd', 'b': 'e', 'c': 'f'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert_list_dictionary([], [], []) == None, \"Empty lists\"\nassert     convert_list_dictionary([1, 2], [], []) == None, \"Empty lists\"\nassert     convert_list_dictionary([], [1, 2], []) == None, \"Empty lists\"\nassert     convert_list_dictionary([], [], [1, 2]) == None, \"Empty lists\""
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary(l1 = [[1, 2], [3], [4, 5, 6]], l2 = [\"a\", \"b\"], l3 = [[1, 2], [\"a\", \"b\"], [\"c\", \"d\"]) == {1: \"a\", 2: \"b\", 3: [\"a\", \"b\"], 4: \"c\", 5: \"d\"}\nassert     convert_list_dictionary(l1 = [[1, 2], [3], [4, 5, 6]], l2 = [\"a\", \"b\"], l3 = [[1, 2], [\"a\", \"b\"], [\"c\", \"d\"]], key = \"key\") == {'key': {1: \"a\", 2: \"b\", 3: [\"a\", \"b\"], 4: \"c\", 5: \"d\"}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"], [\"1\",\"2\",\"3\"]) == {'1': ['a'], '2': ['b'], '3': ['c']}\nassert     convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], \"1 2 3\") == {'a': 1, 'b': 2, 'c': 3}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary(\n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']], \n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']], \n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']]) == {'C1': {'C2': {'C3': ['C1', 'C2', 'C3']}, 'C2': {'C3': ['C1', 'C2', 'C3']}}}\nassert    convert_list_dictionary(\n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']], \n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']], \n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']]) == {'C1': {'C2': {'C3': ['C1', 'C2', 'C3']}, 'C2': {'C3': ['C1', 'C2', 'C3']}}}\nassert    convert_list_dictionary(\n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']], \n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']], \n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']]) == {'C1': {'C2': {'C3': ['C1', 'C2', 'C3']}, 'C2': {'C3': ['C1', 'C2', 'C3']}}}\nassert    convert_list_dictionary(\n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']], \n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']], \n    [['C1', 'C2', 'C3'], ['C1', 'C2', 'C3'], ['C1', 'C2', 'C3']]) == {'C1': {'C2': {'C3': ['C1', 'C2', 'C3']}, 'C2': {'C3': ['C1', 'C2', 'C3']}}}\n\n\n'''\nclass Dictionary(dict):\n    def __init__(self, **kwargs):\n        self.update(kwargs)\n    def __getitem__(self, key):\n        return self.get(key, KeyError)\n    def __setitem__(self, key, value):\n        if key in self:\n            raise KeyError(\"Key already exists\")\n        super().__setitem__(key, value)\n    def __contains__(self, key):\n        return key in self\n    def __delitem__(self, key):\n        super().__delitem__(key)\n    def __delattr__(self, key):\n        if key in self:\n            raise KeyError(\"Key already exists\")\n        super().__delattr__(key)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == {1: {\"a\": 1, \"b\": 2, \"c\": 3}, 2: {\"d\": 4, \"e\": 5, \"f\": 6}}\nassert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == {1: {\"a\": 1, \"b\": 2, \"c\": 3}, 2: {\"d\": 4, \"e\": 5, \"f\": 6}}\nassert convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == {1: {\"a\": 1, \"b\": 2, \"c\": 3}, 2: {\"d\": 4, \"e\": 5, \"f\": 6}}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']) == {\"1\": {\"a\": \"d\", \"b\": \"e\", \"c\": \"f\"}, 2: {\"a\": \"d\", \"b\": \"e\", \"c\": \"f\"}, 3: {\"a\": \"d\", \"b\": \"e\", \"c\": \"f\"}}\nassert     convert_list_dictionary([1,2], ['a', 'b'], ['d', 'e', 'f']) == {\"1\": {\"a\": \"d\", \"b\": \"e\"}, 2: {\"a\": \"d\", \"b\": \"e\"}}\nassert     convert_list_dictionary([], ['a', 'b'], ['d', 'e', 'f']) == {}\nassert     convert_list_dictionary([1], ['a'], ['d', 'e', 'f']) == {\"1\": {\"a\": \"d\", \"b\": \"e\", \"c\": \"f\"}}\nassert     convert_list_dictionary([1,2], ['a'], ['b', 'c']) == {\"1\": {\"a\": \"b\", \"b\": \"c\"}}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_max_sum_optimized (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    You can assume that the input n is a perfect square.\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    get_max_sum (5) == 15\n    get_max_sum (7) == 21\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum(1) == 1 \nassert     get_max_sum(2) == 2 \nassert     get_max_sum(3) == 6 \nassert     get_max_sum(4) == 10 \nassert     get_max_sum(5) == 15 \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_sum(4) == 9\nassert     get_max_sum(5) == 13\nassert     get_max_sum(6) == 18\nassert     get_max_sum(8) == 23\nassert     get_max_sum(1) == 1\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum (1) == 1\nassert     get_max_sum (3) == 3\nassert     get_max_sum (5) == 10\nassert     get_max_sum (7) == 21\nassert     get_max_sum (10) == 33\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_sum(5) == 16, \"test 1 failed\"\nassert     get_max_sum(8) == 34, \"test 2 failed\"\nassert     get_max_sum(10) == 48, \"test 3 failed\"\n\ndef get_max_sum_using_cache (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # list comprehension to fill the cache\n    cache = [0] * (n + 1)\n    cache[0] = 0\n    cache[1] = 0\n    cache[2] = 0\n    cache[3] = 0\n    cache[4] = 0\n    cache[5] = 0\n    cache[6] = 0\n    cache[7] = 0\n    cache[8] = 0\n    cache[9] = 0\n    cache[10] = 0\n\n    for i in range(1, n+1):\n        cache[i] = max( (cache[i//2] + cache[i//3] + cache[i//4] + cache[i//5]), i)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum (1)     == 1, \"Wrong answer in get_max_sum\"\nassert     get_max_sum (2)     == 3, \"Wrong answer in get_max_sum\"\nassert     get_max_sum (3)     == 6, \"Wrong answer in get_max_sum\"\nassert     get_max_sum (4)     == 10, \"Wrong answer in get_max_sum\"\nassert     get_max_sum (5)     == 14, \"Wrong answer in get_max_sum\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_sum (2) == 1, \"Wrong answer\"\nassert     get_max_sum (3) == 2, \"Wrong answer\"\nassert     get_max_sum (4) == 3, \"Wrong answer\"\nassert     get_max_sum (5) == 5, \"Wrong answer\"\nassert     get_max_sum (6) == 8, \"Wrong answer\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert max_length_list([1, 2, 3, 4, 5, 6, 7]) == 7\nassert max_length_list([1, 2, 3]) == 3\nassert max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef middle_element(input_list):\n    '''\n    Write a function to find the middle element of a list.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5, \n    \"your function does not work correctly\"\nassert max_length_list([1,2,3,4]) == 4, \n    \"your function does not work correctly\"\nassert max_length_list([1,2,3,4,5]) == 5, \n    \"your function does not work correctly\"\nassert max_length_list([1,2,3,4,5,6]) == 6, \n    \"your function does not work correctly\"\nassert max_length_list([1,2,3,4,5,6,7]) == 7, \n    \"your function does not work correctly\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length_list([0,2,3]) == 0, \"Should be 0\"\nassert     max_length_list([0,2,3,4]) == 3, \"Should be 3\"\nassert     max_length_list([1,2,3]) == 3, \"Should be 3\"\nassert     max_length_list([1,2,3,4]) == 4, \"Should be 4\"\nassert     max_length_list([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length_list([1,2,3]) == 3, \"test 1 should return 3\"\nassert     max_length_list([1,2,3,4,5]) == 5, \"test 2 should return 5\"\nassert     max_length_list([2,2,2,2,2]) == 2, \"test 3 should return 2\"\nassert     max_length_list([-3,-2,-1,-1,-2]) == -1, \"test 4 should return -1\"\nassert     max_length_list([-1,-2,0,1,-1]) == 2, \"test 5 should return 2\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length_list([1,2,3,4])     ==    [1,2,3,4]\nassert     max_length_list([1,2,3,4,5])    ==    [5]\nassert     max_length_list([1,2,3,4,5,6,7,8,9,0]) ==    [9,8,7,6,5,4,3,2,1,0]\nassert     max_length_list([1,2,3,4,5,6,7]) ==    [7,6,5,4,3,2,1]\nassert     max_length_list([1,2,3,4,5]) ==    [5,4,3,2,1]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_length_list([]) == 0\nassert     max_length_list([1]) == 1\nassert     max_length_list([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length_list([1, 2, 3, 4]) ==     (4, [1, 2, 3, 4])\nassert     max_length_list([1, 2, 3]) ==     (3, [1, 2, 3])\nassert     max_length_list([]) ==         (0, [])\n\ndef max_length_list2(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize the max_length and the result\n    max_length = 0\n    result = []\n    # check every item in the input_list\n    for item in input_list:\n        # check if the item is longer than max_length\n        if len(item) > max_length:\n            # if it is, update max_length\n            max_length = len(item)\n            # update the result with the new item\n            result = item\n    # return the result\n    return (max_length, result)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('check max_length_list...')\nprint(max_length_list([1, 2, 3, 4, 5]))\nprint(max_length_list([4, 5, 6, 7, 8]))\nprint(max_length_list([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_length_list([]))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct((1,2,3,3,4,5)) == False, \\\n\"Error in check_distinct()\"\nassert     check_distinct((1,2,3,4,5,5)) == True, \\\n\"Error in check_distinct()\"\nassert     check_distinct((1,2,3,4,5,6)) == False, \\\n\"Error in check_distinct()\"\nassert     check_distinct((1,2,3,4,5,6,7)) == True, \\\n\"Error in check_distinct()\"\nassert     check_distinct((1,2,3,4,5,6,7,8)) == False, \\\n\"Error in check_distinct()\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct(('mango', 'banana', 'apple')) == True\nassert     check_distinct(('mango', 'apple', 'banana')) == False\nassert     check_distinct(('mango','mango', 'banana')) == False\n\ndef distance(test_tup):\n    '''\n    Write a function that accepts a tuple and calculates the euclidean distance \n    between all the items in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert (check_distinct((1,2,3,3,4,4,5,5)) == True), \"The given tuple contains duplicate elements\"\nassert (check_distinct((1,2,3,3)) == False), \"The given tuple doesn't contain duplicate elements\"\nprint(\"\\nTest case for check_distinct() method is passed\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    check_distinct((1,2,3,4,5,6,7,8,9,0)) == False, \"No Duplicates\"\n    check_distinct((1,2,3,4,5,6,7,8,9,0,0,0)) == True, \"Duplicates\"\n    check_distinct((1,1,1,1,1,1)) == False, \"Duplicates\"\n    check_distinct((1,2,3,4,5,6,7,8,9,0,0,0,0,0)) == False, \"Duplicates\""
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef validate_tuple(test_tup):\n    '''\n    Write a function to check if given tuple contains all numbers from 0 to 9\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct(('a', 'b', 'c', 'd')) == True, \"Test failed\"\nassert     check_distinct(('a', 'b', 'c', 'd', 'e', 'f')) == False, \"Test failed\"\nassert     check_distinct(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == True, \"Test failed\"\nprint(\"TESTS SUCCESSFUL\")"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct(('c', 'a', 'b')) == True\nassert     check_distinct(('c', 'b', 'a')) == False\nassert     check_distinct(('c', 'c', 'a')) == False\nassert     check_distinct(('c', 'd', 'e')) == False\nassert     check_distinct(('a', 'b', 'c')) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_distinct((3,4,2)) == True, \"Odd length\"\nassert check_distinct((3,4,2,5,6)) == False, \"Duplicate\"\nassert check_distinct((0,1,2,0,0)) == False, \"Duplicate\"\n\n'''\nWrite a function to check if a given set of data is a subset of a given set.\n'''\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_distinct((0, 0, 0, 0)) == False\nassert     check_distinct((0, 0, 0, 1)) == True\nassert     check_distinct((0, 1, 2, 1)) == False\nassert     check_distinct((0, 1, 2, 1)) == True\nassert     check_distinct((0, 1, 2, 1)) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_distinct((0,1,2,2,3,4,5)) == True, \"Duplicates not allowed\"\nassert     check_distinct((0,1,0,1,0,1)) == False, \"Duplicates allowed\"\nassert     check_distinct((1,1,1,1,1,1)) == True, \"Duplicates allowed\"\nprint(\"Distinct Tuple\")\n\n'''\nGiven a tuple with numbers, return the sum of all the numbers. \n'''\ndef sum_of_numbers(tup):\n    '''\n    Write a function that takes a tuple with numbers and returns the sum of the numbers. \n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfirst_non_repeating_character('string') == 'e'\nfirst_non_repeating_character('abc') == 'a'\nfirst_non_repeating_character('sunny day') == 'd'\nfirst_non_repeating_character('shitty') =='s'\nfirst_non_repeating_character('abcabc') == 'c'\nfirst_non_repeating_character('taco') == 'c'\nfirst_non_repeating_character('a') == 'a'\n\n\n\n\n'''\nGiven a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..len(str)-1 inclusive).\n'''\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character(\"aabcc\") == \"a\", \"test 1\"\nassert     first_non_repeating_character(\"Geeksforgeeks\") == \"e\", \"test 2\"\nassert     first_non_repeating_character(\"w34kjh345g\") == \"k\", \"test 3\"\nassert     first_non_repeating_character(\"w12345w3dfg\") == \"d\", \"test 4\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_non_repeating_character(\"abcdefg\") == \"e\"\nassert     first_non_repeating_character(\"aacadefeg\") == \"e\"\nassert     first_non_repeating_character(\"abcbcd\") == \"c\"\nassert     first_non_repeating_character(\"abcd\") == \"a\"\nassert     first_non_repeating_character(\"abccde\") == \"b\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character('') == -1\nassert     first_non_repeating_character('a') == -1\nassert     first_non_repeating_character('ab') == -1\nassert     first_non_repeating_character('aa') == 0\nassert     first_non_repeating_character('aaaaaaaa') == 4\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_non_repeating_character(\"\") == \"\", \\\n    \"First non-repeated character should be an empty string\"\nassert     first_non_repeating_character(\"a\") == \"a\", \\\n    \"First non-repeated character should be the first character\"\nassert     first_non_repeating_character(\"aabbcc\") == \"a\", \\\n    \"First non-repeated character should be the first character\"\nassert     first_non_repeating_character(\"aaacccc\") == \"a\", \\\n    \"First non-repeated character should be the first character\"\nassert     first_non_repeating_character(\"abcccc\") == \"\", \\\n    \"First non-repeated character should be an empty string\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abaac\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"abcdef\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"ababac\"))\nprint(\"Expected: b\\nReturned: \", first_non_repeating_character(\"ababc\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abbbac\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"a\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"c\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"cabc\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"caac\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abaac\"))\nprint(\"Expected: b\\nReturned: \", first_non_repeating_character(\"ababc\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abbbac\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abcb\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"a\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"c\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"cabc\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"caac\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abaac\"))\nprint(\"Expected: b\\nReturned: \", first_non_repeating_character(\"ababc\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abbbac\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abcb\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"a\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"c\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"cabc\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"caac\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abaac\"))\nprint(\"Expected: b\\nReturned: \", first_non_repeating_character(\"ababc\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abbbac\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abcb\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"a\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"c\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"cabc\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"caac\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abaac\"))\nprint(\"Expected: b\\nReturned: \", first_non_repeating_character(\"ababc\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abbbac\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abcb\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"a\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"c\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"cabc\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"caac\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abaac\"))\nprint(\"Expected: b\\nReturned: \", first_non_repeating_character(\"ababc\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abbbac\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abcb\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"a\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"c\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"cabc\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"caac\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abaac\"))\nprint(\"Expected: b\\nReturned: \", first_non_repeating_character(\"ababc\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abbbac\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abcb\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"a\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"c\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"cabc\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"caac\"))\nprint(\"Expected: c\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abaac\"))\nprint(\"Expected: b\\nReturned: \", first_non_repeating_character(\"ababc\"))\nprint(\"Expected: a\\nReturned: \", first_non_repeating_character(\"abca\"))\nprint(\"Expected"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character('') == -1\nassert     first_non_repeating_character('abca') == 0\nassert     first_non_repeating_character('abac') == 2\nassert     first_non_repeating_character('abab') == -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfirst_non_repeating_character(\"abccdeff\") == \"e\"\nfirst_non_repeating_character(\"abcdefg\") == \"e\"\nfirst_non_repeating_character(\"bccdefgh\") == \"c\"\nfirst_non_repeating_character(\"bcddff\") == \"f\"\nfirst_non_repeating_character(\"bcdeff\") == \"f\"\nfirst_non_repeating_character(\"abcde\") == \"e\"\nfirst_non_repeating_character(\"abcdeff\") == \"f\"\nfirst_non_repeating_character(\"abcdeffg\") == \"f\"\nfirst_non_repeating_character(\"\") == \"e\"\nfirst_non_repeating_character(\"bcdefggh\") == \"f\"\nfirst_non_repeating_character(\"bcde\") == \"e\"\nfirst_non_repeating_character(\"abccdeff\") == \"e\"\nfirst_non_repeating_character(\"bcdeff\") == \"f\"\nfirst_non_repeating_character(\"bcddff\") == \"f\"\nfirst_non_repeating_character(\"bccdefgh\") == \"c\"\nfirst_non_repeating_character(\"bccdefg\") == \"c\"\nfirst_non_repeating_character(\"bcde\") == \"e\"\nfirst_non_repeating_character(\"abc\") == \"e\"\nfirst_non_repeating_character(\"bcd\") == \"e\"\nfirst_non_repeating_character(\"acd\") == \"e\"\nfirst_non_repeating_character(\"bcdeffg\") == \"f\"\nfirst_non_repeating_character(\"bcdefgh\") == \"f\"\nfirst_non_repeating_character(\"bcdef\") == \"f\"\nfirst_non_repeating_character(\"bcdefgh\") == \"f\"\nfirst_non_repeating_character(\"bcdefgh\") == \"f\"\nfirst_non_repeating_character(\"bcdefg\") == \"f\"\nfirst_non_repeating_character(\"bcdefg\") == \"f\"\nfirst_non_repeating_character(\"bcdefg\") == \"f\"\nfirst_non_repeating_character(\"bcdefg\") == \"f\"\nfirst_non_repeating_character(\"bcdefg\") == \"f\"\nfirst_non_repeating_character(\"bcdefg\") == \"f\"\nfirst_non_repeating_character(\"abcdefghij\") == \"h\"\nfirst_non_repeating_character(\"bcdefghij\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghij\") == \"h\"\nfirst_non_repeating_character(\"bcdefghij\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_repeating_character(\"bcdefghijk\") == \"h\"\nfirst_non_rep"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character('how are you') == 'h'\nassert first_non_repeating_character('abcde') == 'd'\nassert first_non_repeating_character('ae') == 'e'\nassert first_non_repeating_character('hello world') == 'o'\nassert first_non_repeating_character('h') == 'h'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_char('abcdefgh') == False\nassert     check_char('abcdefgh1') == True\nassert     check_char('abcdefgh2') == True\nassert     check_char('abcdefgh3') == False\n\ndef check_sorted(list):\n    '''\n    Write a function to check whether the given list is sorted in an ascending order or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_char('abc') == True, 'Test 1: Should be True'\nassert     check_char('abc.') == True, 'Test 2: Should be True'\nassert     check_char('abc.def') == False, 'Test 3: Should be False'\nassert     check_char('abc.def.') == False, 'Test 4: Should be False'\nassert     check_char('.abc') == False, 'Test 5: Should be False'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_char('abcd') == True\nassert    check_char('abc') == False\nassert    check_char('abc1') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_char('abc') == True, 'Should return True'\nassert check_char('abc') == False, 'Should return False'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_char(\"apples\") == True\nassert     check_char(\"lemon\") == True\nassert     check_char(\"durian\") == True\nassert     check_char(\"durian\") == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_char('aba') == False, 'Should return False'\nassert     check_char('abc') == True, 'Should return True'\n\ndef check_char_2(string):\n    '''\n    Write a function to check whether the given string is a valid Python identifier or not.\n    '''\n    pass"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not check_char('aba')\nassert check_char('aba')\nassert not check_char('aba')\nassert not check_char('a')\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_numbers(1,2,3) == 2.5, 'test1'\nassert     median_numbers(5,7,3) == 5, 'test2'\nassert     median_numbers(2,2,2) == 2.5, 'test3'\nassert     median_numbers(2,2,2) == 2.5, 'test4'\nassert     median_numbers(3,1,2) == 2, 'test5'\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert median_numbers(0, 1, 1) == 1\nassert median_numbers(0, -1, 1) == -1\nassert median_numbers(0, 1, -1) == -1\nassert median_numbers(0, -1, -1) == -1\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_numbers(4,5,6) == 5.0\nassert     median_numbers(1,2,3) == 2.0\nassert     median_numbers(4,5,6) == 5.0\n\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_numbers(0,0,0) == None, \"Wrong Answer. Median_numbers should return None if any of the three numbers is None.\"\nassert median_numbers(1,2,3) == None, \"Wrong Answer. median_numbers should return None if any of the three numbers is equal to 1.\"\nassert median_numbers(3,4,5) == None, \"Wrong Answer. median_numbers should return None if all three numbers are equal to each other.\"\nassert median_numbers(1,2,3) == 2, \"Wrong Answer. median_numbers should return the median of three numbers if all the numbers are of different types.\"\nassert median_numbers(2,2,2) == None, \"Wrong Answer. median_numbers should return None if any of the three numbers is equal to 2.\"\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert     median_numbers(1.5,2.5,3) == 2.5\nassert     median_numbers(2,2.5,3) == 2.5\nassert     median_numbers(1,2,2.5) == 2.5\nassert     median_numbers(2,2.5,2) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_numbers(1, 2, 3) == 2.5, \"Wrong answer\"\nassert     median_numbers(2, 2, 3) == 2.5, \"Wrong answer\"\nassert     median_numbers(3, 3, 3) == 3, \"Wrong answer\"\nassert     median_numbers(1, 2, 3) == 2.5, \"Wrong answer\"\nassert     median_numbers(2, 2, 3) == 2.5, \"Wrong answer\"\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_numbers(2,3,4) == 2.5\nassert     median_numbers(1,2,3) == 2.5\nassert median_numbers(3,2,1) == 2.0\nassert median_numbers(1,2,3) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef median(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_of_digits([12,345,2,6,7896]) == 36\nassert sum_of_digits([1234,567,890,123]) == 9\nassert sum_of_digits([1,2,3,4,5]) == 15\nassert sum_of_digits([1234,0,67890,123]) == 0\nassert sum_of_digits([0,0,0,0,0]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_of_digits([0, 1, 2, 3, 4, 5, 6]) == 21\nassert     sum_of_digits([7, 8, 9]) == 18\nassert     sum_of_digits([10]) == 10\nassert     sum_of_digits([0]) == 0\nassert     sum_of_digits([1, 1]) == 1\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsum_of_digits([123, 54, 75]) == [7, 7, 0]\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_of_digits([5, 5, 10, 0, -1]) == 1\nassert     sum_of_digits([0, 2, 4, 6, 9]) == 8\nassert     sum_of_digits([0, 0, 0, 0, 0]) == 0\nassert     sum_of_digits([]) == 0\nassert     sum_of_digits([5, 2, 9, 5, 2, 6, 4, 6, 4, 9]) == 33\nprint(\"You passed the test!\")"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([0,1,2,3]) == 10\nassert     sum_of_digits([0,1,2,3]) == 10\nassert     sum_of_digits([0,1,2,3,4]) == 15\nassert     sum_of_digits([0,1,2,3,4,5]) == 22\nassert     sum_of_digits([1,2,3]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_of_digits([-5, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == 5\nassert sum_of_digits([]) == 0\nassert sum_of_digits([1, 3, 5]) == 0\nassert sum_of_digits([-2, 1, -8]) == 0\nassert sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sum_of_digits([121,234,4,5,6]) == 6\nassert sum_of_digits([123,234,4,5,6]) == 6\nassert sum_of_digits([12,34,4,5,6]) == 6\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nTest cases:\ntest_tup1 = (3, 4, 5, 6)\ntest_tup2 = (3, 4, 5, 6)\n\nCorrect:\n[3, 4, 5, 6]\n\nWrong:\n[3, 4, 5, 6, 7]\n'''"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"\\nTESTS:\")\nprint(\"========\")\nprint(\"Testing bitwise_xor on:\")\nprint(\"\\t(0, 0)\")\nprint(\"\\t(0, 1)\")\nprint(\"\\t(1, 0)\")\nprint(\"\\t(1, 1)\")\nprint(\"\\t(9, 0)\")\nprint(\"\\t(0, 9)\")\nprint(\"\\t(1, 9)\")\nprint(\"\\t(9, 9)\")\nprint(\"\\t(0, 9)\")\nprint(\"\\t(9, 9)\")\nprint()\nprint(\"result:\")\nprint(\"\\t(0, 0)\")\nprint(\"\\t(0, 1)\")\nprint(\"\\t(1, 0)\")\nprint(\"\\t(1, 1)\")\nprint(\"\\t(9, 0)\")\nprint(\"\\t(0, 9)\")\nprint(\"\\t(1, 9)\")\nprint(\"\\t(9, 9)\")\nprint(\"\\t(0, 9)\")\nprint(\"\\t(9, 9)\")\nprint()\nprint(\"\\nTesting bitwise_xor on:\")\nprint(\"\\t(0, 0, True)\")\nprint(\"\\t(1, 0, True)\")\nprint(\"\\t(0, 1, True)\")\nprint(\"\\t(1, 1, True)\")\nprint(\"\\t(9, 0, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(1, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint()\nprint(\"result:\")\nprint(\"\\t(0, 0, True)\")\nprint(\"\\t(0, 1, True)\")\nprint(\"\\t(1, 0, True)\")\nprint(\"\\t(1, 1, True)\")\nprint(\"\\t(9, 0, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(1, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint()\nprint(\"\\nTesting bitwise_xor on:\")\nprint(\"\\t(0, 0, False)\")\nprint(\"\\t(1, 0, False)\")\nprint(\"\\t(0, 1, False)\")\nprint(\"\\t(1, 1, False)\")\nprint(\"\\t(9, 0, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(1, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint()\nprint(\"result:\")\nprint(\"\\t(0, 0, False)\")\nprint(\"\\t(0, 1, False)\")\nprint(\"\\t(1, 0, False)\")\nprint(\"\\t(1, 1, False)\")\nprint(\"\\t(9, 0, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(1, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint()\nprint(\"\\nTesting bitwise_xor on:\")\nprint(\"\\t(0, 0, True)\")\nprint(\"\\t(1, 0, True)\")\nprint(\"\\t(0, 1, True)\")\nprint(\"\\t(1, 1, True)\")\nprint(\"\\t(9, 0, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(1, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint()\nprint(\"result:\")\nprint(\"\\t(0, 0, True)\")\nprint(\"\\t(0, 1, True)\")\nprint(\"\\t(1, 0, True)\")\nprint(\"\\t(1, 1, True)\")\nprint(\"\\t(9, 0, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(1, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint()\nprint(\"\\nTesting bitwise_xor on:\")\nprint(\"\\t(0, 0, False)\")\nprint(\"\\t(1, 0, False)\")\nprint(\"\\t(0, 1, False)\")\nprint(\"\\t(1, 1, False)\")\nprint(\"\\t(9, 0, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(1, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint()\nprint(\"result:\")\nprint(\"\\t(0, 0, False)\")\nprint(\"\\t(0, 1, False)\")\nprint(\"\\t(1, 0, False)\")\nprint(\"\\t(1, 1, False)\")\nprint(\"\\t(9, 0, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(1, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint()\nprint(\"\\nTesting bitwise_xor on:\")\nprint(\"\\t(0, 0, True)\")\nprint(\"\\t(1, 0, True)\")\nprint(\"\\t(0, 1, True)\")\nprint(\"\\t(1, 1, True)\")\nprint(\"\\t(9, 0, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(1, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint()\nprint(\"result:\")\nprint(\"\\t(0, 0, True)\")\nprint(\"\\t(0, 1, True)\")\nprint(\"\\t(1, 0, True)\")\nprint(\"\\t(1, 1, True)\")\nprint(\"\\t(9, 0, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(1, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint(\"\\t(0, 9, True)\")\nprint(\"\\t(9, 9, True)\")\nprint()\nprint(\"\\nTesting bitwise_xor on:\")\nprint(\"\\t(0, 0, False)\")\nprint(\"\\t(1, 0, False)\")\nprint(\"\\t(0, 1, False)\")\nprint(\"\\t(1, 1, False)\")\nprint(\"\\t(9, 0, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(1, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint()\nprint(\"result:\")\nprint(\"\\t(0, 0, False)\")\nprint(\"\\t(0, 1, False)\")\nprint(\"\\t(1, 0, False)\")\nprint(\"\\t(1, 1, False)\")\nprint(\"\\t(9, 0, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(1, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint(\"\\t(0, 9, False)\")\nprint(\"\\t(9, 9, False)\")\nprint()\nprint(\"\\nTesting bitwis"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bitwise_xor((1,2), (2,4)) == (0,4), \"1,2 = (0,4) wrong\"\nassert     bitwise_xor((0,0), (0,0)) == (0,0), \"0,0 = (0,0) wrong\"\nassert     bitwise_xor((0,0), (0,1)) == (0,1), \"0,0 = (0,1) wrong\"\nassert     bitwise_xor((0,1), (0,0)) == (0,0), \"0,1 = (0,0) wrong\"\nassert     bitwise_xor((0,1), (0,1)) == (0,0), \"0,1 = (0,0) wrong\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bitwise_xor((1, 2, 3), (1, 2, 3)) == 0\nassert     bitwise_xor((1, 1, 1), (0, 0, 0)) == 3\nassert     bitwise_xor((0, 0, 0), (0, 0, 0)) == 0\nassert     bitwise_xor((1, 2, 3), (4, 5, 6)) == 8\nassert     bitwise_xor((1, 2, 3), (2, 4, 6)) == 8\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0), \"Test case 1 failed\"\nassert     bitwise_xor((0, 0), (1, 1)) == (1, 1), \"Test case 2 failed\"\nassert     bitwise_xor((1, 1), (0, 0)) == (1, 1), \"Test case 3 failed\"\nassert     bitwise_xor((1, 1), (1, 1)) == (0, 0), \"Test case 4 failed\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bitwise_xor((1, 1), (0, 0)) == (1, 1)\nassert     bitwise_xor((0, 1), (1, 1)) == (0, 1)\nassert     bitwise_xor((1, 0), (1, 1)) == (0, 0)\nassert     bitwise_xor((0, 0), (1, 1)) == (1, 1)\nassert     bitwise_xor((0, 0), (0, 0)) == (0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bitwise_xor((1, 2, 3), (1, 2, 4)) == (1, 2, 3), 'bitwise_xor is wrong'\nassert     bitwise_xor((1, 2, 3), (3, 4, 5)) == (3, 2, 1), 'bitwise_xor is wrong'\nassert     bitwise_xor((0, 2, 4), (0, 2, 8)) == (2, 0, 4), 'bitwise_xor is wrong'\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bitwise_xor((0,1), (1,0)) == (1,0), \"bitwise_xor test 1 failed\"\nassert     bitwise_xor((0,1), (0,0)) == (1,1), \"bitwise_xor test 2 failed\"\nassert     bitwise_xor((0,0), (0,1)) == (1,1), \"bitwise_xor test 3 failed\"\nassert     bitwise_xor((1,1), (0,0)) == (1,1), \"bitwise_xor test 4 failed\"\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    \n    \n    \n    "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([(1, 2), (1, 2), (2, 1)]) == 2\nassert     extract_freq([(1, 2, 3), (1, 2, 3), (2, 1, 3)]) == 3\n\ndef count_num_zero(test_list):\n    '''\n    Write a function to count the number of zeros in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef extract_freq_recursive(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if len(test_list) == 1:\n        return 1\n    return 1 + extract_freq_recursive(test_list[1:])\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([1, 2, 3]) == 2\nassert     extract_freq([1, 1, 2, 2]) == 4\nassert     extract_freq([1, 2, 3]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         extract_freq(['a', 'a', 'b']) == 2, 'Should return 2'\nassert         extract_freq(['a', 'a', 'b', 'c', 'a', 'a']) == 4, 'Should return 4'\nassert         extract_freq(['a', 'a', 'b', 'c']) == 1, 'Should return 1'\nassert         extract_freq(['a', 'a', 'b', 'c', 'd', 'e']) == 1, 'Should return 1'\nassert         extract_freq(['a', 'a', 'b', 'c', 'a', 'a', 'd', 'e']) == 4, 'Should return 4'\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_freq([1,2,3,4,1,2,3,4]) == 5, \"Fail the test case\"\nassert     extract_freq([1,1,1,2,2,3,3,4]) == 8, \"Fail the test case\"\nassert     extract_freq([1,1,1,2,2,3,3,4,4]) == 5, \"Fail the test case\"\nassert     extract_freq([1,2,3,4]) == 2, \"Fail the test case\"\nassert     extract_freq([]) == 0, \"Fail the test case\"\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([1,2,3]) == 1\nassert     extract_freq([1,2,2,3]) == 2\nassert     extract_freq([1,2,2,2,3]) == 3\nassert     extract_freq([1,2,2,3,3,4,3,5,5,6,6,7,4]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq([1, 2, 3, 4]) == 1, extract_freq([1, 2, 3, 4])\nassert     extract_freq([1, 2, 1, 4]) == 2, extract_freq([1, 2, 1, 4])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_nested_tuples((1,2), (3,4)) == ((1,2), (3,4))\nassert     add_nested_tuples((1,2,3), (2,4,6)) == ((1,2,3), (2,4,6))\nassert     add_nested_tuples((1,2), (3,4,5)) == ((1,2), (4,6,5))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (add_nested_tuples((1, 2), (3, 4)) == (4, 6))\nassert     (add_nested_tuples((1, 2), (3, 4, 5)) == (1, 4, 5, 7))\nassert     (add_nested_tuples((1, 2), (3, 4, 5, 6)) == (1, 2, 4, 6, 10))\nassert     (add_nested_tuples((1, 2), (3, 4, 5)) == (1, 2, 4, 5, 10))\nassert     (add_nested_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 6, 11))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples((1,2),(3,4)) == (4,6), \"Failed to add two tuples\"\nassert     add_nested_tuples((1,2,3),(3,4,5)) == (4,6,7), \"Failed to add two tuples\"\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntest_tup1 = (1,2,3,4)\ntest_tup2 = (5,6,7,8)\ntest_tup3 = add_nested_tuples(test_tup1, test_tup2)\nassert test_tup3 == (1,2,3,4,5,6,7,8), 'add_nested_tuples function is not working as expected'\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_nested_tuples(((1,2,3),(4,5,6)),((7,8,9),(10,11,12))) == (((1,2,3),(4,5,6)),((7,8,9),(10,11,12)))\nassert add_nested_tuples(((1,2,3),(4,5,6)),((7,8,9),(10,11,12))) == (((7,8,9),(10,11,12)),((1,2,3),(4,5,6)))\nassert add_nested_tuples(((1,2,3),(4,5,6)),((7,8,9),(10,11,12))) == (((1,2,3),(4,5,6)),((7,8,9),(10,11,12)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Create two tuples from the given nested tuples \n    test_tup1 = (1, 2, 3)\n    test_tup2 = ((4, 5, 6), (7, 8, 9))\n    \n    # Call the function to print the result\n    print(add_nested_tuples(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_nested_tuples(((1,2,3),(4,5,6)),((1,2,3),(4,5,6))) == ((2,4,6),(4,10,12))\n\nassert     add_nested_tuples(((1,2,3),(4,5,6)),(1,2,3,4,5,6)) == ((2,4,6),(1,2,3,4,5,6))\n\nassert     add_nested_tuples(((1,2,3),(4,5,6)),(1,2,3,4,5,6,7)) == ((2,4,6),(1,2,3,4,5,6,7))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_nested_tuples((1, 2), (3, 4)) == (4, 6), 'Wrong Output!'\nassert     add_nested_tuples((2, 3), (2, 1)) == (4, 3), 'Wrong Output!'\nassert     add_nested_tuples((4, 5), (3, 4)) == (7, 10), 'Wrong Output!'\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_nested_tuples(tup1, tup2) == (4,(6,7))\nprint(\"Test case passed\")"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minimum(5,3) == 3 \nassert     minimum(4,6) == 4\nassert     minimum(1,6) == 1\nassert     minimum(-1,-6) == -6\nassert     minimum(-6,-1) == -6\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minimum(2,3) == 1, \"Test Failed\"\nassert     minimum(4,2) == 2, \"Test Failed\"\nassert     minimum(10,4) == 4, \"Test Failed\"\nassert     minimum(3.9,2) == 1, \"Test Failed\"\nassert     minimum(4,3.9) == 1, \"Test Failed\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert minimum(7,2) == 2\nassert minimum(6,2) == 2\nassert minimum(6,2) == 2\nassert minimum(-7,2) == -7\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     minimum(1,2) == 1, \"error1\"\nassert     minimum(2,1) == 1, \"error2\"\nassert     minimum(4,6) == 4, \"error3\"\nassert     minimum(2,4) == 2, \"error4\"\nassert     minimum(4,2) == 2, \"error5\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minimum(2,4) == 2\nassert minimum(4,2) == 2\nassert minimum(-2,4) == 2\nassert minimum(2,-4) == -2\nassert minimum(-2,-4) == -2\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minimum(2,1)==1\nassert     minimum(3,4)==1\nassert     minimum(7,3)==3\nassert     minimum(4,5)==4\nassert     minimum(4,4)==4\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minimum(1,2) == 1\nassert     minimum(2,1) == 1\nassert     minimum(2,3) == 2\nassert     minimum(3,2) == 2\nassert     minimum(3,1) == 1\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert (check_tuplex( (1,2), (1,2) ) )\nassert (not check_tuplex( (1,2), (2,3) ) )\nassert (check_tuplex( (1,2,3), (2,3) ) )\nassert (not check_tuplex( (1,2,3), (2,4) ) )\nprint (\"All the tests are passed\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_tuplex((\"a\",\"b\",\"c\"), (\"a\",\"b\",\"c\",\"d\",\"e\") ) == True, \"Expected True\"\nassert     check_tuplex((\"a\",\"b\",\"c\"), (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\") ) == False, \"Expected False\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert (check_tuplex((1,2),(1,2))) == True\nassert (check_tuplex((1,2),(1,2,3))) == False\nassert (check_tuplex((1,2),(1,2,3,4))) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    check_tuplex([1,2,3,4,5,6],(1,2,3,4,5,6)) == True\n    check_tuplex([1,2,3,4,5,6],(1,2,4,5,6,7)) == False\n    check_tuplex([1,2,3,4,5,6],(1,)) == False\n    check_tuplex([1,2,3,4,5,6],()) == True\n    check_tuplex([1,2,3,4,5,6],(7,8,9,10,11)) == False\n    check_tuplex((1,2,3,4,5,6),(1,2,3,4,5,6)) == True\n    check_tuplex((1,2,3,4,5,6),(1,2,4,5,6,7)) == False\n    check_tuplex((1,2,3,4,5,6),(1,)) == False\n    check_tuplex((1,2,3,4,5,6),()) == True\n    check_tuplex((1,2,3,4,5,6),(7,8,9,10,11)) == False\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,4,5,6,7)) == False\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,)) == False\n    check_tuplex(tuple([1,2,3,4,5,6]),()) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(7,8,9,10,11)) == False\n    check_tuplex(tuple([1,2,3,4,5,6]),(6,7,8,9,10,11)) == False\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == True\n    check_tuplex(tuple([1,2,3,4,5,6]),(1,2,3,4,5,6)) == Tru"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_tuplex([1,2,3,4],'3') == True, \"Returning True if an element exists within a tuple\"\nassert     check_tuplex([1,2,3,4],'4') == False, \"Returning False if an element does not exist within a tuple\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not check_tuplex([(1,2),(3,4)],[1,2]), 'Passed'\nassert not check_tuplex([(1,2),(3,4)],[2,4]), 'Passed'\nassert not check_tuplex((1,2),[1,2]), 'Passed'\nassert check_tuplex((1,2),[1,2,3]), 'Passed'\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_tuplex(tuplex = ('a',1,True,1.1,1), tuple1 = (1,1,False,1.1)) == True, \\\n\"Function doesn't check the correctness of the input.\"\nassert     check_tuplex(tuplex = ('a',1,True,1.1,1), tuple1 = (1,1,True,1.1)) == False, \\\n\"Function doesn't check the correctness of the input.\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == True\nassert     check_tuplex((1,2,3),(1,3,4)) == False\nassert     check_tuplex((1,2,3),(1,2,4)) == False\nassert     check_tuplex((1,2,3),(1,2,3)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_tuplex((1, 2, 3),(1,2,3)) == True, 'Wrong!'\nassert     check_tuplex((1, 2, 4),(1,2,3)) == False, 'Wrong!'\n\nprint('\\n7) Check if a tuple is a sub-tuple of another tuple.')\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)),'Output should be true'\nassert     check_tuplex((1,2,4),(1,2,3)),'Output should be false'\nassert     check_tuplex((1,2,3),(1,2,3)),'Output should be false'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not find_Parity(-1)\nassert find_Parity(2)\nassert find_Parity(3)\nassert find_Parity(4)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Parity(1) == True\nassert     find_Parity(4) == False\nassert     find_Parity(7) == True\nassert     find_Parity(8) == False\nassert     find_Parity(9) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Parity(1) == 0, \"odd\"\nassert     find_Parity(2) == 1, \"odd\"\nassert     find_Parity(3) == 0, \"odd\"\nassert     find_Parity(4) == 1, \"odd\"\nassert     find_Parity(5) == 0, \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(5) == 0\nassert     find_Parity(6) == 0\nassert     find_Parity(8) == 0\nassert     find_Parity(9) == 1\nassert     find_Parity(11) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(5) == True, \"Wrong Output\"\nassert     find_Parity(20) == False, \"Wrong Output\"\nassert     find_Parity(10) == True, \"Wrong Output\"\n\nprint(\"You have successfully passed all the test cases\")\n\n'''\nNote: \n1. Write a Python program to calculate the sum of a list of numbers\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_Parity(8) == True\nassert find_Parity(5) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Parity(4)==False, \"Testcase 1 failed\"\nassert     find_Parity(8)==True, \"Testcase 2 failed\"\nassert     find_Parity(22)==False, \"Testcase 3 failed\"\nassert     find_Parity(5)==True, \"Testcase 4 failed\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(9) == 1, '9 is odd'\nassert     find_Parity(8) == 0, '8 is even'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Parity(1) == True\nassert     find_Parity(2) == True\nassert     find_Parity(3) == True\nassert     find_Parity(4) == False\nassert     find_Parity(5) == False\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rearrange_bigger(21) == 321\nassert     rearrange_bigger(123) == 321\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(11) == 21\nassert     rearrange_bigger(10) == 21\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rearrange_bigger(2357) == 76443\nassert     rearrange_bigger(4321) == 4321\nassert     rearrange_bigger(2020) == 20201\nassert     rearrange_bigger(1234) == 12344\nassert     rearrange_bigger(8765) == 87654\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nExample 1:\nInput: num = 9669\nOutput: 9969\nExplanation: 9969 is the next bigger number than 9669.\n\nExample 2:\nInput: num = 17\nOutput: 18\nExplanation: 18 is the first smallest number greater than 17.\n\nExample 3:\nInput: num = 1534236469\nOutput: 964346365\nExplanation: 1534236469 is the first smallest number greater than 1534236468.\n'''"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rearrange_bigger(513) == 531\nassert rearrange_bigger(531) == 513\nassert rearrange_bigger(1321) == 1213\nassert rearrange_bigger(1024) == 1025\nassert rearrange_bigger(101) == 11\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rearrange_bigger(145) == 54321\nassert     rearrange_bigger(235) == 54321\nassert     rearrange_bigger(144) == 414\nassert     rearrange_bigger(41) == 4\nassert     rearrange_bigger(121) == 12\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rearrange_bigger(235) == 54321\nassert     rearrange_bigger(654) == 654321\nassert     rearrange_bigger(123) == 123\nassert     rearrange_bigger(456) == 456\nassert     rearrange_bigger(789) == 789\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(13) == 23\nassert     rearrange_bigger(21) == 132\nassert     rearrange_bigger(22) == 132\nassert     rearrange_bigger(231) == 2311\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(rearrange_bigger(1)) #1\nprint(rearrange_bigger(111)) #11\nprint(rearrange_bigger(14322)) #1432\nprint(rearrange_bigger(2233)) #333\nprint(rearrange_bigger(44444)) #4444\nprint(rearrange_bigger(111111)) #1111\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     k_smallest_pairs([1,3,1],\n                           [1,2,4],\n                           1) == [(1,1)]\n\nassert     k_smallest_pairs([1,4,5],\n                           [2,3,4],\n                           2) == [(1,2), (1,3)]\n\nassert     k_smallest_pairs([1,5,7],\n                           [1,4,6],\n                           2) == [(1,1), (1,4)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([1,2,3,4,5,6], \n                        [10,9,8,7,6,5], \n                        2) == [(1,10), (2,9), (3,8), (4,7), (5,6)]\n\nassert     k_smallest_pairs([4,5,1,3,2], \n                        [1,3,4,5,2], \n                        3) == [(1,1), (3,4), (2,5)]\n\nassert     k_smallest_pairs([1,2,3,4,5,6], \n                        [10,9,8,7,6,5], \n                        1) == [(1,9), (2,8), (3,7), (4,6), (5,5)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    k_smallest_pairs([1, 3, 5, 7], [2, 4, 6, 8], 5) == [(2, 4), (3, 5), (4, 6)]\n    k_smallest_pairs([2, 6], [5, 8], 3) == [(2, 5), (6, 8)]\n    k_smallest_pairs([1, 1, 2, 2], [2, 3, 3, 4], 4) == [(1, 2), (1, 3), (2, 3), (2, 4)]\n    k_smallest_pairs([1, 1, 2, 2], [2, 3, 3, 4], 4) == [(1, 2), (1, 3), (2, 3), (2, 4)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([1,3,7,8,9],\n                           [2,4,6,8,10],\n                           5) ==    [[1,2],[3,4],[7,8],[9,10]]\nassert     k_smallest_pairs([1,1,1,1],\n                           [1,1,1,1],\n                           2) ==    [[1,1],[1,1]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([1,2,3,4], [4,5,6,7], 3) == [[1,4],[2,5],[3,6]]\nassert     k_smallest_pairs([1,1,2,2,4,6,7,7,8,8], [0,1,2,3,4,5,6], 2) == [[1,0],[1,2]]\nassert     k_smallest_pairs([-1,2,4,2,3], [-2,-3,-4], 2) == [[-1,-2],[4,3]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nk_smallest_pairs([1,1,3], [4], 2) == [[1,1],[1,4]]\n\nk_smallest_pairs([1,2,3,4], [1,2], 2) == [[1,2],[2,1]]\nk_smallest_pairs([4,3,2,1], [1,2], 4) == [[1,2],[2,1],[3,4],[4,3]]\nk_smallest_pairs([10,1,2,3], [5,6,7,8], 4) == [[1,5],[2,6],[3,7],[4,8]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1,2,3,4],\n                           [5,6,7,8],\n                           2) == [(1,5),(2,6)]\nassert     k_smallest_pairs([1,3,11,2,9,10],\n                           [2,4,5,8,10,12],\n                           5) == [(2,4),(3,11),(1,3),(10,12)]\nassert     k_smallest_pairs([1,2,3,4],\n                           [5,6,7,8],\n                           1) == [(1,5)]\nassert     k_smallest_pairs([2,3,4],\n                           [1,4,5,7,8,9,10],\n                           6) == []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     k_smallest_pairs([1,2,3,4,5], [[1,2],[3,4],[5,6],[6,7]], k = 3) == [[1,2],[3,4],[5,6]]\nassert     k_smallest_pairs([1,1,1,1], [[2,2],[3,3],[4,4],[5,5],[6,6]], k = 3) == [[1,2],[3,3],[4,4],[5,5]]\nassert     k_smallest_pairs([1], [[2],[3],[4],[5]], k = 4) == [[1,2],[3,4],[4,5]]\nassert     k_smallest_pairs([], [[1],[2],[3],[4],[5]], k = 4) == [[1,2],[3,4],[4,5]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1,3,4,5,5],\n                        [9,1,5,8,7],\n                        2) == [(1,1), (3,5), (5,5)]\nassert k_smallest_pairs([1,4,6,8],\n                        [2,4,6,8],\n                        2) == [(1,2), (4,4)]\nassert k_smallest_pairs([1,4,6,8],\n                        [2,4,6,8],\n                        1) == [(1,2)]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_product_tuple([[5, 3, 4],\n                            [2, 1, 8],\n                            [9, 7, 6]]) == (2, 1, 8)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_product_tuple([(3, 1), (1, -2)]) == -2\nassert     min_product_tuple([(3, -2), (1, 2)]) == -2\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_product_tuple([(3,4),(5,4),(3,2),(4,6),(4,5),(8,8)]) == (3, 4)\nassert     min_product_tuple([(3,5),(5,4),(2,7),(8,8),(7,9),(1,9)]) == (3, 5)\nassert     min_product_tuple([(5,4),(2,7),(3,9),(6,8),(7,1),(9,2)]) == (2, 7)\nassert     min_product_tuple([(4,5),(2,7),(3,9),(6,8),(7,1),(9,2)]) == (4, 5)\nassert     min_product_tuple([(5,4),(2,7),(3,9),(6,8),(7,1),(9,2)]) == (5, 4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 8, \"Function call failed\"\nassert     min_product_tuple([(1, 2), (1, 2)]) == 1, \"Function call failed\"\nassert     min_product_tuple([(1, 1), (2, 2)]) == 1, \"Function call failed\"\nassert     min_product_tuple([(1, 2), (2, 1)]) == 1, \"Function call failed\"\nassert     min_product_tuple([(0, 0), (0, 0)]) == 0, \"Function call failed\"\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(min_product_tuple(\n    [\n    (2,4),\n    (4,7),\n    (3,5),\n    (1,4)\n    ]\n))\n\nprint(min_product_tuple(\n    [\n    (2,4),\n    (3,5),\n    (1,4)\n    ]\n))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_product_tuple([(1,2),(1,3),(2,3)]) == 1\nassert     min_product_tuple([(5,3),(1,2),(3,3),(1,5),(2,3)]) == 3\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_product_tuple([(10, 3), (6, 1), (4, 8), (15, 3), (18, 7)]) == (15, 3)\nassert     min_product_tuple([(1, 2), (2, 1), (3, 4)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (2, 1), (3, 4), (4, 5)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (2, 1), (3, 4), (4, 5), (5, 6)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (2, 1), (3, 4), (4, 5), (5, 6), (6, 7)]) == (1, 2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_product_tuple([(1, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) ==     (1, 2), '1, 2'\nassert     min_product_tuple([(5, 2), (1, 5), (3, 3), (1, 5), (4, 2), (2, 5)]) ==     (1, 5), '5, 2'\nassert     min_product_tuple([(2, 1), (4, 2), (1, 5), (1, 2), (3, 5), (1, 5)]) ==     (2, 1), '2, 1'\nassert     min_product_tuple([(1, 2), (2, 1), (3, 4), (4, 1), (5, 2), (2, 3), (3, 4), (4, 1), (5, 2)]) ==     (1, 1), '1, 1'\nassert     min_product_tuple([(4, 2), (1, 5), (3, 3), (1, 5), (4, 2), (2, 5), (2, 3), (3, 4), (4, 2)]) ==     (4, 2), '4, 2'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_val([[], 1, 'hello']) == 1, 'WRONG!'\nassert     min_val([[1, 2, 3], 'hello', -1]) == -1, 'WRONG!'\nassert     min_val([[1, 2], 4, 5]) == 4, 'WRONG!'\nassert     min_val([[1, 2], 4, -1]) == -1, 'WRONG!'\nassert     min_val([[1, 2], 4]) == 4, 'WRONG!'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef min_val2(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val(['a',2,2.1]) == 2.1\nassert     min_val([2.0,2.0,2.0]) == 2.0\nassert     min_val([2.1,2.0,2.1]) == 2.0\nassert     min_val([]) == None\nassert     min_val([]) == None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_val(['a', 5, 6, 7, 'c', 'd', 0]) == 5\nassert     min_val(['a', 5, 6, 'c', 7, 'd', 0]) == 5\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_val([1,2,3,4,5,6,7]) == min([1,2,3,4,5,6,7]), \"test failed\"\nassert     min_val([1,2,3,4,5,6,7,6]) == min([1,2,3,4,5,6,7]), \"test failed\"\nassert     min_val([1,2,3,4,5,6,7,6,6,6]) == min([1,2,3,4,5,6,7]), \"test failed\"\nassert     min_val([1,2,3,4,5,6,7,6,6,6,6,6,6,6,6,6,6]) == min([1,2,3,4,5,6,7]), \"test failed\"\nassert     min_val([1,2,3,4,5,6,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]) == min([1,2,3,4,5,6,7]), \"test failed\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_val([[1,3],5,8]) == 1\nassert     min_val([1,5,8]) == 1\nassert     min_val([3,5,8]) == 3\nassert     min_val([1,5,3]) == 1\nassert     min_val([]) == None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_val([2, 6, 2, 3, 7, 7, 0, 8, 1]) == 0\nassert     min_val([5, 5, 5, 3, 3, 3, 1, 0, 1]) == 0\nassert     min_val([1, 1, 1, 1, 1, 1]) == 0\nassert     min_val([]) == -1\nassert     min_val([1, 1, 1]) == -1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_val([-6, 0, 1, 2, 9, 3]) == min_val([-6, 0, 1, 2, 9, 3]) == -6\nassert     min_val([4,7,1,6,-1]) == min_val([4,7,1,6,-1]) == -1\nassert     min_val([0,1,-2,3,4]) == min_val([0,1,-2,3,4]) == 0\nassert     min_val([1,-2,-3,4,0,0,1]) == min_val([1,-2,-3,4,0,0,1]) == -3\nassert     min_val([1,2,3]) == min_val([1,2,3]) == 1\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsnake_to_camel('hello_world') == 'helloWorld'\nsnake_to_camel('my_name_is_Eminem') =='myNameIsEminem'\nsnake_to_camel('i_am_a_new_project') == 'iAmANewProject'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake_to_camel') == 'SnakeToCamel'\nassert snake_to_camel('snake_case') == 'SnakeCase'\nassert snake_to_camel('snake_case_') == 'SnakeCase'\nassert snake_to_camel('snake_case') == 'SnakeCase'\nassert snake_to_camel('snake_case_123') == 'SnakeCase123'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('my_name') == 'MyName'\nassert     snake_to_camel('my_name') == 'MyName'\nassert     snake_to_camel('my_name') == 'MyName'\nassert     snake_to_camel('my_name') == 'MyName'\nassert     snake_to_camel('my_name') == 'MyName'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\", \"snake case conversion failed\"\nassert     snake_to_camel(\"double_snake\") == \"doubleSnake\", \"double snake case conversion failed\"\nassert     snake_to_camel(\"underscore_in_lower\") == \"underScoreInLower\", \"underscore in lower case conversion failed\"\nassert     snake_to_camel(\"underscore_in_upper\") == \"underScoreInUpper\", \"underscore in upper case conversion failed\"\nassert     snake_to_camel(\"lower_case\") == \"lowerCase\", \"lower case conversion failed\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake') =='snake'\nassert     snake_to_camel('snake_') =='snake'\nassert     snake_to_camel('snake') =='snake'\nassert     snake_to_camel('snake_ ') =='snake'\nassert     snake_to_camel('snake-') =='snake'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase'\nassert snake_to_camel('snake-case') == 'SnakeCase'\nassert snake_to_camel('snake_case') == 'SnakeCase'\n\nassert snake_to_camel('snake_case') == 'SnakeCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snake_case\"\nassert     snake_to_camel(\"snakeCamelCase\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snake_case\") == \"snake_case\"\nassert     snake_to_camel(\"snakeCamelCase\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snake_case\") == \"snake_case\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel(\"hello_world\") == \"helloWorld\"\nassert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case_\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case_1\") == \"snakeCase1\"\nassert     snake_to_camel(\"snake_case__1\") == \"snakeCase1\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1,2,3,4]) == [1,3,4],'should return 1,3,4'\nassert     remove_odd([1,3,2,4,5,6]) == [1,3,5,6],'should return 1,3,5,6'\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9],'should return 1,3,5,7,9'\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10],'should return 1,3,5,7,9,10'\n\ndef remove_odd_nested(l):\n    '''\n    Write a python function to remove odd numbers from a given nested list.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9, 10]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 10, 11]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 9, 10, 11, 12]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 3, 5, 7, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 3, 5, 7, 9, 11, 13, 15]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd([1,2,3,4,5]) == [1,3,5], \"remove_odd fails\"\nassert     remove_odd([1,1,1,1]) == [1], \"remove_odd fails\"\nassert     remove_odd([1,2,3,4,5,6]) == [1,3,5], \"remove_odd fails\"\nassert     remove_odd([1,2,3,4,5,6,7]) == [1,3,5,7], \"remove_odd fails\"\nassert     remove_odd([1,2,3,4,5,6,7,8]) == [1,3,5,7,8], \"remove_odd fails\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10]) ==     [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,10,10]) ==     [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,10,10,10,10]) ==     [1,3,5,7,9]\n\ndef average_grades(*args):\n    '''\n    Write a python function to average all the grades that are given as an argument.\n    '''\n    pass"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"TEST CASE 1 PASSED!\\n\")\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == []\nassert     remove_odd([]) == []\nassert     remove_odd([1]) == [1]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 1) == ('a', 1), 'Wrong return value for extract_nth_element'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('b', 2), 'Wrong return value for extract_nth_element'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 3) == ('c', 3), 'Wrong return value for extract_nth_element'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 4) == ('c', 3), 'Wrong return value for extract_nth_element'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 0) == ('a', 1), 'Wrong return value for extract_nth_element'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element([1,2,3],2) == 3, \"Wrong output for extract_nth_element\"\nassert     extract_nth_element([1,2,3], 0) == 1, \"Wrong output for extract_nth_element\"\nassert     extract_nth_element([1,2,3], 4) == 3, \"Wrong output for extract_nth_element\"\nassert     extract_nth_element([1,2,3], 5) == \"Invalid Index\"\n\ndef extract_elements(list1, indices):\n    '''\n    Write a function to extract the specified elements from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_nth_element([(2, 3), (5, 7), (8, 9)], 2) == (5, 7)\nassert     extract_nth_element([(2, 3), (5, 7), (8, 9)], 3) == (8, 9)\nassert     extract_nth_element([(2, 3), (5, 7), (8, 9)], 4) == ()\nassert     extract_nth_element([(2, 3), (5, 7), (8, 9)], 0) == ()\nassert     extract_nth_element([(2, 3), (5, 7), (8, 9)], 1) == (5, 7)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_nth_element([('a', 'b', 'c'), ('d', 'e'), ('f', 'g'), ('h', 'i'), ('j', 'k')], 0) == ('a', 'b', 'c')\nassert     extract_nth_element([('a', 'b', 'c'), ('d', 'e'), ('f', 'g'), ('h', 'i'), ('j', 'k')], 1) == ('d', 'e')\nassert     extract_nth_element([('a', 'b', 'c'), ('d', 'e'), ('f', 'g'), ('h', 'i'), ('j', 'k')], 2) == ('f', 'g')\nassert     extract_nth_element([('a', 'b', 'c'), ('d', 'e'), ('f', 'g'), ('h', 'i'), ('j', 'k')], 3) == ('h', 'i')\nassert     extract_nth_element([('a', 'b', 'c'), ('d', 'e'), ('f', 'g'), ('h', 'i'), ('j', 'k')], 4) == ('j', 'k')\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 0) == (\"a\", 1)\nassert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 1) == (\"b\", 2)\nassert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 2) == (\"c\", 3)\nassert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 3) == (\"c\", 3)\nassert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 4) == (\"c\", 3)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nextract_nth_element([('a', 'b', 'c'), ('d', 'e', 'f')], 1) == ('a', 'b', 'c')\n\nextract_nth_element([('a', 'b', 'c'), ('d', 'e', 'f')], 2) == ('d', 'e', 'f')\n\nextract_nth_element([('a', 'b', 'c'), ('d', 'e', 'f')], 3) == ('a', 'b', 'c')\n\nextract_nth_element([('a', 'b', 'c'), ('d', 'e', 'f')], 4) == ('d', 'e', 'f')\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlist1 = list(map(int,input(\"Enter the first list with commas : \").split(',')))\nlist2 = list(map(int,input(\"Enter the second list with commas : \").split(',')))\n\nprint(\"Overlapping elements are :\")\nfor i in list1:\n    for j in list2:\n        if i==j:\n            print(i)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert overlapping([1,2,3,4],[3,4])\nassert not overlapping([1,2,3,4],[2])\nassert overlapping([1,2,3,4],[5])\nassert not overlapping([1,2,3,4],[6])\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     overlapping([1,3,4],[2,3,5]) == True, '1'\nassert     overlapping([2,3,5],[1,3,4]) == True, '2'\nassert     overlapping([2,3,5],[2,3,4]) == False, '3'\nassert     overlapping([2,3,5],[1,3]) == False, '4'\nassert     overlapping([],[[1,2],[1,2]]) == True, '5'\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     overlapping([1,2,3],[3,4,5]) == True, \"Fail\"\nassert     overlapping([2,3],[3,4,5]) == True, \"Fail\"\nassert     overlapping([3,4,5],[3,4,5]) == True, \"Fail\"\nassert     overlapping([3,4],[3,4,5]) == False, \"Fail\"\nassert     overlapping([3,4,5],[3,4]) == True, \"Fail\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \noverlapping([1,2,3],[2,3,4])==True\nassert \noverlapping([1,2,3],[4,5,6])==True\nassert \noverlapping([1,2,3],[3,4,5])==True\nassert \noverlapping([1,2,3],[4,5])==False\nassert \noverlapping([],['a','b','c'])==True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not overlapping([1, 2, 3], [1, 2, 3]) == True\nassert not overlapping([1, 2, 3], [2, 3, 4]) == True\nassert not overlapping([1, 2, 3], [2, 3, 4, 5]) == True\nassert not overlapping([1, 2, 3], [1, 2, 4]) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     overlapping([1,2,3,4,5],[1,2,3,4,6]) == True, \"should return True\"\nassert    overlapping([1,2,3,4,5],[1,2,3,4,5]) == False, \"should return False\"\nassert    overlapping([1,2,3,4,5],[1,2,3,5]) == True, \"should return True\"\nassert    overlapping([1,2,3,4,5],[1,2,3]) == True, \"should return True\"\nassert    overlapping([1,2,3,4,5],[1]) == True, \"should return True\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     overlapping([1,2,3],[2,3,4]) == True, \"Overlapping 2nd sequence should return True\"\nassert     overlapping([1,2,3],[1,3,4]) == True, \"Overlapping 2nd sequence should return True\"\nassert     overlapping([1,2,3],[2,3,4],[3,4,5]) == True, \"Overlapping 2nd sequence should return True\"\nassert     overlapping([1,2,3],[2,3,4],[3,4,5], [1,3,4]) == True, \"Overlapping 2nd sequence should return True\"\nassert     overlapping([1,2,3],[2,3,4],[3,4,5], [2,3,4]) == False, \"Overlapping 2nd sequence should return False\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(overlapping([1,1,2,3,5],[1,2,3,4,5,7]))\nassert not overlapping([1,1,2,3,5],[1,2,4,5])"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Product([1, 2, 3, 4, 5, 6, 7]) == (6, 7)\nassert     max_Product([1, 2, 4, 5, 8]) == (8, 5)\nassert     max_Product([1, 2, 3, 5]) == (3, 5)\nassert     max_Product([-1, -2, -3]) == (-1, -2)\nassert     max_Product([1, 2, 3]) == (1, 3)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([-6, -3, -2, -1, 4, 5, 8, 9]) == (-1, 9), 'Incorrect output'\nassert     max_Product([-6, -3, -2, -1, 4, 5, 8, 9]) == (-1, -1), 'Incorrect output'\nassert     max_Product([-6, -3, -2, -1, 4, 5, 8, 9]) == (8, 9), 'Incorrect output'\nassert     max_Product([-6, -3, -2, -1, 4, 5, 8, 9]) == (4, -1), 'Incorrect output'\nassert     max_Product([-6, -3, -2, -1, 4, 5, 8, 9]) == (3, -1), 'Incorrect output'\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Product([1,2,3,4]) == (1,2), \"Wrong\"\nassert     max_Product([-1,2,3,4]) == (-1,2), \"Wrong\"\nassert     max_Product([1,-1,-1,1]) == (1,1), \"Wrong\"\nassert     max_Product([-1,2,-3,4]) == (-1,2), \"Wrong\"\nassert     max_Product([-1,-1,-1,-1]) == (-1,-1), \"Wrong\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Product([1,2,3,4,5,6,7,8]) == 2*3*6\nassert     max_Product([1,2,3,4,5,6,7,8]) == 2*5\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([1, 3, -4, 3, 5, -1]) == 3\nassert max_Product([1, 2, 5, 7, 9, -1]) == 21\nassert max_Product([-1, -1, -1, -1, -1]) == -1\nassert max_Product([1, -1, -1, -1, -1]) == 1\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nif __name__ == '__main__':\n    \n    arr = [1,2,3,4]\n    print(max_Product(arr))\n    assert 1 * 2 == 4\n    assert 1 * 2 * 3 == 12\n\n    arr = [-1,2,-3,4]\n    print(max_Product(arr))\n    assert -1 * 2 == 4\n    "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\narr = [-5, -2, -3, 0, 3, 2, 4]\n\n'''\nA code-like solution to max_Product is given below.\n'''\n\nmax_Product_Solution = []\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        max_Product_Solution.append(arr[i] * arr[j])\n\nmax_Product_Solution = max(max_Product_Solution)\nprint(max_Product_Solution)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([[1,1],[2,1],[3,1],[1,2],[2,2],[3,2],[1,3],[2,3],[3,3]]    )    ==    True\nassert     group_tuples([[1,1],[2,1],[3,1],[1,2],[2,2],[3,2],[1,3],[2,3],[3,3],[2,4]]    )    ==    False\nassert     group_tuples([[1,1],[2,1],[3,1],[1,2],[2,2],[3,2],[1,3],[2,3],[3,3],[2,4],[1,5]]    )    ==    False\n\ndef group_lists(Input):\n    '''\n    Write a function to find common first element in given list of list.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     group_tuples(    [('a',1),('b',2),('c',1),('d',2)]) ==    ('b',2)\nassert group_tuples([('a',1),('b',2),('c',1),('d',2)]) ==     ('b',2)\nassert group_tuples([('a',1),('b',2),('c',1),('d',2)]) ==     ('b',2)\nassert group_tuples([('a',1),('b',2),('c',1),('d',2)]) ==     ('b',2)\nassert group_tuples([('a',1),('b',2),('c',1),('d',2)]) ==     ('b',2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples(\n    [(1, 4), (3, 4), (2, 2), (1, 1), (5, 1), (2, 2), (2, 2), (1, 1), (2, 2)]\n    ) == 1\nassert group_tuples(\n    [(1, 4), (3, 4), (2, 2), (1, 1), (5, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2)]\n    ) == 2\nassert group_tuples(\n    [(1, 4), (3, 4), (2, 2), (1, 1), (5, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2)]\n    ) == 1\nassert group_tuples(\n    [(1, 4), (3, 4), (2, 2), (1, 1), (5, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2)]\n    ) == 2\nassert group_tuples(\n    [(1, 4), (3, 4), (2, 2), (1, 1), (5, 1), (2, 2), (2, 2), (1, 1), (2, 2), (2, 2)]\n    ) == 1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples([(1,2,3),(2,3,4),(3,4,5),(2,3,4),(5,2,3)]) == (2,3,4), \"Wrong\"\nassert     group_tuples([(1,2,3),(1,3,4),(2,3,4),(1,3,4)]) == (1,3,4), \"Wrong\"\nassert     group_tuples([(1,2,3),(1,3,4),(2,3,4),(1,3,4),(5,2,3)]) == (1,3,4), \"Wrong\"\nassert     group_tuples([(1,2,3),(1,3,4),(2,3,4),(1,3,4),(5,2,3),(2,1,2)]) == (1,2,3), \"Wrong\"\nassert     group_tuples([(1,2,3),(1,3,4),(2,3,4),(1,3,4),(5,2,3),(2,1,2)]) == (1,2,3), \"Wrong\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    group_tuples([(1,2), (2,3), (3,4), (4,5), (5,6)]) == (1,2,3,4,5)\n    group_tuples([(1,2), (2,3), (3,4), (4,5), (5,6), (1,2)]) == (1,2,3,4,5)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     group_tuples([(1, 1), (2, 2), (3, 3), (4, 4)]) == (1, 1)\nassert group_tuples([(1, 1), (2, 2), (3, 3), (4, 4), (1, 1)]) == (1, 1)\nassert group_tuples([(1, 1), (1, 1), (1, 1)]) == (1, 1)\nassert group_tuples([(1, 1), (2, 2), (3, 3)]) == (1, 1)\nassert group_tuples([(1, 1), (2, 2), (3, 3), (4, 4)]) == (1, 1)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    group_tuples(    [(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)]    ) == (1, 2, 4)\n\ndef find_duplicates(Input):\n    '''\n    Write a function to find duplicate elements in given list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(1,2),(2,3),(2,4),(1,2),(3,5),(4,5)]) == (1,2), \"First element of 1st tuple\"\nassert     group_tuples([(1,2,3),(2,4,5),(2,4,5)]) == (), \"Empty list\"\nassert     group_tuples([(1,2),(1,2)]) == (1,2), \"group by 2\"\nassert     group_tuples([(1,2,3),(1,2,3)]) == (1,2,3), \"group by 3\"\nassert     group_tuples([(1,2,3),(1,2),(1,2)]) == (1,2,3), \"group by 3\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples([(3, 4, 3, 3), (2, 4, 3, 3), (2, 4, 3, 3), (1, 4, 3, 3)]) == (3, 3, 3, 3)\nassert     group_tuples([(3, 4, 3, 3), (2, 4, 3, 3), (2, 4, 3, 3), (1, 4, 3, 3)]) == (3, 3, 3, 3)\nassert     group_tuples([(3, 4, 3, 3), (2, 4, 3, 3), (2, 4, 3, 3), (1, 4, 3, 3)]) == (3, 3, 3, 3)\nassert     group_tuples([(3, 4, 3, 3), (2, 4, 3, 3), (2, 4, 3, 3), (1, 4, 3, 3)]) == (3, 3, 3, 3)\nassert     group_tuples([(3, 4, 3, 3), (2, 4, 3, 3), (2, 4, 3, 3), (1, 4, 3, 3)]) == (3, 3, 3, 3)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef Get_Longest_Word(sentence): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([1,2,3,4]) == 4 \nassert     Find_Max([1,2,3,4,5]) == 5\nassert     Find_Max([1,1,1,1,1]) == 1 \nassert     Find_Max([]) == None\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = [1,2,3,4,5,6,7,8]\n    assert Find_Max(lst) == 8\n    print(Find_Max(lst))\n    \n    "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max([]) == None, \"Empty List\"\nassert     Find_Max([1]) == 1, \"single element\"\nassert     Find_Max([1,1]) == 1, \"multiple elements\"\nassert     Find_Max([1,1,2]) == 2, \"multiple elements with different length\"\nassert     Find_Max([1,1,2,2,2]) == 2, \"multiple elements with same length\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__': \n    lst = [10,20,30,40,50] \n    print(Find_Max(lst))"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max(['abc','dd','fgh','jkl','mnop'])=='mnop', \"Should return'mnop'\"\nassert     Find_Max(['abc','dd','fgh','jkl','mnop','qrst'])=='mnop', \"Should return'mnop'\"\nassert     Find_Max(['a','b','c','d','e','f','g','h','i','j','k','l'])== 'k', \"Should return 'k'\"\nassert     Find_Max(['','','',''])== '', \"Should return ''\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max(lst) == 9, \"Output should be 9\"\nprint(\"Correct!\")\n\nprint()\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    Find_Max([1, 2, 3, 4, 5, 6, 7]) == 7\n    Find_Max([1, 1, 1, 1, 1]) == 1\n    Find_Max([1]) == 1\n    Find_Max([]) == None\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max([1,2,3,4]) == 3\nassert     Find_Max([1,2,3]) == 3\nassert     Find_Max([1,2,3,4,5,6]) == 5\nassert     Find_Max([2,2,2,2,2,2,2]) == 2\nprint('correct')\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     round_and_sum([0.9, 1.9, 2.9, 3.9, 4.9]) == 35, \"Wrong\"\nassert round_and_sum([0.9, 1.9, 2.9, 3.9, 4.9]) == 35\nassert round_and_sum([0.9, 1.9, 2.9, 3.9, 4.9]) == 35\nassert round_and_sum([0.9, 1.9, 2.9, 3.9, 4.9]) == 35\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nround_and_sum([2,3,3.2,4,5,6,7,7.8,7.9,8.2]) == 45\nround_and_sum([4,5,6,7,7.8,7.9,8.2]) == 45\nround_and_sum([4,5,6,7,7.8,7.9]) == 45\nround_and_sum([4,5,6,7,7.8,7,8]) == 45\nround_and_sum([4,5,6,7,7.8]) == 45\nround_and_sum([4,5,6,7]) == 45\nround_and_sum([4,5,6]) == 45\nround_and_sum([4]) == 45\nround_and_sum([]) == 0"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     round_and_sum([2.3, 5.6, 7.8, 9.0]) == 3, \"Wrong result\"\nassert     round_and_sum([1.1, 2.2, 3.3, 4.4]) == 1, \"Wrong result\"\nassert     round_and_sum([1.9, 2.8, 4.1, 8.2]) == 6, \"Wrong result\"\nassert     round_and_sum([1.0, 2.5, 3.7, 5.8]) == 11, \"Wrong result\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     round_and_sum([1,2,3,4,5,6,7,7]) == [1,2,3,4,5,6,7,8]\nassert     round_and_sum([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     round_and_sum([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     round_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5850, 'Wrong result for round_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):'+ str(round_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nassert     round_and_sum([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 1054, 'Wrong result for round_and_sum([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]):'+ str(round_and_sum([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n\ndef max_num(list1):\n    '''\n    Write a function to return the max number of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [0.3, 0.2, 0.1, 0.4, 0.7, 0.9, 0.5, 0.8, 0.1, 0.6]\n    print(f\"The list: {lst}\")\n    round_and_sum(lst)\n    print(f\"The sum: {round_and_sum(lst)}\""
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     round_and_sum([2,4,5]) == 15, \"Round_and_sum function failed\"\nassert     round_and_sum([3,4,5]) == 15, \"Round_and_sum function failed\"\nassert     round_and_sum([3.4,4.5,5.6]) == 15.4, \"Round_and_sum function failed\"\nassert     round_and_sum([3.4,4.5,5.6,6.7,7.8,8.9]) == 45.4, \"Round_and_sum function failed\"\n\ndef calculate_revenue(num1, num2):\n    '''\n    Write a function to calculate the revenue generated by a store between two dates (exclusive)\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef list_sum(list1):\n    '''\n    Write a function to sum all the numbers in a list of numbers and print the total sum of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     round_and_sum([1, 2, 3]) == 6, 'incorrect result'\nassert     round_and_sum([-1, -2, -3]) == -12, 'incorrect result'\nassert     round_and_sum([-0.1, -0.2, -0.3]) == -0.6, 'incorrect result'\nassert     round_and_sum([0.1, 0.2, 0.3]) == 0.6, 'incorrect result'\nassert     round_and_sum([0.9, 1.0, 1.1]) == 1.2, 'incorrect result'\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncube_Sum(3) == 27\nassert \ncube_Sum(2) == 8\nassert \ncube_Sum(1) == "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 27\nassert     cube_Sum(4) == 64\nassert     cube_Sum(5) == 125\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_Sum(10) == 45, 'cube_Sum test failed.'\nassert     cube_Sum(20) == 8640, 'cube_Sum test failed.'\nassert     cube_Sum(30) == 2410, 'cube_Sum test failed.'\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncube_Sum(5) == 60\ncube_Sum(6) == 216\ncube_Sum(7) == 735\ncube_Sum(8) == 864\ncube_Sum(9) == 563\ncube_Sum(10) == 1210"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_Sum(3) == 14"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncube_Sum(3) == 0\ncube_Sum(6) == 60\ncube_Sum(7) == 576\n\ndef cube_Sum_with_list(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    Input: n - an integer\n    Output: list of integers\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(cube_Sum(10))\nprint(cube_Sum(5))\nprint(cube_Sum(1))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_Sum(0) == 0 \nassert     cube_Sum(2) == 8 \nassert     cube_Sum(100) == 23340\nassert     cube_Sum(1) == 1 \nassert     cube_Sum(5) == 125 \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncube_Sum(6) == cube_Sum(8) == 64\ncube_Sum(0) == cube_Sum(4) == 64\n\n\n\ndef cube_Sum_2(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef concatenate_list(test_list):\n    '''\n    Write a function to concatenate each element of list by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate_tuple((1,2,3,'a','b','c')) == '1,2,3,a,b,c'\nassert     concatenate_tuple((3,2,1,'a','b','c')) == '3,2,1,a,b,c'\nassert     concatenate_tuple((5,4,3,2,1,'a','b','c')) == '5,4,3,2,1,a,b,c'\nassert     concatenate_tuple((7,6,5,4,3,2,1,'a','b','c')) == '7,6,5,4,3,2,1,a,b,c'\nassert     concatenate_tuple((9,8,7,6,5,4,3,2,1,'a','b','c')) == '9,8,7,6,5,4,3,2,1,a,b,c'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    concatenate_tuple((1,2,3)) == '1|2|3', \"Wrong output\"\n    concatenate_tuple((\"A\",\"B\",\"C\",\"D\")) == \"A|B|C|D\", \"Wrong output\"\n    concatenate_tuple((1,2,3,4,5)) == \"1|2|3|4|5\", \"Wrong output\"\nassert concatenate_tuple((1,2,3)) == \"1|2|3\", \"Wrong output\"\nassert concatenate_tuple((1,2,3,4,5)) == \"1|2|3|4|5\", \"Wrong output\"\nassert concatenate_tuple((2,3)) == \"2|3\", \"Wrong output\"\nassert concatenate_tuple(()) == \"\", \"Wrong output\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate_tuple((1, 2, 3)) == '1#2#3', concatenate_tuple((1, 2, 3))\nassert     concatenate_tuple((1, 2, 'a', 'b')) == '1#2#a#b', concatenate_tuple((1, 2, 'a', 'b'))\nassert     concatenate_tuple((1, 2, 3, 4)) == '1#2#3#4', concatenate_tuple((1, 2, 3, 4))\nassert     concatenate_tuple((1, 2, 3, 4, 5)) == '1#2#3#4#5', concatenate_tuple((1, 2, 3, 4, 5))\nassert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a#b#c#d', concatenate_tuple(('a', 'b', 'c', 'd'))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint\nprint concatenate_tuple(('hello', 'world')) #('hello', 'world')\nprint concatenate_tuple(('hello', 'world', '!')) #('hello', 'world', '!'\nprint concatenate_tuple(('hello', 'world', '!','?')) #('hello', 'world', '!', '?'\nprint concatenate_tuple(('hello', 'world', '!', '?', '!', '?')) #('hello', 'world', '!', '?', '!', '?'\n\n\ndef print_n_times(string, n):\n    '''\n    Write a function that takes a string and a number as arguments and prints the \n    string n number of times. \n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple((2,3,4)) == '2-3-4'\nassert     concatenate_tuple((2,3,'hi')) == '2-3-hi'\nassert     concatenate_tuple(('a','hi',2)) == 'a-hi-2'"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate_tuple( ('one', 'two', 'three') ) == 'one2two3', \"Your function is not working\"\nassert     concatenate_tuple( ('one', 'two', 'three', 'four', 'five','six') ) == 'one2two3four5six', \"Your function is not working\"\nassert     concatenate_tuple( ('one', 'two', 'three', 'four') ) == 'one2two3four', \"Your function is not working\"\nassert     concatenate_tuple( ('first','second', 'third') ) == 'firstsecondthird', \"Your function is not working\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate_tuple((1, 2, 3)) == '1|2|3'\nassert concatenate_tuple((1, 'A', 'B', 'C')) == '1|A|B|C'\nassert concatenate_tuple((1, 'A', 'B', ['a', 'b'])) == '1|A|B|[a, b]'\nassert concatenate_tuple((1, ['A', 'B', 'C'], ['D', 'E', 'F'])) == '1|[A, B, C]|D|E|F'"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple([1, 2, 3, 4]) == '1,2,3,4'\nassert     concatenate_tuple((1, 2, 3, 4)) == '1,2,3,4'\nassert     concatenate_tuple([\"1\", \"2\", \"3\"]) == '1,2,3'\nassert     concatenate_tuple([1,2,3]) == '1,2,3'\nassert     concatenate_tuple([]) == ''\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple([1,2,3]) == \"1-2-3\", \"Test Failed!\"\nassert     concatenate_tuple([1,2,3,]) == \"1-2-3\", \"Test Failed!\"\nassert     concatenate_tuple((1,2,3)) == \"1-2-3\", \"Test Failed!\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(3) == 1\nassert     find_Average_Of_Cube(5) == 2\nassert     find_Average_Of_Cube(10) == 5\n\ndef is_Valid(string):  \n    '''\n    Write a python function to check if the given string is a valid python identifier.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Testing for find_Average_Of_Cube function\n    assert find_Average_Of_Cube(3) == 8\n    assert find_Average_Of_Cube(10) == 55\n    assert find_Average_Of_Cube(20) == 338\n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"\\n===== Task 6: =====\")\n\ndef print_Cubes_Of_Natural_numbers(n):\n    '''\n    Write a python function to print cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Average_Of_Cube(10) == 600\nassert     find_Average_Of_Cube(20) == 1400\nassert     find_Average_Of_Cube(30) == 2400\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(find_Average_Of_Cube(10))\nprint(find_Average_Of_Cube(5))\nprint(find_Average_Of_Cube(9))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear(('abcd', 'xyz', 'g') ) == (True, True, True)\nassert     extract_rear(('abcd', 'xyz', 'g') ) == (True, True, False)\nassert     extract_rear(('abcd', 'xyz', 'h') ) == (True, False, False)\nassert     extract_rear(('', '', '')) == (True, True, False)\nassert     extract_rear(('','','')) == (True, True, False)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_rear(('Aman', 'This is', 'a test', 'Raman')) ==     ('Raman', )\nassert     extract_rear(('Aman', 'This is', 'a test', 'Raman','sankalp')) ==     ('Raman','sankalp')\nassert     extract_rear(('Aman', 'This is', 'a test', 'Raman','sankalp', 'nitesh')) ==     ('Raman','sankalp', 'nitesh')\nassert     extract_rear(('Aman', 'This is', 'a test', 'Raman','sankalp', 'nitesh', 'hari','shakya', 'udaydwivedi')) ==     ('Raman','sankalp', 'nitesh', 'hari','shakya', 'udaydwivedi')\nassert     extract_rear(('Aman', 'This is', 'a test', 'Raman','sankalp', 'nitesh', 'hari','shakya', 'udaydwivedi','shivam')) ==     ('Raman','sankalp', 'nitesh', 'hari','shakya', 'udaydwivedi','shivam')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_rear(tuple('ABC')) == ('B',), \"Should be (B,)\"\nassert     extract_rear(tuple('A')) == ('A',), \"Should be (A,)\"\nassert     extract_rear(tuple('ABCD')) == ('D',), \"Should be (D,)\"\nassert     extract_rear(tuple('')) == ('',), \"Should be ('')\"\nassert     extract_rear(tuple(None)) == (None,), \"Should be (None,)\"\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear((\"python\", \"code\", \"excellent\", \"python\")) == (\"excellent\",)\nassert     extract_rear((\"python\", \"code\", \"excellent\", \"python\", \"pythones\")) == (\"python\",)\nassert     extract_rear((\"python\", \"code\", \"python\", \"python\")) == (\"python\",)\nassert     extract_rear((\"python\", \"code\", \"python\", \"python\", \"python\")) == (\"python\",)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear(('abcd','abc','acdb')) == ('acdb',)\nassert     extract_rear(('abcd','ac','adb')) == ('adb',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('e', 'd', 'c', 'b', 'a')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')) == ('j', 'i', 'k', 'h', 'f', 'e', 'd', 'c', 'b', 'a', 'g')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q')) == ('o', 'p', 'q', 'l','m', 'n', 'j', 'i', 'k', 'h', 'f', 'e', 'd', 'c', 'b', 'a', 'g')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == ('v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == ('z', 'x', 'y', 'w', 'v', 'u', 't','s', 'r', 'o', 'p', 'q', 'n','m', 'j', 'k', 'l', 'i', 'h', 'f', 'g', 'e', 'd', 'c', 'b', 'a', 'y', 'z', 'w', 'x', 'v')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear(('python','python','python')) == (True, True, True)\nassert     extract_rear(('python','python','python','python')) == (True, True, True, True)\nassert     extract_rear(('python','python','python','python','python')) == (True, True, True, True, True)\nassert     extract_rear(('python','python','python','python','python','python','python')) == (True, True, True, True, True, True, True)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear((\"google\", \"github\", \"vk\")) == (\"google\", \"vk\")\nassert     extract_rear((\"google\", \"github\", \"vk\")) == (\"vk\",)\nassert     extract_rear((\"google\", \"github\")) == (\"github\",)"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear(('abcd', 'efgh'))    == ('efgh',)\nassert     extract_rear(('abcd', 'efgh', 'ijkl','mnop'))    == ('efgh', 'ijkl',)\nassert     extract_rear(('abcd', 'efgh', 'ijkl','mnop', 'pqrs', 'tu')) == ('efgh', 'ijkl', 'pqrs', 'tu',)\nassert     extract_rear(('abcd', 'efgh', 'ijkl','mnop', 'pqrs', 'tu', 'vw')) == ('efgh', 'ijkl', 'pqrs', 'tu',)\nassert     extract_rear(('abcd', 'efgh', 'ijkl','mnop', 'pqrs', 'tu', 'vw', 'xx', 'yy')) == ('efgh', 'ijkl', 'pqrs', 'tu',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear(('abc', 'def', 'ghi', 'jkl','mno')) == ('abc','mno')\nassert     extract_rear(('abc', 'def', 'ghi', 'jkl','mno', 'pqr')) == ('abc','mno')\nassert     extract_rear(('abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu')) == ('abc','mno')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('a', 'e')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == ('a', 'e')\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_element_in_list([1, 1, 1, 1, 1, 1], 1) == 5\nassert     count_element_in_list([1, 1, 1, 1, 1, 1], 2) == 4\nassert     count_element_in_list([1, 1, 1, 1, 1, 1], 3) == 3\nassert     count_element_in_list([1, 1, 1, 1, 1, 1], 0) == 0\nassert     count_element_in_list([1, 1, 1, 1, 1], -1) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_element_in_list([1,2,3], 1) == 1\nassert     count_element_in_list([1,2,3], 2) == 1\nassert     count_element_in_list([1,2,3], 3) == 1\nassert     count_element_in_list([1,2,3], 4) == 0\nassert     count_element_in_list([1,2,3], 5) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_element_in_list([1, 2, 2, 3], 2) == 2\nassert count_element_in_list([1, 2, 2, 3], 1) == 1\nassert count_element_in_list([1, 2, 2, 3], 4) == 0\nassert count_element_in_list([1, 2, 3], 1) == 1\nassert count_element_in_list([1, 2, 3], 5) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_element_in_list(['a','b','a','c','a','c'], 'a') == 3, 'expected: 3'\nassert     count_element_in_list(['a','b','a','c','a','c'], 'c') == 2, 'expected: 2'\nassert     count_element_in_list(['a','b','a','c','a','c'], 'd') == 0, 'expected: 0'\nassert     count_element_in_list([1,2,3,4,5],5) == 0, 'expected: 0'\nassert     count_element_in_list([1,2,3,4,5],4) == 2, 'expected: 2'\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_element_in_list([0,1,2,3], 2) == 2\nassert     count_element_in_list([0,1,2,3], 3) == 2\nassert     count_element_in_list([1,2,3,4], 4) == 1\nassert     count_element_in_list([1,2,3,4], 5) == 0\nassert     count_element_in_list([1,2,3,4], 1) == 4\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_element_in_list(lst, 'a') == 3\n    count_element_in_list(lst, 'b') == 1\n    count_element_in_list(lst, 'c') == 1\n    count_element_in_list(lst, 'd') == 0\n    count_element_in_list(lst, 'z') == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_element_in_list([[1], 2, 3, 4, 5], 1) == 3\nassert     count_element_in_list([[1], 2, 3, 4, 5], 5) == 0\nassert     count_element_in_list([[1], 2, 3, 4, 5], 6) == 0\nassert     count_element_in_list([[1], 2, 3, 4, 5], 4) == 2\nassert     count_element_in_list([[1], 2, 3, 4, 5], 2) == 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_element_in_list([1,2,3,4,5], 3) == 2\nassert     count_element_in_list([], 3) == 0\nassert     count_element_in_list([1], 3) == 0\nassert     count_element_in_list([], 3) == 0\n\ndef max_in_list(list1):\n    '''\n    Write a function to get the max value in a list.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers([2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     filter_oddnumbers([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]) == [3,5,7,11,13,17,23,29,31,41,43,47]\nassert     filter_oddnumbers([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9], \"Fail\"\nassert     filter_oddnumbers([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [\n    10, 13, 17, 19], \"Fail\"\nassert     filter_oddnumbers([4, 4, 4, 4]) == [4], \"Fail\"\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11,12]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4]) == [1, 3, 4], \"Wrong\"\nassert     filter_oddnumbers([2, 1, 2]) == [1, 2], \"Wrong\"\nassert     filter_oddnumbers([3, 4, 5, 6]) == [3, 5, 6], \"Wrong\"\nassert     filter_oddnumbers([11, 12, 13, 14, 15]) == [11, 13, 15], \"Wrong\"\n\nprint(\"all tests passed.\""
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_oddnumbers([1,2,3,4]) == [1,3]\nassert     filter_oddnumbers([1,2,3,4,5,6]) == [1,3,5,7]\nassert     filter_oddnumbers([2,3,4,5,6]) == [3,5,7]\nassert     filter_oddnumbers([2,3,4,5,6,9]) == [3,5,7,9]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([0,3,5,7,9]) == [0,3,5,7,9]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == []\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10]\nassert     filter_oddnumbers([10]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_oddnumbers([2,3,5,6,8]) == [3,5,6,8]\nassert     filter_oddnumbers([3,4,6,5,4,4,7]) == [4,6,5,4]\nassert     filter_oddnumbers([1,2,3,4,4]) == []\nassert     filter_oddnumbers([]) == []\nprint('Assessment 1 Passed')\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n    Your function should return a list of only the odd numbers from the given list \n    of integers.\n\n    For example, filter_oddnumbers([1, 3, 5, 7, 9]) should return the list \n    [1, 3, 5, 7, 9].\n\n    Do not remove this line:\nassert filter_oddnumbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\n'''\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) ==    [1,3,5,7,9]\nassert     filter_oddnumbers([10]) ==    [10]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format(\n        \"2020-06-25\") == \"25-06-2020\"\nassert     change_date_format(\n        \"2020-04-10\") == \"10-04-2020\"\nassert     change_date_format(\n        \"2020-02-30\") == \"30-02-2020\"\nassert     change_date_format(\n        \"2020-10-25\") == \"25-10-2020\"\nassert     change_date_format(\n        \"2020-08-15\") == \"15-08-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format(\"1-1-2011\") == \"31-01-2012\", \"Wrong result\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format('20-08-19') == '19-08-20'\nassert     change_date_format('19-08-20') == '20-08-19'\nassert     change_date_format('08-08-20') == '08-08-19'\nassert     change_date_format('19-08-20') == '20-08-19'\nassert     change_date_format('8-8-20') == '20-08-19'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format('2010-03-07') == '07-03-2010'\nassert     change_date_format('2010-01-31') == '31-01-2010'\nassert     change_date_format('2016-07-02') == '02-07-2016'\nassert     change_date_format('10/10/10') == '10-10-10'\nassert     change_date_format('10.11.12') == '10.11.12'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_date_format(\"2009-09-04\") == \"04-09-2009\"\nassert     change_date_format(\"2009-09-03\") == \"03-09-2009\"\nassert     change_date_format(\"2009-09-02\") == \"02-09-2009\"\nassert     change_date_format(\"2009-09-01\") == \"01-09-2009\"\nassert     change_date_format(\"2009-09-10\") == \"10-09-2009\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_date_format('20-05-19') == '05-05-19'\nassert     change_date_format('20-12-00') == '00-12-20'\nassert     change_date_format('20-05-11') == '11-05-20'\nassert     change_date_format('20-05-20') == '20-05-20'\nassert     change_date_format('19-12-00') == '00-12-19'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_date_format(\"01-09-2020\") == \"01-09-2020\"\nassert     change_date_format(\"24-11-2020\") == \"24-11-2020\"\nassert     change_date_format(\"11-13-2020\") == \"11-13-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format('2017-02-01') == '01-02-2017'\nassert     change_date_format('2017-12-31') == '31-12-2017'\nassert     change_date_format('2019-03-30') == '30-03-2019'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format('2020-02-19') == '19-02-2020', \"test 1\"\nassert change_date_format('02-19-2020') == '19-02-2020', \"test 2\"\nassert change_date_format('21.04.2020') == '20.04.2020', \"test 3\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     shell_sort([0,8,2,4,12,2,1]) == [0,1,2,2,4,8,12]\n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef shell_sort_optimized(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    my_list = []\n    shell_sort(my_list)\n    print(my_list"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     shell_sort([0, 4, 5, 1, 3, 2]) == [0, 1, 2, 3, 4, 5]\nassert     shell_sort([0, 1, 2, 4, 5, 3]) == [0, 1, 2, 3, 4, 5]\nassert     shell_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(shell_sort([2,5,4,3,1,6,7,8,0])"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n'''\nInput: my_list = [3, 5, 2, 1]\nOutput: [1, 2, 3, 5]\nExplanation: the sort order is [1, 2, 3, 5]\n'''\nshell_sort(my_list)\n\n'''\nInput: my_list = [45, 27, 43, 21, 3]\nOutput: [3, 3, 27, 21, 45]\nExplanation: the sort order is [3, 3, 27, 21, 45]\n'''\nshell_sort(my_list)\n\n\n'''\nWrite a function to sort the given array by using merge sort.\n'''"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     and_tuples((1,2), (3,4)) == (1,2)\nassert     and_tuples((1,2), (3,3)) == (1,2)\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples((1,2,3),(4,5,6)) == (1, 2, 3, 4, 5, 6)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     and_tuples((3,4),(6,7)) == (3,4,6,7)\nassert     and_tuples((3,4),(3,4)) == (3,4,3,4)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nand_tuples((1, 2, 3), (2, 3, 4)) == (2, 3)"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 2)\nassert     and_tuples((1, 2), (1, 2)) == (1, 2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     and_tuples((1,2,3), (1,2,3)) == (1,2,3), \"and_tuples(tuple1, tuple2) should be (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1], tuple1[2] + tuple2[2]).\"\nassert     and_tuples((2,3,4), (5,6,7)) == (6,7,4), \"and_tuples(tuple1, tuple2) should be (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1], tuple1[2] + tuple2[2]).\"\nassert     and_tuples((0,1,2), (3,4,5)) == (4,5,0), \"and_tuples(tuple1, tuple2) should be (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1], tuple1[2] + tuple2[2]).\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     and_tuples((1,2,3),(4,5,6)) == (1, 2, 3, 4, 5, 6)\nassert     and_tuples((7,8,9),(10,11,12)) == (7, 8, 9, 10, 11, 12)\nassert     and_tuples((13,14,15),(16,17,18)) == (13, 14, 15, 16, 17, 18)\nassert     and_tuples((19,20,21),(22,23,24)) == (19, 20, 21, 22, 23, 24)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (and_tuples((3,5),(1,2)) == (False,False)), \"Check your code\"\nassert     (and_tuples((True,True),(False,False)) == (False,False)), \"Check your code\"\nassert     (and_tuples((True,True),(True,True)) == (True,True)), \"Check your code\"\nassert     (and_tuples((True,False),(False,False)) == (False,False)), \"Check your code\"\nassert     (and_tuples((False,False),(False,False)) == (False,False)), \"Check your code\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     and_tuples((1,2,3), (1,2,3)) == ((1,2,3),(1,2,3))\nassert     and_tuples((1,2,3), (2,3,4)) == ((1,2,3),(2,3,4))\nassert not     and_tuples((1,2,3), (4,5,6)) == ((1,2,3),(4,5,6))\nassert not     and_tuples((1,2,3), (2,3,4,5)) == ((1,2,3),(2,3,4,5))"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parabola_directrix(1, 2, -2) == ((1, 2), -2)\nassert parabola_directrix(2, 3, -1) == ((2, 3), -1)\nassert parabola_directrix(2, 4, 0) == ((2, 4), 0)\nassert parabola_directrix(0, 0, 0) == ((0, 0), 0)\nassert parabola_directrix(0, -2, 3) == ((0, -2), 3)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parabola_directrix(1, -2, -3) == True \nassert     parabola_directrix(1, -2, 0) == False \nassert     parabola_directrix(1, -2, 1) == True \nassert     parabola_directrix(1, -2, 2) == False \nassert     parabola_directrix(1, 0, -3) == False \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parabola_directrix(4, 0, 0) == [(4, 0, 0)]\nassert     parabola_directrix(1, 2, 3) == [(1, 2, 3), (-1, 2, 3), (1, -2, 3), (-1, -2, 3)]\nassert     parabola_directrix(-2, 0, 1) == []\n\ndef parabola_directrix_intersect(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nparabola_directrix(1, 2, 4)\nparabola_directrix(-1, 2, 4)\nparabola_directrix(1, 2, 3)\nparabola_directrix(1, 2, 4.5)\nparabola_directrix(1, 2, 4.2)\nparabola_directrix(1, 2, -4)\nparabola_directrix(-1, 2, -4)\nparabola_directrix(-1, 2, -4.2)\nparabola_directrix(-1, 2, -4.5)\nparabola_directrix(-1, 2, -4.8)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parabola_directrix(4, 3, 1) == (-2.0, 3.0)\nassert     parabola_directrix(4, 1, 2) == (0.0, -1.0)\nassert     parabola_directrix(-4, 1, -2) == (2.0, -1.0)\nassert     parabola_directrix(-4, -1, 2) == (0.0, 1.0)\nassert     parabola_directrix(1, 1, 1) == (1.0, 1.0)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parabola_directrix(2, 3, -7) == [-3, -9], 'Wrong'\nassert     parabola_directrix(1, 2, 3) == [-4, -12], 'Wrong'\nassert     parabola_directrix(2, 1, 0) == [0, 0], 'Wrong'\nassert     parabola_directrix(2, -1, 2) == [2, -6], 'Wrong'\nassert     parabola_directrix(1, 2, -3) == [-4, -18], 'Wrong'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parabola_directrix(2, 1, 1) ==  [2, -1]\nassert     parabola_directrix(2, -1, 1) ==  [2, -1]\nassert     parabola_directrix(2, 0, -2) ==  [2, 0]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    # (-1)^0.5, 0, 1\n    # -1.0, -0.5, 1\n    # 1.0, 1, 0\n    # (-1)^0.5, -0.5, -1\n    # (-1)^0.5, 1.0, -1\n    # (1)^0.5, -1.0, 1\n    # (1)^0.5, 1.0, -1\n    # (-1)^0.5, -1.0, -1\n    # (-1)^0.5, 1.0, 1\n    # (1)^0.5, -1.0, -1\n    # (-1)^0.5, 0.0, 1\n    # 0, 1, 1\n    # (-1)^0.5, 1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # 1, 0, -1\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, -1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, -1, 1\n    # (1)^0.5, 1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # 1, 0, -1\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 0, -1\n    # (-1)^0.5, -1.0, 1\n    # 1, 1, -1\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 0, -1\n    # (1)^0.5, 1.0, 1\n    # 1, -1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, -1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, -1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, -1, 1\n    # (1)^0.5, 1.0, 1\n    # 1, -1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, -1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 0, -1\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 0, -1\n    # (1)^0.5, 1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, 1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 0, -1\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 0, -1\n    # (1)^0.5, 1.0, 1\n    # 1, 0, -1\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 0, -1\n    # (1)^0.5, -1.0, 1\n    # 1, 0, -1\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 0, -1\n    # (1)^0.5, 1.0, 1\n    # 1, -1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, -1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, -1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, -1, 1\n    # (1)^0.5, 1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, 1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 0, -1\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 0, -1\n    # (1)^0.5, 1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 1, 0\n    # (1)^0.5, -1.0, 1\n    # (-1)^0.5, 1.0, 1\n    # 0, 1, 1\n    # (1)^0.5, -1.0, 1\n    # 1, 0, "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parabola_directrix(1, 2, 3) == (4, 5)\nassert     parabola_directrix(1, 2, -3) == (3, 1)\nassert     parabola_directrix(1, 0, 0) == (1, 0)\nassert     parabola_directrix(1, -2, -3) == (3, 2)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_element([1, 2, 3, 4, 5, 6], [1, 3, 5]) == True, 'Wrong answer'\nassert     common_element([1, 2, 3, 4, 5, 6], [1, 3, 5, 7]) == False, 'Wrong answer'\nassert     common_element([1, 2, 3], [4, 5, 6]) == False, 'Wrong answer'\nassert     common_element([], []) == False, 'Wrong answer'\nassert     common_element([1], [2]) == False, 'Wrong answer'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([1,2,3,4], [1,2,3,5]) == False\nassert     common_element([1,2,3,4], [1,2,3,4]) == True\nassert     common_element([1,2,3,4], [1,3,5,7]) == True\nassert     common_element([], []) == False\nassert     common_element([3,6,9], [1,2,3,4]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_element([1,2,3], [2,1,3]) == True, \"should be True\"\nassert     common_element([1,2,3], [2,4,3]) == False, \"should be False\"\nassert     common_element(['a','b','c'], ['d','c','b']) == True, \"should be True\"\nassert     common_element(['a','b','c'], ['d','e','f']) == False, \"should be False\"\nassert     common_element([], []) == True, \"should be True\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_element([1,2,3], [4,5,6])\nassert     common_element([1,2], [3,4,5,6,7])\nassert     common_element([1,2], [3])\nassert     common_element([], [3,4,5,6])\n\n'''\nYou will be given an array of numbers. You need to determine whether there exists a pair of numbers (i, j) where i < j in the array where i + j = n.\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_element([1, 2, 3], [1, 2, 3])     == True\nassert common_element([1, 2, 3], [1, 4, 3])     == False\nassert common_element([1, 2, 3], [1, 2, 4])     == False\nassert common_element([1, 2, 3, 4], [1, 2, 3])     == False\nassert common_element([1, 2, 3, 4], [1, 2, 4, 5])     == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlist_a = [\"a\", \"b\", \"c\"]\nlist_b = [\"a\", \"b\", \"d\"]\nassert common_element(list_a, list_b) == False\n\nlist_a = [\"a\", \"b\", \"c\"]\nlist_b = [\"a\", \"b\", \"d\", \"e\"]\nassert common_element(list_a, list_b) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([1, 2, 3, 4], [3, 5, 8, 10]) == True\nassert     common_element([2, 3, 3, 5, 8], [7, 5, 8, 10, 9]) == True\nassert     common_element([1, 2, 3, 4], [4, 8, 10, 9]) == False\nassert     common_element([], [1, 2, 3, 4]) == False\nassert     common_element([1, 2, 3, 4], []) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([0,1,2,3], [0,1,2,3,4]) == True, \"Wrong Answer\"\nassert     common_element([0,1,2,3], [2,3,4,5]) == False, \"Wrong Answer\"\nassert     common_element([0,1,2,3,4], [0,1,2,3,4,5]) == True, \"Wrong Answer\"\nassert     common_element([0,1,2,3,4], [0,1,2,3]) == False, \"Wrong Answer\"\nassert     common_element([], []) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element([1,2,3,4,5,6,7],[3,5,7,9,1]) == True\nassert     common_element([1,2,3,4,5,6,7],[3,5,8,9,1]) == False\nassert     common_element([1,2,3,4,5,6,7],[3,5,7,9,1,2,4]) == False\nassert     common_element([1,2,3,4,5,6,7],[3,5,7,9,1,2]) == True\nassert     common_element([1,2,3,4,5,6,7],[3,5,7,9,1]) == True\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_trapezium(10, 5, 5) == 5, 'Should be 5'\nassert     median_trapezium(10, 5, 6) == 6, 'Should be 6'\nassert     median_trapezium(10, 5, 7) == 7, 'Should be 7'\nassert median_trapezium(10, 5, 8) == 8, 'Should be 8'\n\nprint('The test passed')\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    base1 = 2\n    base2 = 3\n    height = 1\n    median_trapezium(base1,base2,height)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_trapezium(1,1,1) == 1.0\nassert     median_trapezium(2,1,1) == 1.0\nassert     median_trapezium(4,2,1) == 2.0\nassert     median_trapezium(6,3,2) == 3.0\nassert     median_trapezium(8,5,4) == 5.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_trapezium(0,2,10) == 10\nassert median_trapezium(5,6,10) == 8\nassert median_trapezium(10,12,10) == 10\nassert median_trapezium(10,10,10) == 10\nassert median_trapezium(10,5,10) == 10"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef median_trapezium_with_counting(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_trapezium(4,10,2) == 6, 'WRONG'\nassert median_trapezium(4,10,2) == 5, 'WRONG'\nassert median_trapezium(4,10,2) == 4, 'WRONG'\nassert median_trapezium(4,10,2) == 3, 'WRONG'\nassert median_trapezium(4,10,2) == 2, 'WRONG'\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_trapezium(3,4,5) == 4\nassert     median_trapezium(2,3,4) == 3\nassert     median_trapezium(10,12,5) == 10/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_trapezium(10,10,5)== 5, \"The test is wrong\"\nassert median_trapezium(10,10,10)==10, \"The test is wrong\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_trapezium(1,1,1) == 1, \"Wrong!\"\nassert median_trapezium(2,2,2) == 2, \"Wrong!\"\nassert median_trapezium(1,2,2) == 2, \"Wrong!\"\nassert median_trapezium(1,1,3) == 2, \"Wrong!\"\nassert median_trapezium(1,1,4) == 2, \"Wrong!\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_greater([1, 2, 3], 3) == True,'should return True'\nassert     check_greater([2, 3, 1], 2) == True,'should return True'\nassert     check_greater([-1, 2, 0], 1) == False,'should return False'\nassert     check_greater([1, 2, 3], 2) == False,'should return False'\nassert     check_greater([1, 2, 3], 5) == False,'should return False'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_greater([1, 2, 3, 4, 5], 5) == False\nassert     check_greater([1, 2, 3, 4, 5], 10) == False\nassert     check_greater([1, 2, 3, 4, 5], 1) == True\nassert     check_greater([1, 2, 3, 4, 5], -10) == False\nassert     check_greater([1, 2, 3, 4, 5], 1.2) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncheck_greater(arr1,1) == True\ncheck_greater(arr2,1) == False\ncheck_greater(arr3,1) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_greater([1,2,3,4,5], 5) == True, \"Wrong output!\"\nassert check_greater([1,2,3,4,5], 0) == False, \"Wrong output!\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_greater([3,4,2], 3) == True, \"Should return true\"\nassert     check_greater([3,4,2], 4) == False, \"Should return false\"\nassert     check_greater([], 0) == False, \"Should return false\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_greater_elements(arr, number):\n    '''\n    Write a function to find the indices of the first element greater than the given number in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_greater([2,3,4,5], 6) == False, \"Should return False\"\nassert     check_greater([2,3,4,5], 5) == True, \"Should return True\""
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_greater(arr, number) == True\nassert check_greater([], number) == False\nassert check_greater([1], number) == True\nassert check_greater([2], number) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_greater_or_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than or equal to the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one(text='ab') == True\nassert     text_match_one(text='bb') == False\nassert     text_match_one(text='bbb') == True\nassert     text_match_one(text='bbbaaab') == True\nassert     text_match_one(text='aab') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one('abab') == True\nassert     text_match_one('abbab') == True\nassert     text_match_one('ababb') == True\nassert     text_match_one('ababab') == True\nassert     text_match_one('aabab') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one(\"a\") == False\nassert     text_match_one(\"b\") == False\nassert     text_match_one(\"ab\") == True\nassert     text_match_one(\"ba\") == False\nassert     text_match_one(\"aa\") == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one('abb') == True, \"It should match the two 'a' and 'b'\"\nassert     text_match_one('ab') == False, \"It should match the two 'a' and 'b'\"\nassert     text_match_one('abc') == True, \"It should match the two 'a' and 'b'\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one(\"ab\") == \"ab\"\nassert     text_match_one(\"abab\") == \"ab\"\nassert     text_match_one(\"abababa\") == \"ab\"\nassert     text_match_one(\"ababababa\") == \"ab\"\nassert     text_match_one(\"ababababbbb\") == \"ab\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_one(\"a\") == False\nassert     text_match_one(\"ab\") == True\nassert     text_match_one(\"abb\") == True\nassert     text_match_one(\"bbb\") == False\nassert     text_match_one(\"bbbbb\") == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one('ab') == False, \"Text not matched\"\nassert     text_match_one('aabb') == True, \"Text not matched\"\nassert     text_match_one('ab') == True, \"Text not matched\"\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit(4) == 4\nassert     last_Digit(100) == 0\nassert     last_Digit(2020) == 2\nassert     last_Digit(2018) == 8\nassert     last_Digit(2019) == 9\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit(123456) == 0\nassert     last_Digit(10) == 1\nassert     last_Digit(123) == 3\nassert     last_Digit(1234) == 4\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(12345) == 5\nassert     last_Digit(123) == 3\nassert     last_Digit(1234) == 4\nassert     last_Digit(1) == 1\nassert     last_Digit(10) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    input_str = '12345'\n    print(last_Digit(input_str))\n    \n    # Output: 4\n    \n    input_str = '123456789'\n    print(last_Digit(input_str))\n    \n    # Output: "
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(66) == 6, \"last_Digit failed\"\nassert     last_Digit(11) == 1, \"last_Digit failed\"\nassert     last_Digit(99) == 9, \"last_Digit failed\"\nassert     last_Digit(37) == 3, \"last_Digit failed\"\nassert     last_Digit(0) == 0, \"last_Digit failed\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit(0) == 0, '0: last digit'\nassert     last_Digit(13) == 1, '13: last digit'\nassert     last_Digit(1345) == 0, '1345: last digit'\nassert     last_Digit(13456789) == 8, '13456789: last digit'\nassert     last_Digit(1234567890) == 0, '1234567890: last digit'\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit(100) == 1\nassert last_Digit(7999) == 9\nassert last_Digit(70000) == 7\nassert last_Digit(0) == 0\nassert last_Digit(9) == 9\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit(1234) == 4\nassert     last_Digit(12345) == 5\nassert     last_Digit(123456) == 6\nassert     last_Digit(12345678) == 8\nassert     last_Digit(123456789) == 9\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert neg_nos([1,2,3,-4]) == [-1,-2,-3,-4]\nassert neg_nos([1,-2,-3,-4]) == [-1,-2,-3,-4]\nassert neg_nos([-1,2,3,-4]) == [-1,-2,-3,-4]\nassert neg_nos([1,-2,-3,-4]) == [-1,-2,-3,-4]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     neg_nos([1, 2, 3]) == [-1, -2, -3]\nassert     neg_nos([]) == []\nassert     neg_nos([1, -2, 3]) == [-1, -2, -3]\nassert     neg_nos([1, 2, '3']) == [-1, -2, -3]\nassert     neg_nos([1, 2, -3]) == [-1, -2, -3]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert neg_nos([-1,-2,-3]) == [-1,-2,-3]\nassert neg_nos([1,2,3,4,5,6,7,8,9]) == [-1,-2,-3,-4,-5,-6,-7,-8,-9]\nassert neg_nos([-1,-2,-3,4,5,6,7,8,9,10]) == [-1,-2,-3,4,5,6,7,8,9,10]\nprint('[Pass]')\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     neg_nos([1, -2, 3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert     neg_nos([0, 0, 0, 0, 0]) == [-0, -0, -0, -0, -0]\nassert     neg_nos([-1, 2, -3, 4, -5]) == [-1, -2, -3, -4, -5]\nassert     neg_nos([-0.2, 1.2, -3.4, 4.5, -6.7]) == [-0.2, -1.2, -3.4, -4.5, -6.7]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(neg_nos([-1, -2, -3, 4, 5]))\nprint(neg_nos([-1, -2, -3, 0, 1]))\nprint(neg_nos([-1, -2, -3, -4, -5]))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd('mrmxxx')    =='mmmmm'\nassert     remove_odd('hello')    == 'helloh'\nassert     remove_odd('abcbcd')    == 'abcd'\nassert     remove_odd('2324')    == '233'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd('abc') == 'bc'\nassert     remove_odd('abcdefghijklmnopqrstuvwxyz') == 'cdefghijklmnopqrstuvwxyz'\nassert     remove_odd('kjsdkfhj') == 'jkf'\nassert     remove_odd('') == ''\nassert     remove_odd('   ') =='  '\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"The\") == \"The\"\nassert     remove_odd(\"The words\") == \"The  wor\"\nassert     remove_odd(\"It has\") == \"It has\"\nassert     remove_odd(\"It has has\") == \"It has has\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd(\"welcome\") == \"elw\"\nassert     remove_odd(\"welcomehello\") == \"hello\"\nassert     remove_odd(\"welcomehelloworld\") == \"hello\"\nassert     remove_odd(\"welcomehelloworld\") == \"hello\"\nassert     remove_odd(\"welcomehello\") == \"hello\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd('asd') == 'dsa', \"Test 1 Failed\"\nassert     remove_odd('a') == 'a', \"Test 2 Failed\"\nassert     remove_odd('ab') == 'ba', \"Test 3 Failed\"\n\nprint('All tests passed')"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef remove_odd2(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[0:len(str1):2]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd('') == ''\nassert     remove_odd('python') == 'thp'\nassert     remove_odd('java') == 'av'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd(\"hello\") == \"hll\"\nassert     remove_odd(\"hola\") == \"hll\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"Hi! How are you? \") == \"Hi! How are you? \"\nassert     remove_odd(\"aA\") == \"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd('hello') == 'h'\nassert     remove_odd('hello123') == 'h'\nassert     remove_odd('abcde123') == 'a'\nassert     remove_odd('a1bcde123') == 'a'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd(\"ababababababababab\")     == \"ababababab\"\nassert     remove_odd(\"ababababababababab\")     == \"abababab\"\nassert     remove_odd(\"abababababababababab\")     == \"\"\nassert     remove_odd(\"abababababababab\")     == \"\"\nassert     remove_odd(\"\")     == \"\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([[(1, 2), (2, 3)], [(2, 3), (3, 4)]]) == 2\nassert     count_bidirectional([(1, 2), (2, 3), (2, 3)]) == 1\nassert     count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 2\nassert     count_bidirectional([]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_bidirectional([(2, -2), (1, -4), (3, -5)]) == 2\nassert count_bidirectional([(0, 0), (1, 1), (2, 2), (3, 3)]) == 3\nassert count_bidirectional([(0, 0), (1, 1), (2, 2)]) == 3\nassert count_bidirectional([(0, 0), (0, 1), (0, 2)]) == 0\n\ndef count_inversions_with_sorting(test_list):\n    '''\n    Write a function to count inversions using sorting.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_bidirectional([(1,2), (2,1)]) == 2\nassert     count_bidirectional([(1,2), (3,4)]) == 0\nassert     count_bidirectional([(1,2), (2,1), (2,2)]) == 1\nassert     count_bidirectional([(1,2), (2,1), (2,3)]) == 0\nassert     count_bidirectional([(1,2), (2,1), (2,2), (2,3)]) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional(\n    [(0,0),(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17),(18,18),(19,19),(20,20),(21,21),(22,22),(23,23),(24,24),(25,25),(26,26),(27,27),(28,28),(29,29),(30,30),(31,31),(32,32),(33,33),(34,34),(35,35),(36,36),(37,37),(38,38),(39,39),(40,40),(41,41),(42,42),(43,43),(44,44),(45,45),(46,46),(47,47),(48,48),(49,49),(50,50),(51,51),(52,52),(53,53),(54,54),(55,55),(56,56),(57,57),(58,58),(59,59),(60,60),(61,61),(62,62),(63,63),(64,64),(65,65),(66,66),(67,67),(68,68),(69,69),(70,70),(71,71),(72,72),(73,73),(74,74),(75,75),(76,76),(77,77),(78,78),(79,79),(80,80),(81,81),(82,82),(83,83),(84,84),(85,85),(86,86),(87,87),(88,88),(89,89),(90,90),(91,91),(92,92),(93,93),(94,94),(95,95),(96,96),(97,97),(98,98),(99,99),(100,100),(101,101),(102,102),(103,103),(104,104),(105,105),(106,106),(107,107),(108,108),(109,109),(110,110),(111,111),(112,112),(113,113),(114,114),(115,115),(116,116),(117,117),(118,118),(119,119),(120,120),(121,121),(122,122),(123,123),(124,124),(125,125),(126,126),(127,127),(128,128),(129,129),(130,130),(131,131),(132,132),(133,133),(134,134),(135,135),(136,136),(137,137),(138,138),(139,139),(140,140),(141,141),(142,142),(143,143),(144,144),(145,145),(146,146),(147,147),(148,148),(149,149),(150,150),(151,151),(152,152),(153,153),(154,154),(155,155),(156,156),(157,157),(158,158),(159,159),(160,160),(161,161),(162,162),(163,163),(164,164),(165,165),(166,166),(167,167),(168,168),(169,169),(170,170),(171,171),(172,172),(173,173),(174,174),(175,175),(176,176),(177,177),(178,178),(179,179),(180,180),(181,181),(182,182),(183,183),(184,184),(185,185),(186,186),(187,187),(188,188),(189,189),(190,190),(191,191),(192,192),(193,193),(194,194),(195,195),(196,196),(197,197),(198,198),(199,199),(200,200),(201,201),(202,202),(203,203),(204,204),(205,205),(206,206),(207,207),(208,208),(209,209),(210,210),(211,211),(212,212),(213,213),(214,214),(215,215),(216,216),(217,217),(218,218),(219,219),(220,220),(221,221),(222,222),(223,223),(224,224),(225,225),(226,226),(227,227),(228,228),(229,229),(230,230),(231,231),(232,232),(233,233),(234,234),(235,235),(236,236),(237,237),(238,238),(239,239),(240,240),(241,241),(242,242),(243,243),(244,244),(245,245),(246,246),(247,247),(248,248),(249,249),(250,250),(251,251),(252,252),(253,253),(254,254),(255,255),(256,256),(257,257),(258,258),(259,259),(260,260),(261,261),(262,262),(263,263),(264,264),(265,265),(266,266),(267,267),(268,268),(269,269),(270,270),(271,271),(272,272),(273,273),(274,274),(275,275),(276,276),(277,277),(278,278),(279,279),(280,280),(281,281),(282,282),(283,283),(284,284),(285,285),(286,286),(287,287),(288,288),(289,289),(290,290),(291,291),(292,292),(293,293),(294,294),(295,295),(296,296),(297,297),(298,298),(299,299),(300,300),(301,301),(302,302),(303,303),(304,304),(305,305),(306,306),(307,307),(308,308),(309,309),(310,310),(311,311),(312,312),(313,313),(314,314),(315,315),(316,316),(317,317),(318,318),(319,319),(320,320),(321,321),(322,322),(323,323),(324,324),(325,325),(326,326),(327,327),(328,328),(329,329),(330,330),(331,331),(332,332),(333,333),(334,334),(335,335),(336,336),(337,337),(338,338),(339,339),(340,340),(341,341),(342,342),(343,343),(344,344),(345,345),(346,346),(347,347),(348,348),(349,349),(350,350),(351,351),(352,352),(353,353),(354,354),(355,355),(356,356),(357,357),(358,358),(359,359),(360,360),(361,361),(362,362),(363,363),(364,364),(365,365),(366,366),(367,367),(368,368),(369,369),(370,370),(371,371),(372,372),(373,373),(374,374),(375,375),(376,376),(377,377),(378,378),(379,379),(380,380),(381,381),(382,382),(383,383),(384,384),(385,385),(386,386),(387,387),(388,388),(389,389),(390,390),(391,391),(392,392),(393,393),(394,394),(395,395),(396,396),(397"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_bidirectional([]) == 0, 'Empty list'\nassert     count_bidirectional([1,2,3]) == 3, 'Triple'\nassert     count_bidirectional([(1,2),(2,3),(3,4)]) == 2, 'Tuple pairs'\nassert     count_bidirectional([(1,2,3,4,5),(5,6,7)]) == 3, 'Triple and two tuples'\nassert     count_bidirectional([('a','b'),('b','c'),('c','a')]) == 2, 'Two tuples'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([(1,2),(3,4),(5,6)]) == 1\nassert     count_bidirectional([(1,2),(3,4),(3,4)]) == 3\nassert     count_bidirectional([(1,2),(3,4),(5,6)]) == 1\nassert     count_bidirectional([(1,2),(1,2)]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([(1, 2), (2, 3), (1, 4), (1, 3)]) == 2, \"Fail the test case for the edge case.\"\nassert     count_bidirectional([(1, 2), (2, 3), (1, 4), (1, 4)]) == 2, \"Fail the test case for the edge case.\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_bidirectional([(1,1), (2,2), (3,3), (4,4), (1,5)]) == 3\nassert count_bidirectional([(1,1), (2,2), (3,3), (4,4), (1,5)]) == 3\nassert count_bidirectional([(1,1), (2,2), (3,3), (4,4), (1,5)]) == 3\nassert count_bidirectional([(1,1), (2,2), (3,3), (4,4), (1,5)]) == 3\nassert count_bidirectional([(1,1), (2,2), (3,3), (4,4), (1,5)]) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_bidirectional([(0,1),(1,2),(2,3),(3,0)]) == 2\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nCount the amount of the number of of the tuple pairs.\n'''\ndef count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiple_to_single([3,4,5]) == 15, \"incorrect\"\nassert multiple_to_single([3,4,5,6]) == 18, \"incorrect\"\n\nprint(\"Multiple to single passed\\n\")"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 12\nassert     multiple_to_single([1, 2, 3, 4]) == 12\nassert     multiple_to_single([1, 2, 3, 4, 5]) == 15\nassert     multiple_to_single([1, 2, 3, 4, 5, 6, 7]) == 21\nassert     multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 105\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 24\nassert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([4,3,2,1]) == 4\nassert multiple_to_single([]) == 0\nassert multiple_to_single([0]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1, 2, 3, 4, 5, 6, 7]) == 123\nassert     multiple_to_single([1, 2, 3, 4, 5]) == 12\nassert     multiple_to_single([1, 2, 3]) == 12\nassert     multiple_to_single([]) == 0\nassert multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8]) == 123456\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([2,3,4]) == 8, 'Input: 2,3,4, Output: 8'\nassert multiple_to_single([2,4,2,5]) == 15, 'Input: 2,4,2,5, Output: 15'\nassert multiple_to_single([4,8,6,5,2,6]) == 48, 'Input: 4,8,6,5,2,6, Output: 48'\nassert multiple_to_single([8]) == 8, 'Input: 8, Output: 8'\n\nprint('Passed')\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1, 3, 5]) == 15, \"Wrong! Expected: 15\"\nassert multiple_to_single([3, 6, 9]) == 36, \"Wrong! Expected: 36\"\nassert multiple_to_single([3, 6, 9, 12]) == 54, \"Wrong! Expected: 54\"\nassert multiple_to_single([3, 6, 9, 12, 15]) == 162, \"Wrong! Expected: 162\"\nassert multiple_to_single([]) == 0, \"Wrong! Expected: 0\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([1,2,3]) == 6, \"return 6\"\nassert     multiple_to_single([-1,2,3]) == -6, \"return -6\"\nassert multiple_to_single([1,2,3,4]) == 12, \"return 12\"\nassert multiple_to_single([-1,-2,-3,-4]) == -12, \"return -12\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15\nassert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([1,2,3,4]) == 12\nassert     multiple_to_single([1,2,3,4,5]) == 45\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9]) == 90\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiple_to_single([1, 2, 3]) == 6\nassert     multiple_to_single([4, 2, 1]) == 5\nassert multiple_to_single([3, 4, 5, 6]) == 36\nassert multiple_to_single([2, 4, 5, 6]) == 26\nassert multiple_to_single([7, 8, 9, 10]) == 198\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([1, 2, 3])    ==    6, \\\n        \"incorrect answer for multiple_to_single([1, 2, 3]):\\n\\tshould be 6\\n\\tbut got {}\".format(multiple_to_single([1, 2, 3]))\nassert     multiple_to_single([-1, -2, -3])    ==    -6, \\\n        \"incorrect answer for multiple_to_single([-1, -2, -3]):\\n\\tshould be -6\\n\\tbut got {}\".format(multiple_to_single([-1, -2, -3]))\nassert     multiple_to_single([0, 0, 0])    ==    0, \\\n        \"incorrect answer for multiple_to_single([0, 0, 0]):\\n\\tshould be 0\\n\\tbut got {}\".format(multiple_to_single([0, 0, 0]))\n\nprint(\"You are all set!\")\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # tests\nassert find_adverb_position(\"Bacchis is a wonderful animal!\") == (2,6)\nassert find_adverb_position(\"Bacchis is a powerful animal!\") == (3, 7)\nassert find_adverb_position(\"Bacchis is an animal!\") == (0, 1)\nassert find_adverb_position(\"Bacchis is an animal! But some how it is a horse.\") == (5, 9)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverb_position('') == None\nassert     find_adverb_position('How much is that light?') == None\nassert     find_adverb_position('How much is that light?') == None\nassert     find_adverb_position('How much is that light?') == None\nassert     find_adverb_position('How much is that light?') == None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_adverb_position(\"You are the mother of the husband. He is the greatfather of the mother.\") == [1, 4]\nassert find_adverb_position(\"A small boy is the father of a sister.\") == [1, 4]\nassert find_adverb_position(\"There is a bear in the corner.\") == [1, 2]\nassert find_adverb_position(\"The horse is like a broken tooth.\") == [1, 2]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position(\"This is a test sentence. This is a test sentence. But the position of the ADVERB isn't given!\") == (3, 7)\nassert     find_adverb_position(\"This is a test sentence. This is a test sentence. But the position of the ADVERB is given!\") == (2, 4)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position('The new school cafeteria was filled very well. The staff were satisfied with their food. The students enjoyed themselves very much.') == \\\n        {'I': 4, 'new': 4,'school': 4, 'cafeteria': 7, 'was': 6,'very': 6, 'well': 6, 'food': 7,'staff': 7,'satisfied': 7, 'with': 6, 'their': 5, 'food': 5, 'and': 4,'students': 5, 'enjoyed': 5}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverb_position('Some words, short.') == {'short': '1'}\nassert     find_adverb_position('Some words, short.') == {'short': '1'}\nassert     find_adverb_position('Some words, short.') == {'short': '1'}\nassert     find_adverb_position('Some words, short.') == {'short': '1'}\nassert     find_adverb_position('Some words, short.') == {'short': '1'}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverb_position('The quick brown fox jumps over the lazy dog.') == ('over', 4)\nassert     find_adverb_position('The quick brown fox jumps over the lazy dog.') == ('over', 4)\nassert     find_adverb_position('The quick brown fox jumps over the lazy dog.') == ('over', 4)\nassert     find_adverb_position('The quick brown fox jumps over the lazy dog.') == ('over', 4)\nassert     find_adverb_position('The quick brown fox jumps over the lazy dog.') == ('over', 4)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position('this is the first sentence. This is the second sentence.') == (1,5), 'incorrect result'\nassert     find_adverb_position('i\\'m very happy. This is the first sentence.') == (0,3), 'incorrect result'\nassert     find_adverb_position('i\\'m very happy. This is the first sentence. I\\'m happy.') == (1,5), 'incorrect result'\nassert     find_adverb_position('this is the first sentence. This is the second sentence.') == (1,5), 'incorrect result'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position(\"This is a test of the adverb in a sentence.\") == (1, 6), \"Wrong output!\"\nassert     find_adverb_position(\"This is a test of the adverb in a sentence.\") == (4, 8), \"Wrong output!\"\nassert     find_adverb_position(\"This is a test of the adverb in a sentence.\") == (0, 0), \"Wrong output!\"\n\ndef find_adverb_position2(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cube(1) == 12\nassert     surfacearea_cube(3) == 24\nassert     surfacearea_cube(8) == 56\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cube(1)    ==    12\nassert     surfacearea_cube(2)    ==    56\nassert     surfacearea_cube(3)    ==    108\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cube(1) == 8.0\nassert     surfacearea_cube(2) == 14.0\nassert     surfacearea_cube(3) == 24.0\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cube(2) == 6\nassert     surfacearea_cube(3) == 24\nassert     surfacearea_cube(4) == 64\nassert     surfacearea_cube(8) == 128\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(1) == 8, 'incorrect'\nassert     surfacearea_cube(3) == 18, 'incorrect'\nassert     surfacearea_cube(10) == 2880, 'incorrect'\n\n\ndef surfacearea_pyramid(l,b):\n    '''\n    Write a function to find the surface area of a pyramid of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(5) == 40\nassert surfacearea_cube(2) == 4\nassert surfacearea_cube(1) == 0\nassert surfacearea_cube(4) == 32\nassert surfacearea_cube(0) == 0\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cube(1) == 8, 'Function surfacearea_cube(1) should return 8'\nassert surfacearea_cube(2) == 24, 'Function surfacearea_cube(2) should return 24'\nassert surfacearea_cube(3) == 48, 'Function surfacearea_cube(3) should return 48'\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef surfacearea_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle of a given length and breadth.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     positive_count([1, 2, 3, -1, -2, 4, 5]) == 0.5\nassert     positive_count([-3, -2, -1, 1, 2]) == 1.0\nassert     positive_count([-1, -1]) == 0.5\nassert     positive_count([1, 2, 3, -1, -2, 4, 5, 6]) == 0.375\nassert     positive_count([-1, -1, -1]) == 0.25\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     positive_count([0]) == 1\nassert     positive_count([]) == 0\nassert     positive_count([-1,2,3,-4,5,-6]) == 3\nassert positive_count([-1,2,3,-4,5,-6]) == 3\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reverse(nums):\n    '''\n    Write a function to reverse the order of an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     positive_count([1,2,3,4,5,-6,7,-8,-9]) == 1.0\nassert     positive_count([1,2,3,4,5,0,-6,7,-8,-9]) == 1.0\nassert     positive_count([1,2,3,4,5,-6,7,0,8,9]) == 1.0\nassert     positive_count([1,-2,3,4,5,-6,7,0,8,9]) == 0.5\nassert     positive_count([1,2,3,4,5,0,8,-9]) == 0.0\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     positive_count([1, -1, 1, 1, 1]) == 1.0\nassert     positive_count([1, -1, 1, -1, 1]) == 1.5\nassert     positive_count([-1, 1, 1, 1, 1]) == 0.0\nassert     positive_count([-1, -1, 1, 1, 1]) == 0.5\nassert     positive_count([-1, -1, 1, -1, 1]) == 0.5\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_sum_of_nth_positive_numbers(n):\n    '''\n    Given an array of integers and an integer n, where 1 <= n <= length of array, \n    write a function that returns the sum of the first n positive numbers in the array.\n    '''\n    pass\n\ndef sum_of_nth_positive_numbers(nums, n):\n    '''\n    Write a function that returns the sum of the first n positive numbers in the array.\n    '''\n    pass\n\ndef find_greater_numbers(nums, n):\n    '''\n    Given an array of integers, and a positive integer n, write a function that returns \n    an array containing only the first n elements from the original array with each element \n    increasing by 1. \n    '''\n    pass\n\ndef greater_numbers(nums, n):\n    '''\n    Write a function that returns an array containing only the first n elements from the original array with each element increasing by 1. \n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     positive_count([1, 2, 3, -1, 4, 5, -3, 0]) == 1.5\nassert     positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -1.5\n\ndef multiply(arr):\n    '''\n    Write a function that multiplies all the numbers in an array.\n    '''\n    pass\n\ndef multiply_recursive(arr):\n    '''\n    Write a function that multiplies all the numbers in an array recursively.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test 1\n    assert positive_count([0,0,0,0,0,0,1,1,1,1]) == 1.0\n    # Test 2\n    assert positive_count([-1,-1]) == 0.0\n    # Test 3\n    assert positive_count([-1,-1,-1,-1,-1]) == 1.0\n    # Test 4\n    "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     positive_count([]) == 0\nassert     positive_count([1]) == 1\nassert     positive_count([1,2]) == 1.0\nassert     positive_count([1,2,3]) == 1.0\nassert     positive_count([1,2,3,4]) == 1.0\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    # list1 = [-12, -11, -5, -3, -1]\n    list1 = [1, -2, -3, 4]\n    assert largest_neg(list1) == 4\n\n    list2 = [10, -20, 0, -30]\n    assert largest_neg(list2) == -30"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert largest_neg([-2, -4, -1]) == -1\nassert largest_neg([-5, 2, -3]) == -5\nassert largest_neg([-5, -6, -3]) == -3\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_neg([-1, -2, -3, 4, -5]) == -5 \nassert     largest_neg([-1, -2, -3, 4, 5]) == -1\nassert     largest_neg([-1, -2, -3, 4, 5, 6]) == -3\nassert     largest_neg([-1, -2, -3, 4, 5, -6]) == -6\nassert     largest_neg([-1, -2, -3, 4, -5, -6]) == -5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert largest_neg([-4,-2,-3,-1,-1]) == -1 \nassert largest_neg([-2,-1,-1,-4]) == -1 \nassert largest_neg([-4,2,3,5,6,7,9,10,-1]) == 10\n\ndef smallest_pos(list1):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlist1 = [-10, -5, 1, 6]\nlargest_neg(list1)\nassert list1 == [1, 6], \"list1: %s, largest_neg(list1) should return 1\" % list1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_neg([1, 2, -3, -4, 5]) == 5\nassert largest_neg([2, -1, -2, -1, -2, 1]) == -2\nassert largest_neg([-1, -2, -1, -2, 1]) == 1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_neg([-1,-2,-3,-5]) == -1\nassert     largest_neg([-5,-4,-3,-2,0]) == -5\nassert     largest_neg([-10,-5,-7,-2,-9,0]) == -10\nassert     largest_neg([-1,-4,-5,-10]) == -10"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlargest_neg([-1,-2,-3,-4,-5,-6]) == -5\nprint('your code is correct')\n\n'''\nTask 2: Check the given list for the occurrence of the first and last element\n'''\n\ndef first_last(list1):\n    '''\n    Write a python function to find the first and last element from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     trim_tuple([(1,2), (3,4), (5,6), (7,8)], 1) == [(1,2), (3,4), (5,6), (7,8)]\nassert     trim_tuple([(1,2), (3,4), (5,6), (7,8)], 2) == [(1,2), (3,4), (7,8)]\nassert     trim_tuple([(1,2), (3,4), (5,6), (7,8)], 3) == [(1,2), (3,4), (5,6)]\nassert     trim_tuple([(1,2), (3,4), (5,6), (7,8)], 4) == [(1,2), (3,4)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple([(1,2),(3,4),(5,6,7)], 2) == ((1,2),(3,4,7))\nassert     trim_tuple([(1,2),(3,4,5),(6,7,8,9,10)], 3) == ((1,2),(3,4,5),(6,7,8,9))\n\ndef trim_dict(dict_list, K):\n    '''\n    Write a function to trim each dictionary in the given dictionary list by k in each dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     trim_tuple([(0,0), (1,1), (1,1), (2,2), (3,3)], 2) == \nassert     trim_tuple([(0,0), (1,1), (1,1), (2,2), (3,3)], 1) == \nassert     trim_tuple([(0,0), (1,1), (1,1), (2,2), (3,3)], 0) == \nassert     trim_tuple([(0,0), (1,1), (1,1), (2,2), (3,3)], 3) == \nassert     trim_tuple([(0,0), (1,1), (1,1), (2,2), (3,3)], 4) == \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([1, 2, 3, 4, 5], 1) == [(1, 2, 3), (4, 5)]\nassert     trim_tuple([1, 2, 3, 4, 5], 3) == [(1, 2, 3), (4, 5)]\nassert     trim_tuple([1, 2, 3, 4, 5], 4) == [(1, 2, 3, 4, 5)]\nassert     trim_tuple([1, 2, 3, 4, 5], 5) == [(1, 2, 3, 4, 5)]\nassert     trim_tuple([1, 2, 3, 4, 5], 6) == []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple([(1,2), (3,4), (5,6,7)], 2) == ((1,2), (3,4))\nassert     trim_tuple([(1,2), (3,4), (5,6,7)], 1) == ((1,2), (3,4), (5,6,7))\nassert     trim_tuple([(1,2), (3,4), (5,6,7)], 0) == ((1,2), (3,4), (5,6,7))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple(\n            [\n                ('a','b'),\n                ('c','d'),\n                ('e','f'),\n                ('g','h'),\n                ('i','j'),\n                ('k','l'),\n                ('m','n'),\n                ('o','p'),\n                ('q','r'),\n                ('s','t'),\n                ('u','v'),\n                ('w','x'),\n                ('y','z'),\n            ],\n            K = 0\n        ) == [\n            ('a','b'),\n            ('c','d'),\n            ('e','f'),\n            ('g','h'),\n            ('i','j'),\n            ('k','l'),\n            ('m','n'),\n            ('o','p'),\n            ('q','r'),\n            ('s','t'),\n            ('u','v'),\n            ('w','x'),\n            ('y','z'),\n        ]\n\nassert     trim_tuple(\n            [\n                ('a','b'),\n                ('c','d'),\n                ('e','f'),\n                ('g','h'),\n                ('i','j'),\n                ('k','l'),\n                ('m','n'),\n                ('o','p'),\n                ('q','r'),\n                ('s','t'),\n                ('u','v'),\n                ('w','x'),\n                ('y','z'),\n            ],\n            K = 1\n        ) == [\n            ('a','b'),\n            ('c','d'),\n            ('e','f'),\n            ('g','h'),\n            ('i','j'),\n            ('k','l'),\n            ('m','n'),\n            ('o','p'),\n            ('q','r'),\n            ('s','t'),\n            ('u','v'),\n            ('w','x'),\n            ('y','z'),\n        ]\nassert     trim_tuple(\n            [\n                ('a','b'),\n                ('c','d'),\n                ('e','f'),\n                ('g','h'),\n                ('i','j'),\n                ('k','l'),\n                ('m','n'),\n                ('o','p'),\n                ('q','r'),\n                ('s','t'),\n                ('u','v'),\n                ('w','x'),\n                ('y','z'),\n            ],\n            K = 2\n        ) == [\n            ('a','b'),\n            ('c','d'),\n            ('e','f'),\n            ('g','h'),\n            ('i','j'),\n            ('k','l'),\n            ('m','n'),\n            ('o','p'),\n            ('q','r'),\n            ('s','t'),\n            ('u','v'),\n            ('w','x'),\n            ('y','z'),\n        ]\nassert     trim_tuple(\n            [\n                ('a','b'),\n                ('c','d'),\n                ('e','f'),\n                ('g','h'),\n                ('i','j'),\n                ('k','l'),\n                ('m','n'),\n                ('o','p'),\n                ('q','r'),\n                ('s','t'),\n                ('u','v'),\n                ('w','x'),\n                ('y','z'),\n            ],\n            K = 3\n        ) == [\n            ('a','b'),\n            ('c','d'),\n            ('e','f'),\n            ('g','h'),\n            ('i','j'),\n            ('k','l'),\n            ('m','n'),\n            ('o','p'),\n            ('q','r'),\n            ('s','t'),\n            ('u','v'),\n            ('w','x'),\n            ('y','z'),\n        ]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     trim_tuple([(1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11)], 2) == [(1, 2), (3, 4, 5), (6, 7, 8)]\nassert     trim_tuple([(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12, 13)], 2) == [(1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11)]\nassert     trim_tuple([(1, 2), (3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)], 2) == [(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12, 13)]\nassert     trim_tuple([(1, 2), (3, 4, 5), (6, 7, 8, 9, 10, 11)], 2) == [(1, 2), (3, 4, 5), (6, 7, 8, 9, 10)]\nassert     trim_tuple([(1, 2), (3, 4, 5), (6, 7, 8, 9, 10, 11, 12)], 2) == [(1, 2), (3, 4, 5), (6, 7, 8, 9, 10, 11)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8), (9, 10, 11)], K=4) == \\\n        [(4, 5, 6), (7, 8), (9, 10, 11)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8), (9, 10, 11)], K=5) == \\\n        [(1, 2, 3), (4, 5, 6)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8), (9, 10, 11)], K=6) == \\\n        [(1, 2, 3), (4, 5, 6), (7, 8)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8), (9, 10, 11)], K=7) == \\\n        [(1, 2, 3), (4, 5, 6), (7, 8), (9, 10, 11)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8), (9, 10, 11)], K=8) == \\\n        [(1, 2, 3), (4, 5, 6), (7, 8)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([(1,2),(1,3),(2,4),(2,5),(3,6)], 2) == \\\n        [(1,2),(1,3),(2,4),(2,5),(3,6)]\nassert     trim_tuple([(1,2),(1,3),(2,4),(2,5),(3,6)], 1) == \\\n        [(1,2),(1,3),(2,4),(2,5),(3,6)]\nassert     trim_tuple([(1,2),(1,3),(2,4),(2,5),(3,6)], 0) == \\\n        [(1,2),(1,3),(2,4),(2,5),(3,6)]\nassert     trim_tuple([(1,2,3),(1,2,3,4),(1,2,3,4,5),(1,2,3,4,5,6)], 2) == \\\n        [(1,2,3),(1,2,3,4),(1,2,3,4,5),(1,2,3,4,5,6)]\nassert     trim_tuple([(1,2,3),(1,2,3,4),(1,2,3,4,5),(1,2,3,4,5,6)], 1) == \\\n        [(1,2,3),(1,2,3,4),(1,2,3,4,5),(1,2,3,4,5,6)]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_multiplication((1, 2, 3, 4), (2, 5, 6, 7)) == (2, 4, 10, 20)\nassert index_multiplication((1, 2, 3, 4), (1, 5, 7, 9)) == (1, 5, 7, 9)\nassert index_multiplication((10, 20, 30, 40), (5, 6, 7, 8)) == (50, 60, 70, 80)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_multiplication((1, 2), (3, 4)) == (3, 8), \"For Given Inputs, Your Function Should Return ({3, 8})\".format(3, 8)\nassert index_multiplication((1, 2), (3, 4, 5)) == (3, 16), \"For Given Inputs, Your Function Should Return ({3, 16})\".format(3, 16)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication((1,2), (3,4)) == (1*3, 2*4)\nassert     index_multiplication((0,1), (0,1)) == (0,0)\nassert     index_multiplication((-1,-2), (2,-4)) == (2*2, 4*-1)\nassert     index_multiplication((-1,0), (2,-4)) == (-2,0)\nassert     index_multiplication((0,-1), (2,-4)) == (0,-2)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert     index_multiplication((0, 2, 5), (4, 5, 6)) == (0, 10, 30)\n\ndef index_addition(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication((1,2),(3,4)) == (1*3,2*4)\nassert     index_multiplication((-1,2),(3,4)) == (-1*3,2*4)\nassert     index_multiplication((-1,2),(3,2)) == (-1*3,2*2)\nassert     index_multiplication((1,2),(3,2)) == (1*3,2*2)\nassert     index_multiplication((1,2),(3,2,4)) == (1*3,2*2*4)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18)\nassert     index_multiplication((1,2,3),(3,2,1)) == (3,4,6)\n\n\ndef sort_tuple(test_tup):\n    '''\n    Write a function to sort a tuple of elements in the descending order.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert     index_multiplication((1, 2, 3), (4, 5, 6, 7)) == (4, 10, 18, 27)\nassert     index_multiplication((1, 2, 3), ('a', 'b', 'c')) == ('a', 'b', 'c', 'a', 'b', 'c')\nassert     index_multiplication((1, 2, 3), ('a', 'b', 'c', 'a', 'b', 'c')) == ('a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c')\nassert     index_multiplication((1, 2, 3), 'a') == ('a', 'a', 'a')\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_multiplication((1,2,3), (5,6,7)) == (1,10,21)\nassert     index_multiplication((1,2,3), (1,2,3)) == (1,4,9)\nassert     index_multiplication((1,2,3,4), (1,2,3,4)) == (1,8,24,16)\n\ndef index_division(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise division of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Occurrence((1, 2, 3), [1, 2, 3]) == 3, \"incorrect output\"\nassert count_Occurrence((1, 2, 3), (1, 2, 3)) == 3, \"incorrect output\"\nassert count_Occurrence((1, 2, 3), (2, 2, 2)) == 2, \"incorrect output\"\nassert count_Occurrence((1, 2, 3), (3, 3, 3)) == 0, \"incorrect output\"\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Occurrence((1,2,3,4), (1,2,3,4)) == {1: 4, 2: 3, 3: 2, 4: 1}\nassert count_Occurrence((1,2,2,3), (1,2,3,3)) == {1: 4, 2: 2, 3: 2}\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Occurrence((1,2,3), [1,2,3]) == {1:1, 2:1, 3:1}\nassert     count_Occurrence((4,2,3), [1,2,3]) == {1:1, 2:1, 3:1}\n\ndef find_unique_values(dict_):\n    '''\n    Write a python function to return a list of all unique values of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Occurrence(('a', 'a', 'b', 'b', 'c', 'd', 'e', 'a', 'b'), ['a','b','c','d','e']) == 3\nassert count_Occurrence(('a', 'a', 'b', 'b', 'c', 'd', 'e', 'a', 'b'), ['a','b','c','d','e']) == 2\nassert count_Occurrence(('a', 'a', 'b', 'b', 'c', 'd', 'e', 'a', 'b'), ['a','a','b','a','c','d','e']) == 1\nassert count_Occurrence(('a', 'a', 'b', 'b', 'c', 'd', 'e', 'a', 'b'), ['a','a','a','a','c','d','e']) == 0\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Occurrence((2, 3, 4, 5, 5, 6, 7, 7, 8, 8),\n    [2, 3, 4, 5, 5, 6, 7, 7, 8, 8]) == Counter([2: 4, 3: 4, 4: 2, 5: 3, 6: 1, 7: 3, 8: 2])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Occurrence((1,2,3,4,5),[1,2,3,4,5])==(2,4,2)\n\ndef min_max(lst,start,end):\n    '''\n    Write a python function to find minimum and maximum values of a given range of elements in a list.\n    '''\n    pass\n\nassert     min_max([1,2,3,4,5],1,4)==(1,5)\n\ndef sub_string_search(string,search):\n    '''\n    Write a python function to find the position of substring in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Occurrence((1,2,3,1,4),[1,1,1,1,1])== {1: 2, 2: 1, 3: 1, 4: 1}\nassert     count_Occurrence((4,5,6),[1,1,1,1,1,1,1])== {1: 3, 4: 1, 5: 1, 6: 1}\nassert     count_Occurrence((4,5,6,7),[1,1,1,1,1,1,1])== {1: 3, 4: 1, 5: 1, 6: 1, 7: 1}\nassert     count_Occurrence((1,1,2,2),[1,1,1,1,1,1,1,1])== {1: 4, 2: 2}\nassert     count_Occurrence((4,5,6),[4,5,5,5,5,5,5])== {4: 2, 5: 1, 6: 1}\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_Occurrence((1,2,3,4),[1,2,3,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]) == Counter([1,2,3,4,1,2,3,4])\n\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    #create a list of tuple and count the occurence of each element.\n    count = []\n    for i in lst:\n        count.append(tup.count(i))\n    print(count)\n    print(Counter(count))\n    # print(tup)\n    # print(Counter(count))\n    # count = Counter(count)\n    # print(count)\n    # return count\n    \ncount_Occurrence((1,2,3,4),[1,2,3,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Occurrence((1,2,1,1,2,1), [1,1,1,1,2,2,2,2,2]) == [(1,4), (2,3)]\nassert     count_Occurrence((1,1,1,1,1,1,1), ['a','b','c','d','e','f','g','h','i','j']) == [(1,4), (2,2), (3,1), (4,1)]\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Occurrence((1,2,3,4,5),[1,2,3,4,5])==4\nassert count_Occurrence((1,1,2,3,3),[1,2,3,4,5])==5\nassert count_Occurrence((1,1,2,3,4),[1,2,3,4,5])==5\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncube_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25], 'Wrong answer'\nassert \ncube_nums([4, 5, 1, 2, 9]) == [16, 25, 1, 4, 9], 'Wrong answer'\nassert \ncube_nums([9, 4, 1, 2, 5]) == [16, 25, 1, 4, 9], 'Wrong answer'\nassert \ncube_nums([5, 4, 1, 2, 9]) == [16, 25, 1, 4, 9], 'Wrong answer'\nassert \ncube_nums([9, 4, 1, 2, 5]) == [16, 25, 1, 4, 9], 'Wrong answer'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncube_nums([1,2,3,4]) == [1,8,27,64]\n\ndef x_y(x,y):\n    '''\n    Write a function to find the sum of cubes of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_nums([]) == []\nassert     cube_nums([1,2,3]) == [1, 8, 27]\nassert     cube_nums([-1, -2, -3]) == [-1, -8, -27]\nassert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncube_nums([1,2,3,4,5]) == [1, 8, 27, 64, 125]\n\n\ndef cube_nums2(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_nums([1,2,3,4]) == [1, 8, 27, 64]\nassert     cube_nums([-1,-2,0,4]) == [-1, 0, 4, 16]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncube_nums(3) == 9\ncube_nums(4) == 64\ncube_nums(5) == 100\ncube_nums(6) == 216"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cube_nums([1,2,3,4]) == [1, 8, 27, 64]\nassert     cube_nums([0, 1, -3, 5, 8, -9]) == [0, 1, 4, 25, 256, 65536]\nassert     cube_nums([]) == []\nassert     cube_nums([-1,-4,5,-6]) == [-1, -8, -27, -64]\n\ncube_nums([-1, -4, 5, -6])\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncube_nums([2, 3, 8]) == [4, 27, 64]\n\ndef cube_odds(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncube_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\ncube_nums([0, 1, 2, 3]) == [0, 1, 4, 9]\ncube_nums([-2, -1, 0, 1, 2]) == [-2, 0, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([]) == []\ncube_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == [\n-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, 1, 0]) == [-2, -1, 4, 8, 16]\ncube_nums([-2, -1, 2, "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cal_sum(1) == 0\nassert     cal_sum(2) == 1\nassert     cal_sum(3) == 3\nassert     cal_sum(4) == 5\nassert     cal_sum(5) == 8\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    # run the test cases\n    assert cal_sum(1) == 1, \"Test 1: result is incorrect\"\n    assert cal_sum(2) == 3, \"Test 2: result is incorrect\"\n    assert cal_sum(5) == 15, \"Test 3: result is incorrect\"\n    "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cal_sum(0) == 0\nassert     cal_sum(1) == 1\nassert     cal_sum(2) == 3\nassert     cal_sum(3) == 6\nassert     cal_sum(4) == 10\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef cal_div(a,b):\n    '''\n    Write a function to calculate the quotient when the divisor is 2.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert cal_sum(1) == 1\nassert cal_sum(2) == 3\nassert cal_sum(3) == 6\nassert cal_sum(10) == 55\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef cal_square(n): \n    '''\n    Write a function to calculate the square of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef gen_range(start, end):\n    '''\n    Write a function to generate a range of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(cal_sum(10))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_cal_sum(): \n    assert cal_sum(10) == 55\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n\nassert cal_sum(3) == 5\nassert cal_sum(5) == 17\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_string(['abc', 'def', 'ghi'], 2) == ['abc', 'def']\nassert     extract_string(['abc', 'def', 'ghi'], 1) == ['abc', 'ghi']\nassert     extract_string(['abc', 'def', 'ghi'], 0) == ['abc', 'def', 'ghi']\nassert     extract_string(['abc', 'def', 'ghi'], -1) == ['def', 'ghi']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \n\ndef find_all_strings(str_list):\n    '''\n    Write a function to find all string values in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"\\n\\n***** Testcase 1: Single String *****\\n\")\n\n    input_data = ['abc', 'def', 'ghi', 'jkl','mno']\n    output_data = ['abc', 'def', 'ghi', 'jkl']\n\n    print(extract_string(input_data, len(output_data)))\n    print(input_data)\n\n    print(\"\\n\\n***** Testcase 2: Multiple String *****\\n\")\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string('abc', 3) == ['abc', 'abc', 'abc']\nassert     extract_string('abcd', 2) == ['ab', 'cd']\nassert     extract_string('abcd', 1) == ['a', 'b', 'c', 'd']\n\ndef extract_list(str, l):\n    '''\n    Write a function to extract specified size of list of string values from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef extract_string(str, l, start, end):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert extract_string(['PYTHON', 'IS', 'FUN'], 5) == ['PYTHON', 'IS', 'FUN']\nassert extract_string(['PYTHON', 'IS', 'FUN'], 2) == ['PYTHON', 'IS']\nassert extract_string(['PYTHON', 'IS', 'FUN'], 1) == ['PYTHON', 'IS']\nassert extract_string([], 5) == []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_largest_number(int_list):\n    '''\n    Write a function to find largest number from a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_permutation(str1, str2):\n    '''\n    Write a function to check whether two given strings are permutations of each other.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces('    Hello World!   ') == 'Hello World!'\nassert    remove_whitespaces(' Hello World!  ') == 'Hello World!'\nassert    remove_whitespaces('Hello World! ') == 'Hello World!'\nassert    remove_whitespaces('Hello World!   ') == 'Hello World!'\nassert    remove_whitespaces(' Hello World!   ') == 'Hello World!'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces('    Hello World!  ') == \"Hello World!\"\nassert remove_whitespaces('This is a test string. This is a test string.') == \"This is a test string\"\nassert remove_whitespaces(' ') == ''\n\ndef _format_snippet(snippet):\n    '''\n    Remove leading whitespace from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_whitespaces(' ') == '', \"remove_whitespaces should return an empty string.\"\nassert     remove_whitespaces('Hello') == 'Hello', \"remove_whitespaces should return an empty string.\"\nassert     remove_whitespaces('   Hello   ') == 'Hello', \"remove_whitespaces should return an empty string.\"\nassert     remove_whitespaces('Hello\\tWorld') == 'HelloWorld', \"remove_whitespaces should return an empty string.\"\nassert     remove_whitespaces('Hello\\nWorld') == 'HelloWorld', \"remove_whitespaces should return an empty string.\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    remove_whitespaces(' Hello   ') == 'Hello'\n    remove_whitespaces('a b') == 'a b'\n    remove_whitespaces('ab') == 'ab'\n    remove_whitespaces('a') == 'a'\n    remove_whitespaces(' ') == ''\n    remove_whitespaces('  ') == ''\n    remove_whitespaces('') == ''\n    remove_whitespaces('ab ab') == 'ab ab'\n    remove_whitespaces('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n    remove_whitespaces('   hello') == 'hello'\n    remove_whitespaces('     hello') == 'hello'\n    remove_whitespaces('    hello') == 'hello'\n    remove_whitespaces('   hello   ') == 'hello'\n    remove_whitespaces('hello') == 'hello'\n    remove_whitespaces('hellohellohello') == 'hellohellohello'\n    remove_whitespaces('hellohellohellohellohello') == 'hellohellohellohellohellohellohello'\n    remove_whitespaces('hellohellohellohellohellohellohellohellohello') == 'hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello'\n    remove_whitespaces('ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababa"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_whitespaces(\"    Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"   Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"      Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"Hi World\") == \"Hi World\"\nassert     remove_whitespaces(\"      \") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(\"    \") == \"\", 'Test 1 fail: return empty string'\nassert     remove_whitespaces(\"\") == \"\", 'Test 2 fail: return empty string'\nassert     remove_whitespaces(\"\") == \"\", 'Test 3 fail: return empty string'\nassert     remove_whitespaces(\" \") == \"\", 'Test 4 fail: return empty string'\nassert     remove_whitespaces(\"  \") == \"\", 'Test 5 fail: return empty string'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces(' ') == ''\nassert     remove_whitespaces('\\t') == ''\nassert     remove_whitespaces(' \\n') == ''\nassert     remove_whitespaces('  ') == ''\nassert     remove_whitespaces('   ') == ''\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces('    test  ') == 'test', \"remove_whitespaces(): wrong\"\nassert     remove_whitespaces('       test   ') == 'test', \"remove_whitespaces(): wrong\"\nassert     remove_whitespaces('test test   ') == 'test test', \"remove_whitespaces(): wrong\"\nassert     remove_whitespaces('        test   ') == 'test', \"remove_whitespaces(): wrong\"\nassert     remove_whitespaces('test test ') == 'test test', \"remove_whitespaces(): wrong\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\"This text contains text, text, text\") == \"This text contains text, text, text\"\nassert     remove_whitespaces(\"This text contains text, text, text, text\") == \"This text contains text, text, text\"\nassert     remove_whitespaces(\"This text contains text, text, text\") == \"This text contains text\"\nassert     remove_whitespaces(\"This text contains text, text, text, text, text\") == \"This text contains text\"\nassert     remove_whitespaces(\"\") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(\"        Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"hello      world\") == \"Hello world\"\nassert     remove_whitespaces(\"\") == \"\"\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     loss_amount(50,60) == 10, \"Check for the loss_amount function\"\nassert     loss_amount(50,50) == 0, \"Check for the loss_amount function\"\nassert     loss_amount(50,40) == 20, \"Check for the loss_amount function\"\nassert     loss_amount(50,30) == 30, \"Check for the loss_amount function\"\nassert     loss_amount(100,100) == 0, \"Check for the loss_amount function\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nactual_cost = 50000\nsale_amount = 100\nassert loss_amount(actual_cost,sale_amount) == -25000, 'actual_cost = 50000, sale_amount = 100'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     loss_amount(5000,2500) == 500, \"1st example\"\nassert     loss_amount(2000,5000) == 0, \"2nd example\"\nassert     loss_amount(5000,10000) == 50, \"3rd example\"\nassert     loss_amount(2000,0) == 0, \"4th example\"\nassert     loss_amount(0,5000) == 0, \"5th example\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(2,2) == 0, \"3\"\nassert     loss_amount(2,4) == -2, \"4\"\nassert     loss_amount(2,3) == -1, \"3\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(15,10) == 5\nassert     loss_amount(10,10) == 0\nassert     loss_amount(5,10) == 5\nassert     loss_amount(6,9) == 3\nassert     loss_amount(7,9) == 3\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nloss_amount(100,0) == 0\n\nassert loss_amount(10,10) == 10\n\nassert loss_amount(10,100) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nactual_cost = 10000\nsale_amount = 25000\n\nif loss_amount(actual_cost,sale_amount) == 0:\n    print(\"The loss amount should be 0\")\nelse:\n    print(\"The loss amount should be\",loss_amount(actual_cost,sale_amount))\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert loss_amount(1,0) == 0\nassert loss_amount(1.1,0) == 0\nassert loss_amount(1,1) == 0\nassert loss_amount(100,50) == 50\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(10,1) == 0, \"Expected: 0, Actual: 10\"\nassert     loss_amount(10,0) == 10, \"Expected: 10, Actual: 10\"\nassert     loss_amount(10,5) == 0, \"Expected: 0, Actual: 10\"\nassert     loss_amount(10,6) == 5, \"Expected: 5, Actual: 10\"\nassert     loss_amount(10,10) == 0, \"Expected: 0, Actual: 10\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(0,0) == 0, 'Wrong output'\nassert    loss_amount(10,2) == 2, 'Wrong output'\nassert    loss_amount(100,200) == 20, 'Wrong output'\nassert    loss_amount(100,-200) == 0, 'Wrong output'\nassert    loss_amount(100,-100) == 0, 'Wrong output'\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sumofFactors(0) == 0, 'negative number: %d'%sumofFactors(0)\nassert     sumofFactors(1) == 0, 'positive number: %d'%sumofFactors(1)\nassert     sumofFactors(10) == 1, 'positive number: %d'%sumofFactors(10)\nassert     sumofFactors(12) == 8, 'positive number: %d'%sumofFactors(12)\nassert     sumofFactors(11) == 13, 'positive number: %d'%sumofFactors(11)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sumofFactors(12) == 0, \"Wrong output\"\nassert sumofFactors(9) == 0, \"Wrong output\"\nassert sumofFactors(16) == 0, \"Wrong output\"\nassert sumofFactors(5) == 0, \"Wrong output\"\nassert sumofFactors(9) == 1, \"Wrong output\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('TEST CASE 1 PASSED!')\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sumofFactors(15) == 10\nassert     sumofFactors(6) == 6\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sumofFactors(6) == 3, \"function should return 3\"\nassert     sumofFactors(9) == 6, \"function should return 6\"\nassert     sumofFactors(1) == 1, \"function should return 1\"\nassert     sumofFactors(8) == 6, \"function should return 6\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sumofFactors(6) == 4, 'incorrect output'\nassert     sumofFactors(10) == 7, 'incorrect output'\n\ndef sumOfFactors(n):\n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(sumofFactors(20))\nprint(sumofFactors(2))\nprint(sumofFactors(7))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz('') == []\nassert     text_match_wordz('aab') == []\nassert     text_match_wordz('aabz') == ['aabz']\nassert     text_match_wordz('aabzd') == ['aabzd']\nassert     text_match_wordz('aabzdz') == ['aabzdz']\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz('','') == False\nassert     text_match_wordz('test-test','') == False\nassert     text_match_wordz('test','') == False\nassert     text_match_wordz('test', 'testz') == True\nassert     text_match_wordz('test', 'testz-test') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz('')== False, 'Function not defined'\nassert     text_match_wordz('z') == False, 'Test 1'\nassert     text_match_wordz('z') == False, 'Test 2'\nassert     text_match_wordz('z z') == True, 'Test 3'\nassert     text_match_wordz('z z z') == False, 'Test 4'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz(\"abc\") == False \nassert     text_match_wordz(\"abcz\") == True \nassert     text_match_wordz(\"acz\") == False \nassert     text_match_wordz(\"abz\") == False \nassert     text_match_wordz(\"z\") == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz('the zebra was here') == True, \"expected True\"\nassert     text_match_wordz('she said zebra was here') == False, \"expected False\"\nassert     text_match_wordz('the zebra') == False, \"expected False\"\nassert     text_match_wordz('a') == False, \"expected False\"\nassert     text_match_wordz('aa') == False, \"expected False\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(text_match_wordz(\"\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert text_match_wordz(\"\") == False\n    "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz('zebra') == True, \"Example\"\nassert     text_match_wordz('banana') == False, \"Another\"\nassert     text_match_wordz('a') == False, \"A\"\nassert     text_match_wordz('abc') == False, \"B\"\nassert     text_match_wordz('abcde') == False, \"C\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz('') == True\nassert     text_match_wordz('z') == True\nassert     text_match_wordz('hello') == False\nassert     text_match_wordz('hello world') == False\nassert     text_match_wordz('zebra') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz('some_text') == False, 'Wrong output: True instead of False'\nassert     text_match_wordz('some_text_with_zzz') == False, 'Wrong output: True instead of False'\nassert     text_match_wordz('some_text_zzzzzz') == True, 'Wrong output: False instead of True'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(60) == False\nassert     check_monthnumb_number(365) == True\nassert     check_monthnumb_number(366) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(12) == True, 'Should be True'\nassert     check_monthnumb_number(1) == True, 'Should be True'\nassert     check_monthnumb_number(3) == True, 'Should be True'\nassert     check_monthnumb_number(9) == True, 'Should be True'\nassert     check_monthnumb_number(11) == True, 'Should be True'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(1) == False\nassert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(4) == False\nassert     check_monthnumb_number(7) == True\nassert     check_monthnumb_number(9) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(3) == True\nassert     check_monthnumb_number(4) == False\nassert     check_monthnumb_number(5) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(31) == True, 'incorrect test case'\nassert     check_monthnumb_number(9) == False, 'incorrect test case'\nassert     check_monthnumb_number(2) == False, 'incorrect test case'\nassert     check_monthnumb_number(0) == False, 'incorrect test case'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(3) == True, 'No leap year'\nassert     check_monthnumb_number(4) == True, 'Year is leap'\nassert     check_monthnumb_number(7) == True, 'No leap year'\nassert     check_monthnumb_number(8) == False, 'No leap year'\nassert     check_monthnumb_number(12) == False, 'No leap year'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(2) == True, \\\n    'You should write a function check_monthnumb_number(monthnum2) with monthnum2 being an integer greater than 1 and return True if the month number has 31 days and False otherwise.'\nassert     check_monthnumb_number(31) == True, \\\n    'You should write a function check_monthnumb_number(monthnum2) with monthnum2 being an integer greater than 1 and return True if the month number has 31 days and False otherwise.'\nassert     check_monthnumb_number(33) == False, \\\n    'You should write a function check_monthnumb_number(monthnum2) with monthnum2 being an integer greater than 1 and return True if the month number has 31 days and False otherwise.'\nassert     check_monthnumb_number(12) == False, \\\n    'You should write a function check_monthnumb_number(monthnum2) with monthnum2 being an integer greater than 1 and return True if the month number has 31 days and False otherwise.'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(5)    == True, 'The given input should be 5'\nassert     check_monthnumb_number(5)    == True, 'The given input should be 5'\nassert     check_monthnumb_number(11)    == False, 'The given input should be 11'\nassert     check_monthnumb_number(3)    == False, 'The given input should be 3'\nassert     check_monthnumb_number(4)    == True, 'The given input should be 4'\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_string_list([]) == []\nassert     reverse_string_list([1,2,3,4,5]) == ['5','4','3','2','1']\nassert     reverse_string_list(['A', 'B', 'C', 'D']) == ['D','C','B','A']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nreverse_string_list(['apple', 'banana', 'orange', 'grapes', 'pineapple']) == ['pineapple', 'grapes', 'orange', 'banana', 'apple']\nassert not reverse_string_list([''])\nassert reverse_string_list(['a']) == ['a']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_string_list([\"apple\", \"banana\", \"cherry\"]) == [\"cherry\", \"banana\", \"apple\"]\nassert     reverse_string_list([\"apple\", \"banana\", \"cherry\", \"coconut\"]) == [\"coconut\", \"banana\", \"cherry\", \"apple\"]\nassert     reverse_string_list([\"apple\", \"banana\", \"cherry\", \"coconut\", \"mango\", \"orange\"]) == [\"orange\", \"banana\", \"cherry\", \"coconut\", \"mango\", \"apple\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert\nassert \nassert reverse_string_list([\"hello\", \"word\"]) == [\"word\", \"hello\"], \"should be the reversed of ['hello', 'word']\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_string_list(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a']\nassert     reverse_string_list(['c', 'a', 'b', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']\nassert     reverse_string_list(['c', 'd', 'a', 'b', 'e']) == ['e', 'd', 'b', 'a', 'c']\nassert     reverse_string_list(['d', 'e', 'c', 'b', 'a']) == ['a', 'b', 'c', 'd', 'e']\nassert     reverse_string_list(['e', 'd', 'c', 'b', 'a']) == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_string_list(['cat', 'dog', 'cow']) == ['cow', 'dog', 'cat']\nassert     reverse_string_list(['hello', 'hi']) == ['hi', 'hello']\nassert     reverse_string_list(['1', '2']) == ['2', '1']\nassert     reverse_string_list(['true', 'false']) == ['false', 'true']\n\ndef find_first_missing_positive(numlist):\n    '''\n    Write a function to find the smallest positive integer that does not exist in a given list of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_string_list(['hello', 'to','my', 'world']) == ['world','my', 'to', 'hello']\nassert     reverse_string_list(['hello', 'to','my', 'world', 'I', 'am', 'here']) == ['here', 'I', 'am', 'world','my', 'to', 'hello']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_string_list([\"cw\", \"Wc\", \"cw\"]) == ['cw', 'Wc', 'cw'], \"Wrong\"\nassert     reverse_string_list([\"jim\", \"a\", \"joe\"]) == ['joe', 'a', 'jim'], \"Wrong\"\nassert     reverse_string_list([\"gf\", \"ge\", \"f\", \"g\"]) == ['f', 'g', 'gf', 'ge'], \"Wrong\"\nassert     reverse_string_list([\"f\", \"f\", \"f\"]) == ['f', 'f', 'f'], \"Wrong\"\n\ndef reverse_strings_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min([]) == []\nassert     Find_Min([1]) == []\nassert     Find_Min([1,2]) == []\nassert     Find_Min([2]) == []\nassert     Find_Min([1,1,1]) == []\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min([]) == False, \"No sublist to find\"\nassert     Find_Min([1,2,3,4,5]) == True, \"Min length sublist\"\nassert     Find_Min([1,2,3,4,5,6]) == True, \"Min length sublist\"\nassert     Find_Min([1,2,3,4,5,6,7]) == True, \"Min length sublist\"\nassert     Find_Min([1,2,3,4,5,6,7,8]) == True, \"Min length sublist\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min([]) == None\nassert     Find_Min([1,2,3]) == (1,)\nassert     Find_Min([3,4,5,6,7,8,9,10]) == (3,)\nassert     Find_Min([3,4,5,6,7,8,9,10,11,12]) == (3,11)\nassert     Find_Min([3,4,5,6,7,8,9,10,11,12,13,14,15]) == (3,11)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nlst = ['a','b','c']\nFind_Min(lst) == ['a','b']\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min([1, 2, 3, 4, 5]) == 3, 'test 1 failed'\nassert     Find_Min([1, 2, 3, 4]) == 2, 'test 2 failed'\nassert     Find_Min([1, 2, 3, 4, 5]) == 2, 'test 3 failed'\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    Find_Min([]) == None\n    Find_Min([[]]) == None\n    Find_Min([[1],[1,1],[1,1,1]]) == [1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],[1,1],[1,1,1],[1,1,1]]) == [1,1,1,1]\n    Find_Min([[1],["
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [[5,10,15,20,25], [15,20,25,30,35], [10,20,25,30,35], [5,10,15,20,25]]\n    print(Find_Min(lst))"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nFind_Min([5,4,7,8,2,3]) == 1\n\ndef Find_Max(lst):\n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrectangle_area(3,4) == 6\nrectangle_area(4,5) == 20"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nrectangle_area(1, 1) #== 2\nrectangle_area(3, 2) #== 6\nrectangle_area(2, 1) #== 1\nrectangle_area(3, 2) #== 9\n\n\ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    pass"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rectangle_area(2,3) == 6\nassert     rectangle_area(6,3) == 18\nassert     rectangle_area(3,3) == 9\nassert     rectangle_area(3,2) == 6\nassert     rectangle_area(2,2) == 4\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rectangle_area(3,4) == 12\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rectangle_area(10, 10) == 100\nassert    rectangle_area(5, 5) == 25\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rectangle_area(10,20)==100\nassert     rectangle_area(2,2)==4\nassert     rectangle_area(5,4)==40\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(rectangle_area(4,3))"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef substring_present(str1, target):\n    '''\n    Write a function to find whether a substring is present in a string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_uppercase('HELLO') == 'hELLO'\nassert     remove_uppercase('HELLO WORLD!') == 'hELLO wORLD!'\n\nassert remove_uppercase('HELLO WORLD!') == 'hELLO wORLD!'\nassert remove_uppercase('HELLO WORLD!') == 'hELLO wORLD!'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase('asdasd') =='sdsd'\nassert remove_uppercase('SADFADSf') == 'SF'\nassert remove_uppercase('asDSAfd') == 'asdSF'\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == None:\n        return None\n    elif str1 == \"\":\n        return \"\"\n    else:\n        return ''.join([char for char in str1 if not char.isupper()])\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_uppercase(\"\")    == \"\"\nassert     remove_uppercase(\"Hi\")    == \"hi\"\nassert     remove_uppercase(\"hello\")    == \"hello\"\nassert     remove_uppercase(\"HELLO\")    == \"hello\"\nassert     remove_uppercase(\"HELlO\")    == \"hello\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_uppercase('') == ''\nassert     remove_uppercase('hEllo') == 'hello'\nassert     remove_uppercase('hELLO') == 'hello'\nassert     remove_uppercase('HELLO') == 'hello'\nassert     remove_uppercase('HELLO!') == 'hello!'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"A\") == \"A\"\nassert     remove_uppercase(\"B\") == \"B\"\nassert     remove_uppercase(\"BA\") == \"AB\"\nassert     remove_uppercase(\"AA\") == \"A\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_uppercase(\"tHiS tEsT\") == \"tHiS teSt\", \"Wrong answer\"\nassert     remove_uppercase(\"tHiS tEsT\") == \"tHiS tEsT\", \"Wrong answer\"\nassert     remove_uppercase(\"hello\") == \"\", \"Wrong answer\"\nassert     remove_uppercase(\"1234567\") == \"\", \"Wrong answer\"\nassert     remove_uppercase(\"1234\") == \"1234\", \"Wrong answer\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_uppercase(\"REMOVE_UPPERCASE\") == \"REMOVE_UPPERCASE\"\nassert     remove_uppercase(\"REMOVE_UPPERCASE_\") == \"REMOVE_UPPERCASE\"\nassert     remove_uppercase(\"REMOVE_UPPERCASE_REMOVE_UPPERCASE\") == \"REMOVE_UPPERCASE\"\nassert     remove_uppercase(\"REMOVE_UPPERCASE_REMOVE_UPPERCASE_REMOVE_UPPERCASE\") == \"REMOVE_UPPERCASE\"\nassert     remove_uppercase(\"REMOVE_UPPERCASE_REMOVE_UPPERCASE_REMOVE_UPPERCASE_REMOVE_UPPERCASE\") == \"REMOVE_UPPERCASE\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract([[],[]]) == []\nassert     Extract([[1,2,3,4],[]]) == []\nassert     Extract([[[1],[2,3,4],[5,6,7]]]) == [[1],[2,3,4],[5,6,7]]\n\n'''\nWrite a Python function to find and print the shortest path between two nodes in an unweighted graph using Dijkstra's Algorithm.\nThe graph is given as an adjacency matrix.\n\nInput:\nN = 5\ngraph = [[0, 4, 0, 0, 0], \n        [4, 0, 8, 0, 0], \n        [0, 8, 0, 7, 0], \n        [0, 0, 7, 0, 9], \n        [0, 0, 0, 9, 0]]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Extract([[3,5,9],[1,4,5]]) == [3,1,4], \"wrong\"\nassert     Extract([[3],[1,4,5]]) == [3], \"wrong\"\nassert     Extract([[3,5,9]]) == [3,5,9], \"wrong\"\nassert     Extract([[3,5,9,7]]) == [3,5,9,7], \"wrong\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef AddOne(lst): \n    '''\n    Write a python function to get the sum of the elements of each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Extract([\"a\",\"b\",\"c\",\"d\"]) == [\"a\",\"b\",\"c\",\"d\"]\nassert     Extract([\"a\",\"b\",\"c\"]) == [\"a\"]\nassert     Extract([\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\"]\nassert     Extract([\"a\",\"b\",\"c\",\"d\"]) == [\"a\",\"b\",\"c\",\"d\"]\nassert     Extract([\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\"]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract([[1, 2, 3, 4], 1, [5,6,7]]) == [1, 5, 7], \"First item of first sublist should be 5\"\nassert     Extract([[1, 2, 3], 4, [5,6,7]]) == [1, 5, 7], \"First item of second sublist should be 5\"\nassert     Extract([[1, 2, 3, 4], 5, 6, 7]) == [1, 5, 6, 7], \"First item of sublist should be 5\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Extract([[1,2,3], [1,2], [1,2,3], [1,2,3]]) == [1, 1, 1, 1]\nassert     Extract([[1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == [1, 1, 1, 1]\nassert     Extract([[1,2,3], [1,2], [1,2,3], [1,2,3]]) == [1, 1, 1, 1]\nassert     Extract([[1,2,3], [1,2], [1,2,3], [1,2,3]]) == [1, 1, 1, 1]\nprint(\"Your code is correct\")"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Extract([[],[],'a']) == 'a'\nassert     Extract([[],['b','c','d'],['e','f','g']]) == 'b'\nassert     Extract([['a','b','c'],['d','e','f'],['g','h','i']]) == 'a'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Extract([[1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]]) == [[1, 4],\n                        [2, 5],\n                        [3, 6]]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Extract([[1,2,3], [4,5,6,7]]) == [1,4]\nassert     Extract([[1], [2], [3,4], [5]]) == [1,2,3,5]\n\n'''\nTask 5\n\nWrite a python function which returns the list with the minimum element in it.\n'''\n\ndef Min(lst):\n    '''\n    Write a python function which returns the list with the minimum element in it.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    upper_ctr('UPPER') == 1\n    upper_ctr('z') == 1\n    upper_ctr('COMPANY') == 1\n    upper_ctr('Z') == 1\n    upper_ctr('Z') == 1\n    upper_ctr('z') == 1\n    upper_ctr('A') == 1\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AAA') == 3\n    upper_ctr('AAB') == 3\n    upper_ctr('AABB') == 3\n    upper_ctr('AAABBB') == 4\n    upper_ctr('AAABBB') == 4\n    upper_ctr('AAA') == 3\n    upper_ctr('AAA') == 3\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2\n    upper_ctr('AA') == 2"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert upper_ctr('hii') == 1\nassert upper_ctr('hi') == 0\nassert upper_ctr('HI') == 0\nassert upper_ctr('H') == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     upper_ctr(\"Hellow, World!\") == 3, \"Tests failed\"\nassert     upper_ctr(\"Hello\") == 0, \"Tests failed\"\nassert     upper_ctr(\"\") == 0, \"Tests failed\"\nassert     upper_ctr(\"A\") == 1, \"Tests failed\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    pass\n\nassert upper_ctr('my name is kevin, and my name is kevin.') == 3\nassert upper_ctr('my name is kevin, and my name is kevin.') == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr('the quick brown fox jumps over the lazy dog') == 6\nassert     upper_ctr('i am the man') == 5\n\n\n\ndef sorted_string(str):\n    '''\n    Write a python function to sort the given string in a ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     upper_ctr('The quick Brown Fox') == 5\nassert     upper_ctr('the quick Brown fox') == 11\nassert     upper_ctr('The Quick Brown Fox') == 7\nassert     upper_ctr('THE QUICK BROWN FOX') == 7\nassert     upper_ctr('the quick brown fox') == 10\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr('Python Exercises') == 5\nassert     upper_ctr('Python Practice') == 4\nassert     upper_ctr('PYTHON EXERCISES') == 5\n\nprint(\"\\n-----------------------------------------------------------\")\n\n'''\nWrite a python function to count the number of words in a given string.\n'''\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     upper_ctr('string') == 5\nassert     upper_ctr('Hello') == 5\nassert     upper_ctr('HELLO') == 5\nassert     upper_ctr('HELLO WORLD') == 6\nassert     upper_ctr('HELLO WORLD!') == 6\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nupper_ctr('The quick brown fox jumps over the lazy dog') == 6\nupper_ctr('the quick brown fox jumps over the lazy dog') == 7\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 14\nupper_ctr('tHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 10\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 14\nupper_ctr('the quick brown fox jumps over the lazy dog') == 14\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 14\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox jumps over the lazy dog') == 11\nupper_ctr('the quick brown fox') == 3\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 11\nupper_ctr("
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_list([]) == [[]]\nassert     combinations_list([0]) == [[0]]\nassert     combinations_list([0, 0, 0]) == [[0, 0, 0]]\nassert     combinations_list([0, 0, 1]) == [[0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 0, 1], [1, 1, 0]]\nassert     combinations_list([0, 0, 1, 1]) == [[0, 0, 1], [0, 0, 1, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef combinations(n, k):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\nassert     combinations_list([1,2,3,4]) == [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]]\n\n\n\ndef permutations_list(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\n\ndef comb_dict(lst):\n    '''\n    Write a function to generate all combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef solution(list1, list2):\n    '''\n    Write a function to find all combinations of given two lists of integers where the integers in each list are in sorted order.\n\n    Example:\n        Input :\n            list1 = {1, 2, 3, 6, 7, 8}\n            list2 = {3, 4, 5, 8, 9}\n        Output :\n            [(1, 3), (1, 4), (1, 5), (1, 8), (2, 3), (2, 4), (2, 5), (2, 8), (3, 6), (3, 7), (3, 8), (4, 3), (4, 4), (4, 5), (4, 8), (5, 6), (5, 7), (5, 8), (6, 3), (6, 4), (6, 5), (6, 8), (7, 3), (7, 4), (7, 5), (7, 8), (8, 3), (8, 4), (8, 5), (8, 6), (9, 3), (9, 4), (9, 5), (9, 6)]\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_list([]) == []\nassert     combinations_list([0]) == [[0]]\nassert     combinations_list([1,2]) == [[1,2],[2,1]]\nassert     combinations_list([2]) == [[2],[2,2]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], \"Wrong\"\nassert combinations_list([1,2]) == [[1,2]], \"Wrong\"\nassert combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], \"Wrong\"\nassert combinations_list([1,2,3,4]) == [[1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[1,4,3,2],[2,1,3,4],[2,1,4,3],[2,3,1,4],[2,3,4,1],[2,4,1,3],[3,1,2,4],[3,1,4,2],[3,2,1,4],[3,2,4,1],[3,4,1,2],[3,4,2,1],[4,1,2,3],[4,1,3,2],[4,2,1,3],[4,2,3,1],[4,3,1,2],[4,3,2,1]], \"Wrong\"\nassert combinations_list([1,2,3,4]) == [[1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[1,4,3,2],[2,1,3,4],[2,1,4,3],[2,3,1,4],[2,3,4,1],[2,4,1,3],[2,4,3,1],[3,1,2,4],[3,1,4,2],[3,2,1,4],[3,2,4,1],[3,4,1,2],[3,4,2,1],[4,1,2,3],[4,1,3,2],[4,2,1,3],[4,2,3,1],[4,3,1,2],[4,3,2,1]], \"Wrong\"\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_list([]) == []\nassert     combinations_list([1,2,3]) == [(1, 2, 3)]\nassert     combinations_list([1,2,3,4]) == [(1, 2, 3), (1, 2, 4), (1, 3, 2), (1, 3, 4), (1, 4, 2), (1, 4, 3), (2, 1, 3), (2, 1, 4), (2, 3, 1), (2, 3, 4), (2, 4, 1), (2, 4, 3), (3, 1, 2), (3, 1, 4), (3, 2, 1), (3, 2, 4), (3, 4, 1), (3, 4, 2), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 2, 1), (4, 2, 3), (4, 2, 4), (4, 3, 1), (4, 3, 2), (4, 3, 4)]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_list([1,2,3]) == [\n    [1],\n    [2],\n    [3],\n    [1, 2],\n    [1, 3],\n    [2, 3],\n    [1, 2, 3],\n    [3, 2, 1],\n    [1, 3, 2],\n    [2, 1, 3],\n    [1, 2, 3, 2],\n    [3, 2, 1, 2],\n    [1, 3, 2, 3],\n    [2, 1, 3, 2],\n    [1, 2, 3, 3],\n    [3, 1, 2, 1],\n    [3, 1, 2, 2],\n    [3, 1, 2, 3],\n    [3, 2, 1, 1],\n    [3, 2, 1, 2],\n    [3, 2, 1, 3],\n    [3, 2, 2, 1],\n    [3, 2, 2, 2],\n    [3, 2, 2, 3],\n    [3, 2, 3, 1],\n    [3, 2, 3, 2],\n    [3, 2, 3, 3],\n    [3, 3, 1, 1],\n    [3, 3, 1, 2],\n    [3, 3, 1, 3],\n    [3, 3, 2, 1],\n    [3, 3, 2, 2],\n    [3, 3, 2, 3],\n    [3, 3, 3, 1],\n    [3, 3, 3, 2],\n    [3, 3, 3, 3],\n    [1, 2, 3, 1],\n    [1, 2, 3, 2],\n    [1, 2, 3, 3],\n    [1, 3, 2, 1],\n    [1, 3, 2, 2],\n    [1, 3, 2, 3],\n    [1, 3, 3, 1],\n    [1, 3, 3, 2],\n    [1, 3, 3, 3],\n    [2, 1, 3, 1],\n    [2, 1, 3, 2],\n    [2, 1, 3, 3],\n    [2, 2, 1, 1],\n    [2, 2, 1, 2],\n    [2, 2, 1, 3],\n    [2, 2, 2, 1],\n    [2, 2, 2, 2],\n    [2, 2, 2, 3],\n    [2, 2, 3, 1],\n    [2, 2, 3, 2],\n    [2, 2, 3, 3],\n    [2, 3, 1, 1],\n    [2, 3, 1, 2],\n    [2, 3, 1, 3],\n    [2, 3, 2, 1],\n    [2, 3, 2, 2],\n    [2, 3, 2, 3],\n    [2, 3, 3, 1],\n    [2, 3, 3, 2],\n    [2, 3, 3, 3],\n    [3, 1, 2, 1],\n    [3, 1, 2, 2],\n    [3, 1, 2, 3],\n    [3, 2, 1, 1],\n    [3, 2, 1, 2],\n    [3, 2, 1, 3],\n    [3, 2, 2, 1],\n    [3, 2, 2, 2],\n    [3, 2, 2, 3],\n    [3, 2, 3, 1],\n    [3, 2, 3, 2],\n    [3, 2, 3, 3],\n    [3, 3, 1, 1],\n    [3, 3, 1, 2],\n    [3, 3, 1, 3],\n    [3, 3, 2, 1],\n    [3, 3, 2, 2],\n    [3, 3, 2, 3],\n    [3, 3, 3, 1],\n    [3, 3, 3, 2],\n    [3, 3, 3, 3]\n] == combinations_list([1,2,3,4,5])\nassert     combinations_list([1,2,3,4,5]) == [\n    [1,2,3,4],\n    [1,2,3,5],\n    [1,2,4,3],\n    [1,2,4,5],\n    [1,3,2,4],\n    [1,3,2,5],\n    [1,3,4,2],\n    [1,3,4,5],\n    [1,4,2,3],\n    [1,4,2,5],\n    [1,4,3,2],\n    [1,4,3,5],\n    [2,1,3,4],\n    [2,1,3,5],\n    [2,1,4,3],\n    [2,1,4,5],\n    [2,3,1,4],\n    [2,3,1,5],\n    [2,3,4,1],\n    [2,3,4,5],\n    [2,4,1,3],\n    [2,4,1,5],\n    [2,4,3,1],\n    [2,4,3,5],\n    [2,5,1,3],\n    [2,5,1,5],\n    [2,5,3,1],\n    [2,5,3,5],\n    [3,1,2,4],\n    [3,1,2,5],\n    [3,1,4,2],\n    [3,1,4,5],\n    [3,2,1,4],\n    [3,2,1,5],\n    [3,2,4,1],\n    [3,2,4,5],\n    [3,3,1,2],\n    [3,3,1,5],\n    [3,3,2,1],\n    [3,3,2,5],\n    [3,3,4,1],\n    [3,3,4,5],\n    [3,4,1,2],\n    [3,4,1,5],\n    [3,4,2,1],\n    [3,4,2,5],\n    [3,4,3,1],\n    [3,4,3,5],\n    [4,1,2,3],\n    [4,1,2,5],\n    [4,1,3,2],\n    [4,1,3,5],\n    [4,2,1,3],\n    [4,2,1,5],\n    [4,2,3,1],\n    [4,2,3,5],\n    [4,3,1,2],\n    [4,3,1,5],\n    [4,3,2,1],\n    [4,3,2,5],\n    [4,3,3,1],\n    [4,3,3,5],\n    [5,1,2,3],\n    [5,1,2,5],\n    [5,1,3,2],\n    [5,1,3,5],\n    [5,2,1,3],\n    [5,2,1,5],\n    [5,2,3,1],\n    [5,2,3,5],\n    [5,3,1,2],\n    [5,3,1,5],\n    [5,3,2,1],\n    [5,3,2,5],\n    [5,3,3,1],\n    [5,3,3,5]\n] == combinations_list([1,2,3,4,5,6])\nassert     combinations_list([1,2,3,4,5,6]) == [\n    [1,2,3,4,5,6],\n    [1,2,3,5,4,6],\n    [1,2,4,3,5,6],\n    [1,2,4,5,3,6],\n    [1,3,2,4,5,6],\n    [1,3,2,5,4,6],\n    [1,3,4,2,5,6],\n    [1,3,4,5,2,6],\n    [1,4,2,3,5,6],\n    [1,4,2,5,3,"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([]) == set()\nassert combinations_list([1]) == {(1, )}\nassert combinations_list([1, 2]) == {(1, 2), (2, 1)}\nassert combinations_list([1, 2, 3]) == {(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)}\nassert combinations_list([1, 1, 2]) == {(1, 1, 2), (1, 2, 1), (2, 1, 1)}\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_subarray_product([1,-2,3,-2,5,6]) == 6, 'invalid result'\nassert     max_subarray_product([-2,3,-2,5,6]) == 9, 'invalid result'\nassert     max_subarray_product([1,2,3,-2,5,6]) == 6, 'invalid result'\nassert     max_subarray_product([1,-2,3,4,5,-6]) == 24, 'invalid result'\nassert     max_subarray_product([-2,1,-3,4,-1,5,-6]) == 30, 'invalid result'\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([-2, -3, 4]) == 6\nassert     max_subarray_product([-2, -3]) == 0\nassert     max_subarray_product([]) == 0\nassert     max_subarray_product([-2, -3, -4]) == -8\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nWrite a function to find the largest product of non negative integers in an array.\n'''\n\ndef max_product(arr):\n    '''\n    Write a function to find the largest product of non negative integers in an array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_subarray_product([-2,-3,5,6,7]) == 6\nassert     max_subarray_product([-2,-5,3,4]) == -10\nassert     max_subarray_product([-1]) == -1\nassert     max_subarray_product([]) == 0\nassert     max_subarray_product([-1, -2]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_subarray_product([-1,-2,-3,-4]) == -1\nassert max_subarray_product([1,-2,-3,4]) == 24\nassert max_subarray_product([-1,-2,0,4]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6\nassert     max_subarray_product([-2,0,-1]) == 0\nassert     max_subarray_product([-2,6,-3,4,-1,8,-9]) == 96\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nCode Challenge\n  Name: \n    Intersection of Two Arrays\n  Filename: \n    Intersection.py\n  Problem Statement:\n    Write a program that prints the common elements in the array \n    provided by the user. Common elements are those that occur \n    once, regardless of their order.\n'''"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_value({1: 1, 2: 2, 3: 1, 4: 1}, 4), 'check_value should return True if all values are same'\nassert     check_value({1: 1, 2: 2, 3: 1, 4: 1}, 3), 'check_value should return False if some values are same'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not check_value({\"key1\":1, \"key2\":2, \"key3\":3}, \"key1\") == 1, \"1st value should be 2nd\"\nassert not check_value({\"key1\":1, \"key2\":2, \"key3\":3}, \"key2\") == 2, \"2nd value should be 1st\"\nassert not check_value({\"key1\":1, \"key2\":2, \"key3\":3}, \"key3\") == 3, \"3rd value should be 1st\"\nassert check_value({\"key1\":1, \"key2\":2, \"key3\":3}, \"key3\") == 3, \"3rd value should be 2nd\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         check_value({1: 1, 2: 1, 3: 1}, 1) == True, \"Error\"\nassert         check_value({1: 1, 2: 1, 3: 1}, 2) == False, \"Error\"\nassert         check_value({1: 1, 2: 1, 3: 1}, 3) == True, \"Error\"\nassert         check_value({1: 2, 2: 1, 3: 1}, 1) == False, \"Error\"\nassert         check_value({1: 2, 2: 1, 3: 1}, 2) == True, \"Error\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_value({\"a\":1, \"b\":2, \"c\":3}, 3) == False, \"check_value failed\"\nassert check_value({\"a\":1, \"b\":2, \"c\":3}, 3) == True, \"check_value failed\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({'a': 1, 'b': 2}, 1) == True, \\\n            '1st example - Wrong result'\nassert     check_value({'a': 1, 'b': 2}, 2) == False, \\\n            '2nd example - Wrong result'\nassert     check_value({'a': 1, 'b': 2}, 3) == True, \\\n            '3rd example - Wrong result'\nassert     check_value({'a': 1, 'b': 2}, 'a') == True, \\\n            '4th example - Wrong result'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({1:1, 2:2}, 1) == True\nassert     check_value({1:1, 2:2}, 1) == True\nassert     check_value({1:1, 2:2}, 2) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({'a':1,'b':2,'c':3}, 3) == True, \"Checking for correct result\"\nassert     check_value({'a':1,'b':2,'c':3}, 1) == False, \"Checking for incorrect result\"\n\ndef check_value_2(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_value({\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1}, 2) is True\nassert     check_value({\"a\": 1, \"b\": 1, \"c\": 2, \"d\": 1, \"e\": 1}, 2) is False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_value({\"apple\":\"yes\",\"banana\":\"no\",\"orange\":\"yes\"}, 3) == False, \"Result should be False\"\nassert     check_value({\"apple\":\"yes\",\"banana\":\"yes\",\"orange\":\"no\"}, 3) == True, \"Result should be True\"\nassert     check_value({\"apple\":\"yes\",\"banana\":\"yes\",\"orange\":\"yes\"}, 0) == False, \"Result should be False\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'a': 1, 'b': 2}) == {'a': 1, 'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     drop_empty({\"a\": \"A\", \"b\": \"B\"}) == {\"a\": \"A\", \"b\": \"B\"}\nassert     drop_empty({\"a\": \"\", \"b\": \"B\"}) == {\"a\": \"\", \"b\": \"B\"}\nassert     drop_empty({\"a\": \"A\", \"\": \"B\"}) == {\"a\": \"A\", \"\": \"B\"}\nassert     drop_empty({\"a\": \"A\", \"b\": \"\"}) == {\"a\": \"A\", \"b\": \"\"}\nassert     drop_empty({\"a\": \"A\", \"b\": \"B\", \"c\": \"\"}) == {\"a\": \"A\", \"b\": \"B\", \"c\": \"\"}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     drop_empty({\"a\":1,\"b\":1,\"c\":1,\"d\":1,\"e\":1}) == {\"a\":1,\"b\":1,\"c\":1,\"d\":1}\nassert     drop_empty({\"a\":1,\"b\":1,\"c\":1,\"d\":1,\"e\":1,\"\":1}) == {\"a\":1,\"b\":1,\"c\":1,\"d\":1,\"e\":1}\nassert     drop_empty({\"a\":1,\"b\":1,\"c\":1,\"d\":1,\"e\":1,\"\":2}) == {\"a\":1,\"b\":1,\"c\":1,\"d\":1,\"e\":1}\n\ndef drop_empty_with_key(dict1, key):\n    '''\n    Write a function to drop empty items from a given dictionary where the key and value is used for filtering\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     drop_empty({\"A\":1, \"B\":2}) == {\"A\":1, \"B\":2}\nassert     drop_empty({\"A\":1, \"B\":2, \"C\":3}) == {\"A\":1, \"B\":2, \"C\":3}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({\"s\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\"}) == {\"s\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\"}\nassert    drop_empty({\"c\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\"}) == {\"c\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\"}\nassert    drop_empty({\"c\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\",\"o\":\"o\"}) == {\"c\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\"}\nassert    drop_empty({\"c\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\",\"o\":\"o\",\"p\":\"p\"}) == {\"c\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\",\"o\":\"o\",\"p\":\"p\"}\nassert    drop_empty({\"c\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\",\"o\":\"o\",\"p\":\"p\",\"q\":\"q\"}) == {\"c\":\"r\",\"a\":\"c\",\"b\":\"d\",\"f\":\"f\",\"h\":\"g\",\"i\":\"i\",\"o\":\"o\",\"p\":\"p\"}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({\"one\":1, \"two\":2, \"three\":3}) == {\"two\":2, \"three\":3}\nassert     drop_empty({\"one\":1, \"two\":2, \"three\":3, \"four\":4}) == {\"two\":2, \"four\":4}"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'key1': 'value1'}) == {'key1': 'value1'}\nassert     drop_empty({'key1': 'value1', 'key2': 'value2'}) == {'key1': 'value1'}\nassert     drop_empty({'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}) == {'key2': 'value2'}\nassert     drop_empty({'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}) == {'key2': 'value2', 'key3': 'value3'}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nTask\nGiven a dictionary, remove the key value pair with a given key from the dictionary.\n\nInput Format\nFirst line contains number of testcases.\nSecond line of each testcase contains the key and the key value pair.\n\nOutput Format\nPrint the updated dictionary after removing the corresponding key value pair.\n\nConstraints\n1 <= t <= 100\n1 <= size of dictionary <= 1000\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmax_product([2,3,4,5,1,6]) == 60\nassert max_product([1,2,3,4,5]) == 0\nassert max_product([1,2,3]) == 6\nassert max_product([1]) == 1\nassert max_product([1,2]) == 2\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product([-1, 1, 0, 10]) == 10\nassert     max_product([-1, 1, -1]) == -1\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    pass\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product([1, 2, 3, -2]) == 6 # all positive\nassert     max_product([1, -2, -3]) == 6 # only negative numbers\nassert     max_product([-3, -2]) == 3 # only negative numbers\nassert     max_product([1, 2, -2, -3]) == 6 # max product = (1*2*2)*(-2*-3) = -2*-3 = -12\nassert     max_product([-1,-2,-3]) == -6 # max product = -(1*2*3) = -12\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    max_product([-1, 3, -5, 5]) == 15\n    max_product([-1, -3, 5, -5]) == 0\n    max_product([1, 3, -5, 5]) == 15\n    max_product([-1, -3, -5, 5]) == -6\n    max_product([-1, -3, 5]) == 5\n    max_product([-1, -3, 1, 1]) == 4\n    max_product([1]) == 1\n    max_product([]) == 1\n    max_product([-1, 3, -5, 5]) == 15\n    max_product([-1, -3, 5, -5]) == 0\n    max_product([1, 3, -5, 5]) == 15\n    max_product([-1, -3, 5, -5]) == -6\n    max_product([-1, -3, 1, 1]) == 4\n    max_product([1]) == 1\n    max_product([]) == 1\n    max_product([-1, 3, -5, 5, 1, 1]) == 20\n    max_product([-1, -3, 5, -5, 1, 1]) == 0\n    max_product([1, 3, -5, 5, 1, 1]) == 20\n    max_product([-1, -3, 5, -5, 1, 1]) == -6\n    max_product([-1, 3, -5, 5, 1, 1]) == 20\n    max_product([-1, 3, -5, 5, 1]) == 5\n    max_product([1, 3, -5, 5, 1]) == 20\n    max_product([-1, 3, -5, 5, 1]) == -6\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5]) == 5\n    max_product([1, 3, -5, 5, 1]) == 5\n    max_product([-1, 3, -5, 5, 1]) == 0\n    max_product([-1, 3, -5, 5]) == 5\n    max_product([1, 3, "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product([2,3,-2,4]) == 6\nassert     max_product([1,-2,-3,4]) == 24\nassert     max_product([1,-2,3,4,5]) == 120\n\ndef max_product_2(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an decreasing subsequence of that array.\n    '''\n    pass\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\nmax_product:\")\nprint(max_product([1,2,3,4,5,6,7,8]))\nprint(max_product([1,2,3,4,5,6]))\nprint(max_product([1,2,3,4,5,6,7,8,9]))\nprint(max_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(max_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n\ndef max_product_recursive(arr, n):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    pass\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product([1, 2, 3, 4]) == 24\nassert     max_product([4, 3, 2, 1]) == 24\nassert     max_product([2, 3, 4, 1]) == 24\nassert     max_product([3, 4, 1, 2]) == 24\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\narr = [8, 1, 3, 2, 6, 5]\nprint (max_product(arr))"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nadd_pairwise((1, 2, 3)) == (1, 2, 4)\nadd_pairwise((-1, 1, -1)) == (-2, 0, -2)\nadd_pairwise((-2, -4, 1)) == (-3, -6, -3)"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_pairwise((2,3,4,1)) == (5,5,6,2), \"test failed\"\n\ndef add_pairwise_iter(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_pairwise((1, 2, 3, 4, 5)) == (1, 3, 6, 10, 15), \\\n    \"Test 1: Incorrect result\"\nassert     add_pairwise((-1, -2, -3, -4, -5)) == (-1, -3, -6, -9, -12), \\\n    \"Test 2: Incorrect result\"\nassert     add_pairwise((3, 4, 5, 6, 7)) == (3, 5, 8, 11, 14), \\\n    \"Test 3: Incorrect result\"\nassert     add_pairwise((1, 3, 5, 7, 9)) == (2, 4, 6, 8, 10), \\\n    \"Test 4: Incorrect result\"\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise((10, 20, 30)) == (30, 40, 50)\nassert     add_pairwise((10, 20, 30)) == (60, 60, 60)\nassert     add_pairwise((10, 20, 30)) == (90, 100, 110)\nassert     add_pairwise((10, 20, 30)) == (30, 40, 50)\nassert     add_pairwise((1, 2, 3, 4)) == (3, 4, 5, 6)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_pairwise((1,2,3,4,5)) == ((1+2), (2+3), (3+4), (4+5), (5+1))\nassert     add_pairwise((4,5,6,7,8)) == ((5+6), (6+7), (7+8), (8+4), (4+5))\nassert     add_pairwise((1,2,3)) == ((1+2), (2+3), (3+1))\nassert     add_pairwise((1,2)) == ((1+2), (2+1))\nassert     add_pairwise((1,)) == ((1+1),)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_pairwise((1,2,3)) == (1,2,4)\nassert     add_pairwise((3,4,5)) == (4,6,7)\nassert     add_pairwise((4,5,6)) == (5,7,9)\nassert     add_pairwise((4,6,8)) == (6,10,12)\nassert     add_pairwise((4,6,8,10)) == (8,12,14,16)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef pair_sum(arr, target):\n    '''\n    Given an array of integers and a target value, return indices of the two numbers such that they add up to the target.\n    '''\n    # define the two variables\n    l = len(arr)\n    d = {n: i for i, n in enumerate(arr)}\n    # use d to find two indices and return them\n    for i, n in enumerate(arr):\n        if target-n in d:\n            if i!=d[target-n]:\n                return (i, d[target-n])\n    return None\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Pass\" if ((2,3) == add_pairwise((1,2))) else \"Fail\")\nassert \nprint(\"Pass\" if ((2,3) == add_pairwise((-1,2))) else \"Fail\")\nassert\nprint(\"Pass\" if ((3,5) == add_pairwise((2,3))) else \"Fail\")\nassert\nprint(\"Pass\" if ((3,5) == add_pairwise((3,4))) else \"Fail\")\nassert\nprint(\"Pass\" if ((1,2,3) == add_pairwise((2,3))) else \"Fail\")\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_pairwise((2, 4, 6, 8)) == (2, 4, 6, 10)\nassert     add_pairwise((2, 5, 8, 9)) == (2, 7, 8, 10)\nassert     add_pairwise((1, 4, 6, 9)) == (1, 5, 7, 10)\nassert     add_pairwise((8, 2, 4, 6)) == (8, 2, 5, 7)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise( (2,3,4) ) == (2,4,6) \nassert     add_pairwise( (1,2,3) ) == (2,3,4)\nassert     add_pairwise( (3,2,1) ) == (4,3,2)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder(\n            [1,2,3,4,5,6,7,8,9], 10\n            ) == 45\nassert     find_remainder(\n            [1,2,3,4,5,6,7,8,9], 10\n            ) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_remainder([1,2,3,4], 5) == 1\n    find_remainder([2,3,4,5], 5) == 10\n    find_remainder([-1,-2,-3,-4], 5) == -1\n    find_remainder([1,2,3,4,5], 5) == 2"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_remainder(['a', 'b', 'c'], 4) == 'abcd'\nassert     find_remainder(['a', 'b', 'c'], 3) == 'abc'\nassert     find_remainder(['a', 'b', 'c'], 2) == 'abc'\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nfind_remainder([-2,5,6,-3,1], 7)\nfind_remainder([-2,5,6,-3,1], 7)"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_remainder([5, 6, 2, 8], 3) == 6\nassert find_remainder([1, 2, 3, 4], 3) == 2\nassert find_remainder([2, 2, 2, 2], 3) == 0\nassert find_remainder([1, 2, 3, 4], 0) == 0"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_remainder2(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_remainder(arr, 2) == 1, 'Function does not return the correct result for wrong input'\nassert find_remainder(arr, 3) == 2, 'Function does not return the correct result for wrong input'\nassert find_remainder(arr, 10) == 7, 'Function does not return the correct result for wrong input'\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([1,2,3,4], 10) == 20\nassert     find_remainder([1,2,3,4], 8) == 60\nassert     find_remainder([5,6,7,8], 5) == 4\nassert     find_remainder([4,5,6,7], 10) == 120\nassert     find_remainder([1,2,3,4], 10) == 10\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_Consecutive([]) == True,'should return False for empty list'\nassert     check_Consecutive([1, 2, 3, 4, 5, 6]) == True,'should return True for non-consecutive list'\nassert     check_Consecutive([1, 1, 1, 1, 1, 1, 1]) == True,'should return True for consecutive list'\nassert     check_Consecutive([1, 1, 1, 1, 1, 1, 1, 2]) == False,'should return False for consecutive list'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([]) == False, \"List is empty\"\nassert     check_Consecutive([3]) == False, \"List contains one element\"\nassert     check_Consecutive([1,2,3]) == False, \"List contains consecutive numbers\"\nassert     check_Consecutive([1,2,3,4,5]) == False, \"List contains consecutive numbers\"\nassert     check_Consecutive([3,4,5,6]) == False, \"List contains consecutive numbers\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    check_Consecutive([1, 3, 6, 8, 8])\n    == True\n    \n    check_Consecutive([1, 2, 2])\n    == False\n    \n    check_Consecutive([1, 2, 5, 7, 8])\n    == False\n    \n    check_Consecutive([-1, -2, -3, -4, -5])\n    == True\n    \n    check_Consecutive([-1, -2, -2, -2])\n    == False\n    \n    check_Consecutive([1, 2, 3, 4, 4])\n    == True\n    \n    check_Consecutive([1, 2, 3, 4, 5, 5])\n    == True\n    \n    check_Consecutive([-1, -2, -3, -4, -5, -6])\n    == False\n    \n    check_Consecutive([-1, -2, -3, -4, -5, -6, -6])\n    == False\n\n\n\n\n\n'''\n    2) Write a python function to check whether the given list contains a consecutive number of a given length.\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([1,2,3,4,5,6,7,8,9,10]) == True, \"All numbers are consecutive\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9,10,10]) == False, \"All numbers are not consecutive\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True, \"All numbers are consecutive\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == True, \"All numbers are consecutive\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,78"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True, \"The list contains consecutive numbers\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == False, \"The list doesn't contain consecutive numbers\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]) == False, \"The list doesn't contain consecutive numbers\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False, \"The list doesn't contain consecutive numbers\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False, \"The list doesn't contain consecutive numbers\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True, \"Wrong output\"\nassert     check_Consecutive([1, 2, 2, 3, 5]) == True, \"Wrong output\"\nassert     check_Consecutive([1, 1, 1, 1, 1]) == False, \"Wrong output\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6]) == False, \"Wrong output\"\nassert     check_Consecutive([0, 1, 1, 2, 3, 4]) == False, \"Wrong output\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True, \"Check failed\"\nassert     check_Consecutive([1,2,3,4,3]) == False, \"Check failed\"\nassert     check_Consecutive([1,2,3,4,5,6]) == True, \"Check failed\"\nassert     check_Consecutive([1,2,3,4,5,6,7]) == False, \"Check failed\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8]) == False, \"Check failed\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_Consecutive([2,2,4,4,6,6,8,8]) == True\nassert     check_Consecutive([2,2,4,4,5,5,6,6]) == False\nassert     check_Consecutive([2,2,4,4,6,6,8,8,7,7,7,7]) == False\nassert     check_Consecutive([2,2,4,4,6,6,8,8,7,7,7,7,7,7,7,7,7]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_Consecutive([1,2,3,4,5,6,7,8]) == True, \\\n            'Expected True but got False for input : ['1','2','3','4','5','6','7','8]'\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9]) == False, \\\n            'Expected False but got True for input : [1,2,3,4,5,6,7,8,9]'\nassert     check_Consecutive([1,1,2,3,4,5,6,7,8]) == True, \\\n            'Expected True but got False for input : [1,1,2,3,4,5,6,7,8]'\n\ndef check_Even(l): \n    '''\n    Write a python function to check whether the given list contains even numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([(1, 2), (2, 4), (1, 2), (3, 6)], [(1, 2), (1, 2), (2, 4), (3, 6)]) == [(1, 2), (2, 4)]\nassert     tuple_intersection([(1, 2), (1, 2)], [(1, 2), (1, 2)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (1, 2)], [(1, 2), (1, 2), (2, 4)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (1, 2)], [(1, 2), (1, 2), (2, 4), (1, 3)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (1, 2)], [(2, 4), (1, 3)]) == [(1, 2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection([(2, 3), (3, 5), (7, 8), (5, 7)], [(2, 3), (5, 7)]) == [(2, 3), (5, 7)]\nassert     tuple_intersection([(2, 3), (3, 5), (7, 8), (5, 7)], [(2, 3), (3, 5)]) == [(2, 3)]\nassert     tuple_intersection([(2, 3), (3, 5), (7, 8), (5, 7)], [(2, 3), (3, 5), (7, 8)]) == []\nassert tuple_intersection([(2, 3), (3, 5), (7, 8), (5, 7)], [(2, 3), (7, 8), (3, 5)]) == [(2, 3)]\nassert tuple_intersection([(2, 3), (3, 5), (7, 8), (5, 7)], [(2, 3), (7, 8), (3, 5)]) == [(2, 3)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection(\n                            (1, 3, 4, 5), \n                            (2, 3, 4)\n                        ) == (3, 4)\nassert     tuple_intersection(\n                            (1, 3, 4, 5), \n                            (4, 3, 5)\n                        ) == (3, 4)\nassert     tuple_intersection(\n                            (1, 3, 4, 5), \n                            (4, 5, 3)\n                        ) == (3, 4)\nassert     tuple_intersection(\n                            (1, 3, 4, 5), \n                            (3, 4, 5)\n                        ) == (3, 4)\nassert     tuple_intersection(\n                            (1, 3, 4, 5), \n                            (3, 5, 4)\n                        ) == (3, 4)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection([(1,2), (2,1)], [(2,1), (3,2), (4,3)]) == [(2,1)]\nassert     tuple_intersection([(1,2), (2,1), (4,3)], [(2,1), (3,2)]) == [(2,1)]\nassert tuple_intersection([(1,2), (2,1), (4,3)], [(2,1), (3,2), (2,3)]) == [(2,1), (2,3)]\nassert tuple_intersection([(1,2), (2,1), (4,3)], [(2,1), (3,2), (2,3), (3,2)]) == [(2,1), (2,3)]\nassert tuple_intersection([(1,2), (2,1), (4,3)], [(2,1), (3,2), (2,3), (3,2), (2,4)]) == [(2,1), (2,4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection([[], (0, )], []) == set()\nassert     tuple_intersection([[], (0, )], [0, ]) == set()\nassert     tuple_intersection([[], (0, )], [1, ]) == set()\nassert     tuple_intersection([(0, ), (0, )], []) == set()\nassert     tuple_intersection([(0, ), (0, )], [0, ]) == set()\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection([(1, 1), (2, 2), (3, 3)], [(1, 1), (2, 2), (3, 3)]) == [(1, 1), (2, 2), (3, 3)]\nassert     tuple_intersection([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], [(1, 1), (2, 2), (3, 3)]) == []\nassert     tuple_intersection([(1, 1), (2, 2), (3, 3)], [(2, 2), (4, 4), (5, 5)]) == []\nassert tuple_intersection([(1, 1), (2, 2), (3, 3)], [(1, 1), (3, 3)]) == [(1, 1), (3, 3)]\nassert tuple_intersection([(1, 1), (2, 2), (3, 3)], [(1, 1), (4, 4)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([(1, 2), (3, 4)], [(1, 2), (3, 4)]) == [(1, 2)]\nassert tuple_intersection([(1, 2), (3, 4)], [(1, 2), (1, 2)]) == [(1, 2)]\nassert tuple_intersection([(1, 2), (3, 4)], [(1, 2), (3, 4)]) == [(1, 2)]\nassert tuple_intersection([(1, 2), (3, 4)], [(1, 2), (2, 4)]) == [(1, 2)]\nassert tuple_intersection([(1, 2), (3, 4)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection([1,1,1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6], [6,5,4,3,2,1,1,2,3,4,5,6]) == [1,2,3,4,5]\nassert     tuple_intersection([1,1,1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6], [6,5,4,3,2,1,2,3,4,5,6]) == []\nassert     tuple_intersection([1,1,1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6], [1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     tuple_intersection([1,1,1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6], [1,2,3,4,5,6,7,8,9]) == []\nassert     tuple_intersection([], []) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection([(1,2), (1,3), (1,4)], [(1,2), (3,4)]) == [(1,2)]\nassert tuple_intersection([(1,2), (3,4)], [(1,2), (3,4)]) == []\nassert tuple_intersection([(1,2), (1,3)], [(1,2), (2,3)]) == [(1,2)]\nassert tuple_intersection([(1,2), (1,3)], [(1,2), (3,4)]) == []\nassert tuple_intersection([(1,2), (1,3), (1,4)], [(1,2), (3,4)]) == [(1,2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('\\n')\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_char('hello','l','k') == 'helloK', \"Wrong\"\nassert     replace_char('hi','h','H') == 'Hih', \"Wrong\"\nassert     replace_char('yes','y','Y') == 'YesY', \"Wrong\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_char(\"ABABABABABABABA\",'A','B') == \"BBABBABBABBABA\"\nassert     replace_char(\"ABABABABABABABA\",'A','B') == \"BBABABABBABABA\"\nassert     replace_char(\"ABABABABABABABA\",'A','B') == \"BBABABABBABABA\"\nassert     replace_char(\"ABABABABABABABA\",'A','B') == \"BBABABABBABABA\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_char(\"world\",\"o\",\"a\") == \"world\"\nassert     replace_char(\"world\",\"o\",\"a\") == \"ad\"\nassert     replace_char(\"world\",\"o\",\"a\") == \"ae\"\nassert     replace_char(\"world\",\"o\",\"a\") == \"ad\"\nassert     replace_char(\"world\",\"o\",\"a\") == \"d\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_char('a','a','b') == 'b'\nassert     replace_char('a','b','a') == 'b'\nassert     replace_char('', 'a', 'b') == 'b'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_char('a','b','c') == 'c', \"replace_char(\\\"a\\\", \\\"b\\\", \\\"c\\\") failed!\"\nassert     replace_char('a','b','') == 'a', \"replace_char(\\\"a\\\", \\\"b\\\", ) failed!\"\nassert     replace_char('a', 'b', 'c') == 'c', \"replace_char(\\\"a\\\", \\\"b\\\", \\\"c\\\") failed!\"\nassert     replace_char(None, 'b', 'c') == 'c', \"replace_char(None, \\\"b\\\", \\\"c\\\") failed!\"\nassert     replace_char(None, None, None) == None, \"replace_char(None, None, None) failed!\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert replace_char('abcd', 'a', '1') == '1bcde'\nassert replace_char('abcd', 'b', '2') == '2cde'\nassert replace_char('abcd', 'd', '3') == '3cde'\nassert replace_char('abcd', 'e', '3') == '3bcde'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_char('kitten', 'a','s') == 'kess','replace_char failed'\nassert     replace_char('kitten', 'k', 'z') == 'itzen','replace_char failed'\nassert     replace_char('kitten', 't', 'b') == 'biten','replace_char failed'\nassert     replace_char('albatros', 'l', 'b') == 'abros','replace_char failed'\nassert     replace_char('sunday', 'h', 'b') == 'day','replace_char failed'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_char(\"bac\", \"a\", \"b\") == \"bac\"\nassert     replace_char(\"a\", \"a\", \"a\") == \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"[+] test case 1:\")\ndict1 = {1:2, 3:5, 5:6, 2:2, 4:4, 6:5, 7:8}\nprint(\"dict1 = \" + str(dict1))\nsort_counter(dict1)\nprint(\"sorted_dict1 = \" + str(dict1))\n\nassert sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'c': 3, 'b': 2, 'a': 1}\n\nassert sort_counter({'c': 1, 'b': 2, 'a': 3}) == {'a': 3, 'b': 2, 'c': 1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({'a': 1, 'c': 3, 'b': 2}) == {'c': 3, 'a': 1, 'b': 2}\n\nassert     sort_counter({'c': 3, 'a': 1, 'b': 2}) == {'c': 3, 'a': 1, 'b': 2}\n\nassert     sort_counter({'c': 3, 'b': 2, 'a': 1}) == {'c': 3, 'a': 1, 'b': 2}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == \\\n        {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\ndef max_heap_build(array):\n    '''\n    Write a function to build a max heap from a given array.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({'a':3, 'b':2, 'c':1}) == ['c','a','b']\nassert     sort_counter({'a':3, 'b':2, 'c':1, 'd':0, 'e':-1}) == ['e','d','a','b','c']\n\ndef insert_sort(list1):\n    '''\n    Write a function to sort a list of elements in non-decreasing order by comparing the element to it's predecessor.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({1: 'a', 2: 'b', 3: 'c'}) ==  [2, 3, 1], \"Wrong answer\"\nassert     sort_counter({1: 'c', 2: 'b', 3: 'a'}) ==  [3, 2, 1], \"Wrong answer\"\nassert     sort_counter({1: 'a', 2: 'b', 3: 'c'}) ==  [1, 2, 3], \"Wrong answer\"\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsort_counter({'a': 2, 'b': 1, 'c': 4}) == ['a', 'b', 'c']\nassert \nsort_counter({'a': 2, 'c': 4, 'b': 1}) == ['a', 'b', 'c']\nassert \nsort_counter({'c': 4, 'a': 2, 'b': 1}) == ['a', 'b', 'c']\nassert \nsort_counter({'a': 2, 'b': 1, 'c': 4}) == ['a', 'b', 'c']\nassert \nsort_counter({'a': 2, 'b': 1, 'c': 4, 'd': 3}) == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({\"Alice\": 1, \"Bob\": 3, \"Carol\": 4}) == {\"Alice\": 1, \"Carol\": 4, \"Bob\": 3}\nassert     sort_counter({\"Alice\": 1, \"Bob\": 1, \"Carol\": 4}) == {\"Alice\": 1, \"Carol\": 4, \"Bob\": 1}\nassert     sort_counter({\"Bob\": 2, \"Carol\": 4, \"Alice\": 1, \"Bob\": 3}) == {\"Alice\": 1, \"Bob\": 2, \"Carol\": 4}\nassert     sort_counter({\"Alice\": 1, \"Bob\": 1, \"Carol\": 4, \"Alice\": 2}) == {\"Alice\": 2, \"Bob\": 1, \"Carol\": 4}"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({'a':2, 'b':1, 'c':1}) == {'b': 1, 'a': 2, 'c': 1}, 'failed'\nassert sort_counter({'a':2, 'b':1, 'c':1}) == {'c': 1, 'a': 2, 'b': 1}, 'failed'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n        if nums[i] > largest:\n            largest = nums[i]\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_sum([10, 8, 20, 3, 2, 1]) == 37, 'Big sum'\nassert     big_sum([10, -3, 20, -20, -3, 2, 1]) == 19, 'Big sum'\nassert     big_sum([-10, -8, -20, -3, -2, -1]) == -27, 'Big sum'\nassert     big_sum([1000000, -1000000, -1000000, 1000000, 1]) == 1000000, 'Big sum'\nprint('  Test passed')\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nbig_sum([10,1,-2,3,-4]) == 6, \"Test Failed\"\nassert big_sum([-4,-2,10,1,-3]) == 7, \"Test Failed\"\nassert big_sum([10,-1,-2,3,-4]) == -1, \"Test Failed\"\nassert big_sum([-4,-2,10,-1,-3]) == -1, \"Test Failed\"\nassert big_sum([-4,3,10,-1,-3]) == 10, \"Test Failed\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_sum([1, 2, 3, 4]) == 6, 'Expected: 6, got: %s' % (big_sum([1, 2, 3, 4]))\nassert     big_sum([]) == 0, 'Expected: 0, got: %s' % (big_sum([1, 2, 3, 4]))\nassert     big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 15, 'Expected: 15, got: %s' % (big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\ndef big_sum_v2(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef big_sum_2(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_sum([1,2,3,4,5,6,7,8,9]) == 45, 'Incorrect Answer'\nassert     big_sum([0,0,0,0,0,0,0,0,0]) == 0, 'Incorrect Answer'\nassert     big_sum([1,2]) == 3, 'Incorrect Answer'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([-4, -8, -5, -8, -3, -5, -7, -2, -9, -9, -8, -6, -7, -3, -6, -1, -2, -4, -7]) == 0\nassert     big_sum([-9, -8, -6, -4, -2, -5, -7, -3, -1, -2, -6, -7, -3, -9, -8, -5, -4, -9, -7]) == -1\nassert     big_sum([-2, -4, -8, -6, -9, -5, -7, -2, -4, -3, -5, -7, -2, -5, -4, -8, -6, -9, -7]) == -1\nassert     big_sum([-2, -4, -8, -6, -9, -5, -7, -2, -4, -3, -5, -7, -2, -5, -4, -8, -6, -9, -7]) == -1\nassert     big_sum([-9, -8, -6, -4, -2, -5, -7, -3, -1, -2, -6, -7, -3, -9, -8, -5, -4, -9, -7]) == -1\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0, \"Should be 0\"\nassert     big_sum([-2, -3, -4, -5, -6, -7, -8, -9, -10, -1]) == -15, \"Should be -15\"\nassert     big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55, \"Should be 55\"\nassert     big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 60, \"Should be 60\"\nassert     big_sum([1]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_sum([10, -10, 20]) == 20, 'incorrect'\nassert big_sum([1,2,3]) == 6, 'incorrect'\nassert big_sum([10,-10,1]) == 11, 'incorrect'\nassert big_sum([-10,-20,-30,-40,-50]) == -30, 'incorrect'\nassert big_sum([5,5,5,5,5,5]) == 15, 'incorrect'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower('Hi there') == 'hi there', 'Should be true'\nassert     is_lower('Hi there') == 'hi there', 'Should be true'\nassert     is_lower('hello world') == 'hello world', 'Should be true'\nassert     is_lower('Hello World') == 'hello world', 'Should be true'\nassert     is_lower('Hi, there') == 'hi, there', 'Should be true'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_lower_dcase(string):\n    '''\n    Write a python function to convert the given string to lower case\n    with dashes as a delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_lower(\"abcdefg\")     == True \nassert     is_lower(\"ABCDEFGHI\")     == False \nassert     is_lower(\"abcdefghijklmnopqrstuvwxyz\")     == False \nassert     is_lower(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")     == True \nassert     is_lower(\"abcdefghijklmnopqrstuvwxyz0123456789_\")     == False \n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_lower('Helloworld') == 'hello world'\nassert     is_lower('hello') == 'hello'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_lower('Hello') == 'hello'\nassert     is_lower('HELo') == 'hello'\nassert     is_lower('HELLO') == 'hello'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_lower('xyz') == 'xyz', 'Please write a function that converts the given string to lower case.'\n\nassert is_lower('XYZ') == 'xyz', 'Please write a function that converts the given string to lower case.'\n\n\n\ndef is_lower_v2(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_lower('A') == 'a', 'Case sensitive'\nassert     is_lower('a') == 'a', 'Case sensitive'\nassert     is_lower('aBc') == 'abc', 'Case sensitive'\nassert     is_lower('ABC') == 'abc', 'Case sensitive'\nassert     is_lower('ABCD') == 'abc', 'Case sensitive'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower('string') == False\nassert     is_lower('') == False\nassert     is_lower(' ') == False\nassert     is_lower('sTrInG') == False\nassert     is_lower('string ') == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower('A') == 'a', 'first test case failed'\nassert     is_lower('B') == 'b','second test case failed'\nassert     is_lower('a') == 'a', 'third test case failed'\nassert     is_lower('b') == 'b', 'fourth test case failed'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_lowercase('i') == ''\nassert     remove_lowercase('I') == ''\nassert     remove_lowercase('Hi') == 'Hi'\nassert     remove_lowercase('hI') == 'hI'\nassert     remove_lowercase('HiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiH"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase(\"Hello World\") == \"hello world\"\nassert     remove_lowercase(\"hello\") == \"hello\"\nassert     remove_lowercase(\"Hello \") == \"Hello\"\nassert     remove_lowercase(\"helloWorld\") == \"hello world\"\nassert     remove_lowercase(\"helloWorld \") == \"hello world\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase(\"hello world\") == \"hello world\"\nassert     remove_lowercase(\"hello WORLD\") == \"hello world\"\nassert     remove_lowercase(\"world\") == \"world\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(None) == None\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_lowercase('') == ''\nassert     remove_lowercase('a') == ''\nassert     remove_lowercase('A') == ''\nassert     remove_lowercase('ab') == 'ab'\nassert     remove_lowercase('abca') == 'abca'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert remove_lowercase(\"tamilnadu\") == \"tamilnu\"\nassert remove_lowercase(\"kannaviyalnu\") == \"kannaviyalnu\"\nassert remove_lowercase(\"kanna\") == \"kannan\"\n\ndef is_unique_string(str1):\n    '''\n    Write a function to check if a given string contains only unique characters.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(remove_lowercase('abc'))\nprint(remove_lowercase('Coding'))\nprint(remove_lowercase('coding'))\n\n\ndef find_first_index(str1, str2):\n    '''\n    Write a function to find the first occurrence of a substring in a given string\n    '''\n    pass\n\nassert \nprint(find_first_index('abc', 'cde'))\nprint(find_first_index('abc', 'cde'))\nprint(find_first_index('abc', 'cde'))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_lowercase(\"a123\") == \"a123\"\nassert     remove_lowercase(\"12a\") == \"12a\"\nassert     remove_lowercase(\"12A\") == \"12A\"\nassert     remove_lowercase(\"12\") == \"12\"\nassert     remove_lowercase(\"AB\") == \"AB\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert remove_lowercase(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert remove_lowercase(\"abcDefghijklmnopqrstuvwxyz\") == \"abcDefghijklmnopqrstuvwxyz\"\nassert remove_lowercase(\"abcdefghijklmnopqrstuvwxyzabc\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert remove_lowercase(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_lowercase('Sugar') == 'S'\nassert remove_lowercase('sugar') =='s'\nassert remove_lowercase('Sugaru') == 'Sugar'\nassert remove_lowercase('sugar') =='s'\nassert remove_lowercase('sugar') =='s'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_Digit(5) == 5, \"first_Digit is not working\"\nassert     first_Digit(10) == 1, \"first_Digit is not working\"\nassert     first_Digit(11) == 1, \"first_Digit is not working\"\nassert     first_Digit(100) == 1, \"first_Digit is not working\"\nassert     first_Digit(10011) == 1, \"first_Digit is not working\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_Digit(99) == 0\nassert     first_Digit(255) == 2\nassert     first_Digit(0) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_Digit(123456) == 6\nassert     first_Digit(33) == 3\nassert     first_Digit(15) == 1\nassert     first_Digit(35) == 5\nassert     first_Digit(60) == 6\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert first_Digit(1234567) == 1\nassert first_Digit(123) == 1\nassert first_Digit(213) == 1\nassert first_Digit(12345) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfirst_Digit(12345) == 2\nfirst_Digit(123) == 3\nfirst_Digit(12345678) == 1\nfirst_Digit(123456789) == 9\nfirst_Digit(1345) == 4\nfirst_Digit(123456789101) == 1\n\n\ndef first_Digit_L1(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    First digit should be at least one.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_Digit(0) == 0, \"Mistake in first_Digit\"\nassert     first_Digit(100) == 1, \"Mistake in first_Digit\"\nassert     first_Digit(1809) == 1, \"Mistake in first_Digit\"\nassert     first_Digit(9099) == 1, \"Mistake in first_Digit\"\nassert     first_Digit(99) == 1, \"Mistake in first_Digit\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(12) == 1\nassert     first_Digit(25) == 5\nassert     first_Digit(1) == 1\nassert     first_Digit(0) == 0\n\n\ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_Digit(1) == 1, 'Error: the first_Digit function is not working as expected'\nassert     first_Digit(10) == 1, 'Error: the first_Digit function is not working as expected'\nassert     first_Digit(100) == 0, 'Error: the first_Digit function is not working as expected'\nassert     first_Digit(123) == 0, 'Error: the first_Digit function is not working as expected'\nassert     first_Digit(987) == 0, 'Error: the first_Digit function is not working as expected'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfirst_Digit(123456) == 4\nfirst_Digit(12345) == 4\nfirst_Digit(1234567) == 1\nfirst_Digit(12345678) == 2\nfirst_Digit(1234567890) == 0\nfirst_Digit(12345678900) == 0\nfirst_Digit(12) == 0\nfirst_Digit(1) == 0\nfirst_Digit(0) == 0\n\n'''\nPart 2:\nWrite a python function to print the length of a given number.\n'''\n\ndef length(n) :\n    '''\n    Write a python function to print the length of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_Digit(5) == '5'\nassert     first_Digit(100) == '1'\nassert     first_Digit(1234) == '3'\nassert     first_Digit(1234567890123456789) == '1'\nassert     first_Digit(-5) == '5'\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    Split([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef RotateLeft(lst, k): \n    '''\n    Write a python function which takes a list of integers and reverses the list. The function should return the modified list.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert Split([1,2,3,4,5,6,7]) == [1,3,5]\nassert Split([1,2,3,4,5,6,7]) == [1,3,5]\nassert Split([1,2,3,4,5,6,7]) == [1,3,5]\nassert Split([1,2,3,4,5,6,7]) == [1,3,5]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5,6,7]) == [1,3,5,7], \"Wrong output\"\n\n'''\n7. Write a python function which takes a list of integers and returns the list of prime numbers\n'''\ndef Prime(list):\n    '''\n    Write a python function which takes a list of integers and returns the list of prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1,2,3,4,5,6]) == [1,3,5]\nassert     Split([1,3,5]) == [1,3,5]\nassert     Split([]) == []\nassert     Split([0,3,5]) == [0,3,5]\nassert     Split([-1,3,-5]) == [-1,3,-5]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert [1,2,3,4,5,6,7] == Split(list)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1,2,3,4,5,6]) == [1,3,5]\nassert     Split([1,2,3,4,5]) == []\n\ndef Split1(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2 == 1:\n            result.append(i)\n    return result\n\nassert     Split1([1,2,3,4,5,6]) == [1,3,5]\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__' :\n    import doctest\n    doctest.testmod()\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     difference(2) == 0, \"The test case does not work\"\nassert    difference(3) == 2, \"The test case does not work\"\nassert    difference(8) == -8, \"The test case does not work\"\nassert    difference(5) == 15, \"The test case does not work\"\nassert    difference(6) == 26, \"The test case does not work\"\nprint(\"All tests are passed\")"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     difference(5) == 15, 'wrong value'\nassert     difference(20) == 1560, 'wrong value'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    difference(5) == 4\n    difference(2) == 6\n    difference(3) == 4\n    difference(100) == 5050\n    difference(50) == 5050\n    difference(50) == 5050\n    difference(0) == 0\n    difference(-1) == 4\n    difference(-2) == 6\n    difference(-3) == 4\n    difference(-100) == 0\n    difference(-50) == -2550\n    difference(-50) == -2550\n    difference(-50) == -2550"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     difference(3) == 6,'Your function does not work as expected.'\n\nprint('Check your work, you are now on the exam.\\n')\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     difference(0) == 0, 'error in the input'\nassert     difference(1) == 1, 'error in the input'\nassert     difference(2) == 6, 'error in the input'\nassert     difference(10) == 5, 'error in the input'\nassert     difference(100) == 25, 'error in the input'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     difference(5) == 11, \"Wrong Answer\"\nassert     difference(10) == 33, \"Wrong Answer\"\nassert     difference(20) == 289, \"Wrong Answer\"\nassert     difference(50) == 1373, \"Wrong Answer\"\nassert     difference(100) == 206873, \"Wrong Answer\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     difference(6) ==  26, \"not correct\"\nassert     difference(10) ==   360, \"not correct\"\nassert     difference(1) ==   0, \"not correct\"\nassert     difference(7) ==  49, \"not correct\"\n\ndef sum_of_first_n_natural_numbers(n) :  \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef power(x, y) :\n    return x ** y\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 1, 'test failed'\nassert     find_Odd_Pair([1,2,3,4],5) == 1, 'test failed'\nassert     find_Odd_Pair([1,2,3,4],6) == 2, 'test failed'\nassert     find_Odd_Pair([1,2,3,4],7) == 3, 'test failed'\nassert     find_Odd_Pair([1,2,3,4],8) == 0, 'test failed'\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6],7) == 2, \"count pairs whose xor is odd\"\nassert     find_Odd_Pair([1,2,3,4,5,6,7],8) == 0, \"count pairs whose xor is even\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_Odd_Pair_using_XOR(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(f'\\n\\n\\n\\n------->>>>>>>> {__file__} run tester<<<<<<<<------')"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair(1,1)     ==    0\nassert     find_Odd_Pair(2,2)     ==    0\nassert     find_Odd_Pair(1,3)     ==    1\nassert     find_Odd_Pair(2,4)     ==    2\nassert     find_Odd_Pair(2,3)     ==    1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Odd_Pair(A = (0,1,4,3),N = 3) == 2\nassert     find_Odd_Pair(A = (1,2,3,4,5),N = 4) == 1\nassert     find_Odd_Pair(A = (1,2,3,4,5),N = 5) == 0\nassert     find_Odd_Pair(A = (1,2,3,4,5),N = 6) == 0\nassert     find_Odd_Pair(A = (1,2,3,4,5,6,7),N = 7) == 2\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair([3, 4, 4, 6, 1, 5, 8], 10) == 8\nassert     find_Odd_Pair([1, 2, 1, 3, 2, 2], 3) == 3\nassert     find_Odd_Pair([1, 2, 1, 3, 2, 2], 5) == 2\nassert     find_Odd_Pair([2, 4, 2, 4, 4, 2, 2], 6) == 4\nassert     find_Odd_Pair([1, 2, 1, 3, 2, 2], 7) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair([1,2,4], 3) == 2, 'output is incorrect'\nassert     find_Odd_Pair([1,2,4], 5) == 0, 'output is incorrect'\nassert     find_Odd_Pair([1,2,4], 6) == 0, 'output is incorrect'\nassert     find_Odd_Pair([2,3,4], 3) == 1, 'output is incorrect'\nassert     find_Odd_Pair([2,3,4], 5) == 0, 'output is incorrect'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef toggle_char(string):\n    '''\n    Write a function to swap case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert toggle_string('string') =='sTRiNG'\nassert toggle_string('sTrInG') == 'String'\nassert toggle_string('String') =='sTiNg'\nassert toggle_string('String') =='sTiNg'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string('Some Text') == 'Some TEXTS'\nassert     toggle_string('Some Text') =='sOmE TEXTS'\nassert     toggle_string('Some Text') =='sOmE Texts'\nassert     toggle_string('Some Text') == 'SOME TEXTs'\nassert     toggle_string('Some Text') == 'Some Text'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string('hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO WORLD') == 'hELLO world'\nassert     toggle_string('HeLLO WoRLD') == 'hELLO wOrLD'\nassert     toggle_string('HELLO WORLD') == 'hELLO world'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     toggle_string('Hello World') == 'hEllO wORlD'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORlD'\nassert     toggle_string('hello world') == 'hello world'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     toggle_string('String') =='sTring'\nassert     toggle_string('string') =='sTRING'\nassert     toggle_string('String') =='sTRiNg'\nassert     toggle_string('String') =='sTRiNg'\nassert     toggle_string('String') =='sTRiNg'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string('Toggle String') == 'ToGliVe SaT'\nassert     toggle_string('tOGGLE STRING') == 'ToGliVe SaT'\nassert     toggle_string('I am the King!') == 'I Am the King!'\nassert     toggle_string('1st') == '1st'\nassert     toggle_string('oN') == 'on'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('Hello World') == 'hELLO wORLD', 'toggle_string'\nassert     toggle_string('HELLO WORLD') == 'hEllO WoRld', 'toggle_string'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD', 'toggle_string'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD', 'toggle_string'\n\ndef compute_sum(l):\n    '''\n    Write a function to compute the sum of all items in a list.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     toggle_string('Hello') == 'hELLo'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HElLo') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string(\"lower\") == \"UPPER\", \"Should be upper.\"\nassert     toggle_string(\"UPPER\") == \"lower\", \"Should be lower.\"\nassert     toggle_string(\"1234567890\") == \"0123456789\", \"Should be 0123456789.\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(12, 13) == 6\nassert     digit_distance_nums(30, 31) == 5\nassert     digit_distance_nums(31, 32) == 4\nassert     digit_distance_nums(32, 33) == 3\nassert     digit_distance_nums(32, 33) == 3\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(1, 2) == 3\nassert     digit_distance_nums(15, 23) == 11\nassert     digit_distance_nums(5, 3) == 2\nassert     digit_distance_nums(0, 99) == 0\nassert     digit_distance_nums(-3, 0) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(19, 12) == 7\nassert     digit_distance_nums(10, 11) == 2\nassert     digit_distance_nums(10, 10) == 0\nassert     digit_distance_nums(10, 8) == 4\nassert     digit_distance_nums(100, 1000) == 50\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(123, 456) == 11\nassert digit_distance_nums(2, 6) == 3\nassert digit_distance_nums(1, 0) == 1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digit_distance_nums(20, 19) == 1\nassert     digit_distance_nums(20, 21) == 2\nassert     digit_distance_nums(21, 21) == 0\nassert     digit_distance_nums(20, 21) == 1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(9999, 9999) == 0, \\\n            'incorrect'\nassert     digit_distance_nums(999, 999) == 0, \\\n            'incorrect'\nassert     digit_distance_nums(23, 25) == 2, \\\n            'incorrect'\nassert     digit_distance_nums(5, 5) == 0, \\\n            'incorrect'\nassert     digit_distance_nums(66, 68) == 2, \\\n            'incorrect'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(1,3) == 0\nassert     digit_distance_nums(4,2) == 1\nassert     digit_distance_nums(1235,1234) == -1\nassert     digit_distance_nums(2,3) == 2\nassert     digit_distance_nums(3,3) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(456, 531) == 195, \"incorrect digit_distance_nums\"\nassert     digit_distance_nums(20, 10) == 2, \"incorrect digit_distance_nums\"\nassert     digit_distance_nums(456, 10) == 0, \"incorrect digit_distance_nums\"\n\ndef digit_distance_string(s1, s2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two strings.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndigit_distance_nums(4,5)==2\nassert \ndigit_distance_nums(123,4)==2\nassert \ndigit_distance_nums(123,5)==2\nassert \ndigit_distance_nums(123,9)==1\nassert \ndigit_distance_nums(123,11)==3\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digit_distance_nums(5,3) == 2, 'Wrong output'\nassert     digit_distance_nums(0,0) == 0, 'Wrong output'\nassert     digit_distance_nums(1,2) == 1, 'Wrong output'\nassert     digit_distance_nums(27,73) == 6, 'Wrong output'\nassert     digit_distance_nums(100,1000) == 10, 'Wrong output'\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_sub_array_sum_2(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n\n\ndef max_sub_array_sum_3(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n\ndef max_sub_array_sum_4(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n\ndef max_sub_array_sum_5(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 9\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 1) == 8\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 6) == 8\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 5) == 7\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 4) == 7\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_sub_array_sum_naive(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum([], 1) == 0\nassert     max_sub_array_sum([1], 1) == 1\nassert     max_sub_array_sum([1,2], 1) == 3\nassert     max_sub_array_sum([1,2,3], 1) == 3\nassert     max_sub_array_sum([1,2,3,4], 1) == 7\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum([3,-1,2,4,5,-6], 5) == 18\nassert     max_sub_array_sum([1, 2, 3, 4, 5, 6], 4) == 8\nassert     max_sub_array_sum([2,-6,-4,-2,4,5,-1], 2) == 8\n\ndef max_sub_array_sum_slow(a, size):\n    '''\n    Check the correctness of the brute-force method.\n    '''\n    for i in range(size - 1):\n        for j in range(i + 1, size):\n            if sum(a[i:j+1]) > max_sub_array_sum(a, size):\n                max_sub_array_sum(a, size)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\n    # expected = 6\n    print(max_sub_array_sum(a, len(a)))"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')\nassert     union_elements(('a', 'b'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')\nassert     union_elements(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'c', 'd', 'e')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6) == union_elements((1,2,3),(4,5,6))\nassert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6) == union_elements((1,2,3),(4,5,6))\nassert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6) == union_elements((1,2,3),(4,5,6))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     union_elements((1,2,3),(5,6,7)) == (1,2,3,5,6,7)\nassert     union_elements((5,6,7),(1,2,3)) == (1,2,3,5,6,7)\nprint('Correct')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6), \"Union of two tuples does not give correct result\"\nassert     union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 2, 3, 4), \"Union of two tuples does not give correct result\"\nassert     union_elements((1, 2), (2, 3, 4)) == (1, 2, 2, 3, 4), \"Union of two tuples does not give correct result\"\nassert     union_elements((1, 2, 2), (2, 3, 4)) == (1, 2, 2, 2, 3, 4), \"Union of two tuples does not give correct result\"\nassert     union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 2, 3, 4), \"Union of two tuples does not give correct result\"\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     union_elements((1, 2), (1, 2)) == (1, 2)\nassert     union_elements((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert     union_elements((1, 2), (3, 4, 5)) == (1, 2, 3, 4, 5)\nassert     union_elements((1, 2), (3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ntest_elements1 = (1,3,2)\ntest_elements2 = (0,0,1)\n\nexpected_output1 = (0,0,1,3,2)\nexpected_output2 = (0,0,1,2,3)\n\ntest_result1 = union_elements(test_elements1, test_elements2)\ntest_result2 = union_elements(test_elements2, test_elements1)"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert union_elements((1,2,3),(2,3,4)) == (1,2,3,4)\nassert union_elements((10,20,30,40,50),(15,25,30,35,40,50)) == (10,15,20,25,30,35,40,50)\nassert union_elements((100,200,300),(1000,2000,3000,4000)) == (100,1000,200,2000,300,4000"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements((0, 1, 2), (4, 5, 6)) == (0, 1, 2, 4, 5, 6)\nassert     union_elements((1, 2, 5), (5, 6, 7)) == (1, 2, 5, 6, 7)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([1,3,5,8,7,2,3]) == 5, \"TEST ERROR\"\nassert     Find_Max_Length([1,4,5,8,7,2,3]) == 6, \"TEST ERROR\"\nassert     Find_Max_Length([4,5,6,7,8,9,10,1,2,3]) == 9, \"TEST ERROR\"\nassert     Find_Max_Length([]) == 0, \"TEST ERROR\"\nassert     Find_Max_Length([1,2,3,4,5]) == 5, \"TEST ERROR\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef Find_Longest_Sub_List(lst):\n    '''\n    Write a python function to find the longest sublist with equal elements.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1,2]) == 2\nassert     Find_Max_Length([1,2,3]) == 3\nassert     Find_Max_Length([1,2,3,4,5]) == 5\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint Find_Max_Length([1,3,5,7,9,10]) == 5, Find_Max_Length([1,3,5,7,9,10])\nassert \nprint Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 11, Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nassert \nprint Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 16, Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\nassert \nprint Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 17, Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\nassert \nprint Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 18, Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([[1,2,3],[4,5,6,7,8]]) == 5\nassert     Find_Max_Length([[1,2,3],[1,2,3,4,5]]) == 3\nassert     Find_Max_Length([[1,2,3,4,5,6,7,8,9]]) == "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max_Length([[1,2,3],[4,5],[6],[7,8,9,10]]) == 10\nassert Find_Max_Length([[1,2,3],[4],[5],[6,7]]) == 5\nassert Find_Max_Length([[1,2,3],[4,5,6,7],[8]]) == 4"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([]) == 0, \"Empty list should return 0\"\nassert     Find_Max_Length(['a', 'b']) == 1, \"Single element should return 1\"\nassert     Find_Max_Length(['a', 'b', 'c']) == 3, \"Multiple elements should return 3\"\nassert     Find_Max_Length(['a', 'b', 'c', 'a']) == 3, \"Elements should not repeat\"\nassert     Find_Max_Length(['a', 'a', 'b', 'c', 'a']) == 5, \"Elements should not repeat\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max_Length([[1,2,3],[2,4,6],[3,5,6]]) == 2, \"Wrong output\"\nassert     Find_Max_Length([[1,2,3]]) == 3, \"Wrong output\"\nassert     Find_Max_Length([[]]) == 0, \"Wrong output\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([[]]) == 0\nassert     Find_Max_Length([[]]) == 0\nassert     Find_Max_Length([[1, 2, 3, 4]]) == 4\nassert     Find_Max_Length([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4]]) == 5\nassert     Find_Max_Length([[1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]) == 6\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values(\"\")         == \"\"\nassert     extract_values(\"\\\"\")         == \"\"\nassert     extract_values(\"hi\")         == \"hi\"\nassert     extract_values(\"hi'\")     == \"hi\"\nassert     extract_values(\"hi' \")     == \"hi\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values('\"HELLO\"') ==     [\"HELLO\"], \"extract_values\"\nassert     extract_values('\"HELLO\" \"WORLD\"') ==     [\"HELLO\", \"WORLD\"], \"extract_values\"\nassert     extract_values('\"HELLO\"') ==     [\"HELLO\"], \"extract_values\"\nassert     extract_values(\"HELLO\") ==     [\"HELLO\"], \"extract_values\"\nassert     extract_values('\"') ==     [\"\"], \"extract_values\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values('She said,\"hello!\"') == 'hello'\nassert    extract_values('She said,\"hello!\"') == 'hello'\nassert    extract_values('She said,\"hi, my name is\"') =='my name is'\nassert    extract_values('She said,\"hi, my name is\"') =='my name is'\nassert    extract_values('She said,\"hi, my name is \"') =='my name is'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values(\"He said: \\\"Why are you doing this?\\\"\") == \"Why are you doing this?\"\nassert     extract_values(\"\\\"How do you spell this?\\\"\") == \"How do you spell this?\"\nassert     extract_values(\"Don't you want to go shopping today?\") == \"Don't you want to go shopping today?\"\nassert     extract_values(\"\\\"I didn't want to go\\\"\") == \"I didn't want to go\"\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # first create a regex for quotation marks\n    regex = r\"\\\"(.*)\\\"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values(\"Hi, my name is Jane and my age is 22.\") == [\"22\"]\nassert     extract_values(\"Hi, my name is Jane and my age is 22. Hi, my name is John and my age is 21.\") == [\"22\", \"21\"]\nassert     extract_values(\"Hi, my name is Jane and my age is 22. Hi, my name is John and my age is 21.\") == [\"22\", \"21\"]\nassert     extract_values(\"Hi, my name is Jane and my age is 22. Hi, my name is John and my age is 21. Hi, my name is Mark and my age is 22.\") == [\"22\"]\nassert     extract_values(\"Hi, my name is Jane and my age is 22. Hi, my name is John and my age is 21. Hi, my name is Mark and my age is 22. Hi, my name is Jane and my age is 22.\") == [\"22\"]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_values(\"he is a good boy\") == \"good boy\", \"incorrect\"\nassert     extract_values(\"he is a good boy but the color is green\") == \"good boy\", \"incorrect\"\nassert     extract_values(\"he is a good boy but the color is green but the background is black\") == \"good boy\", \"incorrect\"\nassert     extract_values(\"he is a good boy but the color is green and the background is black\") == \"good boy\", \"incorrect\"\nassert     extract_values(\"he is a good boy but the color is green and the background is black and the font is Times New Roman\") == \"good boy\", \"incorrect\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert extract_values('\"a\"') == 'a'\nassert extract_values('\"A\"') == 'A'\nassert extract_values(\"'a'\") == 'a'\nassert extract_values(\"'A'\") == 'A'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values(\"Hi, my name is Sanjana Garg and I'm 13 year of experience in data science.\") == \"Sanjana Garg and I'm 13 year of experience in data science.\"\n\nassert     extract_values(\"Hi, my name is Sanjana Garg and I'm 13 year of experience in data science.\") == \"Hi, my name is Sanjana Garg and I'm 13 year of experience in data science.\"\nassert     extract_values(\"Hi, my name is Sanjana Garg and I'm 13 year of experience in data science.\") == \"Hi, my name is Sanjana Garg and I'm 13 year of experience in data science.\"\nassert     extract_values(\"Hi, my name is Sanjana Garg and I'm 13 year of experience in data science.\") == \"Hi, my name is Sanjana Garg and I'm 13 year of experience in data science.\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values('Hello, my name is John, and I am 22 years old. My father is Jane.') == \\\n        ['Hello','my name is John', 'and I am 22 years old.', 'My father is Jane']\n\n\ndef extract_values_from_list_of_tuples(lst):\n    '''\n    Write a function to extract the values from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_values(\"Greetings, friends.\") == \"Greetings, friends.\"\nassert     extract_values(\"Greetings, friends. I am fine.\") == \"Greetings, friends. I am fine.\"\nassert     extract_values(\"Greetings, friends. I am fine, thanks.\") == \"Greetings, friends. I am fine, thanks.\"\nassert     extract_values(\"Hi, my name is 'Kiev'.\") == \"Hi, my name is 'Kiev'.\"\nassert     extract_values(\"Hi, my name is 'Kiev'.\") == \"Hi, my name is 'Kiev'.\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Pairs([1,2,3,4],5) == 1, \"No. of possible pairs : \" + str(count_Pairs([1,2,3,4],5))\nassert     count_Pairs([5,4,2,1],5) == 4, \"No. of possible pairs : \" + str(count_Pairs([5,4,2,1],5))\nassert     count_Pairs([3,1,5,4],5) == 2, \"No. of possible pairs : \" + str(count_Pairs([3,1,5,4],5))"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [1,3,2,4,5,5,6,7,7]\n    assert count_Pairs(arr,8) == 3\n    arr = [1,3,2,4,5,5,6,7,7]\n    assert count_Pairs(arr,9) == 6\n    arr = [1,2,3,4,5,5,6,7,7]\n    assert count_Pairs(arr,8) == 2"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef rotate_list(lst, n): \n    '''\n    Write a python function which rotates the given list by N places.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Pairs([5, 10, 15, 20],4) == 0, \"Case 2 failed\"\nassert     count_Pairs([5, 10, 15, 20],2) == 0, \"Case 3 failed\"\nassert     count_Pairs([5, 10, 15, 20],3) == 0, \"Case 4 failed\"\nassert     count_Pairs([5, 10, 15, 20],5) == 1, \"Case 5 failed\"\nassert     count_Pairs([5, 10, 15, 20],6) == 2, \"Case 6 failed\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_Pairs([2,4,2,3,5,1], 5) == 5\nassert count_Pairs([2,4,2,3,5,1], 1) == 0\nassert count_Pairs([2,4,2,3,5,1], 5) == 0\nassert count_Pairs([1,4,2,3,5], 5) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Pairs([1,2,3,4],4)==3\nassert     count_Pairs([1,2,3,4,5,6,7],9)==6\nassert     count_Pairs([1,2,3,4,5,6,7,8],10)==8\nassert     count_Pairs([1,2,3,4,5,6,7,8,9,10],11)==2\nassert     count_Pairs([1,2,3,4,5,6,7,8,9,10,11,12],15)==5\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Pairs([1,3,4,5,2],6) == 5\nassert     count_Pairs([3,4,2,5],4) == 4\nassert     count_Pairs([1,2,3,4,5,6],6) == 6\nassert count_Pairs([0,2,4,6],4) == 2\nassert count_Pairs([],4) == 0"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n    Output:\n    count_Pairs([1,2,1],3)    :    2\n    count_Pairs([2,3,4],3)    :    2\n    count_Pairs([1,3,4,6],3)    :    4\n    count_Pairs([2,3,4,5],3)    :    0\n'''\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(split('Python'))\n\nprint(split('1 python'))\n\nprint(split('1 python '))\n\nprint(split('1 python '))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split(\"abcd\") == [\"a\", \"bcd\"]\nassert     split(\"\") == []\nassert     split(\"a\") == [\"a\"]\nassert     split(\"abcde\") == [\"abcde\"]\n\nprint(\"All Tests Passed\")\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split(\"I like python\") == ['I', 'like', 'python']\nassert     split(\"I like python and java\") == ['I', 'like', 'python', 'and', 'java']\nassert     split(\"I like python and java and C++\") == ['I', 'like', 'python', 'and', 'java', 'and', 'C++']\nassert     split(\"I like python, java and C++\") == ['I', 'like', 'python,', 'java', 'and', 'C++']\nassert     split(\"I like python, java, and C++\") == ['I', 'like', 'python,', 'java', 'and', 'C++']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split('qwerty') == 'qw'\nassert     split('123') == '1'\nassert     split('abc') == 'a'\nassert     split('qwerty') == 'qw'\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split('123') == ['1','2','3'], 'Error, should split the string into characters'\nassert     split('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'], 'Error, should split the string into characters'\nprint('All done!')"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split('cat') == ['c', 'a', 't']\nassert     split('cane') == ['c', 'a', 'e', 'n']\nassert     split('caen') == ['c', 'a', 'e', 'n']\nassert     split('caen') == ['c', 'a', 'e', 'n']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nCreate a function that takes an integer number as input and returns the input \nnumber's binary equivalent.\n'''\n\ndef binary(num):\n    '''\n    Write a python function to convert an integer number to its binary equivalent.\n    '''\n    pass"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split(\"the quick brown fox\") == ['the', 'quick', 'brown', 'fox'], \"split(\\\"the quick brown fox\\\") should return ['the', 'quick', 'brown', 'fox']\"\nassert     split(\"the quick brown fox\") == ['the', 'quick', 'brown fox'], \"split(\\\"the quick brown fox\\\") should return ['the', 'quick', 'brown fox']\"\nassert     split(\"the brown fox\") == ['the', 'brown', 'fox'], \"split(\\\"the brown fox\\\") should return ['the', 'brown', 'fox']\"\nassert     split(\"the fox\") == ['the', 'fox'], \"split(\\\"the fox\\\") should return ['the', 'fox']\"\nassert     split(\"the\") == ['the'], \"split(\\\"the\\\") should return ['the']\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef factorial(n):\n    '''\n    Write a function factorial that computes the factorial of an integer.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_digits(123456) == 12\nassert     sum_digits(12345) == 12\nassert     sum_digits(0) == 0\nassert     sum_digits(-123) == -1\nassert     sum_digits(153425) == 15\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_digits(123) == 6\nassert sum_digits(45) == 9\nassert sum_digits(144) == 15\nassert sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_digits(1234) == 3, 'wrong!'\nassert     sum_digits(5678) == 6, 'wrong!'\nassert     sum_digits(0) == 0, 'wrong!'\nassert     sum_digits(1) == 1, 'wrong!'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_digits(12345) == 15, 'Test 1 fail'\nassert     sum_digits(0) == 0, 'Test 2 fail'\nassert     sum_digits(1) == 1, 'Test 3 fail'\nassert     sum_digits(10) == 2, 'Test 4 fail'\nassert     sum_digits(1234) == 14, 'Test 5 fail'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # calculate the sum\n    sum = 0\n    while n:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_digits(sum_digits(13))\nsum_digits(sum_digits(15))\nsum_digits(sum_digits(123))\nsum_digits(sum_digits(3))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(1) == 1, \"1 -> 1\"\nassert     sum_digits(10) == 1, \"10 -> 1\"\nassert     sum_digits(100) == 1, \"100 -> 1\"\nassert     sum_digits(1000) == 1, \"1000 -> 1\"\nassert     sum_digits(10001) == 1, \"10001 -> 1\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_digits(12) == 3\nassert     sum_digits(123) == 6\nassert     sum_digits(1234) == 4\nassert     sum_digits(1234) == 4\nassert     sum_digits(123456) == 10\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert issort_list([1, 2, 3, 4]) == False\nassert issort_list([1, 2, 3, 4, 5]) == False\nassert issort_list([1, 2, 3, 4, 5, 6]) == True"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     issort_list([-5, 2, 3, 8, 11]) == True\nassert     issort_list([1, 4, 5, 8, 11]) == False\nassert     issort_list([-2, 1, 5, 8, 11]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     issort_list([0,1,2,3,4,5,6]) == True, 'Failed: issort_list([0,1,2,3,4,5,6])'\nassert     issort_list([0,1,2,3,4,5,4,4,5]) == False, 'Failed: issort_list([0,1,2,3,4,5,4,4,5])'\nassert     issort_list([3,2,1,0]) == False, 'Failed: issort_list([3,2,1,0])'\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    issort_list([1,2,3,4,5]) == True\nassert \n    issort_list([1,2,3,3,3]) == False\n\ndef issort_dict(dict1):\n    '''\n    Write a function to check whether a specified dictionary is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_min_max(list1):\n    '''\n    Write a function to find the minimum and maximum values in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nempty_list(10)\nempty_list(5)\nempty_list(1)\nempty_list(0)\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == [[]]\nassert     empty_list(2) == [[], []]\nassert     empty_list(3) == [[], [], []]\nassert     empty_list(4) == [[], [], [], []]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef nested_list_generator(start, stop, step):\n    '''\n    Write a generator to create a list of list of integers from a start to stop\n    with step.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_list(3) == [{},{},{}], 'Wrong empty_list'\nassert     empty_list(1) == [{}], 'Wrong empty_list'\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['1', '3', '2'], ['2', '1', '4'], ['4', '1', '3']]) == [['1', '2', '4'], ['1', '2', '3'], ['1', '3', '4']]\nassert     sort_sublists([['1', '2', '4'], ['2', '1', '3'], ['3', '1', '2']]) == [['1', '2', '3'], ['1', '2', '4'], ['1', '3', '2']]\nassert     sort_sublists([['1', '2', '3'], ['1', '2', '4'], ['1', '3', '2']]) == [['1', '2', '3'], ['1', '2', '4'], ['1', '3', '2']]\n\nprint(\"\\n[ OK ]: sort_sublists\")"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists(['a','b','a','c','a','d','a','e']) == ['a','a','a','a','a','a','a','a']\nassert     sort_sublists(['a','b','c','a','d','e','f','g']) == ['a','a','a','a','a','a','a','a','b','c','d','e','f','g']\nassert     sort_sublists(['a','c','d','b','g','e','f','h']) == ['a','a','a','a','a','a','a','a','b','c','d','e','f','g','h']\nassert     sort_sublists(['e','f','h','g','c','d','b','a','a','a']) == ['a','a','a','a','a','a','a','a','b','c','d','e','f','g','h']\nassert     sort_sublists(['c','d','a','b','e','f']) == ['a','a','a','a','a','a','b','c','d','e','f']\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists(['b', 'a', 'r', 'e', 'p', 'r', 'n', 'a']) == [['a', 'b', 'r', 'e', 'n', 'p', 'r', 'r'], ['a', 'r', 'p', 'r', 'e', 'n', 'a', 'b']]\nassert     sort_sublists(['b', 'c', 'd', 'a', 'e', 'c', 'b', 'd']) == [['c', 'b', 'a', 'd', 'e', 'b', 'c', 'c']]\nassert     sort_sublists(['a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c']) == [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a']]\nassert     sort_sublists(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', "
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([['car', 'car', 'truck'], \n                        ['truck', 'truck', 'car']]) == [['car', 'car', 'car'], ['truck', 'truck', 'truck']]\n\nassert     sort_sublists([['car', 'car', 'truck', 'truck', 'car'],\n                        ['truck', 'truck', 'car', 'car', 'truck']]) == [['car', 'car', 'car', 'car', 'car'],\n                                                                        ['truck', 'truck', 'truck', 'truck', 'truck']]\n\nassert     sort_sublists([['car', 'car', 'truck', 'truck', 'car'],\n                        ['truck', 'truck', 'car', 'car', 'truck']]) == [['car', 'car', 'car', 'car', 'car'],\n                                                                        ['truck', 'truck', 'truck', 'truck', 'truck']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([['a', 'b', 'c', 'd'], ['x', 'y', 'z']]) == [['a', 'b', 'c', 'd'], ['x', 'y', 'z']]\nassert     sort_sublists([['b', 'c', 'd'], ['a', 'x', 'y', 'z']]) == [['b', 'c', 'd'], ['a', 'x', 'y', 'z']]\nassert     sort_sublists([['a', 'c', 'd'], ['b', 'x', 'y', 'z']]) == [['a', 'c', 'd'], ['b', 'x', 'y', 'z']]\nassert     sort_sublists([['a', 'x', 'y', 'z'], ['b', 'c', 'd']]) == [['a', 'x', 'y', 'z'], ['b', 'c', 'd']]\n\ndef group_sublists(list1):\n    '''\n    Write a function to group each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']]) == [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([[\"h\",\"e\",\"l\",\"l\",\"o\"],[\"s\",\"f\",\"a\",\"t\",\"c\"]]) == \\\n    [[\"h\",\"e\",\"l\",\"l\",\"o\"],[\"s\",\"f\",\"a\",\"t\",\"c\"],[\"h\",\"e\",\"l\",\"l\",\"o\"],[\"s\",\"f\",\"a\",\"t\",\"c\"],[\"h\",\"e\",\"l\",\"l\",\"o\"]]\nassert     sort_sublists([[\"z\",\"y\",\"x\"],[\"w\",\"u\",\"t\",\"q\",\"p\"],[\"a\",\"s\",\"d\",\"f\",\"g\"]]) == \\\n    [[\"a\",\"s\",\"d\",\"f\",\"g\"],[\"w\",\"u\",\"t\",\"q\",\"p\"],[\"x\",\"y\",\"z\"],[\"w\",\"u\",\"t\",\"q\",\"p\"],[\"x\",\"y\",\"z\"]]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([['p','r','o','g'], ['a','m','c','e']]) == \\\n[['a','m','c','e'], ['p','r','o','g']]\nassert     sort_sublists([['p','r','o','g'], ['a','m','c','e'], ['a','m','c','e']]) == \\\n[['a','m','c','e'], ['a','m','c','e'], ['p','r','o','g']]\nassert sort_sublists([['p','r','o','g'], ['a','m','c','e']]) == \\\n[['a','m','c','e'], ['p','r','o','g']]\nassert sort_sublists([['p','r','o','g'], ['a','m','c','e'], ['a','m','c','e']]) == \\\n[['a','m','c','e'], ['a','m','c','e'], ['p','r','o','g']]\nassert sort_sublists([['p','r','o','g'], ['a','m','c','e']]) == \\\n[['a','m','c','e'], ['p','r','o','g']]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([1,2,3,2,1]) == False\nassert     two_unique_nums([1,1,1,1]) == True\nassert     two_unique_nums([1,1,2,2,2]) == True\nassert     two_unique_nums([1,1,1,1,2,2,2]) == False\nassert     two_unique_nums([1,1,2,2,2,3,3,3,3,3,3,3]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert two_unique_nums([[1, 2], [3, 4], [4, 5]]) == [[1, 2], [3, 4], [4, 5]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert two_unique_nums([[1,2], [1,3], [1,4], [3,4], [2,4]]) == [[1,2], [3,4], [2,4]]\nassert two_unique_nums([[1,2], [1,3], [1,4], [2,4], [2,4]]) == [[1,2], [2,4]]\nassert two_unique_nums([[1,1], [1,1], [1,1], [2,2], [2,2]]) == [[1,1], [2,2]]\nassert two_unique_nums([[1,1], [1,1], [2,2], [2,2]]) == [[1,1], [2,2]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     two_unique_nums([]) == False, \"Empty list\"\nassert     two_unique_nums([]) == False, \"Duplicate\"\nassert     two_unique_nums([[1,2,3],[1,2,3]]) == True, \"Duplicate\"\nassert     two_unique_nums([[1,2,3,4,5],[1,2,3,4,5]]) == False, \"Duplicate\"\nassert     two_unique_nums([[1,2,3],[1,2,3],[1,2,3]]) == True, \"Duplicate\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     two_unique_nums([1,2,3,2,1]) == True\nassert     two_unique_nums([1,2,3,3,1]) == False\nassert     two_unique_nums([1,1,1,1,1,1]) == False\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     two_unique_nums([]) == [], \"Input is empty.\"\nassert     two_unique_nums([1]) == [1], \"No duplicate\"\nassert     two_unique_nums([1, 2, 3]) == [1, 2, 3], \"Duplicate\"\nassert     two_unique_nums([2, 3, 4, 5, 1, 2]) == [2, 3, 4, 5, 1], \"Duplicate\"\nassert     two_unique_nums([1, 1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"Duplicate\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     two_unique_nums([1,2,3,4,5,6]) == False, \"Wrong Answer\"\nassert     two_unique_nums([3,2,3,4,5,6]) == True, \"Wrong Answer\"\nassert     two_unique_nums([1,1,1,1,1,1]) == True, \"Wrong Answer\"\nassert     two_unique_nums([]) == True, \"Wrong Answer\"\nassert     two_unique_nums([1]) == True, \"Wrong Answer\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     two_unique_nums([1,2,2,3])     ==     [1,2,3]\nassert     two_unique_nums([1,1,2,2])     ==     [1,2]\nassert     two_unique_nums([1,1,1,2,2])     ==     [1,2]\nassert     two_unique_nums([])     ==     []\nassert     two_unique_nums([1,2,1])     ==     [1,2]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef unique_list(l1):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     two_unique_nums([1,2,3,4,5,6,7]) == True\nassert     two_unique_nums([1,2,3,4,4,5,6,7]) == False\nassert     two_unique_nums([1,2,3,4,5,6,7,1,2,3]) == True\nassert     two_unique_nums([1,2,3,1,2,3,3,4,5,6,7]) == False\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12]) == True\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1, 4, 4, 3, 6, 7, 2, 1, 2]) == 1 * 3 * 4 * 2 * 7\nassert unique_product([1, 4, 4, 3, 6, 7, 2, 1, 2, 8, 4]) == 1 * 3 * 4 * 2 * 7 * 8\nassert unique_product([]) == 1\nassert unique_product([1, 4, 4, 3, 6, 7, 2, 1, 2, 8, 4, 1, 2, 2]) == 1 * 3 * 4 * 2 * 7 * 8 * 1 * 2 * 2\nassert unique_product(list(range(10))) == 36\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_product([1, 3, 5, 3, 7, 11]) == 18, 'Wrong answer'\nassert     unique_product([1, 3, 5, 6, 7, 9, 11]) == 45, 'Wrong answer'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([1, 2, 3, 4]) == 24\nassert     unique_product([2, 1, 3, 4]) == 24\nassert     unique_product([2, 3, 4, 1]) == 24\nassert     unique_product([]) == 1\nassert     unique_product([1, 1, 1]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product(list_data = [1,2,4,6,6,3,7,1,2,1,2,7,9,1]) == 385, \"Test failed\"\nassert     unique_product(list_data = [1,2,3,4]) == 24, \"Test failed\"\nassert     unique_product(list_data = [1,2,3,4,2,2,2]) == 6, \"Test failed\"\nassert     unique_product(list_data = [1,2,3,4,2,2,2,2]) == 6, \"Test failed\"\nassert     unique_product(list_data = [1,2,3,4,2,2,2,2,2]) == 6, \"Test failed\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_product([1,2,3,4,5]) == 120\nassert     unique_product([1,2,3,4,5,3,2]) == 288\nassert     unique_product([]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9]) == 36, 'product should be 36'\nassert     unique_product([3, 2, 1, 4, 5, 4, 3, 2, 1]) == 6, 'product should be 6'\nassert     unique_product([4, 1, 3, 2, 6, 1, 4, 2, 2, 3, 4, 5, 1, 4, 2, 1, 5, 1]) == 32, 'product should be 32'\nassert     unique_product([2, 1, 5, 2, 2, 1, 5, 2, 2]) == 20, 'product should be 20'\nassert     unique_product([1, 1, 1, 1, 1, 1, 1, 1]) == 1, 'product should be 1'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([1, 2, 3, 4, 5]) == 120\nassert     unique_product([1, 2, 3, 1, 4, 5]) == 120\nassert     unique_product([5, 5, 5]) == 25\nassert     unique_product([]) == 1\nassert     unique_product([0, 0, 0]) == 0\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('All Tests: All OK')\nprint('')\n\nprint('Testing unique_product')\nassert unique_product([1,2,3,2,4,5,2]) == 120\nassert unique_product([2,3,5,7,2,2,7,2,2]) == 280\nassert unique_product([9,9,9]) == 81\nprint('Unique product function: All tests passed')\nprint('')\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_product([]) == 1, \"empty list\"\nassert     unique_product([1,2,3,4]) == 24, \"all the numbers are unique\"\nassert     unique_product([-1,2,3,4]) == 24, \"only positive numbers\"\nassert     unique_product([1,2,-3,4]) == -24, \"only positive numbers\"\nassert     unique_product([1,-2,3,4]) == -24, \"only positive numbers\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_product([1, 2, 3, 4, 1, 1, 5, 2, 4, 1, 1, 3, 4, 2, 4, 1, 1, 1, 2, 4, 3, 4, 5, 1, 2, 3, 4, 4, 5]) == 720\nassert     unique_product([1, 2, 3, 4, 1, 1, 5, 2, 4, 1, 1, 3, 4, 2, 4, 1, 1, 1, 2, 4, 3, 4, 5, 1, 2, 3, 4, 4, 5]) == 720\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(1,2) == 2, 'Test Fail'\nassert     surfacearea_cylinder(2,2) == 4, 'Test Fail'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(2.5, 3.5) == 14.56\nassert surfacearea_cylinder(2, 3) == 4.36\nassert surfacearea_cylinder(3, 4) == 8.96\nassert surfacearea_cylinder(3.5, 3.6) == 16.56\nassert surfacearea_cylinder(3.6, 3.7) == 22.56\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(3,4) == 12\n\nimport math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cylinder(10,10) == 48, \\\n    \"incorrect value of surfacearea_cylinder\"\nassert     surfacearea_cylinder(10,100) == 1760, \\\n    \"incorrect value of surfacearea_cylinder\"\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cylinder(3,4) == 12.5, 'The result should be 12.5'\nassert     surfacearea_cylinder(2,4) == 12.5, 'The result should be 12.5'\nassert     surfacearea_cylinder(1,4) == 12.5, 'The result should be 12.5'\nassert     surfacearea_cylinder(10,4) == 236.3625, 'The result should be 236.3625'\nassert     surfacearea_cylinder(0,4) == 0, 'The result should be 0'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cylinder(2,3) == 9.56\nassert     surfacearea_cylinder(10,2) == 20.66\nprint('Passed')\nprint('')\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(0.5,0.5) == 5, \"Expected: 5, got: %s\" % surfacearea_cylinder(0.5,0.5)\nassert surfacearea_cylinder(1,1) == 2, \"Expected: 2, got: %s\" % surfacearea_cylinder(1,1)\nassert surfacearea_cylinder(2.5,3) == 10, \"Expected: 10, got: %s\" % surfacearea_cylinder(2.5,3)\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cylinder(1, 1) == 2 * pi * 1**2, \"surfacearea_cylinder test 1 failed\"\nassert     surfacearea_cylinder(2, 1) == 2 * pi * 2**2, \"surfacearea_cylinder test 2 failed\"\nassert     surfacearea_cylinder(1, 2) == 2 * pi * 1**2, \"surfacearea_cylinder test 3 failed\"\nassert     surfacearea_cylinder(4, 1) == 2 * pi * 4**2, \"surfacearea_cylinder test 4 failed\"\nassert     surfacearea_cylinder(0.5, 1) == 2 * pi * 0.5**2, \"surfacearea_cylinder test 5 failed\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([0,1,2,3],[]) == True\nassert     is_Sub_Array([4,5,6,7],[]) == False\nassert     is_Sub_Array([0,1,2,3],[4]) == True\nassert     is_Sub_Array([1,2,3,4,5,6],[4]) == True\nassert     is_Sub_Array([1,2,3,4,5,6],[2]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (is_Sub_Array(A = [1,2,3,1], B = [2,3,1]) == True), \"Not Correct\"\nassert     (is_Sub_Array(A = [1,2,3,1,4], B = [2,3,1]) == False), \"Not Correct\"\nassert     (is_Sub_Array(A = [-2,3,3,3,2,4], B = [-2,3,3,3]) == False), \"Not Correct\"\nassert     (is_Sub_Array(A = [1,2,3,1], B = [2,3,1,4]) == True), \"Not Correct\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_Sub_Array([],[]),\n    \"is_Sub_Array should return True for empty lists\"\n    is_Sub_Array([1],[]),\n    \"is_Sub_Array should return True for lists with same elements\"\n    is_Sub_Array([1,2],[]),\n    \"is_Sub_Array should return True for lists with same elements\"\n    is_Sub_Array([],[1]),\n    \"is_Sub_Array should return True for empty list and list with single element\"\n    is_Sub_Array([2],[2]),\n    \"is_Sub_Array should return False for different lists\""
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sub_Array([1,1,1,1,1],[1,2,3]) == True\nassert     is_Sub_Array([1,1,1,1,1],[1,2,1]) == True\nassert     is_Sub_Array([1,1,1,1,1],[1,1,1]) == True\nassert     is_Sub_Array([1,1,1,1,1],[1]) == True\nassert     is_Sub_Array([1,1,1,1,1],[2]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,2,3],[3,1])==False, \"is_Sub_Array([1,2,3],[3,1]) == False\"\nassert     is_Sub_Array([1,2,3],[1,3])==True, \"is_Sub_Array([1,2,3],[1,3]) == True\"\nassert     is_Sub_Array([1,2,3],[0,3])==True, \"is_Sub_Array([1,2,3],[0,3]) == True\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sub_Array([1,2,3],[1,2]) == True, \"List 1 is sublist of List 2\"\nassert     is_Sub_Array([4,5,6,7,8],[4,5]) == False, \"List 2 is not sublist of List 1\"\nassert     is_Sub_Array([1,2,3],[4,5]) == False, \"List 2 is not sublist of List 1\"\nassert     is_Sub_Array([1,2,3,4,5,6,7,8,9,10],[4,5]) == False, \"List 2 is not sublist of List 1\"\nassert     is_Sub_Array([1,2,3,4,5,6,7,8,9,10],[6,7,8,9,10]) == True, \"List 2 is sublist of List 1\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nA = [[1, 2, 3], \n    [1, 2, 3], \n    [1, 2, 3], \n    [1, 2, 3], \n    [1, 2, 3]]\nB = [[1, 2, 3], \n    [1, 2, 3], \n    [1, 2, 3]]\n\nassert not is_Sub_Array(A,B)\n\nassert \nA = [[1, 2], \n    [1, 2], \n    [1, 2], \n    [1, 2], \n    [1, 2]]\nB = [[1, 2], \n    [1, 2], \n    [1, 2], \n    [1, 2], \n    [1, 2]]\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Sub_Array(A = [1,2,3,4], B = [1,2,3,4]) == True, \"List A is SubList of List B\"\nassert     is_Sub_Array(A = [1,2,3,4], B = [1,2]) == False, \"List A is not SubList of List B\"\nassert     is_Sub_Array(A = [1,2,3,4], B = [1,3,5,7]) == True, \"List A is SubList of List B\"\nassert     is_Sub_Array(A = [1,2,3,4], B = [1,3,5]) == False, \"List A is not SubList of List B\"\nassert     is_Sub_Array(A = [1,2,3,4,5,6,7,8], B = [1,2,3,4,5,6,7,8]) == False, \"List A is not SubList of List B\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([1,2,3], [1,2,3,4,5]) == True\nassert     is_Sub_Array([1,2,3,4,5], [1,2,3,4,5]) == True\nassert     is_Sub_Array([1,2,3], [1,2,3,4]) == False\nassert     is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6]) == False\nassert     is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sub_Array([0,1,2],[0,1,2]) == True, 'Should be True'\nassert     is_Sub_Array([0,1,2],[0]) == False, 'Should be False'\nassert     is_Sub_Array([0,1,2],[1]) == False, 'Should be False'\nassert     is_Sub_Array([0,1,2],[2]) == False, 'Should be False'\nassert     is_Sub_Array([0,1,2],[3]) == True, 'Should be True'\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit_Factorial(9) == 9, \"last_Digit_Factorial should return 9\"\nassert     last_Digit_Factorial(12) == 1, \"last_Digit_Factorial should return 1\"\nassert     last_Digit_Factorial(1234) == 1, \"last_Digit_Factorial should return 1\"\nassert     last_Digit_Factorial(99999) == 9, \"last_Digit_Factorial should return 9\"\nassert     last_Digit_Factorial(10000001) == 9, \"last_Digit_Factorial should return 9\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit_Factorial(5) == 2\nassert     last_Digit_Factorial(26) == 6\nassert     last_Digit_Factorial(73) == 7\nassert     last_Digit_Factorial(11) == 1\n\n\ndef first_Digit_Factorial(n): \n    '''\n    Write a python function to find the first digit in factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(1234) == 3\nassert     last_Digit_Factorial(0) == 0\nassert     last_Digit_Factorial(555) == 5\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(123456) == 6\nassert last_Digit_Factorial(1234) == 1\nassert last_Digit_Factorial(11111) == 0\nassert last_Digit_Factorial(101) == 1\nassert last_Digit_Factorial(10) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit_Factorial(22) == 3, \"Wrong output!\"\nassert     last_Digit_Factorial(23) == 2, \"Wrong output!\"\nassert     last_Digit_Factorial(144) == 4, \"Wrong output!\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(0) == 1\nassert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(2) == 1\nassert     last_Digit_Factorial(3) == 1\nassert     last_Digit_Factorial(4) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(2) == 0, \"Last digit factorial of 2 = 0\"\nassert     last_Digit_Factorial(3) == 0, \"Last digit factorial of 3 = 0\"\nassert     last_Digit_Factorial(5) == 1, \"Last digit factorial of 5 = 1\"\nassert     last_Digit_Factorial(9) == 1, \"Last digit factorial of 9 = 1\"\nassert     last_Digit_Factorial(10) == 1, \"Last digit factorial of 10 = 1\"\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([], [], []) == []\nassert     interleave_lists([], [1, 2, 3, 4], []) == [1, 2, 3, 4]\nassert     interleave_lists([1, 2, 3, 4], [], []) == [1, 2, 3, 4]\nassert     interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     interleave_lists([1,2,3,4,5],\n                           ['a','b','c'],\n                           ['d','e','f']) == ['1','2','3','a','4','5','d','e','f'], 'interleave_lists should return ['1','2','3','a','4','5','d','e','f']'\nassert     interleave_lists([1,2,3],\n                           ['a','b','c'],\n                           ['d','e','f']) == ['1','a','2','b','3','d','e','f'], 'interleave_lists should return ['1','a','2','b','3','d','e','f']'\nassert     interleave_lists([1],\n                           ['a','b','c'],\n                           ['d','e','f']) == ['1','a','d','e','f'], 'interleave_lists should return ['1','a','d','e','f']'\nassert     interleave_lists([1,2,3],\n                           ['a','b','c'],\n                           ['d','e','f']) == ['1','a','d','b','2','c','3','e','f'], 'interleave_lists should return ['1','a','d','b','2','c','3','e','f']'"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    interleave_lists([1,2,3,4],\n                      [5,6,7,8],\n                      [9,10,11,12]) == [1,5,9,2,6,10,3,7,11,4,8,12]\n\nassert \n    interleave_lists([1,2,3,4],\n                      [5,6,7,8],\n                      [9,10,11,12],\n                      [13,14,15,16]) == [1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2],[4,5],[6,7,8,9]) == [1,4,6,2,5,7,3,8,9]\nassert     interleave_lists([1,2,3],[4,5],[6,7,8]) == [1,4,6,2,5,7,3,8]\nassert     interleave_lists([1,2,3],[4,5],[6,7,8,9]) == [1,4,6,2,5,7,3,8,9]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     interleave_lists([1,2,3],['a','b','c'],['d','e','f']) == ['1', 'a', 'd', '2', 'b', 'e', '3', 'c', 'f']\nassert     interleave_lists([1,2],['a','b'],['c','d']) == ['1', 'a', 'c', '2', 'b', 'd']\nassert     interleave_lists([1,2,3],['a','b','c'],['d','e','f']) == ['1', 'a', 'd', '2', 'b', 'e', '3', 'c', 'f']\nassert     interleave_lists([],['a','b','c'],['d','e','f']) == ['a', 'd', 'b', 'e', 'c', 'f']\nassert     interleave_lists([1,2],['a','b'],['c','d']) == ['1', 'a', 'c', '2', 'b', 'd']\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     interleave_lists([1,2,3], [3,4,5,6,7], [7,8,9]) == [1,3,7,2,4,8,5,9,6]\nassert     interleave_lists([], [], []) == []\nassert     interleave_lists([1,2,3], [3,4], [5,6,7]) == [1,3,5,2,4,6,7]\nassert     interleave_lists([1,2,3], [3,4,5], [5,6,7]) == [1,3,5,2,4,6,7]"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9], 'Wrong'\nassert     interleave_lists([1,2,3],[4,5],[6,7,8]) == [1,4,6,2,5,7,3,8], 'Wrong'\nassert     interleave_lists([],[],[]) == [], 'Wrong'\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert interleave_lists(['a','b','c'],[1,2,3],[4,5,6]) == ['a','1','b','2','c','3','4','5','6']\nassert interleave_lists([1,2],[3,4],[5,6]) == [1,3,2,5,4,6]\nassert interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == [1,5,9,2,6,10,3,7,11,4,8,12]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == \n        [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == \n        [1,4,7,2,5,8,3,6,9]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,7,2,5,8,3,6,9]\n\ndef sort_list(list1,list2,list3):\n    '''\n    Write a function to sort 3 lists in decreasing order of length.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar((1, 2, 3, 4), (1, 2, 3, 5)) == (2, 3)\nassert     find_dissimilar((1, 2, 3, 5), (1, 2, 3, 4)) == (2, 3)\nassert     find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar((1, 2), (3, 4)) == 1\nassert     find_dissimilar((1, 1), (2, 2)) == 0\nassert     find_dissimilar((1, 2, 3), (2, 1, 3)) == 1\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar( ('cat', 'dog', 'horse', 'rat'), \n                          ('cat', 'dog', 'tiger', 'rat') ) == set(['horse', 'rat'])\nassert     find_dissimilar( ('cat', 'dog', 'horse', 'rat'), \n                          ('cat', 'dog', 'tiger', 'dog') ) == set(['horse', 'rat'])\nassert     find_dissimilar( ('cat', 'dog', 'horse', 'rat'), \n                          ('cat', 'dog', 'tiger', 'rat', 'cat') ) == set(['horse', 'rat', 'cat'])\nassert     find_dissimilar( ('cat', 'dog', 'horse', 'rat'), \n                          ('cat', 'dog', 'tiger', 'dog', 'cat') ) == set(['horse', 'rat', 'cat'])\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar((1, 2), (2, 1)) == (1, 2)\nassert     find_dissimilar((1, 1), (2, 2)) == (1, 2)\nassert     find_dissimilar((1, 1), (1, 1)) == ()\nassert     find_dissimilar((1, 2), (2, 2)) == ()\nassert     find_dissimilar((1, 2, 3), (2, 1)) == (3, 2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar(('a','b','c'),('a','b','c')) == {'c'}, \"Should be {'c'}\"\nassert     find_dissimilar(('a','b','c'),('c','d','e')) == {'a','b'}, \"Should be {'a','b','c'}\"\nassert     find_dissimilar(('a','b','c'),('a','b','c','d')) == {'c','d'}, \"Should be {'c','d'}\"\nassert     find_dissimilar(('a','b','c'),('a','d','e')) == {'b','c'}, \"Should be {'b','c'}\"\nassert     find_dissimilar(('a','b','c'),('a','b')) == {'d','e'}, \"Should be {'d','e'}\"\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_dissimilar(('a', 'b'), ('c', 'd')) == ('a', 'c')\nassert     find_dissimilar(('a', 'b'), ('c', 'e')) == ('a', 'b')\nassert     find_dissimilar(('a', 'b'), ('c', 'f')) == ('b', 'a')\nassert     find_dissimilar(('a', 'b'), ('c', 'g')) == ('a', 'b')\nassert     find_dissimilar(('a', 'b'), ('c', 'h')) == ('a', 'b')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((1,2,3), (4,5,6)) ==     (1,2)\nassert     find_dissimilar((1,2,3), (1,2,3)) ==     (2,3)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar((1, 3, 4), (2, 5, 6)) == (2, 5), \\\n    \"Error. Your function returned {}.\".format(find_dissimilar((1, 3, 4), (2, 5, 6)))\nassert     find_dissimilar((1, 2, 3), (1, 2, 3)) == (1, 2), \\\n    \"Error. Your function returned {}.\".format(find_dissimilar((1, 2, 3), (1, 2, 3)))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0) == (1, 2, 4, 5)\nassert     even_ele((1, 2, 3, 4, 5), lambda x: x % 2!= 0) == (1, 2, 3, 4)\nassert     even_ele((1, 2, 'h', 4, 5), lambda x: x == 'h') == (1, 2, 4, 5)\nassert     even_ele(('a', 1, 'b', 2, 3), lambda x: x > 2) == ('a', 1, 'b', 2)\nassert     even_ele(('a', 1, 'b', 2, 3), lambda x: x < 3) == ('a', 1, 'b')\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_ele((1, 'hi', (2, 'how', 'are', (3, 'you'), '?'), 4), lambda x: x%2==0) == False\nassert     even_ele((1, 'hi', (2, 'how', 'are', (3, 'you'), '?'), 4), lambda x: x%2!=0) == False\nassert     even_ele((1, 'hi', (2, 'how', 'are', (3, 'you'), '?'), 4), lambda x: x%2==0) == True\nassert     even_ele((1, 'hi', (2, 'how', 'are', (3, 'you'), '?'), 4), lambda x: x%2!=0) == True\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    even_ele( (1, (2, 3, 4, (5, 6), 7), 8), even) == ((2, 3, 4), (5, 6), 7, 8)\n    even_ele( (1, (2, 3, 4, (5, 6), 7), 8), even) == ((2, 3, 4), (5, 6), 7, 8)\n    even_ele( ((1, 2), (3, 4, 5, 6, 7, 8), 9), even) == ((1, 2), (3, 4, 5, 6, 7, 8), 9)\n    even_ele( ((1, 2, 3), (4, 5, 6, 7, 8), 9), even) == ((1, 2, 3), (4, 5, 6, 7, 8), 9)\n    even_ele(((1, 2), (3, 4, 5, 6, 7, 8), 9), even) == ((1, 2), (3, 4, 5, 6, 7, 8), 9)\n    even_ele(((1, 2, 3), (4, 5, 6, 7, 8), 9), even) == ((1, 2, 3), (4, 5, 6, 7, 8), 9)\n    even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9), even) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    even_ele((1, 2, 3, 4, 5, 6, 7, 8), even) == (1, 2, 3, 4, 5, 6, 7, 8)\n    even_ele((1, 2, 3, 4, 5, 6, 7, 8), even) == (1, 2, 3, 4, 5, 6, 7, 8)\n    even_ele((1, 2, 3, 4, 5, 6, 7, 8), even) == (1, 2, 3, 4, 5, 6, 7, 8)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, 6, 7), even) == (1, 2, 3, 4, 5, 6, 7)\n    even_ele((1, 2, 3, 4, 5, "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_ele(test_tuple, even_fnc)"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef nested_even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove even elements in the nested tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\neven_ele(tuple_test_case, lambda: test_tuple[0] == 'even') \neven_ele(tuple_test_case, lambda: test_tuple[2] == 'odd') \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_ele((1,2,3,4,5,6,7,8,9), lambda x: x%2 == 0) == (1,2,3,4,5,6,7,8)\nassert \neven_ele((1,2,3,4,5,6,7,8,9), lambda x: x%2!= 0) == (2,3,4,5,6,7,8)"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_ele((1, (1, 2, 3, 4), 5), even_fnc) == ((1, 2, 3, 4), 5)\nassert     even_ele((1, (1, 2, 3, 4, 5), 6), even_fnc) == ((1, 2, 3, 4, 5), 6)\nassert     even_ele((1, (2, 3, 4, 5, 6), 7), even_fnc) == ((2, 3, 4, 5, 6), 7)\nassert     even_ele(((1, 2, 3), 4), even_fnc) == ((1, 2, 3), 4)\nassert     even_ele(((1, 2, 3), 4), even_fnc) == ((1, 2, 3), 4)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_ele((1, 2, 3, 4, 5, 6), lambda x: x % 2 == 0) ==     (2, 4, 6)\nassert     even_ele((1, 2, 3, 4, 5, 6), lambda x: x % 2!= 0) ==     (1, 3, 5)\nassert     even_ele((1, 2, 3, 4, 5, 6), lambda x: x % 2 == 0) ==     (2, 4, 6)\nassert     even_ele((1, 2, 3, 4, 5, 6), lambda x: x % 2 == 0) ==     (2, 4, 6)\nassert     even_ele((1, 2, 3, 4, 5, 6), lambda x: x % 2!= 0) ==     (1, 3, 5)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surface_Area(1,1)==6\nassert     surface_Area(2,3)==28\nassert     surface_Area(3,4)==24\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('\\n \\n')\n\nb = 5\nh = 6\ns = surface_Area(b,h)\nprint('Surface Area of Pyramid is : ',s)\nprint('\\n \\n')"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert surface_Area(10, 20) == 500"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nsurface_Area(2,3) == 10\nsurface_Area(1.2,3) == 4\nsurface_Area(0.2,3) == 4"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surface_Area(10, 5) == 50\nassert     surface_Area(5, 5) == 25\nassert     surface_Area(5, 10) == 100"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surface_Area(4, 4) == 40\nassert     surface_Area(8, 8) == 128\nassert     surface_Area(10, 10) == 200\nassert     surface_Area(6, 5) == 5 * 5 * 3\nassert     surface_Area(11, 2) == 2 * 3 * 2 + 2 * 3 * 1 + 2 * 3 * 3\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surface_Area(2,3) == 12\nassert     surface_Area(3,4) == 24\nassert     surface_Area(6,7) == 56\nassert     surface_Area(10,4) == 100\nassert     surface_Area(0,0) == 0\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({})\nassert     not my_dict({\"a\":\"b\"})\n\n\ndef my_function(a,b,c):\n    '''\n    Write a function that return the last value\n    '''\n    pass"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     my_dict({}) == False, \"There is no dictionary!\"\nassert     my_dict({\"key\": \"value\"}) == False, \"There is a dictionary!\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     my_dict(None) is False\nassert     my_dict({}) is False\nassert     my_dict({\"one\":1}) is True\nassert     my_dict({\"one\":1,\"two\":2}) is False\nassert     my_dict({\"one\":1,\"two\":2,\"three\":3}) is True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({'name': 'Sai','age': 21,'sex': 'Male'}) == True\nassert     my_dict({'name': 'Sai', 'age': 21,'sex': 'Male', 'height': 1.70, 'weight': 75.10}) == True\nassert     my_dict({'name': 'Sai', 'age': 21,'sex': 'Male', 'height': 1.70, 'weight': 75.10, 'weight_unit': 'kg', 'height_unit':'m'}) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict({}) == True, \"Test 1: Correct\"\nassert my_dict({\"a\": 1}) == True, \"Test 2: Correct\"\nassert my_dict({\"a\": 1, \"b\": 2}) == True, \"Test 3: Correct\"\nassert my_dict({\"a\": 1, \"b\": 2, \"c\": 3}) == True, \"Test 4: Correct\"\nassert my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7}) == True, \"Test 5: Correct\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     my_dict({}) == True, \"Key is not in the dictionary\"\nassert     my_dict({\"a\":\"b\"}) == False, \"Key is in the dictionary\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncatalan_number(10) == 552"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('check your test!')\nif __name__ == '__main__':\n    print(catalan_number(4)) # 7\n\n\n\ndef catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # TODO\n    pass"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncatalan_number(0) == 0\ncatalan_number(1) == 1\ncatalan_number(2) == 2\ncatalan_number(3) == 5\ncatalan_number(4) == 14\ncatalan_number(5) == 28\ncatalan_number(6) == 46\ncatalan_number(7) == 70\ncatalan_number(8) == 92\ncatalan_number(9) == 138\ncatalan_number(10) == 274\ncatalan_number(11) == 446\ncatalan_number(12) == 714\ncatalan_number(13) == 924\ncatalan_number(14) == 1428\ncatalan_number(15) == 2468\ncatalan_number(16) == 3936\ncatalan_number(17) == 6052\ncatalan_number(18) == 8886\ncatalan_number(19) == 13784\ncatalan_number(20) == 27648\ncatalan_number(21) == 45072\ncatalan_number(22) == 72928\ncatalan_number(23) == 96984\ncatalan_number(24) == 155220\ncatalan_number(25) == 281632\ncatalan_number(26) == 472524\ncatalan_number(27) == 750512\ncatalan_number(28) == 995648\ncatalan_number(29) == 1647648\ncatalan_number(30) == 3039212\ncatalan_number(31) == 5144064\ncatalan_number(32) == 8064192\ncatalan_number(33) == 11872896\ncatalan_number(34) == 26354480\ncatalan_number(35) == 44772048\ncatalan_number(36) == 64601952\ncatalan_number(37) == 98272880\ncatalan_number(38) == 138928288\ncatalan_number(39) == 272316160\ncatalan_number(40) == 47900352\ncatalan_number(41) == 77980048\ncatalan_number(42) == 101744448\ncatalan_number(43) == 159600992\ncatalan_number(44) == 29662400\ncatalan_number(45) == 527478400\ncatalan_number(46) == 826481920\ncatalan_number(47) == 1144028800\ncatalan_number(48) == 1809312384\ncatalan_number(49) == 25793440000\ncatalan_number(50) == 40536800\ncatalan_number(51) == 64818208000\ncatalan_number(52) == 998388608000\ncatalan_number(53) == 15676512\ncatalan_number(54) == 286568960000\ncatalan_number(55) == 48856464\ncatalan_number(56) == 73853760\ncatalan_number(57) == 10369372800\ncatalan_number(58) == 166470592\ncatalan_number(59) == 3178640\ncatalan_number(60) == 48076800\ncatalan_number(61) == 7673440\ncatalan_number(62) == 10593632\ncatalan_number(63) == 152716160\ncatalan_number(64) == 280081920\ncatalan_number(65) == 477348800\ncatalan_number(66) == 74923488000\ncatalan_number(67) == 9954080\ncatalan_number(68) == 159264000\ncatalan_number(69) == 30881600\ncatalan_number(70) == 48588800\ncatalan_number(71) == 7674432000\ncatalan_number(72) == 1016688960000\ncatalan_number(73) == 16525088\ncatalan_number(74) == 2949874400\ncatalan_number(75) == 527478400\ncatalan_number(76) == 826481920\ncatalan_number(77) == 1144028800\ncatalan_number(78) == 1809312384\ncatalan_number(79) == 25793440000\ncatalan_number(80) == 40536800\ncatalan_number(81) == 64818208000\ncatalan_number(82) == 998388608000\ncatalan_number(83) == 15676512\ncatalan_number(84) == 286568960000\ncatalan_number(85) == 48856464\ncatalan_number(86) == 73853760\ncatalan_number(87) == 10369372800\ncatalan_number(88) == 166470592\ncatalan_number(89) == 3178640\ncatalan_number(90) == 48076800\ncatalan_number(91) == 7673440\ncatalan_number(92) == 10593632\ncatalan_number(93) == 152716160\ncatalan_number(94) == 280081920\ncatalan_number(95) == 477348800\ncatalan_number(96) == 74923488000\ncatalan_number(97) == 9954080\ncatalan_number(98) == 159264000\ncatalan_number(99) == 30881600\ncatalan_number(100) == 48588800\ncatalan_number(101) == 7674432000\ncatalan_number(102) == 1016688960000\ncatalan_number(103) == 16525088\ncatalan_number(104) == 2949874400\ncatalan_number(105) == 527478400\ncatalan_number(106) == 826481920\ncatalan_number(107) == 1144028800\ncatalan_number(108) == 1809312384\ncatalan_number(109) == 25793440000\ncatalan_number(110) == 40536800\ncatalan_number(111) == 64818208000\ncatalan_number(112) == 998388608000\ncatalan_number(113) == 15676512\ncatalan_number(114) == 286568960000\ncatalan_number(115) == 48856464\ncatalan_number(116) == 73853760\ncatalan_number(117) == 10369372800\ncatalan_number(118) == 166470592\ncatalan_number(119) == 3178640\ncatalan_number(120) == 48076800\ncatalan_number(121) == 7673440\ncatalan_number(122) == 10593632\ncatalan_number(123) == 152716160\ncatalan_number(124) == 280081920\ncatalan_number(125) == 477348800\ncatalan_number(126) == 74923488000\ncatalan_number(127) == 9954080\ncatalan_number(128) == 159264000\ncatalan_number(129) == 30881600\ncatalan_number(130) == 48588800\ncatalan_number(131) == 7674432000\ncatalan_number(132) == 1016688960000\ncatalan_number(133) == 16525088\ncatalan_number(134) == 2949874400\ncatalan_number(135) == 527478400\ncatalan_number(136) == 826481920\ncatalan_number(137) == 1144028800\ncatalan_number(138) == 1809312384\ncatalan_number(139) == 25793440000\ncatalan_number(140) == 40536800\ncatalan_number(141) == 64818208000\ncatalan_number(142) == 998388608000\ncatalan_number(143) == 15676512\ncatalan_number(144) == 286568960000\ncatalan_number(145) == 48856464\ncatalan_number(146) == 73853760\ncatalan_number(147) == 10369372800\ncatalan_number(148) == 166470592\ncatalan_number(149) == 3178640\ncatalan_number(150) == 48076800\ncatalan_number(151) == 7673440\ncatalan_number(152) == 10593632\ncatalan_number(153) == 152716160\ncatalan_number(154) == 280081920\ncatalan_number(155) == 477348800\ncatalan_number(156) == 74923488000\ncatalan_number(157) == 9954"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     catalan_number(0) == 0, \"The 0th catalan number is 1\"\nassert     catalan_number(1) == 1, \"The 1st catalan number is 1\"\nassert     catalan_number(2) == 2, \"The 2nd catalan number is 2\"\nassert     catalan_number(3) == 5, \"The 3rd catalan number is 5\"\nassert     catalan_number(4) == 14, \"The 4th catalan number is 14\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     catalan_number(1) == 1, \"Wrong\"\nassert     catalan_number(2) == 2, \"Wrong\"\nassert     catalan_number(3) == 4, \"Wrong\"\nassert     catalan_number(4) == 14, \"Wrong\"\nassert     catalan_number(5) == 24, \"Wrong\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert catalan_number(4) == 7\nassert catalan_number(8) == 576\nassert catalan_number(15) == 8712000"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 3\nassert     catalan_number(4) == 5\nassert     catalan_number(5) == 8\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs(\"It is a lovely day to be like this\") == [\"ly\"]\nassert     find_adverbs(\"It's a lovely day to be like this\") == []\nassert     find_adverbs(\"It is a lovely day to be like this\") == [\"ly\"]\nassert     find_adverbs(\"it is a lovely day to be like this\") == []\nassert     find_adverbs(\"it's a lovely day to be like this\") == [\"ly\"]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs('This is a beautiful day. A horrible day was not a bad day.') == ['day']\nassert     find_adverbs('The worst day was the best day.') == ['best', 'worst']\nassert     find_adverbs('This is the worst day. The worst day was a perfect day.') == ['worst', 'perfect']\nassert     find_adverbs('The worst day was the perfect day.') == ['perfect']\nassert     find_adverbs('The best day was the perfect day.') == ['best']\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs(\"My brother was walking slowly\") == ('ly', 2)\nassert     find_adverbs(\"My mother was walking slowly\") == ('ly', 4)\nassert     find_adverbs(\"My brother was fast\") == ('ly', 2)\nassert     find_adverbs(\"My sister was fast\") == ('ly', 2)\nassert     find_adverbs(\"I liked them very much\") == ('ly', 6)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs(\"the action was surely not great.\") == []\nassert     find_adverbs(\"it was surely not horrible.\") == []\nassert     find_adverbs(\"it was surely not the worst.\") == []\nassert     find_adverbs(\"it was surely not great.\") == []\nassert     find_adverbs(\"the action was surely horrible.\") == []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverbs('''\n    This is a good morning. It's a really good day. \n    I like going to eat and smoking. I like to go to the \n    bar and play with friends. I love it. It's not bad.\n    I'm worried about the bad weather. It's getting worse.\n    I'm sure I'll marry the devil. And I hope you keep up with me.\n    I love the rain. It's pretty hot. I wish I could go to school today.\n    I love the little world. It's really small. I know no one can hear you.\n    It's beautiful. It's really beautiful. It's beautiful. It's beautiful.\n    I know no one can hear you. It's beautiful. It's beautiful. It's beautiful.\n    It's beautiful. I know no one can hear you. It's beautiful. It's beautiful. It's beautiful.\n    I love the blue sky. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    It's beautiful. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    It's beautiful. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    It's beautiful. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    It's beautiful. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. It's beautiful.\n    I love the rain. It's beautiful. It's beautiful. It's beautiful. I"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs('') == []\nassert     find_adverbs('some random text') == []\nassert     find_adverbs('I am a programmer.') == []\nassert     find_adverbs('I am a programmer and a linguist.') == [(3, 7)]\nassert     find_adverbs('Linguists are the best programmers.') == [(0, 4)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverbs(\"I like to travel and study abroad in spring.\") == (('in', 5), ('ly', 8))\nassert     find_adverbs(\"He took the bus\") == ()\nassert     find_adverbs(\"He took the bus quietly\") == ()\nassert     find_adverbs(\"He took the bus quietly and got on the bus\") == ()\nassert     find_adverbs(\"He took the bus quietly and got on the bus\") == (('quietly', 9),)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverbs(\"I've arrived at my mother's house. I am very excited about the new house!\") == \\\n    {'first': 5,'second': 10, 'third': 11}\n\nassert     find_adverbs(\"I've arrived at my mother's house. I am very excited about the new house!\") == \\\n    {'first': 5,'second': 10, 'third': 11}\n\nassert     find_adverbs(\"I've arrived at my mother's house. I am very excited about the new house!\") == \\\n    {'first': 5,'second': 10, 'third': 11}\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs('The cat jumped over the dog.') ==    [1, 7], 'Bad'\nassert     find_adverbs('The quick brown fox jumped over the lazy dog.') ==    [5, 10], 'Bad'\nassert     find_adverbs('The horse said to the pony to jump over the head.') ==    [], 'Bad'\nassert     find_adverbs('The horse said to the pony to jump over the head but the hippo did not jump over the head.') ==    [], 'Bad'\nassert     find_adverbs('The horse said to the pony to jump over the head but the hippo did not jump over the head.') ==    [], 'Bad'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs('')== ()\nassert     find_adverbs('')== ()\nassert     find_adverbs('')== ()\nassert     find_adverbs('who are you')== ()\nassert     find_adverbs('how are you')== ()\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items(['Sticks','Tires','Backpack','Boots'], 1) == ['Sticks'], \"Expected ['Sticks'], Actual: ['Sticks']\"\nassert     expensive_items(['Sticks','Tires','Backpack','Boots'], 2) == ['Tires','Backpack'], \"Expected ['Tires','Backpack'], Actual: ['Tires','Backpack']\"\nassert     expensive_items(['Sticks','Tires','Backpack','Boots'], 3) == ['Tires','Backpack','Boots'], \"Expected ['Tires','Backpack','Boots'], Actual: ['Tires','Backpack','Boots']\"\nassert     expensive_items(['Sticks','Tires','Backpack','Boots'], 4) == ['Tires','Backpack','Boots'], \"Expected ['Tires','Backpack','Boots'], Actual: ['Tires','Backpack','Boots']\"\nassert     expensive_items(['Sticks','Tires','Backpack','Boots'], 5) == ['Tires','Backpack','Boots'], \"Expected ['Tires','Backpack','Boots'], Actual: ['Tires','Backpack','Boots']\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     expensive_items(\n    [\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n    ],\n    5\n)\n\nassert     expensive_items(\n    [\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n    ],\n    4\n)\n\nassert     expensive_items(\n    [\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n        {\"name\": \"pip\", \"price\": 79},\n    ],\n    3\n)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items([(100,2), (100,3), (100,1), (1000,1), (1000,1), (2000,1), (2000,1)], 2) == [(2000,1), (1000,1)]\nassert expensive_items([(100,2), (100,3), (100,1), (1000,1), (1000,1), (2000,1), (2000,1)], 5) == [(2000,1), (1000,1), (1000,1), (2000,1), (100,1)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     expensive_items([20,40,60,10],2) == [60, 40]\nassert     expensive_items([20,40,60,10],1) == [60]\nassert     expensive_items([20,40,60,10],0) == []\nassert     expensive_items([20,40,60,10],4) == []\nassert     expensive_items([20,40,60,10],5) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"\\nCheck the correctness of expensive_items:\")\nassert expensive_items([(5,2), (4,4), (1,10), (3,3)], 3) == [(4,4), (1,10), (3,3)]\nassert expensive_items([(5,2), (4,4), (1,10), (3,3)], 0) == []\nassert expensive_items([], 0) == []\nprint(\"\\nPassed all tests!\")\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     expensive_items([(2, 'laptop'), (3, 'laptop'), (5, 'laptop'), (2, 'phone'), (5, 'phone'), (2, 'laptop'), (3, 'laptop'), (2, 'phone'), (2, 'phone'), (3, 'laptop'), (5, 'phone'), (3, 'phone'), (2, 'laptop'), (3, 'phone'), (3, 'phone'), (2, 'laptop'), (3, 'phone'), (5, 'phone'), (3, 'laptop'), (3, 'phone'), (5, 'laptop'), (2, 'phone'), (3, 'laptop'), (2, 'phone'), (2, 'laptop'), (3, 'phone'), (3, 'laptop'), (5, 'phone'), (5, 'laptop'), (2, 'laptop'), (5, 'phone'), (3, 'phone'), (2, 'laptop'), (3, 'laptop'), (5, 'phone')],4) ==[(2, 'laptop'), (2, 'phone'), (3, 'laptop'), (2, 'phone')]\nassert     expensive_items([(2, 'laptop'), (3, 'laptop'), (5, 'laptop'), (2, 'phone'), (5, 'phone'), (2, 'laptop'), (3, 'laptop'), (2, 'phone'), (2, 'phone'), (3, 'laptop'), (5, 'phone'), (3, 'phone'), (2, 'laptop'), (3, 'phone'), (3, 'phone'), (2, 'laptop'), (3, 'phone'), (5, 'phone'), (3, 'laptop'), (3, 'phone'), (5, 'laptop'), (2, 'phone'), (3, 'laptop'), (2, 'phone'), (2, 'laptop'), (3, 'phone'), (3, 'laptop'), (5, 'phone'), (5, 'laptop'), (2, 'laptop'), (5, 'phone'), (3, 'phone'), (2, 'laptop'), (3, 'laptop'), (5, 'phone')],2) ==[(2, 'laptop'), (2, 'phone'), (3, 'laptop'), (2, 'phone')]\n\ndef expensive_items_huffman(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n\ndef cost_huffman(node):\n    '''\n    Write a function to find the cost of a Huffman Tree\n    '''\n    pass\n\ndef create_huffman_tree(items,n):\n    '''\n    Write a function to create a Huffman Tree\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n\n\n\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # your code here\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,item)\n        else:\n            if item >= heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     expensive_items([(3, 4, 2), (4, 5, 2), (5, 4, 2)], 2) == [(4, 5, 2)]\nassert expensive_items([(3, 4, 2), (4, 5, 2), (5, 4, 2)], 5) == [(3, 4, 2), (5, 4, 2), (4, 5, 2)]\nassert expensive_items([(3, 4, 2), (4, 5, 2), (5, 4, 2)], 6) == [(4, 5, 2)]\nassert expensive_items([(3, 4, 2), (4, 5, 2), (5, 4, 2)], 0) == []\nassert expensive_items([(3, 4, 2)], 2) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     expensive_items([('bob','monkeys'), ('alice', 'colts'), ('carol', 'zebra'), ('david', 'horse'), ('bob', 'lions'), ('carol','monkeys')], 3) == ['bob', 'carol', 'alice']\nassert expensive_items([('bob','monkeys'), ('alice', 'colts'), ('carol', 'zebra'), ('david', 'horse'), ('bob', 'lions'), ('carol','monkeys')], 4) == ['carol', 'bob', 'alice', 'david']\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_Arr(['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango'], 2) == ['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango']\nassert     split_Arr(['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango'], 1) == ['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango']\nassert     split_Arr(['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango'], 0) == ['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango']\nassert     split_Arr(['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango'], 4) == ['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango']\nassert     split_Arr(['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango'], -3) == ['apple', 'banana', 'cherry', 'orange', 'kiwi','melon','mango']\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\ndef split_Arr(arr, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    temp = arr[:n]\n    temp.reverse()\n    arr = temp + arr[n:]\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_Arr([1,2,3,4,5], 1) == [1, 2, 3, 4]\nassert     split_Arr([1,2,3,4,5], 2) == [1, 2, 3]\nassert     split_Arr([1,2,3,4,5], 3) == [1, 2, 3]\nassert     split_Arr([1,2,3,4,5], 4) == [1, 2]\nassert     split_Arr([1,2,3,4,5], 5) == [1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7], 3) == [[1,2,3],[4,5,6],[7,None,None]]\nassert     split_Arr([1,2,3,4,5,6,7], 6) == [[1,2,3],[4,5,6],[7,None,None]]\nassert     split_Arr([1,2,3,4,5,6,7], 0) == [[1,2,3],[4,5,6],[7,None,None]]\nassert     split_Arr([1,2,3,4,5,6,7], 2) == [[1,2],[3,4],[5,6],[7,None]]\nassert     split_Arr([1,2,3,4,5,6,7], 4) == [[1,2],[3,4],[5,6],[7,None]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_Arr([1,2,3,4,5,6], 3) == [[1,2,3],[4,5,6]]\nassert     split_Arr([], 3) == []\nassert     split_Arr([1,2,3,4,5], 2) == [[1,2], [3,4,5]]\nassert     split_Arr([1,2,3,4,5], 1) == [[1,2,3,4,5]]\nassert     split_Arr([1,2,3,4,5], 0) == [[1,2,3,4,5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('\\n')\n\ndef reverse_String(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef swap(l, pos1, pos2):\n    '''\n    Write a python function to swap 2 elements in a list\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef insert_between(l, e, x):\n    '''\n    Write a python function to insert an element between the nth and (n+1)th element in a list\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert list_tuple([]) == ()\nassert list_tuple([1, 2, 3]) == (1, 2, 3)\nassert list_tuple([1, 1, 1]) == (1, 1, 1)\nassert list_tuple([1, 'a', 1]) == (1, 'a', 1)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert list_tuple([1,2,3]) == (1,2,3), \"Function did not convert a list to a tuple.\"\nassert list_tuple([\"a\",\"b\",\"c\"]) == (\"a\",\"b\",\"c\"), \"Function did not convert a list to a tuple.\"\nassert list_tuple([]) == (), \"Function did not convert a list to a tuple.\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5), \"Wrong result\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert list_tuple([1, 2, 3]) == (1, 2, 3)\nassert list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert list_tuple((1, 2, 3)) == (1, 2, 3)\nassert list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_tuple([1, 2, 3, 4]) == (1, 2, 3, 4), \\\n    \"Wrong output!\"\nassert list_tuple(None) == None, \"Wrong output!\"\nassert list_tuple(\"hello\") == None, \"Wrong output!\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    #return \n    # return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\nassert list_tuple([(1, 2), (3, 4), (5, 6)]) == (1, 2, 3, 4, 5, 6)\nassert list_tuple([(1, 2, 3)]) == (1, 2, 3)\nassert list_tuple([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nassert list_tuple([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple(listx=[1,2,3]) == (1,2,3)\nassert     list_tuple(listx=[1,2,3,'a','b','c']) == (1,2,3,'a','b','c')\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_diff([10, 3, 5, 6]) == 3\nassert     big_diff([2, 11, 9, 0]) == 3\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_diff([5, 7, 10, 3]) == 7\nassert     big_diff([10, 7, 3, 11, 5, 2]) == 17\n\n\n\n\n\ndef check_leap_year(year):\n    '''\n    Write a python function to check whether a year is a leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_diff([4,3,2,1]) == 1\nassert     big_diff([-12,-9,-2,-6,-9]) == 14\nassert     big_diff([-10,-10,10,-10,0]) == 20\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([]) == 0, \"empty list\"\nassert     big_diff([1,2,3,4]) == 0, \"single element\"\nassert     big_diff([1,2,3,4,5]) == 3, \"all unique\"\nassert     big_diff([10,9,8,7,6,5,4,3,2,1]) == 17, \"unique and ordered\"\nassert     big_diff([-10,9,8,7,6,5,4,3,2,1]) == 17, \"negatives\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     big_diff([-5, -10, -3, -2, -12, 4, 3, 4, 5, 11, 42]) == 16\nassert     big_diff([1, 2, 10, 3, -4, -5, -6, -10, -2, -7, -8, 10]) == 18\nassert     big_diff([4, 2, 1, 3, -2, -4, -5, -6, -10, 10]) == 9\nassert     big_diff([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0\nassert     big_diff([-10, 10, 10, -10]) == 20\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_diff([-1, 2, 6, -4]) == 4\nassert     big_diff([3, 6, -10, -4, 10]) == 14\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef big_diff_2(nums):\n    '''\n    Given an array, write a function that finds the pair of adjacent elements that have the largest\n    difference and returns a list containing these two elements\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    big_diff([2,4,3]) == 3\n    \nassert \n    big_diff([0,3,1]) == 3\n    \nassert \n    big_diff([-1,2]) == 2\n    \n\ndef find_max(nums):\n    '''\n    Write a python function to find the largest element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert perfect_squares(1, 5) == [1, 4]\nassert perfect_squares(3, 9) == [3, 4, 6]\nassert perfect_squares(4, 5) == [4, 4]\nassert perfect_squares(0, 10) == []\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perfect_squares(4,9) == (1,4)\nassert perfect_squares(6,36) == (1,36)\nassert perfect_squares(6,36) == (1,36)\nassert perfect_squares(9,36) == (1,36)\nassert perfect_squares(9,36) == (1,36)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return a**2 == b or b**2 == a"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef positive_negative_sum(a, b, c):\n    '''\n    Write a function that returns the sum of the three numbers if they are positive\n    and -sum if they are negative.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perfect_squares(4, 1) == 8\nassert perfect_squares(2, 1) == 2\nassert perfect_squares(4, 2) == 5\nassert perfect_squares(4, 4) == 1\nassert perfect_squares(4, 5) == 8\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    perfect_squares(3, 8) == [-1, ]\n    perfect_squares(0, 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n    perfect_squares(9, 5) == [1, ]\n    perfect_squares(0, 0) == [-1, ]\n    perfect_squares(6, 9) == [-1, ]\n\n\n\ndef fib_recur(n):\n    '''\n    Write a function that returns the nth Fibonacci number, using recursion.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     polar_rect(1,2) == (0.5, 1.41421)\nassert     polar_rect(1,0) == (0.5, 0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     polar_rect(1,0) == (0,1)\nassert     polar_rect(0,0) == (0,0)\nassert     polar_rect(0,1) == (0,1)\nassert     polar_rect(1,1) == (0,1)\nassert     polar_rect(1,2) == (0,1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     polar_rect(0,1) == (0,1)\nassert     polar_rect(1,1) == (1,1)\nassert     polar_rect(-1,1) == (-1,1)\nassert     polar_rect(0,-1) == (0,-1)\nassert     polar_rect(1,-1) == (1,-1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     polar_rect(0, 0) == (0,0)\nassert     polar_rect(0, 3) == (0,3)\nassert     polar_rect(1, 0) == (1,0)\nassert     polar_rect(1, 3) == (1,3)\nassert     polar_rect(2, 0) == (2,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    polar_rect(0,0) == (0,0)\n    polar_rect(0,1) == (0,1)\n    polar_rect(1,0) == (1,0)\n    polar_rect(1,1) == (1,1)\n    polar_rect(1,-1) == (0,0)\n    polar_rect(1,-2) == (1,0)\n    polar_rect(-1,0) == (-1,0)\n    polar_rect(-1,1) == (1,0)\n    polar_rect(-2,0) == (-2,0)\n    polar_rect(-2,1) == (-1,1)\n    polar_rect(-2,-1) == (-1,-1)\n    polar_rect(-2,-2) == (-2,-2)\n    polar_rect(0,0) == (0,0)\n    polar_rect(0,1) == (0,1)\n    polar_rect(1,0) == (1,0)\n    polar_rect(1,1) == (1,1)\n    polar_rect(1,-1) == (0,0)\n    polar_rect(1,-2) == (1,0)\n    polar_rect(-1,0) == (-1,0)\n    polar_rect(-1,1) == (1,0)\n    polar_rect(-2,0) == (-2,0)\n    polar_rect(-2,1) == (-1,1)\n    polar_rect(-2,-1) == (-1,-1)\n    polar_rect(-2,-2) == (-2,-2)\n\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     polar_rect(0,0) == (0,0)\nassert     polar_rect(1,0) == (0,0)\nassert     polar_rect(1,1) == (0,0)\nassert     polar_rect(1,2) == (0,0)\nassert     polar_rect(1,3) == (0,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     polar_rect(1,1) == (-1.0, 1.0), 'Wrong result for test 1'\nassert     polar_rect(1,-1) == (-1.0, -1.0), 'Wrong result for test 2'\nassert     polar_rect(1,0) == (-1.0, 0.0), 'Wrong result for test 3'\nassert     polar_rect(1,-1/cmath.sqrt(2)) == (-1.0, -1.0), 'Wrong result for test 4'\nassert     polar_rect(0,1) == (0.0, 1.0), 'Wrong result for test 5'\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     polar_rect(1,1) == (0.0,0.0), \"Wrong solution for the test case 1\"\nassert     polar_rect(1,-1) == (0.0,pi), \"Wrong solution for the test case 2\"\nassert     polar_rect(3,1) == (-sqrt(3),0.0), \"Wrong solution for the test case 3\"\nassert     polar_rect(3,-1) == (sqrt(3),pi), \"Wrong solution for the test case 4\"\nassert     polar_rect(-3,1) == (-sqrt(3),0.0), \"Wrong solution for the test case 5\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List(['A','B','C','D','E']) == ['E','D','C','B','A']\nassert     swap_List(['A','B','C','D','E']) == ['D','C','B','A','E']\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nswap_List([1, 2, 3, 4, 5]) ==[5, 1, 2, 3, 4]\nswap_List([1, 2, 3, 4]) ==[4, 1, 2, 3]\nswap_List([1, 2, 3]) ==[2, 1, 3]\nswap_List([1]) ==[1]"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3]) == [3,1,2], \"test failed\"\nassert swap_List([1,2,3,4,5]) == [4,3,2,1,5], \"test failed\"\n\ndef has_duplicates(list_of_numbers):\n    '''\n    Write a python function to check whether a list contains any duplicates or not.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [6,5,4,3,2,1]\nassert     swap_List([1,2,3,4,5]) == [5,4,3,2,1]\nassert     swap_List([1,2,3]) == [3,2,1]\nassert     swap_List([1]) == [1]\nassert     swap_List([]) == []\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nswap_List([1,2,3,4,5]) == [5,4,3,2,1], \"failed\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List(['a','e','i','o','u','y']) == ['y','u','i','o','e','a'], \"Wrong Answer\"\nassert     swap_List(['a','b','c','d']) == ['d','c','b','a'], \"Wrong Answer\"\nassert     swap_List(['n','y','t','h','o','r','l','e']) == ['l','e','t','h','o','r','n','y'], \"Wrong Answer\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3,4,5]) == None, 'Error in swap_List()'\nassert swap_List([4,5,6,7,8]) == None, 'Error in swap_List()'\nassert swap_List([]) == None, 'Error in swap_List()'\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(5,3) == 23\nassert     binomial_Coeff(6,4) == 210\nassert     binomial_Coeff(3,1) == 3\nassert     binomial_Coeff(6,0) == 1"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nbinomial_Coeff(n=6,k=6)==24, \"n=6, k=6 should be 24\"\nassert binomial_Coeff(n=5,k=3)==4, \"n=5, k=3 should be 4\"\nassert binomial_Coeff(n=1,k=1)==1, \"n=1, k=1 should be 1\"\nassert binomial_Coeff(n=2,k=2)==1, \"n=2, k=2 should be 1\"\nassert binomial_Coeff(n=3,k=3)==3, \"n=3, k=3 should be 3\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     binomial_Coeff(6,5) == 1\nassert     binomial_Coeff(3,2) == 7\nassert     binomial_Coeff(4,3) == 6\nassert     binomial_Coeff(20,3) == 11\nassert     binomial_Coeff(10,2) == 55\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_binomial_Coeff():\n    assert binomial_Coeff(0, 0) == 1\n    assert binomial_Coeff(1, 0) == 1\n    assert binomial_Coeff(2, 0) == 1\n    "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     binomial_Coeff(0,0) == 0\nassert     binomial_Coeff(1,0) == 1\nassert     binomial_Coeff(2,0) == 1\nassert     binomial_Coeff(3,0) == 1\nassert     binomial_Coeff(4,0) == 2\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     binomial_Coeff(0,0) == 0\nassert     binomial_Coeff(0,1) == 0\nassert     binomial_Coeff(1,0) == 1\nassert     binomial_Coeff(1,1) == 1\nassert     binomial_Coeff(2,0) == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     binomial_Coeff(2,3) == 4, \"Example test case failed\"\nassert     binomial_Coeff(0,5) == 1, \"Example test case failed\"\nassert     binomial_Coeff(0,0) == 0, \"Example test case failed\"\nassert     binomial_Coeff(3,3) == 6, \"Example test case failed\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(0,0) == 1, \"passed\"\nassert     binomial_Coeff(1,1) == 1, \"passed\"\nassert     binomial_Coeff(2,1) == 1, \"passed\"\nassert     binomial_Coeff(3,1) == 1, \"passed\"\nassert     binomial_Coeff(4,1) == 1, \"passed\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(5,3)==20\nassert     binomial_Coeff(5,2)==10\nassert     binomial_Coeff(5,4)==60\nassert     binomial_Coeff(5,6)==210\nassert     binomial_Coeff(5,8)==300"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3'\nassert     removezero_ip('0.0.1.2') == '0.0.1.2'\nassert     removezero_ip('0.0.0.1') == '0.0.0.1'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0') == '0.0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     removezero_ip(\"255.0.0.0\") == \"255.0.0.0\", \"pass\"\nassert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\", \"pass\"\nassert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\", \"pass\"\nassert     removezero_ip(\"255.0.0.0\") == \"255.0.0.0\", \"pass\"\nassert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\", \"pass\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip('255.0.0.0') == '255.0.0.0'\nassert     removezero_ip('0.255.255.255') == '0.255.255.255'\nassert     removezero_ip('1.255.255.255') == '1.255.255.255'\nassert     removezero_ip('2.255.255.255') == '2.255.255.255'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3', 'WRONG'\nassert     removezero_ip('0.1.2.3.4') == '0.1.2.3.4', 'WRONG'\nassert     removezero_ip('0.1.2.3.0') == '0.1.2.3.0', 'WRONG'\nassert     removezero_ip('0.1.2.3.4.0') == '0.1.2.3.4.0', 'WRONG'\nassert     removezero_ip('1.2.3.4.0.0') == '1.2.3.4.0.0', 'WRONG'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     removezero_ip('0.0.0.0') == '0.0.0.0', \"Your function does not seem to work. Please check your code.\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3'\nassert     removezero_ip('0.1.2.3.4') == '0.1.2.3.4'\nassert     removezero_ip('0.1.2.3.4.5') == '0.1.2.3.4.5'\nassert     removezero_ip('0.1.2.3.4.5.6') == '0.1.2.3.4.5.6'\nassert     removezero_ip('0.1.2.3.4.5.6.7') == '0.1.2.3.4.5.6.7'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef parse_ip_address_ranges(input_string):\n    '''\n    Write a function that accepts a string as input and returns a list of ip address ranges given as input.\n    '''\n    # Your code here\n    pass\n\ndef parse_ip_address_ranges2(input_string):\n    '''\n    Write a function that accepts a string as input and returns a list of ip address ranges given as input.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     removezero_ip(\"192.168.1.10\") == \"192.168.1.10\"\nassert     removezero_ip(\"0.168.1.10\") == \"0.168.1.10\"\nassert     removezero_ip(\"0.0.1.10\") == \"0.0.1.10\"\nassert     removezero_ip(\"192.168.1.000\") == \"192.168.1.000\"\nassert     removezero_ip(\"0.168.1.000\") == \"0.168.1.000\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip('0.1.1.1') == '1.1.1.1'\nassert     removezero_ip('0.1.1.1.1.1.1.1') == '1.1.1.1.1.1.1.1'\nassert     removezero_ip('1.1.1.1') == '1.1.1.1'\nassert     removezero_ip('1.1.1.1.1.1.1.1') == '1.1.1.1.1.1.1'\nassert     removezero_ip('1.1.1.1.1.1.1.1.1.1.1') == '1.1.1.1.1.1.1.1.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef removezero_ip_2(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert \n    diff_even_odd([1, 2, 3, 4, 5, 6, 7]) == 2\nassert \n    diff_even_odd([1, 2, 3, 4, 5, 6]) == 4\nassert \n    diff_even_odd([1, 2, 3, 4, 5]) == 0\nassert \n    diff_even_odd([1, 2, 3, 4]) == 2\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     diff_even_odd([1,2,3,4,5]) == 3\nassert     diff_even_odd([1,2,3,4,5]) == 5\nassert     diff_even_odd([1,2,3,4,5,5]) == 0\nassert diff_even_odd([1,2,3,4,5,6]) == 2\nassert     diff_even_odd([1,2,3,4,5,6,6]) == 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     diff_even_odd([]) == []\nassert     diff_even_odd([1,2]) == []\nassert     diff_even_odd([1,1]) == []\nassert     diff_even_odd([1,2,3,4,5]) == []\nassert     diff_even_odd([1,2,3,4,5,6]) == []\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     diff_even_odd([1,2,3,4,5]) == 0, \"Fail at testing even_odd\"\nassert     diff_even_odd([10,11,12,13,14,15]) == 1, \"Fail at testing even_odd\"\nassert     diff_even_odd([1,2,3,4,5,6]) == 2, \"Fail at testing even_odd\"\nassert     diff_even_odd([1,2,3,4,5,7,8,9,10]) == 3, \"Fail at testing even_odd\"\nprint('Test passed!')\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert diff_even_odd([1,2,3,4,5,6]) == 2\nassert diff_even_odd([1,2,3,4,5,6,7]) == 6\nassert diff_even_odd([1,2,3,4,5,6,7,8,9]) == 6\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Read the list of numbers\n    list1 = [int(i) for i in input().split()]\n    \n    # call the diff_even_odd function and print the result\n    print(diff_even_odd(list1)"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndiff_even_odd([1,2,3,4]) == 2\n\nprint(\"\\nthis is the end of the file\")\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Swaps('1100', '1010') == 1, 'Test 1 Failed'\nassert     min_Swaps('1101', '1010') == 1, 'Test 2 Failed'\nassert     min_Swaps('1110', '1010') == 2, 'Test 3 Failed'\nassert     min_Swaps('1111', '1010') == 2, 'Test 4 Failed'\nassert     min_Swaps('1100', '1011') == 2, 'Test 5 Failed'\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Swaps(\"1111\", \"111\") == 3, \"Wrong\"\nassert     min_Swaps(\"0111\", \"111\") == 3, \"Wrong\"\nassert     min_Swaps(\"1111\", \"010\") == 4, \"Wrong\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_Swaps(\"100\", \"1010101\") == 0\nassert     min_Swaps(\"001101\", \"1110101\") == 2\nassert     min_Swaps(\"101\", \"101\") == 0\nassert     min_Swaps(\"11\", \"100\") == 1\nassert     min_Swaps(\"11101\", \"10011\") == 2\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Swaps('101','1101') == 1\nassert     min_Swaps('10101','110101') == 2\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_size((1, 2, 3, 4, 5)) == 20 \nassert     tuple_size((2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)) == 48 \nassert     tuple_size(('a', 'b', 'c', 'd', 'e')) == 20 \nassert     tuple_size(('a', 'b', 'c', 'd', 'e', 'f')) == 20 \nassert     tuple_size(('a', 'b', 'c', 'd', 'e', 'f', 'g')) == 20 \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_size(()) == 1\nassert     tuple_size((1,)) == 1\nassert     tuple_size((1,2,3,4)) == 4\nassert     tuple_size((1,2,3)) == 3\nassert     tuple_size((1,2,3,4,5,6,7)) == 10\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_size([]) == 0\nassert     tuple_size([1,2,3,4,5,6]) == 20\nassert     tuple_size([10,20,30]) == 40\nassert     tuple_size([3.0,4.0,5.0,6.0]) == 40\nassert     tuple_size([3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,41.0,42.0,43.0,44.0,45.0,46.0,47.0,48.0,49.0,50.0,51.0,52.0,53.0,54.0,55.0,56.0,57.0,58.0,59.0,60.0,61.0,62.0,63.0,64.0,65.0,66.0,67.0,68.0,69.0,70.0,71.0,72.0,73.0,74.0,75.0,76.0,77.0,78.0,79.0,80.0,81.0,82.0,83.0,84.0,85.0,86.0,87.0,88.0,89.0,90.0,91.0,92.0,93.0,94.0,95.0,96.0,97.0,98.0,99.0,100.0,101.0,102.0,103.0,104.0,105.0,106.0,107.0,108.0,109.0,110.0,111.0,112.0,113.0,114.0,115.0,116.0,117.0,118.0,119.0,120.0,121.0,122.0,123.0,124.0,125.0,126.0,127.0,128.0,129.0,130.0,131.0,132.0,133.0,134.0,135.0,136.0,137.0,138.0,139.0,140.0,141.0,142.0,143.0,144.0,145.0,146.0,147.0,148.0,149.0,150.0,151.0,152.0,153.0,154.0,155.0,156.0,157.0,158.0,159.0,160.0,161.0,162.0,163.0,164.0,165.0,166.0,167.0,168.0,169.0,170.0,171.0,172.0,173.0,174.0,175.0,176.0,177.0,178.0,179.0,180.0,181.0,182.0,183.0,184.0,185.0,186.0,187.0,188.0,189.0,190.0,191.0,192.0,193.0,194.0,195.0,196.0,197.0,198.0,199.0,200.0,201.0,202.0,203.0,204.0,205.0,206.0,207.0,208.0,209.0,210.0,211.0,212.0,213.0,214.0,215.0,216.0,217.0,218.0,219.0,220.0,221.0,222.0,223.0,224.0,225.0,226.0,227.0,228.0,229.0,230.0,231.0,232.0,233.0,234.0,235.0,236.0,237.0,238.0,239.0,240.0,241.0,242.0,243.0,244.0,245.0,246.0,247.0,248.0,249.0,250.0,251.0,252.0,253.0,254.0,255.0,256.0,257.0,258.0,259.0,260.0,261.0,262.0,263.0,264.0,265.0,266.0,267.0,268.0,269.0,270.0,271.0,272.0,273.0,274.0,275.0,276.0,277.0,278.0,279.0,280.0,281.0,282.0,283.0,284.0,285.0,286.0,287.0,288.0,289.0,290.0,291.0,292.0,293.0,294.0,295.0,296.0,297.0,298.0,299.0,300.0,301.0,302.0,303.0,304.0,305.0,306.0,307.0,308.0,309.0,310.0,311.0,312.0,313.0,314.0,315.0,316.0,317.0,318.0,319.0,320.0,321.0,322.0,323.0,324.0,325.0,326.0,327.0,328.0,329.0,330.0,331.0,332.0,333.0,334.0,335.0,336.0,337.0,338.0,339.0,340.0,341.0,342.0,343.0,344.0,345.0,346.0,347.0,348.0,349.0,350.0,351.0,352.0,353.0,354.0,355.0,356.0,357.0,358.0,359.0,360.0,361.0,362.0,363.0,364.0,365.0,366.0,367.0,368.0,369.0,370.0,371.0,372.0,373.0,374.0,375.0,376.0,377.0,378.0,379.0,380.0,381.0,382.0,383.0,384.0,385.0,386.0,387.0,388.0,389.0,390.0,391.0,392.0,393.0,394.0,395.0,396.0,397.0,398.0,399.0,400.0,401.0,402.0,403.0,404.0,405.0,406.0,407.0,408.0,409.0,410.0,411.0,412.0,413.0,414.0,415.0,416.0,417.0,418.0,419.0,420.0,421.0,422.0,423.0,424.0,425.0,426.0,427.0,428.0,429.0,430.0,431.0,432.0,433.0,434.0,435.0,436.0,437.0,438.0,439.0,440.0,441.0,442.0,443.0,444.0,445.0,446.0,447.0,448.0,449.0,450.0,451.0,452.0,453.0,454.0,455.0,456.0,457.0,458.0,459.0,460.0,461.0,462.0,463.0,464.0,465.0,466.0,467.0,468.0,469.0,470.0,471.0,472.0,473.0,474.0,475.0,476.0,477.0,478.0,479.0,48"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_size([('a', 1), ('b', 1)]) == (2, 2)\nassert     tuple_size([('a', 1), ('a', 1)]) == (2, 2)\nassert     tuple_size([('a', 1), ('a', 2), ('a', 3)]) == (6, 3)\nassert     tuple_size([('a', 1), ('a', 2), ('a', 2), ('a', 3)]) == (6, 6)\nassert     tuple_size([('a', 1), ('a', 2), ('a', 2), ('a', 3)]) == (6, 6)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_size([(1,2,3)]) == 6, \"Wrong answer\"\nassert tuple_size([(1,2)]) == 2, \"Wrong answer\"\nassert tuple_size([(1,2,3,4,5)]) == 10, \"Wrong answer\"\nassert tuple_size([(1,2),(3,4)]) == 4, \"Wrong answer\"\nassert tuple_size([(1,2,3,4,5),(6,7,8,9,10)]) == 20, \"Wrong answer\"\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_size((1,2,3)) == 6\nassert     tuple_size((5,1,2)) == 6\nassert     tuple_size((3,1,3)) == 6\nassert     tuple_size((2,5,4,1,2,3)) == 24\nassert     tuple_size((2,3,2)) == 8\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert tuple_size((1,2,3)) == 6\nassert tuple_size((2,3,4)) == 9\nassert tuple_size((1.1,2.2,3.3)) == 10\nassert tuple_size((2.2,3.3,4.4)) == 13\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_size([]) == 0\nassert tuple_size([1,2,3]) == 0\nassert tuple_size((1,)) == 1\nassert tuple_size((1,2,3,4)) == 4\nassert tuple_size((1,2,3,4,5)) == 10\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_size(()) == 1, \"tuple_size for empty tuple should be 0 bytes\"\nassert tuple_size((None,)) == 1, \"tuple_size for empty tuple should be 0 bytes\"\nassert tuple_size((1,)) == 1, \"tuple_size for empty tuple should be 0 bytes\"\nassert tuple_size((1,1)) == 2, \"tuple_size for empty tuple should be 0 bytes\"\nassert tuple_size((1,1,1)) == 3, \"tuple_size for empty tuple should be 0 bytes\"\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_kth([1,2,3,4,5,6,7,8,9,10], [2,5,8,12,14,17], 3) == 5, \"Wrong answer, expected: 5\"\nassert     find_kth([1,2,3,4,5,6,7,8,9,10], [2,5,8,12,14,17], 2) == 2, \"Wrong answer, expected: 2\"\nassert     find_kth([1,2,3,4,5,6,7,8,9,10], [2,5,8,12,14,17], 1) == 2, \"Wrong answer, expected: 2\"\nassert     find_kth([1,2,3,4,5,6,7,8,9,10], [2,5,8,12,14,17], 10) == 9, \"Wrong answer, expected: 9\"\nassert     find_kth([1,2,3,4,5,6,7,8,9,10], [2,5,8,12,14,17], 0) == 2, \"Wrong answer, expected: 2\"\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_kth([1,2,3,5,7], [1,4,6,7,9], 5) == 3\nassert     find_kth([1,2,3,5,7], [1,4,6,7,9], 6) == 4\nassert     find_kth([1,2,3,5,7], [1,4,6,7,9], 8) == 5\nassert     find_kth([1,2,3,5,7], [1,4,6,7,9], 9) == 6\nassert     find_kth([1,2,3,5,7], [1,4,6,7,9], 0) == -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_kth([1, 3, 4], [2, 5, 6], 2) == 2\nassert find_kth([5, 4, 3], [2, 1, 0], 2) == 2\nassert find_kth([5, 5, 5], [2, 2, 2], 2) == 5\nassert find_kth([1], [2], 1) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_kth_recursive(arr1, arr2, k):\n    '''\n    Write a function that finds the kth element from two sorted arrays.\n    Return -1 if k is larger than the sum of arr1 and arr2.\n    '''\n    \n    # if k is greater than the sum of the two arrays, return -1\n    if k > (arr1[-1] + arr2[-1]):\n        return -1\n    \n    # if k is smaller than the sum of the two arrays, find the Kth element\n    elif arr1[-1] < arr2[-1]:\n        if k == 0:\n            return arr1[0]\n        else:\n            return find_kth(arr1[1:], arr2, k-1)\n    \n    else:\n        return arr2[0]\n\ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from two sorted arrays.\n    Return -1 if k is larger than the sum of arr1 and arr2.\n    '''\n    \n    # if k is greater than the sum of arr1 and arr2, return -1\n    if k > (arr1[-1] + arr2[-1]):\n        return -1\n    \n    # if k is smaller than the sum of arr1 and arr2, find the Kth element\n    elif arr1[-1] < arr2[-1]:\n        if k == 0:\n            return arr1[0]\n        else:\n            return find_kth(arr1[1:], arr2, k-1)\n    \n    else:\n        return arr2[0]\n\n\ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from two sorted arrays.\n    Return -1 if k is larger than the sum of arr1 and arr2.\n    '''\n    \n    # if k is greater than the sum of arr1 and arr2, return -1\n    if k > (arr1[-1] + arr2[-1]):\n        return -1\n    \n    # if k is smaller than the sum of arr1 and arr2, find the Kth element\n    elif arr1[-1] < arr2[-1]:\n        if k == 0:\n            return arr1[0]\n        else:\n            return find_kth(arr1, arr2[1:], k-1)\n    \n    else:\n        return arr2[0]\n\ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from two sorted arrays.\n    Return -1 if k is larger than the sum of arr1 and arr2.\n    '''\n    # if k is greater than the sum of arr1 and arr2, return -1\n    if k > (arr1[-1] + arr2[-1]):\n        return -1\n    \n    # if k is smaller than the sum of arr1 and arr2, find the Kth element\n    elif arr1[-1] < arr2[-1]:\n        if k == 0:\n            return arr1[0]\n        else:\n            return find_kth(arr1, arr2[1:], k-1)\n    \n    else:\n        return arr2[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_kth(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        l, r = arr1, arr2\n    else:\n        l, r = arr2, arr1\n    while l < r:\n        mid = (l + r) // 2\n        if k < mid:\n            r = mid - 1\n        elif k > mid:\n            l = mid + 1\n        else:\n            return arr2[mid]\n    return l"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_kth([1,2,3,4,5], [2,4,6,8,10], 3) == 2\nassert     find_kth([1,2,3,4,5], [2,4,6,8,10], 4) == 4\n\n\n\ndef find_median(arr1, arr2):\n    '''\n    Write a function to find median of two arrays\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     armstrong_number(10) == True, \"Your function does not give correct result\"\nassert     armstrong_number(12) == False, \"Your function does not give correct result\"\nassert     armstrong_number(13) == True, \"Your function does not give correct result\"\nassert     armstrong_number(153) == True, \"Your function does not give correct result\"\nassert     armstrong_number(1013) == False, \"Your function does not give correct result\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     armstrong_number(153) == True, '153 is armstrong number'\nassert     armstrong_number(115) == False, '115 is not armstrong number'\nassert     armstrong_number(15345) == False, '15345 is not armstrong number'\nassert     armstrong_number(1) == False, '1 is not armstrong number'\nassert     armstrong_number(15345454) == True, '15345454 is armstrong number'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     armstrong_number(153) == True, \"Armstrong_number wrong\"\nassert     armstrong_number(900) == True, \"Armstrong_number wrong\"\nassert     armstrong_number(10) == False, \"Armstrong_number wrong\"\nassert     armstrong_number(100) == False, \"Armstrong_number wrong\"\nassert     armstrong_number(153) == True, \"Armstrong_number wrong\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     armstrong_number(9) == True, \"It should be true\"\nassert     armstrong_number(13) == True, \"It should be true\"\nassert     armstrong_number(1) == False, \"It should be false\"\nassert     armstrong_number(0) == False, \"It should be false\"\nassert     armstrong_number(39) == False, \"It should be false\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(153)    == True,         \"153 is not armstrong_number\"\nassert     armstrong_number(371)    == False,        \"371 is armstrong_number\"\nassert     armstrong_number(407)    == False,        \"407 is armstrong_number\"\nassert     armstrong_number(909)    == True,        \"909 is armstrong_number\"\nassert     armstrong_number(803)    == False,        \"803 is armstrong_number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef test_armstrong_number():\n    print('Testing armstrong_number()... ', end='')\n    assert armstrong_number(153) == True\n    assert armstrong_number(10) == False\n    assert armstrong_number(30) == False\n    assert armstrong_number(15345) == True\n    "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     armstrong_number(153) == True, '153 is Armstrong'\nassert     armstrong_number(371) == False, '371 is not Armstrong'\nassert     armstrong_number(653) == False, '653 is not Armstrong'\nassert     armstrong_number(4564) == True, '4564 is Armstrong'\nassert     armstrong_number(0) == False, '0 is not Armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('passed')"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     armstrong_number(3) == True, \"3 should be an Armstrong number\"\nassert     armstrong_number(17) == True, \"17 should be an Armstrong number\"\nassert     armstrong_number(371) == False, \"371 should not be an Armstrong number\"\nassert     armstrong_number(2468) == False, \"2468 should not be an Armstrong number\"\nassert     armstrong_number(10) == False, \"10 should not be an Armstrong number\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_average(1) == 1, 'function should return 1'\nassert     sum_average(2) == 3, 'function should return 3'\nassert     sum_average(3) == 6, 'function should return 6'\nassert     sum_average(4) == 10, 'function should return 10'\nassert     sum_average(5) == 15, 'function should return 15'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not\nassert sum_average(10) == (0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10) / 10 == \n'Should be 0.55'\nassert not\nassert sum_average(20) == (0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20) / 20 == \n'Should be 5.9'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(5) == (5+5+5+5+5) / 5\nassert     sum_average(10) == (10+10+10+10+10+10+10+10+10+10) / 10\nassert     sum_average(100) == (100+100+100+100+100+100+100+100+100+100) / 100\nassert     sum_average(1000) == (1000+1000+1000+1000+1000+1000+1000+1000+1000+1000) / 1000\nassert     sum_average(10000) == (10000+10000+10000+10000+10000+10000+10000+10000+10000+10000) / 10000\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_average(4) == 8, 'incorrect result (expected 8, got %s)' % sum_average(4)\nassert     sum_average(8) == 22, 'incorrect result (expected 22, got %s)' % sum_average(8)\nassert     sum_average(16) == 32, 'incorrect result (expected 32, got %s)' % sum_average(16)\nassert     sum_average(1) == 1, 'incorrect result (expected 1, got %s)' % sum_average(1)\n\ndef get_summ(n):\n    '''\n    Write a function which returns n!\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_average(5) == 10\nassert     sum_average(1) == 1\nassert     sum_average(0) == 0\n\nprint(\"correct\")\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_average(1) == 0\nassert     sum_average(2) == 1\nassert     sum_average(10) == 55\nassert     sum_average(15) == 100\nassert     sum_average(20) == 200\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_average(4) == 7.0, \"incorrect result\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_average(1) == 1.0\nassert     sum_average(10) == 45.0\nassert     sum_average(1000000) == 499500.0\nassert     sum_average(0) == 0.0\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsum_average(0) == 0\nsum_average(1) == 1\nsum_average(2) == 1\nsum_average(10) == 55\nsum_average(100) == 550\nsum_average(1000) == 5350\nsum_average(10000) == 55350\nsum_average(100000) == 555550\nsum_average(1000000) == 5575550\nsum_average(10000000) == 55555555\nsum_average(100000000) == 555555666\nsum_average(1000000000) == 55555555666666\nsum_average(10000000000) == 55555555666666666\nsum_average(100000000000) == 55555555666666666666\nsum_average(1000000000000) == 55555555666666666666666\nsum_average(10000000000000) == 55555555666666666666666666\nsum_average(10000000000001) == 555555556666666666666666666\nsum_average(1000000000000100) == 5555555566666666666666666666\nsum_average(10000000000001000) == 555555556666666666666666666666\nsum_average(100000000000010000) == 55555555666666666666666666666\nsum_average(1000000000000100000) == 55555555666666666666666666666\nsum_average(10000000000001000000) == 55555555666666666666666666666\nsum_average(100000000000010000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001000000000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000000001) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001000000000000100) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000000001000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000000000010000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001000000000000100000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000000001000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000000000010000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001000000000000100000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000000000010000000000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001000000000000100000000000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000000001000000000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000000000010000000000000) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000000000010000000000001) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000000001000000000000100) == 55555555666666666666666666666\nsum_average(1000000000000100000000000010000000000001000000000000100000000000010000000000001000) == 55555555666666666666666666666\nsum_average(10000000000001000000000000100000000000010000000000001000000000000100000000000010000) == 55555555666666666666666666666\nsum_average(100000000000010000000000001000000000000100000000000010000000000001000000000000100000) == 55555555666666666666666666666\nsum_average"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_average(4) == (1 + 2 + 3 + 4) / 4 == 3.3333333333\nassert sum_average(1) == (1) == 1\nassert sum_average(0) == (1) == 1\n\n\ndef sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Even(1) == False, \"1 is not even\"\nassert     is_Even(2) == True, \"2 is even\"\nassert     is_Even(8) == True, \"8 is even\"\nassert     is_Even(4) == False, \"4 is not even\"\n\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Even(1) == False\nassert     is_Even(2) == True\nassert     is_Even(3) == False\nassert     is_Even(4) == True\nassert     is_Even(5) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_Even(4) == False \nassert is_Even(1) == True \nassert is_Even(10) == False \nassert is_Even(2) == False \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Even(2)         ==    True\nassert is_Even(-1)         ==    False\nassert is_Even(0)         ==    True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Even(5) == True, \"is_Even returns False for 5\"\nassert     is_Even(0) == True, \"is_Even returns True for 0\"\nassert     is_Even(2) == True, \"is_Even returns True for 2\"\nassert     is_Even(1) == False, \"is_Even returns False for 1\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Even(10) == False \nassert is_Even(2) == True \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Even(5) == False, \"is_Even does not seem to be working\"\nassert     is_Even(6) == True, \"is_Even does not seem to be working\""
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_Even(2) == True, 'input is 2, the output should be True'\nassert is_Even(9) == False, 'input is 9, the output should be False'\nassert is_Even(10) == True, 'input is 10, the output should be True'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char('abcdefg') == 'e'\nassert     first_repeated_char('aabcdefgh') == 'e'\nassert     first_repeated_char('abcccccdefgh') == 'c'\nassert     first_repeated_char('abcdeeefgh') == None\nassert     first_repeated_char('abcdeeegh') == None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char('abc') == -1,'should return -1 if there is no repeated character'\nassert     first_repeated_char('abcabc') == -1,'should return -1 if there is no repeated character'\nassert     first_repeated_char('abcabcabc') == -1,'should return -1 if there is no repeated character'\nassert     first_repeated_char('aabaabaab') == -1,'should return -1 if there is no repeated character'\nassert     first_repeated_char('aaaa') == -1,'should return -1 if there is no repeated character'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_repeated_char('cat') == 'a'\nassert     first_repeated_char('dog') == 'g'\nassert     first_repeated_char('apple') == 'a'\nassert     first_repeated_char('racer') == 'c'\nassert     first_repeated_char('racecar') == 'c'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef all_numbers_occur_atleast_twice(nums):\n    '''\n    Write a python function to find all numbers that occur atleast twice in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char('') == None\nassert     first_repeated_char('hello') == None\nassert     first_repeated_char('hellofr') == 0\nassert     first_repeated_char('hellohello') == 0\nassert     first_repeated_char('hehehehe') == -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert first_repeated_char('geeksforgeeks') =='s'\nassert first_repeated_char('google') == 'o'\nassert first_repeated_char('baba') == 'b'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(3) == [1, 2, 3]\nassert     get_ludic(4) == [1, 2, 3, 4]\nassert     get_ludic(5) == [1, 2, 3, 4, 5]\nassert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_ludic(2) == [1]\nassert     get_ludic(10) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(13) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_ludic(100) == [1, 4, 7, 10, 13, 16, 19, 23, 26, 29, 32, 37, 41, 44, 47, 50, 53, 56, 59, 62, 65, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97]\nassert     get_ludic(5) == [1, 2, 3, 4, 5]\nassert     get_ludic(6) == [1, 2, 3, 4, 5, 6]\nassert     get_ludic(7) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(10) == [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]\nassert     get_ludic(100) == []\nassert     get_ludic(10)!= get_ludic(10)[:-1]\nassert     get_ludic(6)!= get_ludic(5)\nassert     get_ludic(1)!= get_ludic(2)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef print_it(n):\n    '''\n    Write a function to print the integers in a given list between 0 and n.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_ludic(1) == []\nassert get_ludic(2) == [2]\nassert get_ludic(3) == [2]\nassert get_ludic(4) == [2]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(1) == []\nassert     get_ludic(2) == [1]\nassert     get_ludic(3) == [1, 2]\nassert     get_ludic(4) == [1, 2, 3]\nassert     get_ludic(5) == [1, 2, 3, 4]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_ludic(1) ==     [1]\nassert     get_ludic(2) ==     [1, 2]\nassert     get_ludic(10) ==     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_ludic(100) ==     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     get_ludic(1000) ==     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_words('I am a boy.') == 'boy a I am'\nassert     reverse_words('This is a text.') == 'text This is a'\nassert     reverse_words('This is a') == 'is a This'\nassert     reverse_words('This is a text.') == 'text This is a'\nassert     reverse_words('This is a text.') == 'text This is a'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_words(\"hello there my name is John\") == \"olleh terem na my nam Jhjno\"\nassert     reverse_words(\"my name is John\") == \"olleh terem na my nam Jhjno\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # s = 'i like apples'\n    # print(s)\n    # s = 'i like apples'\n    # print(s)\n    # s = 'i like apples'\n    # print(s)\n    # s = 'i like apples'\n    # print(s)\n\n    # print(s.split(' '))\n    # for i in s.split(' '):\n        # print(i)\n\n    # print(s)\n    # for i in range(len(s.split(' '))-1, -1, -1):\n        # print(s.split(' ')[i])\n\n    # print(s.split(' '))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_words(\"Hi my name is John\") == \"john my name is Hi\"\nassert     reverse_words(\"  space is very important\") == \"very important space is  \"\nassert     reverse_words(\"Don't forget me\") == \"forget me Don't\"\n\nprint(\"PASS\" if (reverse_words(\"Hi my name is John\") == \"john my name is Hi\") else \"FAIL\")\nprint(\"PASS\" if (reverse_words(\"  space is very important\") == \"very important space is  \") else \"FAIL\")\nprint(\"PASS\" if (reverse_words(\"Don't forget me\") == \"forget me Don't\") else \"FAIL\")\n\n'''\nExpected output:\nPASS\nPASS\nPASS\n''"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_words(\"the sky is blue\") == \"blue is sky the\"\nassert     reverse_words(\"  hello world!  \") == \"world! hello\"\nassert     reverse_words(\"a good   example\") == \"example good a\"\nassert     reverse_words(\"I love Python\") == \"Python love I\"\nassert     reverse_words(\"\") == \"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    reverse_words('one at a time') == 'eone ot a n'\n    reverse_words('two words') == 'word tw owrds'\n    reverse_words('three words') == 'word'\n    reverse_words('a little word') == 'n a l i w o'\n    reverse_words('three words, two words') == 'wo rd, ttwo words'\n    reverse_words('a little word, little word') == 'a l i w o n a l'\n    reverse_words('a, little, word, word, little, word') == 'word word, a, i, w, o, l, n'\n    reverse_words('') == ''\n    reverse_words('') == ''\n    reverse_words(' ') ==''\n    reverse_words('') == ''\n    reverse_words(' ') ==''"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_words(\"I am an NLPer\") == \"am an nlpeR\"\nassert     reverse_words(\"I am a boy\") == \"a am I\"\nassert     reverse_words(\"I like Python\") == \"Python a I\""
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_words(\" \") == \"\", \"input empty string\"\nassert     reverse_words(\"a\") == \"a\", \"input single word\"\nassert     reverse_words(\"a b\") == \"ba b\", \"input single word\"\nassert     reverse_words(\"a b c\") == \"cba b\", \"input single word\"\nassert     reverse_words(\"a b c d\") == \"dcba b\", \"input single word\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nYou are given an array of integers.\n\nReturn the maximum possible sum you can get by summing up all the integers in the array.\n\nFor example, if the array is {1,2,3}, you should return 5 since you can sum up all the integers in the array.\n\nIf the array is {1,2,3,4}, the maximum sum is 3 + 3 + 4 = 7.\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_num(1) == True\nassert     prime_num(2) == False\nassert     prime_num(3) == True\nassert     prime_num(4) == False\nassert     prime_num(5) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not \n\ndef prime_num_1(num):\n    '''\n    Write a program to check if the given integer is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_num(7) == True\nassert     prime_num(1) == False\nassert     prime_num(5) == True\n\ndef product_n(n):\n    '''\n    Write a function that returns the product of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_primes(n):\n    '''\n    Write a function to count the prime numbers in the range of n.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef is_prime(num):\n    '''\n    Check whether a given integer is a prime number or not.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert prime_num(5) is True\nassert prime_num(4) is False\nassert prime_num(11) is True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prime_num(1) == False\nassert     prime_num(2) == False\nassert     prime_num(3) == True\nassert     prime_num(4) == False\nassert     prime_num(13) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_num(21) == True, '21 is not prime'\nassert     prime_num(22) == False, '22 is not prime'\nassert     prime_num(23) == True, '23 is not prime'\nassert     prime_num(25) == True, '25 is not prime'\nassert     prime_num(26) == False, '26 is not prime'\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    radian_degree(180) == 0\n    radian_degree(360) == 2 * pi\n\n'''\nWrite a function that takes a number and returns its square root.\n'''\n\ndef square_root(n):\n    '''\n    Write a function to return the square root of a number.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     radian_degree(90)==math.pi/2\nassert     radian_degree(180)==math.pi\nassert     radian_degree(270)==3*math.pi/2\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(radian_degree(90))\nprint(radian_degree(180))\nprint(radian_degree(360))\nprint(radian_degree(0))\nprint(radian_degree(6.28318531))\n\ndef radian_degree_2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert radian_degree(90) == math.pi / 2\nassert radian_degree(0) == 0\nassert radian_degree(-90) == math.pi / 2\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef length_of_a_segment(x1, y1, x2, y2):\n    '''\n    Write a function to find the length of a segment from (x1, y1) to (x2, y2).\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    #assert radian_degree(90) == math.pi/2\n    #assert radian_degree(-45) == math.pi/4\n    #assert radian_degree(180) == math.pi\n    #assert radian_degree(360) == math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     radian_degree(90) == math.pi/2\nassert radian_degree(180) == math.pi\nassert radian_degree(360) == 2*math.pi\n\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(radian_degree(45))\nprint(radian_degree(180))\nprint(radian_degree(360))\nprint(radian_degree(0))\nprint(radian_degree(-10))\n\ndef sin(degree):\n    '''\n    Write a function to compute the sine of a given degree.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals('This is a string', '^\\d\\d\\d') == ('This', 0, 3)\nassert     find_literals('This is a string', '^\\d\\d\\d\\d') == ('', -1, -1)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_literals(\"foo\", \"foo\") == (0, 1, 2)\nassert     find_literals(\"foo\", \"foobar\") == (0, 1, 4)\nassert     find_literals(\"foo\", \"foobaz\") == (0, 1, 4)\nassert     find_literals(\"foo\", \"foobaz\") == (0, 1, 4)\nassert     find_literals(\"foobar\", \"foo\") == (1, 2, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_literals(\"foo-bar\", \"foo\") == (0, 6, None)\nassert     find_literals(\"foo-bar\", \"bar\") == (1, 8, None)\nassert     find_literals(\"foo-bar\", \"foobar\") == (0, 7, None)\nassert     find_literals(\"foo-bar\", \"fooobar\") == (0, 6, None)\nassert     find_literals(\"foo-bar\", \"fooo\") == (0, 4, None)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals(\"\", \"\") == (None, 0, 0)\nassert     find_literals(\"\", \"a\") == (None, 0, 0)\nassert     find_literals(\"\", \".\") == (None, 0, 0)\nassert     find_literals(\"\", \"a.b\") == (None, 0, 0)\nassert     find_literals(\"\", \"^a\") == (None, 0, 0)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_literals('foo', '(foo)') == (0, 0, 3)\nassert     find_literals('abcdef', 'a[bc]') == (0, 3, 5)\nassert     find_literals('abcdef', 'a[bc]*') == (0, 3, 6)\nassert     find_literals('abcdef', 'a[bc]*?') == (0, 3, 5)\nassert     find_literals('abcdef', 'a[bc]+') == (0, 3, 5)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_literals(\"abcdeabcde\", r\"\\bab\\b\") == ('abcdeabcde', 0, 10)\nassert     find_literals(\"abcdeabcdeabcde\", r\"\\bab\\b\") == ('abcdeabcdeabcde', 0, 15)\nassert     find_literals(\"abcdeabcdeabcde\", r\"\\babc\\b\") == ('abcdeabcde', 0, 5)\nassert     find_literals(\"abcdeabcdeabcde\", r\"\\babc\\b\") == ('abcdeabcdeabcde', 0, 5)\nassert     find_literals(\"abcdeabcdeabcde\", r\"\\bab\\b\") == ('abcdeabcdeabcde', 0, 10)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_literals(\"aaaaaaaaaaaab\", \"a\") == (\"aaaaaaaaaab\", 0, 10)\nassert     find_literals(\"aaaaaaaaaaaab\", \"a\") == (\"aaaaaaaaaab\", 0, 10)\nassert     find_literals(\"aaaaaaaaaaaab\", \"b\") == (\"\", -1, -1)\nassert     find_literals(\"aaaaaaaaaaaab\", \"a+\") == (\"a\", 0, 5)\nassert     find_literals(\"aaaaaaaaaaaab\", \"a*\") == (\"aaaaaaaaaab\", 0, 10)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals(\"hello world, hello, hello world\", \"hello\") == (12, 15, 18)\nassert find_literals(\"hello world, hello, hello world\", \"world\") == (0, 4, 7)\nassert find_literals(\"hello world, hello, hello world\", \"ello\") == (0, 3, 7)\nassert find_literals(\"hello world, hello, hello world\", \"o\") == (0, 4, 5)\nassert find_literals(\"hello world, hello, hello world\", \"hell\") == (0, 2, 5)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_literals(\"MyPatternFoundThis\", \"123\") == ('123', 0, 3), \"find_literals(\\\"MyPatternFoundThis\\\", \\\"123\\\")!= '123'\"\nassert     find_literals(\"MyPatternFoundThis\", \"123\") == ('123', 0, 3), \"find_literals(\\\"MyPatternFoundThis\\\", \\\"123\\\")!= '123'\"\nassert     find_literals(\"MyPatternFoundThis\", \"123\") == ('123', 0, 3), \"find_literals(\\\"MyPatternFoundThis\\\", \\\"123\\\")!= '123'\"\nassert     find_literals(\"MyPatternFoundThis\", \"123\") == ('123', 0, 3), \"find_literals(\\\"MyPatternFoundThis\\\", \\\"123\\\")!= '123'\"\nassert     find_literals(\"MyPatternFoundThis\", \"123\") == ('123', 0, 3), \"find_literals(\\\"MyPatternFoundThis\\\", \\\"123\\\")!= '123'\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_Number(1) == 0, \"bell_Number(1) is wrong\"\nassert     bell_Number(2) == 1, \"bell_Number(2) is wrong\"\nassert     bell_Number(3) == 1, \"bell_Number(3) is wrong\"\nassert     bell_Number(4) == 2, \"bell_Number(4) is wrong\"\nassert     bell_Number(5) == 2, \"bell_Number(5) is wrong\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 5\nassert     bell_Number(4) == 15\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef power_Sum(x,n):\n    '''\n    Write a python function to find nth power sum of x.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_Number(1) == 1, \"bell_Number(1) should be 1\"\nassert     bell_Number(2) == 2, \"bell_Number(2) should be 2\"\nassert     bell_Number(3) == 5, \"bell_Number(3) should be 5\"\nassert     bell_Number(4) == 8, \"bell_Number(4) should be 8\"\nassert     bell_Number(5) == 13, \"bell_Number(5) should be 13\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_Number(1) == 1, \"bell_Number(1) = 1\"\nassert bell_Number(2) == 2, \"bell_Number(2) = 2\"\nassert bell_Number(3) == 3, \"bell_Number(3) = 3\"\nassert bell_Number(4) == 4, \"bell_Number(4) = 4\"\nassert bell_Number(5) == 5, \"bell_Number(5) = 5\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 3\nbell_Number(4) == 5\nbell_Number(5) == 8\nbell_Number(6) == 13\nbell_Number(7) == 20\nbell_Number(8) == 30\nbell_Number(9) == 35\nbell_Number(10) == 40\nbell_Number(11) == 45\nbell_Number(12) == 55\nbell_Number(13) == 70\nbell_Number(14) == 85\nbell_Number(15) == 110\nbell_Number(16) == 130\nbell_Number(17) == 155\nbell_Number(18) == 185\nbell_Number(19) == 220\nbell_Number(20) == 290\nbell_Number(21) == 350\nbell_Number(22) == 430\nbell_Number(23) == 560\nbell_Number(24) == 750\nbell_Number(25) == 995\nbell_Number(26) == 1325\nbell_Number(27) == 1755\nbell_Number(28) == 2175\nbell_Number(29) == 2775\nbell_Number(30) == 3425\nbell_Number(31) == 4185\nbell_Number(32) == 4850\nbell_Number(33) == 5945\nbell_Number(34) == 7485\nbell_Number(35) == 9495\nbell_Number(36) == 12495\nbell_Number(37) == 15495\nbell_Number(38) == 18495\nbell_Number(39) == 2205\nbell_Number(40) == 2725\nbell_Number(41) == 3495\nbell_Number(42) == 4495\nbell_Number(43) == 5525\nbell_Number(44) == 6785\nbell_Number(45) == 8785\nbell_Number(46) == 9725\nbell_Number(47) == 12785\nbell_Number(48) == 15785\nbell_Number(49) == 18785\nbell_Number(50) == 24785\nbell_Number(51) == 3785\nbell_Number(52) == 4785\nbell_Number(53) == 5785\nbell_Number(54) == 6785\nbell_Number(55) == 7785\nbell_Number(56) == 8785\nbell_Number(57) == 9785\nbell_Number(58) == 12785\nbell_Number(59) == 15785\nbell_Number(60) == 18785\nbell_Number(61) == 2405\nbell_Number(62) == 3225\nbell_Number(63) == 4225\nbell_Number(64) == 5225\nbell_Number(65) == 6325\nbell_Number(66) == 7275\nbell_Number(67) == 8275\nbell_Number(68) == 9275\nbell_Number(69) == 11225\nbell_Number(70) == 12275\nbell_Number(71) == 13275\nbell_Number(72) == 14275\nbell_Number(73) == 15275\nbell_Number(74) == 16275\nbell_Number(75) == 17275\nbell_Number(76) == 18275\nbell_Number(77) == 19695\nbell_Number(78) == 20995\nbell_Number(79) == 23995\nbell_Number(80) == 26995\nbell_Number(81) == 29595\nbell_Number(82) == 32505\nbell_Number(83) == 35505\nbell_Number(84) == 38575\nbell_Number(85) == 40575\nbell_Number(86) == 42505\nbell_Number(87) == 45505\nbell_Number(88) == 48575\nbell_Number(89) == 50575\nbell_Number(90) == 52655\nbell_Number(91) == 54855\nbell_Number(92) == 57555\nbell_Number(93) == 59555\nbell_Number(94) == 62355\nbell_Number(95) == 64555\nbell_Number(96) == 67555\nbell_Number(97) == 69555\nbell_Number(98) == 71455\nbell_Number(99) == 74555\nbell_Number(100) == 77555\nbell_Number(101) == 79555\nbell_Number(102) == 81555\nbell_Number(103) == 84555\nbell_Number(104) == 87555\nbell_Number(105) == 90555\nbell_Number(106) == 92655\nbell_Number(107) == 94655\nbell_Number(108) == 97555\nbell_Number(109) == 100555\nbell_Number(110) == 102155\nbell_Number(111) == 105155\nbell_Number(112) == 107155\nbell_Number(113) == 110155\nbell_Number(114) == 113155\nbell_Number(115) == 115155\nbell_Number(116) == 117155\nbell_Number(117) == 119155\nbell_Number(118) == 121555\nbell_Number(119) == 131555\nbell_Number(120) == 141555\nbell_Number(121) == 149555\nbell_Number(122) == 159555\nbell_Number(123) == 161555\nbell_Number(124) == 171555\nbell_Number(125) == 181555\nbell_Number(126) == 191955\nbell_Number(127) == 209555\nbell_Number(128) == 219555\nbell_Number(129) == 239555\nbell_Number(130) == 259555\nbell_Number(131) == 279555\nbell_Number(132) == 299555\nbell_Number(133) == 321555\nbell_Number(134) == 351555\nbell_Number(135) == 381555\nbell_Number(136) == 401555\nbell_Number(137) == 421555\nbell_Number(138) == 451555\nbell_Number(139) == 481555\nbell_Number(140) == 501555\nbell_Number(141) == 5261555\nbell_Number(142) == 5481555\nbell_Number(143) == 5701555\nbell_Number(144) == 591555\nbell_Number(145) == 6151555\nbell_Number(146) == 6451555\nbell_Number(147) == 6751555\nbell_Number(148) == 691555\nbell_Number(149) == 7151555\nbell_Number(150) == 7451555\nbell_Number(151) == 7751555\nbell_Number(152) == 791555\nbell_Number(153) == 8151555\nbell_Number(154) == 8451555\nbell_Number(155) == 8751555\nbell_Number(156) == 901555\nbell_Number(157) == 9261555\nbell_Number(158) == 9461555\nbell_Number(159) == 9751555\nbell_Number(160) == 1001555\nbell_Number(161) == 1021555\nbell_Number(162) == 1051555\nbell_Number(163) == 1071555\nbell_Number(164) == 110155\nbell_Number(165) == 113155\nbell_Number(166) == 115155\nbell_Number(167) == 117155\nbell_Number(168) == 119155\nbell_Number(169) == 121555\nbell_Number(170) == 131555\nbell_Number(171) == 141555\nbell_Number(172) == 149555\nbell_Number(173) == 159555\nbell_Number(174) == 161555\nbell_Number(175) == 171555\nbell_Number(176) == 181555\nbell_Number(177) == 191955\nbell_Number(178) == 209555\nbell_Number(179) == 219555\nbell_Number(180) == 239555\nbell_Number(181) == 259555\nbell_Number(182) == 279555\nbell_Number(183) == 299555\nbell_Number(184) == 321555\nbell_Number(185) == 351555\nbell_Number(186) == 381555\nbell_Number(187) == 401555\nbell_Number(188) == 421555\nbell_Number(189) == 451555\nbell_Number(190) == 481555\nbell_Number(191) == 501555\nbell_Number(192) == 5261555\nbell_Number(193"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_kth_element([1,2,3,4], 1) == [1,2,3,4]\nassert remove_kth_element([1,2,3,4], 0) == []\nassert remove_kth_element([1,2,3,4], 2) == [1,3,4]\nassert remove_kth_element([1,2,3,4], 5) == []\nassert remove_kth_element([1,2,3,4], 0) == []\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 2) == (1,3,4,5,6)\nassert     remove_kth_element([1,2,3,4,5,6], 6) == (1,2,3,4,5)\nassert     remove_kth_element([1,2,3,4,5,6], 1) == (1,2,3,4,5)\nassert     remove_kth_element([1,2,3,4,5,6], 0) == (1,2,3,4,5)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([1, 2, 3, 4], 1) ==[1, 2, 4]\nassert     remove_kth_element([1, 2, 3, 4], 2) ==[1, 3]\nassert     remove_kth_element([1, 2, 3, 4], 3) ==[1]\nassert     remove_kth_element([1, 2, 3, 4], 4) ==[1, 2, 3]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1,2,3], 0) == [1,2,3], \"remove_kth_element() is wrong!\"\nassert     remove_kth_element([1,2,3], 2) == [1,3], \"remove_kth_element() is wrong!\"\nassert     remove_kth_element([1,2,3], 4) == [1,2], \"remove_kth_element() is wrong!\"\nassert     remove_kth_element([1,2,3], 1) == [2,3], \"remove_kth_element() is wrong!\"\nassert     remove_kth_element([1,2,3], 3) == [1,2], \"remove_kth_element() is wrong!\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1,2,3,4], 2) == [1,3,4]\nassert     remove_kth_element([1,2,3,4], 0) == [1,2,3,4]\nassert     remove_kth_element([1,2,3,4], 4) == [1,2,3]\nassert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3,5]\nassert     remove_kth_element([1,2,3,4,5,6], 5) == [1,2,3,4,5]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7],2)==[1,2,3,5,6,7], \"Fail\"\nassert     remove_kth_element([1,2,3,4,5,6,7],5)==[1,2,3,4,6,7], \"Fail\"\nassert     remove_kth_element([1,2,3,4,5,6,7],7)==[1,2,3,4,5,6], \"Fail\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 1) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 2) == [1,2,3,5]\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4]\n\nprint('')\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7,8,9], 3) == [1,2,4,5,6,7,8,9], \"Wrong!\"\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], 0) == [1,2,3,4,5,6,7,8,9], \"Wrong!\"\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], 8) == [1,2,3,4,5,6,7,8], \"Wrong!\"\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], 6) == [1,2,3,4,5,6,7,8], \"Wrong!\"\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], 10) == [1,2,3,4,5,6,7,8], \"Wrong!\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nremove_kth_element([1,2,3,4,5], 3) == [1,2,4,5]\nassert remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4]\nassert remove_kth_element([1,2,3,4,5], 6) == [1,2,3,4]\nassert remove_kth_element([1,2,3,4,5], 7) == [1,2,3,4]\nassert remove_kth_element([1,2,3,4,5], 0) == []\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef min_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_of_nth([[1, 2, 3], \n                      [4, 5, 6], \n                      [7, 8, 9]], 1) == 9, 'incorrect'\nassert     max_of_nth([[1, 2, 3], \n                      [4, 5, 6], \n                      [7, 8, 9]], 2) == 6, 'incorrect'\nassert     max_of_nth([[1, 2, 3], \n                      [4, 5, 6], \n                      [7, 8, 9]], 3) == 9, 'incorrect'\nassert     max_of_nth([[1, 2, 3], \n                      [4, 5, 6], \n                      [7, 8, 9]], 4) == 9, 'incorrect'\nassert     max_of_nth([[1, 2, 3], \n                      [4, 5, 6], \n                      [7, 8, 9]], 5) == 9, 'incorrect'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"Test case 1:\")\nprint(max_of_nth([[1, 2, 3],\n                  [2, 1, 3],\n                  [1, 2, 3]], 1))\n\nassert 3 == 3\n\nprint(\"Test case 2:\")\nprint(max_of_nth([[2, 1, 2, 3],\n                  [2, 1, 2, 3],\n                  [1, 1, 1, 1]], 2))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 1) == 9\nassert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 2) == 6\nassert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 3) == 7\nassert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 4) == 5\nassert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 5) == 5\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]],2) == 6, \"Wrong answer\"\n\ndef matrix_addition(test_matrix_1, test_matrix_2):\n    '''\n    Write a function which given two matrices A and B returns the matrix A + B.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge([[1,2,3], [4,5], [6]]) == [[1, 2, 3], [4, 5], [6]]\nassert     merge([[1,2,3], [4,5], []]) == [[1, 2, 3], [4, 5], []]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert     merge([[2, 3], [5, 6]]) == [[2, 3], [5, 6]]\nassert     merge([[4, 5], [6, 7], [8, 9]]) == [[4, 5], [6, 7], [8, 9]]\nassert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1], [2]]) == [[1], [2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1, 2], [3, 4], None, None]) == [[1, 2], [3, 4]]\nassert     merge([[1, 2], None, None]) == [[1, 2]]\n\n'''\nWrite a python function which takes a dictionary and returns a dictionary.\n'''\ndef dict_to_dict(dict):\n    '''\n    Write a python function which takes a dictionary and returns a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     merge([[1,2],[3,4]],[[1,2],[3,4]]) == [[1,2,1,2],[3,4,3,4]]\nassert     merge([[1,2,1],[3,4,3]]) == [[1,1,2,3],[4,3,4]]\nassert     merge([[1,2],[3,4], [4,5,6]]) == [[1,2],[3,4,4],[5,6,5]]\nassert     merge([[1,2],[3,4],[4,5,6]]) == [[1,2,4,5,6],[3,4]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]], \"Test 1 Failed\"\nassert \nassert merge([[1], [2], [3], [4]]) == [[1, 2], [3, 4]], \"Test 2 Failed\"\nassert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]\nassert     merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge([[1,2], [3,4], [5,6]]) == [[1,2], [3,4], [5,6]]\nassert     merge([[1], [2], [3]]) == [[1], [2], [3]]\nassert     merge([[1,2], [3]]) == [[1, 2], [3]]\nassert     merge([]) == []"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cummulative_sum((4,1,1,1)) == (4,5,6,7)\nassert     cummulative_sum((1,1,1)) == (1,2,3)\nassert     cummulative_sum((1)) == (1)\nassert     cummulative_sum((1,1,1,1,1,1,1,1,1,1,1,1,1)) == (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)\nassert     cummulative_sum((1,2,3,4,5,6,7,8,9)) == (1,3,6,10,15,21,28,36,45,55,66,81,98,108,129,150,162)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum(tuple([1,2,3,4,5])) ==     [1,3,6,10,15]\nassert     cummulative_sum(tuple([3,3,3,3,3,3])) ==     [3,6,9,12,15,18]\nassert     cummulative_sum(tuple([0,0,0,0,0])) ==     [0,0,0,0,0]\nassert     cummulative_sum(tuple([-1,-2,-3,-4,-5])) ==     [-1,-3,-6,-10,-15]\nassert     cummulative_sum(tuple([-1,-2,-3])) ==     [-1,-3,-6]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (cummulative_sum((1, 2, 3))) == (1, 3, 6), \"Test failed!\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (cummulative_sum([1, 2, 3, 4, 5, 6]) == 21)\nassert     (cummulative_sum([1, 3, 4, 5, 6]) == 21)\nassert     (cummulative_sum([1, 2, 3, 4, 5]) == 10)\nassert     (cummulative_sum([1, 2, 3, 4]) == 4)\nassert     (cummulative_sum([1]) == 1)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (cummulative_sum((1, 2, 3, 4, 5))) == (1, 3, 6, 10, 15)\nassert     (cummulative_sum((3, 5, 7, 10, 20, 30, 40, 50, 55, 60))) == (3, 10, 21, 62, 123, 246, 420, 561, 810, 1190, 2340, 4770, 8100, 11900)\nassert     (cummulative_sum((3, 5, 7, 10, 20, 30, 40, 50, 55, 60))) == (3, 10, 21, 62, 123, 246, 420, 561, 810, 1190, 2340, 4770, 8100, 11900)\nassert     (cummulative_sum((3, 5, 7, 10, 20, 30, 40, 50, 55, 60))) == (3, 10, 21, 62, 123, 246, 420, 561, 810, 1190, 2340, 4770, 8100, 11900)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (cummulative_sum([1, 2, 3, 4]) == (1, 3, 6, 10)), \"Wrong result\"\nassert     (cummulative_sum([]) == ()), \"Empty test\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cummulative_sum( (1,3,4,6) ) == 15, \"Please check your code for function 'cummulative_sum'\"\nassert     cummulative_sum( (1,2,3,4) ) == 10, \"Please check your code for function 'cummulative_sum'\"\nassert     cummulative_sum( (1,2,3,4,5) ) == 20, \"Please check your code for function 'cummulative_sum'\"\nassert     cummulative_sum( (1,2,3,4,5,6) ) == 25, \"Please check your code for function 'cummulative_sum'\"\nassert     cummulative_sum( (1,2,3,4,5,6,7) ) == 30, \"Please check your code for function 'cummulative_sum'\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n'''\nQ : What if we change the list to a list of tuples?\n    a. What if we have a tuple, say, (1, 2, 3, 4) in the list?\n    b. What if we have a list of tuples, say, [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)]\n    c. What if we have a list of lists, say, [list(1, 2, 3, 4), list(5, 6, 7, 8), list(9, 10, 11, 12), list(13, 14, 15, 16)]\n    d. What if we have a list of lists, say, [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    e. What if we have a list of lists, say, [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]],\n    list of lists, say, [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]],\n    list of tuples, say, [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)]\n    f. What if the list is empty?\n    \n    Output:\n        [5, 8, 14, 20]\n        \n        [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n        \n        [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)]\n        \n        [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)]\n        \n        []\n        \n        [1, 2, 3, 4]\n        \n        []\n    '''\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncummulative_sum([1, 2, 3, 4, 5]) == 15\nassert cummulative_sum([5, 5, 5, 5, 5]) == 30\n\n\ndef cumulative_sum_2(test_list):\n    '''\n    You need to find the cumulative sum of the list of numbers.\n\n    Sample Input    Expected Output\n    [1, 2, 3, 4, 5]    15\n    [5, 5, 5, 5, 5]    30\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if test_list:\n        return sum(test_list) + cummulative_sum(test_list[1:])\n    else:\n        return 0"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     average_tuple((1,2,3)) == (1,2,3), \"1st case failed\"\nassert     average_tuple(((1,2,3),(3,4,5))) == (3,5,7.5), \"2nd case failed\"\nassert     average_tuple(((1,2,3),(4,5,6))) == (4,5,6.5), \"3rd case failed\"\nassert     average_tuple((((1,2,3),(4,5,6)),((7,8,9),(10,11,12)))) == ((3,5,7.5),(7,8,9.5)), \"4th case failed\"\nassert     average_tuple(((1,2),(3,4))) == (3,4), \"5th case failed\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     average_tuple( (5, 2) ) == [5, 2]\nassert     average_tuple( (2, 5, 3) ) == [2, 2.5, 3]\nassert     average_tuple( (3, 2, 4) ) == [3, 2.5, 4]\nassert     average_tuple( (1, 1, 1, 1) ) == [1, 1, 1, 1]\nassert     average_tuple( (1, 1, 1, 1, 1) ) == [1, 1, 1, 1]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef average_tuple_sum(*args):\n    '''\n    Write a function which takes a tuple of tuples and returns the sum of values for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     average_tuple( (1,4,5) ) == [(1+4+5)/3]\nassert     average_tuple( (1,4,5,6,7) ) == [(1+4+5+6+7)/4]\nassert     average_tuple( (1,5,4) ) == [(1+5+4)/2]\nassert     average_tuple( (1,2,4,5,6) ) == [(1+2+4+5+6)/5]\nassert     average_tuple( (1,2,3,4,5) ) == [(1+2+3+4+5)/5]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     average_tuple([(1,), (2,), (3,), (4,), (5,)] ) == [1, 2, 3, 4, 5], \"Wrong answer.\"\nassert     average_tuple([(2,), (1,), (3,), (4,), (5,)] ) == [2, 1, 3, 4, 5], \"Wrong answer.\"\nassert     average_tuple([(2,), (2,), (2,), (2,), (2,)] ) == [2, 2, 2, 2, 2], \"Wrong answer.\"\nassert     average_tuple([(1,1), (2,2), (3,3), (4,4), (5,5)] ) == [2, 3, 4, 5, 6], \"Wrong answer.\"\nassert     average_tuple([(2,4), (2,4), (2,4), (2,4), (2,4)] ) == [2, 4, 2, 4, 2], \"Wrong answer.\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     average_tuple([\n    [1,2],\n    [4,5]\n]) == [(1+4)/2, (2+5)/2]\n\n\n\ndef average_dict(nums):\n    '''\n    Write a function which takes a dictionary with lists as values and returns the average value for each list as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     average_tuple(((1,2,3), (4,5,6))) == (5.0, 5.0, 5.0)\nassert     average_tuple(((7,8,9), (1,2,3))) == (7.5, 8.5, 9.5)\nassert     average_tuple(((1,), (2,))) == (1.0, )\nassert     average_tuple(((1,2,3), (4,5,6,7))) == (5.0, 5.0, 5.0)\nassert     average_tuple(((7,8,9), (1,2,3,4))) == (7.5, 8.5, 9.5)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     average_tuple((1,3,5,2)) == (2,3,4,2), \"First example is wrong\"\nassert     average_tuple((5,3,5,4)) == (5,3,5,4), \"Second example is wrong\"\nassert     average_tuple((5,5,5,5)) == (5,5,5,5), \"Third example is wrong\"\nassert     average_tuple((3,5,8,2,4,7,9,8,2)) == (4,5,8,2,4,7,9,8,2), \"Fourth example is wrong\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     average_tuple((1,2,3)) == [2.0,2.0,2.0], \"Fail\"\nassert     average_tuple((1,2,3)) == [2.0,2.0,2.0], \"Fail\"\nassert     average_tuple((1,2,3,4)) == [2.0,2.0,2.0,2.0], \"Fail\"\nassert     average_tuple((1,2,3,4)) == [2.0,2.0,2.0,2.0], \"Fail\"\nassert     average_tuple((1,2,3,4)) == [2.0,2.0,2.0,2.0], \"Fail\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (tuple_modulo( (1,2,3), (4,5,6)) == (0,1,2)), \"modulo error\"\nassert     (tuple_modulo( (1,2,3), (2,4,6)) == (1,0,3)), \"modulo error\"\nassert     (tuple_modulo( (1,2,3), (5,6,7)) == (0,1,2)), \"modulo error\"\nassert     (tuple_modulo( (1,2,3), (4,6,8)) == (1,2,0)), \"modulo error\"\nassert     (tuple_modulo( (1,2,3,4), (4,6,7,8)) == (1,2,3,4)), \"modulo error\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \n\ndef list_min(test_list1, test_list2):\n    '''\n    Write a function which takes two lists of equal size and returns the minimum between the two lists.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo((1, 2, 3), (2, 2, 2)) == (0, 1, 1)\nassert     tuple_modulo((1, 2, 3), (0, 0, 0)) == (1, 1, 1)\nassert     tuple_modulo((1, 2, 3), (1, 2, 2)) == (0, 1, 1)\nassert     tuple_modulo((1, 2, 3), (0, 1, 2)) == (1, 0, 1)\nassert     tuple_modulo((1, 2, 3), (1, 0, 2)) == (1, 0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo((2,3), (2,3)) == (0,0)\nassert     tuple_modulo((2,4), (2,3)) == (1,0)\nassert     tuple_modulo((2,5), (2,3)) == (1,1)\nassert     tuple_modulo((2,6), (2,3)) == (1,2)\nassert     tuple_modulo((2,7), (2,3)) == (1,3)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 0)\nassert     tuple_modulo((1, 2, 3), (2, 3, 4)) == (1, 0, 0)\nassert     tuple_modulo((1, 2, 3), (4, 5, 5)) == (0, 0, 0)\n\nprint('TEST: tuple_modulo')\nprint('.......')\nprint('PASSED')\nprint('')\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo(tuple_modulo, (1,2,3,4)) == (1,1,1,1)\nassert     tuple_modulo(tuple_modulo, (4,1,2,3)) == (0,0,0,0)"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_modulo((0, 1, 2, 3, 4, 5), (0, 1, 2, 3, 4, 5)) == (0, 0, 0, 0, 0, 5)\nassert tuple_modulo((1, 1, 2, 3, 4, 5), (0, 1, 2, 3, 4, 5)) == (1, 1, 2, 3, 4, 5)\nassert tuple_modulo((0, 1, 2, 3, 4, 5), (1, 1, 2, 3, 4, 5)) == (0, 1, 2, 3, 4, 5)\nassert tuple_modulo((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (0, 2, 4, 6, 8)\nassert tuple_modulo((1, 2, 3, 4, 5), (0, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_modulo((1,2), (3,4)) == (1,2), \"Wrong tuple result\"\nassert     tuple_modulo((-1,-2), (3,4)) == (3,4), \"Wrong tuple result\"\nassert     tuple_modulo((1,2), (3,0)) == (1,2), \"Wrong tuple result\"\nassert     tuple_modulo((1,0), (3,0)) == (1,0), \"Wrong tuple result\"\nassert     tuple_modulo((0,0), (0,0)) == (0,0), \"Wrong tuple result\"\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert min_Jumps(1, (1,0)) == 1\nassert min_Jumps(2, (2,0)) == 1\nassert min_Jumps(3, (2,0)) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Jumps(5, (0, 0)) == 0, \"Wrong output\"\nassert     min_Jumps(7, (4, 0)) == 2, \"Wrong output\"\nassert     min_Jumps(3, (5, 4)) == 0, \"Wrong output\"\nassert     min_Jumps(4, (0, 0)) == 1, \"Wrong output\"\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Jumps(0, (5, 0)) == 0\nassert     min_Jumps(1, (5, 0)) == 2\nassert     min_Jumps(2, (5, 0)) == 2\nassert     min_Jumps(3, (5, 0)) == 1\nassert     min_Jumps(4, (5, 0)) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(steps = 3, d = 3) == 2\nassert     min_Jumps(steps = 10, d = 5) == 2\nassert     min_Jumps(steps = 9, d = 4) == 3\nassert     min_Jumps(steps = 11, d = 6) == 2\nassert     min_Jumps(steps = 14, d = 8) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_Jumps(steps = 4, d = 2) == 3\nassert     min_Jumps(steps = 3, d = 1) == 2\nassert     min_Jumps(steps = 5, d = 3) == 3\nassert     min_Jumps(steps = 2, d = 4) == 2\nassert     min_Jumps(steps = 1, d = 3) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_Jumps(steps = 4, d = 2) == 2, \\\n            \"Expected 2, but got %s\" % min_Jumps(steps = 4, d = 2)\nassert     min_Jumps(steps = 3, d = 2) == 1, \\\n            \"Expected 1, but got %s\" % min_Jumps(steps = 3, d = 2)\nassert     min_Jumps(steps = 7, d = 3) == 4, \\\n            \"Expected 4, but got %s\" % min_Jumps(steps = 7, d = 3)\nassert     min_Jumps(steps = 4, d = 1) == 0, \\\n            \"Expected 0, but got %s\" % min_Jumps(steps = 4, d = 1)\nassert     min_Jumps(steps = 2, d = 5) == 0, \\\n            \"Expected 0, but got %s\" % min_Jumps(steps = 2, d = 5)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndiv_list([1,2,3,4],[\"a\",\"b\",\"c\"]) == [1/2,2/3,3/4,4/3]"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef eq_list(list1,list2):\n    '''\n    Write a function to check whether two lists are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_list([1,2,3], [3,2,1]) == [[1,3], [2,1]]\nassert     div_list([1,2,3,4], [2,4,3]) == [[1,2], [1,4], [1,3], [1,2]]\nassert     div_list([], []) == []\nassert     div_list([1,2,3,4], []) == [[1,2], [1,3], [1,4]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     div_list([1, 2, 3], [2, 4, 6]) == [[1, 2], [3]]\nassert     div_list([2, 2, 2], [4, 4, 4]) == [[2], [2], [2]]\nassert     div_list([1, 3, 5], [5, 2, 4]) == [[1, 1.5], [3, 2], [5, 2]]\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_num('a1b2c3d4e') == '1c2d4e3a', \"Test Failed\"\nassert     move_num('abcde') == 'edcba', \"Test Failed\"\nassert     move_num('abc') == 'abc', \"Test Failed\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_num('xD') == 'Dx'\nassert     move_num('By?x') == '?Byx'\nassert     move_num('aeiou') == 'aeiou'\nassert     move_num('xA11') == 'A11x'\nassert     move_num('4of5') == 'of5o4'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num('a1b2c3d4e5f6g7h8i9j') == 'gfedcbaihkmoqtw'\nassert     move_num('ae1c2b3gi4h5') == 'hg2ibae4c3'\nassert     move_num('abc') == 'c'\nassert     move_num('a1b2c3d4e5f6g7h8i9j') == 'gfedcbaihkmoqtw'\nassert     move_num('abc') == 'a'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num(\"Hello, 1, 2, 3, 4, 5, 6\") == \", 1, 2, 3, 4, 5, 6, Hello\", \"Wrong\"\nassert     move_num(\"abcde\") == \"abcde, abcde\", \"Wrong\"\nassert     move_num(\"1234!_\") == \"!_1234, 1234\", \"Wrong\"\nassert     move_num(\"4\") == \"4\", \"Wrong\"\nassert     move_num(\"\") == \"\", \"Wrong\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num('a12345') == '54321a', \"Wrong!\"\nassert     move_num('google.com') == 'comgoogle', \"Wrong!\"\nassert     move_num('g') == 'g', \"Wrong!\"\nprint('Well Done!')"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_num(\"example\") == \"e x a m\"\nassert     move_num(\"ab\") == \"a b\"\nassert     move_num(\"a123def\") == \"a1 23 d1f e2\"\nassert     move_num(\"ae\") == \"a e\"\nassert     move_num(\"12345\") == \"12 3 45\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num('a1b2c3d4e') == 'e1b2c3d4a', 'Wrong!'\nassert     move_num('abcde') == 'eabcdea', 'Wrong!'\nassert     move_num('a') == 'a', 'Wrong!'\nassert     move_num('12345') == '54321a', 'Wrong!'\nassert     move_num('a1a2a3a4') == 'a1a2a3a4', 'Wrong!'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num(\"\") == \"\"\nassert     move_num(\"10\") == \"10\"\nassert     move_num(\"h1e2l3l4o5w6e\") == \"heelloworld\"\nassert     move_num(\"1234\") == \"23412\"\n\n'''\nWrite a function to reverse only the vowels in a string.\n'''\ndef rev_vow(test_str):\n    '''\n    Write a function to reverse only the vowels in a string.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([1,2,3,4]) == 8,     \"FAILED\"\nassert     largest_subset([1,2,3,4,5]) == 10,     \"FAILED\"\nassert     largest_subset([1,2,3,4,5,6,7,8,9]) == 20,     \"FAILED\"\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10]) == 30,     \"FAILED\"\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 60,     \"FAILED\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_subset([1,2,3]) == 3, \"1,2,3\"\nassert     largest_subset([3,4,8,16]) == 4, \"3,4,8,16\"\nassert     largest_subset([2,8,16]) == 3, \"2,8,16\"\nassert     largest_subset([16,8,2]) == 3, \"16,8,2\"\nassert     largest_subset([4,8,2]) == 3, \"4,8,2\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_subset([9,1,6,4,8,5,7,9,2,8]) == 5\nassert     largest_subset([9,6,5,1,4,2,7,8,3]) == 5\nassert     largest_subset([1,2,3,4]) == 1\nassert     largest_subset([1,1,1]) == 1\nassert     largest_subset([9]) == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([]) == 0, 'Empty list'\nassert     largest_subset([1,2,3,4,5]) == 5, 'Single element list'\nassert     largest_subset([1,2,3,4,5,6]) == 3, 'Two elements'\nassert     largest_subset([1,2,3,4,5,6,7]) == 4, 'Three elements'\nassert     largest_subset([1,2,3,4,5,6,7,8,9]) == 8, 'Four elements'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_subset([1,2,3,4,5,6]) == 6, 'wrong result'\nassert     largest_subset([1,3,5,7,9]) == 3, 'wrong result'\nassert     largest_subset([1,2,3,4,5,6,7,8,9]) == 9, 'wrong result'\nassert     largest_subset([1,2,3,4,5,6,7]) == 6, 'wrong result'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_subset([2, 3, 4, 5]) == 2, \"Error, the second largest_subset should be 2\"\nassert     largest_subset([1, 3, 4, 5]) == 3, \"Error, the third largest_subset should be 3\"\nassert     largest_subset([2, 3, 4, 5, 7, 8]) == 5, \"Error, the fifth largest_subset should be 5\"\nassert     largest_subset([2, 3, 4, 5, 6, 7, 8]) == 8, \"Error, the sixth largest_subset should be 8\"\nassert     largest_subset([3, 2, 4, 5, 6, 7, 8]) == 8, \"Error, the seventh largest_subset should be 8\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_subset([1,2,3]) == 1, \"1st case doesn't match\"\nassert     largest_subset([1,2,3,4,5]) == 1, \"2nd case doesn't match\"\nassert     largest_subset([1,2,3,4,5,6]) == 2, \"3rd case doesn't match\"\nassert     largest_subset([1,2,3,4,5,6,7]) == 2, \"4th case doesn't match\"\nassert     largest_subset([1,2,3,4,5,6,7,8]) == 2, \"5th case doesn't match\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n26. Write a function that takes in an array of numbers and returns the maximum sum of any contiguous subarray of the array.\n'''\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_subset([2,4,8,16]) == 4\nassert     largest_subset([2,4,8,16,32]) == 4\nassert     largest_subset([2,4,8,16,32,64]) == 4\nassert     largest_subset([1,5,7,9]) == 1\nassert     largest_subset([1,5,7,9,27]) == 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #find the median of the two sorted arrays\n    \n    #traverse through the sorted arrays\n    if n==0:\n        return None\n\n    #split the two arrays into two\n    #the elements are already sorted\n    arr1_ind=0\n    arr2_ind=0\n    arr1_len=len(arr1)\n    arr2_len=len(arr2)\n    median_idx=0\n    while arr1_len>0 or arr2_len>0:\n        #get the smaller of the two lists\n        if arr1_len>=arr2_len:\n            if arr1[arr1_ind]>arr2[arr2_ind]:\n                arr2_ind+=1\n            else:\n                arr1_ind+=1\n        else:\n            if arr2[arr2_ind]>arr1[arr1_ind]:\n                arr1_ind+=1\n            else:\n                arr2_ind+=1\n        #if the 2nd list is not yet finished\n        if arr1_ind==arr1_len:\n            break\n        if arr2_ind==arr2_len:\n            break\n        #compute the median\n        median_idx+=1\n    if median_idx%2==0:\n        return (arr1[(median_idx//2)-1] + arr1[(median_idx//2)])/2\n    else:\n        return arr1[(median_idx//2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_median([1, 2, 3], [4, 5, 6], 3) == 3\nassert get_median([1, 2, 3], [4, 5, 6], 4) == 2.5\nassert get_median([1, 2, 3], [4, 5, 6], 0) == 2.5\n\ndef get_median_sorted_array(nums1, nums2):\n    '''\n    Write a function to find the median of two sorted arrays of different sizes.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_median([1, 2, 3, 4, 5], [5, 6, 7], 5) == 5, \"Wrong\"\nassert     get_median([1, 2, 3, 4, 5], [5, 6, 7], 4) == 3.5, \"Wrong\"\nassert     get_median([1, 2, 3, 4, 5], [5, 6, 7], 3) == 3, \"Wrong\"\nassert     get_median([1, 2, 3, 4, 5], [5, 6, 7], 2) == 2.5, \"Wrong\"\nassert     get_median([1, 2, 3, 4, 5], [5, 6, 7], 1) == 1, \"Wrong\"\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_median([], [], 0) == None, \"get_median([], [], 0): ERROR\"\nassert     get_median([2, 3], [], 1) == None, \"get_median([2, 3], [], 1): ERROR\"\nassert     get_median([2, 3, 5, 7], [1, 2, 3, 4], 2) == 3, \"get_median([2, 3, 5, 7], [1, 2, 3, 4], 2): ERROR\"\nassert     get_median([2, 3, 5, 7], [1, 2, 4, 3], 2) == 2, \"get_median([2, 3, 5, 7], [1, 2, 4, 3], 2): ERROR\"\nassert     get_median([2, 3, 5, 7, 11], [1, 2, 3, 4], 2) == 2, \"get_median([2, 3, 5, 7, 11], [1, 2, 3, 4], 2): ERROR\"\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_median([1, 2, 3], [4, 5, 6]) == 5\nassert     get_median([1, 2, 3], [4, 5, 6], 3) == 3\nassert     get_median([1, 2], [3, 4, 5], 3) == 2.5\nassert     get_median([1, 2], [3, 4, 5], 2) == 2\nassert     get_median([1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11], 10) == 6\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_median([1, 2], [3, 4], 2) == 2\nassert     get_median([1], [2], 1) == 1\nassert     get_median([1, 1], [2, 2], 2) == 1.5\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     nth_nums([0,1,2],2) == [0,1,4]\nassert nth_nums([1,2,3,4,5],2) == [1,4,9]\nassert nth_nums([1,2,3,4,5],10) == []\nassert nth_nums([0,1,2,3,4,5,6,7,8,9,10],10) == [0,1,4,9,16,25,36,49,64,81,100]\nassert nth_nums([1,2,3,4,5],0) == []\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert nth_nums([1,2,3],3) == 27\nassert nth_nums([1,2,3],2) == 9\nassert nth_nums([1,2,3],1) == 1\nassert nth_nums([1,2,3],0) == 1\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnth_nums([1,2,3],1) == [1,2,3]\nnth_nums([1,2,3],2) == [1,4,9]\nnth_nums([1,2,3],3) == [1,8,27]\nnth_nums([1,2,3],4) == [1,9,64]\nnth_nums([1,2,3],5) == []\nnth_nums([1,2,3],6) == []\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert nth_nums([1,2,3,4],2) ==[2,4,9,16]\nassert nth_nums([2,3,4],1) ==[2,3,4]\nassert nth_nums([2],1) ==[2]\nassert nth_nums([1],1) ==[1]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nA list of list\n'''\nnth_nums([1,2,3,4,5],2)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnth_nums([1,2],1) == [1]\nnth_nums([1,2],2) == [1,2]\nnth_nums([1,2],3) == [1,2,1,2]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nnums = [1,2,3]\nn = 5\nexpected = [1,2,9,16,25]\nactual = nth_nums(nums,n)\nassert expected == actual\nprint(\"Successfully tested nth_nums\")\n\nprint(\"=\"*50)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef nth_factorial(n):\n    '''\n    Write a function to calculate n! in the fastest way.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_upper(\"i love python\") == False\nassert     is_upper(\"Hello World\") == True"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('Testing is_upper...')\ntest_string = 'Hello'\nassert is_upper(test_string)\ntest_string = 'hey'\nassert is_upper(test_string)\ntest_string = 'HELLO'\nassert is_upper(test_string)\ntest_string = 'hey'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Completed\")"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_upper('shiva') == True\nassert     is_upper('nishanth') == False\nassert     is_upper('SHIVA') == False\nassert     is_upper('Nishanth') == False\nassert     is_upper('Shiva') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_upper(\"\") == False, \"Empty string\"\nassert     is_upper(\"A\") == True, \"One character\"\nassert     is_upper(\"a\") == False, \"One character\"\nassert     is_upper(\"  \") == False, \"Two space\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_upper('Hello') == False, \"First test case failed.\"\nassert is_upper('HELLO') == True, \"Second test case failed.\"\nassert is_upper('hello') == False, \"Third test case failed.\"\nassert is_upper('HELLO WORLD') == True, \"Fourth test case failed.\"\n\ndef is_upper_case_string(string):\n    '''\n    Write a python function to check whether a given string is in upper case.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_upper(\"lower\") == False\n    is_upper(\"UPPER\") == True\n    is_upper(\"\") == False\n    is_upper(\"LOWER\") == False\n    is_upper(\"lower\") == False\n    is_upper(\"LOWER&UPPER\") == False\n    is_upper(\"UPPER&LOWER\") == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_upper('sajad') == False\nassert     is_upper('Sajad') == True\nassert     is_upper('Sajad') == False\nassert     is_upper('Sajjad') == True\n\nprint('Checking is_upper is PASSED.')\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_upper('rishi') == False\nassert     is_upper('Rishi') == True\nassert     is_upper('RiSiTh') == True\nassert     is_upper('Ri SiTh') == True\nassert     is_upper('Ri SITH') == True\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3]) == [3,1,2]\nassert     swap_List([1,2,3,4,5]) == [3,4,1,2,5]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List(newList) == newList\nassert swap_List([1,2,3,4]) == [4,1,2,3]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1, 2, 3, 4]) == [4, 1, 2, 3]\nassert swap_List([1, 2, 3]) == [3, 1, 2]\nassert swap_List([1, 2, 3, 4, 5]) == [4, 5, 1, 2, 3]"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([]) == []\nassert     swap_List([1]) == [1]\nassert     swap_List([1, 2]) == [1, 2]\nassert     swap_List([1, 2, 3]) == [1, 3, 2]\nassert     swap_List([1, 2, 3, 4]) == [1, 4, 2, 3]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Wrong output\"\nprint(\"correct\")\n\ndef count_Evens(numbers):\n    '''\n    Write a python function to count the even numbers in a list\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nswap_List([1,2,3,4,5]) == [5,2,3,4,1],'should swap the first and last element'\nassert not \nswap_List([1,2,3,4,5]) == [5,2,3,4,1],'should not swap the first and last element'\nassert not \nswap_List([1,2,3,4,5,6]) == [5,2,3,4,1,6],'should swap the first and last element'\nassert not \nswap_List([1,2,3,4,5,6,7]) == [5,2,3,4,1,6,7],'should not swap the first and last element'\nassert not \nswap_List([1,2,3,4,5]) == [5,2,3,4,1],'should swap the first and last element'\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]\nassert swap_List([9, 8, 7]) == [7, 8, 9]\n\ndef add_List(newList):\n    '''\n    Write a python function to add an element to the end of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nswap_List([1,2,3,4]) == [4,2,3,1], \"Should swap the first and last element\"\nassert not swap_List([1,2,3,4]) == [1,2,3,4], \"Should not swap the first and last element\"\nassert not swap_List([1,2,3]) == [2,3,1], \"Should not swap the first and last element\"\nassert swap_List([1,2]) == [2,1], \"Should swap the first and last element\"\nassert swap_List([]) == [], \"Should swap the first and last element\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    triangle_area(1) == 1\n    triangle_area(2) == 2\n    triangle_area(3) == 2\n    triangle_area(4) == 4\n    triangle_area(5) == 5\n    triangle_area(6) == 6\n    triangle_area(7) == 6\n    triangle_area(8) == 6\n    triangle_area(9) == 6\n    triangle_area(10) == 6\n    triangle_area(11) == 6\n    triangle_area(12) == 6\n    triangle_area(13) == 6\n    triangle_area(14) == 6\n    triangle_area(15) == 6\n    triangle_area(16) == 6\n    triangle_area(17) == 6\n    triangle_area(18) == 6\n    triangle_area(19) == 6\n    triangle_area(20) == 6\n    triangle_area(21) == 6\n    triangle_area(22) == 6\n    triangle_area(23) == 6\n    triangle_area(24) == 6\n    triangle_area(25) == 6\n    triangle_area(26) == 6\n    triangle_area(27) == 6\n    triangle_area(28) == 6\n    triangle_area(29) == 6\n    triangle_area(30) == 6\n    triangle_area(31) == 6\n    triangle_area(32) == 6\n    triangle_area(33) == 6\n    triangle_area(34) == 6\n    triangle_area(35) == 6\n    triangle_area(36) == 6\n    triangle_area(37) == 6\n    triangle_area(38) == 6\n    triangle_area(39) == 6\n    triangle_area(40) == 6\n    triangle_area(41) == 6\n    triangle_area(42) == 6\n    triangle_area(43) == 6\n    triangle_area(44) == 6\n    triangle_area(45) == 6\n    triangle_area(46) == 6\n    triangle_area(47) == 6\n    triangle_area(48) == 6\n    triangle_area(49) == 6\n    triangle_area(50) == 6\n    triangle_area(51) == 6\n    triangle_area(52) == 6\n    triangle_area(53) == 6\n    triangle_area(54) == 6\n    triangle_area(55) == 6\n    triangle_area(56) == 6\n    triangle_area(57) == 6\n    triangle_area(58) == 6\n    triangle_area(59) == 6\n    triangle_area(60) == 6\n    triangle_area(61) == 6\n    triangle_area(62) == 6\n    triangle_area(63) == 6\n    triangle_area(64) == 6\n    triangle_area(65) == 6\n    triangle_area(66) == 6\n    triangle_area(67) == 6\n    triangle_area(68) == 6\n    triangle_area(69) == 6\n    triangle_area(70) == 6\n    triangle_area(71) == 6\n    triangle_area(72) == 6\n    triangle_area(73) == 6\n    triangle_area(74) == 6\n    triangle_area(75) == 6\n    triangle_area(76) == 6\n    triangle_area(77) == 6\n    triangle_area(78) == 6\n    triangle_area(79) == 6\n    triangle_area(80) == 6\n    triangle_area(81) == 6\n    triangle_area(82) == 6\n    triangle_area(83) == 6\n    triangle_area(84) == 6\n    triangle_area(85) == 6\n    triangle_area(86) == 6\n    triangle_area(87) == 6\n    triangle_area(88) == 6\n    triangle_area(89) == 6\n    triangle_area(90) == 6\n    triangle_area(91) == 6\n    triangle_area(92) == 6\n    triangle_area(93) == 6\n    triangle_area(94) == 6\n    triangle_area(95) == 6\n    triangle_area(96) == 6\n    triangle_area(97) == 6\n    triangle_area(98) == 6\n    triangle_area(99) == 6\n    triangle_area(100) == 6\n    triangle_area(101) == 6\n    triangle_area(102) == 6\n    triangle_area(103) == 6\n    triangle_area(104) == 6\n    triangle_area(105) == 6\n    triangle_area(106) == 6\n    triangle_area(107) == 6\n    triangle_area(108) == 6\n    triangle_area(109) == 6\n    triangle_area(110) == 6\n    triangle_area(111) == 6\n    triangle_area(112) == 6\n    triangle_area(113) == 6\n    triangle_area(114) == 6\n    triangle_area(115) == 6\n    triangle_area(116) == 6\n    triangle_area(117) == 6\n    triangle_area(118) == 6\n    triangle_area(119) == 6\n    triangle_area(120) == 6\n    triangle_area(121) == 6\n    triangle_area(122) == 6\n    triangle_area(123) == 6\n    triangle_area(124) == 6\n    triangle_area(125) == 6\n    triangle_area(126) == 6\n    triangle_area(127) == 6\n    triangle_area(128) == 6\n    triangle_area(129) == 6\n    triangle_area(130) == 6\n    triangle_area(131) == 6\n    triangle_area(132) == 6\n    triangle_area(133) == 6\n    triangle_area(134) == 6\n    triangle_area(135) == 6\n    triangle_area(136) == 6\n    triangle_area(137) == 6\n    triangle_area(138) == 6\n    triangle_area(139) == 6\n    triangle_area(140) == 6\n    triangle_area(141) == 6\n    triangle_area(142) == 6\n    triangle_area(143) == 6\n    triangle_area(144) == 6\n    triangle_area(145) == 6\n    triangle_area(146) == 6\n    triangle_area(147) == 6\n    triangle_area(148) == 6\n    triangle_area(149) == 6\n    triangle_area(150) == 6\n    triangle_area(151) == 6\n    triangle_area(152) == 6\n    triangle_area(153) == 6\n    triangle_area(154) == 6\n    triangle_area(155) == 6\n    triangle_area(156) == 6\n    triangle_area(157) == 6\n    triangle_area(158) == 6\n    triangle_area(159) == 6\n    triangle_area(160) == 6\n    triangle_area(161) == 6\n    triangle_area(162) == 6\n    triangle_area(163) == 6\n    triangle_area(164) == 6\n    triangle_area(165) == 6\n    triangle_area(166) == 6\n    triangle_area(167) == 6\n    triangle_area(168) == 6\n    triangle_area(169) == 6\n    triangle_area(170) == 6\n    triangle_area(171) == 6\n    triangle_area(172) == 6\n    triangle_area(173) == 6\n    triangle_area(174) == 6\n    triangle_area(175) == 6\n    triangle_area(176) == 6\n    triangle_area(177) == 6\n    triangle_area(178) == 6\n    triangle_area(179) == 6\n    triangle_area(180) == 6\n    triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(0.5) == 1.5, \"incorrect answer\"\nassert     triangle_area(1) == 1.0, \"incorrect answer\"\nassert     triangle_area(1.5) == 1.5, \"incorrect answer\"\nassert     triangle_area(1.5) == 1.5, \"incorrect answer\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(3) == 5\nassert     triangle_area(1) == 1\nassert     triangle_area(2) == 1/2\n\n\ndef largest_triangle_area_for_semicircle(r) :\n    '''\n    Write a python function to find the largest area of a triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(2) == math.sqrt(3)/2\nassert     triangle_area(3) == 1.0/2\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(1) == 0.5, 'input r1: %s, expected: 0.5'%(triangle_area(1))\nassert     triangle_area(2) == 0.25, 'input r2: %s, expected: 0.25'%(triangle_area(2))\nassert     triangle_area(3) == 0.5, 'input r3: %s, expected: 0.5'%(triangle_area(3))\nassert     triangle_area(4) == 0.5, 'input r4: %s, expected: 0.5'%(triangle_area(4))\nassert     triangle_area(5) == 1.0, 'input r5: %s, expected: 1.0'%(triangle_area(5))\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(4) == 5\nassert     triangle_area(0) == 0\nassert     triangle_area(10) == 22\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_First_Missing([2,5,3,4,7,9,6,1,8,11]) == 8\nassert find_First_Missing([2,5,3,4,7,9,6,1,8,11]) == 1\nassert find_First_Missing([2,5,3,4,7,9,6,1,8,11,13]) == 9\nassert find_First_Missing([2,5,3,4,7,9,6,1,8,11,13]) == 8\nassert find_First_Missing([2,5,3,4,7,9,6,1,8,11,13]) == 9\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_First_Missing([4,5,6,7,8,9]) == 1\nassert     find_First_Missing([1,2,3,4,5,6,7,8]) == 8\nassert     find_First_Missing([1,2,3,4,5,7,8,9]) == 2\nassert     find_First_Missing([1,2,3,4,5,6,8,9]) == 3\nassert     find_First_Missing([1,2,3,4,5,6,7,9]) == 2\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_First_Missing([1,2,3,4,5])==3, \"Passed\"\nassert     find_First_Missing([1,2,4,5])==3, \"Passed\"\nassert     find_First_Missing([1,2,3])==2, \"Passed\"\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10])==1, \"Passed\"\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])==9, \"Passed\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 2\nassert     find_First_Missing([1,2,4,5,6,7,8,9,10]) == 3\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 5\nassert     find_First_Missing([1,2,3,5,6,7,8,9,10]) == 4\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_Last_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the largest missing number from a sorted list of natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_First_Missing([2,1,3,4,7,6]) == 3\nassert     find_First_Missing([2,1,3,4,7,6],4) == 7\nassert     find_First_Missing([2,1,3,4,7,6],5) == 8\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 1\nassert     find_First_Missing([2,1,3,4,7,6],6) == 8\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 6\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 7\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 8\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 9\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces(\"   spacious    \") == \"spacious%20\", \"Wrong\"\nassert     replace_spaces(\"    \") == \"%20\", \"Wrong\"\nassert     replace_spaces(\"\") == \"%20\", \"Wrong\"\nassert     replace_spaces(\"   \") == \"%20\", \"Wrong\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(\"This is a sample string.\") == \"This%20is%20a%20sample%20string.\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('This is a test')     == \"This%20is%20a%20test\"\nassert     replace_spaces('This is a test.')     == \"This%20is%20a%20test.\"\nassert     replace_spaces(\"This is a test.\")     == \"This%20is%20a%20test.\"\nassert     replace_spaces(\"  \")                 == \"\"\nassert     replace_spaces(None)                 == None\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (replace_spaces('This is a test') == 'This%20is%20a%20test')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"%20\"\nassert     replace_spaces(\"Hello World\") == \"Hello%20World\"\n\nprint(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    replace_spaces(' ') == '%20'\nassert \n    replace_spaces('hello my name') == 'hello%20my%20name'\nassert \n    replace_spaces(' ') == '%20'\n    replace_spaces('my name') =='my%20name'\n\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == 'Mr%20John%20Smith', \\\n    \"First test fail, please check the function replace_spaces.\"\nassert     replace_spaces(\"Mr John Smith    \") == 'Mr%20John%20Smith', \\\n    \"Second test fail, please check the function replace_spaces.\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef Subset(list):\n    '''\n    Write a python function to check whether the given list contains a subset of another list.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Split([1, 2, 3, 4, 5]) == 2\nassert     Split([1, 2, 3, 4, 5, 6]) == 2\nassert     Split([1, 2, 3, 4, 5, 6, 7]) == 2\nassert     Split([]) == 0\nassert     Split([1]) == 1\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nSplit([1, 2, 3, 4]) == [2, 4]\n\n\n\ndef Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4,5,6]) ==     [2,4,6]\nassert     Split([1,3,5,7,9]) ==     [2,4,6,8,10]\nassert     Split([1,2,3]) ==     [2,4]\nassert     Split([1,3,5,7,9]) ==     [2,4,6,8,10]\nassert     Split([2,3,4,5,6,7,8,9]) ==     [2,4,6,8,10]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([1,2,3,4]) == [2,4], \"the first number is not even\"\nassert     Split([2,4,5,6]) == [2,4,6], \"the second number is not even\"\nassert     Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8], \"the numbers are not evenly\"\nassert     Split([1,2,3,4,5,6,7,8,9,0]) == [2,4,6,8,0], \"the numbers are not evenly\"\nassert     Split([10,20,30,40,50,60,70,80,90,100]) == [10,20,30,40,50,60,70,80,90,100], \"the numbers are not evenly\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ]) == [2, 4, 6, 8, 10], \"Should be 2, 4, 6, 8, 10\"\nassert     Split([11, 22, 33, 44, 55, 66, 77, 88, 99, 100]) == [22, 44, 66, 88, 99, 100], \"Should be 22, 44, 66, 88, 99, 100\"\nassert     Split([]) == [], \"Should be an empty list\"\n\n'''\nWrite a python function to find the minimum and maximum value from a list of numbers.\n'''\ndef MinMax(list):\n    '''\n    Write a python function to find the minimum and maximum value from a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert Split([2,3,4,5]) == [2,4], 'Fail'\nassert Split([2,3,4,4]) == [4], 'Fail'\nassert Split([1,2,3,4,5]) == [2,4,5], 'Fail'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert Split([0, 1, 2, 3, 4, 5]) == [2, 4, 6, 8], \"error\"\nassert Split([0, 1, 2, 3, 4, 5]) == [2, 4, 6, 8], \"error\""
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10], \"Split() is wrong\"\nassert    Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10], \"Split() is wrong\"\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     adjac((1,2,3,4)) == [[2,3,4], [1,3,4], [1,2,4], [1,2,3]]\nassert     adjac((1,2,3)) == [[2,3], [1,3], [1,2]]\nassert     adjac((1,2)) == [[2]]\nassert     adjac((1,2,3,4)) == [[2,3,4], [1,3,4], [1,2,4], [1,2,3]]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"adjac\")\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_num(n): \n    '''\n    Check if the given input is a number\n    '''\n    return isinstance(n, int) or isinstance(n, float)\n\ndef sum_list(l):\n    '''\n    Write a function to calculate the sum of a given list of numbers.\n    '''\n    pass\n\ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    pass\n\ndef sqrt(n): \n    '''\n    Write a function to calculate the square root of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     adjac((0, 0, 0)) == [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]], \"Test Failed\"\nassert     adjac((0, 1, 2)) == [[0, 1, 2], [1, 0, 2], [2, 0, 1]], \"Test Failed\"\n\ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     adjac((0,1)) == [(-1,0), (0,-1), (1,0)]\nassert     adjac((1,0)) == [(-1,0), (1,0)]\nassert     adjac((0,-1)) == [(-1,0), (0,1)]\nassert     adjac((2,3)) == []\n\ndef adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        return     [(ele[0]+i, ele[1]+j) for i in range(-1, 2) for j in range(-1, 2) if (i, j)!= (0, 0)]\n    if sub[0] == -1:\n        return     [(ele[0]+i, ele[1]+j) for i in range(-1, 2) for j in range(-1, 2) if (i, j)!= (0, 0)]\n    if sub[0] == 1:\n        return     [(ele[0]-i, ele[1]-j) for i in range(-1, 2) for j in range(-1, 2) if (i, j)!= (0, 0)]\n    if sub[0] == 0:\n        return     [(ele[0]-i, ele[1]+j) for i in range(-1, 2) for j in range(-1, 2) if (i, j)!= (0, 0)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     adjac((1, 1), [(0, 0), (0, 1), (1, 0), (1, 1)]) == [(0, 1), (1, 0), (1, 1)]\nassert adjac((2, 2), [(1, 0), (1, 1), (2, 0), (2, 1)]) == [(1, 0), (1, 1), (2, 0), (2, 1)]\nassert adjac((1, 1), [(0, 0), (0, 1), (1, 0), (1, 1)]) == [(0, 1), (1, 0), (1, 1)]\nassert adjac((1, 1), [(0, 0), (0, 1), (1, 0), (1, 1)]) == [(0, 1), (1, 0), (1, 1)]\nassert adjac((0, 0), [(0, 0), (0, 1), (1, 0), (1, 1)]) == [(0, 0), (0, 1), (1, 0), (1, 1)]\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces(\"Hi   \") == \"Hi_\", \"Wrong result\"\nassert     replace_spaces(\"Hi  \") == \"Hi\", \"Wrong result\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"mr_john_smith\"\nassert     replace_spaces(\"Mr John Smith\") == \"mr_john_smith\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\"1\") == \"\"\nassert     replace_spaces(\"  \") == \"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('Mr John Smith') =='mr_john_smith', 'Replace spaces'\nassert     replace_spaces('Hi John Smith') == 'hi_john_smith', 'Replace spaces'\nassert     replace_spaces('Mr John Smith   ') =='mr_john_smith', 'Replace spaces'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('cat dog') == 'cat__dog', 'incorrect implementation'\nassert     replace_spaces('cat dog') == 'cat_dog', 'incorrect implementation'\nassert     replace_spaces('cat dog') == 'c_d_g_o', 'incorrect implementation'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces(' ')    == '_', \"replace_spaces(' ') == '_' is False\"\nassert     replace_spaces(' ')    == '_', \"replace_spaces(' ') == '_' is True\"\nassert     replace_spaces(' ')    == '_', \"replace_spaces(' ') == '_' is True\"\nassert     replace_spaces(' ')    == '_', \"replace_spaces(' ') == '_' is True\"\nassert     replace_spaces(' ')    == '_', \"replace_spaces(' ') == '_' is True\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces(\"what a     story   told me\") == \"what_a_story_told_me\"\nassert     replace_spaces(\"what a story told me\") == \"what_a_story_told_me\"\nassert     replace_spaces(\"hello world\") == \"hello_world\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"this is a test\") == \"this_is_a_test\", \"Should replace spaces with underscore and vice versa\"\nassert     replace_spaces(\"this is a test\") == \"this_is_a_test\", \"Should replace spaces with underscore and vice versa\"\nassert     replace_spaces(\"and this is\") == \"and_this_is\", \"Should replace spaces with underscore and vice versa\"\nassert     replace_spaces(\"and this is\") == \"and_this_is\", \"Should replace spaces with underscore and vice versa\"\nassert     replace_spaces(\"isn't this is a test\") == \"isn_t_this_is_a_test\", \"Should replace spaces with underscore and vice versa\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('Python is good') == 'Python___is_good'\nassert     replace_spaces('Python is good') == 'Python___is_good'\nassert     replace_spaces('Python is good') == 'Python___is_good'\nassert     replace_spaces('Python is good') == 'Python___is_good'\nassert     replace_spaces('Python is good') == 'Python___is_good'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces(\"a b   \") == \"a_b_\", \"Should replace whitespaces with an underscore.\"\nassert     replace_spaces(\"a b c\") == \"a_b_c\", \"Should replace whitespaces with an underscore.\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces(\"Hello world\") == \"hello_world\"\nassert     replace_spaces(\"Hello World\") == \"hello_world\"\nassert     replace_spaces(\"Hello World!    !\") == \"hello_world_\"\nassert     replace_spaces(\"This is a single word.\") == \"this_is_a_single_word\"\nassert     replace_spaces(\"Hello_world\") == \"hello_world\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_zero([0, 3, 4, 0, 0]) == [3, 4, 0, 0, 0]\nassert     move_zero([1, 2, 3, 0]) == [1, 2, 3, 0]\nassert     move_zero([0]) == []\nassert     move_zero([]) == []\nassert     move_zero([0, 1, 1, 1, 1]) == [0, 1, 1, 1, 1]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nnum_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nnum_list2 = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\nprint(f\"Original List: {num_list}\")\nprint(f\"After Moving Zero To End: {move_zero(num_list)}\")\nprint(f\"Original List: {num_list2}\")\nprint(f\"After Moving Zero To End: {move_zero(num_list2)}\")"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_zero([0,1,0,3,12]) == [1,3,12,0,0], \"Wrong output\"\nassert     move_zero([]) == [], \"Wrong output\"\nassert     move_zero([0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0], \"Wrong output\"\nassert     move_zero([1,2,3,4,5,6,7,0]) == [1,2,3,4,5,6,7,0], \"Wrong output\"\nassert     move_zero([0,0,0,0,0,1,2,3,0,0]) == [0,0,0,0,0,1,2,3,0,0], \"Wrong output\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_zero([1,2,3,4,0,0]) == [1,2,3,4,0,0]\nassert     move_zero([0,0,0,0,0]) == [0,0,0,0,0]\nassert     move_zero([1,2,3,0,4,0,0,0,5]) == [1,2,3,4,0,0,0,5]\n\n'''\nWrite a python function to find the maximum element in the given list of integers.\n'''\n\ndef maximum_element(num_list):\n    '''\n    Write a python function to find the maximum element in the given list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    num_list = [1,2,3,0,5,0,0,0,7,0]\n    print(\"Original list: {}\".format(num_list))\n    move_zero(num_list)\n    print(\"Number of zeroes moved to the end of the list: {}\".format(len(num_list) - len(num_list) % len(num_list)))\n    print(\"Modified list: {}\".format(num_list))"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_zero([3, 2, 4, 1, 0, 1, 2, 3, 4]) == [3, 2, 4, 1, 0, 1, 2, 3, 4]\nassert     move_zero([2, 0, 1, 3]) == [2, 0, 1, 3]\nassert     move_zero([2, 0, 1]) == [2, 0, 1]\nassert     move_zero([2, 0]) == [2, 0]\nassert     move_zero([]) == []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_zero([0,1,2,3,4,5]) == None, \"Should move all zeroes to the end\"\nassert     move_zero([1,2,3,4,5,6,7,0]) == None, \"Should move all zeroes to the end\"\nassert     move_zero([0,1,2,3,4,0]) == None, \"Should move all zeroes to the end\"\nassert     move_zero([0,1,0,4,0]) == None, \"Should move all zeroes to the end\"\nassert     move_zero([]) == None, \"Should move all zeroes to the end\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_zero([0,1,2,3,4,5,6]) ==[1,2,3,4,5,6,0], \"Wrong Answer\"\nassert     move_zero([0,1,0,3,12]) ==[1,0,3,12,0], \"Wrong Answer\"\nassert     move_zero([0,0,1]) ==[1,0,0], \"Wrong Answer\"\nassert     move_zero([]) ==[], \"Wrong Answer\"\nassert     move_zero([0,1,2,3,4,5]) ==[1,2,3,4,5,0], \"Wrong Answer\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \npair_xor_Sum([1,2,3,4],4) == 2\npair_xor_Sum([1,2,3,4],5) == 9\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([5, 1, 3, 9, 7, 8, 4]) == 16\nassert pair_xor_Sum([5, 1, 3, 9, 7, 8, 4]) == 16\nassert pair_xor_Sum([3, 1, 2, 4, 6]) == 3\nassert pair_xor_Sum([3, 1, 2, 4, 6]) == 3\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5],6) == 20\nassert     pair_xor_Sum([1,2,3,4],5) == 13\nassert     pair_xor_Sum([1,2,3],4) == 11\nassert     pair_xor_Sum([1,2,3,4,5],5) == 14\nassert     pair_xor_Sum([1,2,3,4,5],6) == 20\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_xor_Sum([1,2,3],3) == 8,'not expected result'\nassert     pair_xor_Sum([1,3,5],3) == 8,'not expected result'\nassert     pair_xor_Sum([1,2,5],3) == 11,'not expected result'\nassert     pair_xor_Sum([1,3,7],3) == 11,'not expected result'\nassert     pair_xor_Sum([1,5,7],3) == 14,'not expected result'\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    pair_xor_Sum([1,2,3,4], 4) == 0\n    pair_xor_Sum([4,6,7,8], 5) == 17\n    pair_xor_Sum([1,2,3,4], 2) == 5\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],6) == 4 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],7) == 14 else 'Fail')\nprint('Pass' if pair_xor_Sum([1,2,3,4,5,6],5) == 7 else 'Fail')\nprint('Pas"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_xor_Sum([1,2,3,4],4) == 1, \"output : 1\"\nassert pair_xor_Sum([1,2,3,4],6) == 3, \"output : 3\"\nassert pair_xor_Sum([1,2,3,4],8) == 1, \"output : 1\"\nassert pair_xor_Sum([1,2,3,4],10) == 3, \"output : 3\"\nassert pair_xor_Sum([1,2,3,4,5],6) == 5, \"output : 5\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef pair_xor_Sum_i(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \n    Only pairs with two elements should be considered.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nheap_sort([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert \nheap_sort([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert \nheap_sort([2, 1, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 1, 3, 4, 5, 6, 7, 8, 9, 10]\nassert \nheap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert \nheap_sort([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert heap_sort([]) == []\nassert heap_sort([1]) == [1]\nassert heap_sort([1, 2, 3]) == [1, 2, 3]\nassert heap_sort([1, 2, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef merge_sort(iterable):\n    '''\n    Write a function that takes an iterable and splits it into many sublists,\n    each of which is then sorted using the merge_sort function.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\nassert     heap_sort([5, 4, 3, 2, 1]) == 1\nassert     heap_sort([]) == 0\nassert     heap_sort([0, 1, 2, 3, 4, 5, 6]) == 6\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nclass HeapSort:\n    def __init__(self, iterable=None):\n        self.data = []\n        if iterable:\n            for e in iterable:\n                self.add(e)\n    def add(self, e):\n        self.data.append(e)\n        self._siftup(len(self.data)-1)\n    def _siftup(self, i):\n        while i > 0:\n            p = (i - 1) // 2\n            if self.data[p] < self.data[i]:\n                break\n            self.data[i], self.data[p] = self.data[p], self.data[i]\n            i = p\n    def __len__(self):\n        return len(self.data)\n    def sort(self):\n        self.data.sort()\n    def heap_sort(self):\n        self.sort()\n        return self.data\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_sort([3,2,7,6,4,5,10,9]) == [3, 4, 5, 6, 7, 9, 10, 2]\nassert     heap_sort([]) == []\nassert     heap_sort([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert     heap_sort([-1,0,1]) == [-1, 0, 1]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    noprofit_noloss(1,1) == True\n    noprofit_noloss(2,2) == False\n    noprofit_noloss(3,3) == True\n    noprofit_noloss(4,4) == False\n\nprint(\"\\tTESTCASE COMPLETED SUCCESSFULLY!!!\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_noprofit_noloss():\n    assert noprofit_noloss(1,1) == True\n    assert noprofit_noloss(1,10) == False\n    assert noprofit_noloss(10,100) == True\n    "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     noprofit_noloss(sale_amount=12,actual_cost=18) \nassert     noprofit_noloss(sale_amount=10,actual_cost=18) \nassert not noprofit_noloss(sale_amount=10,actual_cost=17) \nassert not noprofit_noloss(sale_amount=10,actual_cost=18) \nassert     noprofit_noloss(sale_amount=10,actual_cost=18.1) \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    \ndef noprofit_noloss_test():\n    '''\n    Verify the correctness of noprofit_noloss()\n    '''\n    test_cases = [\n    {\n        'input': (12, 3),\n        'output': True,\n    },\n    {\n        'input': (12, 4),\n        'output': False,\n    },\n    {\n        'input': (23, 2),\n        'output': True,\n    },\n    {\n        'input': (12, -3),\n        'output': True,\n    },\n    {\n        'input': (100, 0),\n        'output': True,\n    },\n    {\n        'input': (100, 1),\n        'output': True,\n    },\n    {\n        'input': (20, 3),\n        'output': True,\n    },\n    {\n        'input': (20, -3),\n        'output': True,\n    },\n    {\n        'input': (20, 0),\n        'output': True,\n    },\n    {\n        'input': (20, 1),\n        'output': True,\n    },\n    {\n        'input': (30, 3),\n        'output': False,\n    },\n    {\n        'input': (30, -3),\n        'output': False,\n    },\n    {\n        'input': (30, 0),\n        'output': False,\n    },\n    {\n        'input': (30, 1),\n        'output': False,\n    },\n    {\n        'input': (0, 2),\n        'output': False,\n    },\n    {\n        'input': (0, -2),\n        'output': False,\n    },\n    {\n        'input': (0, 0),\n        'output': False,\n    },\n    {\n        'input': (0, 1),\n        'output': False,\n    },\n    {\n        'input': (1, 2),\n        'output': False,\n    },\n    {\n        'input': (1, -2),\n        'output': False,\n    },\n    {\n        'input': (1, 0),\n        'output': False,\n    },\n    {\n        'input': (1, 1),\n        'output': False,\n    },\n    {\n        'input': (7, 2),\n        'output': False,\n    },\n    {\n        'input': (7, -2),\n        'output': False,\n    },\n    {\n        'input': (7, 0),\n        'output': False,\n    },\n    {\n        'input': (7, 1),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 0),\n        'output': False,\n    },\n    {\n        'input': (7.7, 1),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2.2),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2.2),\n        'output': False,\n    },\n    {\n        'input': (7.7, -1),\n        'output': False,\n    },\n    {\n        'input': (7.7, 0.2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 1.2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2),\n        'output': True,\n    },\n    {\n        'input': (7.7, -2),\n        'output': True,\n    },\n    {\n        'input': (7.7, 0),\n        'output': True,\n    },\n    {\n        'input': (7.7, 1),\n        'output': True,\n    },\n    {\n        'input': (7.7, 2.5),\n        'output': True,\n    },\n    {\n        'input': (7.7, -2.5),\n        'output': True,\n    },\n    {\n        'input': (7.7, -2),\n        'output': True,\n    },\n    {\n        'input': (7.7, 0.5),\n        'output': True,\n    },\n    {\n        'input': (7.7, 1.5),\n        'output': True,\n    },\n    {\n        'input': (7.7, 2.7),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2.7),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 0.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, 1.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 0.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, 1.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 0.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, 1.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 0.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, 1.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 0.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, 1.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2),\n        'output': False,\n    },\n    {\n        'input': (7.7, 0.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, 1.4),\n        'output': False,\n    },\n    {\n        'input': (7.7, 2.6),\n        'output': False,\n    },\n    {\n        'input': (7.7, -2.6),\n        'output': Fals"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(10,5) == True, 'Test 1 Failed'\nassert     noprofit_noloss(20,20) == False, 'Test 2 Failed'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(actual_cost=100000,sale_amount=20000)==False, \\\n        \"noprofit_noloss should return False for actual_cost=100000 and sale_amount=20000\"\nassert     noprofit_noloss(actual_cost=400000,sale_amount=20000)==True, \\\n        \"noprofit_noloss should return True for actual_cost=400000 and sale_amount=20000\"\nassert     noprofit_noloss(actual_cost=100000,sale_amount=110000)==True, \\\n        \"noprofit_noloss should return True for actual_cost=100000 and sale_amount=110000\"\nassert     noprofit_noloss(actual_cost=100000,sale_amount=20000)==True, \\\n        \"noprofit_noloss should return True for actual_cost=100000 and sale_amount=20000\"\nassert     noprofit_noloss(actual_cost=100000,sale_amount=230000)==True, \\\n        \"noprofit_noloss should return True for actual_cost=100000 and sale_amount=230000\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     noprofit_noloss(1000, 3000) == False, \"Receipt is not completely negative\"\nassert     noprofit_noloss(1000, -3000) == False, \"Receipt is completely negative\"\nassert     noprofit_noloss(1000, -2000) == True, \"Receipt is positive\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     noprofit_noloss(39.4,41) == True, \"Actual: True, Expected: False\"\nassert     noprofit_noloss(39.4,42) == False, \"Actual: False, Expected: True\"\nassert     noprofit_noloss(39.4,43) == True, \"Actual: True, Expected: False\"\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nwind_chill(0, 0) == -1\nassert wind_chill(0, 45) == -1\nassert wind_chill(80, 45) == 33.6\nassert wind_chill(90, 45) == 33.6\nassert wind_chill(100, 45) == 35.5\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     wind_chill(0, 20) == -17.89\nassert     wind_chill(10, 20) == -17.65\nassert     wind_chill(15, 20) == -15.59\nassert     wind_chill(5, 20) == -10.22\nassert     wind_chill(0, -20) == 0.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert\nassert\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     wind_chill(0,20) == 0\nassert     wind_chill(1,20) == 1\nassert     wind_chill(2,20) == 2\nassert     wind_chill(3,20) == 2.88\nassert     wind_chill(4,20) == 3.58\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     wind_chill(50,10) == 7\nassert     wind_chill(75,10) == 13.8\nassert     wind_chill(100,10) == 19.2\nassert     wind_chill(100,25) == 13.1\nassert     wind_chill(10,0) == 32.8\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     wind_chill(31,17) == 47, 'WRONG'\nassert     wind_chill(0,0) == 37.77, 'WRONG'\nassert     wind_chill(32,17) == 47, 'WRONG'\n\n'''\nThe temperature in celsius has been given to you. Write a function called \nwind_chill_celsius that calculates the wind chill index (in fahrenheit) for a given temperature in celsius.\n'''\ndef wind_chill_celsius(t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given a temperature in celsius.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     wind_chill(3,21) == 33.1\nassert wind_chill(4,21) == 48.2\nassert wind_chill(5,21) == 51.8\nassert wind_chill(10,21) == 65.7\nassert wind_chill(20,21) == 72.2\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nsample_names = ['Angelina', 'Asha', 'Catlin', 'Barry']\nresult = sample_nam(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sample_nam([\"a\", \"A\", \"4\"]) == 2\nassert     sample_nam([\"a\", \"4\", \"A\", \"b\"]) == 2\nassert     sample_nam([\"a\", \"A\", \"b\"]) == 2\nassert     sample_nam([\"b\", \"A\", \"a\", \"B\", \"A\"]) == 5\nassert     sample_nam([\"A\", \"A\", \"B\", \"b\", \"b\", \"B\"]) == 5\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsample_nam([\n    \"John\", \"Doe\", \"Elliot\", \"John\", \"Doe\", \"Elliot\"\n]) == 7\nassert sample_nam([\n    \"John\", \"Doe\", \"Elliot\", \"John\", \"Doe\", \"Elliot\", \"John\", \"Doe\"\n]) == 10\nassert sample_nam([\n    \"John\", \"Doe\"\n]) == 5\nassert sample_nam([\n    \"John\", \"Doe\", \"Elliot\"\n]) == 6\nassert sample_nam([\n    \"John\", \"Doe\"\n]) == 5\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_len(values):\n    '''\n    Write a function that takes in a list of values and returns the sum of the length of the values.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam([\"Thomas\", \"Patrick\", \"Christopher\"]) == 4\nassert     sample_nam([\"Matthew\", \"Logan\", \"Lucas\", \"Christopher\"]) == 6\nassert     sample_nam([\"Matthew\", \"Lucas\", \"Christopher\", \"Matthew\"]) == 5\nassert     sample_nam([\"Matthew\", \"Lucas\", \"Matthew\", \"Lucas\"]) == 4\nassert     sample_nam([\"Matthew\", \"Lucas\", \"Lucas\"]) == 3\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sample_nam(['abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd']) == 2\nassert sample_nam(['dodo', 'dodo', 'dodo', 'dodo', 'dodo', 'dodo', 'dodo', 'dodo']) == 4\nassert sample_nam(['abcd', 'efgh', 'efgh', 'efgh']) == 2\nassert sample_nam(['abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd']) == 8\nassert sample_nam(['abcd', 'efgh', 'efgh', 'efgh', 'efgh', 'efgh', 'efgh', 'efgh']) == 10\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sample_nam([]) == 0, 'Empty list.'\nassert \n    sample_nam(['A', 'a', 'B']) == 6, 'List with 3 elements.'\nassert \n    sample_nam(['c']) == 0, 'List with only 1 element.'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam(['Diana', 'Tiffiny', 'Paula', 'Olivia', 'Natalie', 'Emma', 'Adriana', 'Jill', 'Carla']) ==\n        [8, 5, 9, 8, 7, 5, 4, 3, 6], 'Wrong output'\nassert     sample_nam(['Dave', 'Thaddeus', 'Piotr', 'Nadya', 'Liza', 'Nicole', 'Vera', 'Sofia', 'Emma']) ==\n        [3, 4, 4, 2, 1, 1, 0, 0, 0], 'Wrong output'"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sample_nam(['a', 'bc', 'ABC','m','m']) == 8\nassert     sample_nam(['a', 'bc', 'ABC','m','m']) == 7\nassert     sample_nam(['a', 'bc', 'ABC','m','m', 'a']) == 8\nassert     sample_nam(['a', 'bc', 'ABC','m','m', 'a', 'z']) == 10\nassert     sample_nam(['a', 'bc', 'ABC','m','m', 'a', 'Z']) == 10\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_parenthesis('AB+DC*') == 'ABDC'\nassert     remove_parenthesis('AB*DC*+') == 'ABDC'\nassert     remove_parenthesis('AB+DC*+') == 'ABDC'\nassert     remove_parenthesis('AB*') == 'AB'\nassert     remove_parenthesis('AB+') == 'AB'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\n    Write a function that returns a string with the first occurrence of \"quiz\" removed.\n'''\n\ndef first_quiz_removed(items):\n    '''\n    Write a function that returns a string with the first occurrence of \"quiz\" removed.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis('A)B(c)D') == 'ABDC', 'incorrect'\nassert     remove_parenthesis('A)B(c)D') == 'ABDC', 'incorrect'\nassert     remove_parenthesis('A)B (c)D') == 'ABDC', 'incorrect'\nassert     remove_parenthesis('A)B (c)D') == 'ABDC', 'incorrect'\nassert     remove_parenthesis('A)B (c)D') == 'ABDC', 'incorrect'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis('(a)') == 'a'\nassert     remove_parenthesis('(a) (b)') == 'a b'\nassert     remove_parenthesis('(a) (b) (c)') == 'a b c'\nassert     remove_parenthesis('(a) (b) (c) (d)') == 'a b c d'\nassert     remove_parenthesis('(a) (b) (c) (d) (e)') == 'a b c d e'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis(\"(a+b)\") == \"a+b\"\nassert     remove_parenthesis(\"a(b+c)d\") == \"abd\"\nassert     remove_parenthesis(\"a((b+c)+d)e\") == \"abde\"\nassert     remove_parenthesis(\"(a)+(b+c)+(d+e)\") == \"abde\"\nassert     remove_parenthesis(\"(a+b)+(c+d)+(e+f)\") == \"abde\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    remove_parenthesis(\n        \"This is a string without ( ) and we are going to remove it.\" ) == \"This is a string without we are going to remove it.\"\n    remove_parenthesis(\n        \"This is a string without ) and we are going to remove it.\" ) == \"This is a string without we are going to remove it.\"\n    remove_parenthesis(\n        \"This is a string without ( ) and we are going to remove it.\" ) == \"This is a string without we are going to remove it.\"\n    remove_parenthesis(\n        \"This is a string without ) and we are going to remove it.\" ) == \"This is a string without we are going to remove it.\"\n    remove_parenthesis(\n        \"This is a string without ) and we are going to remove it.\" ) == \"This is a string without we are going to remove it.\"\n    remove_parenthesis(\n        \"(Hello)\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" ) == \"Hello\"\n    remove_parenthesis(\n        \"(Hello )\" "
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef remove_parenthesis_alternative(items):\n    '''\n    alternative function\n    '''\n    res = items\n    index = 0\n    while index < len(res)-1:\n        if res[index] == '(' and res[index+1] == ')':\n            del res[index]\n            del res[index]\n            index -= 2\n        else:\n            index += 1\n    return res\n\nassert remove_parenthesis('((()))') == '()()'\nassert remove_parenthesis_alternative('((()))') == '()()'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_parenthesis('GeeksForGeeks') == 'GeeksForGeeks'\nassert     remove_parenthesis('(GeeksForGeeks)') == 'GeeksForGeeks'\nassert     remove_parenthesis('(Geeks)') == 'Geeks'\nassert     remove_parenthesis('(Geeks)') == 'Geeks'\nassert     remove_parenthesis('(Geeks) (For Geeks)') == 'Geeks'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis('(1 + 1) + 1') == '1 + 1 + 1'\nassert     remove_parenthesis('1 + (1 + 1)') == '1 + 1 + 1'\nassert     remove_parenthesis('1 + (1 + 1 )') == '1 + 1 + 1'\nassert     remove_parenthesis('(1 + 1 ) + 1') == '1 + 1 + 1'\nassert     remove_parenthesis('(1 ) + (1 + 1)') == '1 + 1 + 1'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_parenthesis(\"(a+b+c)+(d+e+f)\") == \"a+b+c+d+e+f\"\nassert remove_parenthesis(\"(a+b+c)d\") == \"a+b+c\"\nassert remove_parenthesis(\"(a+b+c)d (e+f)\") == \"a+b+c\"\nassert remove_parenthesis(\"(a+b+c)d (e+f) (g+h)\") == \"a+b+c\"\nassert remove_parenthesis(\"(a+b+c)d (e+f) (g+h) (i+j)\") == \"a+b+c\"\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_nonagonal(1) == 0\nassert     is_nonagonal(2) == 1\nassert     is_nonagonal(3) == 4\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(5) == 10\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    #print(is_nonagonal(0)) == 1\n    #print(is_nonagonal(1)) == 3\n    #print(is_nonagonal(2)) == 5\n    #print(is_nonagonal(3)) == 7\n    #print(is_nonagonal(4)) == 9\n    #print(is_nonagonal(5)) == 11\n    #print(is_nonagonal(6)) == 13\n    #print(is_nonagonal(7)) == 15\n    #print(is_nonagonal(8)) == 17\n    #print(is_nonagonal(9)) == 19\n    #print(is_nonagonal(10)) == 21\n    #print(is_nonagonal(11)) == 23\n    #print(is_nonagonal(12)) == 25\n    #print(is_nonagonal(13)) == 27\n    #print(is_nonagonal(14)) == 29\n    #print(is_nonagonal(15)) == 31\n    #print(is_nonagonal(16)) == 33\n    #print(is_nonagonal(17)) == 35\n    #print(is_nonagonal(18)) == 37\n    #print(is_nonagonal(19)) == 39\n    #print(is_nonagonal(20)) == 41\n    #print(is_nonagonal(21)) == 43\n    #print(is_nonagonal(22)) == 45\n    #print(is_nonagonal(23)) == 47\n    #print(is_nonagonal(24)) == 49\n    #print(is_nonagonal(25)) == 51\n    #print(is_nonagonal(26)) == 53\n    #print(is_nonagonal(27)) == 55\n    #print(is_nonagonal(28)) == 57\n    #print(is_nonagonal(29)) == 59\n    #print(is_nonagonal(30)) == 61\n    #print(is_nonagonal(31)) == 63\n    #print(is_nonagonal(32)) == 65\n    #print(is_nonagonal(33)) == 67\n    #print(is_nonagonal(34)) == 69\n    #print(is_nonagonal(35)) == 71\n    #print(is_nonagonal(36)) == 73\n    #print(is_nonagonal(37)) == 75\n    #print(is_nonagonal(38)) == 77\n    #print(is_nonagonal(39)) == 79\n    #print(is_nonagonal(40)) == 81\n    #print(is_nonagonal(41)) == 83\n    #print(is_nonagonal(42)) == 85\n    #print(is_nonagonal(43)) == 87\n    #print(is_nonagonal(44)) == 89\n    #print(is_nonagonal(45)) == 91\n    #print(is_nonagonal(46)) == 93\n    #print(is_nonagonal(47)) == 95\n    #print(is_nonagonal(48)) == 97\n    #print(is_nonagonal(49)) == 99\n    #print(is_nonagonal(50)) == 101\n    #print(is_nonagonal(51)) == 103\n    #print(is_nonagonal(52)) == 105\n    #print(is_nonagonal(53)) == 107\n    #print(is_nonagonal(54)) == 109\n    #print(is_nonagonal(55)) == 111\n    #print(is_nonagonal(56)) == 113\n    #print(is_nonagonal(57)) == 115\n    #print(is_nonagonal(58)) == 117\n    #print(is_nonagonal(59)) == 119\n    #print(is_nonagonal(60)) == 121\n    #print(is_nonagonal(61)) == 123\n    #print(is_nonagonal(62)) == 125\n    #print(is_nonagonal(63)) == 127\n    #print(is_nonagonal(64)) == 129\n    #print(is_nonagonal(65)) == 131\n    #print(is_nonagonal(66)) == 133\n    #print(is_nonagonal(67)) == 135\n    #print(is_nonagonal(68)) == 137\n    #print(is_nonagonal(69)) == 139\n    #print(is_nonagonal(70)) == 141\n    #print(is_nonagonal(71)) == 143\n    #print(is_nonagonal(72)) == 145\n    #print(is_nonagonal(73)) == 147\n    #print(is_nonagonal(74)) == 149\n    #print(is_nonagonal(75)) == 151\n    #print(is_nonagonal(76)) == 153\n    #print(is_nonagonal(77)) == 155\n    #print(is_nonagonal(78)) == 157\n    #print(is_nonagonal(79)) == 159\n    #print(is_nonagonal(80)) == 161\n    #print(is_nonagonal(81)) == 163\n    #print(is_nonagonal(82)) == 165\n    #print(is_nonagonal(83)) == 167\n    #print(is_nonagonal(84)) == 169\n    #print(is_nonagonal(85)) == 171\n    #print(is_nonagonal(86)) == 173\n    #print(is_nonagonal(87)) == 175\n    #print(is_nonagonal(88)) == 177\n    #print(is_nonagonal(89)) == 179\n    #print(is_nonagonal(90)) == 181\n    #print(is_nonagonal(91)) == 183\n    #print(is_nonagonal(92)) == 185\n    #print(is_nonagonal(93)) == 187\n    #print(is_nonagonal(94)) == 189\n    #print(is_nonagonal(95)) == 191\n    #print(is_nonagonal(96)) == 193\n    #print(is_nonagonal(97)) == 195\n    #print(is_nonagonal(98)) == 197\n    #print(is_nonagonal(99)) == 199\n    #print(is_nonagonal(100)) == 201\n    #print(is_nonagonal(101)) == 203\n    #print(is_nonagonal(102)) == 205\n    #print(is_nonagonal(103)) == 207\n    #print(is_nonagonal(104)) == 209\n    #print(is_nonagonal(105)) == 211\n    #print(is_nonagonal(106)) == 213\n    #print(is_nonagonal(107)) == 215\n    #print(is_nonagonal(108)) == 217\n    #print(is_nonagonal(109)) == 219\n    #print(is_nonagonal(110)) == 221\n    #print(is_nonagonal(111)) == 223\n    #print(is_nonagonal(112)) == 225\n    #print(is_nonagonal(113)) == 227\n    #print(is_nonagonal(114)) == 229\n    #print(is_nonagonal(115)) == 231\n    #print(is_nonagonal(116)) == 233\n    #print(is_nonagonal(117)) == 235\n    #print(is_nonagonal(118)) == 237\n    #print(is_nonagonal(119)) == 239\n    #print(is_nonagonal(120)) == 241\n    #print(is_nonagonal(121)) == 243\n    #print(is_nonagonal(122)) == 245\n    #print(is_nonagonal(123)) == 247\n    #print(is_nonagonal(124)) == 249\n    #print(is_nonagonal(125)) == 251\n    #print(is_nonagonal(126)) == 253\n    #print(is_nonagonal(127)) == 255\n    #print(is_nonagonal(128)) == 257\n    #print(is_nonagonal(129)) == 259\n    #print(is_nonagonal(130)) == 261\n    #print(is_nonagonal(131)) == 263\n    #print(is_nonagonal(132)) == 265\n    #print(is_nonagonal(133)) == 267\n    #print(is_nonagonal(134)) == 269\n    #print(is_nonagonal(135)) == 271\n    #print(is_nonagonal(136)) == 273\n    #print(is_nonagonal(137)) == 275\n    #print(is_nonagonal(138)) == 277\n    #print(is_nonagonal(139)) == 279\n    #print(is_nonagonal(140)) == 281\n    #print(is_nonagonal(141)) == 283\n    #print(is_nonagonal(142)"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_nonagonal(0) == 1\nassert is_nonagonal(1) == 2\nassert is_nonagonal(2) == 5\nassert is_nonagonal(3) == 7\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_nonagonal(1) == 5\nassert \nis_nonagonal(2) == 10\nassert \nis_nonagonal(3) == 12\nassert \nis_nonagonal(4) == 15\nassert \nis_nonagonal(5) == 21\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_nonagonal(1) == 2\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 8\nassert     is_nonagonal(5) == 13\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert is_nonagonal(1) == 4\nassert is_nonagonal(2) == 6\nassert is_nonagonal(3) == 10\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert text_match_wordz_middle(\"z z z\") == True\nassert text_match_wordz_middle(\"z z z z\") == True\nassert text_match_wordz_middle(\"z z z z z\") == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle('The quick brown fox jumps over the lazy dog') == True, \"The quick brown fox jumps over the lazy dog\"\nassert     text_match_wordz_middle('The quick brown fox jumps over the lazy dog and cat') == False, \"The quick brown fox jumps over the lazy dog and cat\"\nassert     text_match_wordz_middle('The quick brown fox jumps over the lazy dog and cat') == True, \"The quick brown fox jumps over the lazy dog and cat\"\nassert     text_match_wordz_middle('The fox jumps') == False, \"The fox jumps\"\nassert     text_match_wordz_middle('The fox jumps fox') == False, \"The fox jumps fox\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('') == False\nassert     text_match_wordz_middle('a') == True\nassert     text_match_wordz_middle('ab') == False\nassert     text_match_wordz_middle('a b c') == True\nassert     text_match_wordz_middle('a   b   c') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle(\"\")    == False\nassert     text_match_wordz_middle(\"a\")    == False\nassert     text_match_wordz_middle(\"a\")    == True\nassert     text_match_wordz_middle(\"a z\")    == True\nassert     text_match_wordz_middle(\"z\")    == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle(\"zebra.caa\")\nassert not text_match_wordz_middle(\"zz\")\nassert not text_match_wordz_middle(\"zebra\")\nassert not text_match_wordz_middle(\"\")\nassert not text_match_wordz_middle(\"zebra.caa\")\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle(\"abc\") == True\nassert     text_match_wordz_middle(\"a\") == True\nassert     text_match_wordz_middle(\"a b\") == True\nassert     text_match_wordz_middle(\"a b c\") == True\nassert     text_match_wordz_middle(\"a b c d\") == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle('There is something different between you and me.') == False,\\\n        'is it? I sure!'\nassert     text_match_wordz_middle('This sentence contains \"z\" at the start and end of a word.') == True,\\\n        'is it?'\nassert     text_match_wordz_middle('This sentence contains \"z\" at the start of a word.') == True,\\\n        'is it?'\nassert     text_match_wordz_middle('This sentence contains \"z\" at the end of a word.') == True,\\\n        'is it?'\nassert     text_match_wordz_middle('This sentence contains \"z\" in the middle of a word.') == True,\\\n        'is it?'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle('z') == True\nassert text_match_wordz_middle('a') == True\nassert text_match_wordz_middle('abc') == True\nassert text_match_wordz_middle('a b c') == True\nassert text_match_wordz_middle('abc') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntext = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle(\n    \"This is a string with z\"\n    ) == True\nassert     text_match_wordz_middle(\n    \"This is a string with z\"\n    ) == True\nassert     text_match_wordz_middle(\n    \"This is a string with z\"\n    ) == True\n\nassert     text_match_wordz_middle(\n    \"This is a string with a z\"\n    ) == False\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4], 1) == [4, 3, 2, 1]\nassert     reverse_Array_Upto_K([2, 3, 4, 5], 3) == [5, 4, 3, 2]\nassert     reverse_Array_Upto_K([1, 2, 3, 4], 6) == [1, 2, 3, 4]\nassert     reverse_Array_Upto_K([1, 2, 3, 4], 7) == [4, 3, 2, 1]\n\ndef remove_duplicate(input):\n    '''\n    Write a python function to remove the duplicate elements from the input array.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    reverse_Array_Upto_K([1,2,3,4,5,6], 0) == []\n    reverse_Array_Upto_K([1,2,3,4,5,6], 2) == [6,5,4,3,2,1]\n    reverse_Array_Upto_K([1,2,3,4,5,6], 1) == [6,5,4,3,2,1]\n    reverse_Array_Upto_K([1,2,3,4,5,6], 5) == [6,5,4,3,2,1]\n    reverse_Array_Upto_K([1,2,3,4,5,6], 6) == [6,5,4,3,2,1]\n    reverse_Array_Upto_K([1,2,3,4,5,6], 7) == []\n    reverse_Array_Upto_K([1,2,3,4,5,6], 8) == []\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_Array_Upto_K(input = [1,2,3,4], k = 3) == [4,3,2,1]\nassert     reverse_Array_Upto_K(input = [1,2,3,4,5,6], k = 3) == [6,5,4,3,2,1]"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_of_Array(input):\n    '''\n    Write a python function to return the sum of all array elements.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], -5) == [1, 2, 3, 4, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple(('a', 'b'), {'c': 'd'}) == ('a', 'b', {'c': 'd'})\nassert     add_dict_to_tuple(('a', 'b'), {'c': 'd', 'e': 'f'}) == ('a', 'b', {'c': 'd', 'e': 'f'})\nassert     add_dict_to_tuple(('a',), {'b': 'c', 'd': 'e', 'f': 'g'}) == ('a', 'b', 'c', 'd', 'e', 'f', 'g')\nassert     add_dict_to_tuple(('a', 'b'), {}) == ('a', 'b')\nassert     add_dict_to_tuple(('a', 'b'), None) == ('a', 'b')\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_dict_to_tuple(tup, dict1) == tup + (dict1,)\nassert     add_dict_to_tuple(tup, dict2) == tup + (dict2,)\nassert     add_dict_to_tuple(tup, dict3) == tup + (dict3,)\nassert     add_dict_to_tuple(tup, dict4) == tup + (dict4,)\nassert     add_dict_to_tuple(tup, dict5) == tup + (dict5,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (test_tup[0], test_tup[1] + test_dict)\n\n\ndef add_dict_to_list(test_list, test_dict):\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) ==     (('', ''), ('', ''), ('', ''), ('', ''))\nassert     add_dict_to_tuple(test_tup, {'a': 1, 'b': 2}) ==     (('', ''), ('', ''), ('', ''), ('', '1'))\nassert     add_dict_to_tuple(test_tup, {'a': 1, 'b': 2, 'c': 3}) ==     (('', ''), ('', ''), ('', ''), ('', '1'))\nassert     add_dict_to_tuple(test_tup, {'a': 1, 'b': 2, 'c': 3, 'd': 4}) ==     (('', ''), ('', ''), ('', ''), ('', '1'))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_dict_to_tuple((1,2), {\"a\":\"a\",\"b\":\"b\"}) == (1,2,{\"a\":\"a\",\"b\":\"b\"})\nassert     add_dict_to_tuple((1,2), {\"a\":\"a\"}) == (1,2,{\"a\":\"a\"})\nassert     add_dict_to_tuple((1,2), {}) == (1,2,{})\nassert     add_dict_to_tuple((1,2), {\"a\":\"a\",\"b\":\"b\",\"c\":\"c\"}) == (1,2,{\"a\":\"a\",\"b\":\"b\",\"c\":\"c\"})\nassert     add_dict_to_tuple((1,2,3), {\"a\":\"a\",\"b\":\"b\",\"c\":\"c\"}) == (1,2,3,{\"a\":\"a\",\"b\":\"b\",\"c\":\"c\"})"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef add_tuple_to_tuple(test_tup, test_tup2):\n    '''\n    Write a function to add a tuple to another tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_dict_to_tuple((), {'a':1, 'b':2, 'c':3}) == ({'a': 1, 'b': 2, 'c': 3}, {})\nassert     add_dict_to_tuple(('a', 'b', 'c'), {'a':1, 'b':2, 'c':3}) == ({'a': 1, 'b': 2, 'c': 3}, {})\nassert     add_dict_to_tuple(('a', 'b', 'c'), {'b':1, 'c':2, 'd':3}) == ({'a':1, 'b':1, 'c':2}, {'d':3})\n\ndef add_dict_to_set(test_set, test_dict):\n    '''\n    Write a function to add a dictionary to the set. The output should be a set.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_dict_to_tuple(('test', 'test'), {'test':'test'}) == ('test', 'test')\nassert     add_dict_to_tuple(('test', 'test'), {'test':'test', 'foo':'foo'}) == ('test', 'test')\nassert     add_dict_to_tuple(('test', 'test'), {'test':'test', 'foo':'foo', 'bar':'bar'}) == ('test', 'test', 'bar')"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2}) == (1, 2, 3, {'a': 1, 'b': 2})\nassert     add_dict_to_tuple((1, 2, 3), {'a': 3, 'b': 4}) == (1, 2, 3, {'a': 3, 'b': 4})\nassert     add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2, 'c': 3}) == (1, 2, 3, {'a': 1, 'b': 2, 'c': 3})\nassert     add_dict_to_tuple((1, 2, 3), {'c': 3, 'b': 2, 'a': 1}) == (1, 2, 3, {'c': 3, 'b': 2, 'a': 1})\nassert     add_dict_to_tuple((1, 2, 3, {'a': 1, 'b': 2}), {'a': 1, 'b': 2, 'c': 3}) == (1, 2, 3, {'a': 1, 'b': 2, 'c': 3})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple([{'a':1}, {'b':2}, {'c':3}, {'d':4}], {'x':7, 'y':8}) == (({'a':1, 'y':8}, {'b':2}, {'c':3}, {'d':4}), {'x':7})\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maxAverageOfPath([[10, 20, 10, 10], [30, 15, 32, 20], [0, 20, 0, 10], [0, 15, 0, 15]]) == 45.0, 'Wrong answer'\nassert     maxAverageOfPath([[10, 20, 0, 0], [30, 15, 0, 0], [0, 0, 10, 10], [0, 0, 0, 0]]) == 35.0, 'Wrong answer'\nassert     maxAverageOfPath([[10, 0, 0, 0], [0, 10, 10, 0], [0, 0, 10, 0], [0, 0, 0, 0]]) == 10.0, 'Wrong answer'\nassert     maxAverageOfPath([[0, 0, 10, 0], [0, 10, 10, 10], [10, 0, 0, 0], [10, 10, 0, 0]]) == 45.0, 'Wrong answer'\nassert     maxAverageOfPath([[0, 0, 0, 0], [0, 10, 0, 0], [10, 10, 0, 0], [0, 0, 10, 0]]) == 10.0, 'Wrong answer'\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maxAverageOfPath([[0, 0, 0, 0], \n                            [0, 0, 0, 0], \n                            [0, 0, 0, 0], \n                            [0, 0, 0, 0],]) == 0\nassert maxAverageOfPath([[0, 0, 0, 0], \n                        [0, 0, 0, 0], \n                        [0, 0, 0, 0], \n                        [0, 0, 0, 0],]) == 0\nassert maxAverageOfPath([[1, 2, 3, 4], \n                        [5, 6, 7, 8], \n                        [9, 10, 11, 12], \n                        [13, 14, 15, 16]]) == 25\n\ndef maxSumIncreasingSubsequence(a):\n    '''\n    Given a sequence of positive numbers, find the maximum sum of subsequence.\n    If it is not possible to form a subsequence from the given array, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 10, 'wrong'\nassert     maxAverageOfPath([[7,1,3],[4,5,9],[2,6,8]]) == 11, 'wrong'\nassert     maxAverageOfPath([[7,1,3],[4,5,9],[2,6,8]]) == 11, 'wrong'\nassert     maxAverageOfPath([[7,1,3],[4,5,9],[2,6,8]]) == 11, 'wrong'\nassert     maxAverageOfPath([[7,1,3],[4,5,9],[2,6,8]]) == 11, 'wrong'\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef averageOfPath(cost, rows, cols, path):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maxAverageOfPath([[2, 1, 5],\n    [3, 2, 4],\n    [2, 3, 2]]) == 3.5\nassert     maxAverageOfPath([[1, 2, 3],\n    [2, 4, 1],\n    [3, 5, 6]]) == 4.0\nassert     maxAverageOfPath([[10, 20, 30],\n    [25, 30, 35],\n    [20, 25, 30]]) == 20.5\nassert     maxAverageOfPath([[1, 2, 1, 1],\n    [1, 2, 1, 1],\n    [1, 2, 1, 1],\n    [1, 2, 1, 1]]) == 1.0\nassert     maxAverageOfPath([[1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1]]) == 1.0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 5\nassert     maxAverageOfPath([[1,1,1],[1,1,1],[1,1,1]]) == 3\nassert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[1,1,1],[1,1,1],[1,1,1]]) == 4.5\nassert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[9,1,1],[1,1,1],[1,1,1]]) == 6\nassert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[9,1,1],[1,1,1],[1,1,1],[1,1,1]]) == 9\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maxAverageOfPath( [[0,1,2],\n                            [3,4,5],\n                            [6,7,8]] ) == 3\n\nassert     maxAverageOfPath( [[0,1,2],\n                            [3,4,5],\n                            [6,7,8],\n                            [0,5,6,7],\n                            [1,4,5,8],\n                            [2,3,4,5,6]] ) == 7.5\n\nassert     maxAverageOfPath( [[0,1,2],\n                            [3,4,5],\n                            [6,7,8],\n                            [0,5,6,7],\n                            [1,4,5,8],\n                            [2,3,4,5,6]] ) == 7.5\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([[1, 3, 1],\n    [3, 1, 1],\n    [1, 3, 1]]) ==     1.75\nassert     maxAverageOfPath([[1, 3, 1],\n    [3, 1, 1],\n    [1, 3, 1]]) ==     3.25\nassert     maxAverageOfPath([[1, 3, 1],\n    [3, 1, 1],\n    [1, 3, 1]]) ==     1.0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_data({'name':'mohit','height':1.81,'weight':80.0}, 1.8, 80.0) == ['mohit', ],'mohit should be returned'\nassert     filter_data({'name':'mohit','height':1.81,'weight':80.0}, 1.8, 80.0) == ['mohit', ],'mohit should be returned'\nassert     filter_data({'name':'mohit','height':1.81,'weight':80.0}, 1.8, 80.0) == ['mohit', ],'mohit should be returned'\nassert     filter_data({'name':'mohit','height':1.81,'weight':80.0}, 1.8, 80.0) == ['mohit', ],'mohit should be returned'\nassert     filter_data({'name':'mohit','height':1.81,'weight':80.0}, 1.8, 80.0) == ['mohit', ],'mohit should be returned'\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef filter_data1(students,min_height,min_weight):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(filter_data(students,h,w))"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_data({'Johen': (1.68, 86.00), 'Alia': (1.68, 96.00), 'Alexandra': (1.67, 93.00)}, 1.6, 86.0) == {'Alexandra', 'Johen'}\nassert     filter_data({'Alexandra': (1.66, 98.00), 'Johen': (1.67, 96.00)}, 1.6, 86.0) == {'Alexandra'}\nassert     filter_data({'Alexandra': (1.66, 98.00), 'Johen': (1.66, 96.00)}, 1.6, 86.0) == set()\nassert     filter_data({'Alexandra': (1.66, 98.00), 'Johen': (1.67, 96.00)}, 1.6, 86.0) == {'Alexandra'}\nassert     filter_data({'Alexandra': (1.66, 98.00), 'Johen': (1.67, 96.00)}, 1.6, 86.0) == {'Alexandra', 'Johen'}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef main():\n    #test cases\n    students = {'Jerry': (1.8, 45), 'Kenny': (1.8, 45), 'Tudor': (1.8, 45), 'Sarah': (1.8, 45), 'Marry': (1.8, 45), 'Jimmy': (1.8, 45)}\n    filter_data(students, 1.8, 45)\n    assert students == {'Jerry': (1.8, 45), 'Tudor': (1.8, 45), 'Sarah': (1.8, 45), 'Marry': (1.8, 45), 'Jimmy': (1.8, 45)}\n    filter_data(students, 1.5, 50)\n    assert students == {'Tudor': (1.8, 45), 'Marry': (1.8, 45), 'Jimmy': (1.8, 45)}\n    filter_data(students, 1.8, 50)\n    assert students == {'Tudor': (1.8, 45), 'Marry': (1.8, 45), 'Jimmy': (1.8, 45)}\n    filter_data(students, 0.8, 50)\n    "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_data(students,h,w) == {'Krishna': (1.80, 68.00), 'Arjun': (1.75, 51.00), 'Malika': (1.70, 44.00), 'Pradeep': (1.70, 51.00), 'Aakash': (1.75, 51.00), 'Karan': (1.80, 51.00)}, \"Wrong output\"\n\ndef filter_data_2(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_data({'Peter': (1.73, 80.00), 'John': (1.68, 74.00), 'Sam': (1.73, 85.00), 'Alex': (1.68, 74.00)}, 1.75, 1.25) == {'John', 'Alex', 'Sam'}\nassert     filter_data({'Peter': (1.73, 80.00), 'John': (1.68, 74.00), 'Sam': (1.73, 85.00), 'Alex': (1.68, 74.00)}, 1.75, 1.25) == {'Peter'}\nassert     filter_data({'Peter': (1.73, 80.00), 'John': (1.68, 74.00), 'Sam': (1.73, 85.00), 'Alex': (1.68, 74.00)}, 1.75, 1.25) == {}\nassert     filter_data({'Peter': (1.73, 80.00), 'John': (1.68, 74.00), 'Sam': (1.73, 85.00), 'Alex': (1.68, 74.00)}, 1.75, 1.25) == {'Peter'}\nassert     filter_data({'Peter': (1.73, 80.00), 'John': (1.68, 74.00), 'Sam': (1.73, 85.00), 'Alex': (1.68, 74.00)}, 1.75, 1.25) == {}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_data({'durga': (1.9, 80.1)}, 1.9, 80.1) == {'durga': (1.9, 80.1)}\nassert     filter_data({'durga': (1.9, 80.1), 'akash': (1.8, 79.2), 'aditya': (1.7, 70.9), 'prashanth': (1.5, 60.2)}, 1.8, 79.2) == {'durga': (1.9, 80.1), 'akash': (1.8, 79.2), 'aditya': (1.7, 70.9)}\nassert     filter_data({'durga': (1.9, 80.1), 'akash': (1.8, 79.2), 'aditya': (1.7, 70.9), 'prashanth': (1.5, 60.2)}, 1.8, 79.2) == {'durga': (1.9, 80.1), 'akash': (1.8, 79.2)}\nassert     filter_data({'durga': (1.9, 80.1), 'akash': (1.8, 79.2), 'aditya': (1.7, 70.9), 'prashanth': (1.5, 60.2)}, 1.5, 60.2) == {}\nassert     filter_data({'durga': (1.9, 80.1), 'akash': (1.8, 79.2), 'aditya': (1.7, 70.9), 'prashanth': (1.5, 60.2)}, 1.5, 60.2) == {'durga': (1.9, 80.1), 'akash': (1.8, 79.2)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_same_pair([1, 2, 3], \n    [3, 1, 2]) == 2, 'Input lists are not the same length'\nassert count_same_pair([1, 2, 3, 1], \n    [3, 1, 2]) == 3, 'Input lists are not the same length'\nassert count_same_pair([1, 1, 1], \n    [1, 1, 1]) == 3, 'Input lists are not the same length'\nassert count_same_pair([1, 1, 1], \n    []) == 0, 'Input lists are empty'"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(count_same_pair([0, 0, 0, 1], [0, 1, 0, 1]))     # == 1\nprint(count_same_pair([0, 1, 1, 1], [0, 1, 1, 1]))     # == 1\nprint(count_same_pair([1, 1, 1, 1], [0, 1, 1, 1]))     # == 3\nprint(count_same_pair([0, 0, 0, 1], [0, 1, 0, 0]))     # == 1\nprint(count_same_pair([0, 1, 0, 0], [0, 1, 0, 0]))     # == 1\nprint(count_same_pair([0, 1, 1, 1], [1, 1, 1, 1]))     # == 1\nprint(count_same_pair([1, 1, 1, 1], [1, 1, 1, 1]))     # == 1\n\ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_same_pair([1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6]) == 2\nassert     count_same_pair([1, 2, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1]) == 6\nassert     count_same_pair([1, 2, 3, 4, 5, 6], [7, 8, 9, 1, 2, 3]) == 0\nassert     count_same_pair([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == 6\nassert     count_same_pair([], []) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_same_pair([1,2,3,4,1], [1,2,3,4,5]) == 3\nassert     count_same_pair([1,2,3,4,1], [1,2,3,4,4]) == 0\nassert     count_same_pair([1,1,2,2,3,3], [1,2,2,2,3,4]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not count_same_pair([1,2,3], [1,3,4])\nassert count_same_pair([1,2,3], [1,3,4])\nassert not count_same_pair([1,1,1,1], [1,1,1,1])\nassert count_same_pair([1,1,1,1], [1,1,1,1])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_same_pair([1,1,2,2], [1,1,2,2]) == 2\nassert     count_same_pair([1,1,2,2], [1,1,2,3]) == 0\nassert     count_same_pair([1,1,2,2], [1,1,2,2]) == 2\nassert     count_same_pair([1,1,2,2], [1,1,2,3]) == 0\nassert     count_same_pair([1,1,2,2], [1,1,2,2]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_same_pair([1,1,1,1], [1,1,1,1]) == 2\nassert count_same_pair([1,2,1], [2,2,1]) == 2\nassert count_same_pair([1,1], [2,2,1]) == 0\nassert count_same_pair([1,1,2], [2,2,1]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_same_pair([1, 2, 2], [1, 2, 2]) == 1\nassert count_same_pair([1, 2, 2], [1, 2, 2]) == 0\nassert count_same_pair([1, 2, 2], [1, 2, 2, 2]) == 2\nassert count_same_pair([1, 2, 2], [1, 1, 2]) == 0\nassert count_same_pair([], []) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_same_pair([1, 2, 2], [1, 2, 2]) == 2\nassert     count_same_pair([1, 2, 2], [1, 3, 2]) == 0\nassert     count_same_pair([1, 2, 3, 4], [1, 3, 3, 4]) == 2\n\ndef count_same_pair_hash(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power_base_sum(3, 0) == 0, \\\n        \"This should be zero\"\nassert     power_base_sum(3, 1) == 3, \\\n        \"This should be 3\"\nassert     power_base_sum(2, 3) == 8, \\\n        \"This should be 8\"\nassert     power_base_sum(3, 2) == 10, \\\n        \"This should be 10\"\nassert     power_base_sum(4, 3) == 12, \\\n        \"This should be 12\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power_base_sum(10, 2) == 10, \"Wrong\"\nassert     power_base_sum(1000, 2) == 100, \"Wrong\"\nassert     power_base_sum(2, 2) == 4, \"Wrong\"\nassert     power_base_sum(9, 2) == 18, \"Wrong\"\nassert     power_base_sum(3, 2) == 2, \"Wrong\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(power_base_sum(2, 2))"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \npower_base_sum(1, 1) == 1\npower_base_sum(1, 2) == 1\npower_base_sum(1, 3) == 1\npower_base_sum(1, 4) == 1\npower_base_sum(1, 5) == 1\npower_base_sum(1, 6) == 1\npower_base_sum(1, 7) == 1\npower_base_sum(1, 8) == 1\npower_base_sum(1, 9) == 1\npower_base_sum(1, 10) == 1\n\npower_base_sum(10, 1) == 1\npower_base_sum(10, 2) == 9\npower_base_sum(10, 3) == 18\npower_base_sum(10, 4) == 32\npower_base_sum(10, 5) == 52\npower_base_sum(10, 6) == 82\npower_base_sum(10, 7) == 123\npower_base_sum(10, 8) == 144\npower_base_sum(10, 9) == 164\npower_base_sum(10, 10) == 196\n\npower_base_sum(2, 1) == 2\npower_base_sum(2, 2) == 2\npower_base_sum(2, 3) == 2\npower_base_sum(2, 4) == 4\npower_base_sum(2, 5) == 4\npower_base_sum(2, 6) == 4\npower_base_sum(2, 7) == 2\npower_base_sum(2, 8) == 2\npower_base_sum(2, 9) == 2\npower_base_sum(2, 10) == 2\n\npower_base_sum(3, 1) == 3\npower_base_sum(3, 2) == 9\npower_base_sum(3, 3) == 27\npower_base_sum(3, 4) == 81\npower_base_sum(3, 5) == 243\npower_base_sum(3, 6) == 951\npower_base_sum(3, 7) == 1509\npower_base_sum(3, 8) == 3243\npower_base_sum(3, 9) == 1827\npower_base_sum(3, 10) == 3337\n\npower_base_sum(4, 1) == 7\npower_base_sum(4, 2) == 15\npower_base_sum(4, 3) == 21\npower_base_sum(4, 4) == 30\npower_base_sum(4, 5) == 105\npower_base_sum(4, 6) == 895\npower_base_sum(4, 7) == 1543\npower_base_sum(4, 8) == 1733\npower_base_sum(4, 9) == 1673\npower_base_sum(4, 10) == 3573\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power_base_sum(3, 0) == 0\nassert     power_base_sum(3, 1) == 3\nassert     power_base_sum(10, 2) == 52\nassert     power_base_sum(10, 3) == 343\nassert     power_base_sum(10, 4) == 1042\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power_base_sum(2, 5) == 54\nassert     power_base_sum(2, 2) == 4\nassert     power_base_sum(2, 3) == 4\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power_base_sum(3, 1) == 3\nassert     power_base_sum(3, 2) == 9\nassert     power_base_sum(3, 3) == 27\nassert     power_base_sum(3, 4) == 63\nassert     power_base_sum(3, 5) == 81\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power_base_sum(2, 2) == 10\nassert     power_base_sum(2, 1) == 2\nassert     power_base_sum(10, 3) == 132\nassert     power_base_sum(3, 2) == 6\nassert     power_base_sum(3, 1) == 3\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef power_base_sum_non_recursive(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power_base_sum(2,2) == 4\nassert     power_base_sum(3,2) == 12\nassert     power_base_sum(2,5) == 37\nassert     power_base_sum(3,4) == 27\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_quotation('This is a string \" with single quote )') =='string', 'Should return a string with single quote '\nassert     extract_quotation('This is a string \" with double quote )') =='string', 'Should return a string with double quote '\nassert     extract_quotation('This is a string \" with single quote )') =='string', 'Should return a string with single quote '\nassert     extract_quotation('This is a string \" with double quote )') =='string', 'Should return a string with double quote '\nassert     extract_quotation('This is a string \" with single quote )') =='string', 'Should return a string with single quote '\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation('I am \"kind\" of student') == \"I am kind of student\"\nassert     extract_quotation('I am \"kind of\" student') == \"I am kind of student\"\nassert     extract_quotation('I am kind of \"student\"') == \"I am kind of student\"\nassert     extract_quotation('I am kind of student') == \"I am kind of student\"\nassert     extract_quotation('I am \" kind of student') == \"I am kind of student\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation('\"This is a sample text\"') =='sample text', 'Testing incorrect'\nassert     extract_quotation(\"This is a sample text\") =='sample text', 'Testing incorrect'\nassert     extract_quotation(\"'This is a sample text'\") =='sample text', 'Testing incorrect'\nassert     extract_quotation('\"This is a sample text\"') =='sample text', 'Testing incorrect'\nassert     extract_quotation('\"This is a sample text\"') =='sample text', 'Testing incorrect'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_quotation('hi \"there\" and \"hello\"') == 'hi and hello', \"extract_quotation: error 1\"\nassert    extract_quotation('hi and \"hello\"') == 'hi and hello', \"extract_quotation: error 2\"\nassert    extract_quotation('hi there and hello') == 'hi there and hello', \"extract_quotation: error 3\"\nassert    extract_quotation('hi there and hello ') == 'hi there and hello ', \"extract_quotation: error 4\"\nassert    extract_quotation('hi there and hello') == 'hi there and hello', \"extract_quotation: error 5\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert extract_quotation('if \"hello\" in your_name:' == ['hello', 'your_name']) == True\nassert extract_quotation('if \"hello\" in your_name:' == ['if', 'hello', 'in', 'your_name', ':', '\\n']) == True\nassert extract_quotation('if \"hello\" in your_name:' == ['if', 'hello', 'in', 'your_name', ':', '']) == True\nassert extract_quotation('if \"hello\" in your_name:' == ['if', 'hello', 'in', 'your_name', ':',' ']) == True\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_quotation(\"'Steve Wozniak' is an awesome developer\") == 'Steve Wozniak'\nassert    extract_quotation('\"Steve Wozniak\" is an awesome developer') == 'Steve Wozniak'\nassert    extract_quotation(\"I love to play 'Pong'\") == 'Pong'\nassert    extract_quotation(\"I love to play 'Pong'\") == 'Pong'\nassert    extract_quotation(\"I love to play 'Pong'\") == 'Pong'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_quotation('a \"b\" c') == \"abc\", \"Not correct\"\nassert     extract_quotation('a \"b\" c') == \"abc\", \"Not correct\"\nassert     extract_quotation('\"a \"b\" c') == \"a b c\", \"Not correct\"\nassert     extract_quotation('a\"b\"c') == \"abc\", \"Not correct\"\nassert     extract_quotation('a\"b \"c') == \"abc\", \"Not correct\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert extract_quotation(\"My name is Vijay\") == \"Vijay\"\nassert extract_quotation(\"I have a cat\") == \"cat\"\n\ndef extract_all_substrings(text1):\n    '''\n    Write a function to extract all the substrings of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef extract_value_in_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_quotation('I bought \"book\" and \"pen\"') == ['book', 'pen']\nassert     extract_quotation('I bought \"book\" and \"pen\"') == ['book', 'pen']\nassert     extract_quotation('I bought \"book and pen\"') == ['book and pen']\nassert     extract_quotation('I bought \"book and \"pen\"') == ['book and ', 'pen']\nassert     extract_quotation('I bought \"book and \"pen\"') == ['book and ', 'pen']\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3)\nassert     multiply_elements((-1,-2,-3)) == (-1,-2,-3)\nassert     multiply_elements((3.4,4.5,4.6)) == (3.4,4.5,4.6)\nassert     multiply_elements((1.2,2.3,3.4)) == (2.3,4.4,6.6)\nassert     multiply_elements((-1,-2,-3,-4)) == (-2,-4,-6,-8)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((0, 2, 3)) == (0, 2, 6)\nassert     multiply_elements((0, 0, 0)) == (0, 0, 0)\nassert     multiply_elements((1, 2, 3)) == (1, 2, 3)\n\nprint(\"Well done, the function multiply_elements is correct!\")\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_elements((1, 2, 3)) == (1, 2, 3, 6)\nassert     multiply_elements((-1, -2, -3)) == (-1, -2, -3, -6)\nassert     multiply_elements((-1, -2, -3, 4)) == (-1, -2, -3, -6, 4)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_elements((10, 20, 30, 40)) == (0, 40, 90, 180)\nassert     multiply_elements((-5, 4, -2, 8)) == (-20, -8, -16, -32)\nassert     multiply_elements((3, -3, 8)) == (0, 0, 0)\nassert     multiply_elements((-1, -2, 3, 4)) == (-1, -4, 3, -8)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_elements((3, 4, 5, 6)) == (3, 8, 12, 18)\nassert     multiply_elements((2, 5, 3)) == (2, 10, 15)\nassert     multiply_elements((5, 5, 5)) == (5, 25, 25)\n\n\ndef sum_of_last_n_elements(test_list, n):\n    '''\n    Write a function that takes as input a list of numbers (l_1,...,l_{N}) and returns the sum of the last n elements.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((2,4,6)) == (4,16,18)\nassert     multiply_elements((1,2,3,4)) == (2,6,12,24)\nassert     multiply_elements((-1,-2,-3,-4)) == (-24,-28,-32,-36)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4), \"Error in multiply_elements\"\nassert     multiply_elements((2,2,2,2)) == (4,4,4,4), \"Error in multiply_elements\"\nassert     multiply_elements((2,2,2,2,2)) == (8,8,8,8,8), \"Error in multiply_elements\"\nassert     multiply_elements((3,3,3,3)) == (9,9,9,9), \"Error in multiply_elements\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((1,2,3)) == (2,4,6)\nassert     multiply_elements((1,2)) == (2,2)\nassert     multiply_elements((4,2)) == (8,4)\nassert     multiply_elements((4,5)) == (40,10)\nassert     multiply_elements((8,6,4)) == (64,24,8)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15]) == [10,12,14,16,18,20,22]\nassert sum_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23]) == [17,18,19,20,21,22,23,24]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([1,2,3],[3,4,5]) == [4,5,8]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9], \"Wrong result\"\nassert     sum_list([1,2,3,4],[5,6,7,8]) == [6,8,10,12], \"Wrong result\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_list([1,2,3],[2,4,5]) == [3,6,9]\nassert     sum_list([1,2,3],[1,1,1]) == [2,3,3]\nassert     sum_list([1,2,3],[5,4,3]) == [6,7,9]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_list([1,2,3,4,5],[3,2,1]) == [4,5,4,5,5], 'Fail'\nassert sum_list([1,2,3,4,5],[3,2,1]) == [4,5,4,5,5], 'Fail'\nassert sum_list([1,2,3,4,5],[3,2,1]) == [4,5,4,5,5], 'Fail'\nassert sum_list([1,2,3,4,5],[3,2,1]) == [4,5,4,5,5], 'Fail'\nassert sum_list([1,2,3,4,5],[3,2,1]) == [4,5,4,5,5], 'Fail'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [1,2,3,4,5,6]\nassert sum_list([1,2,3], [-4,-5,-6]) == [-1,-2,-3,-4,-5,-6]\nassert sum_list([1,2,3], [-4,-5,6]) == [-1,0,3]\nassert sum_list([1,2,3], [4,5,6,7]) == [1,2,3,4,5,6,7]\nassert sum_list([1,2,3], [4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_list([1,2,3,4], [5,6,7,8]) == [6,8,10,12], 'incorrect'\nassert     sum_list([1,2,3,4], [5,6,7,8,9,10,11,12]) == [6,8,10,12,14,16,18,20], 'incorrect'\n\ndef is_prime(n):\n    '''\n    Write a function takes as input an integer n and returns True if it is a prime number and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sum_list([1,2,3,4], [4,3,2,1]) == [5,6,7,8], 'Error1'\nassert sum_list([1,2,3,4], [4,3,5,6]) == [5,7,8,9], 'Error2'\nassert sum_list([1,2,3,4], [4,3,2,1]) == [5,6,7,8], 'Error3'\nassert sum_list([1,2,3,4,5,6,7,8], [4,5,6,7,8]) == [9,10,11,12,13,14,15,16], 'Error4'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         sum_list([1,2,3,4],[5,6,7,8]) == [6, 8, 10, 12], 'incorrect'\nassert sum_list([1,2,3,4],[5,6,7,8]) == [2, 4, 6, 8], 'incorrect'\nassert sum_list([1,2,3,4],[5,6,7,8]) == [2, 4, 6, 8], 'incorrect'\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     consecutive_duplicates([]) == True, \\\n    'empty list returned'\nassert     consecutive_duplicates([1]) == False, \\\n    'these are not consecutive'\nassert     consecutive_duplicates([1,1,1]) == False, \\\n    'these are not consecutive'\nassert     consecutive_duplicates([1,2,3]) == True, \\\n    'these are consecutive'\nassert     consecutive_duplicates([1,1,2,3]) == False, \\\n    'these are not consecutive'\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([0, 0, 0, 0, 0, 0, 0]) == []\nassert     consecutive_duplicates([1, 1, 2, 2, 2]) == []\nassert     consecutive_duplicates([1, 2, 2, 2, 2]) == [2, 2]\nassert     consecutive_duplicates([0, 0, 1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     consecutive_duplicates([0, 1, 1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     consecutive_duplicates([1, 2, 2, 3, 3]) == None\nassert     consecutive_duplicates([0, 0, 0, 1, 1, 1, 2, 2, 3, 3]) == None\nassert     consecutive_duplicates([0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([1, 2, 3, 3, 4, 5]) == False\nassert consecutive_duplicates([1, 2, 3, 3, 4, 5]) == True\nassert consecutive_duplicates([1, 1, 1, 1, 1, 1, 1]) == False\nassert consecutive_duplicates([]) == True\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     consecutive_duplicates([1,2,3,4]) == [1,2,3,4]\nassert     consecutive_duplicates([3,3,3,3,3,3,4,4,4,4]) == [3,3,3,3,3,4,4,4,4]\nassert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([1,1,1,1,1,1]) == [1,1,1,1,1,1]\nassert     consecutive_duplicates([1,2,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([1, 2, 2, 3, 3, 4]) == [1, 2, 3, 4], \\\n        'Should be [1, 2, 3, 4] and not'+ str(consecutive_duplicates([1, 2, 2, 3, 3, 4]))\nassert consecutive_duplicates([0,0,0,0]) == [], 'Should be empty and not'+ str(consecutive_duplicates([0,0,0,0]))\nassert consecutive_duplicates([0,0,0,0,1,2,2,3,4,5]) == [0, 1, 2, 3, 4, 5], 'Should be empty and not'+ str(consecutive_duplicates([0,0,0,0,1,2,2,3,4,5]))\nassert consecutive_duplicates([0,1,1,1]) == [0, 1, 1], 'Should be empty and not'+ str(consecutive_duplicates([0,1,1,1]))\nassert consecutive_duplicates([0,0,1,1,1]) == [0, 1, 1], 'Should be empty and not'+ str(consecutive_duplicates([0,0,1,1,1]))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5]) == True, \"Return True\"\nassert     consecutive_duplicates([1,2,3,3,4,5]) == False, \"Return False\"\nassert     consecutive_duplicates([1,1,1,1,1,1]) == True, \"Return True\"\nassert     consecutive_duplicates([1,2,3,3,4,5]) == False, \"Return False\"\nassert     consecutive_duplicates([1,2,3,4,5]) == False, \"Return False\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert consecutive_duplicates([1, 2, 2, 3]) == [1, 2, 3]\nassert consecutive_duplicates([1, 2, 2, 2, 3, 4]) == [1, 2, 2, 3, 4]\nassert consecutive_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\nassert consecutive_duplicates([1, 2, 3, 1, 2, 3, 4, 4, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsurface_cone(3,3) == math.pi*(2*3**2)/4\nassert     lateralsurface_cone(3,4) == math.pi*(2*3**2)/4\nassert     lateralsurface_cone(4,3) == math.pi*(2*4**2)/4\n\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsurface_cone(1,1) == 5.555555555555555\nassert     lateralsurface_cone(1,2) == 7.7777777777777777\nassert     lateralsurface_cone(1,3) == 9.8333333333333327\nassert     lateralsurface_cone(1,4) == 11.555555555555556\nassert     lateralsurface_cone(1,5) == 14.285714285714286\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsurface_cone(3,2) == 6\nassert     lateralsurface_cone(10,9) == 61\nassert     lateralsurface_cone(10,10) == 640\nassert     lateralsurface_cone(3,3) == 21\n\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cone(1,1) == math.pi*1**2\nassert     lateralsurface_cone(3,1) == math.pi*3**2\nassert     lateralsurface_cone(3,2) == math.pi*3**2\nassert     lateralsurface_cone(4,2) == math.pi*4**2\nassert     lateralsurface_cone(1,3) == math.pi*1**2\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert lateralsurface_cone(1,1) == 5.0\nassert lateralsurface_cone(5,6) == 12.0\nassert lateralsurface_cone(4,3) == 24.0\n\ndef lateralsurface_cone_clip(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    A cone has no lateral surface if its radius is greater than or equal to the height.\n    The function should return 0 for this case.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef lateralsurface_cone(r,h):\n    # unit test\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nlateralsurface_cone(5,2) == (5*math.pi*math.pow(2,1/2)*math.sqrt(5/3))*math.pow(2,1/3)\nlateralsurface_cone(5,4) == (5*math.pi*math.pow(2,1/2)*math.sqrt(5/3))*math.pow(2,1/3)\nlateralsurface_cone(5,6) == (5*math.pi*math.pow(2,1/2)*math.sqrt(5/3))*math.pow(2,1/3)\nlateralsurface_cone(5,8) == (5*math.pi*math.pow(2,1/2)*math.sqrt(5/3))*math.pow(2,1/3)\n\nprint(\"Expected output: \\n(5*pi*r*sqrt(5/3))*sqrt(2) = 13.102047\")\nprint(\"Actual output:\", lateralsurface_cone(5,2))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(lateralsurface_cone(5,5))\nprint(lateralsurface_cone(5,3))\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    text = 'In tech, it may be more productive to have a single point of contact for all the possible matters you are dealing with on this page. Unfortunately, it can also be a huge problem in many other areas where people do not want to have to use the same one account to access their accounts at different sites. For example, the sign-up and login pages of the Internet banking service. In those situations, it is better to have a single point of contact for all the possible issues you may face when accessing the site. This may help you to get started with any topic, and also it can aid you in addressing the small and everyday problems.'\n    print('Original Text:', text)\n    print('Replaced Text:', replace_specialchar(text)"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_specialchar('C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt') == 'C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt'\nassert     replace_specialchar('C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt:') == 'C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt'\nassert     replace_specialchar('C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt:') == 'C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt'\nassert     replace_specialchar('C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt:') == 'C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt'\nassert     replace_specialchar('C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt:') == 'C:\\\\Users\\\\rprasad\\\\Desktop\\\\my_file.txt'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_specialchar('abc') == 'abc', \"Cannot replace special characters\"\nassert replace_specialchar('a,bc') == 'a:bc', \"Cannot replace special characters\"\nassert replace_specialchar('a,bc:') == 'a:bc', \"Cannot replace special characters\"\nassert replace_specialchar('a,bc: ') == 'a:bc', \"Cannot replace special characters\"\nassert replace_specialchar('a,bc:d') == 'a:bc:d', \"Cannot replace special characters\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_specialchar('Hello,World.') == 'Hello:World.'\nassert     replace_specialchar('Bye,Bye.') == 'Bye:Bye.'\nassert     replace_specialchar('Hello,Bye,Hello,Bye.') == 'Hello:Bye:Hello:Bye.'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar(\"Mr John Smith    \") == \"MrJohnSmith\"\nassert     replace_specialchar(\"    Mr John Smith \") == \"MrJohnSmith\"\nassert     replace_specialchar(\"    Mr. John Smith \") == \"MrJohnSmith\"\nassert     replace_specialchar(\"    John Smith   \") == \"JohnSmith\"\nassert     replace_specialchar(\"    Smith John   \") == \"SmithJohn\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_specialchar('a:b') == 'a:b'\nassert     replace_specialchar('a: b') == 'a: b'\nassert     replace_specialchar('a:b,b:a') == 'a:b,b:a'\nassert     replace_specialchar('a:b,b:a,b:c') == 'a:b,b:a,b:c'\nassert     replace_specialchar('a:b,b:a,b:c;d:e') == 'a:b,b:a,b:c;d:e'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_specialchar('') == ''\nassert     replace_specialchar(' ') == ':'\nassert     replace_specialchar('a,b,c:') == 'a:b:c:'\nassert     replace_specialchar('a:b:c:') == 'a:b:c:'\nassert     replace_specialchar('a,,,b:c:') == 'a:b:c:'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_specialchar(\"MyDosa:Pow\") == \"MyDosa:Pow\"\nassert     replace_specialchar(\"MyDosa:Pow@\") == \"MyDosa:Pow@\"\nassert     replace_specialchar(\"MyDosa:Pow!\") == \"MyDosa:Pow!\"\nassert     replace_specialchar(\"MyDosa:Pow:\") == \"MyDosa:Pow:\"\nassert     replace_specialchar(\"MyDosa:Pow:@\") == \"MyDosa:Pow:@\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_specialchar('b:a') == 'b:a'\nassert     replace_specialchar('b:a') == 'b:a'\nassert     replace_specialchar('b:a') == 'b:a'\nassert     replace_specialchar('b:a') == 'b:a'\nassert     replace_specialchar('b:a') == 'b:a'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_specialchar(\"I love you\") == \"I:love:you\"\nassert     replace_specialchar(\"I:love:you\") == \"I:love:you\"\nassert     replace_specialchar(\"I:love:you\") == \"I:love:you\"\nassert     replace_specialchar(\"I love you\") == \"I:love:you\"\nassert     replace_specialchar(\"I:love:you\") == \"I:love:you\"\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_first_occurrence([1,3,4,6,7,8,9], 6) == 3\nassert     find_first_occurrence([1,3,4,6,7,8,9], 7) == 6\nassert     find_first_occurrence([1,3,4,6,7,8,9], 8) == 7\nassert     find_first_occurrence([1,3,4,6,7,8,9], 9) == 8\nassert     find_first_occurrence([1,3,4,6,7,8,9], 10) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_first_occurrence([4, 6, 6, 7, 8, 10], 6) == 2\nassert find_first_occurrence([4, 6, 6, 7, 8, 10], 7) == 4\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 3) == 4\nassert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 4) == 6\nassert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 1) == 0\nassert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 10) == -1\nassert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 7) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_first_occurrence([], 2) == -1\nassert find_first_occurrence([1,2,2,2,2,2,2,2,2,2,2,2,2], 2) == 5\nassert find_first_occurrence([1,2,2,2,2,2,2,2,2,2,2,2,2], 3) == 9\nassert find_first_occurrence([1,2,2,2,2,2,2,2,2,2,2,2,2], 1) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_first_occurrence([1,2,3,3,4,4,5,6], 3) == 4\nassert     find_first_occurrence([1,2,3,3,4,4,5,6], 1) == 0\nassert     find_first_occurrence([1,2,3,3,4,4,5,6], 8) == -1\nassert     find_first_occurrence([1,2,3,3,4,4,5,6], -5) == -1\nassert     find_first_occurrence([1,2,3,3,4,4,5,6], -11) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1, 2, 3, 4, 5], 3) == 4\nassert     find_first_occurrence([1, 2, 3, 4, 5], 6) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_first_occurrence([4,6,7,7,8,9,9,9], 9) == 4\nassert     find_first_occurrence([3,4,4,4,4,4,4,4,4,4,4,4,4,4,4], 4) == 4\nassert     find_first_occurrence([4,6,7,7,8,9,9,9], 10) == -1\nassert     find_first_occurrence([], 1) == -1\nassert     find_first_occurrence([1,2,3,4,5], 3) == 2\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    Return -1 if the element is not present.\n    '''\n    pass\n\n    # check the correctness of find_first_occurrence\n    assert \n\ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    Return -1 if the element is not present.\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            total += arr[i] * arr[j]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_Of_Subarray_Prod([2,3,4,10,6,5]) == (60, 120)\nassert     sum_Of_Subarray_Prod([6,3,7,5,8]) == (0, 0)\nassert     sum_Of_Subarray_Prod([2,1,3,4,6]) == (24, 6)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == 60\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == 24\nassert     sum_Of_Subarray_Prod([1, 1, 1, 1]) == 1\nassert     sum_Of_Subarray_Prod([1, 1, 1, 1]) == 1\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == 48\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_Of_Subarray_Prod([2,3,4]) == 6\nassert sum_Of_Subarray_Prod([2,3,4,5]) == 14\nassert sum_Of_Subarray_Prod([2,3,4,5,6]) == 22\nassert sum_Of_Subarray_Prod([2,3,4,5,6,7]) == 31\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 120, 'Wrong output'\nassert     sum_Of_Subarray_Prod([]) == 0, 'Wrong output'\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 300, 'Wrong output'\n\n'''\n    Write a python function which finds the maximum sum of any contiguous sub-array of the given array.\n'''\ndef findMaxSumOfSubArr(arr):\n    '''\n    Write a python function to find maximum sum of any contiguous sub-array of the given array. https://www.geeksforgeeks.org/find-maximum-sum-of-any-contiguous-subarray-in-a-given-array/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_Of_Subarray_Prod([0,1,2,3,4]) == [0,1,2,3,4,0,0,0,0,0]\nassert sum_Of_Subarray_Prod([1,2,3,4]) == []\nassert sum_Of_Subarray_Prod([1,2]) == [1,2]\nassert sum_Of_Subarray_Prod([1,2,3,4]) == [1,2,3,4]\n\ndef sum_Of_Subarray_Prod_using_Map(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # using map to store \n    # curr_sum = curr_prod = 0 \n    # arr = {1: 1, 2: 1}\n    # nums = {1: 1, 2: 2}\n    \n    nums = {}\n    curr_sum = curr_prod = 0\n    for num in arr:\n        curr_sum += num\n        if curr_sum in nums:\n            curr_prod *= nums[curr_sum]\n        else:\n            nums[curr_sum] = nums.get(curr_sum, 1) * num\n            curr_prod = curr_prod * num\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([]) == 0, 'error'\nassert     sum_Of_Subarray_Prod([1,2,3]) == 9, 'error'\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 120, 'error'\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef toggle_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_middle_bits(0b00000000000000000000000001) == 0b00000000000000000000000010\nassert     set_middle_bits(0b0000000000000000000000000111) == 0b000000000000000000000000010\nassert     set_middle_bits(0b00000000000000000000000010001) == 0b00000000000000000000000010010\nassert     set_middle_bits(0b000000000000000000000000110000) == 0b00000000000000000000000010100\nassert     set_middle_bits(0b0000000000000000000000000101010) == 0b0000000000000000000000000101100\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_middle_bits(0b00100000) == 0b11000011, 'Your code is wrong'\nassert     set_middle_bits(0b11111111) == 0b01111101, 'Your code is wrong'\nassert     set_middle_bits(0b00000000) == 0b00000000, 'Your code is wrong'\n\nprint(\"Set middle bits passed\")\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_middle_bits(42) == 41\nassert     set_middle_bits(00) == 11\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef swap_bits(n):  \n    '''\n    Write a python function to swap the even and odd bits of a number. https://www.geeksforgeeks.org/swap-bits-number-expect-first-last-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_middle_bits(0) == 0, \"First\"\nassert     set_middle_bits(1) == 1, \"Second\"\nassert     set_middle_bits(2) == 0b111, \"Third\"\nassert     set_middle_bits(3) == 0b100, \"Fourth\"\nassert     set_middle_bits(4) == 0b1010, \"Fifth\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \na = [1,3,4,5]\nx = 4\nassert left_insertion(a, x) == 2\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     left_insertion([1,2,3,4,5], 6) == 3\nassert     left_insertion([1,2,3,4,5], 4) == 3\nassert     left_insertion([1,2,3,4,5], 1) == 0\nassert     left_insertion([1,2,3,4,5], 5) == 4\nassert     left_insertion([1,2,3,4,5], 0) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     left_insertion([1,2,3,4,5], 0) == 1\nassert     left_insertion([1,2,3,4,5], 4) == 3\nassert     left_insertion([1,2,3,4,5], 5) == 4\nassert     left_insertion([1,2,3,4,5], 6) == 5\nassert     left_insertion([1,2,3,4,5], 7) == 5\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_insertion([1,2,3,4], 4) == 3\nassert     left_insertion([1,2,3,4], 2) == 1\nassert     left_insertion([1,2,3,4], 1) == 0\nassert     left_insertion([1,2,3,4], 0) == 0\nassert     left_insertion([1], 1) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     left_insertion([1, 3, 4, 7, 8, 9, 10], 0) == 0\nassert     left_insertion([1, 3, 4, 7, 8, 9, 10], 3) == 3\nassert     left_insertion([1, 3, 4, 7, 8, 9, 10], 7) == 4\nassert     left_insertion([1, 3, 4, 7, 8, 9, 10], 8) == 5\nassert     left_insertion([1, 3, 4, 7, 8, 9, 10], 10) == 6\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(check_str(\"validate\"))\nprint(check_str(\"blah\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"hello\"))\nprint(check_str(\"yes\"))\nprint(check_str(\"by\"))\nprint(check_str(\"hg\"))\nprint(check_str(\"fa\"))\nprint(check_str(\"o\"))\nprint(check_str(\"al\"))\nprint(check_str(\"whos\"))\nprint(check_str(\"he\"))\nprint(check_str(\"ge\"))\nprint(check_str(\"g\"))\nprint(check_str(\"rs\"))\nprint(check_str(\"y\"))\nprint(check_str(\"geeks\"))\nprint(check_str(\"log\"))\nprint(check_str(\"r\"))\nprint(check_str(\"ab\"))\nprint(check_str(\"abc\"))\nprint(check_str(\"123\"))\nprint(check_str(\"abc\"))\nprint(check_str(\"asd\"))\nprint(check_str(\"v\"))\nprint(check_str(\"gfh\"))\nprint(check_str(\"z\"))\nprint(check_str(\"zd\"))\nprint(check_str(\"b\"))\nprint(check_str(\"b\"))\nprint(check_str(\"a\"))\nprint(check_str(\"a\"))\nprint(check_str(\"aa\"))\nprint(check_str(\"ee\"))\nprint(check_str(\"h\"))\nprint(check_str(\"f\"))\nprint(check_str(\"g\"))\nprint(check_str(\"haha\"))\nprint(check_str(\"h\"))\nprint(check_str(\"k\"))\nprint(check_str(\"l\"))\nprint(check_str(\"m\"))\nprint(check_str(\"n\"))\nprint(check_str(\"o\"))\nprint(check_str(\"p\"))\nprint(check_str(\"q\"))\nprint(check_str(\"r\"))\nprint(check_str(\"s\"))\nprint(check_str(\"t\"))\nprint(check_str(\"u\"))\nprint(check_str(\"v\"))\nprint(check_str(\"w\"))\nprint(check_str(\"x\"))\nprint(check_str(\"y\"))\nprint(check_str(\"z\"))\nprint(check_str(\"1\"))\nprint(check_str(\"2\"))\nprint(check_str(\"3\"))\nprint(check_str(\"4\"))\nprint(check_str(\"5\"))\nprint(check_str(\"6\"))\nprint(check_str(\"7\"))\nprint(check_str(\"8\"))\nprint(check_str(\"9\"))\nprint(check_str(\"0\"))\nprint(check_str(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(check_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(check_str(\"0123456789\"))\nprint(check_str(\"!@#$%^&*()-+=_|{}:;'<>,.?/\"))\nprint(check_str(\"_\"))\nprint(check_str(\"_\"))\nprint(check_str(\".\"))\nprint(check_str(\".\"))\nprint(check_str(\"a\"))\nprint(check_str(\"b\"))\nprint(check_str(\"c\"))\nprint(check_str(\"d\"))\nprint(check_str(\"e\"))\nprint(check_str(\"f\"))\nprint(check_str(\"g\"))\nprint(check_str(\"h\"))\nprint(check_str(\"i\"))\nprint(check_str(\"j\"))\nprint(check_str(\"k\"))\nprint(check_str(\"l\"))\nprint(check_str(\"m\"))\nprint(check_str(\"n\"))\nprint(check_str(\"o\"))\nprint(check_str(\"p\"))\nprint(check_str(\"q\"))\nprint(check_str(\"r\"))\nprint(check_str(\"s\"))\nprint(check_str(\"t\"))\nprint(check_str(\"u\"))\nprint(check_str(\"v\"))\nprint(check_str(\"w\"))\nprint(check_str(\"x\"))\nprint(check_str(\"y\"))\nprint(check_str(\"z\"))\nprint(check_str(\"0\"))\nprint(check_str(\"1\"))\nprint(check_str(\"2\"))\nprint(check_str(\"3\"))\nprint(check_str(\"4\"))\nprint(check_str(\"5\"))\nprint(check_str(\"6\"))\nprint(check_str(\"7\"))\nprint(check_str(\"8\"))\nprint(check_str(\"9\"))\nprint(check_str(\"aa\"))\nprint(check_str(\"bb\"))\nprint(check_str(\"cc\"))\nprint(check_str(\"dd\"))\nprint(check_str(\"ee\"))\nprint(check_str(\"ff\"))\nprint(check_str(\"gg\"))\nprint(check_str(\"hh\"))\nprint(check_str(\"ii\"))\nprint(check_str(\"jj\"))\nprint(check_str(\"kk\"))\nprint(check_str(\"ll\"))\nprint(check_str(\"mm\"))\nprint(check_str(\"nn\"))\nprint(check_str(\"oo\"))\nprint(check_str(\"pp\"))\nprint(check_str(\"qq\"))\nprint(check_str(\"rr\"))\nprint(check_str(\"ss\"))\nprint(check_str(\"tt\"))\nprint(check_str(\"uu\"))\nprint(check_str(\"vv\"))\nprint(check_str(\"ww\"))\nprint(check_str(\"xx\"))\nprint(check_str(\"yy\"))\nprint(check_str(\"zz\"))\nprint(check_str(\"a\"))\nprint(check_str(\"b\"))\nprint(check_str(\"c\"))\nprint(check_str(\"d\"))\nprint(check_str(\"e\"))\nprint(check_str(\"f\"))\nprint(check_str(\"g\"))\nprint(check_str(\"h\"))\nprint(check_str(\"i\"))\nprint(check_str(\"j\"))\nprint(check_str(\"k\"))\nprint(check_str(\"l\"))\nprint(check_str(\"m\"))\nprint(check_str(\"n\"))\nprint(check_str(\"o\"))\nprint(check_str(\"p\"))\nprint(check_str(\"q\"))\nprint(check_str(\"r\"))\nprint(check_str(\"s\"))\nprint(check_str(\"t\"))\nprint(check_str(\"u\"))\nprint(check_str(\"v\"))\nprint(check_str(\"w\"))\nprint(check_str(\"x\"))\nprint(check_str(\"y\"))\nprint(check_str(\"z\"))\nprint(check_str(\"A\"))\nprint(check_str(\"B\"))\nprint(check_str(\"C\"))\nprint(check_str(\"D\"))\nprint(check_str(\"E\"))\nprint(check_str(\"F\"))\nprint(check_str(\"G\"))\nprint(check_str(\"H\"))\nprint(check_str(\"I\"))\nprint(check_str(\"J\"))\nprint(check_str(\"K\"))\nprint(check_str(\"L\"))\nprint(check_str(\"M\"))\nprint(check_str(\"N\"))\nprint(check_str(\"O\"))\nprint(check_str(\"P\"))\nprint(check_str(\"Q\"))\nprint(check_str(\"R\"))\nprint(check_str(\"S\"))\nprint(check_str(\"T\"))\nprint(check_str(\"U\"))\nprint(check_str(\"V\"))\nprint(check_str(\"W\"))\nprint(check_str(\"X\"))\nprint(check_str(\"Y\"))\nprint(check_str(\"Z\"))\nprint(check_str(\"!\"))\nprint(check_str(\"\\\"\"))\nprint(check_str(\"#\"))\nprint(check_str(\"$\"))\nprint(check_str(\"%\"))\nprint(check_str(\"&\"))\nprint(check_str(\"'\"))\nprint(check_str(\"(\"))\nprint(check_str(\")\"))\nprint(check_str(\":\"))\nprint(check_str(\";\"))\nprint(check_str(\"=\"))\nprint(check_str(\"+\"))\nprint(check_str(\"-\"))\nprint(check_str(\"*\"))\nprint(check_str(\"/\"))\nprint(check_str(\"?\"))\nprint(check_str(\"@\"))\nprint(check_str(\"[\"))\nprint(check_str(\"\\\\\"))\nprint(check_str(\"]\"))\nprint(check_str(\"^\"))\nprint(check_str(\"_\"))\nprint(check_str(\"`\"))\nprint"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_str('is') == False\nassert     check_str('is') == False\nassert     check_str('is') == False\nassert     check_str('is') == False\nassert     check_str('is') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    check_str('A') == True\n    check_str('a') == True\n    check_str('W') == False\n    check_str('XYZ') == False\n    check_str('i1') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_str(\"aeiou\") == True, \"Should be True\"\nassert check_str(\"aeiou\") == False, \"Should be False\"\nassert check_str(\"hi\") == False, \"Should be False\"\nassert check_str(\"\") == False, \"Should be False\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_str('d') == False \nassert     check_str('D') == True \nassert     check_str('d') == False \nassert     check_str('D') == True \nassert     check_str('aeiou') == True \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nif __name__ == '__main__': \n    s = input()\n    print (check_str(s)"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_str('a') == True, 'a'\nassert     check_str('A') == False, 'A'\nassert     check_str('ab') == False, 'ab'\nassert     check_str('abb') == True, 'abb'\nassert     check_str('A') == False, 'A'\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_str(\"\") \nassert     check_str(\"b\") \nassert     check_str(\"ad\") \nassert     check_str(\"A\") \nassert     check_str(\"R\") \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_vowel(letter): \n    '''\n    Write a function which checks whether the given letter is vowel or not using regex.\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 6\nassert     geometric_sum(4) == 14\nassert     geometric_sum(5) == 41\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef geometric_sum_faster(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # below is the naive way\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return n*(n-1)\n    # this is the fastest\n    return 1/n*(1 + n)"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     geometric_sum(1) == 1, 'incorrect geometric_sum'\nassert     geometric_sum(2) == 2, 'incorrect geometric_sum'\nassert     geometric_sum(3) == 6, 'incorrect geometric_sum'\nassert     geometric_sum(4) == 14, 'incorrect geometric_sum'\nassert     geometric_sum(5) == 24, 'incorrect geometric_sum'\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     geometric_sum(1) == 0.5\nassert geometric_sum(2) == 1.0\nassert geometric_sum(3) == 1.5\nassert geometric_sum(5) == 2.2857142857142856\nassert geometric_sum(10) == 3.8837209302325582\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 4\nassert     geometric_sum(4) == 10\nassert     geometric_sum(5) == 22\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     geometric_sum(1) == 1 \nassert     geometric_sum(2) == 2 \nassert     geometric_sum(4) == 2 * 3\nassert     geometric_sum(8) == 2 * 3 * 4\nassert     geometric_sum(10) == 2 * 3 * 4 * 5\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         geometric_sum(3) == 5\nassert         geometric_sum(5) == 20\nassert         geometric_sum(10) == 274\nassert         geometric_sum(1) == 1\nassert         geometric_sum(0) == 1\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     geometric_sum(1) == 1.0\nassert     geometric_sum(2) == 1.5\nassert     geometric_sum(3) == 2.0\nassert     geometric_sum(4) == 1.8333333333333333\nassert     geometric_sum(5) == 2.3636363636363636\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_Index(4)==2, 'Wrong value'\nfind_Index(5)==0, 'Wrong value'\nfind_Index(6)==3, 'Wrong value'\nfind_Index(10)==5, 'Wrong value'\nfind_Index(11)==6, 'Wrong value'\nfind_Index(12)==7, 'Wrong value'\nfind_Index(13)==8, 'Wrong value'\nfind_Index(14)==9, 'Wrong value'\nfind_Index(15)==10, 'Wrong value'\nfind_Index(16)==11, 'Wrong value'\nfind_Index(17)==12, 'Wrong value'\nfind_Index(18)==13, 'Wrong value'\nfind_Index(19)==14, 'Wrong value'\nfind_Index(20)==15, 'Wrong value'\nfind_Index(21)==16, 'Wrong value'\nfind_Index(22)==17, 'Wrong value'\nfind_Index(23)==18, 'Wrong value'\nfind_Index(24)==19, 'Wrong value'\nfind_Index(25)==20, 'Wrong value'\nfind_Index(26)==21, 'Wrong value'\nfind_Index(27)==22, 'Wrong value'\nfind_Index(28)==23, 'Wrong value'\nfind_Index(29)==24, 'Wrong value'\nfind_Index(30)==25, 'Wrong value'\nfind_Index(31)==26, 'Wrong value'\nfind_Index(32)==27, 'Wrong value'\nfind_Index(33)==28, 'Wrong value'\nfind_Index(34)==29, 'Wrong value'\nfind_Index(35)==30, 'Wrong value'\nfind_Index(36)==31, 'Wrong value'\nfind_Index(37)==32, 'Wrong value'\nfind_Index(38)==33, 'Wrong value'\nfind_Index(39)==34, 'Wrong value'\nfind_Index(40)==35, 'Wrong value'\nfind_Index(41)==36, 'Wrong value'\nfind_Index(42)==37, 'Wrong value'\nfind_Index(43)==38, 'Wrong value'\nfind_Index(44)==39, 'Wrong value'\nfind_Index(45)==40, 'Wrong value'\nfind_Index(46)==41, 'Wrong value'\nfind_Index(47)==42, 'Wrong value'\nfind_Index(48)==43, 'Wrong value'\nfind_Index(49)==44, 'Wrong value'\nfind_Index(50)==45, 'Wrong value'\nfind_Index(51)==46, 'Wrong value'\nfind_Index(52)==47, 'Wrong value'\nfind_Index(53)==48, 'Wrong value'\nfind_Index(54)==49, 'Wrong value'\nfind_Index(55)==50, 'Wrong value'\nfind_Index(56)==51, 'Wrong value'\nfind_Index(57)==52, 'Wrong value'\nfind_Index(58)==53, 'Wrong value'\nfind_Index(59)==54, 'Wrong value'\nfind_Index(60)==55, 'Wrong value'\nfind_Index(61)==56, 'Wrong value'\nfind_Index(62)==57, 'Wrong value'\nfind_Index(63)==58, 'Wrong value'\nfind_Index(64)==59, 'Wrong value'\nfind_Index(65)==60, 'Wrong value'\nfind_Index(66)==61, 'Wrong value'\nfind_Index(67)==62, 'Wrong value'\nfind_Index(68)==63, 'Wrong value'\nfind_Index(69)==64, 'Wrong value'\nfind_Index(70)==65, 'Wrong value'\nfind_Index(71)==66, 'Wrong value'\nfind_Index(72)==67, 'Wrong value'\nfind_Index(73)==68, 'Wrong value'\nfind_Index(74)==69, 'Wrong value'\nfind_Index(75)==70, 'Wrong value'\nfind_Index(76)==71, 'Wrong value'\nfind_Index(77)==72, 'Wrong value'\nfind_Index(78)==73, 'Wrong value'\nfind_Index(79)==74, 'Wrong value'\nfind_Index(80)==75, 'Wrong value'\nfind_Index(81)==76, 'Wrong value'\nfind_Index(82)==77, 'Wrong value'\nfind_Index(83)==78, 'Wrong value'\nfind_Index(84)==79, 'Wrong value'\nfind_Index(85)==80, 'Wrong value'\nfind_Index(86)==81, 'Wrong value'\nfind_Index(87)==82, 'Wrong value'\nfind_Index(88)==83, 'Wrong value'\nfind_Index(89)==84, 'Wrong value'\nfind_Index(90)==85, 'Wrong value'\nfind_Index(91)==86, 'Wrong value'\nfind_Index(92)==87, 'Wrong value'\nfind_Index(93)==88, 'Wrong value'\nfind_Index(94)==89, 'Wrong value'\nfind_Index(95)==90, 'Wrong value'\nfind_Index(96)==91, 'Wrong value'\nfind_Index(97)==92, 'Wrong value'\nfind_Index(98)==93, 'Wrong value'\nfind_Index(99)==94, 'Wrong value'\nfind_Index(100)==95, 'Wrong value'\nfind_Index(101)==96, 'Wrong value'\nfind_Index(102)==97, 'Wrong value'\nfind_Index(103)==98, 'Wrong value'\nfind_Index(104)==99, 'Wrong value'\nfind_Index(105)==100, 'Wrong value'\nfind_Index(106)==101, 'Wrong value'\nfind_Index(107)==102, 'Wrong value'\nfind_Index(108)==103, 'Wrong value'\nfind_Index(109)==104, 'Wrong value'\nfind_Index(110)==105, 'Wrong value'\nfind_Index(111)==106, 'Wrong value'\nfind_Index(112)==107, 'Wrong value'\nfind_Index(113)==108, 'Wrong value'\nfind_Index(114)==109, 'Wrong value'\nfind_Index(115)==110, 'Wrong value'\nfind_Index(116)==111, 'Wrong value'\nfind_Index(117)==112, 'Wrong value'\nfind_Index(118)==113, 'Wrong value'\nfind_Index(119)==114, 'Wrong value'\nfind_Index(120)==115, 'Wrong value'\nfind_Index(121)==116, 'Wrong value'\nfind_Index(122)==117, 'Wrong value'\nfind_Index(123)==118, 'Wrong value'\nfind_Index(124)==119, 'Wrong value'\nfind_Index(125)==120, 'Wrong value'\nfind_Index(126)==121, 'Wrong value'\nfind_Index(127)==122, 'Wrong value'\nfind_Index(128)==123, 'Wrong value'\nfind_Index(129)==124, 'Wrong value'\nfind_Index(130)==125, 'Wrong value'\nfind_Index(131)==126, 'Wrong value'\nfind_Index(132)==127, 'Wrong value'\nfind_Index(133)==128, 'Wrong value'\nfind_Index(134)==129, 'Wrong value'\nfind_Index(135)==130, 'Wrong value'\nfind_Index(136)==131, 'Wrong value'\nfind_Index(137)==132, 'Wrong valu"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_Index(1) == 0\nfind_Index(2) == 0\nfind_Index(3) == 1\nfind_Index(4) == 2\nfind_Index(5) == 2\nfind_Index(6) == 3\nfind_Index(7) == 3\nfind_Index(8) == 4\nfind_Index(9) == 4\nfind_Index(10) == 5\nfind_Index(11) == 5\nfind_Index(12) == 6\nfind_Index(13) == 6\nfind_Index(14) == 7\nfind_Index(15) == 7\nfind_Index(16) == 8\nfind_Index(17) == 8\nfind_Index(18) == 9\nfind_Index(19) == 9\nfind_Index(20) == 10\nfind_Index(21) == 10\nfind_Index(22) == 11\nfind_Index(23) == 11\nfind_Index(24) == 12\nfind_Index(25) == 12\nfind_Index(26) == 13\nfind_Index(27) == 13\nfind_Index(28) == 14\nfind_Index(29) == 14\nfind_Index(30) == 15\nfind_Index(31) == 15\nfind_Index(32) == 16\nfind_Index(33) == 16\nfind_Index(34) == 17\nfind_Index(35) == 17\nfind_Index(36) == 18\nfind_Index(37) == 18\nfind_Index(38) == 19\nfind_Index(39) == 19\nfind_Index(40) == 20\nfind_Index(41) == 20\nfind_Index(42) == 21\nfind_Index(43) == 21\nfind_Index(44) == 22\nfind_Index(45) == 22\nfind_Index(46) == 23\nfind_Index(47) == 23\nfind_Index(48) == 24\nfind_Index(49) == 24\nfind_Index(50) == 25\nfind_Index(51) == 25\nfind_Index(52) == 26\nfind_Index(53) == 26\nfind_Index(54) == 27\nfind_Index(55) == 27\nfind_Index(56) == 28\nfind_Index(57) == 28\nfind_Index(58) == 29\nfind_Index(59) == 29\nfind_Index(60) == 30\nfind_Index(61) == 30\nfind_Index(62) == 31\nfind_Index(63) == 31\nfind_Index(64) == 32\nfind_Index(65) == 32\nfind_Index(66) == 33\nfind_Index(67) == 33\nfind_Index(68) == 34\nfind_Index(69) == 34\nfind_Index(70) == 35\nfind_Index(71) == 35\nfind_Index(72) == 36\nfind_Index(73) == 36\nfind_Index(74) == 37\nfind_Index(75) == 37\nfind_Index(76) == 38\nfind_Index(77) == 38\nfind_Index(78) == 39\nfind_Index(79) == 39\nfind_Index(80) == 40\nfind_Index(81) == 40\nfind_Index(82) == 41\nfind_Index(83) == 41\nfind_Index(84) == 42\nfind_Index(85) == 42\nfind_Index(86) == 43\nfind_Index(87) == 43\nfind_Index(88) == 44\nfind_Index(89) == 44\nfind_Index(90) == 45\nfind_Index(91) == 45\nfind_Index(92) == 46\nfind_Index(93) == 46\nfind_Index(94) == 47\nfind_Index(95) == 47\nfind_Index(96) == 48\nfind_Index(97) == 48\nfind_Index(98) == 49\nfind_Index(99) == 49\nfind_Index(100) == 50\nfind_Index(101) == 50\nfind_Index(102) == 51\nfind_Index(103) == 51\nfind_Index(104) == 52\nfind_Index(105) == 52\nfind_Index(106) == 53\nfind_Index(107) == 53\nfind_Index(108) == 54\nfind_Index(109) == 54\nfind_Index(110) == 55\nfind_Index(111) == 55\nfind_Index(112) == 56\nfind_Index(113) == 56\nfind_Index(114) == 57\nfind_Index(115) == 57\nfind_Index(116) == 58\nfind_Index(117) == 58\nfind_Index(118) == 59\nfind_Index(119) == 59\nfind_Index(120) == 60\nfind_Index(121) == 60\nfind_Index(122) == 61\nfind_Index(123) == 61\nfind_Index(124) == 62\nfind_Index(125) == 62\nfind_Index(126) == 63\nfind_Index(127) == 63\nfind_Index(128) == 64\nfind_Index(129) == 64\nfind_Index(130) == 65\nfind_Index(131) == 65\nfind_Index(132) == 66\nfind_Index(133) == 66\nfind_Index(134) == 67\nfind_Index(135) == 67\nfind_Index(136) == 68\nfind_Index(137) == 68\nfind_Index(138) == 69\nfind_Index(139) == 69\nfind_Index(140) == 70\nfind_Index(141) == 70\nfind_Index(142) == 71\nfind_Index(143) == 71\nfind_Index(144) == 72\nfind_Index(145) == 72\nfind_Index(146) == 73\nfind_Index(147) == 73\nfind_Index(148) == 74\nfind_Index(149) == 74\nfind_Index(150) == 75\nfind_Index(151) == 75\nfind_Index(152) == 76\nfind_Index(153) == 76\nfind_Index(154) == 77\nfind_Index(155) == 77\nfind_Index(156) == 78\nfind_Index(157) == 78\nfind_Index(158) == 79\nfind_Index(159) == 79\nfind_Index(160) == 80\nfind_Index(161) == 80\nfind_Index(162) == 81\nfind_Index(163) == 81\nfind_Index(164) == 82\nfind_Index(165) == 82\nfind_Index(166) == 83\nfind_Index(167) == 83\nfind_Index(168) == 84\nfind_Index(169) == 84\nfind_Index(170) == 85\nfind_Index(171) == 85\nfind_Index(172) == 86\nfind_Index(173) == 86\nfind_Index(174) == 87\nfind_Index(175) == 87\nfind_Index(176) == 88\nfind_Index(177) == 88\nfind_Index(178) == 89\nfind_Index(179) == 89\nfind_Index(180) == 90\nfind_Index(181) == 90\nfind_Index(182) == 91\nfind_Index(183) == 91\nfind_Index(184) == 92\nfind_Index(185) == 92\nfind_Index(186) == 93\nfind_Index(187) == 93\nfind_Index(188) == 94\nfind_Index(189) == 94\nfind_Index(190) == 95\nfind_Index(191) == 95\nfind_Index(192) == 96\nfind_Index(193) == 96\nfind_Index(194) == 97\nfind_Index(195) == 97\nfind_Index(196) == 98\nfind_Index(197) == 98\nfind_Index(198) == 99\nfind_Index(199) == 99\nfind_Index(200) == 100\nfind_Index(201) == 100\nfind_Index(202) == 101\nfind_Index(203) == 101\nfind_Index(204) == 102\nfind_Index(205) == 102\nfind_Index(206) == 103\nfind_Index(207) == 103\nfind_Index(208) == 104\nfind_Index(209) == 104\nfind_Index(210) == 105\nfind_Index(211) == 105\nfind_Index(212) == 106\nfind_Index(213) == 106\nfind_Index(214) == 107\nfind_Index(215) == 107\nfind_Index(216) == 108\nfind_Index(217) == 108\nfind_Index(218) == 109\nfin"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    number = 1\n    for i in range(n-1):\n        number = number*(i+1)\n    return number - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Index(1) == 0\nassert     find_Index(2) == 1\nassert     find_Index(3) == 2\nassert     find_Index(4) == 3\nassert     find_Index(5) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Index(1) == 0\nassert     find_Index(2) == 1\nassert     find_Index(3) == 1\nassert     find_Index(4) == 2\nassert     find_Index(5) == 2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_index_below(n):\n    '''\n    Write a python function to find index of smallest triangular number below n. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-below-n/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    n = 5\n    print(find_Index(n))\n\ndef find_Power(a, b):\n    '''\n    Write a python function to calculate a raised to a power b.\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_dict((\"Bob\", \"Smith\", \"12345\")) == {\n    \"name\": \"Smith\",\n    \"phone\": \"12345\"\n    }, \"Wrong tuple!\"\n\nassert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 0)) == {\n    1: \"2\",\n    2: \"3\",\n    3: \"4\",\n    4: \"5\",\n    5: \"6\",\n    6: \"7\",\n    7: \"8\",\n    8: \"9\",\n    9: \"0\",\n    0: \"0\"\n}, \"Wrong tuple!\""
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_dict(('a', 'b')) == {'a': 'b'}, \"test failed\"\nassert     tuple_to_dict(('a', 'b', 'c')) == {'a': 'b', 'c': 'b'}, \"test failed\"\nassert     tuple_to_dict((1, 2, 3)) == {1: 2, 2: 3, 3: 2}, \"test failed\"\nassert     tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == {'a': 'b', 'b': 'c', 'c': 'b', 'e': 'd', 'd': 'c', 'h': 'g', 'g': 'e', 'f': 'e'}, \"test failed\"\nassert     tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == {'a': 'b', 'b': 'c', 'c': 'b', 'e': 'd', 'd': 'c', 'h': 'g', 'g': 'e', 'f': 'e', 'i': 'j', 'j': 'i'}, \"test failed\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple of adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple-of-adjacent-elements/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_dict((1,2,3,4)) == {1: 2, 2: 3, 3: 4}\nassert     tuple_to_dict((1,2,3,4,5,6)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6}\nassert     tuple_to_dict((1,2,3,4,5,6,7,8)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8}\nassert     tuple_to_dict((1,2,3,4,5,6,7,8,9)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9}\nassert     tuple_to_dict((1,2,3,4,5,6,7,8,9,10)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_dict(test_tup) == {\n    'b': 1,\n    'e': 2,\n    'f': 3,\n    'g': 4\n    }\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_dict((1,2,3)) == {1:2,2:3,3:None}\nassert tuple_to_dict((5,6,7)) == {5:6,6:7,7:None}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5,5:1}\nassert tuple_to_dict((1,2,3,4,5,6)) == {1:2,2:3,3:4,4:5,5:6,6:1}\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Characters_Same(\"a\") == False, \"wrong output\"\nassert     all_Characters_Same(\"abc\") == True, \"wrong output\"\nassert     all_Characters_Same(\"abc\\n\") == False, \"wrong output\"\nassert     all_Characters_Same(\"ABC\") == True, \"wrong output\"\nassert     all_Characters_Same(\"\\t\") == False, \"wrong output\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Characters_Same('abcd') == False, \"incorrect result\"\nassert     all_Characters_Same('aad') == True, \"incorrect result\"\nassert     all_Characters_Same('abcdabcd') == True, \"incorrect result\"\nassert     all_Characters_Same('abcdabcdz') == False, \"incorrect result\"\nassert     all_Characters_Same('abc') == False, \"incorrect result\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Characters_Same(\"the\") == True\nassert     all_Characters_Same(\"The\") == False\nassert     all_Characters_Same(\"THERE\") == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same(s='ABC') == True, \\\n    \"Expected True, but returned %s\" % all_Characters_Same(s='ABC')\nassert     all_Characters_Same(s='ABC') == False, \\\n    \"Expected False, but returned %s\" % all_Characters_Same(s='ABC')\nassert     all_Characters_Same(s='ABC') == True, \\\n    \"Expected True, but returned %s\" % all_Characters_Same(s='ABC')\nassert     all_Characters_Same(s='ABD') == False, \\\n    \"Expected False, but returned %s\" % all_Characters_Same(s='ABC')\nassert     all_Characters_Same(s='ABDABC') == True, \\\n    \"Expected True, but returned %s\" % all_Characters_Same(s='ABC')\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same('abcd') == False\nassert all_Characters_Same('abcd') == True"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    all_Characters_Same('c') == True, 'Expected: True, Actual: False'\n    all_Characters_Same('a') == True, 'Expected: True, Actual: False'\n    all_Characters_Same('abc') == True, 'Expected: True, Actual: False'\n    all_Characters_Same('aac') == True, 'Expected: True, Actual: False'\n    all_Characters_Same('abcdef') == True, 'Expected: True, Actual: False'\n    all_Characters_Same('abcdefghijklmnopqrstuvwxyz') == False, 'Expected: False, Actual: True'\n\n'''\nTest Your Solution - Before You Submit\nYou can test your code by running the 'Test All' button in this openCV project.\n'''\ndef Test_all_Characters_Same():\n    print(\"Testing all_Characters_Same()...\", end=\"\")\n    assert all_Characters_Same('c') == True, 'Expected: True, Actual: False'\n    assert all_Characters_Same('a') == True, 'Expected: True, Actual: False'\n    assert all_Characters_Same('abc') == True, 'Expected: True, Actual: False'\n    "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Characters_Same(['a', 'a', 'a', 'a'])     == True, 'all_Characters_Same should return True'\nassert all_Characters_Same(['a', 'a', 'a', 'b'])    == False, 'all_Characters_Same should return False'\nassert all_Characters_Same(['a', 'a', 'a', 'a', 'a']) == True, 'all_Characters_Same should return True'\nassert all_Characters_Same(['a', 'a', 'a', 'b'])    == False, 'all_Characters_Same should return False'\nassert all_Characters_Same(['a', 'a', 'b', 'c', 'a', 'b', 'a']) == False, 'all_Characters_Same should return False'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Characters_Same(s = 'xyz') == True\nassert     all_Characters_Same(s = 'a') == False\nassert     all_Characters_Same(s = 'abcd') == False\nassert     all_Characters_Same(s = 'ab') == True\nassert     all_Characters_Same(s = 'ad') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Characters_Same('a') == True, '\"a\" is not same as others'\nassert     all_Characters_Same('aA') == False, '\"a\" and \"A\" is same'\nassert     all_Characters_Same('aA123') == False, '\"a\" and \"A\" are same but with different case'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Characters_Same('AA') == True, \"All the characters are same\"\nassert     all_Characters_Same('AAABCDD') == True, \"All the characters are same\"\nassert     all_Characters_Same('AAABBCCDD') == False, \"All the characters are not same\"\nassert     all_Characters_Same('AAABBD') == False, \"All the characters are not same\"\nassert     all_Characters_Same('AA') == True, \"All the characters are same\"\nprint(\"All the characters are same\")\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('\\033[32;1m \ud14c\ud2b8\ub85c\ud1a0\ube0c \uc0ac\uc774\uc988 : 3\uc758 \ubc30\uc218 \uacbd\uc6b0 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\\033[0m')\nside = 3\nprint('\\033[32;1m \ud14c\ud2b8\ub85c\ud1a0\ube0c \uc0ac\uc774\uc988 : ',side,'\uc758 \ubc18\uc9c0\ub984\uc744 \uae30\uc900\uc73c\ub85c \ud558\uc600\uc2b5\ub2c8\ub2e4.\\033[0m')\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef volume_tetrahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_tetrahedron(1) == math.sqrt(3)/2, 'Wrong answer: %f' % area_tetrahedron(1)\nassert     area_tetrahedron(2) == 3/2*math.sqrt(2), 'Wrong answer: %f' % area_tetrahedron(2)\nassert     area_tetrahedron(3) == 1/2*(3*math.sqrt(2)+3), 'Wrong answer: %f' % area_tetrahedron(3)\nassert     area_tetrahedron(4) == 1/2*(3*math.sqrt(2)+2), 'Wrong answer: %f' % area_tetrahedron(4)\nassert     area_tetrahedron(5) == math.sqrt(3)/2, 'Wrong answer: %f' % area_tetrahedron(5)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \narea_tetrahedron(2) == 3\narea_tetrahedron(5) == 3.1274337\n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef area_rhombus(length):\n    '''\n    Write a function that calculates the area of a rhombus.\n    :param length: the length of the rhombus sides\n    :return: the area of the rhombus\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef volume_tetrahedron(side,height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     area_tetrahedron(3) == 0.433\nassert     area_tetrahedron(4) == 0.412\n\ndef perimeter_tetrahedron(side):\n    '''\n    Write a function to caluclate the perimter of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rotate_right([1,2,3,4,5,6],2) ==[4,5,6,1,2,3]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 1, 2, 5]\nassert     rotate_right([1, 2, 3, 4, 5], 3) == [2, 3, 4, 1, 5]\nassert     rotate_right([1, 2, 3, 4, 5], 4) == [4, 1, 2, 3, 5]\nassert     rotate_right([1, 2, 3, 4, 5], 5) == [5, 1, 2, 3, 4]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rotate_right([1,2,3,4,5,6], 1) ==[5,6,1,2,3,4]\nassert     rotate_right([1,2,3,4,5,6], 2) ==[3,4,5,1,2,6]\nassert     rotate_right([1,2,3,4,5,6], 3) ==[4,5,1,2,3,6]\nassert     rotate_right([1,2,3,4,5,6], 4) ==[5,6,1,2,3,4]\nassert     rotate_right([1,2,3,4,5,6], 5) ==[6,1,2,3,4,5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # list = [1,2,3,4]\n    # rotate_right(list, 2) == [3,4,1,2]\n    list = [1,2,3,4,5]\n    rotate_right(list, 2) == [3,4,5,1,2]\n    \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert     rotate_right([1,2,3,4,5], 1) == [2,3,4,5,1]\nassert     rotate_right([1,2,3,4,5], 0) == [1,2,3,4,5]\n\ndef check_palindrome(string):\n    '''\n    Write a function to check if given string is palindrome or not.\n    '''\n    pass"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_rotate_right():\n    assert rotate_right([1, 2, 3], 1) == [2, 3, 1]\n    assert rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [5, 6, 7, 8, 9, 1, 2, 3, 4]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rotate_right([1,2,3,4,5,6,7], 2) == [4,5,6,7,1,2,3], \"Wrong result\"\nassert     rotate_right([1,2,3,4,5,6,7], 0) == [1,2,3,4,5,6,7], \"Wrong result\"\nassert     rotate_right([1,2,3,4,5,6,7], -2) == [3,4,5,6,7,1,2], \"Wrong result\"\nassert     rotate_right([1,2,3,4,5,6,7], -4) == [5,6,7,1,2,3,4], \"Wrong result\"\nassert     rotate_right([1,2,3,4,5,6,7], -8) == [2,3,4,5,6,7,1], \"Wrong result\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_none([None, None, None]) == False, \"return false\"\nassert     check_none([\"a\", None, \"b\"]) == True, \"return true\"\n\n\ndef check_list(test_tup):\n    '''\n    Write a function to check if the given tuple has any None value or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none((1,2,3,None,5))     == True, \"The tuple has none value\"\nassert     check_none((1,2,3,4,None))     == False, \"The tuple does not have any none value\"\nassert     check_none((None,2,3,4,5))     == True, \"The tuple has none value\"\nassert     check_none((None,2,3,None,5))     == False, \"The tuple does not have any none value\"\n\nprint(\"check_none is working correctly\")\nprint()\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_none(())     == False, 'Sample Test 1'\nassert     check_none((0, None, 1))     == False, 'Sample Test 2'\nassert     check_none((0, 'a', 1))     == False, 'Sample Test 3'\nassert     check_none((0, 1, None))     == True, 'Sample Test 4'\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none((None,None,None,None))     == False, 'Tuple with all none value should not return True'\nassert     check_none((1,None,2,3))     == False, 'Tuple with one none value should not return True'\nassert     check_none((1,None,2,None))     == True, 'Tuple with one none value should return True'\nassert     check_none((\"1\",\"2\",\"3\",None))     == False, 'Tuple with one none value should not return True'\nassert     check_none((None,None,None,None,\"1\",\"2\",\"3\",\"4\",\"5\",None))     == True, 'Tuple with one none value should return True'\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_none((1, None, 2)) == True, \" 1st Test Case Failed\"\nassert     check_none((1, 'a', 2)) == True, \" 2nd Test Case Failed\"\nassert     check_none((None, 2, 'a')) == True, \" 3rd Test Case Failed\"\nassert     check_none((1, None, 2)) == False, \" 4th Test Case Failed\"\nassert     check_none((1, 'a', 2)) == False, \" 5th Test Case Failed\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_none((1,2,3)) == False, \"Wrong answer\"\nassert     check_none((1,2,None)) == True, \"Wrong answer\"\nassert     check_none((None,None,None)) == False, \"Wrong answer\"\nassert     check_none((None,1,None)) == False, \"Wrong answer\"\nassert     check_none((1,None,None)) == False, \"Wrong answer\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none(('a','b','c','d')) == False\nassert    check_none(('a','b','c')) == True\nassert    check_none(('a','b','c','d','e','f')) == False\nassert    check_none(('a','b','c','d','e','f','g','h','i')) == True\nassert    check_none(()) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_none((1, 2, None, 4, None)) == True, 'Your function does not have a None value'\nassert    check_none((None,)) == True, 'Your function does not have a None value'\nassert    check_none((1, None, None, 2, None)) == False, 'Your function does not have a None value'\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none((1, 2, 3, 4)) == (True, True, True, True), 'Test 1 Failed'\nassert     check_none((1, 2, 3, None)) == (True, True, True, False), 'Test 2 Failed'\nassert     check_none((1, 2, None, 4)) == (True, True, False, True), 'Test 3 Failed'\nassert     check_none((None, None, None, None)) == (False, False, False, False), 'Test 4 Failed'\nassert     check_none((None, None, None, 1)) == (False, False, False, True), 'Test 5 Failed'\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert divisible_by_digits(1, 10) == False\nassert divisible_by_digits(1, 99) == False\nassert divisible_by_digits(2, 99) == False\nassert divisible_by_digits(2, 10) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     divisible_by_digits(0,10) == []\nassert     divisible_by_digits(0,100) == []\nassert     divisible_by_digits(0,1000) == []\nassert     divisible_by_digits(1,10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(1,100) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndivisible_by_digits(1,10) == ['1','2','3','4','5','6','7','8','9']\n\nassert \ndivisible_by_digits(1,20) == ['1','2','3','4','5','6','7','8','9','10']\n\nassert \ndivisible_by_digits(1,100) == ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99']\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     divisible_by_digits(2, 10) == [2, 4, 6, 8]\nassert     divisible_by_digits(5, 10) == []\nassert     divisible_by_digits(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     divisible_by_digits(200, 1000) == []\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndivisible_by_digits(50,100) == [25,50,75,100]\nassert \ndivisible_by_digits(50,200) == [25,50,75,100,125]\nassert \ndivisible_by_digits(50,300) == [25,50,75,100,125,150]\nassert \ndivisible_by_digits(50,400) == [25,50,75,100,125,150,175]\nassert \ndivisible_by_digits(50,500) == [25,50,75,100,125,150,175,200]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum + 1) if \n        all(i % j == 0 for j in range(startnum, endnum + 1))]\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sector_area(1,360) ==    0.5, 'incorrect calculation'\nassert     sector_area(1,0) ==    0.5, 'incorrect calculation'\nassert     sector_area(1,359) ==    0.5, 'incorrect calculation'\n\ndef molar_heat_capacity_pH_pH_solution(pH,T):\n    '''\n    Write a function to find heat capacity of molten salts in a solution at a pH and temperature.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sector_area(5, 360) == 20 * 5\nassert     sector_area(7, 90) == 7 * 5\nassert     sector_area(7, 0) == 5 * 7\nassert     sector_area(0, 360) == 5 * 5\nassert     sector_area(2, 0) == 2 * 5\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sector_area(5.0, 45.0) == None, 'Wrong output'\nassert sector_area(5.0, -45.0) == None, 'Wrong output'\n\ndef area_of_sector(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sector_area(3, 90) ==    math.pi*3**2/4\nassert    sector_area(3, 359) ==    None\nassert    sector_area(3, -90) ==    None\nassert    sector_area(3, 0) ==    math.pi*3**2/4\nassert    sector_area(3, 90) ==    math.pi*3**2/4\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sector_area(1,0) == math.pi\nassert     sector_area(2,359) == 2*math.pi\nassert     sector_area(0.1,90) == 0.1*math.pi\nassert     sector_area(0.1,360) == 0\nassert     sector_area(0.1,-90) == 0.1*math.pi\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sector_area(0.3,30)==None\nassert sector_area(0.3,360)==None\nassert sector_area(0.3,0)==None\nassert sector_area(0.3,360.0)==None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsector_area(0,360) == 0\nsector_area(0,45) == 0.5*math.pi\nsector_area(0,225) == 0.5*math.pi\nsector_area(0,135) == 0.5*math.pi\nsector_area(0,45) == 0.5*math.pi\nsector_area(1,360) == 0.5*math.pi\nsector_area(1,45) == 0.5*math.pi\nsector_area(1,225) == 0.5*math.pi\nsector_area(1,135) == 0.5*math.pi\nsector_area(1,45) == 0.5*math.pi\nsector_area(2,360) == 0.5*math.pi\nsector_area(2,45) == 0.5*math.pi\nsector_area(2,225) == 0.5*math.pi\nsector_area(2,135) == 0.5*math.pi\nsector_area(2,45) == 0.5*math.pi\nsector_area(3,360) == 0.5*math.pi\nsector_area(3,45) == 0.5*math.pi\nsector_area(3,225) == 0.5*math.pi\nsector_area(3,135) == 0.5*math.pi\nsector_area(3,45) == 0.5*math.pi\nsector_area(4,360) == 0.5*math.pi\nsector_area(4,45) == 0.5*math.pi\nsector_area(4,225) == 0.5*math.pi\nsector_area(4,135) == 0.5*math.pi\nsector_area(4,45) == 0.5*math.pi\nsector_area(5,360) == 0.5*math.pi\nsector_area(5,45) == 0.5*math.pi\nsector_area(5,225) == 0.5*math.pi\nsector_area(5,135) == 0.5*math.pi\nsector_area(5,45) == 0.5*math.pi\nsector_area(6,360) == 0.5*math.pi\nsector_area(6,45) == 0.5*math.pi\nsector_area(6,225) == 0.5*math.pi\nsector_area(6,135) == 0.5*math.pi\nsector_area(6,45) == 0.5*math.pi\nsector_area(7,360) == 0.5*math.pi\nsector_area(7,45) == 0.5*math.pi\nsector_area(7,225) == 0.5*math.pi\nsector_area(7,135) == 0.5*math.pi\nsector_area(7,45) == 0.5*math.pi\nsector_area(8,360) == 0.5*math.pi\nsector_area(8,45) == 0.5*math.pi\nsector_area(8,225) == 0.5*math.pi\nsector_area(8,135) == 0.5*math.pi\nsector_area(8,45) == 0.5*math.pi\nsector_area(9,360) == 0.5*math.pi\nsector_area(9,45) == 0.5*math.pi\nsector_area(9,225) == 0.5*math.pi\nsector_area(9,135) == 0.5*math.pi\nsector_area(9,45) == 0.5*math.pi\nsector_area(10,360) == 0.5*math.pi\nsector_area(10,45) == 0.5*math.pi\nsector_area(10,225) == 0.5*math.pi\nsector_area(10,135) == 0.5*math.pi\nsector_area(10,45) == 0.5*math.pi\nsector_area(11,360) == 0.5*math.pi\nsector_area(11,45) == 0.5*math.pi\nsector_area(11,225) == 0.5*math.pi\nsector_area(11,135) == 0.5*math.pi\nsector_area(11,45) == 0.5*math.pi\nsector_area(12,360) == 0.5*math.pi\nsector_area(12,45) == 0.5*math.pi\nsector_area(12,225) == 0.5*math.pi\nsector_area(12,135) == 0.5*math.pi\nsector_area(12,45) == 0.5*math.pi\nsector_area(13,360) == 0.5*math.pi\nsector_area(13,45) == 0.5*math.pi\nsector_area(13,225) == 0.5*math.pi\nsector_area(13,135) == 0.5*math.pi\nsector_area(13,45) == 0.5*math.pi\nsector_area(14,360) == 0.5*math.pi\nsector_area(14,45) == 0.5*math.pi\nsector_area(14,225) == 0.5*math.pi\nsector_area(14,135) == 0.5*math.pi\nsector_area(14,45) == 0.5*math.pi\nsector_area(15,360) == 0.5*math.pi\nsector_area(15,45) == 0.5*math.pi\nsector_area(15,225) == 0.5*math.pi\nsector_area(15,135) == 0.5*math.pi\nsector_area(15,45) == 0.5*math.pi\nsector_area(16,360) == 0.5*math.pi\nsector_area(16,45) == 0.5*math.pi\nsector_area(16,225) == 0.5*math.pi\nsector_area(16,135) == 0.5*math.pi\nsector_area(16,45) == 0.5*math.pi\nsector_area(17,360) == 0.5*math.pi\nsector_area(17,45) == 0.5*math.pi\nsector_area(17,225) == 0.5*math.pi\nsector_area(17,135) == 0.5*math.pi\nsector_area(17,45) == 0.5*math.pi\nsector_area(18,360) == 0.5*math.pi\nsector_area(18,45) == 0.5*math.pi\nsector_area(18,225) == 0.5*math.pi\nsector_area(18,135) == 0.5*math.pi\nsector_area(18,45) == 0.5*math.pi\nsector_area(19,360) == 0.5*math.pi\nsector_area(19,45) == 0.5*math.pi\nsector_area(19,225) == 0.5*math.pi\nsector_area(19,135) == 0.5*math.pi\nsector_area(19,45) == 0.5*math.pi\nsector_area(20,360) == 0.5*math.pi\nsector_area(20,45) == 0.5*math.pi\nsector_area(20,225) == 0.5*math.pi\nsector_area(20,135) == 0.5*math.pi\nsector_area(20,45) == 0.5*math.pi\nsector_area(21,360) == 0.5*math.pi\nsector_area(21,45) == 0.5*math.pi\nsector_area(21,225) == 0.5*math.pi\nsector_area(21,135) == 0.5*math.pi\nsector_area(21,45) == 0.5*math.pi\nsector_area(22,360) == 0.5*math.pi\nsector_area(22,45) == 0.5*math.pi\nsector_area(22,225) == 0.5*math.pi\nsector_area(22,135) == 0.5*math.pi\nsector_area(22,45) == 0.5*math.pi\nsector_area(23,360) == 0.5*math.pi\nsector_area(23,45) == "
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsector_area(1,math.pi/2) == 1\nsector_area(1,math.pi) == 1\nsector_area(1,math.pi*3/2) == 1\nsector_area(1,360) == 1\nsector_area(1,360+1) == 1\nsector_area(1,359) == 1\nsector_area(1,359+1) == 1\nsector_area(1,361) == 1\nsector_area(1,361+1) == 1\nsector_area(1,360) == None\nsector_area(1,361) == None\nsector_area(1,361+1) == None\nsector_area(1,361) == None\nsector_area(1,361+1) == None\nsector_area(1,361) == None\nsector_area(1,361+1) == None\nsector_area(1,0) == None\nsector_area(1,360) == None\nsector_area(1,0) == None\nsector_area(1,360+1) == None\nsector_area(1,0) == None\nsector_area(1,360) == None\nsector_area(1,360+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,360) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,0) == None\nsector_area(1,360) == None\nsector_area(1,0) == None\nsector_area(1,360+1) == None\nsector_area(1,0) == None\nsector_area(1,360) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,0) == None\nsector_area(1,360) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,0) == None\nsector_area(1,360) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsector_area(1,359+1) == None\nsector_area(1,359) == None\nsecto"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsector_area(2,90) == None\nsector_area(2,75) == 90\nsector_area(1,0) == 0\nsector_area(1,1) == 1\nsector_area(1,0.1) == 0.1\nsector_area(1,36) == 360\nsector_area(1,1.2) == 0.2\nsector_area(1,36.6) == 360\nsector_area(1,360) == 0\nsector_area(1,360.1) == 0.1\nsector_area(1,360.2) == 0.2\nsector_area(1,360.3) == 0.3\nsector_area(1,360.4) == 0.4\nsector_area(1,360.5) == 0.5\nsector_area(1,360.6) == 0.6\nsector_area(1,360.7) == 0.7\nsector_area(1,360.8) == 0.8\nsector_area(1,360.9) == 0.9\nsector_area(1,361) == 1\nsector_area(1,361.1) == 1.1\nsector_area(1,361.2) == 1.2\nsector_area(1,361.3) == 1.3\nsector_area(1,361.4) == 1.4\nsector_area(1,361.5) == 1.5\nsector_area(1,361.6) == 1.6\nsector_area(1,361.7) == 1.7\nsector_area(1,361.8) == 1.8\nsector_area(1,361.9) == 1.9\nsector_area(1,362) == 2\nsector_area(1,362.1) == 2.1\nsector_area(1,362.2) == 2.2\nsector_area(1,362.3) == 2.3\nsector_area(1,362.4) == 2.4\nsector_area(1,362.5) == 2.5\nsector_area(1,362.6) == 2.6\nsector_area(1,362.7) == 2.7\nsector_area(1,362.8) == 2.8\nsector_area(1,362.9) == 2.9\nsector_area(1,363) == 3\nsector_area(1,363.1) == 3.1\nsector_area(1,363.2) == 3.2\nsector_area(1,363.3) == 3.3\nsector_area(1,363.4) == 3.4\nsector_area(1,363.5) == 3.5\nsector_area(1,363.6) == 3.6\nsector_area(1,363.7) == 3.7\nsector_area(1,363.8) == 3.8\nsector_area(1,363.9) == 3.9\nsector_area(1,364) == 4\nsector_area(1,364.1) == 4.1\nsector_area(1,364.2) == 4.2\nsector_area(1,364.3) == 4.3\nsector_area(1,364.4) == 4.4\nsector_area(1,364.5) == 4.5\nsector_area(1,364.6) == 4.6\nsector_area(1,364.7) == 4.7\nsector_area(1,364.8) == 4.8\nsector_area(1,364.9) == 4.9\nsector_area(1,365) == 5\nsector_area(1,365.1) == 5.1\nsector_area(1,365.2) == 5.2\nsector_area(1,365.3) == 5.3\nsector_area(1,365.4) == 5.4\nsector_area(1,365.5) == 5.5\nsector_area(1,365.6) == 5.6\nsector_area(1,365.7) == 5.7\nsector_area(1,365.8) == 5.8\nsector_area(1,365.9) == 5.9\nsector_area(1,366) == 6\nsector_area(1,366.1) == 6.1\nsector_area(1,366.2) == 6.2\nsector_area(1,366.3) == 6.3\nsector_area(1,366.4) == 6.4\nsector_area(1,366.5) == 6.5\nsector_area(1,366.6) == 6.6\nsector_area(1,366.7) == 6.7\nsector_area(1,366.8) == 6.8\nsector_area(1,366.9) == 6.9\nsector_area(1,367) == 7\nsector_area(1,367.1) == 7.1\nsector_area(1,367.2) == 7.2\nsector_area(1,367.3) == 7.3\nsector_area(1,367.4) == 7.4\nsector_area(1,367.5) == 7.5\nsector_area(1,367.6) == 7.6\nsector_area(1,367.7) == 7.7\nsector_area(1,367.8) == 7.8\nsector_area(1,367.9) == 7.9\nsector_area(1,368) == 8\nsector_area(1,368.1) == 8.1\nsector_area(1,368.2) == 8.2\nsector_area(1,368.3) == 8.3\nsector_area(1,368.4) == 8.4\nsector_area(1,368.5) == 8.5\nsector_area(1,368.6) == 8.6\nsector_area(1,368.7) == 8.7\nsector_area(1,368.8) == 8.8\nsector_area(1,368.9) == 8.9\nsector_area(1,369) == 9\nsector_area(1,369.1) == 9.1\nsector_area(1,369.2) == 9.2\nsector_area(1,369.3) == 9.3\nsector_area(1,369.4) == 9.4\nsector_area(1,369.5) == 9.5\nsector_area(1,369.6) == 9.6\nsector_area(1,369.7) == 9.7\nsector_area(1,369.8) == 9.8\nsector_area(1,369.9) == 9.9\nsector_area(1,370) == 10\nsector_area(1,370.1) == 10.1\nsector_area(1,370.2) == 10.2\nsector_area(1,370.3) == 10.3\nsector_area(1,370.4) == 10.4\nsector_area(1,370.5) == 10.5\nsector_area(1,370.6) == 10.6\nsector_area(1,370.7) == 10.7\nsector_area(1,370.8) == 10.8\nsector_area(1,370.9) == 10.9\nsector_area(1,371) == 11\nsector_area(1,371.1) == 11.1\nsector_area(1,371.2) == 11.2\nsector_area(1,371.3) == 11.3\nsector_area(1,371.4) == 11.4\nsector_area(1,371.5) == 11.5\nsector_area(1,371.6) == 11.6\nsector_area(1,371.7) == 11.7\nsector_area(1,371.8) == 11.8\nsector_area(1,371.9) == 11.9\nsector_area(1,372) == 12\nsector_area(1,372.1) == 12.1\nsector_area(1,372.2) == 12.2\nsector_area(1,372.3) == 12.3\nsector_area(1,372.4) == 12.4\nsector_area(1,372.5) == 12.5\nsector_area(1,372.6) == 12.6\nsector_area(1,372.7) == 12.7\nsector_area(1,372.8"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lcs_of_three('ab', 'ac', 'ad') == 1\nassert lcs_of_three('ac', 'ab', 'ad') == 1\nassert lcs_of_three('ab', 'ac', 'ad') == 1\nassert lcs_of_three('ab', 'ab', 'ab') == 2\nassert lcs_of_three('ab', 'ab', 'ac') == 1\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lcs_of_three('DIAGNOSE','ROSE','DISEASE') == 'DISEASE'\nassert     lcs_of_three('DIAGNOSE','DISEASE','ROSE') == 'DISEASE'\nassert     lcs_of_three('DIAGNOSE','DISEASE','SENSITIVE') == 'DISEASE'\nassert     lcs_of_three('DIAGNOSE','ROSE','DISEASE') == 'DISEASE'\nassert     lcs_of_three('DIAGNOSE','DISEASE','SENSITIVE') == 'DISEASE'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lcs_of_two(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"BCDDEE\") == \"CD\"\nassert     lcs_of_three(\"ABCDGH\", \"ABD\", \"AACDD\") == \"\"\nassert     lcs_of_three(\"ABCDGH\", \"ABD\", \"AADCD\") == \"CD\"\nassert     lcs_of_three(\"ABCDGH\", \"AED\", \"ABD\") == \"\"\nassert     lcs_of_three(\"ABCDGH\", \"ED\", \"ABC\") == \"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lcs_of_three('abc','ac', 'ahb') == 'ahb'\nassert     lcs_of_three('abcb','abca','abc') == 'abc'\nassert     lcs_of_three('abc','ac', 'bcd') == ''\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef lcs_of_three_optimized(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    # dp[i][j] denotes the length of longest common subsequence of first i characters of X and first j characters of Y\n    dp = [[0 for _ in range(len(Z))] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\nassert\n\ndef lcs_of_three_optimized_test():\n    "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TATAB\") == \"TAB\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GT\") == \"\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGG\") == \"AGG\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"A\") == \"A\"\n\ndef lcs_of_two(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lcs_of_three('aaca','a','aaca') == ['a','a','a']\nassert     lcs_of_three('ac','a','ac') == ['a']\nassert     lcs_of_three('aaaaaaaaaa','aaaaaaaaa','aaaaaaaaaa') == ['a','a','a','a','a','a']\nassert     lcs_of_three('ac','aa','ac') == ['a']\nassert     lcs_of_three('aa','ac','ac') == ['a']\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef lcs_of_three_dynamic_prog(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # return the value for lcs_of_three\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert capital_words_spaces(\"Hello world\") == \"Hello world\"\nassert capital_words_spaces(\"hello world\") == \"Hello world\"\nassert capital_words_spaces(\"heLlO WoRlD\") == \"HeLlO WoRlD\"\nassert capital_words_spaces(\"HElLO WoRlD\") == \"HeLlO WoRlD\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     capital_words_spaces('lOhD L oF, iF') == 'lOhD L oF, iF'\nassert     capital_words_spaces('lOhD L oF,iF') == 'lOhD L oF,iF'\nassert     capital_words_spaces('lOhD L oF,iF') == 'lOhD L oF,iF'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     capital_words_spaces(\"It's so easy to be a like\") == \"It's so easy to be a like \"\nassert     capital_words_spaces(\"Are you kidding me?\") == \"Are you kidding me?\"\nassert     capital_words_spaces(\"Did you know that is a noob\") == \"Did you know that is a noob \"\nassert     capital_words_spaces(\"If you are not a noob, you are an idiot\") == \"If you are not a noob, you are an idiot \"\nassert     capital_words_spaces(\"I heard this cry from a famous hero\") == \"I heard this cry from a famous hero \"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     capital_words_spaces(\"Hi there! I am Gaurav\")     == \"Hi there! I am Gaurav\"\nassert     capital_words_spaces(\"Hi there! I am Gaurav Keshav\")     == \"Hi there! I am Gaurav Keshav\"\nassert     capital_words_spaces(\"Hi there! I am Gaurav Keshav S.G.\")     == \"Hi there! I am Gaurav Keshav S.G.\"\nassert     capital_words_spaces(\"Hi there! I am Gaurav Keshav S.G.!\")     == \"Hi there! I am Gaurav Keshav S.G.!\"\nassert     capital_words_spaces(\"Hi there! I am Gaurav Keshav S.G.!\")     == \"Hi there! I am Gaurav Keshav S.G.!\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     capital_words_spaces(\n                ''\n            ) == ''\n\n            \nassert     capital_words_spaces(\n                'i am   trying to test my Python skills '\n            ) == 'i am   trying to test my Python skills '\n\n            \nassert     capital_words_spaces(\n                'i am trying to test my Python skills'\n            ) == 'i am trying to test my Python skills'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncapital_words_spaces(\"This is a test\") == \"This is a test\"\ncapital_words_spaces(\"this is a test\") == \"This is a test\"\ncapital_words_spaces(\"  THIS IS A TEST  \") == \"This is a test\"\ncapital_words_spaces(\"  The quick brown fox  jumps over the lazy dog  \") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"  The Quick Brown Fox  jumps Over  the Lazy Dog  \") == \"The Quick Brown Fox jumps Over the Lazy Dog\"\ncapital_words_spaces(\"  the quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"  the  quick brown fox jumps  over the lazy dog\") == \"The  quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE Quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THEQUCICKBROWNFOXJUMPSOVERLAZYDOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THEQICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THEQICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUEKCK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brown fox jumps over the lazy dog\"\ncapital_words_spaces(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"The quick brow"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     capital_words_spaces(\"Hello World\") == \"Hello World\"\nassert     capital_words_spaces(\"Hello world\") == \"Hello world\"\nassert     capital_words_spaces(\"HELo wORlD\") == \"Hello world\"\nassert     capital_words_spaces(\"HELLO WORLD\") == \"Hello world\"\nassert     capital_words_spaces(\"HELLO WORLD!\") == \"Hello world!\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     capital_words_spaces('This is a test') == 'This Is A Test'\nassert     capital_words_spaces('this is a test') == 'This Is A Test'\nassert     capital_words_spaces('this is a test, great') == 'This Is A Test, Great'\nassert     capital_words_spaces('this is a test, great and i hate it') == 'This Is A Test, Great And I Hate It'\nassert     capital_words_spaces('this is a test, great and i hate it, for example') == 'This Is A Test, Great And I Hate It, For Example'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     capital_words_spaces(\"This Is A Sentence\") == \"This Is A Sentence\"\nassert capital_words_spaces(\"This Is The First Test Case\") == \"This Is The First Test Case\"\nassert capital_words_spaces(\"THis Is the Second Test Case\") == \"THis is the second Test Case\"\nassert capital_words_spaces(\"No Space\") == \"No Space\"\nassert capital_words_spaces(\"\") == \"\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     capital_words_spaces(\" hello there\") == \"Hello there\"\nassert     capital_words_spaces(\"Hello there\") == \"Hello there\"\nassert     capital_words_spaces(\"hello there\") == \"Hello there\"\nassert     capital_words_spaces(\"\") == \"\"\nassert     capital_words_spaces(\" Hello there \") == \"Hello there \"\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numeric_strings(['-25', '-5', '3', '-4', '1', '2', '-8']) == ['-8', '-4', '-5', '1', '2', '3', '-25']\nassert     sort_numeric_strings(['1', '-2', '-6', '-7', '-4']) == ['-7', '-4', '-6', '-2', '1']\nassert     sort_numeric_strings(['-3', '-2', '1', '-5', '-4']) == ['-4', '-3', '-5', '-2', '1']\nassert     sort_numeric_strings(['-1', '2', '-7', '-3', '-4', '1', '-2']) == ['-2', '-1', '-3', '-4', '-7', '1', '2']\n\nprint(f'\\nAnswer: {sort_numeric_strings([\"1\",\"2\",\"-5\",\"3\",\"-6\",\"7\",\"-9\"])}')\nprint(f'Expected: {[\"-9\",\"-6\",\"-5\",\"-7\",\"-3\",\"-2\",\"1\"]}')\nprint('\\n')\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nsort_numeric_strings(['1', '1', '2', '3', '4', '5', '6', '6', '7', '7'])\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sort_numeric_strings(['abc', '10', 'abc', '12', 'abc']) == ['abc', 'abc', 'abc', 'abc', '10']\nassert sort_numeric_strings(['abc', '10', 'abc', '12', 'abc', '123', 'abc']) == ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', '10']\nassert sort_numeric_strings(['abc', '10', 'abc', '12', 'abc', '123', 'abc', '123']) == ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', '10']\nassert sort_numeric_strings(['abc', '10', 'abc', '12', 'abc', '123', 'abc', '123', '12']) == ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', '10']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings([\"1\", \"0\", \"3\"]) == [\"0\", \"1\", \"3\"]\nassert     sort_numeric_strings([\"0\", \"3\", \"1\"]) == [\"1\", \"0\", \"3\"]\nassert     sort_numeric_strings([\"6\", \"5\", \"4\"]) == [\"4\", \"5\", \"6\"]\nassert     sort_numeric_strings([\"3\", \"0\", \"1\"]) == [\"1\", \"0\", \"3\"]\nassert     sort_numeric_strings([\"3\", \"1\", \"0\"]) == [\"0\", \"1\", \"3\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nsort_numeric_strings([\"2\",\"3\",\"1\",\"7\",\"5\"]) == [\"1\",\"3\",\"5\",\"7\",\"2\"]\n\nsort_numeric_strings([\"1\",\"2\",\"5\",\"4\"]) == [\"1\",\"2\",\"4\",\"5\"]\n\nsort_numeric_strings([\"4\",\"3\",\"5\",\"2\",\"1\"]) == [\"1\",\"2\",\"3\",\"4\",\"5\"]\n\nsort_numeric_strings([\"5\",\"4\",\"3\",\"2\",\"1\"]) == [\"1\",\"2\",\"3\",\"4\",\"5\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sort_list(lst):\n    '''\n    Write a python function to sort the list according to the last element in the list.\n    https://www.geeksforgeeks.org/python-sort-list-according-to-the-last-element-in-the-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numeric_strings(['2','3','4','6','1','9']) == sorted(['2','1','3','4','6','9'])\n\ndef sort_numeric_strings_short(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sort_numeric_strings([\"-3\", \"64\", \"5.4\", \"5\"]) == [\"-3\", \"5.4\", \"5\", \"64\"], \"Wrong sort_numeric_strings output\"\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_tuple([], (10,20)) == [(10, 20)], \"Should add a list of empty tuples\"\nassert     add_tuple([(10,20)], (10,20)) == [(10, 20)], \"Should add a tuple\"\nassert     add_tuple([(10,20), (10,20), (10,20)], (10,20)) == [(10, 20), (10,20), (10,20)], \"Should add a list of tuples\"\nassert     add_tuple([(10,20), (10,20), (10,20)], (10,20,30,40)) == [(10, 20), (10,20), (10,20,30,40)], \"Should add a list of tuples\"\nassert     add_tuple([(10,20), (10,20), (10,20)], (10,20,30,40,50)) == [(10, 20), (10,20), (10,20,30,40,50)], \"Should add a list of tuples\"\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     add_tuple([], (4, 5, 6)) == (4, 5, 6)\nassert     add_tuple([1, 2, 3], (4, )) == (1, 2, 3, 4)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_tuple([1,2,3,4], (5,6,7)) == None\nassert     add_tuple([1,2,3,4], (6,7,8)) == None\nassert     add_tuple([1,2,3,4], (7,8,9)) == None\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_tuple([], (1,2)) == (1,2)\nassert     add_tuple([1,2], (3,4)) == (1,2,3,4)\nassert     add_tuple([1,2,3,4], (1,2)) == (1,2,3,4)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_tuple([], (1,2,3)) == (1,2,3), 'Wrong'\nassert     add_tuple([(1,2), (3,4), (5,6)], (7,8,9)) == (1,2,3,4,5,6,7,8,9), 'Wrong'\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_tuple([], (1,2)) ==    (1,2)\nassert     add_tuple([1], (2,3)) ==    (3,4)\nassert     add_tuple([1,2,3,4,5], (2,3)) ==    (2,3,4,5,6)\n\ndef swap_list_items(test_list):\n    '''\n    Write a function to swap the elements of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_tuple([],(1,2,3)) == (1,2,3)\nassert     add_tuple([],(1,)) == (1,)\nassert     add_tuple([],(1)) == (1,)\nassert     add_tuple([],(1,2)) == (1,2)\nassert     add_tuple([1,2],(1,2,3)) == (1,2,3)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_tuple(test_list, test_tup) == test_list, f\"\\n{add_tuple(test_list, test_tup)} should be \\n{test_list}\"\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([1,2], (4,5,6)) == (1,2,4,5,6)\nassert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_min_heap_helper2(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n\nassert check_min_heap_helper2([0,1,2,3])\nassert not check_min_heap_helper2([1,2,3,0])\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_min_heap_helper([1,4,2,5,7,2,4], 1) == False\nassert     check_min_heap_helper([1,4,2,5,7,2,4], 4) == True\nassert     check_min_heap_helper([1,4,2,5,7,2,4], 5) == True\nassert     check_min_heap_helper([1,4,2,5,7,2,4], 6) == True\nassert     check_min_heap_helper([1,4,2,5,7,2,4], 7) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (check_min_heap_helper([10,5,15,2,7], 5) == True), \"Not Min Heap\"\nassert     (check_min_heap_helper([10,5,15,2,7], 6) == False), \"Not Min Heap\"\nassert     (check_min_heap_helper([10,5,15,2,7], 7) == True), \"Not Min Heap\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_min_heap_helper([4, 1, 3, 2, 16, 8, 9], 3) == True\nassert     check_min_heap_helper([1, 3, 2, 8, 9, 4, 16], 0) == False\nassert     check_min_heap_helper([4, 3, 2, 8, 9, 4, 16], 5) == False\nassert     check_min_heap_helper([1, 3, 2, 8, 9, 4, 16], 6) == True\nassert     check_min_heap_helper([1, 3, 2, 8, 9, 4, 16], 7) == False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 2, 6]\n    print(check_min_heap_helper(arr, 0))\n    print(check_min_heap_helper(arr, 1))\n    print(check_min_heap(arr))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_min_heap_helper([2, 5, 1, 8, 3, 4, 6], 0) == True\nassert     check_min_heap_helper([2, 5, 1, 8, 3, 4, 6], 1) == False\nassert     check_min_heap_helper([2, 5, 1, 8, 3, 4, 6], 2) == False\nassert     check_min_heap_helper([2, 5, 1, 8, 3, 4, 6], 3) == False\nassert     check_min_heap_helper([2, 5, 1, 8, 3, 4, 6], 4) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    n = 1000\n    print(f\"jacobsthal_num({n}) = {jacobsthal_num(n)}\")\n    "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef num_of_largest_prime_factor(n): \n    '''\n    Write a function to find the largest prime factor of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 2\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(3) == 1\nassert jacobsthal_num(4) == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \njacobsthal_num(0) == 0\njacobsthal_num(1) == 1\njacobsthal_num(2) == 1\njacobsthal_num(3) == 1\njacobsthal_num(4) == 1\njacobsthal_num(5) == 1\njacobsthal_num(6) == 1\njacobsthal_num(7) == 1\njacobsthal_num(8) == 1\njacobsthal_num(9) == 1\njacobsthal_num(10) == 1\njacobsthal_num(11) == 1\njacobsthal_num(12) == 1\njacobsthal_num(13) == 1\njacobsthal_num(14) == 1\njacobsthal_num(15) == 1\njacobsthal_num(16) == 1\njacobsthal_num(17) == 1\njacobsthal_num(18) == 1\njacobsthal_num(19) == 1\njacobsthal_num(20) == 1\njacobsthal_num(21) == 1\njacobsthal_num(22) == 1\njacobsthal_num(23) == 1\njacobsthal_num(24) == 1\njacobsthal_num(25) == 1\njacobsthal_num(26) == 1\njacobsthal_num(27) == 1\njacobsthal_num(28) == 1\njacobsthal_num(29) == 1\njacobsthal_num(30) == 1\njacobsthal_num(31) == 1\njacobsthal_num(32) == 1\njacobsthal_num(33) == 1\njacobsthal_num(34) == 1\njacobsthal_num(35) == 1\njacobsthal_num(36) == 1\njacobsthal_num(37) == 1\njacobsthal_num(38) == 1\njacobsthal_num(39) == 1\njacobsthal_num(40) == 1\njacobsthal_num(41) == 1\njacobsthal_num(42) == 1\njacobsthal_num(43) == 1\njacobsthal_num(44) == 1\njacobsthal_num(45) == 1\njacobsthal_num(46) == 1\njacobsthal_num(47) == 1\njacobsthal_num(48) == 1\njacobsthal_num(49) == 1\njacobsthal_num(50) == 1\njacobsthal_num(51) == 1\njacobsthal_num(52) == 1\njacobsthal_num(53) == 1\njacobsthal_num(54) == 1\njacobsthal_num(55) == 1\njacobsthal_num(56) == 1\njacobsthal_num(57) == 1\njacobsthal_num(58) == 1\njacobsthal_num(59) == 1\njacobsthal_num(60) == 1\njacobsthal_num(61) == 1\njacobsthal_num(62) == 1\njacobsthal_num(63) == 1\njacobsthal_num(64) == 1\njacobsthal_num(65) == 1\njacobsthal_num(66) == 1\njacobsthal_num(67) == 1\njacobsthal_num(68) == 1\njacobsthal_num(69) == 1\njacobsthal_num(70) == 1\njacobsthal_num(71) == 1\njacobsthal_num(72) == 1\njacobsthal_num(73) == 1\njacobsthal_num(74) == 1\njacobsthal_num(75) == 1\njacobsthal_num(76) == 1\njacobsthal_num(77) == 1\njacobsthal_num(78) == 1\njacobsthal_num(79) == 1\njacobsthal_num(80) == 1\njacobsthal_num(81) == 1\njacobsthal_num(82) == 1\njacobsthal_num(83) == 1\njacobsthal_num(84) == 1\njacobsthal_num(85) == 1\njacobsthal_num(86) == 1\njacobsthal_num(87) == 1\njacobsthal_num(88) == 1\njacobsthal_num(89) == 1\njacobsthal_num(90) == 1\njacobsthal_num(91) == 1\njacobsthal_num(92) == 1\njacobsthal_num(93) == 1\njacobsthal_num(94) == 1\njacobsthal_num(95) == 1\njacobsthal_num(96) == 1\njacobsthal_num(97) == 1\njacobsthal_num(98) == 1\njacobsthal_num(99) == 1\njacobsthal_num(100) == 1\njacobsthal_num(101) == 1\njacobsthal_num(102) == 1\njacobsthal_num(103) == 1\njacobsthal_num(104) == 1\njacobsthal_num(105) == 1\njacobsthal_num(106) == 1\njacobsthal_num(107) == 1\njacobsthal_num(108) == 1\njacobsthal_num(109) == 1\njacobsthal_num(110) == 1\njacobsthal_num(111) == 1\njacobsthal_num(112) == 1\njacobsthal_num(113) == 1\njacobsthal_num(114) == 1\njacobsthal_num(115) == 1\njacobsthal_num(116) == 1\njacobsthal_num(117) == 1\njacobsthal_num(118) == 1\njacobsthal_num(119) == 1\njacobsthal_num(120) == 1\njacobsthal_num(121) == 1\njacobsthal_num(122) == 1\njacobsthal_num(123) == 1\njacobsthal_num(124) == 1\njacobsthal_num(125) == 1\njacobsthal_num(126) == 1\njacobsthal_num(127) == 1\njacobsthal_num(128) == 1\njacobsthal_num(129) == 1\njacobsthal_num(130) == 1\njacobsthal_num(131) == 1\njacobsthal_num(132) == 1\njacobsthal_num(133) == 1\njacobsthal_num(134) == 1\njacobsthal_num(135) == 1\njacobsthal_num(136) == 1\njacobsthal_num(137) == 1\njacobsthal_num(138) == 1\njacobsthal_num(139) == 1\njacobsthal_num(140) == 1\njacobsthal_num(141) == 1\njacobsthal_num(142) == 1\njacobsthal_num(143) == 1\njacobsthal_num(144) == 1\njacobsthal_num(145) == 1\njacobsthal_num(146) == 1\njacobsthal_num(147) == 1\njacobsthal_num(148) == 1\njacobsthal_num(149) == 1\njacobsthal_num(150) == 1\njacobsthal_num(151) == 1\njacobsthal_num(152) == 1\njacobsthal_num(153) == 1\njacobsthal_num(154) == 1\njacobsthal_num(155) == 1\njacobsthal_num(156) == 1\njacobsthal_num(157) == 1\njacobsthal_num(158) == 1\njacobsthal_num(159) == 1\njacobsthal_num(16"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(3) == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef jacobsthal_str(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     jacobsthal_num(0) == 0, \"Wrong result\"\nassert jacobsthal_num(1) == 1, \"Wrong result\"\nassert jacobsthal_num(5) == 5, \"Wrong result\"\nassert jacobsthal_num(11) == 11, \"Wrong result\"\nassert jacobsthal_num(21) == 21, \"Wrong result\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_k((1,1,1,1,1), 1) ==     [1]\nassert     min_k((1,1,1,1,1,2,3,4,5), 3) ==     [1,2,3]\nassert     min_k((1,1,1,1,1,2,3,4,5), 5) ==     [1,2,3,4,5]\nassert     min_k((1,1,1,1,1,2,3,4,5,6), 3) ==     [1,2,3]\nassert     min_k((1,1,1,1,1,2,3,4,5,6,7), 3) ==     [1,2,3,4,5,6]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_k( (1,2,3), 2 ) == (1,2)\nassert     min_k( (1,2,3), 5 ) == (1,2,3,4,5)\nassert     min_k( (1,2,3), 1 ) == (1,2,3)\nassert     min_k( (1,2,3,4), 1 ) == (1,2,3,4)\nassert     min_k( (1,2,3,4,5), 1 ) == (1,2,3,4,5)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_k([(1,2),(2,4),(5,8),(4,8),(3,9)],3) == [(1,2),(3,9),(4,8)]\nassert     min_k([(1,2),(2,4),(5,8),(4,8),(3,9)],2) == [(1,2),(3,9)]\nassert     min_k([(1,2),(2,4),(5,8),(4,8),(3,9)],5) == [(1,2),(2,4),(4,8),(3,9)]\nassert     min_k([(1,2),(2,4),(5,8),(4,8),(3,9)],7) == [(1,2),(2,4),(3,9)]\nassert     min_k([(1,2),(2,4),(5,8),(4,8),(3,9)],0) == [(1,2),(2,4),(3,9),(4,8)]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_k([(2, 2), (1, 4), (2, 1)], 1) == (1, 4), 'failed on test case 1'\nassert     min_k([(2, 2), (1, 4), (2, 1)], 2) == (2, 1), 'failed on test case 2'\nassert     min_k([(2, 2), (1, 4), (2, 1)], 3) == (2, 1), 'failed on test case 3'\nassert     min_k([(2, 2), (1, 4), (2, 1)], 4) == (2, 1), 'failed on test case 4'\nassert     min_k([(2, 2), (1, 4), (2, 1)], 5) == (2, 1), 'failed on test case 5'\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_k([(0, 1), (1, 2), (2, 3), (3, 4)], 2) == (0, 1)\nassert     min_k([(0, 1), (1, 2), (2, 3), (3, 4)], 3) == (0, 1, 2)\nassert     min_k([(0, 1), (1, 2), (2, 3), (3, 4)], 4) == (0, 1, 2, 3)\nassert     min_k([(0, 1), (1, 2), (2, 3), (3, 4)], 5) == (0, 1, 2, 3, 4)\nassert     min_k([(0, 1), (1, 2), (2, 3), (3, 4)], 6) == (0, 1, 2, 3, 4, 5)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_index_list([1, 2, 3], [\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]) == [(1, 2, 3), (3, 2, 1), (2, 1, 3)]\nassert     extract_index_list([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]) == [(1, 2, 3), (3, 2, 1), (2, 1, 3), (4, 5, 1), (5, 4, 1), (4, 1, 3), (1, 3, 5), (2, 3, 5)]\nassert     extract_index_list([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\", \"h\"]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    print(doctest.testmod())"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_index_list([1,2,3,2,3], [4,5,6,7,8], [10,11,12,13,14]) == [1,2,3], \"Wrong\"\nassert     extract_index_list([1,2,3,2,3], [4,5,6,7,8], [10,11,12,13,14]) == [1,2,3], \"Wrong\"\nassert     extract_index_list([1,2,3,2,3], [4,5,6,7,8], [10,11,12,13,14]) == [], \"Wrong\"\n\ndef extract_index_list_1(l1, l2, l3):\n    '''\n    Same as above, but using a generator instead of creating a new list.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_index_list([1, 2, 3], [4, 5, 6], [3, 4, 5]) == [3, 4]\nassert     extract_index_list([1, 2, 3], [4, 5, 6], [3, 4, 5, 7, 8]) == []\nassert     extract_index_list([1, 2, 3], [4, 5, 6], [3, 4, 5, 7, 8, 9]) == []\nassert     extract_index_list([1, 2, 3], [4, 5, 6], [3, 4, 5, 7, 8, 9, 10]) == []\nassert     extract_index_list([1, 2, 3], [4, 5, 6], [3, 4, 5, 7, 8, 9, 10, 11]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_index_list([], [], []    ) == []\nassert     extract_index_list([1], [], []) == []\nassert     extract_index_list([], [1], []) == []\nassert     extract_index_list([1], [1], []) == [1]\nassert     extract_index_list([1, 1], [1, 1], [1, 1]) == [1]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_index_list([1, 2, 3, 4], [5, 6, 7, 8], [10, 11, 12, 13]) == [1, 5, 10, 11], \"Wrong\"\nassert     extract_index_list([1, 2, 3, 4], [5, 6, 7, 8], [10, 11, 12, 14]) == [1, 5, 10, 14], \"Wrong\"\nassert     extract_index_list([1, 2, 3, 4], [5, 6, 7, 8], [10, 11, 15, 16]) == [1, 5, 10, 15], \"Wrong\"\nassert     extract_index_list([1, 2, 3, 4], [5, 6, 7, 8], [10, 11, 13, 14]) == [1, 5, 10, 13], \"Wrong\"\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_index_list([1,2,3,4], [3,4,5,6], [1,4,2,3]) == [1,4]\nassert     extract_index_list([1,2,3,4,5], [3,4,5,6], [1,4,2,3]) == []\nassert     extract_index_list([1,2,3], [3,4,5], [1,4,2]) == []\nassert     extract_index_list([1,2,3], [3,4,5], [1,4,5]) == [1,4]\nassert     extract_index_list([1,2,3], [3,4,5], [1,4,2]) == [1,4]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [2, 3, 4]\nassert     extract_index_list([1, 2, 3], [2, 3, 4, 5, 6], [3, 4, 5]) == [3, 4]\nassert     extract_index_list([1, 2, 3], [2, 3], [3, 4, 5, 6]) == []\nassert     extract_index_list([], [2, 3], [3, 4, 5, 6]) == []\nassert     extract_index_list([1, 2, 3, 4], [2, 3, 4, 5, 6], [3, 4, 5, 6]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_index_list([1,2,3,4], ['a','b','c'], ['d','e','f']) == ['b','d']\nassert     extract_index_list(['a','b','c','d','e'], ['a','b','c'], ['d','e','f']) == ['a','d']\nassert     extract_index_list(['a','b','c','d','e','f'], ['a','b','c'], ['d','e','f']) == ['d','e','f']\nassert     extract_index_list([1,2,3,4,5,6], ['a','b','c'], ['d','e','f']) == []\n\nprint('Testing: extract_index_list')\nprint('The result is: ', extract_index_list([1,2,3,4], ['a','b','c'], ['d','e','f']))\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     second_smallest([4, 1, 2]) == 2\nassert     second_smallest([5, 1, 2, 5, 5, 1]) == 1\nassert     second_smallest([4, 1, 3, 4, 5, 1]) == 1\nassert     second_smallest([2, 2, 4, 3, 1]) == 1\nassert     second_smallest([2, 1, 3, 4, 5, 1]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     second_smallest([3,4,3]) == 3, 'Should be 3'\nassert     second_smallest([3,4,3,6,7,8]) == 3, 'Should be 3'\nassert     second_smallest([1,1,1,1]) == 1, 'Should be 1'\nassert     second_smallest([1,1,1,2]) == 1, 'Should be 1'\nassert     second_smallest([1,1,1,2,3]) == 1, 'Should be 1'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([1,2,3,4]) == 1\nassert     second_smallest([10,20,30,40,50]) == 40\nassert     second_smallest([10,20,30,40,50,60]) == 40\n\n\ndef third_largest(numbers):\n    '''\n    Write a function to find the third largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     second_smallest([]) == None, 'Empty list'\nassert     second_smallest([-1, -1, 3, 5]) == -1, 'One number in a list'\nassert     second_smallest([-1, -1, 3, -5]) == -1, 'Two numbers in a list'\nassert     second_smallest([-1, -1, 3, 5, -1]) == -1, 'Three numbers in a list'\nassert     second_smallest([-1, -1, 3, 5, -1, 4]) == 4, 'Three numbers, two are same'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Correct') if second_smallest([4, 3, 1]) == 1 else print('Wrong.\\nExpected: 1\\nGot:', second_smallest([4, 3, 1]))\nassert \nprint('Correct') if second_smallest([1, 2, 3, 4, 5]) == 2 else print('Wrong.\\nExpected: 2\\nGot:', second_smallest([1, 2, 3, 4, 5]))\nassert \nprint('Correct') if second_smallest([3, 2, 1]) == 1 else print('Wrong.\\nExpected: 1\\nGot:', second_smallest([3, 2, 1]))\nassert \nprint('Correct') if second_smallest([3, 2, 1, 5, 6, 4]) == 1 else print('Wrong.\\nExpected: 1\\nGot:', second_smallest([3, 2, 1, 5, 6, 4]))\nassert \nprint('Correct') if second_smallest([1, 2, 3, 4, 5, 6]) == 6 else print('Wrong.\\nExpected: 6\\nGot:', second_smallest([1, 2, 3, 4, 5, 6]))\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     second_smallest([10,20,30,40,90,10]) == 10\nassert     second_smallest([0,1,2,3,4,5,6]) == 1\nassert     second_smallest([7,7,7,7,7,7]) == 7\nassert     second_smallest([1000000000,2000000000,30000000,40000000,50000000,60000000]) == 60000000\nassert     second_smallest([0,1,2,3,4,5,6,7,8,9]) == 7\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     second_smallest([5,1,2,3,4,6]) == 1, 'Wrong output'\n\nprint('correct'"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one('abcbac') == True, \"Sample Case 1: The Function should Return True\"\nassert     text_match_zero_one('abc') == False, \"Sample Case 2: The Function should Return False\"\nassert     text_match_zero_one('abcd') == False, \"Sample Case 3: The Function should Return False\"\nassert     text_match_zero_one('abcbc') == True, \"Sample Case 4: The Function should Return True\"\nassert     text_match_zero_one('abcabcabc') == True, \"Sample Case 5: The Function should Return True\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one(\"aabaab\") == True\nassert     text_match_zero_one(\"bbaa\") == False\nassert     text_match_zero_one(\"bbb\") == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one('a') == True\nassert     text_match_zero_one('ab') == True\nassert     text_match_zero_one('a') == False\nassert     text_match_zero_one('abc') == True\nassert     text_match_zero_one('abc') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one(\"ab\") == True, \"incorrect\"\nassert     text_match_zero_one(\"a\") == False, \"incorrect\"\nassert     text_match_zero_one(\"abbab\") == True, \"incorrect\"\nassert     text_match_zero_one(\"ab\") == False, \"incorrect\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one(\"bbbbbaaaabaababaaabbabababaabbabababbabababaabababbabababbbbbbbbbbbbbababababababaabbabbbbbbbbbbabbbbbabbbbbbbbbbbbbabababababbabababababababaaabbbabaaabababababababababbbbbbbbbbbbbabababababaaabababbbbbbbbbbbbbbbbbbabababababbaaabbbbbbbbbbbbbbbbbbbbababbbbbbbbbbbbbbabababababbabababababaaababaaababbbbbbbbbbbbbbbbbbbbbbbbabbbbbbbbbbbbbbbbabababababaaabababababababababababbabbaaabaabababbababababababbbbbbbbbbbbbbbbbbbbbbbbabababababaaabababababababababababbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one(\"abababab\") == True\nassert     text_match_zero_one(\"bbbababb\") == False\nassert     text_match_zero_one(\"abababab\") == True\nassert     text_match_zero_one(\"abab\") == False\nassert     text_match_zero_one(\"\") == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_zero_one(\"aaaaab\") == True\nassert     text_match_zero_one(\"aaaabb\") == False\nassert     text_match_zero_one(\"aaaabba\") == True\nassert     text_match_zero_one(\"aaaabab\") == True\nassert     text_match_zero_one(\"aaaabbb\") == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one('ababbb') == True, 'correct text'\nassert     text_match_zero_one('aaba') == False, 'correct text'\nassert     text_match_zero_one('abbbbb') == True, 'correct text'\n\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one('ab') == True, 'a followed by one or more b'\nassert     text_match_zero_one('ab') == True, 'a followed by one or more b'\nassert     text_match_zero_one('a') == False, 'a followed by one or more b'\nassert     text_match_zero_one('aa') == True, 'a followed by one or more b'\nassert     text_match_zero_one('aa') == True, 'a followed by one or more b'\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_reverse_pairs([\"abcd\", \"dcba\", \"ll\", \"\"]) == 0, 'Count reverse pairs fails'\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"ll\", \"ddd\", \"ll\"]) == 2, 'Count reverse pairs fails'\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"ll\", \"ddd\", \"ll\", \"ll\"]) == 3, 'Count reverse pairs fails'\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"ll\", \"ddd\", \"ll\", \"ddd\"]) == 1, 'Count reverse pairs fails'\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"ll\", \"ddd\", \"ll\", \"ddd\", \"ddd\"]) == 3, 'Count reverse pairs fails'\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_reverse_pairs(['']) == 0\nassert count_reverse_pairs(['', 'a', 'abc', 'abcde']) == 1\nassert count_reverse_pairs(['', 'b', 'c', 'cd', 'd', 'cdc', 'ac']) == 4\nassert count_reverse_pairs(['', 'b', 'c', 'cd', 'd', 'cdc', 'ac', 'acdc', 'a', 'abcd', 'abcde']) == 5\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_reverse_pairs(['',\"abc\",\"abcd\",\"cba\",\"xyz\",\"abcd\",\"aab\",\"zzzz\"]) == 8\nassert     count_reverse_pairs(['',\"aba\",\"abcd\",\"cba\",\"xyz\",\"abcd\",\"aab\",\"zzzz\"]) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nhttps://www.geeksforgeeks.org/pivot-table-python/\nCreate a pivot table from the DataFrame\n'''\ndef pivot_table(df, values, index, columns, aggfunc='mean'):\n    '''\n    Write a function to create a pivot table from the given DataFrame. https://www.geeksforgeeks.org/pivot-table-python/\n    '''\n    pass\n\n\ndef pivot_table2(df, values, index, columns, aggfunc='mean'):\n    '''\n    Write a function to create a pivot table from the given DataFrame. https://www.geeksforgeeks.org/pivot-table-python/\n    '''\n    pass\n\n\ndef pivot_table3(df, values, index, columns, aggfunc='mean'):\n    '''\n    Write a function to create a pivot table from the given DataFrame. https://www.geeksforgeeks.org/pivot-table-python/\n    '''\n    pass\n\n\ndef pivot_table4(df, values, index, columns, aggfunc='mean'):\n    '''\n    Write a function to create a pivot table from the given DataFrame. https://www.geeksforgeeks.org/pivot-table-python/\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_reverse_pairs([['a', 'b'], ['a', 'c'], ['a', 'e'], ['a', 'f']]) == 4\nassert     count_reverse_pairs([['a', 'b'], ['a', 'c'], ['a', 'e'], ['a', 'f'], ['a', 'g']]) == 6\nassert     count_reverse_pairs([['a', 'b'], ['a', 'c'], ['a', 'e'], ['a', 'f'], ['a', 'g'], ['a', 'h']]) == 10\nassert     count_reverse_pairs([['a', 'b'], ['a', 'c'], ['a', 'e'], ['a', 'f'], ['a', 'g'], ['a', 'h'], ['a', 'i']]) == 12\nassert     count_reverse_pairs([['a', 'b'], ['a', 'c'], ['a', 'e'], ['a', 'f'], ['a', 'g'], ['a', 'h'], ['a', 'i'], ['a', 'j']]) == 14\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_reverse_pairs([]) == 0\nassert     count_reverse_pairs(['']) == 0\nassert     count_reverse_pairs([\n                    'c', 'a', 't',\n                    'p','s', 'i',\n                    'r', 'e', 'd',\n                    'o', 'g', 'h',\n                    'n', 'g', 'o',\n                    's'\n                    ]) == 0\nassert     count_reverse_pairs([\n                    'a', 'b', 'c',\n                    'd', 'e', 'f',\n                    'g', 'h', 'i',\n                    'j', 'k', 'l',\n                    'm', 'n', 'o',\n                    'p', 'q', 'r',\n                    's', 't', 'u',\n                    'v', 'w', 'x',\n                    'y', 'z'\n                    ]) == 30\nassert     count_reverse_pairs([\n                    'a', 'b', 'c',\n                    'd', 'e', 'f',\n                    'g', 'h', 'i',\n                    'j', 'k', 'l',\n                    'm', 'n', 'o',\n                    'p', 'q', 'r',\n                    's', 't', 'u',\n                    'v', 'w', 'x',\n                    'y', 'z'\n                    ]) == 36\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_reverse_pairs(test_list_1) == 6, \"The result is not correct.\"\nassert     count_reverse_pairs(test_list_2) == 0, \"The result is not correct.\"\nassert     count_reverse_pairs(test_list_3) == 3, \"The result is not correct.\"\nassert     count_reverse_pairs(test_list_4) == 7, \"The result is not correct.\"\nassert     count_reverse_pairs(test_list_5) == 0, \"The result is not correct.\"\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert unique_sublists([[1,1,1], [1,2,3], [1,2,3], [1,1,1]]) == { (1,1,1,1): 1, (1,2,3,3): 1 }\nassert unique_sublists([[1,1], [1,2], [1,1], [1,1]]) == { (1,1): 3 }\n\ndef n_groups(n,*groups):\n    if n == 0:\n        return groups\n    else:\n        return n_groups(n-1, *[group for group in groups if len(group) > 0])\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([[1,2,3], 'hi', (1,2,3), 'hi', (1,2,3)]) == {('hi', 'hi'): 2, (1,2,3): 2, (1,2,3): 1, (1,2,3): 1}\nassert     unique_sublists([[1,2,3], 'hi', (1,2,3), 'hi', (1,2,3)]) == {('hi', 'hi'): 2, (1,2,3): 2, (1,2,3): 1}\nassert     unique_sublists([[1,2,3], 'hi', (1,2,3), 'hi', (1,2,3), (1,2,3)]) == {('hi', 'hi'): 2, (1,2,3): 2, (1,2,3): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists(['adam','betty','adam','betty','betty']) == {('adam', 'betty'): 2, ('adam', 'betty'): 1, ('betty', 'adam'): 1}\nassert     unique_sublists([]) == {}\nassert     unique_sublists(['adam', 'betty']) == {('adam', 'betty'): 2}\nassert     unique_sublists(['a', 'b', 'c', 'a', 'b', 'c']) == {('a', 'b', 'c'): 3}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([1,2,3,4,5]) == {(1,1),(2,1),(3,1),(4,1),(5,1)}\nassert     unique_sublists([2,2,2,2,2]) == {(2,3)}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1,2,3,3]) == {(1,2),(1,3),(2,2),(2,3),(3,3)}\nassert     unique_sublists([1,2,3,4,5,5]) == {(1,5),(2,4),(3,3),(4,2),(5,1)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([1,2,3]) == {(1,1), (2,1), (3,1)}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1,1,1,2]) == {(1,3), (2,2)}\n\nimport itertools\n\ndef unique_sublists2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists(['a','b','c','d','e']) == {('a','b','c','d','e'):1}\nassert     unique_sublists(['a','b','a','c','d','c','c','e']) == {('a','b','a','c','d','c'):1, ('a','b','a','c','d','c','e'):1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([[1,2], [3,4,5], [1,2], [3,4,5], [1,2]]) == {([1,2], 3), ([3,4,5], 3), ([1,2], 2), ([3,4,5], 2), ([1,2], 1)}\nassert     unique_sublists([[1], [1,2], [1,2], [1,2], [1]]) == {([1], 1), ([1,2], 1)}\nassert     unique_sublists([[1], [1,2], [1,2], [1,2], [1]]) == {([1], 1)}\nassert     unique_sublists([[1,2], [1], [1,2], [1], [1,2]]) == {([1,2], 3), ([1], 2)}\nassert     unique_sublists([[1,2], [1,2], [1,2], [1,2], [1,2]]) == {([1,2], 4)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef unique_sublists2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_decimal('1.01') == False\nassert is_decimal('1.01') == False\nassert is_decimal('1.01') == False\nassert is_decimal('1.01') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_decimal('1.1')\nassert not is_decimal('1.1.1')\nassert not is_decimal('1.1.1.1.1.1')\n\n'''\n1. Write a function to check whether a given number is positive or negative.\n'''\ndef is_pos_neg(num):\n    '''\n    Write a function to check whether a given number is positive or negative.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_decimal(2.99) == True\n    is_decimal('2.99') == False\n    is_decimal('3.99') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef check_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_decimal('1.1') == True, 'Invalid test input'\nassert     is_decimal('1.1') == False, 'Invalid test input'\nassert     is_decimal('1.11') == False, 'Invalid test input'\nassert     is_decimal('1.11') == False, 'Invalid test input'\nassert     is_decimal('1.11') == False, 'Invalid test input'\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_decimal('0.01') == True\nassert     is_decimal('0.02') == False\nassert     is_decimal('0.03') == False\nassert     is_decimal('0.04') == True\nassert     is_decimal('0.005') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_decimal(\"1.2\") == True\nassert     is_decimal(\"1.00\") == True\nassert     is_decimal(\"1.20\") == True\nassert     is_decimal(\"1.01\") == False\nassert     is_decimal(\"1.0\") == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_decimal(\"42\")== False, \"Invalid Input\"\nassert     is_decimal(\"42.2\")== True, \"Invalid Input\"\nassert     is_decimal(\"2.2\")== False, \"Invalid Input\"\nassert     is_decimal(\"2.13\")== False, \"Invalid Input\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_decimal(123) == True, 'Please check your code'\nassert     is_decimal(12.3) == True, 'Please check your code'\nassert     is_decimal('123') == False, 'Please check your code'\nassert     is_decimal('123.123') == False, 'Please check your code'\nassert     is_decimal('123e123') == False, 'Please check your code'\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_decimal(\"1.00\") == True\nassert     is_decimal(\"1.01\") == False\nassert     is_decimal(\"1.01\") == False\nassert     is_decimal(\"1.1\") == True\nassert     is_decimal(\"1.11\") == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_Element([1,2,3,3,3,3,4,4,4]) == True, \"check 1 failed\"\nassert     unique_Element([1,2,3,3,3,3,4,4,4]) == False, \"check 2 failed\"\nassert     unique_Element([1,1,1,1,1,1,1,1,1]) == True, \"check 3 failed\"\nassert     unique_Element([1,1,1,1,1,1,1,2,2]) == False, \"check 4 failed\"\nassert     unique_Element([]) == True, \"check 5 failed\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_Element([0, 0, 1, 1, 2, 3, 2]) == True\nassert     unique_Element([0, 0, 1, 1, 2, 2]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_Element([1,1,2,3,5,6,6,7,8,9]) == True\nassert     unique_Element([1,1,2,3,5,5,6,7,8,9]) == False\nassert     unique_Element([1,2,3,4,5,6,7,8,9,9,9]) == False\nassert     unique_Element([1,1,2,2,3,4,5,6,6,7,7]) == True\nassert     unique_Element([1,1,1,1,1,1,1,1,1,1]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_Element([1, 1, 1, 2, 3, 3, 5]) == True, \"should return true if no repetition\"\nassert     unique_Element([1, 1, 1, 2, 3, 4, 5]) == False, \"should return false if repetition is present\"\nassert     unique_Element([0, 0, 0, 0, 0, 0, 0]) == True, \"should return true if all elements are 0\"\n\n\ndef unique_Element_II(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_Element([]) == True, 'Empty list'\nassert     unique_Element([1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == False, 'Repeated elements'\nassert     unique_Element([1, 2, 3]) == True, 'Single element'\n\ndef even_after_odd(arr):\n    '''\n    Write a python function to swap the even and odd numbers in a list. \n    Return the new list.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5])\nassert     unique_Element([1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5])\nassert     unique_Element([1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5])\nassert     unique_Element([1,2,1,2,3,3,3,4,4,4,5,5,5,5]) == False\nassert     unique_Element([1,2,1,1,2,3,3,3,4,4,4,5,5,5]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_Element([1, 2, 3, 4, 5]) == True\nassert     unique_Element([1, 2, 1, 4, 5]) == False\nassert     unique_Element([1, 1, 1, 4, 5]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_Element([1, 2, 2]) == False, \"Wrong output\"\nassert     unique_Element([1, 1, 2, 2]) == True, \"Wrong output\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([1,2,3,4,5,6,7,8]) == False, \"Error in unique_Element\"\nassert     unique_Element([1,1,1,1,1,1]) == True, \"Error in unique_Element\"\nassert     unique_Element([1,1,2,2,2,2,3,4,5]) == True, \"Error in unique_Element\"\nassert     unique_Element([1,2,3,4,5,6,7,8,2]) == True, \"Error in unique_Element\"\nassert     unique_Element([1,2,3,4,5,6,7,8,4]) == True, \"Error in unique_Element\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_Element([1,1,1,1,1,2,2,2])==False, 'Test 1 failed'\nassert     unique_Element([1,1,1,1,2,2,2])==True, 'Test 2 failed'\nassert     unique_Element([1,2,1,1,1,1,2,2,2,2,2,2])==False, 'Test 3 failed'\nassert     unique_Element([1,1,1,1,2,2,2,2,3,3,3,3])==True, 'Test 4 failed'\nassert     unique_Element([])==False, 'Test 5 failed'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert check_monthnumber_number(4) == False, \"First test\"\nassert check_monthnumber_number(9) == False, \"Second test\"\nassert check_monthnumber_number(9) == True, \"Third test\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(31) == True, \"1st assert\"\nassert     check_monthnumber_number(30) == True, \"2nd assert\"\nassert     check_monthnumber_number(28) == False, \"3rd assert\"\nassert     check_monthnumber_number(29) == False, \"4th assert\"\nassert     check_monthnumber_number(2) == False, \"5th assert\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(1) == False, \"Testcase 1 Failed\"\nassert     check_monthnumber_number(2) == True, \"Testcase 2 Failed\"\nassert     check_monthnumber_number(3) == False, \"Testcase 3 Failed\"\nassert     check_monthnumber_number(4) == True, \"Testcase 4 Failed\"\nassert     check_monthnumber_number(5) == False, \"Testcase 5 Failed\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(1) == False, \"Month number 1 contains 30 days\"\nassert     check_monthnumber_number(3) == True, \"Month number 3 does not contains 30 days\"\nassert     check_monthnumber_number(12) == False, \"Month number 12 does not contains 30 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumber_number(11) == False, \"should be False\"\nassert     check_monthnumber_number(12) == True, \"should be True\"\nassert     check_monthnumber_number(1) == True, \"should be True\"\nassert     check_monthnumber_number(2) == False, \"should be False\"\nassert     check_monthnumber_number(3) == False, \"should be False\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(11) == True, \"month number not correct\"\nassert     check_monthnumber_number(12) == True, \"month number not correct\"\nassert     check_monthnumber_number(1) == True, \"month number not correct\"\nassert     check_monthnumber_number(2) == False, \"month number not correct\"\nassert     check_monthnumber_number(3) == False, \"month number not correct\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(11)    == True\nassert     check_monthnumber_number(12)    == False\nassert     check_monthnumber_number(1)    == True\nassert     check_monthnumber_number(2)    == True\nassert     check_monthnumber_number(7)    == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert \nassert check_monthnumber_number(3) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(12) == True, 'Input is 12'\nassert     check_monthnumber_number(1) == True, 'Input is 1'\nassert     check_monthnumber_number(2) == False, 'Input is 2'\nassert     check_monthnumber_number(3) == False, 'Input is 3'\nassert     check_monthnumber_number(4) == False, 'Input is 4'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(12) == False, \"Jan number contains 30 days\"\nassert     check_monthnumber_number(3) == True, \"Feb number contains 28 days\"\nassert     check_monthnumber_number(12) == False, \"Feb number contains 29 days\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_min_diff([2,3,1,5,4],5) == 2\nassert find_min_diff([1,2,3,4,5],5) == 2\nassert find_min_diff([1,2,3,5,4],5) == -1\nassert find_min_diff([1,1,2,3,4,5],5) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_min_diff_2(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_min_diff([1,3,2,5,4],5) == 1\nassert     find_min_diff([1,3,2,5,4],10) == 1\nassert     find_min_diff([1,3,2,5,4],100) == 1\nassert     find_min_diff([1,3,2,5,4],200) == 1\nassert     find_min_diff([1,3,2,5,4],3) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_min_diff([1,2,3,4,5],5) == 1\n    find_min_diff([1,2,3,4,5],10) == -1\n    find_min_diff([1,2,3,4,5],2) == -1\n    find_min_diff([1,2,3,4,5],6) == 2\n    find_min_diff([1,2,3,4,5],7) == 2\n    find_min_diff([1,2,3,4,5],1) == 1\n    find_min_diff([1,2,3,4,5],4) == 3\n    find_min_diff([1,2,3,4,5],0) == 1\n    find_min_diff([1,2,3,4,5],6) == 5\n    find_min_diff([1,2,3,4,5],100) == 100\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_min_diff([1,7,3], 2) == -1\nassert     find_min_diff([1,7,3], 4) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_min_diff([2,3,8,9],2) == 1\nassert     find_min_diff([2,3,8,9],5) == -1\nassert     find_min_diff([1,3,5,7],4) == 3\nassert     find_min_diff([1,3,5,7],0) == -1\nassert     find_min_diff([1,3,5,7],1) == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_min_diff([10,20,2,30,1], 4) == 1\nassert     find_min_diff([10,20,2,30,1], 5) == 2\nassert     find_min_diff([10,20,2,30,1], 6) == 3\nassert     find_min_diff([10,20,2,30,1], 7) == 4\nassert     find_min_diff([10,20,2,30,1], 8) == 5\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_min_diff([-6,1,3,5,8],4) == 1\nassert     find_min_diff([-6,1,3,5,8],6) == -1\nassert     find_min_diff([2,4,1,3],1) == 1\nassert     find_min_diff([2,4,1,3],2) == 0\nassert     find_min_diff([2,4,1,3],4) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_min_diff([1,2,3],2) == 1\nassert     find_min_diff([1,2,3],3) == 0\nassert     find_min_diff([1,2,3],4) == 2\nassert     find_min_diff([2,4,1,3],3) == 2\nassert     find_min_diff([2,4,1,3],5) == 3\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_ctr('023423') == 4\nassert     number_ctr('1234567890') == 10\nassert     number_ctr('1234') == 4\nassert     number_ctr('1') == 1\nassert     number_ctr('') == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_ctr('123') == 1\nassert     number_ctr('456') == 1\nassert     number_ctr('789') == 1\nassert     number_ctr('12345') == 1\nassert     number_ctr('123456789') == 1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr('9') == 1\nassert number_ctr('99') == 2\nassert number_ctr('999') == 3\nassert number_ctr('99999') == 4\nassert number_ctr('999999999') == 5\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_ctr('abc') == 0, 'Correct answer: 0'\nassert     number_ctr('abcd') == 1, 'Correct answer: 1'\nassert     number_ctr('abcde') == 2, 'Correct answer: 2'\nassert     number_ctr('abcdef') == 3, 'Correct answer: 3'\nassert     number_ctr('abcabc') == 1, 'Correct answer: 1'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_ctr('123456') == 5, 'Test #1 Failed'\nassert     number_ctr('1234') == 4, 'Test #2 Failed'\nassert     number_ctr('-12345') == 5, 'Test #3 Failed'\nassert     number_ctr('-123') == 4, 'Test #4 Failed'\nassert     number_ctr('+12345') == 5, 'Test #5 Failed'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_ctr('12345') == 1\nassert     number_ctr('abc') == 0\nassert     number_ctr('123456789') == 9\nassert     number_ctr('abcdef') == 0\nassert     number_ctr('123456789a') == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr('12345') == 1, 'Wrong output'\nassert     number_ctr('1234567') == 1, 'Wrong output'\nassert     number_ctr('4567') == 1, 'Wrong output'\nassert     number_ctr('1234') == 1, 'Wrong output'\nassert     number_ctr('1') == 1, 'Wrong output'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr(\"guru99\") == 3, \"Wrong output\"\nassert     number_ctr(\"2563\") == 5, \"Wrong output\"\n\ndef rev_string(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_isogram(str):\n    '''\n    Write a python function to check if a given string is an isogram or not.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_polite(1) == 1\nassert     is_polite(2) == 3\nassert     is_polite(3) == 4\nassert     is_polite(4) == 6\nassert     is_polite(5) == 8\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_polite(10) == 10\nis_polite(5) == 11\nis_polite(1) == 2\nis_polite(3) == 4\nis_polite(4) == 5\nis_polite(11) == 13\nis_polite(17) == 19\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    pass\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    pass\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    pass\n\nclass Solution:\n    # @param A : list of integers\n    # @param B : integer\n    # @return an integer\n    def solve(self, A, B):\n        A.sort()\n        if A[0] >= A[-1]: return -1\n        l, r = 0, len(A) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if A[mid] < B:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return A[l"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(is_polite(1))\n\ndef solve1(n):\n    '''\n    Write a function to calculate factorial of a number n.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_polite(0) == False\nassert     is_polite(1) == True\nassert     is_polite(2) == True\nassert     is_polite(3) == True\nassert     is_polite(4) == False\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_polite(1) == 1\nassert     is_polite(2) == 2\nassert     is_polite(4) == 5\nassert     is_polite(7) == 9\nassert     is_polite(8) == 10\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_polite(1) == True, 'Should be True'\nassert is_polite(2) == False, 'Should be False'\nassert is_polite(5) == True, 'Should be True'"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_polite(3) == 5\nis_polite(10) == 55\nis_polite(25) == 110\nis_polite(50) == 5555\n\ndef binarySearch(arr,l,r,key): \n    while l<=r: \n        mid = (l+r)//2; \n        if arr[mid] == key: \n            return mid \n        elif arr[mid] > key: \n            r = mid - 1\n        else: \n            l = mid + 1\n    return -1\n    \n    "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(is_polite(5)) \nprint(is_polite(6)) \nprint(is_polite(2)) \nprint(is_polite(100)) \nprint(is_polite(1)) \nprint(is_polite(1000)) \n\n\ndef display_grade():\n    '''\n    write a function to display the grade of the student\n    '''\n    pass\n\ndef is_grade_A(): \n    '''\n    Write a function to check the student is grade A or not.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_wise([1, 3, 6, 7, 8, 10, 11, 14]) == [(1, 3), (3, 6), (6, 7), (7, 8), (8, 10), (10, 11), (11, 14)]\nassert pair_wise([]) == []\nassert pair_wise([1]) == [(1, 1)]\n\ndef pair_wise_slice(lst):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list, \n    skipping all duplicate items and using only the first occurence of each item. \n    \n    For example:\n\n    [1, 3, 6, 7, 8, 10, 11, 14]\n    \n    returns:\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef two_pair(l1):\n    '''\n    Write a function to return the list of all pairs of consecutive items in a given list.\n    If there are no such pairs, return None.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]\n\nassert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([1, 2, 3, 4, 5, 6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef pair_of_evens(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list, whose sum is divisible by 2.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_palindrome(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \npair_wise([1,2,3]) == [[1,2],[2,3]]\npair_wise([1,2,3,4,5]) == [[1,2],[2,3],[3,4]]\npair_wise([]) == []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('check the correctness of pair_wise')\n\ndef pair_wise_2(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [(1,2), (2,3), (3,4), (4,5)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_wise([1,2,3,4,5,6,7]) == [(1,2),(2,3),(3,4),(4,5),(5,6),(6,7)]\nassert     pair_wise([0,1,2,3,4,5]) == [(0,1),(1,2),(2,3),(3,4),(4,5)]\nassert     pair_wise([1,2,3,4,5]) == [(1,2),(2,3),(3,4),(4,5)]\nassert     pair_wise([-1,-2,-3,-4,-5]) == [(0,1),(1,2),(2,3),(3,4),(4,5)]\nassert pair_wise([-100,-99,-98,-97,-96]) == [(0,1),(1,2),(2,3),(3,4),(4,5)]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert get_pairs_count([1,2,3], 3) == 2\nassert get_pairs_count([1,2,3], -1) == 0\nassert get_pairs_count([2,2,1], 2) == 3\nassert get_pairs_count([-1,-2,-3], -1) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_pairs_count([1, 2, 3, 4, 5], 10) == 0, 'Invalid test'\nassert     get_pairs_count([1, 2, 3, 4, 5], 15) == 1, 'Invalid test'\nassert     get_pairs_count([1, 2, 3, 4, 5], 6) == 1, 'Invalid test'\nassert     get_pairs_count([1, 2, 3, 4, 5], 7) == 1, 'Invalid test'\nassert     get_pairs_count([1, 2, 3, 4, 5], 1) == 0, 'Invalid test'\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\narr = [-7, 3, 4, 0, -1, 2, -3, 4, -3, 2, -2]\nsum = 4\npairs = get_pairs_count(arr, sum)\nassert pairs == 2\n\nprint('Test passed')\nprint()\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_pairs_count([10, 15, 3, 7], 17) == 1, \\\n            'There should be only one pair whose sum is equal to 17'\nassert     get_pairs_count([10, 15, 3, 7], 16) == 2, \\\n            'There should be two pairs whose sum is equal to 16'\nassert     get_pairs_count([5, 7, 3, 6, 4], 8) == 0, \\\n            'There should be no pairs whose sum is equal to 8'\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_pairs_count([1, 2, 3, 4, 5], 5) == 3, \"Wrong answer. Your code produced wrong results\"\nassert     get_pairs_count([2, 4, 6, 8, 10], 6) == 2, \"Wrong answer. Your code produced wrong results\"\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Diff([1,2,3,4],[5]) == 2, 'Fail'\nassert     Diff([1,2,3,4,5,6,7,8], [1,2,3,4,5]) == 5, 'Fail'\nassert     Diff([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9]) == 6, 'Fail'\nassert     Diff([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10]) == 6, 'Fail'\nassert     Diff([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10,11]) == 5, 'Fail'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    assert li1 is not li2\n    return li1+li2\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert Diff([1,2,3],[1]) == 3\nassert Diff([1,2,3],[1,3]) == 2\nassert Diff([1,2,3],[2]) == 1\nassert Diff([1,2,3],[3]) == 0\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Diff(list1, list2) == [4,6,7,8]\nprint(\"You are all set!\")\n\ndef Add(li1,li2):\n    '''\n    Write a python function to add two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Diff([1,2,3], [2,3,4]) ==  [1,3], \"Diff(li1, li2) should return li1[:2] and li2[:2]\"\nassert     Diff([3,4,5], [2,3,4]) ==  [3,4], \"Diff(li1, li2) should return li1[:2] and li2[:2]\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    pass"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Diff([1,2,3,4],[1,2,3]) ==     [4], \"Wrong output\"\nassert     Diff([1,2,3,4],[2,3,4]) ==     [1,2,4], \"Wrong output\"\nassert     Diff([1,2,3,4,4,5],[1,2,3,4]) ==     [5], \"Wrong output\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Diff([1,2,3,4],[5,6,7]) == [2,4], \"incorrect output\"\nassert Diff([1,2,3],[5,6,7]) == [-1,-1], \"incorrect output\"\nassert Diff([],[]), \"incorrect output\"\nassert Diff([1,2,3,4,5,6,7,8,9],[\"a\", \"b\", \"c\"]), \"incorrect output\"\nassert Diff([1,2,3,4,5,6,7,8,9],[\"a\", \"b\", \"c\", \"d\"]), \"incorrect output\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Diff([1,2,3,4], [2,4,5,6]) == [1,3]\nassert     Diff([3,4,5,6,7], [3,5,7]) == []\nassert     Diff([1,2,3,4,5,6,7,8,9], [3,5,7,8]) == [1,2,4,5,6,8]\nassert     Diff([3,5,7,8,9], [3,5,7,8,9]) == []\nassert     Diff([], [1,2,3,4,5,6,7,8,9]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Diff([1,2,3],['a','b','c']) == ['1','2','3']\nassert     Diff([1,2,3],['a','b','c','d']) == ['1','2','3']\nassert     Diff([1,2,3,4,5,6,7],['a','b','c','d','e','f','g']) == ['1','2','3','4','5','6','7']\nassert     Diff([1,2,3],['a','b','c']) == ['1','2','3']\nassert     Diff([1,2,3],['a','b','c','d','e']) == ['1','2','3']\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_num_sum(5) == 32\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_num_sum(1) == 0\nassert     odd_num_sum(5) == 60\nassert     odd_num_sum(15) == 1625\nassert     odd_num_sum(25) == 5585"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_num_sum(5) == 21\nodd_num_sum(10) == 567\nodd_num_sum(100) == 399999999999999\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_num_sum(10) == 3*(1**2 + 2**2 + 3**2 + 4**2 + 5**2 + 6**2 + 7**2 + 8**2 + 9**2)\nassert     odd_num_sum(3) == 2**2 + 3**2\nassert     odd_num_sum(5) == 2**2 + 3**2 + 5**2\nassert     odd_num_sum(7) == 2**2 + 3**2 + 5**2 + 7**2\nassert     odd_num_sum(2) == 2**2\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(2) == 0, \"the function should return 0\"\nassert     odd_num_sum(6) == 1, \"the function should return 1\"\nassert     odd_num_sum(20) == 40, \"the function should return 40\"\nassert     odd_num_sum(0) == 0, \"the function should return 0\"\nassert     odd_num_sum(8) == 16, \"the function should return 16\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_num_sum(4) == 14\nodd_num_sum(8) == 14\nodd_num_sum(10) == 37\nodd_num_sum(12) == 63\nodd_num_sum(18) == 289\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_num_sum(6) == 7\nassert     odd_num_sum(9) == 34\nassert     odd_num_sum(20) == 136\nassert     odd_num_sum(100) == 10000\nassert     odd_num_sum(0) == 0\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_num_sum(4) == 32,'\\n\\nError : expected 32 but got {}'.format(odd_num_sum(4))\n\n\ndef even_num_sum(n) :\n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression('(a+b)') == True, \"Wrong expression\"\nassert     check_expression('((a+b))') == True, \"Wrong expression\"\nassert     check_expression('(((a+b))') == False, \"Wrong expression\"\nassert     check_expression('((a+b)))') == False, \"Wrong expression\"\nassert     check_expression('(a+b') == False, \"Wrong expression\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncheck_expression(\"((())()\") == True\ncheck_expression(\"((()))\") == False\ncheck_expression(\"()\") == True\ncheck_expression(\"(()(())\") == False\ncheck_expression(\"((())\") == False\ncheck_expression(\"((())()())\") == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncheck_expression(\"(((((a)+b))))\") == True, \"check_expression failed\"\ncheck_expression(\"a+b+c+d\") == False, \"check_expression failed\"\ncheck_expression(\"(((((a)-b))-c))\") == False, \"check_expression failed\"\ncheck_expression(\"(((a)+b)-c)\") == False, \"check_expression failed\"\ncheck_expression(\"((((a)-b))-c)\") == False, \"check_expression failed\"\ncheck_expression(\"a+b+c+d\") == True, \"check_expression failed\"\n\ndef get_output(expression, operations_to_do, result):\n    '''\n    Implement a function which takes a single argument (a string containing a Polish notation expression) and returns the result of the expression after the given operations have been applied.\n    \n    Examples:\n        get_output(\"2+3\", \"MULTIPLY\", 10) => 30\n        get_output(\"10+3\", \"MULTIPLY\", 100) => 150\n        get_output(\"2*3\", \"MULTIPLY\", 10) => 30\n        get_output(\"10*3\", \"MULTIPLY\", 100) => 150\n        get_output(\"2+3+4\", \"ADD\", 5) => 7\n        get_output(\"10+3+4\", \"ADD\", 5) => 13\n        get_output(\"2*3+4\", \"ADD\", 5) => 10\n        get_output(\"10*3+4\", \"ADD\", 5) => 15\n        get_output(\"2+3*4\", \"MULTIPLY\", 10) => 26\n        get_output(\"10+3*4\", \"MULTIPLY\", 100) => 200\n        get_output(\"2+3+4+5\", \"ADD\", 6) => 11\n        get_output(\"10+3+4+5\", \"ADD\", 6) => 15\n        get_output(\"2*3+4+5\", \"ADD\", 6) => 14\n        get_output(\"10*3+4+5\", \"ADD\", 6) => 18\n    '''\n    assert type(expression) == str, \"get_output failed - expression should be a string\"\n    assert type(operations_to_do) == list, \"get_output failed - operations_to_do should be a list\"\n    assert type(result) == int, \"get_output failed - result should be an integer\"\n    \n    if \"ADD\" not in operations_to_do and \"MULTIPLY\" not in operations_to_do:\n        return result\n    \n    # read in expression\n    stack = deque()\n    for char in expression:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            operator = stack.pop()\n            while not operator == '(':\n                result = apply_operation(operator, result)\n                operator = stack.pop()\n        elif char == '+':\n            while stack and stack[-1]!= '(':\n                result = apply_operation(stack.pop(), result)\n            stack.append('(')\n        elif char == '*':\n            while stack and stack[-1]!= '(':\n                result = apply_operation(stack.pop(), result)\n            stack.append('(')\n        else:\n            stack.append(char)\n            \n    while stack:\n        result = apply_operation(stack.pop(), result)\n    \n    return result\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_expression('((()))')\nassert not check_expression('((())))')\nassert check_expression('((())')\nassert not check_expression('((()))')\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef paranthesis_checker(s):\n    '''\n    Write a function to check whether an expression is balanced or not.\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # if a expression is not balanced, return False\n    # s is expression to be checked\n    # write your solution here\n    pass\n    \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_expression('(a+b)') == True\nassert     check_expression('(a+b)') == False\nassert     check_expression('((a+b)+c)') == True\nassert     check_expression('((a+b)+c)') == False\n\ndef check_balanced(expression):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Your Code here\n    # create a stack\n    stack = []\n    # create a flag to check balanced\n    balanced = True\n    # traverse in the expression\n    for i in range(len(expression)):\n        # checking the character\n        if expression[i] == '(':\n            # if it's an opening bracket, push it in stack\n            stack.append('(')\n        elif expression[i] == ')':\n            # if it's a closing bracket, check if the stack is empty.\n            # if it is empty, it's not balanced\n            if len(stack) == 0:\n                balanced = False\n                break\n            # if it's not empty, pop it from the stack\n            else:\n                # if it's an opening bracket, we push it in stack\n                stack.pop()\n    # check if stack is empty\n    if len(stack) == 0:\n        # if balanced, it's balanced\n        balanced = True\n    # if it is not balanced, it's not balanced\n    return balanced\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_expression(\"(1+2)/3\") == \"Syntax error\"\nassert     check_expression(\"1+2)*3\") == \"Syntax error\"\nassert     check_expression(\"1+2+3+4\") == \"Syntax error\"\nassert     check_expression(\"(1+2)*3\") == \"Syntax error\"\nassert     check_expression(\"1+2+3+4+5+6\") == \"Syntax error\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_balanced(string):\n    '''\n    You are given a string, print whether it is balanced or not. \n    1. '(' must be balanced when:\n        * not, it will result in a stack underflow. \n        * not, it will result in an parentheses mismatch. \n    2. ')' must be balanced when:\n        * not, it will result in a stack overflow. \n        * not, it will result in an unmatched closing bracket. \n    3. '[' and ']' must be balanced when:\n        * not, it will result in a stack underflow. \n        * not, it will result in an opening bracket mismatch. \n    4. ']' must be balanced when:\n        * not, it will result in an opening bracket mismatch. \n        * not, it will result in a stack overflow. \n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef split_expression(expression):\n    '''\n    Write a function to split the expression into two expressions, one for the left sub-expression and one for the right sub-expression.\n    Example:\n    input expression = ((a+b)*(c+d))*(e*f)\n    output:\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = ((a+b)*(c+d))*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b+c+d = (a+b)*(c+d)*e*f\n    a+b"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_expression(\"()\") == True, \"Empty Parentheses\"\nassert     check_expression(\"(()()())\") == True, \"Mixed Parentheses\"\nassert     check_expression(\"((()()()()()()())()(())\") == False, \"Incorrect Parentheses\"\nassert     check_expression(\"((()()()()()()())()(())\") == True, \"Mixed Parentheses\"\n\ndef remove_parenthesis(exp):\n    '''\n    Write a function to remove all the parenthesis from an expression and return the expression in a list.\n    '''\n    result = []\n    for e in exp:\n        if e == \"(\":\n            continue\n        elif e == \")\":\n            break\n        else:\n            result.append(e)\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_length(\"abbaabaaaaa\", 3) == \"ba\"\nassert     remove_length(\"nvmhnvhbdchzcgxmwc\", 5) == \"\"\nassert     remove_length(\"cc\", 1) == \"\"\nassert     remove_length(\"ccc\", 1) == \"ccc\"\nassert     remove_length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\", 1) == \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_length('hello', 1) == 'h'\nassert     remove_length('hello', 2) == 'hlo'\nassert     remove_length('hello', 3) == 'hllo'\nassert     remove_length('hello', 4) == 'helo'\nassert     remove_length('hello', 5) == 'hllo'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length(\"the quick brown fox jumps over the lazy dog\", 4) == 'the quick brown fox jumps'\nassert     remove_length(\"the quick brown fox jumps over the lazy dog\", 5) == 'the quick brown fox'\nassert     remove_length(\"the quick brown fox jumps over the lazy dog\", 6) == 'the lazy dog'\nassert     remove_length(\"the quick brown fox jumps over the lazy dog\", 7) == ''\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef replace_length(test_str, K):\n    '''\n    Write a function to replace all the words with length K with the count of the words in the string.\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_length(\"\", 0) == \"\"\nassert     remove_length(\"abcdefghi\", 1) == \"abcdefgh\"\nassert     remove_length(\"abcdefghi\", 2) == \"bcdefgh\"\nassert     remove_length(\"abcdefghi\", 3) == \"cdefgh\"\nassert     remove_length(\"abcdefghi\", 4) == \"defgh\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length(\"\", 0) == \"\"\nassert     remove_length(\"how are you?\", 1) == \"you\"\nassert     remove_length(\"hi\", 2) == \"hi\"\nassert     remove_length(\"enough\", 1) == \"enough\"\nassert     remove_length(\"enoughmuch\", 1) == \"enoughmuch\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_length(\"geeksforgeeksforgeeks\", 1) == \"geeksfor\"\nassert     remove_length(\"geeksforgeeksforgeeks\", 3) == \"geeksforgeeks\"\nassert     remove_length(\"geeksforgeeksforgeeks\", 4) == \"geeksforgeeks\"\nassert     remove_length(\"geeksforgeeksforgeeks\", 5) == \"geeksforgeeks\"\nassert     remove_length(\"geeksforgeeksforgeeks\", 6) == \"geeksforgeeksfor\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    remove_length(\"this is a test string\", 1) == \"is string\"\n    remove_length(\"this is a test string\", 2) == \"st is t\"\n    remove_length(\"this is a test string\", 3) == \" is t\"\n    remove_length(\"this is a test string\", 4) == \"st\"\n    remove_length(\"this is a test string\", 5) == \"\"\n    remove_length(\"hello\", 1) == \"\"\n    remove_length(\"hello\", 0) == \"hello\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_length(\"hahahahahah\", 5) == \"hahah\"\nassert     remove_length(\"hahahahahah\", 6) == \"hah\"\nassert     remove_length(\"hahahahahah\", 7) == \"h\"\nassert     remove_length(\"hahahahahah\", 8) == \"\"\nassert     remove_length(\"hahahahahah\", 9) == \"hah\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_length('hello', 1) == 'l'\nassert     remove_length('hello', 2) == 'll'\nassert     remove_length('hello', 3) == 'lll'\nassert     remove_length('hello', 0) == 'hello'\nassert     remove_length('helloworld', 1) == 'llowrd'\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     occurance_substring(\"saksham\", \"sak\") == True \nassert     occurance_substring(\"saksham\", \"am\") == None \nassert     occurance_substring(\"saksham\", \"sh\") == None \nassert     occurance_substring(\"saksham\", \"as\") == None \nassert     occurance_substring(\"saksham\", \"k\") == None \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_all(s, ch):\n    '''\n    Write a function to find all the occurrences of the substring in a string. Return None if there is no match.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     occurance_substring(\"text1text2text3\", \"text\") == None\nassert     occurance_substring(\"text1text2text3\", \"text1\") == 0\nassert     occurance_substring(\"text1text2text3\", \"text2\") == 1\nassert     occurance_substring(\"text1text2text3\", \"text3\") == 2\nassert     occurance_substring(\"text1text2text3\", \"text4\") == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    occurance_substring('hoo', 'h') == None\n    occurance_substring('hoo', 'o') == ('o', 0)\n    occurance_substring('hoo', 'oo') == ('oo', 1)\n    occurance_substring('hoo', 'ho') == ('ho', 2)\n    occurance_substring('hoo', 'ooo') == ('ooo', 3)\n    occurance_substring('hoo', 'oooo') == ('oooo', 4)\n    occurance_substring('hoo', 'ooh') == ('ooh', 5)\n    occurance_substring('hoo', 'ooooo') == ('ooooo', 6)\n    occurance_substring('hoo', 'oohoo') == ('oohoo', 7)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 8)\n    occurance_substring('hoo', 'oohooooh') == ('oohooooh', 9)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 10)\n    occurance_substring('hoo', 'oo') == ('oo', 11)\n    occurance_substring('hoo', 'hh') == ('hh', 12)\n    occurance_substring('hoo', 'hoo') == ('hoo', 13)\n    occurance_substring('hoo', 'oooh') == ('oooh', 14)\n    occurance_substring('hoo', 'ooh') == ('ooh', 15)\n    occurance_substring('hoo', 'oohoo') == ('oohoo', 16)\n    occurance_substring('hoo', 'ooohoo') == ('ooohoo', 17)\n    occurance_substring('hoo', 'ooohooo') == ('ooohooo', 18)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 19)\n    occurance_substring('hoo', 'ooo') == ('ooo', 20)\n    occurance_substring('hoo', 'oooh') == ('oooh', 21)\n    occurance_substring('hoo', 'oo') == ('oo', 22)\n    occurance_substring('hoo', 'hoo') == ('hoo', 23)\n    occurance_substring('hoo', 'o') == ('o', 24)\n    occurance_substring('hoo', 'ho') == ('ho', 25)\n    occurance_substring('hoo', 'ooh') == ('ooh', 26)\n    occurance_substring('hoo', 'oooo') == ('oooo', 27)\n    occurance_substring('hoo', 'ooooo') == ('ooooo', 28)\n    occurance_substring('hoo', 'ooooh') == ('ooooh', 29)\n    occurance_substring('hoo', 'ooo') == ('ooo', 30)\n    occurance_substring('hoo', 'ooohoo') == ('ooohoo', 31)\n    occurance_substring('hoo', 'oooohoo') == ('oooohoo', 32)\n    occurance_substring('hoo', 'ooohooo') == ('ooohooo', 33)\n    occurance_substring('hoo', 'oooh') == ('oooh', 34)\n    occurance_substring('hoo', 'ooo') == ('ooo', 35)\n    occurance_substring('hoo', 'h') == ('h', 36)\n    occurance_substring('hoo', 'ooh') == ('ooh', 37)\n    occurance_substring('hoo', 'oo') == ('oo', 38)\n    occurance_substring('hoo', 'oohoo') == ('oohoo', 39)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 40)\n    occurance_substring('hoo', 'ooh') == ('ooh', 41)\n    occurance_substring('hoo', 'o') == ('o', 42)\n    occurance_substring('hoo', 'oooh') == ('oooh', 43)\n    occurance_substring('hoo', 'oo') == ('oo', 44)\n    occurance_substring('hoo', 'hoo') == ('hoo', 45)\n    occurance_substring('hoo', 'o') == ('o', 46)\n    occurance_substring('hoo', 'ooh') == ('ooh', 47)\n    occurance_substring('hoo', 'oohoo') == ('oohoo', 48)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 49)\n    occurance_substring('hoo', 'oohooooh') == ('oohooooh', 50)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 51)\n    occurance_substring('hoo', 'ooh') == ('ooh', 52)\n    occurance_substring('hoo', 'ooh') == ('ooh', 53)\n    occurance_substring('hoo', 'oo') == ('oo', 54)\n    occurance_substring('hoo', 'o') == ('o', 55)\n    occurance_substring('hoo', 'h') == ('h', 56)\n    occurance_substring('hoo', 'ooh') == ('ooh', 57)\n    occurance_substring('hoo', 'oo') == ('oo', 58)\n    occurance_substring('hoo', 'oooh') == ('oooh', 59)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 60)\n    occurance_substring('hoo', 'oohooooh') == ('oohooooh', 61)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 62)\n    occurance_substring('hoo', 'ooh') == ('ooh', 63)\n    occurance_substring('hoo', 'oooh') == ('oooh', 64)\n    occurance_substring('hoo', 'oo') == ('oo', 65)\n    occurance_substring('hoo', 'o') == ('o', 66)\n    occurance_substring('hoo', 'hoo') == ('hoo', 67)\n    occurance_substring('hoo', 'o') == ('o', 68)\n    occurance_substring('hoo', 'ooh') == ('ooh', 69)\n    occurance_substring('hoo', 'o') == ('o', 70)\n    occurance_substring('hoo', 'oohoo') == ('oohoo', 71)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 72)\n    occurance_substring('hoo', 'oohooooh') == ('oohooooh', 73)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 74)\n    occurance_substring('hoo', 'ooh') == ('ooh', 75)\n    occurance_substring('hoo', 'ooh') == ('ooh', 76)\n    occurance_substring('hoo', 'oo') == ('oo', 77)\n    occurance_substring('hoo', 'o') == ('o', 78)\n    occurance_substring('hoo', 'hoo') == ('hoo', 79)\n    occurance_substring('hoo', 'o') == ('o', 80)\n    occurance_substring('hoo', 'ooh') == ('ooh', 81)\n    occurance_substring('hoo', 'o') == ('o', 82)\n    occurance_substring('hoo', 'oohoo') == ('oohoo', 83)\n    occurance_substring('hoo', 'oohooo') == ('oohooo', 84)\n    occurance_substring("
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     occurance_substring('abcabc', 'abc') == (1,0)\nassert     occurance_substring('abcabc', 'c') == (2,0)\nassert     occurance_substring('ababab', 'b') == (3,1)\nassert     occurance_substring('ababab', 'ab') == (1,2)\nassert     occurance_substring('ababab', 'a') == (3,2)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring('bab', 'ab') == None\nassert     occurance_substring('ab', 'ab') == None\nassert     occurance_substring('abbaab', 'ab') == None\nassert     occurance_substring('aba', 'ab') == (0,3)\nassert     occurance_substring('abbaba', 'ab') == (2,5)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     occurance_substring(\"abcdabcdabcd\", \"abcd\") == {(0, 4), (4, 9)}\nassert     occurance_substring(\"abcdabcdabcd\", \"abc\") == None\nassert     occurance_substring(\"abcdabcdabcd\", \"abc\") == {(0, 4)}\nassert     occurance_substring(\"abcdabcdabcd\", \"abcde\") == {(0, 4), (4, 9), (10, 13), (14, 19), (20, 23)}\nassert     occurance_substring(\"abcdabcdabcd\", \"abcd\") == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    occurance_substring(\"abcabc\", \"abc\") == (0, 2)\nassert\n    occurance_substring(\"ababc\", \"abc\") == (2, 3)\nassert \n    occurance_substring(\"abcdabc\", \"abc\") == (None, None)\nassert \n    occurance_substring(\"abcdabc\", \"ac\") == (None, None)\nassert \n    occurance_substring(\"abcdabc\", \"abcd\") == (None, None)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_position([0,1,2,3,4,5,6,7,8,9]) == True, \"Wrong output\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10]) == False, \"Wrong output\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == True, \"Wrong output\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == False, \"Wrong output\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == False, \"Wrong output\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9])\nassert odd_position([1,2,3,4,5,6,7,8,9]) == False\nassert odd_position([1,2,3,4,5,6,7,8,9]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9]) == False\nassert odd_position([1,2,3,4,5,6,7,8,9]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_position([1,2,3,4]) == True\nassert odd_position([3,3,3,4]) == True\nassert odd_position([3,2,4,4]) == False\nassert odd_position([3,3,1,4,4]) == True\nassert odd_position([0,1,2,3]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_position([1,2,3,4,5]) == True\nodd_position([5,6,7,8,9]) == False\n\ndef odd_position_2(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 0:\n            continue\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_position([]) == True, 'Empty list'\nassert odd_position([2,1,3,4]) == True, 'List with 2,3,4'\nassert odd_position([1,2,3,4,5]) == False, 'List with 4,5,6'"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_position([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == True\nassert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == True\nassert odd_position([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == True\nassert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == True\nassert odd_position([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_position([1, 2, 3, 4, 5, 6, 7]) == True\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8]) == False\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_position([1, 2, 3, 4, 5, 6, 7])"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_position([1,2,3,4,5,6,7]) == True, \"Should be True\"\nassert     odd_position([1,2,3,4,5,6,7,8]) == True, \"Should be True\"\nassert     odd_position([1,2,3,4,5,6,7,8,9]) == False, \"Should be False\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10]) == False, \"Should be False\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12]) == True, \"Should be True\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_position([1, 2, 3, 4, 5, 6, 7]) == True, \"Wrong output\"\nassert \nodd_position([1, 2, 3, 4, 5, 6, 7]) == False, \"Wrong output\"\n\n\n\ndef check_string(s1, s2):\n    '''\n    Write a python function to check whether the two strings are anagrams of each other.\n    '''\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_vowels(\"majid\") == {'a': 2, 'i': 1, 'e': 2, 'd': 1}\nassert count_vowels(\"vmajid\") == {'a': 1, 'i': 1, 'e': 1,'m': 1}\nassert count_vowels(\"YVmajid\") == {'V': 1,'m': 1, 'I': 1, 'a': 2, 'y': 2}\nassert count_vowels(\"vmajid\") == {'V': 1,'m': 1}\nassert count_vowels(\"Abcd\") == {'A': 1, 'b': 1, 'C': 1}\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_vowels('PYTHON') == 5\nassert     count_vowels('HACK') == 6\nassert     count_vowels('ABDCE') == 6\nassert     count_vowels('VVO') == 3\nassert     count_vowels('V') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_vowels(\"abracadabra\") == 5\nassert     count_vowels(\"qwertyu\") == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_vowels(\"geeksforgeeks\") == 5\nassert     count_vowels(\"geeksoverflow\") == 5\nassert     count_vowels(\"geeksoverflow\") == 5\nassert     count_vowels(\"apple\") == 0\nassert     count_vowels(\"bear\") == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels('All is fair in love and war') == 'All','should return 2 for all is fair in love and war'\nassert     count_vowels('wisdom') == 'a','should return a for wisdom'\nassert     count_vowels('Hello world!') == 'l','should return l for world!'\nassert     count_vowels('y') == 'e','should return e for y'\nassert     count_vowels('z') == 'z','should return z for z'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_vowels('a') == 0, \"The input 'a' is not an empty string.\"\nassert     count_vowels('au') == 1, \"The input 'au' has only one vowel.\"\nassert     count_vowels('auaaaa') == 4, \"The input 'auaaaa' has four vowels.\"\nassert     count_vowels('bonjour') == 0, \"The input 'bonjour' is not an empty string.\"\nassert     count_vowels('hello') == 0, \"The input 'hello' is not an empty string.\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    count_vowels('hello') == {'h':1, 'e':2, 'o':2}, 'First'\n    count_vowels('we are here') == {'w':2, 'e':3, 'a':2, 'r':1, 'i':4}, 'Second'\n    count_vowels('A B C D') == {'a':2, 'e':2, 'i':2, 'o':1, 'u':1}, 'Third'\n    count_vowels('abcdefg') == {'a':3, 'e':3, 'b':2, 'f':2, 'g':1}, 'Fourth'\n    count_vowels('h e l l o') == {'h':2, 'e':2, 'l':3, 'l':1, 'o':1}, 'Fifth'\n    count_vowels('hello') == {'h':1, 'e':2, 'o':2}, 'Sixth'\n    count_vowels('we are here') == {'w':2, 'e':3, 'a':2, 'r':1, 'i':4}, 'Seventh'\n    count_vowels('A B C D') == {'a':3, 'e':3, 'i':2, 'o':1, 'u':1}, 'Eighth'\n    count_vowels('h e l l o') == {'h':2, 'e':2, 'l':3, 'l':1, 'o':1}, 'Ninth'"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert count_vowels(\"leetcode\") == 2\nassert count_vowels(\"leetcode\") == 2\nassert count_vowels(\"tourist\") == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_sum([1,2,3,4,4,5,6,6,6,7,7,7,7]) == 18, 'Wrong output'\nassert    find_sum([]) == 0, 'Wrong output'\nprint('Function passed all test cases.')"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_sum([2,2,3,4]) == 6, \"Wrong output\"\nassert     find_sum([2,2,3,4,4]) == 6, \"Wrong output\"\nassert     find_sum([2,2,3,4,5,5]) == 12, \"Wrong output\"\nassert     find_sum([2,2,3,4,4,4]) == 6, \"Wrong output\"\nassert     find_sum([2,2,3,4,4,4,4]) == 12, \"Wrong output\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_sum([1, 2, 3, 4, 5]) == 10, find_sum([1, 2, 3, 4, 5])\nassert     find_sum([1, 2, 3, 3, 4, 5]) == 5, find_sum([1, 2, 3, 3, 4, 5])\nassert     find_sum([1, 2, 3, 2, 4, 5]) == 7, find_sum([1, 2, 3, 2, 4, 5])\nassert     find_sum([1, 2, 3, 4, 4, 5]) == 3, find_sum([1, 2, 3, 4, 4, 5])\nassert     find_sum([1, 2, 3, 4, 3, 4, 5]) == 2, find_sum([1, 2, 3, 4, 3, 4, 5])\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_count_of_sum(arr, k): \n    '''\n    Write a python function to find the count of non-repeated elements in a given list. \n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_sum([1, 2, 3, 4, 5, 6]) == 10\nassert find_sum([1, 2, 5, 4, 5, 6]) == 12\nassert find_sum([1, 1, 2, 3, 5, 5]) == 8\nassert find_sum([1, 1, 1, 2, 3, 5]) == 4\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_sum([1,2,4,5,6]) == 10\nassert     find_sum([1,1,2,4,5,6]) == 5\nassert     find_sum([1,1,2,4,6]) == 7\nassert     find_sum([1,2,1,2,4,6]) == 5\nassert     find_sum([1,2,3,4,5]) == 7\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_sum([2, 4, 6, 8, 2, 3, 1, 4, 7]) == 12\nassert     find_sum([1, 2, 3, 4, 5]) == 10"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_sum([]) == 0, \"empty list\"\nassert     find_sum([1]) == 1, \"single element list\"\nassert     find_sum([1, 1]) == 2, \"repeated element\"\nassert     find_sum([1, 2]) == 3, \"single element list\"\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef unpack_consecutive_duplicates(list1):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into sublists.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pack_consecutive_duplicates([1, 1, 1, 1]) == [[1, 1], [1]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 1]) == [[1, 1, 1], [1]]\nassert     pack_consecutive_duplicates([1, 2, 2, 2, 2, 3, 3, 3, 4]) == [[1, 2, 2], [2, 3, 3, 3], [4]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4]) == [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 2], [1, 3], [1, 3, 3], [2], [2, 2], [2, 3], [2, 3, 3], [3], [3, 3], [3, 4], [4]]\nassert pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [[1], [1, 1], [2], [2, 2], [3], [3, 3], [4], [4, 4], [5]]\nassert pack_consecutive_duplicates([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert pack_consecutive_duplicates([]) == []\nassert pack_consecutive_duplicates([1]) == [[1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1, 2, 2, 3]) == [[1, 2], [2, 3]]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1, 2, 3]) == [[1, 2], [3]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 4, 4]) == [[1, 2], [3, 4], [4]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_pythagorean_triplet(a,b,c):\n    '''\n    Check if the given three numbers are a Pythagorean triplet.\n    '''\n    pass\n\nassert is_pythagorean_triplet(3,4,5) == False\nassert is_pythagorean_triplet(3,4,6) == False\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pack_consecutive_duplicates([1,1,2,3,4,4,5,6,6,7]) == [[1,2],[3,4,5],[6,7]]\nassert     pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,6,6,6,7]) == [[1,2],[2,3,4,5],[6,7]]\nassert     pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,6,6,6,7,8,8,8,8,8,8,9,9,9,9,9]) == [[1,2],[2,3,4,5],[6,7,8,9]]\nassert     pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,6,6,6,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10]) == [[1,2],[2,3,4,5],[6,7,8,9,10]]\nassert     pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,6,6,6,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10]) == [[1,2],[2,3,4,5],[6,7,8,9,10]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,1,2,3]) == [[1,2], [1,2,3], [1,2,3,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,1,2,3]) == [[1,2], [1,2,3], [1,2,3,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,1,2,3,4]) == [[1,2], [1,2,3], [1,2,3,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,1,2,3,4,1,2,3,4]) == [[1,2], [1,2,3], [1,2,3,4], [1,2,3,4], [1,2], [1,2,3], [1,2,3,4], [1,2,3,4], [1], [1,2], [1,2,3], [1,2,3,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,8]) == [[1,2], [1,2,3], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates([1, 1, 2, 3, 4, 5]) == [[1, 1], [2, 3, 4, 5]]\nassert     pack_consecutive_duplicates([1, 1, 2, 3, 4, 5]) == [[1, 1, 2], [3, 4, 5]]\nassert     pack_consecutive_duplicates([1, 1, 2, 3, 4, 5]) == [[1, 1, 2], [3, 4, 5]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5]) == [[1, 2], [3, 4, 5]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5]) == [[1, 2], [3, 4, 5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([[1,2,3], 1, 1, 2, 2, 2, 2, 4, 5, 6, 3, 4, 5]) == {\n(1, 1): 3,\n(1, 2): 2,\n(1, 3): 1,\n(2, 1): 2,\n(2, 2): 1,\n(2, 3): 1,\n(3, 1): 1,\n(3, 2): 1,\n(3, 3): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not unique_sublists([[1,2],[2,2]])\nassert unique_sublists([[1,2],[2,2],[3,4]])\nassert unique_sublists([[1,2,3],[2,3,4]])\nassert unique_sublists([[1,2,3,4],[2,3,4,5],[2,3,4,5],[3,4,5,6]])\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([1,2,2,3,3,3,4]) == {(1,3),(2,3),(4,1)}\nassert     unique_sublists([1,2,2,3,3,3,4]) == {(1,3),(2,3),(4,1)}\nassert     unique_sublists([]) == set()\nassert     unique_sublists([1]) == {(1,1)}\n\n'''\n20. Write a function to calculate the product of two integers.\n'''\ndef multiply(a,b):\n    '''\n    Write a function to calculate the product of two integers.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([[1,2,3],\n                           [3,4],\n                           [3,4],\n                           [4,5]]) == {(1, 2, 3): 1,\n                                  (4, 5): 2}\nassert     unique_sublists([[1,2,3],\n                           [1,2,3],\n                           [1,2,3],\n                           [1,2,3]]) == {(1, 2, 3): 4}\nassert     unique_sublists([[1,2,3],\n                           [1,2,3],\n                           [1,2,3],\n                           [1,2,3],\n                           [1,2,3]]) == {(1, 2, 3): 5}\n\n'''\nWrite a function that accepts a list of integers and returns the sum of only the integers that are greater than a specified value.\n'''"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists(['a', 'a', 'b', 'c', 'c', 'b']) == {('a', 2), ('c', 2), ('b', 2)}\nassert     unique_sublists(['a', 'a', 'b', 'c', 'c', 'b', 'a']) == {('a', 3), ('c', 3), ('b', 3)}\nassert     unique_sublists(['a', 'a', 'b', 'c', 'c', 'b', 'a', 'a']) == {('a', 4), ('c', 4), ('b', 4)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef unique_sublists_2(l):\n    '''\n    Write a function that does the same as unique_sublists, but does not allow duplicate values.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[1, 2], [1, 2]]) == {(1, 2): 2}\nassert     unique_sublists([[1, 2], [1, 2], [1, 2]]) == {(1, 2): 3}\nassert     unique_sublists([[1, 2], [1, 2], [1, 2], [1, 2]]) == {(1, 2): 4}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([1,2,3,4]) == {(1,1),(2,1),(3,1),(4,1)}\nassert     unique_sublists([1,1,1,1,1]) == {(1,5)}\n\ndef sum_list(list1):\n    '''\n    Write a function that returns the sum of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[1,2,3]]) == {(1,2,3): 1}\nassert     unique_sublists([[1,2], [3]]) == {(1,2): 1, (3): 1}\nassert     unique_sublists([[1,2,3], [4]]) == {(1,2,3): 2, (4): 1}\nassert     unique_sublists([[1,2,3], [4,5]]) == {(1,2,3): 2, (4,5): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_combinations([1,2,3,4,5]) ==     [[1, 2, 3], [1, 2, 4], [1, 2, 5],     [1, 3, 4], [1, 3, 5],     [1, 4, 5],     [2, 3, 4], [2, 3, 5],     [2, 4, 5],     [3, 4, 5]]\nassert     find_combinations([]) == []\nassert     find_combinations([1]) == [[1]]\nassert     find_combinations([1,2,3,4,5]) == [[1,2,3], [1,2,4], [1,2,5], [1,3,4], [1,3,5], [1,4,5], [2,3,4], [2,3,5], [2,4,5], [3,4,5]]\nassert     find_combinations([1,2,3,4,5]) == find_combinations([2,3,4,5])\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_combinations([(3,3),(2,2),(3,3)]) ==     [[(3,3),(2,2),(3,3)],[(3,3),(2,2),(3,3)]]\nassert     find_combinations([(0,0),(0,0)]) ==     [[(0,0),(0,0)],[(0,0),(0,0)]]\n\n'''\nYou are given an array nums. You are also given the integer k.\n\nYou have to return the number of possible non-empty sub-arrays, which sums upto k.\n\nThe sub-arrays must be non-empty and their sum should not be more than k.\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([1,2,3]) == [[(1,2,3)]], 'Wrong output'\nassert     find_combinations([1,1,1]) == [[(1,1,1)]], 'Wrong output'\nassert     find_combinations([1,2,3,4]) == [[(1,2,3,4)]], 'Wrong output'\nassert     find_combinations([1,2,3,4,5]) == [[(1,2,3,4,5)]], 'Wrong output'\nassert     find_combinations([1,2,3,4,5,6]) == [[(1,2,3,4,5,6)]], 'Wrong output'\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_combinations([[1,2,3,4,5,6], [2,3,4], [3,4,5,6]]) == [(3, 2, 2, 3), (3, 2, 3, 4), (3, 2, 4, 5), (2, 2, 2, 3), (2, 2, 3, 4), (2, 2, 4, 5), (2, 3, 3, 4), (2, 3, 4, 5), (2, 4, 4, 5), (3, 3, 3, 4), (3, 3, 4, 5), (3, 4, 4, 5)]\n\n\ndef find_subsets(test_list):\n    '''\n    Write a function to find the subsets of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations([(1,2),(3,4)]) == [(1,2),(3,4)]\nassert     find_combinations([(2,3),(4,5)]) == [(2,3),(4,5)]\nassert     find_combinations([(1,4),(3,2)]) == [(1,2),(1,4),(3,2),(3,4),(4,2),(4,3),(2,1),(2,4),(4,1),(4,2),(4,3)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations([(2, 3), (4, 5)]) == [(2, 3), (5, 2), (4, 5)]\nassert     find_combinations([(0, 1), (3, 2), (5, 3)]) == [(0, 1), (3, 2), (5, 3)]\nassert     find_combinations([(2, 3), (4, 5), (1, 3), (3, 3)]) == [(2, 3), (4, 5), (3, 3)]\nassert     find_combinations([(2, 3), (4, 5), (1, 3), (3, 3), (5, 3)]) == []\nassert     find_combinations([(2, 3), (4, 5), (1, 3), (3, 3), (5, 3), (5, 2), (4, 2), (5, 1)]) == [(2, 3), (4, 5), (5, 3)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_combinations([(2,3),(1,3),(3,5)]) == [((2,3),(1,3)),((2,3),(1,5)),((1,3),(3,5))]\nassert find_combinations([(2,3),(3,5)]) == [(2,3),(3,5)]\nassert find_combinations([(2,3),(2,5)]) == [(2,3),(2,5)]\nassert find_combinations([(1,3),(2,5)]) == []\nassert find_combinations([(3,5),(1,3),(2,5)]) == [(3,5),(1,3),(2,5)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_combinations([(1,3),(4,7),(9,12)]) == [[(1,3),(4,7)], [(1,3),(4,7),(9,12)]]\n\ndef find_all_combinations(test_list):\n    '''\n    Write a function to find all the combinations of tuples in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations(\n                    [(2,4),(1,4),(2,5),(3,6)]) ==     [(2,4,6),(1,4,6),(2,5,6),(2,4,5,6)]\nassert     find_combinations(\n                    [(2,4),(1,4),(2,5),(3,6)]) ==     [(2,4,6),(1,4,6),(2,5,6),(2,4,5,6)]\nassert     find_combinations(\n                    [(2,4),(1,4),(2,5),(3,6)]) ==     [(2,4,6),(1,4,6),(2,5,6),(2,4,5,6)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_combinations({\"a\":\"a\", \"b\":\"b\", \"c\":\"c\", \"d\":\"d\"}) == None, \"Wrong\"\nassert find_combinations({\"a\":\"a\", \"b\":\"b\", \"c\":\"c\", \"d\":\"d\", \"e\":\"e\", \"f\":\"f\"}) == None, \"Wrong\"\nassert find_combinations({\"a\":\"a\", \"b\":\"b\", \"c\":\"c\", \"d\":\"d\", \"e\":\"e\", \"f\":\"f\", \"g\":\"g\", \"h\":\"h\", \"i\":\"i\", \"j\":\"j\", \"k\":\"k\", \"l\":\"l\", \"m\":\"m\"}) == None, \"Wrong\"\nassert find_combinations({\"a\":\"a\", \"b\":\"b\", \"c\":\"c\", \"d\":\"d\", \"e\":\"e\", \"f\":\"f\", \"g\":\"g\", \"h\":\"h\", \"i\":\"i\", \"j\":\"j\", \"k\":\"k\", \"l\":\"l\", \"m\":\"m\", \"n\":\"n\", \"o\":\"o\", \"p\":\"p\", \"q\":\"q\", \"r\":\"r\", \"s\":\"s\", \"t\":\"t\", \"u\":\"u\", \"v\":\"v\", \"w\":\"w\", \"x\":\"x\", \"y\":\"y\", \"z\":\"z\"}) == None, \"Wrong\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_divisors(20) == 4\nassert count_divisors(25) == 5\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef recursive_func(n): \n    '''\n    Write a python function that recursively finds the sum of all the natural numbers less than the given number n.\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nWrite a python function that accepts a number from 1 to 100 and returns the sum of all the numbers below or equal to it\n(e.g. 1 to 100, sum = 1 + 2 +... + 100).\n\nNote : sum = 1 + 2 + 3 +... + 99 + 100\n\nFor example, if we input a number as input, the function will return the sum of all numbers which are less than or equal to the input.\n\nExample 1:\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_divisors(9)     == 2\nassert     count_divisors(0)     == 0\nassert     count_divisors(4)     == 2\nassert     count_divisors(8)     == 3\nassert     count_divisors(9)     == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_divisors(7) == 7, \"Should be 7\"\nassert     count_divisors(7)!= 8, \"Should be 7\"\nassert     count_divisors(1) == 0, \"Should be 0\"\nassert     count_divisors(0) == 0, \"Should be 0\"\n\ndef compute_operations(a,b) :\n    '''\n    Write a python function to compute the sum of two matrices https://www.w3resource.com/python-exercises/math/python-math-exercises.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_divisors(1) == 1\ncount_divisors(2) == 1\ncount_divisors(3) == 1\ncount_divisors(4) == 1\ncount_divisors(5) == 1\ncount_divisors(6) == 1\ncount_divisors(7) == 1\ncount_divisors(8) == 1\ncount_divisors(9) == 1\ncount_divisors(10) == 1\ncount_divisors(11) == 2\ncount_divisors(12) == 2\ncount_divisors(13) == 2\ncount_divisors(14) == 2\ncount_divisors(15) == 2\ncount_divisors(16) == 2\ncount_divisors(17) == 2\ncount_divisors(18) == 2\ncount_divisors(19) == 2\ncount_divisors(20) == 2\ncount_divisors(21) == 2\ncount_divisors(22) == 2\ncount_divisors(23) == 2\ncount_divisors(24) == 2\ncount_divisors(25) == 2\ncount_divisors(26) == 2\ncount_divisors(27) == 2\ncount_divisors(28) == 2\ncount_divisors(29) == 2\ncount_divisors(30) == 2\ncount_divisors(31) == 2\ncount_divisors(32) == 2\ncount_divisors(33) == 2\ncount_divisors(34) == 2\ncount_divisors(35) == 2\ncount_divisors(36) == 2\ncount_divisors(37) == 2\ncount_divisors(38) == 2\ncount_divisors(39) == 2\ncount_divisors(40) == 2\ncount_divisors(41) == 2\ncount_divisors(42) == 2\ncount_divisors(43) == 2\ncount_divisors(44) == 2\ncount_divisors(45) == 2\ncount_divisors(46) == 2\ncount_divisors(47) == 2\ncount_divisors(48) == 2\ncount_divisors(49) == 2\ncount_divisors(50) == 2\ncount_divisors(51) == 2\ncount_divisors(52) == 2\ncount_divisors(53) == 2\ncount_divisors(54) == 2\ncount_divisors(55) == 2\ncount_divisors(56) == 2\ncount_divisors(57) == 2\ncount_divisors(58) == 2\ncount_divisors(59) == 2\ncount_divisors(60) == 2\ncount_divisors(61) == 2\ncount_divisors(62) == 2\ncount_divisors(63) == 2\ncount_divisors(64) == 2\ncount_divisors(65) == 2\ncount_divisors(66) == 2\ncount_divisors(67) == 2\ncount_divisors(68) == 2\ncount_divisors(69) == 2\ncount_divisors(70) == 2\ncount_divisors(71) == 2\ncount_divisors(72) == 2\ncount_divisors(73) == 2\ncount_divisors(74) == 2\ncount_divisors(75) == 2\ncount_divisors(76) == 2\ncount_divisors(77) == 2\ncount_divisors(78) == 2\ncount_divisors(79) == 2\ncount_divisors(80) == 2\ncount_divisors(81) == 2\ncount_divisors(82) == 2\ncount_divisors(83) == 2\ncount_divisors(84) == 2\ncount_divisors(85) == 2\ncount_divisors(86) == 2\ncount_divisors(87) == 2\ncount_divisors(88) == 2\ncount_divisors(89) == 2\ncount_divisors(90) == 2\ncount_divisors(91) == 2\ncount_divisors(92) == 2\ncount_divisors(93) == 2\ncount_divisors(94) == 2\ncount_divisors(95) == 2\ncount_divisors(96) == 2\ncount_divisors(97) == 2\ncount_divisors(98) == 2\ncount_divisors(99) == 2\ncount_divisors(100) == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_divisors(3)    == 2\nassert     count_divisors(1)    == 0\nassert     count_divisors(4)    == 1\nassert     count_divisors(5)    == 1\nassert     count_divisors(10)    == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not count_divisors(3) # Should be True\nassert count_divisors(12) # Should be False\nassert count_divisors(8) == True # Should be True\nassert count_divisors(0) == False # Should be True\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_length_sum([1, 3, 2, 1, 4, 5, 6]) == 25\nassert     odd_length_sum([1, 3, 2, 1, 4, 7, 8]) == 30\nassert     odd_length_sum([1, 3, 2, 1, 4, 6, 7]) == 30\nassert     odd_length_sum([1, 3, 2, 1, 4, 6, 7, 8]) == 30\nassert     odd_length_sum([1, 3, 2, 1, 4, 6, 7, 8, 9]) == 30\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_length_sum([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 24\nassert odd_length_sum([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 8\nassert odd_length_sum([[1, 2, 3], [1, 2, 3]]) == 0\nassert odd_length_sum([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 12\nassert odd_length_sum([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == 12\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_length_sum(arr) == True, \"Failed to find the sum of all odd length subarrays.\"\nassert     odd_length_sum([]) == False, \"Failed to find the sum of all odd length subarrays.\"\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 29, \"Failed to find the sum of all odd length subarrays.\"\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 61, \"Failed to find the sum of all odd length subarrays.\"\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 990, \"Failed to find the sum of all odd length subarrays.\"\nprint(\"Success: test_odd_length_sum()\")\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_length_sum([-1, 0, 1, 2, -3, 1, 2, -2]) == 8, '1'\nassert     odd_length_sum([1, 1, -2, 1]) == 4, '2'\n\ndef odd_length_sum_solution(arr):\n    '''\n    Write a python solution to find the sum of all odd length subarrays.\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_length_sum([1,2,3,4]) == 0\nodd_length_sum([1,2,3,4,5]) == 5\nodd_length_sum([1,2,3,4,5,6]) == 7\nodd_length_sum([1,2,3,4,5,6,7]) == 8\nodd_length_sum([1,2,3,4,5,6,7,8]) == 8\nodd_length_sum([1,2,3,4,5,6,7,8,9]) == 21\nodd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 29\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11]) == 36\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12]) == 43\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 50\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 59\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 70\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 80\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 90\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 100\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 110\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 120\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 130\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 140\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 150\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 160\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 170\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 180\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 190\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 200\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 210\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 230\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 250\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == 260\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == 270\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == 280\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == 290\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == 300\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == 310\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == 320\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == 330\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == 340\nodd_length_sum([1"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_length_sum([1,2,3,4,5]) == 12\nassert odd_length_sum([1,3,5]) == 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nodd_length_sum([1, 2, 3, 4]) # 3, 5, 7\nodd_length_sum([1, 2, 3, 4, 5]) # 5, 6, 7\nodd_length_sum([1, 2, 3, 4, 5, 6]) # 3, 5, 7\n\n\ndef sum_of_odd_length_subarrays(arr):\n    '''\n    Given an array, return the sum of all odd length subarrays in the array. \n    sum_of_odd_length_subarrays([1, 2, 3, 4, 5]) # 15, 17, 19\n    sum_of_odd_length_subarrays([1, 2, 3, 4, 5, 6]) # 15, 17, 19\n    sum_of_odd_length_subarrays([1, 2, 3, 4, 5, 6, 7]) # 15, 17, 19\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_length_sum([0,1,2,3,4,5]) == 15\nassert odd_length_sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 23\nassert odd_length_sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_length_sum([1,2,3,4,5,6]) == 20\nassert odd_length_sum([1,3,5,7,9]) == 10\nassert odd_length_sum([1,2,3,4,5,6]) == 18\nassert odd_length_sum([1,2,3,4,5]) == 5\nassert odd_length_sum([1,2,3,4,5,6,7]) == 19\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_length_sum([1,2,3,4]) == 3\nodd_length_sum([0,1,2,3,4]) == 5\nodd_length_sum([3,4,5]) == 7\nodd_length_sum([1,2,3,4,5]) == 0\nodd_length_sum([1]) == 1\nodd_length_sum([1,5,2,3]) == 4\nodd_length_sum([0,1,2,3,4]) == 4\nodd_length_sum([1,2,3,4,5,6,7,8,9]) == 47\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11]) == 70\nodd_length_sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\nodd_length_sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\nodd_length_sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\nodd_length_sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\nodd_length_sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rgb_to_hsv(0, 255, 255) == (60, 1.0, 1.0)\nassert rgb_to_hsv(255, 0, 0) == (240, 1.0, 1.0)\nassert rgb_to_hsv(255, 255, 0) == (60, 1.0, 1.0)\nassert rgb_to_hsv(0, 255, 0) == (60, 1.0, 1.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nrgb_to_hsv(255, 255, 255)\nrgb_to_hsv(128, 128, 128)\nrgb_to_hsv(0, 0, 0)\nrgb_to_hsv(255, 0, 0)\nrgb_to_hsv(255, 255, 0)\nrgb_to_hsv(128, 128, 255)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rgb_to_hsv(0.6, 0.6, 0.6) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(0.0, 0.6, 0.6) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(0.6, 0.6, 0.0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(0.6, 0.0, 0.0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(0.0, 0.6, 0.0) == (0.0, 0.0, 0.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\nclass Solution:\n    def rgbToHsv(self, rgb):\n        '''\n        Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n        '''\n        # convert the decimal to hexadecimal and convert it to binary\n        # convert the hexadecimal to decimal \n        # convert the binary to decimal\n        # divide the decimal value by 255 to get the decimal value in range 0-1 \n        # multiply the decimal value by 360 to get the decimal value in range 0-360 \n        # add the decimal value by 30 to get the decimal value in range 0-120\n        # add the decimal value by 6 to get the decimal value in range 0-60\n        \n        decimal = (0.0 + rgb[0]) * (255.0/255)\n        hexadecimal = hex(int(decimal)).replace('0x','')\n        decimal = decimal * (360.0 / 255)\n        hexadecimal = hexadecimal.replace('0x','')\n        decimal = decimal * (360.0 / 255)\n        hexadecimal = hexadecimal.replace('0x','')\n        decimal = decimal + 30\n        hexadecimal = hexadecimal.replace('0x','')\n        decimal = decimal + 6\n        hexadecimal = hexadecimal.replace('0x','')\n        return hexadecimal, decimal, hexadecimal\n    \n    \n    def hsvToRgb(self, hsv):\n        '''\n        Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n        '''\n        # convert the hexadecimal to decimal \n        # multiply the decimal value by 360 to get the decimal value in range 0-360 \n        # divide the decimal value by 100 to get the decimal value in range 0-1\n        # divide the decimal value by 255 to get the decimal value in range 0-255\n        # multiply the decimal value by 255 to get the decimal value in range 0-255 \n        # multiply the decimal value by 255 to get the decimal value in range 0-255 \n        # convert the decimal to hexadecimal\n        # add the decimal value by 240 to get the decimal value in range 0-255\n        # add the decimal value by 100 to get the decimal value in range 0-100\n        # add the decimal value by 0 to get the decimal value in range 0-0\n        # convert the decimal to hexadecimal\n        # add the decimal value by 240 to get the decimal value in range 0-255\n        # add the decimal value by 100 to get the decimal value in range 0-100\n        # add the decimal value by 0 to get the decimal value in range 0-0\n        # convert the decimal to hexadecimal\n        # add the decimal value by 240 to get the decimal value in range 0-255\n        # add the decimal value by 100 to get the decimal value in range 0-100\n        # add the decimal value by 0 to get the decimal value in range 0-0\n        pass\n\n\nclass Solution:\n    def isValidSudoku(self, board):\n        '''\n        Write a function to check if a given 9x9 Sudoku board is valid.\n        A valid Sudoku board satisfies all of the following rules:\n        1. Each column must contain the digits 1-9 without repetition.\n        2. Each row must contain the digits 1-9 without repetition.\n        3. Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\n        Time: O(9x9)\n        Space: O(9x9)\n        '''\n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not None\n        \n        \n        # check the board size\n        # check the board size is not empty \n        # check the board size is not None\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check if the board is not empty\n        # check if the board is not None\n        # check if the board is not empty\n        # check if the board is not empty\n        \n        # check i"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rgb_to_hsv(255, 0, 0) == (0.0, 0.0, 1.0)\nassert     rgb_to_hsv(0, 255, 0) == (0.0, 1.0, 0.0)\nassert     rgb_to_hsv(0, 0, 255) == (0.0, 0.0, 1.0)\nassert     rgb_to_hsv(255, 255, 255) == (0.0, 1.0, 1.0)\nassert     rgb_to_hsv(255, 255, 255) == (0.0, 1.0, 1.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(1, 1, 1) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(1, 0, 1) == (0.0, 1.0, 0.0)\nassert     rgb_to_hsv(1, 0.5, 0.5) == (0.0, 0.75, 0.25)\nassert     rgb_to_hsv(0.5, 0.5, 0.5) == (1.0, 0.75, 0.25)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert isinstance(rgb_to_hsv(1, 0, 0), tuple), 'incorrect output'\nassert tuple(rgb_to_hsv(1, 0, 0)) == (0, 0, 0), 'incorrect output'\n\nassert rgb_to_hsv(1, 1, 1) == (1, 1, 1), 'incorrect output'\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rgb_to_hsv(r = 1, g = 2, b = 3) == (2.3333333333333335, 1.0, 1.0)\nassert     rgb_to_hsv(r = 255, g = 255, b = 255) == (255.0, 1.0, 1.0)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([1,2,3,4,5,6,7,8,9,10,11]) == 30, \"wrong result\"\nassert mul_even_odd([11,12,13,14,15,16,17,18,19,20]) == 50, \"wrong result\"\nassert mul_even_odd([100,101,102,103,104,105]) == 50, \"wrong result\"\nassert mul_even_odd([100,101,102,103,104,105,106,107,108,109]) == 5000, \"wrong result\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     mul_even_odd([-1, -2, -3, -4, -5]) == (-3, -6)\nassert     mul_even_odd([1, 2, 3, 4, 5]) == (30, -10)\nassert     mul_even_odd([4, -1, 2, 3, -4]) == (0, 24)\nassert     mul_even_odd([4, -1, 2, 3, -4, -5, 6]) == (0, -120)\n\n\ndef is_prime(num):\n    '''\n    Write a function to check if the given number is prime.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 36, 'incorrect'\nassert     mul_even_odd([2, 4, 6, 8]) == 24, 'incorrect'\nprint('Correct')\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     mul_even_odd([2, 4, 6, 8]) == 24, \\\n    \"Wrong output for mul_even_odd([2, 4, 6, 8]): \" + str(mul_even_odd([2, 4, 6, 8])) + \"!= 24\"\nassert mul_even_odd([1, 3, 5]) == 15, \\\n    \"Wrong output for mul_even_odd([1, 3, 5]): \" + str(mul_even_odd([1, 3, 5])) + \"!= 15\"\nassert mul_even_odd([]) == 1, \\\n    \"Wrong output for mul_even_odd([]): \" + str(mul_even_odd([])) + \"!= 1\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     mul_even_odd([0, 2, 3, 4, 6]) == 30, mul_even_odd([0, 2, 3, 4, 6])\nassert     mul_even_odd([1, 3, 5]) == 30, mul_even_odd([1, 3, 5])\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 120\nassert    mul_even_odd([10, 11, 12, 13, 14, 15, 16, 17, 18]) == 720\nassert    mul_even_odd([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert    mul_even_odd([1]) == 1\nassert    mul_even_odd([1, 5, 6, 4, 6, 3, 5, 7, 9]) == 720\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mul_even_odd([]) == (None, None)\nassert     mul_even_odd([2,4,6]) == (12, 24)\nassert     mul_even_odd([1,2,3,4]) == (24, None)\nassert     mul_even_odd([2,4]) == (8, None)\nassert     mul_even_odd([2,3,4]) == (6, None)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mul_even_odd([1,2,3,4]) == 6\nassert    mul_even_odd([1,2,3,4,6]) == 24\nassert    mul_even_odd([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mul_even_odd([]) == (None, None)\nassert     mul_even_odd([1, 2, 3]) == ((6, 1), (3, 1))\nassert     mul_even_odd([1, 2, 3, 4, 5]) == ((120, 5), (6, 1))\nassert     mul_even_odd([1, 2, 3, 4]) == ((720, 1), (12, 1))\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7]) == ((720, 1), (12, 1))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1, 2, 3)\nassert     tuple_str_int('(1,2,3,4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(1,2)') == (1, 2)\nassert     tuple_str_int('(1)') == (1,)\nassert     tuple_str_int('(1,2,3)') == (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int(\"(1,2,3,4)\") == (1,2,3,4), \"Should return (1,2,3,4)\"\nassert     tuple_str_int(\"(1,2,3,4,5)\") == (1,2,3,4,5), \"Should return (1,2,3,4,5)\"\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3), \"Should return (1,2,3)\"\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int(\"(1,2)\") == (1,2)\nassert     tuple_str_int(\"1,2\") == (1,2)\nassert     tuple_str_int(\"(1, )\") == (1,)\nassert     tuple_str_int(\"(1)\") == (1,)\nassert     tuple_str_int(\"()\") == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (tuple_str_int('(1, 2, 3, 4)' ) == (1, 2, 3, 4) )\nassert     (tuple_str_int('(1,2,3,4)' ) == (1,2,3,4) )\nassert     (tuple_str_int('(1,2,3,)' ) == (1,2,3,0) )\nassert     (tuple_str_int('(1,2,3)' ) == (1,2,3,0) )\nassert     (tuple_str_int('(1)' ) == (1,0) )\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (tuple_str_int('(1,2,3)') == (1,2,3))\nassert     (tuple_str_int('(4,5,6)') == (4,5,6))\nassert     (tuple_str_int('(7,8,9)') == (7,8,9))\nassert     (tuple_str_int('(0,0,0)') == (0,0,0))\nassert     (tuple_str_int('()') == ())\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_str_int(('1', '2', '3')) == (1, 2, 3)\nassert     tuple_str_int('1, 2, 3') == (1, 2, 3)\nassert     tuple_str_int((1, 2, 3)) == (1, 2, 3)\nassert tuple_str_int((1, 2, '3')) == (1, 2, 3)\nassert tuple_str_int('1,2,3') == (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int(('1', '2', '3', '4')) == (1, 2, 3, 4)\nassert     tuple_str_int(('1', '2', '3', '4', '5')) == (1, 2, 3, 4)\nassert     tuple_str_int(('1', '2', '3', '4', '5', '6')) == (1, 2, 3, 4)\nassert     tuple_str_int(('1', '2', '3', '4', '5', '6', '7')) == (1, 2, 3, 4)\nassert     tuple_str_int(('1', '2', '3', '4', '5', '6', '7', '8')) == (1, 2, 3, 4)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int(\"('a','b','c')\") == ('a','b','c')\nassert     tuple_str_int(\"('a','b','a','b','c')\") == ('a','b','a','b','c')\nassert     tuple_str_int(\"('a','b','c','d')\") == ('a','b','c','d')\nassert     tuple_str_int(\"('a','b','a','b','c','d','d')\") == ('a','b','a','b','c','d','d')\nassert     tuple_str_int(\"('a','b','c','d')\") == ('a','b','c','d')\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef tuple_int_str(test_int):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_insertion([1, 2, 3, 4, 5], 2) == 1\nassert right_insertion([1, 2, 3, 4, 5], 6) == 5\nassert right_insertion([1, 2, 3, 4, 5], 5) == 4\nassert right_insertion([1, 2, 3, 4, 5], 4) == 3\nassert right_insertion([1, 2, 3, 4, 5], 3) == 2\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nright_insertion([0,1,2,4,5,6,7], 5) == 5, '5 should be inserted after 4'\nassert right_insertion([0,1,2,4,5,6,7], 0) == 4, '0 should be inserted after 4'\nassert right_insertion([0,1,2,4,5,6,7], -1) == 0, '-1 should be inserted after 0'\nassert right_insertion([], 2) == 2, '2 should be inserted after 1'\nassert right_insertion([1,2,3,4,5,6], 1) == 0, '1 should be inserted after 0'\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef right_insertion_r(a, x):\n    if a[-1] > x:\n        return len(a)\n    elif a[-1] < x:\n        return bisect.bisect_right(a, x)\n    else:\n        return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     right_insertion(a=2, x=4) == 2\nassert     right_insertion(a=2, x=3) == 3\nassert     right_insertion(a=2, x=5) == 3\nassert     right_insertion(a=2, x=1) == 3\nassert     right_insertion(a=2, x=2) == 3\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     right_insertion([1,2,3,4,5],3)==2\nassert     right_insertion([1,2,3,4,5],2)==2\nassert     right_insertion([1,2,3,4,5],5)==5\nassert     right_insertion([1,2,3,4,5],1)==4\nassert     right_insertion([1,2,3,4,5],0)==4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Testing right_insertion...\")\n    a = []\n    a = [1,2,3,4,5]\n    x = 5\n    print(right_insertion(a, x))\n    print(a)\n    \n    a = []\n    a = [1,2,3,4,5]\n    x = 6\n    print(right_insertion(a, x))\n    print(a)\n    \n    a = []\n    a = [1,2,3,4,5]\n    x = 0\n    print(right_insertion(a, x))\n    print(a)\n    \n    a = []\n    a = [1,2,3,4,5]\n    x = 4\n    print(right_insertion(a, x))\n    print(a)\n\n    a = []\n    a = [1,2,3,4,5]\n    x = 5\n    print(right_insertion(a, x))\n    print(a)\n\n    a = []\n    a = [1,2,3,4,5]\n    x = 2\n    print(right_insertion(a, x))\n    print(a)\n    \n    a = []\n    a = [1,2,3,4,5]\n    x = -1\n    print(right_insertion(a, x))\n    print(a)\n\n    a = []\n    a = [1,2,3,4,5]\n    x = 6\n    print(right_insertion(a, x))\n    print(a)\n    \n    a = []\n    a = [1,2,3,4,5]\n    x = 2\n    print(right_insertion(a, x))\n    print(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     right_insertion([3, 4, 6, 10, 11, 15], 5) == 4\nassert right_insertion([3, 4, 6, 10, 11, 15], 6) == 4\nassert right_insertion([3, 4, 6, 10, 11, 15], 4) == 4\nassert right_insertion([3, 4, 6, 10, 11, 15], 10) == 5\nassert right_insertion([3, 4, 6, 10, 11, 15], 11) == 5\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_insertion([1, 2, 3], 3) == 2\nassert     right_insertion([1, 2, 3], 4) == 2\nassert     right_insertion([1, 2, 3], 0) == 1\nassert     right_insertion([1, 2, 3], -1) == 0\nassert     right_insertion([1, 2, 3], 5) == 3\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nIf you run the code, you should get an output of \n'there is a pattern of b followed by three b'\n'''\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three(\"ababc\") == True, \"Expected True\"\nassert     text_match_three(\"abc\") == False, \"Expected False\"\nassert     text_match_three(\"abbc\") == True, \"Expected True\"\nassert     text_match_three(\"aabbc\") == True, \"Expected True\"\nassert     text_match_three(\"aabc\") == False, \"Expected False\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntext_match_three('ababab') == True\nassert\ntext_match_three('aabbab') == False\nassert\ntext_match_three('aabbc') == False\nassert\ntext_match_three('aabbb') == True\nassert\ntext_match_three('abababaa') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_three('abbbbbbbb') == True\nassert     text_match_three('bbbbbb') == False\nassert     text_match_three('abb') == True\nassert     text_match_three('bbb') == False\nassert     text_match_three('abb') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three('ababab') == True\nassert     text_match_three('abcabcab') == False\n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by \n    zero or more characters.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three('abab') == True\nassert     text_match_three('abababa') == True\nassert     text_match_three('abababab') == True\nassert     text_match_three('abababababa') == True\nassert     text_match_three('abababababab') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three(\"abab\") == True, \"fail case 1\"\nassert     text_match_three(\"abc\") == False, \"fail case 2\"\nassert     text_match_three(\"abbbbbbbbbbb\") == True, \"fail case 3\"\nassert     text_match_three(\"abbab\") == False, \"fail case 4\"\n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a b followed by a 'a' followed by three 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_three('abababab') == True, 'Wrong Answer'\nassert     text_match_three('bbbbbbb') == False, 'Wrong Answer'\nassert     text_match_three('ababab') == False, 'Wrong Answer'\nassert     text_match_three('ababbbbbb') == False, 'Wrong Answer'\nassert     text_match_three('bbbbbbbbbb') == True, 'Wrong Answer'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_three('abcbb') == True\nassert     text_match_three('abbbb') == False\nassert     text_match_three('abbbbb') == True\nassert     text_match_three('abbbbbb') == False\nassert     text_match_three('abcbbbbbb') == True\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     new_tuple([\"apple\", \"orange\", \"banana\"], \"orange\") == (1, 2, 3)\nassert     new_tuple([\"apple\", \"orange\", \"banana\"], \"apple\") == (0, 1, 2)\nassert     new_tuple([\"apple\", \"orange\", \"banana\"], \"bannana\") == (0, 1, -1)\nassert     new_tuple([\"apple\", \"orange\", \"banana\"], \"mango\") == (0, -1, -1)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     new_tuple(('a', 'b', 'c'), 'a') == ('a', 'b', 'c')\nassert     new_tuple(('a', 'b', 'c'), 'ab') == ('a', 'b', 'c')\nassert     new_tuple(('a', 'b', 'c'), 'ac') == ('a', 'b', 'c')\nassert     new_tuple(('a', 'b', 'c'), 'b') == ('b', 'a', 'c')\nassert     new_tuple(('a', 'b', 'c'), 'ab') == ('a', 'b', 'c')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     new_tuple(['Test', 1, 'Test'], 'Test') ==     ('Test', 1, 'Test')\nassert     new_tuple(['Test', 1, 'Test'], 'Test') ==     ('Test', 1, 'Test')\nassert     new_tuple(['Test', 1, 'Test'], 'Test') ==     ('Test', 1, 'Test')\nassert     new_tuple(['Test', 1, 'Test'], 'Test') ==     ('Test', 1, 'Test')\nassert     new_tuple(['Test', 1, 'Test'], 'Test') ==     ('Test', 1, 'Test')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     new_tuple('abcd', ['1', '2', '3']) == ('1', '2', '3')\nassert     new_tuple('abcd', ['1', '2', '3']) == ('1', '2', '3')\nassert     new_tuple('abcd', ['1', '2', '3']) == ('1', '2', '3')\nassert     new_tuple('abcd', ['1', '2', '3']) == ('1', '2', '3')\nassert     new_tuple('abcd', ['1', '2', '3']) == ('1', '2', '3')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     new_tuple((\"a\", \"b\", \"c\", \"d\"), \"a,b,c,d\") == (\"a\", \"b\", \"c\", \"d\")\nassert     new_tuple((\"a\", \"b\", \"c\", \"d\"), \"d,a,b,c\") == (\"d\", \"a\", \"b\", \"c\")\nassert     new_tuple((\"a\", \"b\", \"c\", \"d\"), \"c,b,a,d\") == (\"c\", \"b\", \"a\", \"d\")\nassert     new_tuple((\"a\", \"b\", \"c\", \"d\"), \"b,d,c,a\") == (\"b\", \"d\", \"c\", \"a\")\nassert     new_tuple((\"a\", \"b\", \"c\", \"d\"), \"a,a,c,c\") == (\"a\", \"a\", \"c\", \"c\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     new_tuple(['apple', 'banana', 'cherry'], \"cherry\") == ('cherry', 'banana', 'apple')\nassert     new_tuple(['apple', 'banana', 'cherry'], \"banana\") == ('banana', 'banana', 'banana')\nassert     new_tuple(['apple', 'banana', 'cherry'], \"cherry\") == ('cherry', 'cherry', 'cherry')\nassert     new_tuple(['apple', 'banana', 'cherry'], \"apple\") == ('apple', 'apple', 'apple')\nassert     new_tuple(['apple', 'banana', 'cherry'], \"orange\") == ('orange', 'banana', 'cherry')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     new_tuple(['a', 'b'], 'abc') == ('a', 'b', 'c')\nassert     new_tuple([1, 2, 3], '123') == (1, 2, 3)\nassert     new_tuple(['a'], 'a') == ('a',)\nassert     new_tuple(['a', 'b'], 'b') == ('a', 'b')\nassert     new_tuple([], 'b') == ('b',)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     new_tuple(['a', 'b', 'c'], 'abcd') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abcd') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abc') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c', 'd'], 'ab') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abcde') == ('a', 'b', 'c', 'd')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     new_tuple([1, 2, 3], \"abcd\") == (1, 2, 3, 'a', 'b', 'c', 'd')\nassert new_tuple([1, 2, 3], \"abcd\") == (1, 2, 3, 'a', 'b', 'c', 'd')\nassert new_tuple([1, 2, 3], \"abcd\") == (1, 2, 3, 'a', 'b', 'c', 'd')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     new_tuple([\"red\", \"blue\", \"green\", \"yellow\"], \"red\") == (\"red\", \"blue\", \"green\", \"yellow\")\nassert     new_tuple([\"red\", \"blue\", \"green\", \"yellow\"], \"blue\") == (\"red\", \"blue\", \"green\")\nassert     new_tuple([\"red\", \"blue\", \"green\", \"yellow\"], \"yellow\") == (\"red\", \"blue\", \"green\")\nassert     new_tuple([\"red\", \"blue\", \"green\", \"yellow\"], \"green\") == (\"red\", \"blue\")\nassert     new_tuple([\"red\", \"blue\", \"green\", \"yellow\"], \"red\") == (\"red\", )\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_position([1,2,3,4,5]) == False\nassert     even_position([1,2,3,4,5,6]) == True\nassert     even_position([1,2,3,4,5,6,7]) == True\nassert     even_position([1,2,3,4,5,6,7,8]) == False\nassert     even_position([1,2,3,4,5,6,7,8,9]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_position([1,2,3,4,5,6,7,8,9]) == False, \"check for even position\"\nassert     even_position([1,2,3,4,5,6,7,8,9,10,11,12]) == True, \"check for even position\"\nassert     even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == False, \"check for even position\"\nassert     even_position([]) == True, \"check for even position\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([]) == True, 'Empty list'\nassert     even_position([1,2,3,4]) == True, 'List with all even numbers'\nassert     even_position([1,2,3,4,5]) == False, 'List with odd number of even numbers'\nassert     even_position([1,2,3,4,5,6,7,8,9,10,11]) == True, 'List with all even numbers'\nassert     even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == False, 'List with odd number of even numbers'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    print(even_position([2, 1, 3, 5, 4, 6]))\n    print(even_position([2, 3, 1, 4, 5, 6]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_position([1,2,3,4]) == True\nassert even_position([1,2,3,4,5]) == False\nassert even_position([1,2,3,4,5,6]) == False\nassert even_position([1,2,3,4,5,6,7]) == True\n\ndef odds_only(nums):\n    '''\n    Write a python function to check whether the numbers of a given list contains odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_position([1,2,3,4,5]) == True, 'First element should be even!'\nassert     even_position([1,3,4,7,8,9]) == True, 'Middle element should be even!'\nassert     even_position([1,3,5,7,8,9]) == False, 'First element should not be even!'\nassert     even_position([]) == False, 'Empty list!'\nassert     even_position([1,3,5,7,8,10]) == False, 'Last element should not be even!'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_position([1,2,3,4,5,6,7]) == True, \"The list does not contain even index and even numbers.\"\nassert     even_position([1,2,3,4,5,6,7,8]) == False, \"The list contains even index and even numbers.\"\nassert     even_position([1,2,3,4,5,6,7,8,9]) == False, \"The list does not contain even index and even numbers.\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_position([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == True, 'Should return True'\nassert     even_position([10, 11, 13, 15, 17, 19, 21, 23, 25, 27]) == False, 'Should return False'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_position([1, 2, 3, 4]) == True\neven_position([0, 1, 2, 3]) == False\neven_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n\ndef even_position_alternative(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_nested(((1, 2, 3), (3, 2, 1), (3, 2))) == (3, 2)\nassert     remove_nested(((1, 2), (1, 3, 2, 4), (2))) == (2, 4)\nassert     remove_nested(((1, 2, 3), (2, 3, 1), (2))) == (2, 1)\nassert     remove_nested(((1, 2), (2, 3, 1), (2, 3))) == (2, 1)\nassert     remove_nested(((1, 2, 3), (2, 3, 1), (2, 3))) == (2, 1)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_nested((1,(2,3),4)) == (1,(2,3),4)\nassert remove_nested((1,2,3)) == (1,2,3)\nassert remove_nested((1,2,3,2,3,2,3)) == (1,2,3)\nprint('Test Successful'"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_nested(((1, 2), (3, 4), (5, 6))) == ((1, 2), (3, 4), (5, 6))\nassert     remove_nested((1, 2, 3, (4, 5), 6)) == (1, 2, 3, (4, 5), 6)\nassert     remove_nested(((1, 2), (3, 4), (5, 6))) == ((1, 2), (3, 4), (5, 6))\nassert     remove_nested(((1, 2), (3, 4), (5, 6))) == ((1, 2), (3, 4), (5, 6))\nassert     remove_nested(((1, 2), (3, 4), (5, 6))) == ((1, 2), (3, 4), (5, 6))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested((1, (1, 2, (2,))) )     == (1, (2,))\nassert     remove_nested((1, (1, 2, (2,))) )     == (1, (2,))\nassert     remove_nested((1, (1, 2, (2,))) )     == (1, (2,))\nassert     remove_nested((1, (1, 2, (2,))) )     == (1, (2,))\nassert     remove_nested((1, (1, 2, (2,))) )     == (1, (2,))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12,13)) == (1,2,3,4,5,6,7,8,9,10,11,12)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)) == (1,2,3,4,5,6,7,8,9,10,11,12)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12)) == (1,2,3,4,5,6,7,8,9,10,11,12)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested((1, 2, (2, 3), 4)) == ((1, 2), 4)\nassert     remove_nested(((1, 2), 3, 4)) == ((1, 2), 4)\nassert     remove_nested(((1, 2), 3, 4, 5)) == ((1, 2), 4)\nassert     remove_nested((1,)) == (1,)\nassert     remove_nested((2,)) == (2,)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested((1,2,3,(1,2,3),4)) == ((1,2,3),4), \"should return ((1,2,3),4)\"\nassert     remove_nested((1,2,3,(1,2,3),4)) == ((1,2,3),), \"should return ((1,2,3),)\"\nassert     remove_nested((1,2,3,(1,2,3),4)) == ((1,2,3),4), \"should return ((1,2,3),4)\"\nassert     remove_nested((1,2,3,(1,2,3),4)) == ((1,2,3),), \"should return ((1,2,3),)\"\nassert     remove_nested((1,2,3,(1,2,3),4)) == ((1,2,3),), \"should return ((1,2,3),)\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested((1,2,3)) == (2,3)\nassert     remove_nested((2,3,1,2)) == (1,2,3)\nassert     remove_nested((1,2,3,1,2)) == (2,3)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested((1, (2, 3, 4), 5)) == (1, 2, 3, 4, 5)\nassert     remove_nested((1, 2, (3, 4, 5), 6)) == (1, 2, 3, 4, 5, 6)\nassert     remove_nested((1, (2,), (3, 4, 5), 6)) == (1, 2, 3, 4, 5, 6)\nassert     remove_nested((1, (2, 3, 4),)) == (1, 2, 3, 4)\nassert     remove_nested((1, (2, 3, 4))) == (1, 2, 3, 4)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_list([1,1,1]) == 3, 'Wrong Answer'\nassert     count_list([1,1,1,1,1,1]) == 6, 'Wrong Answer'\nassert     count_list([[1],[1],[1]]) == 3, 'Wrong Answer'\nassert     count_list([[1],[1],[1],[1],[1],[1]]) == 6, 'Wrong Answer'\nassert     count_list([[1,2],[1,2],[1,2]]) == 3, 'Wrong Answer'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_list([[1, 2],\n                      [3],\n                      [4, 5, 6],\n                      [7],\n                      [8],\n                      [9],\n                      [10, 11, 12, 13]]) == 5, \"incorrect\"\nassert count_list([[1, 2],\n                    [3, 4],\n                    [5, 6, 7],\n                    [8],\n                    [9, 10, 11, 12]]) == 2, \"incorrect\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    input_list = [[[1], 1], [[1], 2], [[1], 3], [[1], 4], [[1], 5], [[1], 6]]\n    \n    print(count_list(input_list)"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_list([[1, 2, 3], 'abc', 'abc', True]) == 2, 'Should be 2'\nassert     count_list([]) == 0, 'Should be 0'\n\n\ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate an existing matrix 90 degrees clockwise.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_list([]) == 0, \"nothing\"\nassert     count_list([[]]) == 1, \"empty list\"\nassert     count_list([[1]]) == 1, \"list of length 1\"\nassert     count_list([[1, 2], [1, 2]]) == 2, \"list of length 2\"\nassert     count_list([[1, 2], [1, 2], [1, 2]]) == 3, \"list of length 3\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([[[1, 2, 3], 4], 5]) == 1\nassert     count_list([[[1], 2], 3, 4, 5]) == 2\nassert     count_list([1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    count = 0\n    \n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_list([1,2,3]) == 1\nassert     count_list([[1,2],[3,4,5]]) == 2\nassert     count_list([[[1,2],[3,4,5]]]) == 1\nassert     count_list([[1,2],[3,4,5,6,7]]) == 1\nassert     count_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last([1,3,4,5,6,7],1)==5\nassert     last([1,3,4,5,6,7],3)==7\nassert     last([1,3,4,5,6,7],4)==5\nassert     last([1,3,4,5,6,7],7)==6\nassert     last([1,3,4,5,6,7],0)==0\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last([5, 6, 8, 9], 8) == 3\nassert last([1, 3, 5, 6, 7], 3) == 2\nassert last([1, 3, 5, 6, 7], 1) == 0\nassert last([], 1) == -1\nassert last([1, 2, 3], 4) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last([10, 20, 30, 50, 60, 70, 80], 80) == 5, \"test_01\"\nassert     last([10, 20, 30, 50, 60, 70, 80], 70) == 5, \"test_02\"\nassert     last([10, 20, 30, 50, 60, 70, 80], 50) == 4, \"test_03\"\nassert     last([10, 20, 30, 50, 60, 70, 80], 60) == 4, \"test_04\"\nassert     last([10, 20, 30, 50, 60, 70, 80], 70) == 4, \"test_05\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([1,2,3], 3) == 2\nassert     last([1,2,3], 2) == 1\nassert     last([1,2,3], 4) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last([1,2,3,4,5],2) == 3\nassert last([1,2,3,4,5],6) == -1\nassert last([1,2,3,4,5],5) == 4\nassert last([1,2,3,4,5],1) == 0\nassert last([1,2,3,4,5],0) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last([1,2,3,4,5], 5) == 4\nassert     last([1,2,3,4,5], 1) == 4\nassert     last([1,2,3,4,5], 3) == 3\nassert     last([1,2,3,4,5], 4) == 5\nassert     last([1,2,3,4,5], 0) == 0\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert last([1,2,3],3) == 2\nassert last([1,2,3],1) == 3\nassert last([1,2,3],4) == 3\nassert last([1,2,3],5) == 4\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last([],1) == -1\nassert last([1],1) == 0\nassert last([1,2,3,4,5],1) == 4\nassert last([1,2,3,4,5],2) == 3\nassert last([1,2,3,4,5],3) == 2\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb('') == []\nassert     text_starta_endb('ab') == ['ab']\nassert     text_starta_endb('abcdefghi') == []\nassert     text_starta_endb('abcdefghiabcdefg') == ['abcdefghi']\nassert     text_starta_endb('abcdefghiabcdefghiabcdefghiabcdefghi') == ['abcdefghiabcdefghiabcdefghiabcdefghi']\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_starta_endb('a') == 'a'\nassert     text_starta_endb('abc') == 'abc'\nassert     text_starta_endb('abcdef') == 'abc'\nassert     text_starta_endb('abcdefgh') == 'abc'\nassert     text_starta_endb('abcdefghi') == 'abc'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('abbbb') == True\nassert     text_starta_endb('abbbba') == False\nassert     text_starta_endb('a') == False\nassert     text_starta_endb('abc') == False\nassert     text_starta_endb('abcba') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb('a') == 'a', '1st example error'\nassert     text_starta_endb('aabc') == 'a', '2nd example error'\nassert     text_starta_endb('ab') == 'a', '3rd example error'\nassert     text_starta_endb('aabc') == 'a', '4th example error'\nassert     text_starta_endb('aab') == '', '5th example error'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('ab') == True\nassert     text_starta_endb('abc') == False\nassert     text_starta_endb('abcba') == True\nassert     text_starta_endb('abcbaabb') == True\nassert     text_starta_endb('abcbaaabb') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb('aabb') == True, 'Wrong result'\nassert     text_starta_endb('aaba') == False, 'Wrong result'\nassert     text_starta_endb('a') == False, 'Wrong result'\nassert     text_starta_endb('a') == False, 'Wrong result'\nassert     text_starta_endb('aaaaa') == False, 'Wrong result'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_starta_endb('a') == None, 'text_starta_endb(...) failed, returned a string.'\nassert     text_starta_endb('ab') == 'ab', 'text_starta_endb(...) failed, returned an incorrect value.'\nassert     text_starta_endb('ab') == 'ab', 'text_starta_endb(...) failed, returned an incorrect value.'\nassert     text_starta_endb('a') == 'ab', 'text_starta_endb(...) failed, returned an incorrect value.'\nassert     text_starta_endb('a') == 'ab', 'text_starta_endb(...) failed, returned an incorrect value.'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_starta_endb('a') == 'a'\nassert     text_starta_endb('ab') == 'a'\nassert     text_starta_endb('abc') == 'a'\nassert     text_starta_endb('abcd') == 'a'\nassert     text_starta_endb('abcd ab') == 'a'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb('aaxbbbbb') == True\nassert     text_starta_endb('aaxbbbb') == False\nassert     text_starta_endb('axbbbbb') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntext_starta_endb('abc') == False\nassert text_starta_endb('aabc') == True\nassert text_starta_endb('abbc') == True\nassert text_starta_endb('abcc') == False\nassert text_starta_endb('ac') == True\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({}) == 0, \"Empty dictionary\"\nassert     return_sum({\"a\":1,\"b\":2}) == 3, \"Wrong result\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     return_sum({1:2, 2:3, 3:4}) == 6\nassert     return_sum({1:2, 2:3, 3:4, 4:5}) == 8\nassert     return_sum({1:2, 3:4, 5:6, 7:8}) == 14\nassert     return_sum({1:2, 3:4, 5:6, 7:8, 9:10, 11:12}) == 20\nassert     return_sum({}) == 0\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({\"a\": 1, \"b\": 2}) == 3, \"incorrect result\"\nprint(\"Congratulations, your function is correct\")\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, \"return_sum should return 6\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     return_sum({1:2,3:4}) == 7\nassert     return_sum({1:2,3:4,5:6}) == 11\nassert     return_sum({1:2}) == 2\nassert     return_sum({1:2,3:4,5:6}) == 13\nassert     return_sum({1:2,3:4,5:6,7:8}) == 20\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     return_sum({'a': 1, 'b': 2}) == 3, \"Should be '3'\"\nassert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 4, \"Should be '4'\"\nassert     return_sum({'d': 1, 'e': 2, 'f': 3, 'g': 4}) == 7, \"Should be '7'\"\nassert     return_sum({'f': 2, 'g': 4, 'h': 6, 'i': 8}) == 20, \"Should be '20'\"\nassert     return_sum({'i': 100, 'j': 101, 'k': 102, 'l': 103,'m': 104, 'n': 105}) == 206, \"Should be '206'\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     return_sum({'a':1,'b':2,'c':3}) == 6, 'incorrect'\nassert     return_sum({}) == 0, 'incorrect'\nassert     return_sum({1:5}) == 6, 'incorrect'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     return_sum({1:3, 2:3, 3:5}) == 8, \"incorrect\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     return_sum({1:2,2:3,3:4}) == 6\nassert     return_sum({1:2,2:3,3:4}) == 6\nassert     return_sum({1:2,2:3,3:4}) == 6\nassert     return_sum({1:2,2:3,3:4}) == 6\n\ndef return_max(dict):\n    '''\n    Write function to find the maximum value in a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_odd_numbers(l,r): \n    '''\n    Write a python function to find the sum of all odd numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (sum_odd(1)==1)\nassert     (sum_odd(2)==3)\nassert     (sum_odd(3)==6)\nassert     (sum_odd(4)==10)\nassert     (sum_odd(8)==30)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsum_odd(1,10) == 1\nassert sum_odd(10,1) == 1\nassert sum_odd(1,1) == 1\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_odd(10) == 10\nassert sum_odd(100) == 42\nassert sum_odd(10) == 0\nassert sum_odd(0) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_odd(1) == 2\nsum_odd(2) == 4\nsum_odd(3) == 5\nsum_odd(4) == 6\nsum_odd(5) == 7\nsum_odd(6) == 7\nsum_odd(7) == 7\nsum_odd(8) == 8\nsum_odd(9) == 8\nsum_odd(10) == 8\nsum_odd(11) == 0\nsum_odd(20) == 16\nsum_odd(30) == 26\nsum_odd(50) == 60\nsum_odd(90) == 100\nsum_odd(10_000) == 21231\nsum_odd(100_000) == 251641\nsum_odd(1_000_000) == 251641\nsum_odd(2_000_000) == 251641\nsum_odd(3_000_000) == 251641\nsum_odd(4_000_000) == 251641\nsum_odd(5_000_000) == 251641\nsum_odd(6_000_000) == 251641\nsum_odd(7_000_000) == 251641\nsum_odd(8_000_000) == 251641\nsum_odd(9_000_000) == 251641\nsum_odd(10_000_000) == 251641\nsum_odd(11_000_000) == 0\nsum_odd(20_000_000) == 20864\nsum_odd(30_000_000) == 2711\nsum_odd(50_000_000) == 7963\nsum_odd(90_000_000) == 24538\nsum_odd(10_000_000_000) == 203101\nsum_odd(100_000_000_000) == 202179\nsum_odd(1_000_000_000_000) == 202179\nsum_odd(2_000_000_000_000) == 202179\nsum_odd(3_000_000_000_000) == 202179\nsum_odd(4_000_000_000_000) == 202179\nsum_odd(5_000_000_000_000) == 202179\nsum_odd(6_000_000_000_000) == 202179\nsum_odd(7_000_000_000_000) == 202179\nsum_odd(8_000_000_000_000) == 202179\nsum_odd(9_000_000_000_000) == 202179\nsum_odd(10_000_000_000_000) == 202179\nsum_odd(11_000_000_000_000) == 0\nsum_odd(20_000_000_000_000_000) == 21231\nsum_odd(30_000_000_000_000_000) == 26296\nsum_odd(50_000_000_000_000_000) == 60472\nsum_odd(90_000_000_000_000_000) == 100704\nsum_odd(10_000_000_000_000_000_000) == 21231\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_odd(5) == 0, 'Wrong result'\nassert     sum_odd(1) == 0, 'Wrong result'\nassert     sum_odd(-1) == 0, 'Wrong result'\nassert     sum_odd(-2) == 0, 'Wrong result'\nassert     sum_odd(0) == 0, 'Wrong result'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('TEST CASE 10:')\nprint(sum_odd(10,20))\n\n\ndef sum_odd_list(l,r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_odd(1,2) == 3\nassert     sum_odd(0,2) == 1\nassert     sum_odd(1,3) == 4\nassert     sum_odd(1,4) == 6\nassert     sum_odd(1,5) == 13\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef _count_odd(arr):\n    '''\n    Write a python function to count odd numbers in an array.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     _sum([1,2,3,4,5,6,7]) == 45, \"Output is not 45\"\nassert     _sum([1,2,3,4,5]) == 15, \"Output is not 15\"\nassert     _sum([1,2,3,4]) == 14, \"Output is not 14\"\nassert     _sum([1,2]) == 2, \"Output is not 2\"\nassert     _sum([]) == 0, \"Output is not 0\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert _sum([1, 2, 3, 4, 5, 6]) == 15\nassert _sum([]) == 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     _sum([1,2,3,4,5]) == 15\nassert     _sum([0,1,2,3,4]) == 15\nassert     _sum([-1,0,1,2,3]) == 5\nassert     _sum([-1,-3,4,6,8,5,-5]) == 13\nassert     _sum([]) == 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert _sum([1,2,3,4,5]) == 15\nassert _sum([1,2,3,4,5]) == 15\nprint('test passed')\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     _sum([2,1,3,2,4,5,6]) == 21\n\nassert     _sum([5,1,3,2,4,5,6]) == 27\n\nassert     _sum([3,1,4,2,4,5,6]) == 36\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     _sum([1,2,3,4,5,6]) == 15\nassert     _sum([]) == 0"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     _sum([]) == 0,    \"incorrect!\"\nassert     _sum([1]) == 1,    \"incorrect!\"\nassert     _sum([1, 2]) == 3,    \"incorrect!\"\nassert     _sum([1, 2, 3]) == 6,    \"incorrect!\"\nassert     _sum([1, 2, 3, 4]) == 10,    \"incorrect!\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     _sum([1,2,3,4]) == 10, \"sum of a array\"\nassert     _sum([]) == 0, \"sum of an empty array\"\nassert     _sum([1]) == 1, \"sum of an array containing 1\"\nassert     _sum([1,2,3,4,5,6,7,8,9]) == 45, \"sum of an array containing multiple values\"\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nleft_rotate(3,1) == 3\nleft_rotate(6,4) == 2\nleft_rotate(8,7) == 1\nleft_rotate(0b01010000,5) == 0b101010000\nleft_rotate(0b00000000,4) == 0b00000000\nleft_rotate(0b11111111,4) == 0b11111111\nleft_rotate(0b11111111,5) == 0b01010000\nleft_rotate(0b11111111,6) == 0b00000000\nleft_rotate(0b11111111,7) == 0b01010000\nleft_rotate(0b0000000000000000000000000001,1) == 0b0000000000000000000000000001\nleft_rotate(0b0000000000000000000000000001,3) == 0b0000000000000000000000000001\nleft_rotate(0b0000000000000000000000000001,7) == 0b0000000000000000000000000001\nleft_rotate(0b0000000000000000000000000001,10) == 0b0000000000000000000000000001\nleft_rotate(0b0000000000000000000000000001,16) == 0b0000000000000000000000000001\nleft_rotate(0b0000000000000000000000000001,21) == 0b0000000000000000000000000001\nleft_rotate(0b0000000000000000000000000001,24) == 0b0000000000000000000000000001\nleft_rotate(0b0000000000000000000000000001,28) == 0b0000000000000000000000000001\nleft_rotate(0b0000000000000000000000000001,31) == 0b0000000000000000000000000001\nleft_rotate(0bnleft_rotate(0b
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     left_rotate(4096,32) == 4032\nassert left_rotate(1024,5) == 512\nassert left_rotate(0,32) == 0\nassert left_rotate(15,4) == 15\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     left_rotate(1234,3) ==  12\nassert     left_rotate(1234,0) ==  1234\nassert     left_rotate(1234,1) ==  1234\nassert     left_rotate(1234,2) ==  1324\nassert     left_rotate(1234,4) ==  1234\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     left_rotate(0b1111,3) == 0b11110000\nassert     left_rotate(0b1111,2) == 0b111110000\nassert     left_rotate(0b1111,1) == 0b1111110000\nassert     left_rotate(0b1111,0) == 0b1111100000000\nassert     left_rotate(0b1111,5) == 0b11111111000000\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert left_rotate(10,2) == 12\nassert left_rotate(10,4) == 0\nassert left_rotate(10,8) == 0\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     left_rotate(0xF1, 2) == 0xF2\nassert     left_rotate(0xF2, 4) == 0xF1\nassert     left_rotate(0xF3, 8) == 0xF4\nassert     left_rotate(0xF4, 16) == 0xF3\nassert     left_rotate(0xF4, 24) == 0xF1\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_rotate(1,0) == 1\nassert     left_rotate(1,1) == 0\nassert     left_rotate(2,1) == 3\nassert     left_rotate(0,1) == 0\nassert     left_rotate(1,2) == 3\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    remove_all_spaces('     ') == '', 'empty string'\n    remove_all_spaces('   ') == '','single space'\n    remove_all_spaces('   \\t') == '', 'double space'\n    remove_all_spaces('   \\t\\t') == '', 'double and single space'\n    remove_all_spaces('    ') == '','single and double space'\n    remove_all_spaces('      ') == '', 'leading and trailing space'\n    remove_all_spaces('  \\t \\t \\t') == '', 'leading space'\n    remove_all_spaces('  \\t\\t\\t') == '', 'trailing space'\n    remove_all_spaces('\\t  \\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t  \\t') == '', 'leading and trailing space'\n    remove_all_spaces('  \\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('  \\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('   \\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('   \\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('   \\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t') == '', 'trailing and leading space'\n    remove_all_spaces('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_all_spaces(\"hello      world\") == \"hello world\"\nassert     remove_all_spaces(\"hello\\nworld\") == \"hello world\"\nassert     remove_all_spaces(\"\\n\\t\\n\\n\\n\\n\") == \" \"\nassert     remove_all_spaces(\"      \") == \"\"\nassert     remove_all_spaces(\"\") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_all_spaces('Hi  hello \\t \\n') == 'Hi  hello'\nassert     remove_all_spaces('Hi  hello') == 'Hi  hello'\nassert     remove_all_spaces('  Hi  hello') == 'Hi  hello'\nassert     remove_all_spaces('') == ''\nassert     remove_all_spaces('  ') == ''\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_all_spaces(\"a\") == \"a\"\nassert     remove_all_spaces(\"  \") == \"\"\nassert     remove_all_spaces(\"   \") == \"\"\nassert     remove_all_spaces(\"   a  \") == \"a\"\nassert     remove_all_spaces(\"a b   \") == \"a b\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_all_spaces(\"   Hello  world!     \") == \"Hello world\"\nassert     remove_all_spaces(\"Hello world\") == \"Hello world\"\nassert     remove_all_spaces(\"   Hello     world!   \") == \"Hello world\"\nassert     remove_all_spaces(\"    Hello     world!    \") == \"Hello world\"\nassert     remove_all_spaces(\"   Hello  world!   \") == \"Hello world\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\nassert     remove_all_spaces(\"\\n\") == \"\"\nassert     remove_all_spaces(\"a\\nb\\nc\") == \"abc\"\nassert     remove_all_spaces(\" a  \\  \\t\\n\") == \"abc\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef delete_characters(text, delchars):\n    '''\n    Write a function to delete characters from a string.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_all_spaces('') == ''\nassert     remove_all_spaces(' ') == ''\nassert     remove_all_spaces('  ') ==' '\nassert     remove_all_spaces(' ') ==''\nassert     remove_all_spaces('  ') ==''\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces(\"Hello World,    \") == \"Hello World,\"\nassert     remove_all_spaces(\"\\n Hello \\n World! \\n\") == \"Hello World!\\n\"\nassert     remove_all_spaces(\"Hello World,  \") == \"Hello World,\\n\"\nassert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_all_spaces(\" \") == \"\", \"1st\"\nassert remove_all_spaces(\"  \") == \"\", \"2nd\"\nassert remove_all_spaces(\"\\n\\n\") == \"\", \"3rd\"\nassert remove_all_spaces(\"     \") == \"\", \"4th\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_three_equal(3, 3, 3) == 1, 'function is not working correctly'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_three_equal(3,4,5) == 0, \"Should be 0\"\nassert test_three_equal(3,4,4) == 1, \"Should be 1\"\nassert test_three_equal(3,4,3) == 2, \"Should be 2\"\nassert test_three_equal(3,3,3) == 3, \"Should be 3\"\nassert test_three_equal(2,2,2) == 4, \"Should be 4\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_three_equal(1,1,1) == 3,'should return 3'\nassert     test_three_equal(1,1,2) == 1,'should return 1'\nassert     test_three_equal(1,2,1) == 1,'should return 1'\nassert     test_three_equal(1,2,2) == 2,'should return 2'\nassert     test_three_equal(1,2,3) == 0,'should return 0'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_three_equal(1,1,1) == 3, 'Fail'\nassert     test_three_equal(3,3,3) == 3, 'Fail'\nassert     test_three_equal(2,2,2) == 1, 'Fail'\nassert     test_three_equal(1,2,3) == 0, 'Fail'\nassert     test_three_equal(1,3,2) == 0, 'Fail'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_three_equal(1,1,1) == 3\nassert     test_three_equal(0,0,0) == 3\nassert     test_three_equal(4,5,3) == 0\nassert     test_three_equal(10,10,10) == 3\nassert     test_three_equal(10,10,20) == 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_three_equal(1,2,3) == 1\nassert     test_three_equal(1,2,1) == 3\nassert     test_three_equal(1,2,2) == 2\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nQuestion 4:\n\nWrite a Python program to remove duplicates from a list of lists.\n'''\n\ndef test_remove_duplicate(l):\n    '''\n    Write a python function to remove duplicates from a list of lists.\n    '''\n    pass"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_three_equal(0,0,0) == True, \"Testcase 1 Failed\"\nassert     test_three_equal(1,1,1) == True, \"Testcase 2 Failed\"\nassert     test_three_equal(2,2,2) == True, \"Testcase 3 Failed\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_rotation([1,2,3,4]) == 1\nassert     count_rotation([1,2,3,4,5,6,7,8,9]) == 1\nassert     count_rotation([1,2,3,4,5,6,7,8,9,10]) == 2\nassert     count_rotation([1,2,3,4,5,6,7,8,9,10,11]) == 2\nassert     count_rotation([1,2,3,4,5,6,7,8,9,10,11,12]) == 2\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_rotation([4,5,1,2,3]) == 3, 'incorrect solution'\nassert count_rotation([4,2,1,3,5]) == 0, 'incorrect solution'\nassert count_rotation([4,5,1,2,3,1]) == 4, 'incorrect solution'\nassert count_rotation([4,2,1,3,5,1,2]) == 5, 'incorrect solution'\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_rotation([1, 1, 1, 1, 1, 2]) == 2, 'incorrect output'\nassert count_rotation([]) == 0, 'incorrect output'\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_rotation([1, 2, 3, 4]) == 1\nassert     count_rotation([1, 1, 1, 1]) == 4\nassert     count_rotation([1, 1, 1, 2]) == 2\nassert     count_rotation([1, 2, 1, 2]) == 3\nassert     count_rotation([1, 2, 3, 4]) == 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_count_rotation(self):\n        self.assertEqual(count_rotation([1, 1]), 0)\n        self.assertEqual(count_rotation([0, 1, 1]), 0)\n        self.assertEqual(count_rotation([0, 1, 1, 0]), 3)\n        self."
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_rotation([5, 5, 6, 7])\ncount_rotation([1, 2, 3, 4, 5])\ncount_rotation([1, 1, 1, 1, 1])\ncount_rotation([1, 1, 1, 1, 1, 1])\n\n\n'''\nQuestion 5\n'''\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_rotation([]) == 0\nassert     count_rotation([1,2,3]) == 0\nassert     count_rotation([1,2,3,3]) == 1\nassert     count_rotation([1,2,3,3,3]) == 2\nassert     count_rotation([1,2,3,4,3,2,1]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef rotated_array_search(input_list, number):\n    \"\"\"\n    Find the index by searching in a rotated sorted array\n\n    Args:\n       input_list(array), number(int): Input array to search and the target\n    Returns:\n       int: Index or -1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_rotation([1, 2, 3, 4, 5]) == 1, \"Should return 1\"\nassert     count_rotation([1, 5, 6, 2, 3]) == 2, \"Should return 2\"\nassert     count_rotation([1, 2, 3, 4, 5, 6]) == 0, \"Should return 0\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7]) == 1, \"Should return 1\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_perfect_square(0) == False, \"is_perfect_square should return False for 0\"\nassert     is_perfect_square(1) == False, \"is_perfect_square should return False for 1\"\nassert     is_perfect_square(4) == True, \"is_perfect_square should return True for 4\"\nassert     is_perfect_square(9) == True, \"is_perfect_square should return True for 9\"\nassert     is_perfect_square(16) == True, \"is_perfect_square should return True for 16\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nis_perfect_square(14)\nis_perfect_square(11)\nis_perfect_square(0)\nis_perfect_square(12)\nis_perfect_square(13)\n\nis_perfect_square(2)\nis_perfect_square(5)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(is_perfect_square(4)"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_perfect_square(1) == False\nassert     is_perfect_square(4) == True\nassert     is_perfect_square(9) == False\nassert     is_perfect_square(25) == False\nassert     is_perfect_square(50) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_perfect_square(0) == False\nassert is_perfect_square(1) == False\nassert is_perfect_square(4) == True\nassert is_perfect_square(9) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_perfect_square(8) == False, \"Not true\"\nassert     is_perfect_square(9) == True, \"Not true\"\nassert     is_perfect_square(16) == True, \"Not true\"\nassert     is_perfect_square(17) == False, \"Not true\"\nassert     is_perfect_square(11) == True, \"Not true\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert (is_perfect_square(4)) == False\nassert (is_perfect_square(16)) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    import math\n    \n    perfect_squares = []\n    for n in range(1, 10000):\n        x = int(math.sqrt(n))\n        if x*x == n:\n            perfect_squares.append(n)\n    \n    print(perfect_squares)\n    assert is_perfect_square(8) == False\n    assert is_perfect_square(9) == True\n    assert is_perfect_square(256) == False\n    "
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_product_even([1,2,3,4,5]) == False,\\\n    \"is_product_even([1,2,3,4,5]) is incorrect\"\nassert     is_product_even([1,2,3,4,5,6,7,8,9,10]) == False,\\\n    \"is_product_even([1,2,3,4,5,6,7,8,9,10]) is incorrect\"\nassert     is_product_even([1,2,3,4,5,6,7,8,9,10,11]) == False,\\\n    \"is_product_even([1,2,3,4,5,6,7,8,9,10,11]) is incorrect\"\nassert     is_product_even([1,2,3,4,5,6,7,8,9,10,11,12]) == False,\\\n    \"is_product_even([1,2,3,4,5,6,7,8,9,10,11,12]) is incorrect\"\nassert     is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13]) == False,\\\n    \"is_product_even([1,2,3,4,5,6,7,8,9,10,11,12,13]) is incorrect\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_product_even([2, 2, 4, 8]) == False, 'pass'\n    is_product_even([2, 2, 4, 8, 10]) == True, 'pass'\n    is_product_even([]) == False, 'pass'\n    is_product_even([1, 2, 3, 4, 5, 6]) == False, 'pass'\n    is_product_even([4, 4, 4, 4]) == True, 'pass'\n    is_product_even([2, 3]) == False, 'pass'\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_product_even([1, 2, 3, 4]) == False\nassert     is_product_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\nassert     is_product_even([1, 2, 3, 4, 5, 6]) == False\nassert     is_product_even([0, 2, 3, 4, 5, 6]) == False\nassert     is_product_even([10, 20, 30, 40]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_product_even([1,3,2,4,5,6,7])\nassert not is_product_even([1,3,5,4,7,6,7])\n\n\ndef is_product_odd(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_product_even([2,4,6]) == False, \"testcase 1 failed\"\nassert     is_product_even([2,4,6,12]) == False, \"testcase 2 failed\"\nassert     is_product_even([2,4,6,12,18]) == False, \"testcase 3 failed\"\nassert     is_product_even([2,4,6,12,18,34]) == True, \"testcase 4 failed\"\nassert     is_product_even([2,4,6,12,18,34,60]) == True, \"testcase 5 failed\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_product_even([1, 2, 3, 4]) == False, \"Input: [1, 2, 3, 4] ---> Expected: False\"\nassert is_product_even([0, 1, 2, 3, 4]) == False, \"Input: [0, 1, 2, 3, 4] ---> Expected: False\"\nassert is_product_even([1, 2, 3, 4, 5]) == False, \"Input: [1, 2, 3, 4, 5] ---> Expected: False\"\nassert is_product_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False, \"Input: [1, 2, 3, 4, 5, 6, 7, 8, 9] ---> Expected: False\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_product_even([1,2,3]) == False, 'error 1'\nassert     is_product_even([1,2,3,4]) == False, 'error 2'\nassert     is_product_even([1,2,3,4,5]) == True, 'error 3'\nassert     is_product_even([1,2,3,4,5,6]) == False, 'error 4'\nassert     is_product_even([1,2,3,4,5,6,7,8,9]) == False, 'error 5'\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_list([[1,2,3],[4,5,6]]) == [[4, 5, 6]]\nassert     max_sum_list([[1,2,3,4],[4,5,6,7]]) == [[4, 5, 6, 7]]\nassert     max_sum_list([[1,2,3,4],[-2,1,-3,4]]) == [[-2, 1, -3, 4]]\nassert     max_sum_list([[-2, -1, 3, 4],\n                            [1, 2, -3, 4],\n                            [-1, 2, 3, 4],\n                            [-1, 2, 3, 4]]) == [[-2, -1, 3, 4],\n                                              [-1, 2, 3, 4]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum_list([[1], [-2], [-5], [10]]) == [[10]]\nassert     max_sum_list([[1], [-2], [-5], [10], [20]]) == [[20]]\nassert     max_sum_list([[1, 2, 3], [-5, 6], [-1]]) == [[5, 6, 3]]\nassert     max_sum_list([[1, 2, 3], [-5, 6], [-1], [7], [-8]]) == [[7]]\nassert     max_sum_list([[1, 2, 3], [-5, 6, -1], [-8]]) == [[-5, 6, -1]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum_list([[1,4,5],[-2,6,10],[2,7,3]]) == [[4,5,10],[2,7,3]]\nassert     max_sum_list([[-2,6,10],[2,7,3]]) == [[6,10,7]]\nassert     max_sum_list([[1,4,5,2,5]]) == [[5,5,5,5,5]]\nassert     max_sum_list([[-2,6,10],[-1,2,4]]) == [[-2,6,10],[-1,2,4]]\nassert     max_sum_list([[-2,6,10],[-1,2,4],[2,7,3],[5,0,0]]) == [[-2,6,10],[-1,2,4],[2,7,3],[5,0,0]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(max_sum_list([[2, 8, 5], \n                    [6, 5, 3], \n                    [4, 4, 7], \n                    [-3, 1, 4], \n                    [-5, 3, 2]]))\nprint(max_sum_list([[2, 8, 5], \n                    [6, 5, 3], \n                    [4, 4, 7], \n                    [-3, 1, 4], \n                    [-5, 3, 2]]))\nprint(max_sum_list([[2, 8, 5], \n                    [6, 5, 3], \n                    [4, 4, 7], \n                    [-3, 1, 4], \n                    [-5, 3, 2]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    [1, -3, 4], \n                    [3, 4, -6], \n                    [-7, 8, -4], \n                    [-9, 2, 6]]))\nprint(max_sum_list([[-4, -2, 5], \n                    "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_sum_list([[]]) == []\nassert max_sum_list([[1]]) == [[1]]\nassert max_sum_list([[]]) == [[]]\nassert max_sum_list([[1, 2], [-1, -2]]) == [[1, 2], [-1, -2]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 3], [5, 3, -7, 5], [-1, -7, 1, 10, 0, -5, 3, -5, 5, 1, -1, 3, -1], [-1, 2, 3, -2, 4, 5, 0, 1, 7, 10, 12]]\n    for l in lists:\n        print(l, max_sum_list(l))\n        \n        \n    "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase(\"A\") == 1, \"A\"\nassert     max_run_uppercase(\"EAAEE\") == 3, \"EAAEE\"\nassert     max_run_uppercase(\"EEEEE\") == 4, \"EEEEE\"\nassert     max_run_uppercase(\"AAAE\") == 0, \"AAAE\"\nassert     max_run_uppercase(\"AA\") == 0, \"AA\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase('AA') == 'A', 'wrong'\nassert     max_run_uppercase('Bac') == 'B', 'wrong'\nassert     max_run_uppercase('KIlLy') == 'K', 'wrong'\nassert     max_run_uppercase('AAa') == 'A', 'wrong'\nassert     max_run_uppercase('aa') == 'a', 'wrong'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase('adS') == 2, 'Your code must return 2'\nassert     max_run_uppercase('aDaA') == 3, 'Your code must return 3'\nassert     max_run_uppercase('aaaaa') == 1, 'Your code must return 1'\nassert     max_run_uppercase('w') == 0, 'Your code must return 0'\nassert     max_run_uppercase('AAa') == 2, 'Your code must return 2'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_run_uppercase_again(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_run_uppercase(\"ABECDEF\") == 'ABCDEF'\nassert max_run_uppercase(\"ABEDF\") == 'ABEDF'\nassert max_run_uppercase(\"ABECD\") == 'ABCD'\nassert max_run_uppercase(\"ABED\") == 'ABED'\nassert max_run_uppercase(\"ABE\") == 'ABC'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_run_uppercase('AAABBBCCC') == 3\nassert     max_run_uppercase('A') == 1\nassert     max_run_uppercase('abcdabcdeabcd') == 5\nassert     max_run_uppercase('abbcdd') == 3\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_run_uppercase('AaBbCc') == 3\nassert     max_run_uppercase('aaBbCc') == 3\nassert     max_run_uppercase('aaCc') == 1\nassert     max_run_uppercase('AAbbBCcddd') == 4\nassert     max_run_uppercase('AAbbBCc') == 2\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase(\"A\") == 0, \"A should be a palindrome\"\nassert     max_run_uppercase(\"Aa\") == 1, \"Aa should be a palindrome\"\nassert     max_run_uppercase(\"Aaa\") == 3, \"Aaa should be a palindrome\"\nassert     max_run_uppercase(\"AA\") == 2, \"AA should be a palindrome\"\nassert     max_run_uppercase(\"a\") == 0, \"a should be a palindrome\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_run_uppercase('Aaabb') == 3\nassert     max_run_uppercase('AAaBB') == 3\nassert     max_run_uppercase('AAaAaA') == 2\nassert     max_run_uppercase('abBABba') == 3\nassert     max_run_uppercase('aab') == 1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert first_odd([3, 6, 1, 2, 5, 7, 4]) == 1\nassert first_odd([3, 6, 1, 2, 5, 7]) == 7\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_odd([1,2,3,4]) == 2\nassert     first_odd([2,3,4]) == 2\nassert     first_odd([2,3,4,5]) == 2\nassert     first_odd([2,3,4,5,6]) == 2\nassert     first_odd([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef last_odd(nums):\n    '''\n    Write a python function to find the last odd number in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_odd(range(1,20)) == 3, \"First odd is 3\"\nassert     first_odd(range(1,20,2)) == 7, \"First odd is 7\"\nassert     first_odd(range(1,20,3)) == 9, \"First odd is 9\"\nassert     first_odd(range(1,20,4)) == 11, \"First odd is 11\"\nassert     first_odd(range(1,20,5)) == 13, \"First odd is 13\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_odd([1,2,3,4,5]) == 1, \"First odd number is not 1\"\nassert     first_odd([1,3,5,7]) == 3, \"First odd number is not 3\"\nassert     first_odd([0,2,4,6,8]) == 0, \"First odd number is not 0\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_odd([1,2,3,4,5,6,7,8,9]) == 1\nassert     first_odd([]) == None\nassert     first_odd(['a', 'b', 'c', 'd']) == 'b'\nassert     first_odd([-4, -3, -2, -1, 0]) == -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_odd([0, 1, 2, 3, 4]) == 3\nassert     first_odd([0, 1, 2, 3, 4, 5]) == 3\nassert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\nassert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 3\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_K([[0, 1], [2, 3], [3, 0], [4, 2]], 1) == True, 'assert'\nassert     check_K([[0, 1], [2, 3], [3, 0], [4, 2]], 3) == False, 'assert'\nassert     check_K([[0, 1], [2, 3], [3, 0], [4, 2]], 0) == True, '"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_K((1,2), 1) == True\nassert     check_K((1,2), 2) == False\nassert     check_K((1,2), 3) == False\nassert     check_K((1,2,3), 3) == False\nassert     check_K((1,2,3), 2) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K((1,2,3), 0) == False, 'check_K(0,0) should be False'\nassert     check_K((1,2,3), 1) == True, 'check_K(1,1) should be True'\nassert     check_K((1,2,3), 2) == True, 'check_K(2,2) should be True'\nassert     check_K((1,2,3), 3) == True, 'check_K(3,3) should be True'\nassert     check_K((1,2,3,4), 2) == True, 'check_K(2,2) should be True'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_K(((1, 2), (3, 4)), 1) == True, \"Test 1 Failed\"\nassert     check_K(((1, 2), (3, 4)), 2) == True, \"Test 2 Failed\"\nassert     check_K(((1, 2), (3, 4)), 3) == False, \"Test 3 Failed\"\nassert     check_K(((1, 2, 3), (4, 5, 6)), 1) == True, \"Test 4 Failed\"\nassert     check_K(((1, 2, 3), (4, 5, 6)), 2) == False, \"Test 5 Failed\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_K([(1,2,3),(4,5,6),(7,8,9)],[3,4,5]) == False\nassert     check_K([(1,2,3),(4,5,6),(7,8,9)],[2,3,4]) == True\nassert     check_K([(1,2,3),(4,5,6),(7,8,9)],[1,2,3]) == False\nassert     check_K([(1,2,3),(4,5,6),(7,8,9)],[1,2,4]) == True\nassert     check_K([(1,2,3),(4,5,6),(7,8,9)],[3,4,5,7]) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_K((1,2,3), 1) == True\nassert     check_K((1,2,3), 0) == False\nassert     check_K((1,2,3), 3) == True\nassert     check_K((1,2,3), 4) == False"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_smaller((1, 2), (2, 3)) == False, \"should be False\"\nassert     check_smaller((4, 3), (2, 3)) == True, \"should be True\"\n\n\n'''\nQ2\nWrite a function that takes a string and returns a string where for every character in the original string,\nreplaced with its corresponding character and concatenated in the end. \n'''\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller((1,2),(2,1)) == True\nassert     check_smaller((1,2),(1,2)) == True\nassert     check_smaller((1,2),(2,3)) == False\nassert     check_smaller((1,2),(3,4)) == False\nassert     check_smaller((3,2),(1,2)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_smaller((5,4,3,2,1), (1,2,3,4,5)) == True\nassert     check_smaller((5,4,3,2,1), (5,4,3,2,1)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_smaller((2,4),(1,2)) == False\nassert     check_smaller((2,4),(1,3)) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncheck_smaller((3, 2, 6), (1, 2, 3))\ncheck_smaller((3, 2, 6), (1, 2, 3))\ncheck_smaller((1, 2, 3), (3, 2, 6))\ncheck_smaller((1, 2, 3), (3, 2, 6))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smaller((1, 2, 3), (1, 2, 3))\ncheck_smal"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((1,2), (3,4)) == True, \"error 1\"\nassert     check_smaller((1,2), (2,4)) == False, \"error 2\"\nassert     check_smaller((1,2), (1,2)) == True, \"error 3\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_smaller((1,2,3),(3,2,1)) == False, 'unexpected result'\nassert     check_smaller((1,2,3),(1,3,2)) == True, 'unexpected result'\nassert     check_smaller((1,3,2),(1,2,3)) == True, 'unexpected result'\nassert     check_smaller((1,2,3),(1,2)) == False, 'unexpected result'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1,2,3), (3,2,1)) == True\nassert     check_smaller((5,2,1), (3,2,1)) == False\nassert     check_smaller((1,2,3), (2,1,3)) == False\nassert     check_smaller((1,2,3), (3,2,1)) == False\nassert     check_smaller((1,2,3), (2,1,4)) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller((1,2,3), (5,6,7)) == True\nassert     check_smaller((1,2,3), (4,6,7)) == False"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((1,2,3), (4,5,6)) == True, \"Wrong output.\"\nassert check_smaller((1,2,3), (3,4,5)) == False, \"Wrong output.\""
    }
]