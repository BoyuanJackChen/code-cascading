[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements((0, 1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8)) == (3, 4, 5)\nassert     similar_elements((0, 1, 2, 3, 4, 5), (6, 7, 8, 0, 1, 2)) == (0, 1, 2)\nassert     similar_elements((0, 1, 2, 3, 4, 5), (0, 1, 2, 3, 4, 5)) == (0, 1, 2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements((2, 5, 9), (2, 9, 8, 5)) == True\nassert     similar_elements((2, 5, 9), (2, 5, 8, 9)) == False\nassert     similar_elements((1, 5, 9), (2, 5, 8, 9)) == True\nassert     similar_elements((1, 5, 9), (2, 5, 8)) == False\nassert     similar_elements((5, 5, 9), (2, 5, 8, 9)) == False\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     similar_elements((1,2,3,4,5), (1,2,3,4,5)) == True, \"Not correct\"\nassert     similar_elements((1,2,3), (1,2,3,4,5)) == True, \"Not correct\"\nassert     similar_elements((1,2,3), (1,2,3,4,5,6)) == False, \"Not correct\"\nassert     similar_elements((1,2,3), (1,2,3,4)) == False, \"Not correct\"\nassert     similar_elements((1,2,3), (1,2)) == True, \"Not correct\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntest_list1 = ['foo', 'bar', 'baz']\ntest_list2 = ['foo', 'bar', 'baz']\n\nassert similar_elements(test_list1, test_list2) == ['bar', 'foo']\n\ntest_list1 = ['foo', 'bar', 'baz']\ntest_list2 = ['foo', 'bar', 'qux']\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements([1,1,2,3,5,6,7,8],[1,1,2,3,5,6,7,8])==    [2,3,5,6]\nassert     similar_elements([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8])==    [2,3,4]\nassert     similar_elements([1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16])==    [2,3,4,6,7,8]\nassert     similar_elements([0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1])==    [0,0,0,0,0,0,0]\nassert     similar_elements([], [])==    []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     similar_elements(('a', 'b', 'c'), ('a', 'b', 'd')) ==     True, 'Test Failed'\nassert     similar_elements(('a', 'b', 'c'), ('a', 'c', 'd')) ==     False, 'Test Failed'\nassert     similar_elements(('a', 'b', 'c'), ('d', 'e', 'f')) ==     True, 'Test Failed'\nassert     similar_elements(('a', 'b', 'c'), ('d', 'c', 'e')) ==     True, 'Test Failed'\nassert     similar_elements(('a', 'b', 'c'), ('d', 'e', 'f')) ==     False, 'Test Failed'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements([], (1,2)) == 0\nassert     similar_elements([], (2,3)) == 0\nassert     similar_elements([1,2], (2,3)) == 0\nassert     similar_elements([1,2,3], (2,3)) == 2\nassert     similar_elements([1,2,3], (2,4)) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     similar_elements((1,2,3), (4,5,6)) == (1, 2, 3)\nassert     similar_elements((1,2,3,4,5), (4,5,6,7,8)) == (4, 5, 6)\nassert     similar_elements((1,2,3,4,5), (4,5,6,7,8,9)) == (4, 5, 6)\nassert     similar_elements((1,2,3,4), (4,5,6,7,8,9,10)) == ()\nassert     similar_elements((1,2,3,4,5), (1,2,3)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     similar_elements((1, 2, 3), (1, 3, 4))    == ((1, 2),)\nassert similar_elements((1, 1, 2, 2), (1, 1, 3, 4))    == ((1, 1),)\nassert similar_elements((1, 2, 3), (2, 3, 4))    == ()\nassert similar_elements((1, 2, 3), (1, 1, 1, 2))    == ((1, 1),)\nassert similar_elements((2,), (1, 1, 1, 2))    == ((1, 1),)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements([10, 20, 30, 40], [10, 20, 30, 40]) == False, 'Expected: False'\nassert     similar_elements([10, 20, 30, 40], [10, 20, 30, 40]) == True, 'Expected: True'\nassert     similar_elements([10, 20, 30, 40], [10, 20, 30, 40]) == True, 'Expected: True'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_not_prime(7) == True, 'check the correctness of is_not_prime'\nassert     is_not_prime(5) == False, 'check the correctness of is_not_prime'\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_not_prime(3) == False, \"function should return True\"\nassert     is_not_prime(6) == True, \"function should return False\"\n\ndef prime_factors(n):\n    '''\n    Write a python function to determine the prime factors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \n\n\n\ndef all_prime(n):\n    '''\n    Write a python function that identify all the prime numbers\n    within a range.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_not_prime(13) == False\nassert     is_not_prime(14) == True\nassert     is_not_prime(15) == False\n\ndef is_prime(n):\n    '''\n    Write a python function to determine prime number.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(2) == True\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == True\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(3) == True\nassert is_not_prime(4) == True\nassert is_not_prime(5) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_not_prime(11) == False\nassert is_not_prime(2) == True\n\ndef prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_queue_largest([1,2,3,4,5],3) == [4,5,3]\nassert     heap_queue_largest([4,5,3,2,1],3) == [5,4,3]\nassert     heap_queue_largest([5,4,3,2,1],3) == [5,4,3]\nassert     heap_queue_largest([5,4,3,2,1],5) == [5,4,3,2,1]\nassert     heap_queue_largest([1,2,3,4,5],2) == [5,4]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in range(n):\n        h.append(-nums[i])\n    hq.heapify(h)\n    for i in range(n-1, -1, -1):\n        hq.heappushpop(h, nums[i])\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert heap_queue_largest([4,5,1,2,3,6],3) == [6,5,4]\nassert heap_queue_largest([10,10,10,10,10],1) == []\nassert heap_queue_largest([1,2,3,4,5],1) == [5]\nassert heap_queue_largest([-3,-1,0,1,2],2) == [0,-1,2]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nheap_queue_largest([2,3,5,7,8,9,4,6,1],4) == [9,8,7,6,5]\n\n\ndef heap_queue_largest_quick(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_queue_largest([1, 2, 3, 4, 5], 5) ==     [5, 4, 3, 2, 1]\nassert     heap_queue_largest([1, -3, -2, 3, 4], 4) ==     [3, 4, 3, -2]\nassert     heap_queue_largest([-2, 1, 3, -1], 3) ==     [-1, 3, 1]\nassert     heap_queue_largest([2, 4, 8, 9, 2], 3) ==     [9, 8, 2]\nassert     heap_queue_largest([1, 1, 1, 1], 3) ==     [1, 1, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndef heapsort(nums):\n    '''\n    https://leetcode.com/problems/find-the-kth-largest-element-in-a-stream/discuss/1118124/Python-solution-O(n)-in-place\n    '''\n    pass\n\ndef get_n_largest(n, nums):\n    '''\n    Find the n largest integers in a stream\n    '''\n    largest = []\n    for i in range(n):\n        largest.append(max(nums))\n        nums.remove(max(nums))\n    return largest\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two(64) == False, 'output is: %s' % (is_Power_Of_Two(64))\nassert     is_Power_Of_Two(2) == True, 'output is: %s' % (is_Power_Of_Two(2))\nassert     is_Power_Of_Two(3) == True, 'output is: %s' % (is_Power_Of_Two(3))\nassert     is_Power_Of_Two(4) == True, 'output is: %s' % (is_Power_Of_Two(4))\nassert     is_Power_Of_Two(16) == False, 'output is: %s' % (is_Power_Of_Two(16))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(16) == True, 'Wrong output'\nassert     is_Power_Of_Two(2) == False, 'Wrong output'\nassert     is_Power_Of_Two(18) == True, 'Wrong output'\nassert     is_Power_Of_Two(100) == False, 'Wrong output'\nassert     is_Power_Of_Two(1) == True, 'Wrong output'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(1) == False, \"Test 1 Failed\"\nassert     is_Power_Of_Two(2) == True, \"Test 2 Failed\"\nassert     is_Power_Of_Two(1) == False, \"Test 3 Failed\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_Power_Of_Two(0), True\n    is_Power_Of_Two(4), True\n    is_Power_Of_Two(16), False\n\ndef is_Palindrome(x): \n    '''\n    Write a python function to check whether the integer x is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_Power_Of_Two(3)\nassert not is_Power_Of_Two(4)\nassert is_Power_Of_Two(5)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(5) == True\nassert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(4) == True\nassert     is_Power_Of_Two(8) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(4) == True, \"your output does not match expected output\"\nassert     is_Power_Of_Two(9) == True, \"your output does not match expected output\"\nassert     is_Power_Of_Two(99) == False, \"your output does not match expected output\"\nassert     is_Power_Of_Two(256) == True, \"your output does not match expected output\"\n\ndef count_even_numbers_in_a_range (a, b):\n    '''\n    Write a python function that counts all even numbers within a given range\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_Power_Of_Two(0)\nassert is_Power_Of_Two(1)\nassert is_Power_Of_Two(2)\nassert is_Power_Of_Two(3)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_char_long('') == []\nfind_char_long('abc') == []\nfind_char_long('abcde') == ['abc']\nfind_char_long('abcdea') == ['abcde']\nfind_char_long('abcdeab') == ['abcdea']\nfind_char_long('abcdeabcdeabcdea') == ['abcdeabcdea']\n\n\ndef is_palindrome_short(text):\n    '''\n    Write a function that checks if a text is a palindrome. A palindrome is a word or a sentence that reads the same forwards and backwards.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long(\"Hi, my name is andi. but i am from India\") == [\"andi\"]\nassert     find_char_long(\"Hi, my name is andi. andi is a great name. But i am not from India\") == [\"andi\", \"andi\", \"great\"]\nassert     find_char_long(\"Hi, my name is andi. andi is a great name. But i am not from India. But my name is akash\") == [\"andi\", \"andi\", \"great\", \"akash\"]\nassert     find_char_long(\"Hi, my name is andi. andi is a great name. But i am not from India. But my name is akash\") == [\"andi\", \"andi\", \"great\", \"akash\"]\nassert     find_char_long(\"Hi, my name is andi. andi is a great name. But i am not from India. But my name is akash\") == [\"andi\", \"andi\", \"great\", \"akash\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long(\"hello\") == set()\nassert     find_char_long(\"this is a test string\") == set([\"test\", \"this\"])\nassert     find_char_long(\"this is a test string\") == set([\"test\"])\n\ndef find_char_long_using_regex(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(find_char_long('The quick brown fox jumps over the lazy dog.'))"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long(' ') == [' ']\nassert     find_char_long(' ') == [' ']\nassert     find_char_long('a') == ['a']\nassert     find_char_long('a b') == ['a', 'b']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long('how are you? i am fine') == ['i', 'am']\nassert     find_char_long('are you ok? i am fine') == ['i', 'am']\nassert     find_char_long('hello how are you? i am fine') == ['i', 'am']\nassert     find_char_long('good morning sir') == []\nassert     find_char_long('how are you how are you') == ['how', 'are', 'you']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_char_long('bluish')    == True\nassert     find_char_long('blueish')    == True\nassert     find_char_long('lunch')    == False\nassert     find_char_long('blueish blueish')    == True\nassert     find_char_long('hello')    == False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long('ab') == ['ab']\nassert     find_char_long('ab ab') == ['ab', 'ab']\nassert     find_char_long('ab ab ab') == ['ab', 'ab', 'ab']\nassert     find_char_long('ab ab ab ab') == ['ab', 'ab', 'ab', 'ab']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_char_long(\"This is a test of the emergency broadcast system\") == [\"is\",\"test\",\"emergency\"]\n\ndef find_num_long(text):\n    '''\n    Write a function to find all numbers which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([1, 4, 9, 16]) == [1, 4, 9, 64]\nassert     square_nums([-1, -3, -5]) == [-1, -3, -5]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert     square_nums([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Checking if square_nums works as intended')\nsquare_nums([1,2,3,4])\nprint('Checking if square_nums works as intended')\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert square_nums([0,1,2,3,4,5,6,7,8,9]) == [0, 1, 4, 9, 16, 25, 36, 49, 64, 81], 'incorrect'\nassert square_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1, -4, -9, -16, -25, -36, -49, -64, -81], 'incorrect'\n\n'''\nExpected output:\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n[-1, -4, -9, -16, -25, -36, -49, -64, -81]\n'''\n\ndef add_nums(nums):\n    '''\n    Write a function that adds two lists together.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_nums([1, 3, 4, 9, ] ) == [1, 9, 81, 81, 9]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_nums(0) == 0\nassert square_nums(1) == 1\nassert square_nums(5) == 25\nassert square_nums(10) == 100\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums([1, 2, 3])     == [1, 4, 9], \\\n    '''square_nums should return [1, 4, 9] for a list of size 3.'''\nassert     square_nums([4, 5, 6])     == [16, 25, 36], \\\n    '''square_nums should return [16, 25, 36] for a list of size 3.'''\nassert     square_nums([8, 9, 10])     == [64, 81, 100], \\\n    '''square_nums should return [64, 81, 100] for a list of size 3.'''\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations(\"aab\") == 2\nassert     find_Rotations(\"aabca\") == 4\nassert     find_Rotations(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\") == 17\n\ndef create_word_list(file_name):\n    '''\n    Write a python function to read a text file and return the words in the file.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Rotations(\"ABD\") == 3\nassert     find_Rotations(\"ABCD\") == 4\nassert     find_Rotations(\"ABCDAA\") == 7\nassert     find_Rotations(\"ABCDAB\") == 2\nassert     find_Rotations(\"ABCDABA\") == 3\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Rotations(\"JYKBNPGY\") == 2\nassert    find_Rotations(\"JYKBNPPGY\") == 1\nassert    find_Rotations(\"JYKBNPPGYAA\") == 1\nassert    find_Rotations(\"JYKBNPPGYBB\") == 0\nassert    find_Rotations(\"\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    find_Rotations(\"ABCD\")== 0, 'Expected: 0'\n    find_Rotations(\"ABCDCB\")== 1, 'Expected: 1'\n    find_Rotations(\"ABCDCBA\")== 1, 'Expected: 1'\n    find_Rotations(\"ABCDCDB\")== 2, 'Expected: 2'\n    find_Rotations(\"ABCDCDBA\")== 2, 'Expected: 2'\n    find_Rotations(\"ABCDDDCB\")== 3, 'Expected: 3'\n    find_Rotations(\"ABCDDDDCB\")== 3, 'Expected: 3'\n    find_Rotations(\"ABCDDDDDCB\")== 4, 'Expected: 4'\n    find_Rotations(\"ABCDDDDDDB\")== 4, 'Expected: 4'\n    find_Rotations(\"ABCDDDDDDD\")== 4, 'Expected: 4'\n    find_Rotations(\"ABCDDDDDDDD\")== 5, 'Expected: 5'\n    find_Rotations(\"ABCDDDDDDDD\")== 5, 'Expected: 5'\n    find_Rotations(\"ABCDDDDDDDDDD\")== 5, 'Expected: 5'\n    find_Rotations(\"ABCDDDDDDDDDDDD\")== 6, 'Expected: 6'\n    find_Rotations(\"ABCDDDDDDDDDDDDDD\")== 6, 'Expected: 6'\n    find_Rotations(\"ABCDDDDDDDDDDDDDDDD\")== 7, 'Expected: 7'\n    find_Rotations(\"ABCDDDDDDDDDDDDDDDDDD\")== 7, 'Expected: 7'\n    find_Rotations
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"abbb\") == 5\nassert     find_Rotations(\"abbba\") == 0\nassert     find_Rotations(\"abcd\") == 2\nassert     find_Rotations(\"aaabbb\") == 1\nassert     find_Rotations(\"aaaaaa\") == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Rotations(\"tat\") == 3\nassert     find_Rotations(\"add\") == 0\nassert     find_Rotations(\"eend\") == 1\nassert     find_Rotations(\"tet\") == 1\nassert     find_Rotations(\"ende\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations('a') == 0\nassert    find_Rotations('ab') == 1\nassert    find_Rotations('aab') == 2\nassert    find_Rotations('aba') == 3\nassert    find_Rotations('abca') == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations('cat') == 1\nassert     find_Rotations('dog') == 1\nassert     find_Rotations('strawb') == 0\nassert     find_Rotations('aabbccddeeffggghhhh') == 7\n\ndef are_they_equal(str1, str2):\n    '''\n    Write a python function to check if two strings are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Rotations('guitar') == 1 \nassert     find_Rotations('guru') == 0 \nassert     find_Rotations('dieter') == 3 \nassert     find_Rotations('restaurant') == 3 \nassert     find_Rotations('bar') == 2 \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_Occ(\"abra\",\"b\")==\"ab\"\nassert     remove_Occ(\"abra\",\"c\")==\"ab\"\nassert     remove_Occ(\"abra\",\"a\")==\"ab\"\nassert     remove_Occ(\"abra\",\"r\")==\"ab\"\nassert     remove_Occ(\"abra\",\"\")==\"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n    if not s:\n        return \"\"\n    for i in range(len(s)-1):\n        if s[i]==ch:\n            break\n    else:\n        return \"\"\n    for i in range(len(s)-1,-1,-1):\n        if s[i]==ch:\n            break\n    else:\n        return \"\"\n    return s[i+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ns = 'abcdefgh'\nch = 'a'\nprint('remove_Occ(s,ch) =', remove_Occ(s,ch))"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_Occ(\"sanik\",\"k\") == \"sni\"\nremove_Occ(\"sana\",\"k\") == \"sana\"\nremove_Occ(\"kant\",\"k\") == \"kan\"\nremove_Occ(\"kant\",\"a\") == \"kant\"\nremove_Occ(\"abc\",\"a\") == \"abc\"\nremove_Occ(\"kant\",\"k\") == \"kan\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ('abcd','c') == 'abcd', 'abcd should be removed'\nassert     remove_Occ('abc','c') == 'abc', 'abc should be removed'\nassert     remove_Occ('abcd','x') == 'abcd', 'abcd should be removed'\nassert     remove_Occ('abc','x') == 'abc', 'abc should be removed'\nassert     remove_Occ('abcde','x') == 'abcde', 'abcde should be removed'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_Occ(\"xyzabcde\",'x') == 'yabcde'\nremove_Occ(\"abcde\",'e') == 'abcde'\nremove_Occ(\"xyzabcde\",\"y\") == 'zabcde'\nremove_Occ(\"xyzabcde\",\"z\") == 'xyzabcde'\nremove_Occ(\"abcd\",\"z\") == 'abcd'\nremove_Occ(\"\",\"z\") == \"\"\nremove_Occ(\"xyz\",\"z\") == \"xyz\"\nremove_Occ(\"xyz\",\"y\") == \"xyz\"\nremove_Occ(\"xyz\",\"x\") == \"xyz\"\nremove_Occ(\"\",\"x\") == \"\"\nremove_Occ(\"\",\"y\") == \"\"\nremove_Occ(\"\",\"z\") == \"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_Occ(\"thephysicslab\",\"t\") == \"thephysicslab\"\nassert     remove_Occ(\"thephysicslab\",\"n\") == \"thephysicslab\"\nassert     remove_Occ(\"thephysicslab\",\"l\") == \"thephysicslab\"\nassert     remove_Occ(\"thephysicslab\",\"physicslab\") == \"thephysicslab\"\nassert     remove_Occ(\"thephysicslab\",\"l\") == \"thephysicslab\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ('hello', 'o') == 'll'\nassert     remove_Occ('how are you', 'o') == 'are y'\nassert     remove_Occ('how are you', 'w') == 'how are'\nassert     remove_Occ('how are you', 'y') == 'how are'\nassert     remove_Occ('how are you', 'z') == 'how are'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[1,2,3],[2,2,2],[3,4,5],[2,3,4]]) == [[2,2,2],[1,2,3],[3,4,5],[2,3,4]]\nassert     sort_matrix([[1,2,3],[4,5,6],[7,8,9],[2,3,4]]) == [[2,3,4],[1,2,3],[4,5,6],[7,8,9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([[5,7,3],[4,2,1],[2,5,6]]) == [[2,1,3],[4,2,5],[5,7,6]]\nassert     sort_matrix([[1,0,0],[0,1,0],[0,0,1]]) == [[0,0,1],[1,0,0],[0,1,0]]\nassert     sort_matrix([[0,1,5],[1,2,3],[5,4,0]]) == [[0,1,5],[1,2,3],[5,4,0]]\nassert     sort_matrix([[7,8,7],[4,1,4],[2,3,5]]) == [[2,3,5],[4,1,4],[7,8,7]]\nassert     sort_matrix([[0,2,4,1,7],[5,6,8,3,9],[0,7,1,3,5]]) == [[0,2,4,1,7],[0,7,1,3,5],[5,6,8,3,9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_matrix([[1,2],[4,3]]) == [[1,2],[3,4]]\nassert     sort_matrix([[1,2],[4,3]]) == [[1,2],[3,4]]\nassert     sort_matrix([[3,4],[1,2]]) == [[1,2],[3,4]]\nassert     sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     sort_matrix([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[7, 8], \n                    [4, 2], \n                    [1, 3]]) == \n    [[1, 3], \n     [4, 2], \n     [7, 8]]\nassert sort_matrix([[8, 7], \n                    [2, 1]]) == \n    [[1, 3], \n     [2, 2]]\nassert sort_matrix([[4, 7], \n                    [1, 3], \n                    [8, 2]]) == \n    [[1, 3], \n     [2, 2], \n     [4, 7]]\nassert sort_matrix([[1, 2], \n                    [4, 3], \n                    [7, 8]]) == \n    [[1, 2], \n     [3, 4], \n     [7, 8]]\n\ndef column_matrix(M):\n    '''\n    Write a function to compute the column matrix of a given matrix M.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    \ndef sort_matrix_helper(matrix, i, j):\n    '''\n    Helper function for sort_matrix.\n    '''\n    pass\n    \ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(0, N-1):\n        for j in range(i+1, N):\n            sort_matrix_helper(M, i, j)\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nFind the total number of positions of the longest increasing subsequence in a given array.\nA subsequence is a set of numbers that aren't necessarily contiguous and that follow a sequence in the array.\nExample:\nInput: arr = [1, 3, 2, 4, 5, 7, 6, 7]\nOutput: 10 (because 6, 7 and 7 are the longest increasing subsequence of the given array)\n\nYour code should run in O(n^2) time complexity, where n is the length of the input array.\n'''\ndef longest_increasing_subsequence(arr):\n    '''\n    Find the total number of positions of the longest increasing subsequence in a given array.\n    A subsequence is a set of numbers that aren't necessarily contiguous and that follow a sequence in the array.\n    Example:\n    Input: arr = [1, 3, 2, 4, 5, 7, 6, 7]\n    Output: 10 (because 6, 7 and 7 are the longest increasing subsequence of the given array)\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([[4, 6], [1, 3], [2, 1]]) == \\\n[[1, 2], [3, 4], [6, 1]], \\\n\"test 1 failed\"\nassert     sort_matrix([[1, 1], [1, 1]]) == \\\n[[1, 1], [1, 1]], \\\n\"test 2 failed\"\nassert     sort_matrix([[4, 6], [1, 3], [2, 1]]) == \\\n[[1, 2], [2, 1], [3, 4]], \\\n\"test 3 failed\"\nassert     sort_matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == \\\n[[1, 1, 1], [1, 1, 1], [1, 1, 1]], \\\n\"test 4 failed\"\nassert     sort_matrix([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == \\\n[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], \\\n\"test 5 failed\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(4,5,6) == 12, \"Should be 12\"\nassert     find_Volume(6,9,10) == 60, \"Should be 60\"\nassert     find_Volume(8,9,10) == 64, \"Should be 64\"\nassert     find_Volume(5,2,4) == 20, \"Should be 20\"\nassert     find_Volume(10,20,30) == 200, \"Should be 200\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(2,4,3)==6\nassert     find_Volume(4,5,6)==18\nassert     find_Volume(2,4,3)==6"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_Volume([2,1],2,3) == 3, 'test 1'\nassert \nfind_Volume([2,1],2,5) == 4, 'test 2'\nassert \nfind_Volume([2,1,3],2,5) == 5, 'test 3'\nassert \nfind_Volume([2,1,3],2,5) == 3, 'test 4'\n\ndef find_Volume_Yield(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume([1,2],3,4) == 5\nassert     find_Volume([1,2],1,3) == 5\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume([2,2,2], 2,2) == 8\nassert     find_Volume([2,2,2], 2,3) == 20\nassert     find_Volume([2,2,2], 3,2) == 12\nassert     find_Volume([2,2,2], 3,3) == 18\nassert     find_Volume([2,2,2], 3,4) == 12\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(5,3,4) == (5*3*4)/1/2\nassert     find_Volume(5,5,5) == (5*5*5)/1/2\n\ndef get_Area(l,b,h) : \n    '''\n    Write a python function to get the area of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(3,4,5) == 5\nassert     find_Volume(2,4,6) == 14\nassert     find_Volume(3,3,7) == 7\nassert     find_Volume(1,1,1) == 1\nassert     find_Volume(7,2,4) == 28\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert find_Volume([2, 2, 2], 3, 4) == (6, 4, 6)\nassert find_Volume([2, 2, 3], 4, 5) == (6, 3, 9)\nassert find_Volume([2, 2, 2], 2, 6) == (8, 0, 8)\nassert find_Volume([2, 2, 3], 4, 5) == (6, 3, 9)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume(4,5,6) == 20, \"Wrong output\"\nassert     find_Volume(4,5,7) == 28, \"Wrong output\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume([2,3,2],[3,4,5]) == 27\nassert     find_Volume([1,2,3],[3,4,5]) == 4\nassert     find_Volume([2,3,2],[3,4,5]) == 8\nassert     find_Volume([5,5,5],[3,4,5]) == 50\nassert     find_Volume([5,5,5],[3,4,5]) == 50\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore(\"A_B_C\") == False\nassert     text_lowercase_underscore(\"_AB_C\") == True\nassert     text_lowercase_underscore(\"A-B-C\") == False\nassert     text_lowercase_underscore(\"A_B_C-\") == False\nassert     text_lowercase_underscore(\"_A_B_C-\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('thisIsATest') == False\nassert     text_lowercase_underscore('this_is_a_test') == True\nassert     text_lowercase_underscore('thisIsATest_') == False\nassert     text_lowercase_underscore('this_is_a_test_') == True\n\ndef text_lowercase_underscore_2(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lowercase letters joined with an underscore, and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('foo_bar') == True\nassert     text_lowercase_underscore('_foo_bar') == False\nassert     text_lowercase_underscore('_fooBar') == False\nassert     text_lowercase_underscore('_fooB_ar') == False\n\ndef text_lowercase_underscore_substring(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('hello')     ==     True\nassert     text_lowercase_underscore('HELO')     ==     True\nassert     text_lowercase_underscore('Helo')     ==     False\nassert     text_lowercase_underscore('Helo')     ==     False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore(\"text_lowercase_underscore\") == True \nassert     text_lowercase_underscore(\"TEXT_lowercase_underscore\") == False\nassert     text_lowercase_underscore(\"h_\") == False\nassert     text_lowercase_underscore(\"H_\") == True\nassert     text_lowercase_underscore(\"m_c_j\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('text_lowercase_underscore') == True\nassert     text_lowercase_underscore('text_lowercase_underscore') == False\nassert     text_lowercase_underscore('text_lowercase_underscore_') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore(\"abAcBa\") == True, \"This should be a true value\"\nassert     text_lowercase_underscore(\"xabc_y\") == True, \"This should be a true value\"\nassert     text_lowercase_underscore(\"a1b2c3d\") == False, \"This should be a false value\"\nassert     text_lowercase_underscore(\"_abc_def_ghi\") == False, \"This should be a false value\"\nassert     text_lowercase_underscore(\"ab_cd_ef_ghi\") == False, \"This should be a false value\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore(\"A-B_C_D\") == True, \\\n        \"The text_lowercase_underscore function is not returning the correct value.\"\nassert text_lowercase_underscore(\"A-B_C\") == False, \\\n        \"The text_lowercase_underscore function is not returning the correct value.\"\nassert text_lowercase_underscore(\"A-B\") == False, \\\n        \"The text_lowercase_underscore function is not returning the correct value.\"\nassert text_lowercase_underscore(\"A-B-C\") == False, \\\n        \"The text_lowercase_underscore function is not returning the correct value.\"\nassert text_lowercase_underscore(\"A-b-c\") == True, \\\n        \"The text_lowercase_underscore function is not returning the correct value.\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('') == False\nassert     text_lowercase_underscore('a') == False\nassert     text_lowercase_underscore('a1') == False\nassert     text_lowercase_underscore('_1') == False\nassert     text_lowercase_underscore('_1a') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('jdjdjdj') == True\nassert     text_lowercase_underscore('I_am_bad') == False\n\ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(2) == 4, \"square_perimeter() is wrong\"\nassert     square_perimeter(5) == 10, \"square_perimeter() is wrong\"\nassert     square_perimeter(7) == 14, \"square_perimeter() is wrong\"\nassert     square_perimeter(3) == 9, \"square_perimeter() is wrong\"\nassert     square_perimeter(1) == 1, \"square_perimeter() is wrong\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsquare_perimeter(1) == 1\nassert square_perimeter(2) == 4\nassert square_perimeter(3) == 6\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsquare_perimeter(1) == 1\nsquare_perimeter(4) == 8\nsquare_perimeter(0) == 0\nsquare_perimeter(10) == 36\nsquare_perimeter(8) == 20\n\ndef sum_of_digits(number):\n    '''\n    Write a function that returns the sum of the digits of a number.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsquare_perimeter(4) == 8\nsquare_perimeter(5) == 14"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_perimeter(1) == 1, \"The result should be 1\"\nassert     square_perimeter(2) == 4, \"The result should be 4\"\nassert     square_perimeter(3) == 6, \"The result should be 6\"\nassert     square_perimeter(4) == 8, \"The result should be 8\"\nassert     square_perimeter(5) == 10, \"The result should be 10\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_perimeter(4) == 8, '4'\nassert     square_perimeter(5) == 10, '5'\n\nprint('\u2714 Checkpoint 1: Successfully passed')\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef pentagonal_number(a):\n    '''\n    Write a function that returns the nth pentagonal number given its\n    side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_perimeter(1) == 4,'square_perimeter'\nassert     square_perimeter(2) == 8,'square_perimeter'\nassert     square_perimeter(3) == 12,'square_perimeter'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_perimeter(1) == 2\nsquare_perimeter(2) == 4\nsquare_perimeter(3) == 6"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert str_to_list(\"the quick brown fox jumps over the lazy dog\") == \"thqbwjmpsrfuovdg\"\nassert str_to_list(\"already am i am\") == \"already am i am\"\nassert str_to_list(\"already am i am\") == \"already am i am\"\nassert str_to_list(\"i love apples\") == \"iloveapples\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef list_to_str(string): \n    '''\n    Write a function to reverse the order of the characters in the list.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     str_to_list('aabcd' 'cbc') == 'abcd'\nassert     str_to_list('aabcd' 'a') == 'abcd'\nassert     str_to_list('aabcd' 'b') == 'a'\nassert     str_to_list('aabcd' 'c') == 'a'\nassert     str_to_list('aabcd' 'd') == 'abcd'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     str_to_list('helloooo') == ['h','o','l','l','o']\nassert     str_to_list('ooccatgatgga') == ['o','c','a','c','a','t','g']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef str_to_list_2(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     str_to_list(\"abcdefghijklmnopqrstuvwxyz\") == \"cdefghijklmnopqrstuvwxyz\"\nassert     str_to_list(\"mango\") == \"mango\"\nassert     str_to_list(\"\") == \"\"\nassert     str_to_list(\"asdfghjklm\") == \"asdfghjklm\""
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(str_to_list('aabcc'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert str_to_list('aabcc') == 'abcc'\n    "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    # User input\n    string_1 = input('Enter string 1 : ')\n    string_2 = input('Enter string 2 : ')\n    \n    # calling str_to_list function\n    result = str_to_list(string_1, string_2)\n    \n    # check the result\n    print('The result is : ', result)\n    print('The output is expected to be : ', ''.join(set(string_1)-set(string_2)))"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    str_to_list(\n        '''\na c d e g\n''') ==  ['''\nb e g''','''\na e g''','''\na c d e g''','''\na b c d e g''']\n    \n    str_to_list(\n        '''\na c d e f\n''') ==  ['''\na c d e f''']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_duplicate([1,2,2,3,4]) == True\nassert     test_duplicate([1,2,3,4,1]) == False\nassert     test_duplicate([2,3,3]) == True\nassert     test_duplicate([1,1,2]) == True\nassert     test_duplicate([2,2,2,3,4]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_2D_array(arraynums):\n    '''\n    Write a function that takes an array of integer and returns True if it is a 2D array.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate(arraynums) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntest_duplicate([1,3,4,2,2]) == True\ntest_duplicate([1,3,4,5]) == Fals"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_duplicate([1,2,3,4]) is False, \"The expected value is False\"\nassert     test_duplicate([1,2,3,4,4]) is True, \"The expected value is True\"\nassert     test_duplicate([1,2,3,4,5]) is False, \"The expected value is False\"\nassert     test_duplicate([1,2,3,4,5,5]) is True, \"The expected value is True\"\nassert     test_duplicate([1,2,3,4,1,2,4]) is True, \"The expected value is True\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate([5,3,3,4,3,2,1]) == True, \"1st case\"\nassert     test_duplicate([5,3,3,4,3,2,1,2]) == False, \"2nd case\"\nassert     test_duplicate([5,3,3,4,3,2,1,2,4,4,2,3,3,1,1,2,3,4,4,4,4,4,5,3,3,1,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_duplicate_2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('TEST CASE 5: pass') \nprint('is_woodall(7) should return True') \nprint(is_woodall(7)) \n\nprint('TEST CASE 6: fail') \nprint('is_woodall(7) should return False') \nprint(is_woodall(8)) \n\nprint('\\nTEST CASE 7: pass') \nprint('is_woodall(7) should return False') \nprint(is_woodall(10)) \n\nprint('\\nTEST CASE 8: pass') \nprint('is_woodall(7) should return False') \nprint(is_woodall(8.4)) \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_woodall(6) == True, \"Should be True\"\nassert     is_woodall(10) == False, \"Should be False\"\nassert     is_woodall(2) == True, \"Should be True\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_woodall(3) == False, 'Should return False'\nassert     is_woodall(7) == False, 'Should return False'\nassert     is_woodall(23) == True, 'Should return True'\nassert     is_woodall(101) == False, 'Should return False'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(9) == True\nassert     is_woodall(30) == False\nassert     is_woodall(10) == False\nassert     is_woodall(21) == False\nassert     is_woodall(8) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_woodall(1) == False, 'is_woodall should not accept 1'\nassert     is_woodall(11) == False, 'is_woodall should not accept 11'\nassert     is_woodall(2.0) == False, 'is_woodall should not accept 2.0'\nassert     is_woodall(True) == False, 'is_woodall should not accept True'\nassert     is_woodall('hello') == False, 'is_woodall should not accept string'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_str(x): \n    '''\n    Write a function to check if the given number is string or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_woodall(100) == False\nassert     is_woodall(250) == True\nassert     is_woodall(-100) == False\nassert     is_woodall(-1) == False\nassert     is_woodall(2.1) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_woodall(123456) == False, \"Wrong output\"\nassert     is_woodall(12345) == True, \"Wrong output\"\nassert     is_woodall(123) == False, \"Wrong output\"\nassert     is_woodall(123.456) == False, \"Wrong output\"\nassert     is_woodall('123') == False, \"Wrong output\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(rev(5))\nprint(rev(7))\nprint(rev(3))\nprint(rev(11))"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(2) == True, \"Should be True\"\nassert     rev(3) == False, \"Should be False\"\nassert     rev(4) == True, \"Should be True\"\nassert     rev(6) == True, \"Should be True\"\nassert     rev(8) == False, \"Should be False\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(5) == -5\nassert     rev(6) == -4\nassert     rev(7) == -3\nassert     rev(8) == -2\nassert     rev(9) == -1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(1)    == 0\nassert     rev(3)    == 2\nassert     rev(5)    == 2\nassert     rev(6)    == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(1) == 2\nassert     rev(6) == 3\nassert     rev(7) == 4\nassert     rev(12) == 4\nassert     rev(16) == 7\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(11) == 10 and rev(-11) == -10, \"Wrong output!\"\nassert     rev(0) == 0 and rev(-1) == -1, \"Wrong output!\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rev(12) == 33, \"12 is not -33\"\nassert     rev(50) == -55, \"50 is -55\"\nassert     rev(100) == -100, \"100 is -100\"\nassert     rev(1000) == -1000, \"1000 is -1000\"\nassert     rev(5000) == -5005, \"5000 is -5005\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(123) == 321, \"the original number must be a number\"\nassert rev(1111) == 1111, \"the reverse of the original number must be equal to the original number\"\nassert rev(12) == 21, \"the original number must be positive and a number\"\nassert rev(0) == 0, \"the original number must be positive and a number\"\n\nprint(\"\\033[1;32m\"+\"All tests passed!\\033[1;37m\""
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Max_Num([1,2,3,4,5,6,7]) == 8, \"Wrong output\"\nassert     find_Max_Num([1,2,3,4,5,6,7,8]) == 8, \"Wrong output\"\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 8, \"Wrong output\"\nassert     find_Max_Num([0,1,2,3,4,5,6,7,8]) == 9, \"Wrong output\"\nassert     find_Max_Num([9,8,7,6,5,4,3,2,1]) == 8, \"Wrong output\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Max_Num([1,2,3,4,5,6,7]) == 14, \"Test 1 Failed\"\nassert     find_Max_Num([0,2,3,4,5,6,7]) == 27, \"Test 2 Failed\"\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_Max_Num([1,2,3,4,5]) == 5\n    print(\"Correct\")\n    find_Max_Num([5,4,3,2,1]) == 5\n    print(\"Correct\")\n    find_Max_Num([4,5,6,7,8,9]) == 9\n    print(\"Correct\")\n    find_Max_Num([1,2,3,5,6,7]) == 7\n    print(\"Correct\")\n    find_Max_Num([1,2,3,4,5,6]) == 5\n    print(\"Correct\")\n    find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\n    print(\"Correct\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(find_Max_Num([1,2,3]))\nprint(find_Max_Num([2,2,3]))\nprint(find_Max_Num([1,1,1]))\n\nprint()\n\ndef find_Common_num(num1, num2):\n    '''\n    Write a python function to find the number which appears in both the given list of num1 and list of num2\n    '''\n    pass"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    find_Max_Num([2, 3, 4, 5]) == 15 \nassert\n    find_Max_Num([5, 1, 4, 2]) == 8\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\n=====Test Case 1=====')\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(2,3) == False\nassert     opposite_Signs(4,2) == True\nassert     opposite_Signs(1,3) == True\nassert     opposite_Signs(1,-3) == False\nassert     opposite_Signs(-1,3) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(x= -1,y = -2) == True, \"WRONG, test case is wrong\"\nassert     opposite_Signs(x = 1,y = -2) == False, \"WRONG, test case is wrong\"\nassert     opposite_Signs(x = -1,y = 1) == False, \"WRONG, test case is wrong\"\nassert     opposite_Signs(x = 1,y = 1) == True, \"WRONG, test case is wrong\"\nassert     opposite_Signs(x = -1,y = 2) == True, \"WRONG, test case is wrong\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(3,4)==True\nassert     opposite_Signs(-3,4)==True\nassert     opposite_Signs(3,-4)==False\nassert     opposite_Signs(-3,-4)==False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     opposite_Signs(1,-1) == 1 \nassert     opposite_Signs(-1,1) == -1 \nassert     opposite_Signs(-1,-1) == -1 \nassert     opposite_Signs(1,-2) == -2 \nassert     opposite_Signs(-1,2) == 2 \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(2, -4) == True,'return true for both given cases'\nassert opposite_Signs(-2, 4) == False,'return false for only one case'"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     opposite_Signs(-9, -10) == False\nassert opposite_Signs(-9, 10) == True\nassert opposite_Signs(9, -10) == True\nassert opposite_Signs(10, -9) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nif __name__ == '__main__': \n    x = -1\n    y = -3\n    opposite_Signs(x, y) \n    print(\"The function returns true if x and y have opposite sign\")\n    x = -1\n    y = -1\n    opposite_Signs(x, y) \n    print(\"The function returns true if x and y have opposite sign\")\n    x = -1\n    y = 0\n    opposite_Signs(x, y) \n    print(\"The function returns false if x and y have opposite sign\""
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nopposite_Signs(1,2) == False\nopposite_Signs(1,-2) == True\nopposite_Signs(0,-2) == False\nopposite_Signs(-1,2) == True\nopposite_Signs(-2,-1) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,-2) == False\nopposite_Signs(0,0) == False\nopposite_Signs(-2,-0) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(0,0) == False\nopposite_Signs(0,0) == False\nopposite_Signs(0,2) == True\nopposite_Signs(0,-2) == True\nopposite_Signs(0,0) == False\nopposite_Signs(0,0) == False\nopposite_Signs(-2,0) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,0) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,-0) == True\nopposite_Signs(-2,0) == True\nopposite_Signs(-2,2) == True\nopposite_Signs(-2,0) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,-0) == True\nopposite_Signs(-2,0) == True\nopposite_Signs(-2,-0) == False\nopposite_Signs(2,0) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,0) == False\nopposite_Signs(2,-2) == True\nopposite_Signs(2,-2) == False\nopposite_Signs(2,0) == True\nopposite_Signs(2,0) == False\nopposite_Signs(0,2) == False\nopposite_Signs(0,0) == False\nopposite_Signs(0,-2) == False\nopposite_Signs(0,-2) == False\nopposite_Signs(0,0) == False\nopposite_Signs(0,0) == False\nopposite_Signs(0,0) == False\nopposite_Signs(2,0) == False\nopposite_Signs(-2,0) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,0) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(2,0) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,0) == False\nopposite_Signs(2,-2) == True\nopposite_Signs(2,-2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(0,2) == False\nopposite_Signs(0,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == False\nopposite"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     opposite_Signs(2,3) == True, \"opposite_Signs is not correct\"\nassert     opposite_Signs(-4,-7) == True, \"opposite_Signs is not correct\"\nassert     opposite_Signs(-9,-3) == False, \"opposite_Signs is not correct\"\nassert     opposite_Signs(2,3) == True, \"opposite_Signs is not correct\"\nassert     opposite_Signs(-4,-7) == True, \"opposite_Signs is not correct\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(-5, -5)     == True\nassert     opposite_Signs(-5, -4)     == False\nassert     opposite_Signs(-5, 5)     == True\nassert     opposite_Signs(-4, -5)     == False\nassert     opposite_Signs(5, -5)     == True\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 15\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 5\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 7\nassert     is_octagonal(5) == 8\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_octagonal(0)     == 1\nassert     is_octagonal(1)     == 28\nassert     is_octagonal(2)     == 144\nassert     is_octagonal(3)     == 512\nassert     is_octagonal(4)     == 1524\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('Test passed')\n\n\n\n\ndef is_equal(first, second): \n    '''\n    Write a function that takes as input two integers\n    and returns True if the sum of their squares is\n    equal to the difference between them, False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(count_Substrings('1'))\nprint(count_Substrings('23'))\nprint(count_Substrings('12'))\nprint(count_Substrings('1234'))\nprint(count_Substrings('1234'))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Substrings('1234321') == 10\nassert     count_Substrings('123456789') == 20\nassert     count_Substrings('12321311') == 3\nassert     count_Substrings('12321311') == 3\nassert     count_Substrings('123') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings(\"\") == 0\nassert     count_Substrings(\"abc\") == 0\nassert     count_Substrings(\"a\") == 1\nassert     count_Substrings(\"as\") == 1\nassert     count_Substrings(\"123\") == 3\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"12345\") == 10, \"Should be 10\"\nassert     count_Substrings(\"1234\") == 5, \"Should be 5\"\nassert     count_Substrings(\"12\") == 3, \"Should be 3\"\n\ndef find_CountOfSubstrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings(\"123456\") == 6, \"Wrong\"\nassert     count_Substrings(\"1234\") == 1, \"Wrong\"\nassert     count_Substrings(\"0\") == 1, \"Wrong\"\nassert     count_Substrings(\"0\") == 1, \"Wrong\"\nassert     count_Substrings(\"0\") == 1, \"Wrong\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Substrings(\"awaglknagawunagwkwagl\") == 4, \"First\"\nassert     count_Substrings(\"a\") == 1, \"Second\"\nassert count_Substrings(\"\") == 0, \"Third\"\nassert     count_Substrings(\"abc\") == 1, \"Fourth\"\nassert count_Substrings(\"ab\") == 1, \"Fifth\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings(\"1234\") == 1\nassert     count_Substrings(\"1234\") == 2\nassert     count_Substrings(\"1234\") == 3\nassert     count_Substrings(\"123456\") == 6\nassert     count_Substrings(\"123456\") == 7\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     smallest_num([3,3,2,4,2]) == 2, \\\n    \"smallest_num([3,3,2,4,2]) should return 2\"\nassert     smallest_num([1,2,3,4,5]) == 1, \\\n    \"smallest_num([1,2,3,4,5]) should return 1\"\nassert     smallest_num([1,1,1,1,1]) == 1, \\\n    \"smallest_num([1,1,1,1,1]) should return 1\"\nassert     smallest_num([]) == None, \\\n    \"smallest_num([]) should return None\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert smallest_num([3,2,1,5]) == 1,'sorted list should be 1'\nassert smallest_num([3,2,1,5,7]) == 1,'sorted list should be 1'\nassert smallest_num([3,3,3,2,1]) == 1,'sorted list should be 1'\nassert smallest_num([3,3,3,2,1,5]) == 1,'sorted list should be 1'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_num([1,2,3,4]) == 1\nassert     smallest_num([1,1,1,2]) == 1\nassert     smallest_num([]) == None\nassert     smallest_num([1,2,3]) == 1\nassert     smallest_num([1,1,1,1]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef even_num(xs):\n    '''\n    Write a python function to find even numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_num([10, 20, 30, 40, 50]) == 20\nassert     smallest_num([]) == None\nassert     smallest_num([1, 2, 3, 4, 5]) == 1\nprint('Correct')\n\n'''\nWrite a function that takes a list of numbers and finds \nthe list of numbers that are divisible by 5.\n'''\ndef divisible_by_five(numbers):\n    '''\n    Write a python function to find list of numbers that are divisible by 5.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([2, 3, 4, 5, 7, 2, 3]) == 2, 'invalid'\nassert     smallest_num([2, 3, 4, 5, 7, 8, 2, 3]) == 2, 'invalid'\nassert     smallest_num([2, 3, 4, 5, 7, 8, 2, 3, 9, 11, 2]) == 2, 'invalid'\nassert     smallest_num([1,2,3,4,5]) == 1, 'invalid'\nassert     smallest_num([-1,-2,3,4,5]) == -1, 'invalid'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint ('\\n### Test 1 ###')\ntest_list1 = (1,2,3,4,5,6,7)\nmax_difference(test_list1)\nassert 4 == max_difference(test_list1), \"Wrong max_difference\"\n\nassert 2 == max_difference((1,2,3)), \"Wrong max_difference\""
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmax_difference([]) == None\nassert max_difference([(1, 5), (2, 6), (3, 7)]) == 1\nassert max_difference([(1, 5), (2, 6), (3, 7), (4, 8)]) == 1\nassert max_difference([(1, 5), (2, 6), (3, 7), (4, 8), (5, 9)]) == 0\nassert max_difference([(1, 5), (2, 6), (3, 7), (4, 8), (5, 9), (6, 10)]) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_difference([(1, 3), (2, 4), (3, 5), (4, 6), (5, 7), (6, 8), (7, 9), (8, 10), (9, 11), (10, 12), (11, 13), (12, 14), (13, 15), (14, 16), (15, 17), (16, 18), (17, 19), (18, 20), (19, 21), (20, 22), (21, 23), (22, 24), (23, 25), (24, 26), (25, 27), (26, 28), (27, 29), (28, 30), (29, 31), (30, 32), (31, 33), (32, 34), (33, 35), (34, 36), (35, 37), (36, 38), (37, 39), (38, 40), (39, 41), (40, 42), (41, 43), (42, 44), (43, 45), (44, 46), (45, 47), (46, 48), (47, 49), (48, 50), (49, 51), (50, 52), (51, 53), (52, 54), (53, 55), (54, 56), (55, 57), (56, 58), (57, 59), (58, 60), (59, 61), (60, 62), (61, 63), (62, 64), (63, 65), (64, 66), (65, 67), (66, 68), (67, 69), (68, 70), (69, 71), (70, 72), (71, 73), (72, 74), (73, 75), (74, 76), (75, 77), (76, 78), (77, 79), (78, 80), (79, 81), (80, 82), (81, 83), (82, 84), (83, 85), (84, 86), (85, 87), (86, 88), (87, 89), (88, 90), (89, 91), (90, 92), (91, 93), (92, 94), (93, 95), (94, 96), (95, 97), (96, 98), (97, 99), (98, 100), (99, 101), (100, 102), (101, 103), (102, 104), (103, 105), (104, 106), (105, 107), (106, 108), (107, 109), (108, 110), (109, 111), (110, 112), (111, 113), (112, 114), (113, 115), (114, 116), (115, 117), (116, 118), (117, 119), (118, 120), (119, 121), (120, 122), (121, 123), (122, 124), (123, 125), (124, 126), (125, 127), (126, 128), (127, 129), (128, 130), (129, 131), (130, 132), (131, 133), (132, 134), (133, 135), (134, 136), (135, 137), (136, 138), (137, 139), (138, 140), (139, 141), (140, 142), (141, 143), (142, 144), (143, 145), (144, 146), (145, 147), (146, 148), (147, 149), (148, 150), (149, 151), (150, 152), (151, 153), (152, 154), (153, 155), (154, 156), (155, 157), (156, 158), (157, 159), (158, 160), (159, 161), (160, 162), (161, 163), (162, 164), (163, 165), (164, 166), (165, 167), (166, 168), (167, 169), (168, 170), (169, 171), (170, 172), (171, 173), (172, 174), (173, 175), (174, 176), (175, 177), (176, 178), (177, 179), (178, 180), (179, 181), (180, 182), (181, 183), (182, 184), (183, 185), (184, 186), (185, 187), (186, 188), (187, 189), (188, 190), (189, 191), (190, 192), (191, 193), (192, 194), (193, 195), (194, 196), (195, 197), (196, 198), (197, 199), (198, 200), (199, 201), (200, 202), (201, 203), (202, 204), (203, 205), (204, 206), (205, 207), (206, 208), (207, 209), (208, 210), (209, 211), (210, 212), (211, 213), (212, 214), (213, 215), (214, 216), (215, 217), (216, 218), (217, 219), (218, 220), (219, 221), (220, 222), (221, 223), (222, 224), (223, 225), (224, 226), (225, 227), (226, 228), (227, 229), (228, 230), (229, 231), (230, 232), (231, 233), (232, 234), (233, 235), (234, 236), (235, 237), (236, 238), (237, 239), (238, 240), (239, 241), (240, 242), (241, 243), (242, 244), (243, 245), (244, 246), (245, 247), (246, 248), (247, 249), (248, 250), (249, 251), (250, 252), (251, 253), (252, 254), (253, 255), (254, 254), (255, 254)])\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference(((1, 2), (3, 4), (5, 6))) == 1\nassert     max_difference(((1, 3), (2, 4), (3, 5), (7, 8))) == 1\nassert     max_difference(((0, -1), (1, -2), (2, -3), (3, -4))) == 2\nassert     max_difference(((0, 1), (1, 2), (2, 3), (3, 4))) == 0\nassert     max_difference(((10, -1), (11, -2), (12, -3), (13, -4))) == 4\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_difference([(1, 2), (2, 3), (3, 4), (5, 6), (6, 7), (7, 8), (8, 9)]) == 0, \"incorrect value\"\nassert max_difference([(4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]) == 4, \"incorrect value\"\nassert max_difference([(9, 10), (9, 11), (10, 11), (10, 12)]) == 10, \"incorrect value\"\nassert max_difference([(9, 10), (9, 11), (10, 11), (10, 12)]) == 10, \"incorrect value\"\nassert max_difference([(9, 10), (9, 11), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (11, 10), (11, 11), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (12, 10), (12, 11), (12, 12), (12, 13), (12, 14), (12, 15), (12, 16), (13, 10), (13, 11), (13, 12), (13, 13), (13, 14), (13, 15), (13, 16), (14, 10), (14, 11), (14, 12), (14, 13), (14, 14), (14, 15), (14, 16), (15, 10), (15, 11), (15, 12), (15, 13), (15, 14), (15, 16), (16, 10), (16, 11), (16, 12), (16, 13), (16, 14), (16, 15), (16, 16)]) == 16, \"incorrect value\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_difference([ (1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20) ]) == 6\nassert     max_difference([ (1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26), (27,28), (29,30) ]) == 10\nassert     max_difference([ (1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26), (27,28), (29,30), (31,32), (33,34), (35,36), (37,38), (39,40), (41,42) ]) == 16\nassert     max_difference([ (1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26), (27,28), (29,30), (31,32), (33,34), (35,36), (37,38), (39,40), (41,42), (43,44), (45,46), (47,48), (49,50), (51,52), (53,54), (55,56), (57,58), (59,60), (61,62), (63,64), (65,66), (67,68), (69,70), (71,72), (73,74), (75,76), (77,78), (79,80), (81,82), (83,84), (85,86), (87,88), (89,90), (91,92), (93,94), (95,96), (97,98), (99,100), (101,102), (103,104), (105,106), (107,108), (109,110), (111,112), (113,114), (115,116), (117,118), (119,120), (121,122), (123,124), (125,126), (127,128), (129,130), (131,132), (133,134), (135,136), (137,138), (139,140), (141,142), (143,144), (145,146), (147,148), (149,150), (151,152), (153,154), (155,156), (157,158), (159,160), (161,162), (163,164), (165,166), (167,168), (169,170), (171,172), (173,174), (175,176), (177,178), (179,180), (181,182), (183,184), (185,186), (187,188), (189,190), (191,192), (193,194), (195,196), (197,198), (199,200), (201,202), (203,204), (205,206), (207,208), (209,210), (211,212), (213,214), (215,216), (217,218), (219,220), (221,222), (223,224), (225,226), (227,228), (229,230), (231,232), (233,234), (235,236), (237,238), (239,240), (241,242), (243,244), (245,246), (247,248), (249,250), (251,252), (253,254), (255,256), (257,258), (259,260), (261,262), (263,264), (265,266), (267,268), (269,270), (271,272), (273,274), (275,276), (277,278), (279,280), (281,282), (283,284), (285,286), (287,288), (289,290), (291,292), (293,294), (295,296), (297,298), (299,300), (301,302), (303,304), (305,306), (307,308), (309,310), (311,312), (313,314), (315,316), (317,318), (319,320), (321,322), (323,324), (325,326), (327,328), (329,330), (331,332), (333,334), (335,336), (337,338), (339,340), (341,342), (343,344), (345,346), (347,348), (349,350), (351,352), (353,354), (355,356), (357,358), (359,360), (361,362), (363,364), (365,366), (367,368), (369,370), (371,372), (373,374), (375,376), (377,378), (379,380), (381,382), (383,384), (385,386), (387,388), (389,390), (391,392), (393,394), (395,396), (397,398), (399,400), (401,402), (403,404), (405,406), (407,408), (409,410), (411,412), (413,414), (415,416), (417,418), (419,420), (421,422), (423,424), (425,426), (427,428), (429,430), (431,432), (433,434), (435,436), (437,438), (439,440), (441,442), (443,444), (445,446), (447,448), (449,450), (451,452), (453,454), (455,456), (457,458), (459,460), (461,462), (463,464), (465,466), (467,468), (469,470), (471,472), (473,474), (475,476), (477,478), (479,480), (481,482), (483,484), (485,486), (487,488), (489,490), (491,492), (493,494), (495,496), (497,498), (499,500), (501,502), (503,504), (505,506), (507,508), (509,510), (511,512), (513,514), (515,516), (517,518), (519,520), (521,522), (523,524), (525,526), (527,528), (529,530), (531,532), (533,534), (535,536), (537,538), (539,540), (541,542), (543,544), (545,546), (547,548), (549,550), (551,552), (553,554), (555,556), (557,558), (559,560), (561,562), (563,564), (565,566), (567,568), (569,570), (571,572), (573,574), (575,576), (577,578), (579,580), (581,582), (583,584), (585,586), (587,588), (589,590), (591,592), (593,594), (595,596), (597,598), (599,600), (601,602), (603,604), (605,606), (607,608), (609,610), (611,612), (613,614), (615,616), (617,618), (619,620), (621,622), (623,624), (625,626), (627,628), (629,630), (631,632), (633,634), (635,636), (637,638), (639,640), (641,642), (643,644), (645,646), (647,648), (649,650), (651,652), (653,654), (655,656), (657,658), (659,660), (661,662), (663,664), (665,666), (667,668), (669,670), (671,672), (673,674), (675,676), (677,67"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference([(1, 2), (2, 3), (5, 6)]) == 3, \"should return 3\"\nassert     max_difference([(1, 2), (2, 3), (3, 4)]) == 2, \"should return 2\"\nassert     max_difference([(1, 2), (2, 3), (4, 5)]) == 0, \"should return 0\"\nassert     max_difference([(1, 2), (2, 3), (4, 5), (4, 6)]) == 2, \"should return 2\"\nassert     max_difference([]) == 0, \"should return 0\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_difference_count(test_list):\n    '''\n    Write a function to count the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference([(1,3),(4,5),(2,4)]) == -1\nassert     max_difference([(1,4),(1,2),(3,5),(1,3)]) == 2\nassert     max_difference([(1,4),(1,2),(3,5),(4,6)]) == 2\nassert     max_difference([(1,4),(1,2),(3,5),(4,5)]) == 0\nassert     max_difference([(1,4),(1,2),(3,5),(1,6)]) == -1\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks([(1, 1), (5, 3), (10, 2), (2, 1), (5, 1), (1, 2)]) == [(1, 1), (1, 2), (2, 1), (5, 3), (5, 1), (10, 2)], 'incorrect subject_marks() output'\nassert     subject_marks([(10, 2), (5, 3), (1, 2), (2, 1), (5, 1), (1, 1)]) == [(1, 1), (1, 2), (2, 1), (5, 3), (5, 1), (10, 2)], 'incorrect subject_marks() output'\nassert     subject_marks([(1, 2), (5, 3), (1, 2), (5, 1), (1, 1)]) == [(1, 1), (1, 2), (5, 3), (5, 1), (1, 2)], 'incorrect subject_marks() output'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks(tuple([(5,    1), (4,    5), (3,    7), (2,    8), (1,    2)])) ==    \n    [(2,    8), (3,    7), (4,    5), (5,    1), (6,    0)]\n    print('Test passed!')"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(2,2),(3,1),(5,2),(4,4)]) == [(2,2),(3,1),(4,4),(5,2)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     subject_marks([(1,2), (10,10), (8,5), (15,3)]) ==    [(10, 10), (15, 3), (8, 5), (1, 2)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert subject_marks([(1,2),(4,3),(2,1)]) == [(1,2),(4,3),(2,1)]\nassert subject_marks([(2,2),(4,3),(2,1)]) == [(2,2),(4,3),(2,1)]\nassert subject_marks([(2,3),(4,3),(2,1)]) == [(2,3),(4,3),(2,1)]\nassert subject_marks([(4,4),(4,3),(2,1)]) == [(4,4),(4,3),(2,1)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     subject_marks([(1, 5), (2, 2), (3, 7), (4, 4)]) == \\\n        [(2, 2), (3, 7), (4, 4), (1, 5)]\n\nprint('passed all the tests')\n\n\n'''\nWrite a function to remove duplicates from a list and returns the unique list.\n'''\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsubject_marks([(5,'H'),(4,'B'),(9,'A'),(7,'B'),(7,'A'),(7,'A')]) == \n[(7,'A'),(7,'A'),(7,'A'),(7,'A'),(9,'A'),(4,'B'),(5,'H')]\n\n\n\ndef add_marks(name,marks):\n    '''\n    Write a function that will return a dictionary containing student's name and total marks.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks(\n        [(3, 5), (4, 6), (2, 1)]) ==\n    [(2, 1), (4, 6), (3, 5)]\nassert subject_marks(\n        [(2, 2), (1, 1), (2, 1)]) ==\n    [(2, 2), (1, 1), (2, 1)]\nassert subject_marks(\n        [(1, 1), (1, 1), (2, 1)]) ==\n    [(1, 1), (1, 1), (2, 1)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     subject_marks([('History',90),('Math',80),('English',70),('Science',60)]) == \\\n        [('English',70),('Math',80),('History',90),('Science',60)], \"Wrong result\"\nprint(\"Passed\")\n\ndef longest_subsequence(sequence):\n    \"\"\"\n    Write a function that takes a sequence of integers and returns the longest subsequence of that sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks([(1,2),(3,4),(5,6)]) == [(1, 2), (5, 6), (3, 4)]\nassert     subject_marks([(1,100),(2,5),(1,6),(1,8),(1,2),(4,7),(5,9),(1,7),(2,3)]) == [(1, 7), (1, 2), (2, 3), (1, 8), (4, 7), (5, 9), (1, 6), (1, 5), (2, 4)]\nassert     subject_marks([(1,2),(2,3),(3,4),(1,4),(5,6),(1,7),(2,7),(1,8),(1,2)]) == [(1, 2), (1, 2), (1, 2), (1, 4), (1, 7), (1, 8), (2, 7), (2, 7), (2, 3)]\n\ndef country_marks(countrymarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         recursive_list_sum(['abc', 'def', 'ghi']) == sum([1,2,3])\nassert         recursive_list_sum(['abc', 'def', 'ghi', 'jkl']) == sum([1,2,3,4])\nassert         recursive_list_sum(['abc', 'def', 'ghi', 'jkl','mno']) == sum([1,2,3,4,5])\nassert         recursive_list_sum(['abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz']) == sum([1,2,3,4,5,6,7,8,9,10])\nassert         recursive_list_sum([1, 2, 3, 4, 5]) == 10\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([[1,2,3], \n                                [4,5,6],\n                                [7,8,9,10]]) == 10\nassert     recursive_list_sum([1,2,3]) == 6\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([[]]) == 0\nassert     recursive_list_sum([[1,2],[3]]) == 5\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    recursive_list_sum([1,2,3,4,5]) == 15\n    recursive_list_sum([1,2,3,4,5,6]) == 21\n    recursive_list_sum([]) == 0\n    recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n    recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 121314155"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    recursive_list_sum([[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]]) == 10\n    recursive_list_sum([[1, 2], [3, 4, 5, 6], [7], [8], [9, 10]]) == 37\n    recursive_list_sum([[1], [2, 3], [4], [5]]) == 15\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # print(recursive_list_sum([[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]]))\n    # print(recursive_list_sum([[1], [2, 3], [4], [5]]))\n    # print(recursive_list_sum([[1]]))"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert recursive_list_sum([1, 2, 3]) == 6\nassert recursive_list_sum([1, 2, 3, [4, 5, 6], 7]) == 13\n\ndef recursive_list_sum_skip(data_list, skip_value):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([1,2,3,4,5])     == 15, \"wrong answer\"\nassert     recursive_list_sum([1,2,3])     == 6, \"wrong answer\"\nassert     recursive_list_sum([])     == 0, \"wrong answer\"\nassert     recursive_list_sum([1,2,3,4,5,6,7,8]) == 21, \"wrong answer\"\nassert     recursive_list_sum([1,2,3,4,5,6,7,8,9,10]) == 36, \"wrong answer\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrecursive_list_sum([1, 2, 3, 4, 5, 6]) == 21\nassert \nrecursive_list_sum([1, 1, 1, 1]) == 2\nassert \nrecursive_list_sum([1, 1, 1, 1, 1]) == 2\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([10,20,30,40,50,0,60,70,80,90])==5\nassert     pos_count([0,1,2,3,4,5,-10,-20])==5\nassert     pos_count([-5,-10,20,30,40,50,0,60,70,80,90])==0\nassert     pos_count([-1])==0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pos_count([1,3,4,6,5]) == 4\nassert     pos_count([-2,-5,-6,-7,-8]) == 4\nassert     pos_count([-1,-2,-3,-4,-5,-6]) == 6\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef pos_count_init(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    You can use init method to initialize the variables.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([-1, 0, 1, 2, 3, 4, 5]) == 6, 'pos_count() function not working as expected'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([-1, -2, 3, 1, -4, -5, -6, -7, -8, -9, 0]) == 0\nassert     pos_count([-1, -2, -3, 1, -4, -5, -6, -7, -8, -9, 0]) == 0\nassert     pos_count([-1, -2, -3, 1, -4, -5, -6, -7, -8, -9, -10]) == 1\nassert     pos_count([-1, -2, -3, 1, -4, -5, -6, -7, -8, -9, 10]) == 1\nassert     pos_count([-1, -2, -3, 1, -4, -5, -6, -7, -8, -9, -10, -100]) == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_count(list):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([-4, 8, 1, 0, -5, 2]) == 3, \"test failed\"\nassert pos_count([1, 2, 3, 0, 0]) == 4, \"test failed\"\nassert pos_count([2, 1, 2, -3, -4]) == 2, \"test failed\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 10\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert bell_number(1) == 1, \"1\"\nassert bell_number(2) == 2, \"2\"\nassert bell_number(3) == 5, \"3\"\nassert bell_number(4) == 7, \"4\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(1) == 2\nassert     bell_number(2) == 3\nassert     bell_number(5) == 6\nassert     bell_number(9) == 12\nassert     bell_number(10) == 13\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_number(1) == 1, \"Not equal\"\nassert     bell_number(2) == 2, \"Not equal\"\nassert     bell_number(4) == 8, \"Not equal\"\nassert     bell_number(5) == 11, \"Not equal\"\nassert     bell_number(6) == 12, \"Not equal\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(5) == 7\nassert     bell_number(3) == 6\nassert     bell_number(0) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(1) == 2\nassert     bell_number(2) == 5\nassert     bell_number(3) == 10\nassert     bell_number(4) == 35\nassert     bell_number(5) == 252\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_number(1) == 1, \"wrong\"\nassert     bell_number(2) == 2, \"wrong\"\nassert     bell_number(3) == 5, \"wrong\"\nassert     bell_number(4) == 10, \"wrong\"\nassert     bell_number(5) == 22, \"wrong\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 14\nassert     bell_number(5) == 42\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_number([1, 2, 3, 4]) == 6\nassert     bell_number([2, 2, 3, 4]) == 4\nassert     bell_number([2, 2, 2, 3]) == 3\nassert     bell_number([3, 3, 4, 4]) == 7\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_Monotonic([1,5,4,3,2,1]) == True\nassert is_Monotonic([1,5,4,3,2,1,1]) == True\nassert is_Monotonic([-1,5,4,3,2,1]) == True\nassert is_Monotonic([1,5,4,3,2,2]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Monotonic([1,2,3])==True\nassert is_Monotonic([1,1,1])==False\nassert is_Monotonic([1,2,1])==False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_Monotonic([1, 2, 3, 4]) == False\nis_Monotonic([1, 3, 2]) == True\nis_Monotonic([3, 5, 7]) == True\nis_Monotonic([1,1,1,1]) == True\nis_Monotonic([1, 1, 1, 2]) == False\nis_Monotonic([1, 1, 2, 1]) == False\nis_Monotonic([1, 1, 2]) == True\nis_Monotonic([1, 2, 1, 1]) == True\nis_Monotonic([1, 2, 1]) == True\nis_Monotonic([1, 2, 1, 1, 1]) == False\nis_Monotonic([1, 2, 1, 2, 1]) == False\nis_Monotonic([1, 2, 3, 4, 5]) == False\nis_Monotonic([]) == True\nis_Monotonic([0]) == False\nis_Monotonic([-1]) == False\nis_Monotonic([-1, 2, 1]) == False\nis_Monotonic([1, 1, 1, 1, 1]) == False\nis_Monotonic([1, 1, 1, 2]) == False\nis_Monotonic([-2, -3, -4, -5, -6, -7]) == False"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Monotonic([2, 2, 2, 2, 2]) == True, \"Wrong\"\nassert     is_Monotonic([2, 1, 2, 1]) == True, \"Wrong\"\nassert     is_Monotonic([1, 2, 2, 1]) == False, \"Wrong\"\n\nprint(\"All test cases passed\""
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Monotonic([1, 1, 2, 3, 5]) == False\nassert     is_Monotonic([1, 1, 2, 3, 5, 5, 5, 7]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5]) == False\nassert     is_Monotonic([1, 2, 3, 4, 5, 6]) == False\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nA = [1,4,3,2]\nprint(is_Monotonic(A))"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([1,1,2,2,2,3,3]) == True\nassert is_Monotonic([1,2,2,1]) == False\nassert is_Monotonic([1,1,2]) == True\nassert is_Monotonic([1,1,2,3,2,1]) == False"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Monotonic([1,1,2,3,3,4,6]) == False \nassert     is_Monotonic([1,1,2,3,4,4]) == True \nassert     is_Monotonic([5,5,5,5,5,5]) == True \nassert     is_Monotonic([5,5,5,5,4,4,3,3,3,2,2,1,1,1]) == True \nassert     is_Monotonic([1,2,3,4,5,6,7,8,9,10]) == False \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Monotonic([1, 2, 2, 3, 3]) == True\nassert     is_Monotonic([1, 1, 1, 2, 2, 2, 2, 2]) == False\nassert     is_Monotonic([2, 2, 2]) == True\nassert     is_Monotonic([2, 1, 2]) == True\nassert     is_Monotonic([1, 2, 2, 3, 3, 3, 3]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Monotonic([1,2,3,2,4,2,5]) == True, \"should return True\"\nassert     is_Monotonic([4,3,5,2,3,4,5]) == True, \"should return True\"\nassert     is_Monotonic([5,2,3,4,2,1]) == False, \"should return False\"\nassert     is_Monotonic([3,4,5,1,2]) == True, \"should return True\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_sublist([1,2,3,4], [1,2,3,4]) == True, 'Failed'\nassert is_sublist([1,2,3,4], [1,2,3,4, 5]) == True, 'Failed'\nassert is_sublist([1,2,3,4], [4,5]) == False, 'Failed'\nassert is_sublist([1,2,3,4], [4,5, 6]) == False, 'Failed'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_sublist([1,2,3], [1,2])\nassert is_sublist([1,2,3], [1,2,3])\nassert is_sublist([1,2,3], [2])\nassert is_sublist([1,2,3], [3])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([0, 1, 2, 3], [0, 1, 2, 3]) == False, 'is_sublist([0, 1, 2, 3], [0, 1, 2, 3]) must be False'\nassert     is_sublist([0, 1, 2, 3], [0, 1, 2, 4]) == True, 'is_sublist([0, 1, 2, 3], [0, 1, 2, 4]) must be True'\nassert     is_sublist([0, 1, 2, 3], [1, 2, 3]) == True, 'is_sublist([0, 1, 2, 3], [1, 2, 3]) must be True'\nassert     is_sublist([0, 1, 2, 3], [1, 2, 3, 4]) == False, 'is_sublist([0, 1, 2, 3], [1, 2, 3, 4]) must be False'\nassert     is_sublist([0, 1, 2, 3, 4], [1, 2, 3, 4]) == False, 'is_sublist([0, 1, 2, 3, 4], [1, 2, 3, 4]) must be False'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_subset(l1, l2):\n    '''\n    Write a function to check whether a list is a subset of another list.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist(['a', 'b', 'c', 'd'], ['a', 'b', 'c']) is True\nassert     is_sublist(['a', 'b', 'c', 'd'], ['a', 'b', 'e']) is False\nassert     is_sublist(['a', 'b', 'c', 'd'], ['e']) is False\nassert     is_sublist(['a', 'b', 'c', 'd'], ['a', 'b', 'c']) is False\nassert     is_sublist(['a', 'b', 'c', 'd'], ['d']) is False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([], []) == False, 'Empty list'\nassert     is_sublist([1, 2], []) == False, 'Empty sublist'\nassert     is_sublist([1, 2, 3, 4, 5], []) == False, 'Empty sublist'\nassert     is_sublist([1, 2, 3, 4], [1, 2]) == False, 'Not a sublist'\nassert     is_sublist([1, 2, 3, 4], [1, 2, 3]) == True, 'Sublist'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple([(1,2),(1,2),(1,2),(1,2)]) == True\nassert     find_equal_tuple([(1,2),(1,2),(1,2)]) == False\nassert     find_equal_tuple([(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == False\nassert     find_equal_tuple([(1,2),(1,2),(1,2),(1,2)]) == True\nassert     find_equal_tuple([(1,2),(1,2),(1,2),(1,2)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2)]) == True, 'test1'\nassert     find_equal_tuple([(1, 2), (1, 2), (1, 2, 3)]) == False, 'test2'\nassert     find_equal_tuple([(1, 2), (1, 3), (2, 2)]) == False, 'test3'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]) == True, 'Wrong Output'\nassert     find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == False, 'Wrong Output'\nassert     find_equal_tuple([(1, 2), (3, 4)]) == False, 'Wrong Output'\n\nprint('Test passed'"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nfind_equal_tuple([[1, 2, 3], [2, 3, 4]])\nfind_equal_tuple([[1, 2, 3, 4], [2, 3, 4], [1, 2, 3]])\nfind_equal_tuple([[1, 2, 3], [2, 3, 4, 5]])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == True\nassert     find_equal_tuple([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4]]) == False\nassert     find_equal_tuple([[1, 2], [1, 2], [1, 2], [1, 2]]) == False\n\nprint(\"test cases run\""
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple( [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]] ) == True, \"Fail\"\nassert     find_equal_tuple( [[1, 2, 3], [4, 5, 6]] ) == False, \"Fail\"\nassert     find_equal_tuple( [[1, 2], [3, 4, 5], [6, 7, 8]] ) == True, \"Fail\"\nassert     find_equal_tuple( [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]] ) == True, \"Fail\"\nassert     find_equal_tuple( [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13]] ) == False, \"Fail\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple([(1,), (2,), (3,)]    ) == False\nassert     find_equal_tuple([(1,), (2,), (3,), (4,)]    ) == True\nassert     find_equal_tuple([(1,2), (1,2), (1,2), (1,2)]    ) == False\nassert     find_equal_tuple([(1,), (1,), (1,), (1,), (1,2), (1,2)]    ) == True\nassert     find_equal_tuple([(1,2,), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2)]    ) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(1,2),(2,2)])     ==    False\nassert     find_equal_tuple([(1,2),(2,2)])     ==    False\nassert     find_equal_tuple([(1,2),(2,2)])     ==    False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_equal_tuple([(1,2), (1,2), (1,2), (1,2)]) == True\nfind_equal_tuple([(1,2), (1,2,3), (1,2,3)]) == False\n\ndef find_same_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal elements or not.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    comb_sort([1, 2, 5, 6, 0, 2, 8, 1, 0]) == [0, 0, 1, 1, 2, 2, 5, 6, 8]\nassert \n    comb_sort([1, 2, 5, 6, 0, 2, 8, 1, 0]) == [0, 0, 1, 1, 2, 2, 5, 6, 8]\nassert \n    comb_sort([2, 5, 6, 0, 2, 8, 1, 0]) == [0, 0, 1, 1, 2, 2, 5, 6, 8]\nassert \n    comb_sort([2, 5, 6, 0, 2, 8, 1, 0]) == [0, 0, 1, 1, 2, 2, 5, 6, 8]\nassert \n    comb_sort([2, 5, 6, 0, 2, 8, 1, 0]) == [0, 0, 1, 1, 2, 2, 5, 6, 8]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     comb_sort([2,2,2,2]) == [2,2,2,2]\nassert     comb_sort([2,1,3,0]) == [0,1,2,3]\nassert     comb_sort([0,0,0,0]) == [0,0,0,0]\nassert     comb_sort([0]) == [0]\nassert     comb_sort([2,3,5,1]) == [1,3,5,2]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\nassert     comb_sort([3,2,1,2]) == [1,2,2,3]\nassert     comb_sort([3,2,1,2,1]) == [1,1,1,2,2,3]\nassert     comb_sort([3,2,1,2,1,2,1]) == [1,1,1,1,2,2,3]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     comb_sort([-1,-2,-3,-4,0]) == [-4, -3, -2, -1, 0]\nassert     comb_sort([-2,-1,-1,-1]) == [-1,-1,-1,-2]\n\ndef comb_sort2(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n'''\n7.Write a function that takes a list of numbers and returns its product.\n'''\ndef product(nums):\n    '''\n    Write a function to multiply all the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dif_Square(1) == False, 'Testcase 1 Failed'\nassert     dif_Square(2) == True, 'Testcase 2 Failed'\nassert     dif_Square(5) == False, 'Testcase 3 Failed'\nassert     dif_Square(7) == False, 'Testcase 4 Failed'\nassert     dif_Square(12) == True, 'Testcase 5 Failed'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndif_Square(3) == True\ndif_Square(12) == True\ndif_Square(15) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dif_Square(4) == True, 'Invalid Test Case'\nassert     dif_Square(12) == False, 'Invalid Test Case'\nassert     dif_Square(14) == True, 'Invalid Test Case'\nassert     dif_Square(15) == False, 'Invalid Test Case'\nassert     dif_Square(16) == True, 'Invalid Test Case'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dif_Square(1) == True, \"Wrong answer\"\nassert     dif_Square(9) == True, \"Wrong answer\"\nassert     dif_Square(11) == True, \"Wrong answer\"\nassert     dif_Square(49) == True, \"Wrong answer\"\nassert     dif_Square(60) == False, \"Wrong answer\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(11) == True, '11 - 1^2 = 10 - 1^2'\nassert     dif_Square(12) == False, '12 - 1^2 = 11 - 1^2'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dif_Square(9) == False, \"Wrong Answer: This function should return True\"\nassert     dif_Square(8) == True, \"Wrong Answer: This function should return True\"\nassert     dif_Square(7) == True, \"Wrong Answer: This function should return True\"\nassert     dif_Square(6) == False, \"Wrong Answer: This function should return False\"\nassert     dif_Square(5) == True, \"Wrong Answer: This function should return True\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dif_Square(1) == False, \"Error - 1\"\nassert     dif_Square(2) == False, \"Error - 2\"\nassert     dif_Square(9) == True, \"Error - 9\"\nassert     dif_Square(4) == True, \"Error - 4\"\nassert     dif_Square(6) == True, \"Error - 6\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dif_Square(1) == True, \"dif_Square(1) should be True\"\nassert     dif_Square(3) == True, \"dif_Square(3) should be True\"\nassert     dif_Square(5) == False, \"dif_Square(5) should be False\"\nassert     dif_Square(7) == False, \"dif_Square(7) should be False\"\nassert     dif_Square(10) == True, \"dif_Square(10) should be True\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_samepatterns([['', '', '', ''], ['', '', '', '']], patterns=[[], ['', '', '', '']]),\\\n        print('The answer is wrong')\n\nassert is_samepatterns([['', '', '', ''], ['', '', '', '']], patterns=[[''], ['', '', '', '']]),\\\n        print('The answer is wrong')\n\nassert is_samepatterns([['', '', '', ''], ['', '', '', '']], patterns=[[''], ['', '', '', ''], ['', '', '', '']]),\\\n        print('The answer is wrong')\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns([\"red\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns([], []) == True, 'Given input is an empty array'\nassert     is_samepatterns([], ['pattern1']) == False, 'Given input is an empty array'\nassert     is_samepatterns(['pattern1', 'pattern2'], ['pattern1', 'pattern2']) == True, 'First and Second pattern is the same'\nassert     is_samepatterns(['pattern1', 'pattern2'], ['pattern1', 'pattern2', 'pattern1', 'pattern3']) == False, 'Both patterns are not the same'\nassert     is_samepatterns(['pattern1', 'pattern2'], ['pattern1', 'pattern2', 'pattern1', 'pattern1']) == False, 'First pattern is not longer than second'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'], ['red', 'violet', 'blue', 'yellow', 'indigo', 'orange', 'green']) == True, \"Please check your code\"\nassert     is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'], ['red', 'violet', 'blue', 'yellow', 'indigo', 'orange', 'green']) == False, \"Please check your code\"\nassert     is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'], ['red', 'violet', 'blue', 'yellow', 'indigo', 'orange', 'green', 'blue']) == False, \"Please check your code\"\nassert     is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'], ['red', 'violet', 'blue', 'yellow', 'indigo', 'orange', 'green']) == False, \"Please check your code\"\nassert     is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'], ['red', 'violet', 'blue', 'yellow', 'indigo', 'orange', 'green', 'blue']) == False, \"Please check your code\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_samepatterns([[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 2, 2]], [[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 2, 2]]) == True\nassert     is_samepatterns([[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 2, 2]], [[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 1, 2]]) == False\nassert     is_samepatterns([[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 2, 2]], [[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 2, 2]]) == True\nassert     is_samepatterns([[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 2, 2]], [[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 2, 2], [1, 1, 2]]) == False\nassert     is_samepatterns([[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 1, 2], [1, 2, 2]], [[1, 2, 1], [2, 1, 1], [2, 2, 1], [1, 2, 2], [1, 1, 1]]) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns(colors, patterns) == True\nassert     is_samepatterns(colors, patterns2) == True\nassert     is_samepatterns(colors, patterns3) == False\nassert     is_samepatterns(colors, patterns4) == False\nassert     is_samepatterns(colors, patterns5) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_samepatterns(colors, patterns) == True\nassert     is_samepatterns(colors, patterns2) == False\n\n'''\nWrite a function to check whether the given string is a k-anagram of a given word.\n'''\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \n    "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # expected result\n    answer = \n    return answer\n\n\n\nprint(find_tuples([(5,),(2,3,4),(5,),(8,9),(2,),(3,5)],2))\nprint(find_tuples([(5,),(2,3,4),(5,),(8,9),(2,),(3,5)],3))\nprint(find_tuples([(5,),(2,3,4),(5,),(8,9),(2,),(3,5)],5))\nprint(find_tuples([(5,),(2,3,4),(5,),(8,9),(2,),(3,5)],6))\nprint(find_tuples([(5,),(2,3,4),(5,),(8,9),(2,),(3,5)],9))\nprint(find_tuples([(5,),(2,3,4),(5,),(8,9),(2,),(3,5)],10))\nprint(find_tuples([(5,),(2,3,4),(5,),(8,9),(2,),(3,5)],11))\nprint(find_tuples([(5,),(2,3,4),(5,),(8,9),(2,),(3,5)],12))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(5, 1), (9, 1), (7, 1)], 3) == [(5, 1), (7, 1)]\nassert     find_tuples([(5, 1), (9, 1), (7, 1)], 3) == [(5, 1), (7, 1)]\nassert     find_tuples([(5, 1), (9, 1), (7, 1)], 3) == [(5, 1), (7, 1)]\nassert     find_tuples([(5, 1), (9, 1), (7, 1)], 3) == [(5, 1), (7, 1)]\nassert     find_tuples([(5, 1), (9, 1), (7, 1)], 3) == [(5, 1), (7, 1)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nOutput\n\n[(1, 2), (3, 4), (2, 4)]\n'''"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(2,3,4), (5,6), (7,8)], 2) == [(2,3,4), (5,6), (7,8)]\nassert     find_tuples([(2,3,4), (5,6), (7,8)], 3) == []\nassert     find_tuples([(2,3,4), (5,6), (7,8)], 4) == []\nassert     find_tuples([(2,3,4), (5,6), (7,8)], 5) == [(2,3,4,5,6)]\nassert     find_tuples([(2,3,4), (5,6), (7,8)], 6) == [(2,3,4,5,6,7)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(3,4), (5,6), (7,8)], 3) == [(3, 4)]\nassert     find_tuples([(3,4), (5,6), (7,8)], 2) == [(3, 4), (7, 8)]\nassert     find_tuples([(3,4), (5,6), (7,8)], 5) == [(3, 4), (5, 6), (7, 8)]\nassert     find_tuples([(3,4), (5,6), (7,8)], 7) == [(3, 4), (5, 6), (7, 8)]\nassert     find_tuples([(3,4), (5,6), (7,8)], 8) == [(3, 4), (5, 6), (7, 8)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 4) == [(1,2), (3,4), (5,6)]\nassert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 3) == [(1,2), (3,4), (5,6)]\nassert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 5) == [(1,2), (3,4), (5,6)]\nassert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 1) == []\nassert     find_tuples([], 1) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(1, 2, 3, 4, 5), (2, 4, 6, 8), (3, 6, 9)], 3) == [(1, 2, 3, 4, 5)]\nassert     find_tuples([(1, 2, 3, 4, 5), (2, 4, 6, 8), (3, 6, 9)], 5) == [(1, 2, 3, 4, 5), (2, 4, 6, 8, 9)]\nassert     find_tuples([(1, 2, 3, 4, 5), (2, 4, 6, 8), (3, 6, 9)], 7) == []\nassert     find_tuples([(1, 2, 3, 4, 5), (2, 4, 6, 8), (3, 6, 9)], 11) == [(1, 2, 3, 4, 5, 6, 8, 9)]\nassert     find_tuples([(1, 2, 3, 4, 5), (2, 4, 6, 8), (3, 6, 9)], 13) == [(1, 2, 3, 4, 5, 6, 8, 9)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_tuples([(1, 2), (2, 3), (3, 4)], 3) == [(1, 3)]\nfind_tuples([(1, 2), (2, 3), (3, 4)], 2) == [(2, 3)]\nfind_tuples([(1, 2), (2, 3), (3, 4)], 1) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nfind_tuples([(1, 2), (2, 3), (3, 4)], 0) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_tuples([(1, 2), (2, 4)], 1) == [[(1, 2), (2, 4)]]\nassert find_tuples([(1, 2), (2, 4)], 2) == [[(1, 2), (2, 4)]]\nassert find_tuples([(1, 2), (2, 4), (3, 4)], 1) == []\nassert find_tuples([(1, 2), (2, 4), (3, 4)], 2) == [[(1, 2), (2, 4), (3, 4)]]\nassert find_tuples([(1, 2), (2, 4), (3, 4)], 3) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 3) == [(1,2), (3,4)]\nassert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 2) == [(1,2), (3,4), (5,6)]\nassert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 4) == [(1,2), (3,4)]\nassert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 0) == []\nassert     find_tuples([(1,2), (3,4), (5,6), (7,8)], 5) == []\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(11) == True, \"is_Diff has incorrect output\"\nassert     is_Diff(10) == False, \"is_Diff has incorrect output\"\nassert     is_Diff(7) == False, \"is_Diff has incorrect output\"\nassert     is_Diff(5) == False, \"is_Diff has incorrect output\"\nassert     is_Diff(0) == False, \"is_Diff has incorrect output\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \ndef sum_digits(n):\n    '''\n    Write a python function to find sum of all digits of the given number.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Diff(11) == True, \"Error, is_Diff() returned wrong value\"\nassert     is_Diff(12) == False, \"Error, is_Diff() returned wrong value\"\nassert     is_Diff(13) == True, \"Error, is_Diff() returned wrong value\"\nassert     is_Diff(14) == True, \"Error, is_Diff() returned wrong value\"\nassert     is_Diff(15) == True, \"Error, is_Diff() returned wrong value\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef min_max(n1,n2,n3):\n    if n1 > n2 and n1 > n3:\n        return n1, n2, n3\n    elif n2 > n3 and n2 > n1:\n        return n2, n3, n1\n    else:\n        return n3, n2, n1\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_Diff(0) == False, \"is_Diff(0): Expected False\"\nassert is_Diff(11) == True, \"is_Diff(11): Expected True\"\nassert is_Diff(21) == False, \"is_Diff(21): Expected False\"\nassert is_Diff(22) == False, \"is_Diff(22): Expected False\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Diff(10)     == False\nassert     is_Diff(11)     == True\nassert     is_Diff(100)     == True\nassert     is_Diff(100)     == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_even(n):\n    '''\n    Write a python function to find whether a number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_Diff(11) == True, \"Your function must return True if the given number is divisible by 11\"\nassert is_Diff(10) == False, \"Your function must return True if the given number is divisible by 11\"\nassert is_Diff(20) == False, \"Your function must return True if the given number is divisible by 11\"\nassert is_Diff(22) == True, \"Your function must return True if the given number is divisible by 11\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert word_len('') == True\nassert word_len('a') == True\nassert word_len('aaaa') == True\nassert word_len('a') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     word_len('hello') == True\nassert     word_len('one') == False\nassert     word_len('') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef palindrome(s): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    Note: A palindrome is defined as a string that is written the same forward and backward.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len('') == False\nassert     word_len('python') == True\nassert     word_len('t') == True\nassert     word_len('j') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert word_len('hello') == False\nassert word_len('d') == False\nassert word_len('dog') == True\nassert word_len('DOG') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     word_len('hail')    == False, 'Word length is even'\nassert     word_len('hello')    == False, 'Word length is even'\nassert     word_len('hello world')    == True, 'Word length is odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 8\nassert     tetrahedral_number(3) == 20\n\ndef fibonacci_number(n): \n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 7\nassert     tetrahedral_number(4) == 12\nassert     tetrahedral_number(5) == 22\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntetrahedral_number(1) == 1\nassert tetrahedral_number(3) == 4\nassert tetrahedral_number(10) == 26\nassert tetrahedral_number(20) == 268\nassert tetrahedral_number(30) == 720\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_of_eights(n):\n    '''\n    Given an integer n, return the sum of its digits that are 8's.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef tetrahedral_number_logarithm(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nDefine a function is_prime to determine whether or not a given number is prime.\n'''\ndef is_prime(number): \n    '''\n    Write a function is_prime that determines whether or not a given number is prime.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 14\nassert     tetrahedral_number(3) == 44\nassert     tetrahedral_number(4) == 120\nassert     tetrahedral_number(5) == 720\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(volume_sphere(4))\nprint(volume_sphere(5))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_sphere(2) == 4.0, 'incorrect'\nassert     volume_sphere(2.1) == 'Volume of sphere should be 4.0', 'incorrect'\n\ndef calculate_perimeter_of_cylinder(r, h):\n    '''\n    Write a function to calculate the perimeter of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_sphere(1) == 4\nassert     volume_sphere(2) == 56\nassert     volume_sphere(3) == 231\nassert     volume_sphere(4) == 624\nassert     volume_sphere(5) == 3114\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_sphere(3) == math.pi * 3**2 * 3, \"your function returned incorrect value\"\nassert     volume_sphere(2) == math.pi * 4**3, \"your function returned incorrect value\"\nassert     volume_sphere(1) == math.pi * 4**3, \"your function returned incorrect value\"\nassert     volume_sphere(0.5) == math.pi * 4**3, \"your function returned incorrect value\"\nassert     volume_sphere(0) == math.pi * 4**3, \"your function returned incorrect value\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert volume_sphere(1) == 32.33, 'Test 1 did not pass'\nassert volume_sphere(0) == 'Error'\n\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert math.isclose(volume_sphere(1), 4.18)\nassert math.isclose(volume_sphere(2), 78.25)\nassert math.isclose(volume_sphere(3), 230.0)\nassert math.isclose(volume_sphere(4), 624.0)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef volume_cube(l,w,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_sphere(1.0) == math.pi*4*1**3/3\nassert     volume_sphere(2) == math.pi*4*2**3/3\nassert     volume_sphere(2.1) == math.pi*4*2.1**3/3\nassert     volume_sphere(2.5) == math.pi*4*2.5**3/3\nassert     volume_sphere(3) == math.pi*4*3**3/3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_sphere(1) == (4./3.)*math.pi*(1./3.)**3, \"Wrong answer.\"\nassert     volume_sphere(2) == (4./3.)*math.pi*(2./3.)**3, \"Wrong answer.\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char('sunny') == 65\nassert     get_Char('abcd') == 97\nassert     get_Char('a') == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char('z') == 26, 'The function did not return the correct output.'\nassert     get_Char('a') == 1, 'The function did not return the correct output.'\nassert     get_Char('m') == 3, 'The function did not return the correct output.'\nassert     get_Char('f') == 24, 'The function did not return the correct output.'\nassert     get_Char('i') == 61, 'The function did not return the correct output.'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char('abcdefghijklmnopqrstuvwxyz') == 26\nassert     get_Char('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert     get_Char('aBcdefghijklmnopqrstuvwxyz') == 25\nassert     get_Char('abcdefghijklmnopqrstuvwxyz') == 26"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char(\"ABC\") == 27\nassert     get_Char(\"ABC\") == 4\nassert     get_Char(\"ABC\") == 4\nassert     get_Char(\"ABC\") == 4\nassert     get_Char(\"ABC\") == 27\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char('M') == ord('M')\nassert     get_Char('M') == ord('M')\nassert     get_Char('N') == ord('N')\nassert     get_Char('H') == ord('H')\nassert     get_Char('a') == ord('a')\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_Char1(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char(\"shubham\") == 85\nassert     get_Char(\"goodmorning\") == 96\nassert     get_Char(\"heyy\") == 96\nassert     get_Char(\"verygood\") == 108\nassert     get_Char(\"very\") == 108\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(\"c\") == 65\nassert     get_Char(\"\") == 0\nassert     get_Char(\"m\") == 109\nassert     get_Char(\"!\") == 33\nassert     get_Char(\"$\") == 36\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char('abc') == (0 + 64 + 65 + 66)%26\nassert     get_Char('ABC') == (0 + 65 + 66 + 67)%26\nassert     get_Char('a') == (0 + 65)%26\nassert     get_Char('A') == (0 + 65)%26\nassert     get_Char('4') == (0 + 71)%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char(\" \") == 0, \"Fail the test case 1\"\nassert     get_Char(\"a\") == 1, \"Fail the test case 2\"\nassert     get_Char(\"ABC\") == 0, \"Fail the test case 3\"\nassert     get_Char(\"$%^&\") == 0, \"Fail the test case 4\"\nassert     get_Char(\"ABCabc\") == 1, \"Fail the test case 5\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequence(0) == 1, f'Wrong value returned: {sequence(0)}'\nassert     sequence(1) == 2, f'Wrong value returned: {sequence(1)}'\nassert     sequence(2) == 4, f'Wrong value returned: {sequence(2)}'\nassert     sequence(3) == 7, f'Wrong value returned: {sequence(3)}'\nassert     sequence(4) == 13, f'Wrong value returned: {sequence(4)}'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequence(1) == 1 \nassert     sequence(2) == 1 \nassert     sequence(3) == 2 \nassert     sequence(4) == 3 \nassert     sequence(5) == 4 \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef odd_numbers_list(): \n    '''\n    Write a function that will list all odd numbers between 1 and n.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsequence(1) == 1\nsequence(5) == 13\nsequence(10) == 21\nsequence(20) == 27\nsequence(25) == 37\nsequence(30) == 43\nsequence(35) == 49\nsequence(40) == 61\nsequence(45) == 67\nsequence(50) == 71\nsequence(55) == 73\nsequence(60) == 79\nsequence(65) == 83\nsequence(70) == 89\nsequence(75) == 97\nsequence(80) == 101\nsequence(85) == 101\nsequence(90) == 103\nsequence(95) == 103\nsequence(100) == 107\nsequence(105) == 107\nsequence(110) == 109\nsequence(115) == 111\nsequence(120) == 113\nsequence(125) == 113\nsequence(130) == 127\nsequence(135) == 127\nsequence(140) == 131\nsequence(145) == 133\nsequence(150) == 137\nsequence(155) == 141\nsequence(160) == 145\nsequence(165) == 149\nsequence(170) == 153\nsequence(175) == 157\nsequence(180) == 161\nsequence(185) == 165\nsequence(190) == 169\nsequence(195) == 173\nsequence(200) == 177\nsequence(205) == 181\nsequence(210) == 183\nsequence(215) == 183\nsequence(220) == 187\nsequence(225) == 193\nsequence(230) == 199\nsequence(235) == 211\nsequence(240) == 223\nsequence(245) == 225\nsequence(250) == 227\nsequence(255) == 229\nsequence(260) == 231\nsequence(265) == 233\nsequence(270) == 239\nsequence(275) == 241\nsequence(280) == 243\nsequence(285) == 247\nsequence(290) == 251\nsequence(295) == 253\nsequence(300) == 257\nsequence(305) == 261\nsequence(310) == 263\nsequence(315) == 269\nsequence(320) == 271\nsequence(325) == 273\nsequence(330) == 277\nsequence(335) == 281\nsequence(340) == 285\nsequence(345) == 289\nsequence(350) == 291\nsequence(355) == 293\nsequence(360) == 299\nsequence(365) == 301\nsequence(370) == 303\nsequence(375) == 307\nsequence(380) == 311\nsequence(385) == 313\nsequence(390) == 317\nsequence(395) == 331\nsequence(400) == 337\nsequence(405) == 343\nsequence(410) == 347\nsequence(415) == 353\nsequence(420) == 357\nsequence(425) == 361\nsequence(430) == 367\nsequence(435) == 373\nsequence(440) == 379\nsequence(445) == 383\nsequence(450) == 389\nsequence(455) == 391\nsequence(460) == 393\nsequence(465) == 397\nsequence(470) == 409\nsequence(475) == 417\nsequence(480) == 419\nsequence(485) == 423\nsequence(490) == 427\nsequence(495) == 431\nsequence(500) == 433\nsequence(505) == 439\nsequence(510) == 441\nsequence(515) == 443\nsequence(520) == 449\nsequence(525) == 457\nsequence(530) == 461\nsequence(535) == 463\nsequence(540) == 467\nsequence(545) == 479\nsequence(550) == 481\nsequence(555) == 483\nsequence(560) == 489\nsequence(565) == 491\nsequence(570) == 499\nsequence(575) == 503\nsequence(580) == 511\nsequence(585) == 513\nsequence(590) == 519\nsequence(595) == 521\nsequence(600) == 527\nsequence(605) == 529\nsequence(610) == 541\nsequence(615) == 547\nsequence(620) == 553\nsequence(625) == 557\nsequence(630) == 561\nsequence(635) == 563\nsequence(640) == 567\nsequence(645) == 569\nsequence(650) == 571\nsequence(655) == 577\nsequence(660) == 583\nsequence(665) == 589\nsequence(670) == 591\nsequence(675) == 593\nsequence(680) == 599\nsequence(685) == 603\nsequence(690) == 607\nsequence(695) == 611\nsequence(700) == 615\nsequence(705) == 617\nsequence(710) == 619\nsequence(715) == 623\nsequence(720) == 627\nsequence(725) == 629\nsequence(730) == 631\nsequence(735) == 633\nsequence(740) == 637\nsequence(745) == 641\nsequence(750) == 643\nsequence(755) == 647\nsequence(760) == 653\nsequence(765) == 657\nsequence(770) == 661\nsequence(775) == 667\nsequence(780) == 671\nsequence(785) == 673\nsequence(790) == 677\nsequence(795) == 681\nsequence(800) == 683\nsequence(805) == 687\nsequence(810) == 689\nsequence(815) == 691\nsequence(820) == 693\nsequence(825) == 697\nsequence(830) == 703\nsequence(835) == 709\nsequence(840) == 711\nsequence(845) == 713\nsequence(850) == 717\nsequence(855) == 719\nsequence(860) == 723\nsequence(865) == 727\nsequence(870) == 729\nsequence(875) == 731\nsequence(880) == 743\nsequence(885) == 751\nsequence(890) == 753\nsequence(895) == 757\nsequence(900) == 761\nsequence(905) == 763\nsequence(910) == 769\nsequence(915) == 773\nsequence(920) == 777\nsequence(925) == 779\nsequence(930) == 783\nsequence(935) == 787\nsequence(940) == 791\nsequence(945) == 793\nsequence(950) == 799\nsequence(955) == 803\nsequence(960) == 807\nsequence(965) == 811\nsequence(970) == 813\nsequence(975) == 817\nsequence(980) == 821\nsequence(985) == 823\nsequence(990) == 831\nsequence(995) == 833\nsequence(1000) == 839\nsequence(1005) == 841\nsequence(1010) == 843\nsequence(1015) == 847\nsequence(1020) == 853\nsequence(1025) == 857\nsequence(1030) == 861\nsequence(1035) == 863\nsequence(1040) == 867\nsequence(1045) == 869\nsequence(1050) == 871\nsequence(1055) == 873\nsequence(1060) == 877\nsequence(1065) == 881\nsequence(1070) == 883\nsequence(1075) == 887\nsequence(1080) == 891\nsequence(1085) == 893\nsequence(1090) == 897\nsequence(1095) == 901\nsequence(1100) == 903\nsequence(1105) == 907\nsequence(1110) == 911\nsequence(1115) == 913\nsequence(1120) == 917\nsequence(1125) == 919\nsequence(1130) == 921\nsequence(1135) == 923\nsequence(1140) == 929\nsequence(1145) == 931\nsequence(1150) == 943\nsequence(1155) == 949\nsequence(1160) == 951\nsequence(1165) == 953\nsequence(1170) == 957\nsequence(1175) == 961\nsequence(1180) == 963\nsequence(1185) == 967\nsequence(1190) == 971\nsequence(1195) == 973\nsequence(1200) == 977\nsequence(1205) == 981\nsequence(1210) == 983\nsequence(1215) == 987\nsequence(1220) == 991\nsequence(1225) == 993\nsequence(1230) == 997\nsequence(1235) == 1001\nsequence(1240) == 1003\nsequence(1245) == 1007\nsequence(1250) == 1011\nsequence(1255) == 1013\nsequence(1260) == 1019\nsequence(1265) == 1021\nsequence(1270) == 1023\nsequence(1275) == 1029"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequence(1) == 1, 'Wrong output'\nassert     sequence(2) == 2, 'Wrong output'\nassert     sequence(3) == 3, 'Wrong output'\nassert     sequence(4) == 4, 'Wrong output'\nassert     sequence(5) == 5, 'Wrong output'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef palindrome(s): \n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(10) == 50\nassert     surfacearea_sphere(0) == 0\nassert     surfacearea_sphere(2.5) == 50.08\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(surfacearea_sphere(1)) #  28.0\nprint(surfacearea_sphere(0)) #  0.0\nprint(surfacearea_sphere(2)) #  56.0\nprint(surfacearea_sphere(5)) #  330.0\nprint(surfacearea_sphere(10)) #  3462.0\nprint(surfacearea_sphere(100)) #  110689.0"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsurfacearea_sphere(2) == 32.60\nassert surfacearea_sphere(3) == 49.60\nassert surfacearea_sphere(4) == 65.60\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * (1**2) / 3\nassert     surfacearea_sphere(4) == 4 * math.pi * (4**2) / 3\nassert     surfacearea_sphere(3.5) == 4 * math.pi * (3.5**2) / 3\nassert     surfacearea_sphere(8) == 4 * math.pi * (8**2) / 3\n\ndef vol_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi\nassert surfacearea_sphere(2) == 4 * math.pi * 2\nassert surfacearea_sphere(3) == 4 * math.pi * 2 * 3\nassert surfacearea_sphere(4) == 4 * math.pi * 2 * 3 * 4\nassert surfacearea_sphere(5) == 4 * math.pi * 2 * 3 * 4 * 5\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(1.2) == 58.83\nassert surfacearea_sphere(1) == 33.81\nassert surfacearea_sphere(0) == 0.00\nassert surfacearea_sphere(3.5) == 153.34\nassert surfacearea_sphere(0.5) == 54.18\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_sphere(1) == 4\nassert     surfacearea_sphere(2) == 78\nassert     surfacearea_sphere(5) == 5040\n\ndef surfacearea_sphere_using_pi():\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nHere is the new version\n'''\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*(r**2))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 3\ncentered_hexagonal_number(3) == 5\ncentered_hexagonal_number(4) == 7\ncentered_hexagonal_number(5) == 11\ncentered_hexagonal_number(6) == 13\ncentered_hexagonal_number(7) == 15\ncentered_hexagonal_number(8) == 17\ncentered_hexagonal_number(9) == 19\ncentered_hexagonal_number(10) == 21\ncentered_hexagonal_number(11) == 23\ncentered_hexagonal_number(12) == 25\ncentered_hexagonal_number(13) == 27\ncentered_hexagonal_number(14) == 29\ncentered_hexagonal_number(15) == 31\ncentered_hexagonal_number(16) == 33\ncentered_hexagonal_number(17) == 35\ncentered_hexagonal_number(18) == 37\ncentered_hexagonal_number(19) == 39\ncentered_hexagonal_number(20) == 41\ncentered_hexagonal_number(21) == 43\ncentered_hexagonal_number(22) == 45\ncentered_hexagonal_number(23) == 47\ncentered_hexagonal_number(24) == 49\ncentered_hexagonal_number(25) == 51\ncentered_hexagonal_number(26) == 53\ncentered_hexagonal_number(27) == 55\ncentered_hexagonal_number(28) == 57\ncentered_hexagonal_number(29) == 59\ncentered_hexagonal_number(30) == 61\ncentered_hexagonal_number(31) == 63\ncentered_hexagonal_number(32) == 65\ncentered_hexagonal_number(33) == 67\ncentered_hexagonal_number(34) == 69\ncentered_hexagonal_number(35) == 71\ncentered_hexagonal_number(36) == 73\ncentered_hexagonal_number(37) == 75\ncentered_hexagonal_number(38) == 77\ncentered_hexagonal_number(39) == 79\ncentered_hexagonal_number(40) == 81\ncentered_hexagonal_number(41) == 83\ncentered_hexagonal_number(42) == 85\ncentered_hexagonal_number(43) == 87\ncentered_hexagonal_number(44) == 89\ncentered_hexagonal_number(45) == 91\ncentered_hexagonal_number(46) == 93\ncentered_hexagonal_number(47) == 95\ncentered_hexagonal_number(48) == 97\ncentered_hexagonal_number(49) == 99\ncentered_hexagonal_number(50) == 101\ncentered_hexagonal_number(51) == 103\ncentered_hexagonal_number(52) == 105\ncentered_hexagonal_number(53) == 107\ncentered_hexagonal_number(54) == 109\ncentered_hexagonal_number(55) == 111\ncentered_hexagonal_number(56) == 113\ncentered_hexagonal_number(57) == 115\ncentered_hexagonal_number(58) == 117\ncentered_hexagonal_number(59) == 119\ncentered_hexagonal_number(60) == 121\ncentered_hexagonal_number(61) == 123\ncentered_hexagonal_number(62) == 125\ncentered_hexagonal_number(63) == 127\ncentered_hexagonal_number(64) == 129\ncentered_hexagonal_number(65) == 131\ncentered_hexagonal_number(66) == 133\ncentered_hexagonal_number(67) == 135\ncentered_hexagonal_number(68) == 137\ncentered_hexagonal_number(69) == 139\ncentered_hexagonal_number(70) == 141\ncentered_hexagonal_number(71) == 143\ncentered_hexagonal_number(72) == 145\ncentered_hexagonal_number(73) == 147\ncentered_hexagonal_number(74) == 149\ncentered_hexagonal_number(75) == 151\ncentered_hexagonal_number(76) == 153\ncentered_hexagonal_number(77) == 155\ncentered_hexagonal_number(78) == 157\ncentered_hexagonal_number(79) == 159\ncentered_hexagonal_number(80) == 161\ncentered_hexagonal_number(81) == 163\ncentered_hexagonal_number(82) == 165\ncentered_hexagonal_number(83) == 167\ncentered_hexagonal_number(84) == 169\ncentered_hexagonal_number(85) == 171\ncentered_hexagonal_number(86) == 173\ncentered_hexagonal_number(87) == 175\ncentered_hexagonal_number(88) == 177\ncentered_hexagonal_number(89) == 179\ncentered_hexagonal_number(90) == 181\ncentered_hexagonal_number(91) == 183\ncentered_hexagonal_number(92) == 185\ncentered_hexagonal_number(93) == 187\ncentered_hexagonal_number(94) == 189\ncentered_hexagonal_number(95) == 191\ncentered_hexagonal_number(96) == 193\ncentered_hexagonal_number(97) == 195\ncentered_hexagonal_number(98) == 197\ncentered_hexagonal_number(99) == 199\ncentered_hexagonal_number(100) == 201\ncentered_hexagonal_number(101) == 203\ncentered_hexagonal_number(102) == 205\ncentered_hexagonal_number(103) == 207\ncentered_hexagonal_number(104) == 209\ncentered_hexagonal_number(105) == 211\ncentered_hexagonal_number(106) == 213\ncentered_hexagonal_number(107) == 215\ncentered_hexagonal_number(108) == 217\ncentered_hexagonal_number(109) == 219\ncentered_hexagonal_number(110) == 221\ncentered_hexagonal_number(111) == 223\ncentered_hexagonal_number(112) == 225\ncentered_hexagonal_number(113) == 227\ncentered_hexagonal_number(114) == 229\ncentered_hexagonal_number(115) == 231\ncentered_hexagonal_number(116) == 233\ncentered_hexagonal_number(117) == 235\ncentered_hexagonal_number(118) == 237\ncentered_hexagonal_number(119) == 239\ncentered_hexagonal_number(120) == 241\ncentered_hexagonal_number(121) == 243\ncentered_hexagonal_number(122) == 245\ncentered_hexagonal_number(123) == 247\ncentered_hexagonal_number(124) == 249\ncentered_hexagonal_number(125) == 251\ncentered_hexagonal_number(126) == 253\ncentered_hexagonal_number(127) == 255\ncentered_hexagonal_number(128) == 257\ncentered_hexagonal_number(129) == 259\ncentered_hexagonal_number(130) == 261\ncentered_hexagonal_number(131) == 263\ncentered_hexagonal_number(132) == 265\ncentered_hexagonal_number(133) == 267\ncentered_hexagonal_number(134) == 269\ncentered_hexagonal_number(135) == 271\ncentered_hexagonal_number(136) == 273\ncentered_hexagonal_number(137) == 275\ncentered_hexagonal_number(138) == 277\ncentered_hexagonal_number(139) == 279\ncentered_hexagonal_number(140) == 281\ncentered_hexagonal_number(141) == 283\ncentered_hexagonal_number(142) == 285\ncentered_hexagonal_number(143) == 287\ncentered_hexagonal_number(144) == 289\ncentered_hexagonal_number(145) == 291\ncentered_hexagonal_number(146) == 293\ncentered_hexagonal_number(147) == 295\ncentered_hexagonal_number(148) == 297\ncentered_hexagonal_number(149) == 299\ncentered_hexagonal_number(150) == 301\ncentered_hexagonal_number(151) == 303\ncentered_hexagonal_number(152) == 305\ncentered_hexagonal_number(153) == 307\ncentered_hexagonal_number(154) == 309\ncentered_hexagonal_number(155) == 311\ncentered_hexagonal_number(156) == 313\ncentered_hexagonal_number(157) == 315\ncentered_hexagonal_number(158) == 317\ncentered_hexagonal_number(159) == 319\ncentered_hexagonal_number(160) == 321\ncentered_hexagonal_number(161) == 323\ncentered_hexagonal_number(162) == 325\ncentered_hexagonal_number(163) == 327\ncentered_hexagonal_number(164) == 329\ncentered_hexagonal_number(165) == 331\ncentered_hexagonal_number(166) == 333\ncentered_he"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(5) == 19\nassert     centered_hexagonal_number(20) == 89\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncentered_hexagonal_number(1) == 1\nassert \ncentered_hexagonal_number(2) == 3\nassert \ncentered_hexagonal_number(3) == 4\nassert \ncentered_hexagonal_number(4) == 7\nassert \ncentered_hexagonal_number(5) == 11\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 6\nassert     centered_hexagonal_number(4) == 10\nassert     centered_hexagonal_number(5) == 15\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(1) == 1, \"N=1\"\nassert     centered_hexagonal_number(2) == 4, \"N=2\"\nassert     centered_hexagonal_number(3) == 7, \"N=3\"\nassert     centered_hexagonal_number(4) == 10, \"N=4\"\nassert     centered_hexagonal_number(5) == 15, \"N=5\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (centered_hexagonal_number(1) == 1)\nassert (centered_hexagonal_number(3) == 27)\nassert (centered_hexagonal_number(5) == 536)\n\n\nimport math\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(3) == 8\nassert     centered_hexagonal_number(4) == 28\nassert     centered_hexagonal_number(5) == 108\nassert     centered_hexagonal_number(6) == 224\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncentered_hexagonal_number(0) == 0\nassert \ncentered_hexagonal_number(1) == 1\nassert \ncentered_hexagonal_number(2) == 1\nassert \ncentered_hexagonal_number(3) == 3\nassert \ncentered_hexagonal_number(4) == 5\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 3\ncentered_hexagonal_number(3) == 4\ncentered_hexagonal_number(4) == 5\ncentered_hexagonal_number(5) == 6\ncentered_hexagonal_number(6) == 7\ncentered_hexagonal_number(7) == 8\ncentered_hexagonal_number(8) == 9\ncentered_hexagonal_number(9) == 10\ncentered_hexagonal_number(10) == 11\ncentered_hexagonal_number(11) == 12\ncentered_hexagonal_number(12) == 13\ncentered_hexagonal_number(13) == 14\ncentered_hexagonal_number(14) == 15\ncentered_hexagonal_number(15) == 16\ncentered_hexagonal_number(16) == 17\ncentered_hexagonal_number(17) == 18\ncentered_hexagonal_number(18) == 19\ncentered_hexagonal_number(19) == 20\ncentered_hexagonal_number(20) == 21\ncentered_hexagonal_number(21) == 22\ncentered_hexagonal_number(22) == 23\ncentered_hexagonal_number(23) == 24\ncentered_hexagonal_number(24) == 25\ncentered_hexagonal_number(25) == 26\ncentered_hexagonal_number(26) == 27\ncentered_hexagonal_number(27) == 28\ncentered_hexagonal_number(28) == 29\ncentered_hexagonal_number(29) == 30\ncentered_hexagonal_number(30) == 31\ncentered_hexagonal_number(31) == 32\ncentered_hexagonal_number(32) == 33\ncentered_hexagonal_number(33) == 34\ncentered_hexagonal_number(34) == 35\ncentered_hexagonal_number(35) == 36\ncentered_hexagonal_number(36) == 37\ncentered_hexagonal_number(37) == 38\ncentered_hexagonal_number(38) == 39\ncentered_hexagonal_number(39) == 40\ncentered_hexagonal_number(40) == 41\ncentered_hexagonal_number(41) == 42\ncentered_hexagonal_number(42) == 43\ncentered_hexagonal_number(43) == 44\ncentered_hexagonal_number(44) == 45\ncentered_hexagonal_number(45) == 46\ncentered_hexagonal_number(46) == 47\ncentered_hexagonal_number(47) == 48\ncentered_hexagonal_number(48) == 49\ncentered_hexagonal_number(49) == 50\ncentered_hexagonal_number(50) == 51\ncentered_hexagonal_number(51) == 52\ncentered_hexagonal_number(52) == 53\ncentered_hexagonal_number(53) == 54\ncentered_hexagonal_number(54) == 55\ncentered_hexagonal_number(55) == 56\ncentered_hexagonal_number(56) == 57\ncentered_hexagonal_number(57) == 58\ncentered_hexagonal_number(58) == 59\ncentered_hexagonal_number(59) == 60\ncentered_hexagonal_number(60) == 61\ncentered_hexagonal_number(61) == 62\ncentered_hexagonal_number(62) == 63\ncentered_hexagonal_number(63) == 64\ncentered_hexagonal_number(64) == 65\ncentered_hexagonal_number(65) == 66\ncentered_hexagonal_number(66) == 67\ncentered_hexagonal_number(67) == 68\ncentered_hexagonal_number(68) == 69\ncentered_hexagonal_number(69) == 70\ncentered_hexagonal_number(70) == 71\ncentered_hexagonal_number(71) == 72\ncentered_hexagonal_number(72) == 73\ncentered_hexagonal_number(73) == 74\ncentered_hexagonal_number(74) == 75\ncentered_hexagonal_number(75) == 76\ncentered_hexagonal_number(76) == 77\ncentered_hexagonal_number(77) == 78\ncentered_hexagonal_number(78) == 79\ncentered_hexagonal_number(79) == 80\ncentered_hexagonal_number(80) == 81\ncentered_hexagonal_number(81) == 82\ncentered_hexagonal_number(82) == 83\ncentered_hexagonal_number(83) == 84\ncentered_hexagonal_number(84) == 85\ncentered_hexagonal_number(85) == 86\ncentered_hexagonal_number(86) == 87\ncentered_hexagonal_number(87) == 88\ncentered_hexagonal_number(88) == 89\ncentered_hexagonal_number(89) == 90\ncentered_hexagonal_number(90) == 91\ncentered_hexagonal_number(91) == 92\ncentered_hexagonal_number(92) == 93\ncentered_hexagonal_number(93) == 94\ncentered_hexagonal_number(94) == 95\ncentered_hexagonal_number(95) == 96\ncentered_hexagonal_number(96) == 97\ncentered_hexagonal_number(97) == 98\ncentered_hexagonal_number(98) == 99\ncentered_hexagonal_number(99) == 100\ncentered_hexagonal_number(100) == 101\ncentered_hexagonal_number(101) == 102\ncentered_hexagonal_number(102) == 103\ncentered_hexagonal_number(103) == 104\ncentered_hexagonal_number(104) == 105\ncentered_hexagonal_number(105) == 106\ncentered_hexagonal_number(106) == 107\ncentered_hexagonal_number(107) == 108\ncentered_hexagonal_number(108) == 109\ncentered_hexagonal_number(109) == 110\ncentered_hexagonal_number(110) == 111\ncentered_hexagonal_number(111) == 112\ncentered_hexagonal_number(112) == 113\ncentered_hexagonal_number(113) == 114\ncentered_hexagonal_number(114) == 115\ncentered_hexagonal_number(115) == 116\ncentered_hexagonal_number(116) == 117\ncentered_hexagonal_number(117) == 118\ncentered_hexagonal_number(118) == 119\ncentered_hexagonal_number(119) == 120\ncentered_hexagonal_number(120) == 121\ncentered_hexagonal_number(121) == 122\ncentered_hexagonal_number(122) == 123\ncentered_hexagonal_number(123) == 124\ncentered_hexagonal_number(124) == 125\ncentered_hexagonal_number(125) == 126\ncentered_hexagonal_number(126) == 127\ncentered_hexagonal_number(127) == 128\ncentered_hexagonal_number(128) == 129\ncentered_hexagonal_number(129) == 130\ncentered_hexagonal_number(130) == 131\ncentered_hexagonal_number(131) == 132\ncentered_hexagonal_number(132) == 133\ncentered_hexagonal_number(133) == 134\ncentered_hexagonal_number(134) == 135\ncentered_hexagonal_number(135) == 136\ncentered_hexagonal_number(136) == 137\ncentered_hexagonal_number(137) == 138\ncentered_hexagonal_number(138) == 139\ncentered_hexagonal_number(139) == 140\ncentered_hexagonal_number(140) == 141\ncentered_hexagonal_number(141) == 142\ncentered_hexagonal_number(142) == 143\ncentered_hexagonal_number(143) == 144\ncentered_hexagonal_number(144) == 145\ncentered_hexagonal_number(145) == 146\ncentered_hexagonal_number(146) == 147\ncentered_hexagonal_number(147) == 148\ncentered_hexagonal_number(148) == 149\ncentered_hexagonal_number(149) == 150\ncentered_hexagonal_number(150) == 151\ncentered_hexagonal_number(151) == 152\ncentered_hexagonal_number(152) == 153\ncentered_hexagonal_number(153) == 154\ncentered_hexagonal_number(154) == 155\ncentered_hexagonal_number(155) == 156\ncentered_hexagonal_number(156) == 157\ncentered_hexagonal_number(157) == 158\ncentered_hexagonal_number(158) == 159\ncentered_hexagonal_number(159) == 160\ncentered_hexagonal_number(160) == 161\ncentered_hexagonal_number(161) == 162\ncentered_hexagonal_number(162) == 163\ncentered_hexagonal_number(163) == 164\ncentered_hexagonal_number(164) == 165\ncentered_hexagonal_number(165) == 166\ncentered_hexagonal_number(166) == 167\ncentered_hexagona"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({\"a\":1,\"b\":2},{\"b\":3,\"c\":4}, {\"d\":5,\"e\":6}) == {\"a\":1,\"b\":3,\"c\":4,\"d\":5,\"e\":6}\nassert     merge_dictionaries_three({\"a\":1,\"b\":2},{\"b\":3,\"c\":4}, {\"c\":5,\"d\":6}) == {\"a\":1,\"b\":3,\"c\":5,\"d\":6}\nassert     merge_dictionaries_three({\"a\":1,\"b\":2},{\"b\":3,\"c\":4}, {\"a\":2}) == {\"a\":2,\"b\":3,\"c\":4}\nprint(\"Test case 1 passed\")\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3},\n{'d': 4, 'e': 5},\n{'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\nassert     merge_dictionaries_three({}, {'d': 4, 'e': 5},\n{'f': 6, 'g': 7}) == {'d': 4, 'e': 5, 'f': 6, 'g': 7}\nassert     merge_dictionaries_three({'d': 4, 'e': 5}, {},\n{'f': 6, 'g': 7}) == {'d': 4, 'e': 5, 'f': 6, 'g': 7}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3},\n{'a': 2, 'b': 4, 'c': 6},\n{'a': 1, 'b': 2, 'c': 3, 'd': 3, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 3, 'e': 5, 'a': 2, 'b': 4, 'c': 6}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3},\n{'d': 4, 'e': 5},\n{'a': 2, 'b': 4, 'c': 6, 'f': 7, 'g': 8}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'a': 2, 'b': 4, 'c': 6, 'f': 7, 'g': 8}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 1, 'c': 3}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 1, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({\"k1\": 100, \"k2\": 200}, {\"k3\": 300, \"k4\": 400}, {\"k5\": 500, \"k6\": 600}) == {\"k1\": 100, \"k2\": 200, \"k3\": 300, \"k4\": 400, \"k5\": 500, \"k6\": 600}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({'p': 5}, {'p': -2}, {'a': 1, 'b': 3, 'c': 2}) == {'p': -2, 'a': 1, 'b': 3, 'c': 2}\nassert merge_dictionaries_three({'p': 5}, {'a': 1, 'b': 3, 'c': 2}, {'d': 4, 'e': -1}) == {'p': 5, 'a': 1, 'b': 3, 'c': 2, 'd': 4, 'e': -1}"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({\"Jan\":1,\"Feb\":2,\"March\":3},{\"Jan\":1,\"Feb\":2},{\"Feb\":2,\"March\":3}) == {\"Jan\":1,\"Feb\":2,\"March\":6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({},{},{}) == {}\nassert merge_dictionaries_three({'a':1},{},{}) == {'a':1}\nassert merge_dictionaries_three({},{'b':2},{}) == {'b':2}\nassert merge_dictionaries_three({},{},{'c':3}) == {'c':3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'd': 4}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'd': 4}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'd': 4, 'e': 5}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'd': 4}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'd': 4}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three(\n            {'a': 1, 'b': 2},\n            {'a': 10, 'c': 20},\n            {'c': 30, 'd': 40}) == {'a': 10, 'b': 2, 'c': 30, 'd': 40}\n\n\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into one dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef merge_dictionaries_three_error(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three(dict1 = {'A':1,'B':2,'C':3},dict2 = {'A':1,'B':2,'D':4},dict3 = {'E':2,'F':4}) == {'A':1,'B':2,'C':3,'D':4,'E':2,'F':4}\n\ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     freq_count([]) == {}, 'Empty list'\nassert freq_count([1,2,3]) == {1:3, 2:1, 3:1}, 'Not an ordered list'\nassert freq_count([3,1,3,1,1,1,3,1,3,1,1,1]) == {1:6, 3:5}, 'More than one occurence'\nassert freq_count([1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3]) == {1:10, 2:8, 3:6}, 'More than one occurence'\nassert freq_count([1,2,1,1,1,1,2,1,2,1,1,1,1,1,1]) == {1:7, 2:5}, 'Repeat each elem'\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([1, 2, 3, 4, 5, 1, 3, 1, 5, 1, 2, 4, 3]) == {'1': 4, '2': 3, '3': 3, '4': 2, '5': 2, '5': 1, '3': 1}\nassert     freq_count([1, 2, 3, 4, 5]) == {'1': 2, '2': 1, '3': 1, '4': 1, '5': 1}\nassert     freq_count([1, 2, 3, 1, 2, 4, 3]) == {'1': 2, '2': 2, '3': 1, '4': 1}\nassert     freq_count([1, 2, 3, 4, 5, 5, 3, 3, 2, 4, 2, 1, 1, 2, 4, 3]) == {'1': 3, '2': 3, '3': 2, '4': 2, '5': 3, '5': 2, '3': 1, '4': 1}\nassert     freq_count([1, 2, 3, 1, 2, 3, 4, 3]) == {'1': 3, '2': 2, '3': 2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Tests:\")\nassert freq_count([1,2,2,3,4,5]) == {1:1, 2:3, 3:2, 4:1, 5:1}\nassert freq_count(['a', 'b', 'c']) == {'a':1, 'b':1, 'c':1}\nassert freq_count([]) == {}\nassert freq_count([1,2,3,4,5]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     freq_count([1,2,2,3,4,5,6]) == {1: 3, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1}\nassert     freq_count([1,2,2,3,4,5,6,1,2,2,3,4,5,6]) == {1: 4, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1}\nassert     freq_count([1,1,1,1,1,1,1]) == {1: 5}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_power_of(x, y):\n    '''\n    Write a function to check if x is a power of y.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     freq_count([1,2,3,4]) == {1:3, 2:2, 3:1, 4:1}\nassert     freq_count([]) == {}\nassert     freq_count([0,1,2,3,4,5]) == {0:1, 1:1, 2:1, 3:1, 4:1, 5:1}\n\ndef freq_count1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     freq_count([1,2,3,4]) == {1:3, 2:2, 3:1, 4:1}, 'incorrect'\nassert     freq_count([-1,1,-2,1,2,1]) == {-1:3, -2:2, 1:5}, 'incorrect'\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count([1, 1, 1, 2, 2, 3]) == {\n        1: 3, 2: 2, 3: 1\n    }\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nclosest_num(1) == 0\nassert \nclosest_num(5) == 4\nassert \nclosest_num(10) == 9\nassert \nclosest_num(20) == 19\nassert \nclosest_num(21) == 21\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef closest_num(n):\n    '''\n    Given a number, find the closest smaller number than n.\n    '''\n    assert n > 0 and n <= 10**9\n    dp = [-1] * (n+1)\n    dp[n] = -1\n\n    for i in range(n+1, 1, -1):\n        # from n\n        if i < n and dp[i-1]!= -1:\n            dp[i] = dp[i-1]\n        else:\n            # from i-1\n            if i-2 >= 0 and dp[i-2]!= -1:\n                dp[i] = dp[i-2]\n            else:\n                # from i-2\n                if i-3 >= 0 and dp[i-3]!= -1:\n                    dp[i] = min(i, dp[i-3])\n                else:\n                    # from i-3\n                    if i-4 >= 0 and dp[i-4]!= -1:\n                        dp[i] = min(i, dp[i-4])\n                    else:\n                        # from i-4\n                        if i-5 >= 0 and dp[i-5]!= -1:\n                            dp[i] = min(i, dp[i-5])\n                        else:\n                            # from i-5\n                            if i-6 >= 0 and dp[i-6]!= -1:\n                                dp[i] = min(i, dp[i-6])\n                            else:\n                                # from i-6\n                                if i-7 >= 0 and dp[i-7]!= -1:\n                                    dp[i] = min(i, dp[i-7])\n                                else:\n                                    # from i-7\n                                    if i-8 >= 0 and dp[i-8]!= -1:\n                                        dp[i] = min(i, dp[i-8])\n                                    else:\n                                        # from i-8\n                                        if i-9 >= 0 and dp[i-9]!= -1:\n                                            dp[i] = min(i, dp[i-9])\n                                        else:\n                                            # from i-9\n                                            if i-10 >= 0 and dp[i-10]!= -1:\n                                                dp[i] = min(i, dp[i-10])\n                                            else:\n                                                # from i-10\n                                                if i-11 >= 0 and dp[i-11]!= -1:\n                                                    dp[i] = min(i, dp[i-11])\n                                                else:\n                                                    # from i-11\n                                                    if i-12 >= 0 and dp[i-12]!= -1:\n                                                        dp[i] = min(i, dp[i-12])\n                                                    else:\n                                                        # from i-12\n                                                        if i-13 >= 0 and dp[i-13]!= -1:\n                                                            dp[i] = min(i, dp[i-13])\n                                                        else:\n                                                            # from i-13\n                                                            if i-14 >= 0 and dp[i-14]!= -1:\n                                                                dp[i] = min(i, dp[i-14])\n                                                            else:\n                                                                # from i-14\n                                                                if i-15 >= 0 and dp[i-15]!= -1:\n                                                                    dp[i] = min(i, dp[i-15])\n                                                                else:\n                                                                    # from i-15\n                                                                    if i-16 >= 0 and dp[i-16]!= -1:\n                                                                        dp[i] = min(i, dp[i-16])\n                                                                    else:\n                                                                        # from i-16\n                                                                        if i-17 >= 0 and dp[i-17]!= -1:\n                                                                            dp[i] = min(i, dp[i-17])\n                                                                        else:\n                                                                            # from i-17\n                                                                            if i-18 >= 0 and dp[i-18]!= -1:\n                                                                                dp[i] = min(i, dp[i-18])\n                                                                            else:\n                                                                                # from i-18\n                                                                                if i-19 >= 0 and dp[i-19]!= -1:\n                                                                                    dp[i] = min(i, dp[i-19])\n                                                                                else:\n                                                                                    # from i-19\n                                                                                    if i-20 >= 0 and dp[i-20]!= -1:\n                                                                                        dp[i] = min(i, dp[i-20])\n                                                                                    else:\n                                                                                        # from i-20\n                                                                                        if i-21 >= 0 and dp[i-21]!= -1:\n                                                                                            dp[i] = min(i, dp[i-21])\n                                                                                        else:\n                                                                                            # from i-21\n                                                                                            if i-22 >= 0 and dp[i-22]!= -1:\n                                                                                                dp[i] = min(i, dp[i-22])\n                                                                                            else:\n                                                                                                # from i-22\n                                                                                                if i-23 >= 0 and dp[i-23]!= -1:\n                                                                                                dp[i] = min(i, dp[i-23])\n                                                                                            else:\n                                                                                                # from i-23\n                                                                                                if i-24 >= 0 and dp[i-24]!= -1:\n                                                                                                    dp[i] = min(i, dp[i-24])\n                                                                                                else:\n                                                                                                    # from i-24\n                                                                                                    if i-25 >= 0 and dp[i-25]!= -1:\n                                                                                                        dp[i] = min(i, dp[i-25])\n                                                                                                    else:\n                                                                                                        # from i-25\n                                                                                                        if i-26 >= 0 and dp[i-26]!= -1:\n                                                                                                            dp[i] = min(i, dp[i-26])\n                                                                                                        else:\n                                                                                                            # from i-26\n                                                                                                            if i-27 >= 0 and dp[i-27]!= -1:\n                                                                                                                dp[i] = min(i, dp[i-27])\n                                                                                                            else:\n                                                                                                                # from i-27\n                                                                                                                if i-28 >= 0 and dp[i-28]!= -1:\n                                                                                                                    dp[i] = min(i, dp[i-28])\n                                                                                                                else:\n                                                                                                                    # from i-28\n                                                                                                                    if i-29 >= 0 and dp[i-29]!= -1:\n                                                                                                                        dp[i] = min(i, dp[i-29])\n                                                                                                                    else:\n                                                                                                                        # from i-29\n                                                                                                                        if i-30 >= 0 and dp[i-30]!= -1:\n                                                                                                                            dp[i] = min(i, dp[i-30])\n                                                                                                                        else:\n                                                                                                                            # from i-30\n                                                                                                                            if i-31 >= 0 and dp[i-31]!= -1:\n                                                                                                                                dp[i] = min(i, dp[i-31])\n                                                                                                                            else:\n                                                                                                                                # from i-31\n                                                                                                                                if i-32 >= 0 and dp[i-32]!= -1:\n                                                                                                                                                dp[i] = min(i, dp[i-32])\n                                                                                                                                                # from i-32\n                                                                                                                                                if i-33 >= 0 and dp[i-33]!= -1:\n                                                                                                                                                    dp[i] = min(i, dp[i-33])\n                                                                                                                                                else:\n                                                                                                                                                    # from i-33\n                                                                                                                                                    if i-34 >= 0 and dp[i-34]!= -1:\n                                                                                                                                                        dp[i] = min(i, dp[i-34])\n                                                                                                        "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_num(2) == 1\nassert    closest_num(5) == 2\nassert    closest_num(9) == 3\nassert    closest_num(2**31) == 2**31\nassert    closest_num(0) == 0\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    closest_num(3) == 1\n    closest_num(5) == 2\n    closest_num(10) == 3\n    closest_num(12) == 4\n    closest_num(14) == 5\n    closest_num(17) == 6\n    closest_num(19) == 7\n    closest_num(21) == 8\n    closest_num(24) == 9\n    closest_num(25) == 10\n    closest_num(26) == 11\n    closest_num(27) == 12\n    closest_num(28) == 13\n    closest_num(29) == 14\n    closest_num(30) == 15\n    closest_num(31) == 16\n    closest_num(32) == 17\n    closest_num(33) == 18\n    closest_num(34) == 19\n    closest_num(35) == 20\n    closest_num(36) == 21\n    closest_num(37) == 22\n    closest_num(38) == 23\n    closest_num(39) == 24\n    closest_num(40) == 25\n    closest_num(41) == 26\n    closest_num(42) == 27\n    closest_num(43) == 28\n    closest_num(44) == 29\n    closest_num(45) == 30\n    closest_num(46) == 31\n    closest_num(47) == 32\n    closest_num(48) == 33\n    closest_num(49) == 34\n    closest_num(50) == 35\n    closest_num(51) == 36\n    closest_num(52) == 37\n    closest_num(53) == 38\n    closest_num(54) == 39\n    closest_num(55) == 40\n    closest_num(56) == 41\n    closest_num(57) == 42\n    closest_num(58) == 43\n    closest_num(59) == 44\n    closest_num(60) == 45\n    closest_num(61) == 46\n    closest_num(62) == 47\n    closest_num(63) == 48\n    closest_num(64) == 49\n    closest_num(65) == 50\n    closest_num(66) == 51\n    closest_num(67) == 52\n    closest_num(68) == 53\n    closest_num(69) == 54\n    closest_num(70) == 55\n    closest_num(71) == 56\n    closest_num(72) == 57\n    closest_num(73) == 58\n    closest_num(74) == 59\n    closest_num(75) == 60\n    closest_num(76) == 61\n    closest_num(77) == 62\n    closest_num(78) == 63\n    closest_num(79) == 64\n    closest_num(80) == 65\n    closest_num(81) == 66\n    closest_num(82) == 67\n    closest_num(83) == 68\n    closest_num(84) == 69\n    closest_num(85) == 70\n    closest_num(86) == 71\n    closest_num(87) == 72\n    closest_num(88) == 73\n    closest_num(89) == 74\n    closest_num(90) == 75\n    closest_num(91) == 76\n    closest_num(92) == 77\n    closest_num(93) == 78\n    closest_num(94) == 79\n    closest_num(95) == 80\n    closest_num(96) == 81\n    closest_num(97) == 82\n    closest_num(98) == 83\n    closest_num(99) == 84\n    closest_num(100) == 85\n    closest_num(101) == 86\n    closest_num(102) == 87\n    closest_num(103) == 88\n    closest_num(104) == 89\n    closest_num(105) == 90\n    closest_num(106) == 91\n    closest_num(107) == 92\n    closest_num(108) == 93\n    closest_num(109) == 94\n    closest_num(110) == 95\n    closest_num(111) == 96\n    closest_num(112) == 97\n    closest_num(113) == 98\n    closest_num(114) == 99\n    closest_num(115) == 100\n    closest_num(116) == 101\n    closest_num(117) == 102\n    closest_num(118) == 103\n    closest_num(119) == 104\n    closest_num(120) == 105\n    closest_num(121) == 106\n    closest_num(122) == 107\n    closest_num(123) == 108\n    closest_num(124) == 109\n    closest_num(125) == 110\n    closest_num(126) == 111\n    closest_num(127) == 112\n    closest_num(128) == 113\n    closest_num(129) == 114\n    closest_num(130) == 115\n    closest_num(131) == 116\n    closest_num(132) == 117\n    closest_num(133) == 118\n    closest_num(134) == 119\n    closest_num(135) == 120\n    closest_num(136) == 121\n    closest_num(137) == 122\n    closest_num(138) == 123\n    closest_num(139) == 124\n    closest_num(140) == 125\n    closest_num(141) == 126\n    closest_num(142) == 127\n    closest_num(143) == 128\n    closest_num(144) == 129\n    closest_num(145) == 130\n    closest_num(146) == 131\n    closest_num(147) == 132\n    closest_num(148) == 133\n    closest_num(149) == 134\n    closest_num(150) == 135\n    closest_num(151) == 136\n    closest_num(152) == 137\n    closest_num(153) == 138\n    closest_num(154) == 139\n    closest_num(155) == 140\n    closest_num(156) == 141\n    closest_num(157) == 142\n    closest_num(158) == 143\n    closest_num(159) == 144\n    closest_num(160) == 145\n    closest_num(161) == 146\n    closest_num(162) == 147\n    closest_num(163) == 148\n    closest_num(164) == 149\n    closest_num(165) == 150\n    closest_num(166) == 151\n    closest_num(167) == 152\n    closest_num(168) == 153\n    closest_num(169) == 154\n    closest_num(170) == 155\n    closest_num(171) == 156\n    closest_num(172) == 157\n    closest_num(173) == 158\n    closest_num(174) == 159\n    closest_num(175) == 160\n    closest_num(176) == 161\n    closest_num(177) == 162\n    closest_num(178) == 163\n    closest_num(179) == 164\n    closest_num(180) == 165\n    closest_num(181) == 166\n    closest_num(182) ="
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_num(7) == 6\nassert     closest_num(1) == 1\nassert     closest_num(5) == 3\nassert     closest_num(19) == 17\nassert     closest_num(1e12) == 1e12\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_num(9) == 4\nassert     closest_num(100) == 1\nassert     closest_num(0) == 0\nassert     closest_num(0.1) == 0\nassert     closest_num(-0.1) == 0\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_num(3) == 1\nassert     closest_num(5) == 2\nassert     closest_num(12) == 1\nassert     closest_num(15) == 2\nassert     closest_num(17) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert closest_num(4) == 2\nassert closest_num(3) == 1\nassert closest_num(5) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('\\nYou should see an answer:', closest_num(21))\nprint('The correct answer: 21\\n')\n\nprint('You should see an answer:', closest_num(13))\nprint('The correct answer: 13\\n')\n\nprint('You should see an answer:', closest_num(8))\nprint('The correct answer: 8\\n')\n\nprint('You should see an answer:', closest_num(9))\nprint('The correct answer: 9\\n')\n\nprint('You should see an answer:', closest_num(19))\nprint('The correct answer: 19\\n')\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef str_rev(str1):\n    '''\n    Write a python function to reverse the input string.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert len_log([1,2,3,4,5,6,7,8,9,10]) == 10\n\nprint('All tests passed')\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log([]) == 0, \"The list should be empty\"\nassert     len_log([1]) == 1, \"The list should contain only one word\"\nassert     len_log([\"hi\", \"hi\", \"hello\"]) == 3, \"The list should contain three words\"\n\ndef count_vowels(str1):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log([\"hello\",\"world\"]) == 2\nassert     len_log([\"hi\",\"hello\",\"hey\",\"goodbye\"]) == 5\nassert     len_log([\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\"]) == 6\nassert     len_log([\"f\",\"e\",\"r\",\"t\"]) == 4\nassert     len_log([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"]) == 9\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log([]) == 0\nassert     len_log([1]) == 1\nassert     len_log([1,1]) == 2\nassert     len_log([1,2,1]) == 3\nassert     len_log([1,2,3,1]) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     len_log([]) == 0, \"empty list\"\nassert     len_log([1,2]) == 1, \"single element\"\nassert     len_log([1,2,3]) == 3, \"multiple elements\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\ncheck the correctness of len_log function\")\n\ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([\"kata\", \"majalp\", \"kata\", \"majalp\", \"majalp\", \"kata\", \"majalp\", \"majalp\", \"majalp\"]) == 10\nassert     len_log([\"pisang\", \"majalp\", \"kata\", \"majalp\", \"majalp\", \"kata\", \"majalp\", \"majalp\", \"majalp\"]) == 9\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlen_log([]) == 0, 'Input an empty list'\nlen_log(['hello', 'hello', 'hello']) == 3, 'Input multiple elements'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     len_log([]) == 0, \"the empty list\"\nassert     len_log([1]) == 1, \"the length of 1\"\nassert     len_log([1,2,3]) == 3, \"the length of 1,2,3\"\nassert     len_log([1,2,3,4,5]) == 5, \"the length of 1,2,3,4,5\"\nassert     len_log([1,2,3,4,5,6]) == 5, \"the length of 1,2,3,4,5,6\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring(\"apple\", \"apple\") == True\nassert     find_substring(\"apple\", \"app\") == False\nassert     find_substring(\"apple\", \"pple\") == False\nassert     find_substring(\"apple\", \"applee\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring(\"Hi\", 'H') == True, \"Wrong! test_find_substring failed.\"\nassert     find_substring(\"hi\", 'Hi') == False, \"Wrong! test_find_substring failed.\"\nassert     find_substring(\"Hi\", '') == True, \"Wrong! test_find_substring failed.\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_substring(\"ab\", \"ab\") == True\nassert     find_substring(\"abb\", \"ab\") == True\nassert     find_substring(\"abc\", \"abc\") == True\nassert     find_substring(\"a\", \"a\") == True\nassert     find_substring(\"b\", \"b\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_substring('cat', 'cat') == True\nassert     find_substring('cat', 'cat') == True\nassert     find_substring('cat', 'bat') == False\nassert     find_substring('cat', 'cat') == True\n\ndef find_substring_1(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring(\"abc\", \"bc\") == True\nassert     find_substring(\"cde\", \"bcd\") == False\nassert     find_substring(\"\", \"abc\") == False\nassert     find_substring(\"hi\", \"\") == False\nprint(\"Congratulations! Your find_substring function is correct.\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_substring('apple', 'ap') == True\nfind_substring('apple', 'p') == False\nfind_substring('app', 'apple') == True\nfind_substring('app', 'p') == True\nfind_substring('app', 'pl') == False\nfind_substring('app', 'ap') == False\nfind_substring('', 'apple') == False\nfind_substring('', 'p') == False\nfind_substring('', 'pl') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_substring('hello', 'hello') == True\nassert     find_substring('hell', 'hello') == False\nassert     find_substring('hello', 'l') == False\n\ndef find_substring_with_list(str1, sub_str_list):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_undulating(4)==True, \"is_undulating() is wrong!\"\nassert     is_undulating(6)==False, \"is_undulating() is wrong!\"\nassert     is_undulating(10)==False, \"is_undulating() is wrong!\"\nassert     is_undulating(8)==False, \"is_undulating() is wrong!\"\nassert     is_undulating(3)==False, \"is_undulating() is wrong!\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_undulating(8) == True\nassert     is_undulating(10) == True\nassert     is_undulating(20) == True\nassert     is_undulating(25) == True\nassert     is_undulating(28) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_undulating(9) == True\n    is_undulating(5) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_undulating(1) == False\nassert     is_undulating(10) == True\nassert     is_undulating(6) == True\nassert     is_undulating(9) == False\nassert     is_undulating(11) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_undulating(4) == True\nassert is_undulating(8) == True\nassert is_undulating(9) == True\nassert is_undulating(0) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_undulating(0)     == False     \nassert     is_undulating(1)     == True     \nassert     is_undulating(3)     == False     \nassert     is_undulating(4)     == True     \nassert     is_undulating(5)     == False     \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_undulating(0) == True\nassert is_undulating(2) == True\nassert is_undulating(3) == True\nassert is_undulating(4) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(1, 1) == 1\nassert     power(1, 2) == 1\nassert     power(2, 1) == 2\nassert     power(2, 2) == 4\nassert     power(3, 1) == 3\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(2,3) == 8, 'WRONG!'\nassert     power(3,3) == 27, 'WRONG!'\nassert     power(3,2) == 9, 'WRONG!'\nassert     power(1.2,3) == 1.8, 'WRONG!'\nassert     power(5,1) == 5, 'WRONG!'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(2,3) == 8\nassert     power(2,0) == 1\nassert     power(2,-2) == 1\nassert     power(0,-2) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert power(2, 4) == 16\nassert power(2, 3) == 8\nassert power(4, 1) == 4\nassert power(4, 0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(2,2) == 4\nassert     power(2,3) == 8\nassert     power(8,2) == 16\nassert     power(8,3) == 64\nassert     power(1.5,3) == 1.5 ** 3\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(2,3) == 8\nassert     power(10,5) == 1000\nassert     power(2,3) == 8\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(5,3) == 25, 'Not the expected value'\nassert     power(2,5) == 32, 'Not the expected value'\nassert     power(2,3) == 8, 'Not the expected value'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,3) == 8\nassert     power(5,0) == 1\nassert     power(2,3) == 8\nassert     power(1,1) == 1\nassert     power(2,4) == 16\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(2, 3) == 8\nassert     power(2, 4) == 16\nassert     power(2, 2) == 4\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power(4,4) == 16\nassert     power(4,5) == 64\nassert     power(4,6) == 256\nassert     power(4,1) == 4\nassert     power(4,0) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\nIf the second value of a tuple is the same, the value of the first tuple should be returned.\n'''\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_minimum([(1, 2), (3, 1), (4, 3), (1, 3), (5, 4)]) == (1, 1)\nassert     index_minimum([('a', 1), ('b', 2), ('c', 1), ('a', 3), ('b', 2)]) == ('a', 1)\nassert     index_minimum([(1, 2, 3), (4, 5, 6)]) == (1, 2, 3)\nassert     index_minimum([]) == None\nassert     index_minimum([(1, 2), (3, 4)]) == (1, 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    test_list = [(1,3),(2,1),(1,4),(1,2),(2,4)]\n    print(index_minimum(test_list))\n    # output should be 1\n    test_list = [(1,3),(2,1),(1,4),(1,2),(2,4)]\n    print(index_minimum(test_list))\n    # output should be 1"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_minimum([(1,2),(3,4),(4,6),(5,3),(4,5)])== (1,2), 'The returned value should be 1,2,4,5,4.'\nassert index_minimum([(1,2),(3,4),(4,6),(5,3),(4,5)])== (5,3), 'The returned value should be 5,3,4,4,3.'\nassert index_minimum([('a',1),('b',2),('c',3),('d',4),('e',5)])== ('d',4), 'The returned value should be \"d\",4,(\"e\",5),(\"a\",1),(\"b\",2),(\"c\",3)'\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([('bob', 14), ('jim', 15), ('joe', 16)]) == ('bob', 14)\nassert     index_minimum([('bob', 14), ('jim', 14), ('joe', 16)]) == ('joe', 16)\nassert     index_minimum([('bob', 14), ('jim', 15), ('joe', 15)]) == ('jim', 15)\nassert     index_minimum([('bob', 14), ('jim', 15), ('joe', 16)]) == ('bob', 14)\nassert     index_minimum([('bob', 14), ('jim', 15), ('joe', 16)]) == ('bob', 14)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_minimum([(1, 2), (3, 1), (2, 1), (1, 2)]) == (1, 1), \"Wrong Answer\"\nassert     index_minimum([(3, 1), (2, 1), (1, 2), (1, 1)]) == (1, 1), \"Wrong Answer\"\nassert     index_minimum([(1, 2), (2, 1), (2, 2)]) == (2, 2), \"Wrong Answer\"\n\n'''\nSolution 2:\n\ndef index_minimum(test_list):\n    \n    min_pair = test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nGiven a list of tuples, write a function that returns a list of tuples, sorted in increasing order by the second value in each tuple.\n'''\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([[1,2,3], [5,8,0,0], [9,5,0,0], [3,1,0,0], [5,5,9,9]]) == 2, \"Please enter a list of lists\"\nassert     Find_Min_Length([1,2,3,4,5]) == 1, \"Please enter a list with minimum element\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    Find_Min_Length([[1, 2, 3], [3, 4, 5], [2, 1, 1]]) == 1, \"should be 1\"\n    Find_Min_Length([[1, 2, 3, 4], [3, 4, 5, 6], [2, 1, 1, 1]]) == 1, \"should be 1\"\n    Find_Min_Length([[1], [3], [2], [1]]) == 1, \"should be 1\"\n    Find_Min_Length([[1,2], [3,4], [2,1]]) == 1, \"should be 1\"\n    Find_Min_Length([[1,2], [3,4], [2,1], [4,5]]) == 1, \"should be 1\"\n\n    Find_Min_Length([[1,2,3], [1,3,5], [2,1,1]]) == 3, \"should be 3\"\n    Find_Min_Length([[1,2,3,4], [1,3,5,6], [2,1,1,1]]) == 3, \"should be 3\"\n    Find_Min_Length([[1], [3], [2], [1]]) == 3, \"should be 3\"\n    Find_Min_Length([[1,2], [3,4], [2,1]]) == 3, \"should be 3\"\n    Find_Min_Length([[1,2], [3,4], [2,1], [4,5]]) == 3, \"should be 3\"\n\n    Find_Min_Length([[1,2,3], [1,3,5], [2,1,1]]) == 6, \"should be 6\"\n    Find_Min_Length([[1,2,3,4], [1,3,5,6], [2,1,1,1]]) == 6, \"should be 6\"\n    Find_Min_Length([[1], [3], [2], [1]]) == 6, \"should be 6\"\n    Find_Min_Length([[1,2], [3,4], [2,1]]) == 6, \"should be 6\"\n    Find_Min_Length([[1,2], [3,4], [2,1], [4,5]]) == 6, \"should be 6\"\n\n    Find_Min_Length([[1,2,3], [1,3,5], [2,1,1]]) == 7, \"should be 7\"\n    Find_Min_Length([[1,2,3,4], [1,3,5,6], [2,1,1,1]]) == 7, \"should be 7\"\n    Find_Min_Length([[1], [3], [2], [1]]) == 7, \"should be 7\"\n    Find_Min_Length([[1,2], [3,4], [2,1]]) == 7, \"should be 7\"\n    Find_Min_Length([[1,2], [3,4], [2,1], [4,5]]) == 7, \"should be 7\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[1,2,3,4], [2,3,4,5], \n                           [3,4,5,6], [5,6,7,8]]) == 3\nassert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([[1,2,3,4], [2,3,4,5], \n                           [3,4,5,6], [5,6,7,8]]) == 2\n\ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[], [], []]) == 0\nassert     Find_Min_Length([[1], [2], [3]]) == 1\nassert     Find_Min_Length([[1], [2], [3], []]) == 2\n\ndef Find_Missing_List(lst):\n    '''\n    Write a python function to find the missing list in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert Find_Min_Length([[1, 2, 3, 4], [2, 3, 4], [1, 2, 3], [2, 3]]) == 2\nassert Find_Min_Length([[1, 2, 3, 4, 5], [2, 3, 4], [1, 2, 3], [2, 3, 4, 5]]) == 2\nassert Find_Min_Length([[1, 2, 3, 4, 5], [2, 3, 4, 5], [1, 2, 3], [2, 3, 4]]) == 3\nassert Find_Min_Length([[1, 2, 3, 4, 5], [2, 3, 4, 5], [1, 2, 3, 4]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[1,2,3],[4,5,6]]) == 1\nassert     Find_Min_Length([[],[],[]]) == 0\nassert     Find_Min_Length([[],[],[],[[],]]) == 3\nassert     Find_Min_Length([[],[],[],[[],[]]]) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisor(1) == 1\nassert     divisor(2) == 1\nassert     divisor(3) == 1\nassert     divisor(4) == 2\nassert     divisor(5) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     divisor(1) == 1, 'First case'\nassert     divisor(2) == 2, 'Second case'\nassert     divisor(3) == 3, 'Third case'\nassert     divisor(4) == 6, 'Fourth case'\nassert     divisor(6) == 6, 'Fifth case'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndivisor(1) == 1\ndivisor(2) == 1\ndivisor(3) == 2\ndivisor(4) == 2\ndivisor(5) == 2\ndivisor(6) == 3\ndivisor(7) == 3\ndivisor(8) == 3\ndivisor(9) == 4\ndivisor(10) == 4\ndivisor(20) == 5\ndivisor(12) == 2\ndivisor(15) == 5\ndivisor(18) == 6\ndivisor(18) == 6\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndivisor(2) == 2\ndivisor(7) == 6\ndivisor(8) == 6\ndivisor(9) == 9\ndivisor(11) == 11\ndivisor(5) == 2\ndivisor(12) == 3\ndivisor(15) == 7\ndivisor(9) == 6\ndivisor(0) == 1\ndivisor(1) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(7) == 4, '7 should have 4 divisors'\nassert     divisor(4) == 1, '4 should have 1 divisor'\nassert     divisor(2) == 2, '2 should have 2 divisors'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisor(3) == 4\nassert     divisor(12) == 6\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisor(0) == 1, \"divisor should return 1 if n == 0\"\nassert     divisor(1) == 1, \"divisor should return 1 if n == 1\"\nassert     divisor(2) == 1, \"divisor should return 1 if n == 2\"\nassert     divisor(3) == 1, \"divisor should return 1 if n == 3\"\nassert     divisor(4) == 1, \"divisor should return 1 if n == 4\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists([1, 2, 3, 4, 5]) == {\n    1:1, \n    2:1, \n    3:1, \n    4:1, \n    5:1\n}\nassert     frequency_lists([[1, 2], [1, 2]]) == {\n    1:2, \n    2:2\n}\nassert     frequency_lists([[1], [1], [1], [1]]) == {\n    1:4\n}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency_lists([[1,2], [2,2,3], [1,2,2]]) == {1: 3, 2: 2, 2: 2, 3: 1}\nassert     frequency_lists([[1,2], [1,2,2], [1,2,2,2,2,2,3], [2,2,2,2,2,2,2]]) == {1: 6, 2: 5}\nassert     frequency_lists([[1,2], [2,3], [3,4], [4,5], [5,6,7], [6,7,8]]) == {1: 3, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\nassert     frequency_lists([[1,2], [3], [4], [4], [5], [5,6,7], [6,7,8]]) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 2, 6: 2, 7: 2, 8: 1}\nassert     frequency_lists([[1,2], [1,2], [1,2], [1,2,2], [1,2,2], [1,2,2,2,2,2,3], [2,2,2,2,2,2,2]]) == {1: 5, 2: 4}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef flatten_lists(lst):\n    '''\n    Write a function to flatten a nested list.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([1,2,3,4]) == {1:1,2:1,3:1,4:1}\nassert     frequency_lists([[1,2,3],['a','b','c']]) == {1:1,2:1,3:1, 'a':1, 'b':1, 'c':1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([[1,2],\n                           [2,2],\n                           [1,2]]) == {1: 3, 2: 2}\nassert     frequency_lists([[1,2,1],\n                           [2,2,2],\n                           [1,2,3]]) == {1: 3, 2: 2, 3: 1}\nassert     frequency_lists([[1,2],\n                           [2,2],\n                           [1,2]]) == {1: 3, 2: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == {1: 3, 2: 2, 3: 3}\nassert     frequency_lists([[1], [2], [1], [1]]) == {1: 4, 2: 2}\nassert     frequency_lists([[1, 1, 1], [2], [1]]) == {1: 4, 2: 1}\nassert     frequency_lists([[]]) == {}\nassert     frequency_lists([]) == {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1,2], [1,2], [3,4]]) == {1: 2, 3: 1, 4: 1}\nassert     frequency_lists([[1,2,1], [1,2,1], [1,2,1]]) == {1: 3, 2: 2}\n\n'''\n10. Write a function to find the longest common prefix from the list of strings.\n'''\n\ndef longest_prefix(list1):\n    '''\n    Write a function to find the longest common prefix from the list of strings.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([[0, 1], [2, 2], [3, 3]]) == {'0': 2, '1': 1, '2': 2, '3': 1}\nassert     frequency_lists([[0, 1], [0, 1]]) == {'0': 2, '1': 1}\nassert     frequency_lists([[1, 1, 1], [1, 2, 2], [1, 2, 2], [1, 1, 1]]) == {'1': 4, '2': 3}\nassert     frequency_lists([[1, 2, 3], [3, 1, 2], [2, 1, 1]]) == {'1': 2, '2': 2, '3': 2}\nassert     frequency_lists([[1, 2, 3], [3, 2, 1], [2, 2, 1]]) == {'1': 3, '2': 2, '3': 3}\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_num([2,3,4]) == 24, \"The multiplication of [2,3,4] is 24\"\nassert     multiply_num([1,2,3,4]) == 24, \"The multiplication of [1,2,3,4] is 24\"\nassert     multiply_num([1,2,3,4,5]) == 120, \"The multiplication of [1,2,3,4,5] is 120\"\nassert     multiply_num([2,3,4,5]) == 120, \"The multiplication of [2,3,4,5] is 120\"\nassert     multiply_num([]) == 0, \"The multiplication of an empty list is 0\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_num([]) == 1, 'list of length zero'\nassert     multiply_num([1, 2, 3]) == 6, 'list of length 3'\nassert     multiply_num([-2, -3, -4]) == -24, 'list of length 3'\nassert     multiply_num([-1, -2, -3]) == -6, 'list of length 3'\nassert     multiply_num([-1, -2, -3, -4]) == -24, 'list of length 3'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nStep 4. Use the functions you wrote above to implement the function below, with the following points:\n\nReturn the mean, median, and mode of the given list of numbers.\n'''\n\ndef return_mean_median_mode(numbers):  \n    '''\n    Write a function to return the mean, median, and mode of a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([1, 2, 3]) == 6\nassert     multiply_num([1, 1, 1]) == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_num([3, 5, 7, 11, 7, 3]) == 45\nassert     multiply_num([1, 2, 5, 8, 9, 10]) == 120"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return \"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(15) == '1111'\nassert     decimal_to_binary(12) == '1100'\nassert     decimal_to_binary(18) == '1101'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0)     ==     \"0\" \nassert     decimal_to_binary(1)     ==     \"1\" \nassert     decimal_to_binary(2)     ==     \"10\" \nassert     decimal_to_binary(3)     ==     \"11\" \nassert     decimal_to_binary(4)     ==     \"100\" \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(16) == \"110000\"\nassert     decimal_to_binary(25) == \"110001\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(12) == 13\nassert     next_smallest_palindrome(123) == 124\nassert     next_smallest_palindrome(234) == 235\nassert     next_smallest_palindrome(1234) == 1235\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(1001) == 1031\nassert     next_smallest_palindrome(1111) == 1112\nassert     next_smallest_palindrome(1111) == 1112\nassert     next_smallest_palindrome(11111) == 11111\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(1) == 1\nassert     next_smallest_palindrome(2) == 3\nassert     next_smallest_palindrome(3) == 4\nassert     next_smallest_palindrome(4) == 5\nassert     next_smallest_palindrome(5) == 6\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(1221) == 1221\nassert     next_smallest_palindrome(12222) == 12223\nassert     next_smallest_palindrome(123456) == 123457\nassert     next_smallest_palindrome(1234567) == 123456\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(2) == \"a\"\nassert     next_smallest_palindrome(1237) == \"a\"\nassert     next_smallest_palindrome(1000) == \"b\"\nassert     next_smallest_palindrome(1237) == \"a\"\nassert     next_smallest_palindrome(1000) == \"c\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(12) == 11\nassert     next_smallest_palindrome(132) == 133\nassert     next_smallest_palindrome(1321) == 1231\nassert     next_smallest_palindrome(12345) == 12343\nassert     next_smallest_palindrome(123345) == 123343\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(5) == 5\nassert     next_smallest_palindrome(17) == 16\nassert     next_smallest_palindrome(7) == 6\nassert     next_smallest_palindrome(99) == 100\n\ndef is_palindrome(s):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(11) == 10, next_smallest_palindrome(11)\nassert     next_smallest_palindrome(20) == 21, next_smallest_palindrome(20)\nassert     next_smallest_palindrome(1024) == 1023, next_smallest_palindrome(1024)\nassert     next_smallest_palindrome(10001) == 10000, next_smallest_palindrome(10001)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(23) == 3, \"23 doesn't have the smallest palindrome\"\nassert     next_smallest_palindrome(120) == 121, \"120 doesn't have the smallest palindrome\"\nassert     next_smallest_palindrome(123456789) == 987654321, \"123456789 doesn't have the smallest palindrome\"\nassert     next_smallest_palindrome(16) == 15, \"16 doesn't have the smallest palindrome\"\nassert     next_smallest_palindrome(199) == 196, \"199 doesn't have the smallest palindrome\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     kth_element([1, 1, 2, 3, 4], 3) == 3\nassert     kth_element([1, 1, 2, 3, 4], 1) == 1\nassert     kth_element([1, 1, 2, 3, 4], 4) == 4\nassert     kth_element([], 0) == None\nassert     kth_element([1], 1) == 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # the length of the array should be >= k \n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n10th element\n\nWrite a function that accepts an array and an integer as parameters and returns the index of the element that is closest to the integer.\n\nIf the integer is within the array, then return the index of that element.\n\nIf the integer is not present in the array, then return the length of the array.\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', \\\n            'wrong answer: snake_to_camel(\"snake_case\")'\nassert snake_to_camel('snake_case') =='snakeCase', \\\n            'wrong answer: snake_to_camel(\"snake_case\")'\nassert snake_to_camel('snake_case') =='snakeCase', \\\n            'wrong answer: snake_to_camel(\"snake_case\")'\nassert snake_to_camel('snake_case') =='snakeCase', \\\n            'wrong answer: snake_to_camel(\"snake_case\")'\nassert snake_to_camel('snake_case') =='snakeCase', \\\n            'wrong answer: snake_to_camel(\"snake_case\")'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake') =='snake','should return snake'\nassert     snake_to_camel('snake_snake') =='snake_snake','should return snake_snake'\nassert     snake_to_camel('snake_snake_snake') =='snake_snake_snake','should return snake_snake_snake'\nassert     snake_to_camel('snake_snake_snake_snake') =='snake_snake_snake_snake','should return snake_snake_snake_snake'\nassert     snake_to_camel('snake_snake_snake_snake_snake') =='snake_snake_snake_snake_snake','should return snake_snake_snake_snake_snake'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('sna_ri_case') == 'SNA_R_I_CASE'\n\nassert     snake_to_camel('sna-ri-case') == 'SNA-R-I-CASE'\n\nassert     snake_to_camel('sna_ri_case_') == 'SNA_R_I_CASE'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_camel_case') =='snakeCamelCase', 'Snake case to camel case conversion is wrong'\nassert     snake_to_camel('snake_camel_case_2') =='snakeCamelCase_2', 'Snake case to camel case conversion is wrong'\nassert     snake_to_camel('snake_camel_case_3') =='snakeCamelCase_3', 'Snake case to camel case conversion is wrong'\nassert     snake_to_camel('snake_camel_case_4') =='snakeCamelCase_4', 'Snake case to camel case conversion is wrong'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel('my_snake') =='mySnake', 'Test #1 fail'\nassert     snake_to_camel('my_snake_') =='mySnake', 'Test #2 fail'\nassert     snake_to_camel('my_snake_123') =='mySnake123', 'Test #3 fail'\nassert     snake_to_camel('my_snake_123_') =='mySnake123', 'Test #4 fail'\nassert     snake_to_camel('my_snake_1234567') =='mySnake1234567', 'Test #5 fail'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('a_b_c_d') == 'aBcd', 'wrong snake_to_camel'\nassert     snake_to_camel('a-b-c-d') == 'a-b-c-d', 'wrong snake_to_camel'\nassert     snake_to_camel('_a_b_c_d') == '_aBcd', 'wrong snake_to_camel'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef snake_to_camel_2(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('test_snake_case') == 'TestSnakeCase', \"Snake case to camel case failed\"\nassert     snake_to_camel('test_snake_case_') == 'TestSnakeCase', \"Snake case to camel case failed\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(1, 1) == 2\nassert     eulerian_num(2, 1) == 3\nassert     eulerian_num(3, 1) == 3\nassert     eulerian_num(3, 2) == 6\nassert     eulerian_num(3, 3) == 8\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neulerian_num(7, 6) == 0, \"1\"\neulerian_num(7, 8) == 2, \"2\"\neulerian_num(6, 8) == 2, \"3\"\neulerian_num(8, 6) == 0, \"4\"\neulerian_num(1, 1) == 0, \"5\"\neulerian_num(2, 1) == 1, \"6\"\neulerian_num(3, 1) == 2, \"7\"\neulerian_num(4, 1) == 3, \"8\"\neulerian_num(5, 1) == 4, \"9\"\neulerian_num(6, 1) == 0, \"10\"\neulerian_num(7, 1) == 0, \"11\"\neulerian_num(8, 1) == 0, \"12\"\neulerian_num(9, 1) == 0, \"13\"\neulerian_num(10, 1) == 0, \"14\"\neulerian_num(11, 1) == 0, \"15\"\neulerian_num(12, 1) == 0, \"16\"\neulerian_num(13, 1) == 0, \"17\"\neulerian_num(14, 1) == 0, \"18\"\neulerian_num(15, 1) == 0, \"19\"\neulerian_num(16, 1) == 0, \"20\"\neulerian_num(17, 1) == 0, \"21\"\neulerian_num(18, 1) == 0, \"22\"\neulerian_num(19, 1) == 0, \"23\"\neulerian_num(20, 1) == 0, \"24\"\neulerian_num(21, 1) == 0, \"25\"\neulerian_num(22, 1) == 0, \"26\"\neulerian_num(23, 1) == 0, \"27\"\neulerian_num(24, 1) == 0, \"28\"\neulerian_num(25, 1) == 0, \"29\"\neulerian_num(26, 1) == 0, \"30\"\neulerian_num(27, 1) == 0, \"31\"\neulerian_num(28, 1) == 0, \"32\"\neulerian_num(29, 1) == 0, \"33\"\neulerian_num(30, 1) == 0, \"34\"\neulerian_num(31, 1) == 0, \"35\"\neulerian_num(32, 1) == 0, \"36\"\neulerian_num(33, 1) == 0, \"37\"\neulerian_num(34, 1) == 0, \"38\"\neulerian_num(35, 1) == 0, \"39\"\neulerian_num(36, 1) == 0, \"40\"\neulerian_num(37, 1) == 0, \"41\"\neulerian_num(38, 1) == 0, \"42\"\neulerian_num(39, 1) == 0, \"43\"\neulerian_num(40, 1) == 0, \"44\"\neulerian_num(41, 1) == 0, \"45\"\neulerian_num(42, 1) == 0, \"46\"\neulerian_num(43, 1) == 0, \"47\"\neulerian_num(44, 1) == 0, \"48\"\neulerian_num(45, 1) == 0, \"49\"\neulerian_num(46, 1) == 0, \"50\"\neulerian_num(47, 1) == 0, \"51\"\neulerian_num(48, 1) == 0, \"52\"\neulerian_num(49, 1) == 0, \"53\"\neulerian_num(50, 1) == 0, \"54\"\neulerian_num(51, 1) == 0, \"55\"\neulerian_num(52, 1) == 0, \"56\"\neulerian_num(53, 1) == 0, \"57\"\neulerian_num(54, 1) == 0, \"58\"\neulerian_num(55, 1) == 0, \"59\"\neulerian_num(56, 1) == 0, \"60\"\neulerian_num(57, 1) == 0, \"61\"\neulerian_num(58, 1) == 0, \"62\"\neulerian_num(59, 1) == 0, \"63\"\neulerian_num(60, 1) == 0, \"64\"\neulerian_num(61, 1) == 0, \"65\"\neulerian_num(62, 1) == 0, \"66\"\neulerian_num(63, 1) == 0, \"67\"\neulerian_num(64, 1) == 0, \"68\"\neulerian_num(65, 1) == 0, \"69\"\neulerian_num(66, 1) == 0, \"70\"\neulerian_num(67, 1) == 0, \"71\"\neulerian_num(68, 1) == 0, \"72\"\neulerian_num(69, 1) == 0, \"73\"\neulerian_num(70, 1) == 0, \"74\"\neulerian_num(71, 1) == 0, \"75\"\neulerian_num(72, 1) == 0, \"76\"\neulerian_num(73, 1) == 0, \"77\"\neulerian_num(74, 1) == 0, \"78\"\neulerian_num(75, 1) == 0, \"79\"\neulerian_num(76, 1) == 0, \"80\"\neulerian_num(77, 1) == 0, \"81\"\neulerian_num(78, 1) == 0, \"82\"\neulerian_num(79, 1) == 0, \"83\"\neulerian_num(80, 1) == 0, \"84\"\neulerian_num(81, 1) == 0, \"85\"\neulerian_num(82, 1) == 0, \"86\"\neulerian_num(83, 1) == 0, \"87\"\neulerian_num(84, 1) == 0, \"88\"\neulerian_num(85, 1) == 0, \"89\"\neulerian_num(86, 1) == 0, \"90\"\neulerian_num(87, 1) == 0, \"91\"\neulerian_num(88, 1) == 0, \"92\"\neulerian_num(89, 1) == 0, \"93\"\neulerian_num(90, 1) == 0, \"94\"\neulerian_num(91, 1) == 0, \"95\"\neulerian_num(92, 1) == 0, \"96\"\neulerian_num(93, 1) == 0, \"97\"\neulerian_num(94, 1) == 0, \"98\"\neulerian_num(95, 1) == 0, \"99\"\neulerian_num(96, 1) == 0, \"100\"\neulerian_num(97, 1) == 0, \"101\"\neulerian_num(98, 1) == 0, \"102\"\neulerian_num(99, 1) == 0, \"103\"\neulerian_num(100, 1) == 0, \"104\"\neulerian_num(101, 1) == 0, \"105\"\neulerian_num(102, 1) == 0, \"106\"\neulerian_num(103, 1) == 0, \"107\"\neulerian_num(104, 1) == 0, \"108\"\neulerian_num(105, 1) == 0, \"109\"\neulerian_num(106, 1) == 0, \"110\"\neulerian_num(107, 1) == 0, \"111\"\neulerian_num(108, 1) == 0, \"112\"\neulerian_num(109, 1) == 0, \"113\"\neulerian_num(110, 1) == 0, \"114\"\neulerian_num(111, 1) == 0, \"115\"\neulerian_num(112, 1) == 0, \"116\"\neulerian_num(113, 1) == 0, \"117\"\neule"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_cycle_of_loop(n, m, a): \n    '''\n    Write a function to find the shortest path that connects a loop to a loop. \n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eulerian_num(5, 4) == 2\nassert     eulerian_num(5, 5) == 3\nassert     eulerian_num(4, 4) == 2\nassert     eulerian_num(4, 5) == 1\nassert     eulerian_num(5, 5) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 1) == 2\nassert     eulerian_num(3, 1) == 3\nassert     eulerian_num(3, 2) == 1\nassert     eulerian_num(3, 3) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eulerian_num(2, 3) == 2, \"Should be 2\"\nassert     eulerian_num(4, 8) == 2, \"Should be 2\"\nassert     eulerian_num(2, 0) == 1, \"Should be 1\"\nassert     eulerian_num(4, 0) == 0, \"Should be 0\"\n\ndef eulerian_path(n, m): \n    '''\n    Write a function to find the Eulerian path a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert eulerian_num(0, 0) == 1\nassert eulerian_num(1, 0) == 1\nassert eulerian_num(0, 1) == 1\nassert eulerian_num(1, 1) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eulerian_num(1, 3) == 1\nassert     eulerian_num(2, 3) == 2\nassert     eulerian_num(3, 3) == 0\nassert     eulerian_num(1, 2) == 1\nassert     eulerian_num(2, 3) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eulerian_num(1, 2) == 'a(1, 2) = a(2, 1) = 2'\nassert     eulerian_num(2, 3) == 'a(2, 3) = a(3, 2) = 2'\nassert     eulerian_num(3, 4) == 'a(3, 4) = a(4, 3) = 2'\nassert     eulerian_num(5, 6) == 'a(5, 6) = a(6, 5) = 2'\nassert     eulerian_num(6, 7) == 'a(6, 7) = a(7, 6) = 2'\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists(input_list_1) == sorted_list\nassert     sort_sublists(input_list_2) == sorted_list\nassert     sort_sublists(input_list_3) == sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([[1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']]) == \n    [[1, 2, 3], ['d', 'e', 'f'], ['a', 'b', 'c']]\n\nassert sort_sublists([[1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']]) == \n    [[1, 2, 3], ['d', 'e', 'f'], ['a', 'b', 'c']]\n\nassert sort_sublists([[1], ['a'], ['b']]) == [[1], ['a'], ['b']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not sort_sublists([[1, 2, 3], ['a', 'b'], ['c', 'd', 'e']])\nassert not sort_sublists([[1, 2], ['a', 'b'], ['c', 'd', 'e']])\nassert not sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f']])\n\nimport unittest\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nsort_sublists([\"cat\", \"dog\", \"bird\"]) == [['bird', 'cat', 'dog'], ['dog', 'cat', 'bird']]\nsort_sublists([\"rat\", \"giraffe\", \"monkey\"]) == [['monkey', 'rat', 'giraffe'], ['giraffe', 'rat','monkey']]\nsort_sublists([\"butterfly\", \"caterpillar\", \"ant\", \"spider\"]) == [['ant','spider', 'butterfly'], ['caterpillar','spider', 'ant'], ['spider', 'butterfly', 'ant'], ['caterpillar', 'ant','spider']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nSort the items in a list of lists by the index of the first item of the sublists.\n\nFor example, the following list is sorted by index of the first item in each sublist:\n[\n  ['A', 'B', 'C'],\n  ['D', 'E', 'F'],\n  ['G', 'H', 'I']\n]\n'''\n\ndef sort_by_index(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([['a','b', 'c'],['d','e','f']]) == [['a','b', 'c'],['d','e','f']]\nassert     sort_sublists([['c', 'b', 'a'],['f', 'e', 'd']]) == [['a', 'b', 'c'],['d', 'e', 'f']]\nassert     sort_sublists([['a','c','b'],['f','e','d']]) == [['a','c','b'],['f','e','d']]\nassert     sort_sublists([['b','c','a'],['f','e','d']]) == [['a', 'b', 'c'],['f','e','d']]\nassert     sort_sublists([['d','e','a'],['f','c','b'],['g','h','i']]) == [['a', 'b', 'c'],['d', 'e', 'f'],['g', 'h', 'i']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([['c','a','b'],['d']]    ==\n                        [['a','b','c'],['d']]), \"wrong\"\n\nassert     sort_sublists([['a','b','c'],['d']]    ==\n                        [['a','b','c'],['d']]), \"wrong\"\n\nassert     sort_sublists([['c','a','b'],['d']]    ==\n                        [['a','b','c'],['d']]), \"wrong\"\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([['abcd'], ['abcd'], ['abcd']]) == [['abcd'], ['abcd'], ['abcd']]\nassert     sort_sublists([['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd']]) == [['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd']]\nassert     sort_sublists([['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd']]) == [['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd']]\nassert     sort_sublists([['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd']]) == [['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd'], ['abcd']]\nassert     sort_sublists([['abcd'], ['abcd'], ['abcd']]) == [['abcd'], ['abcd'], ['abcd']]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count([1,2,3,4,5,6]) == 5\nassert count([1,2,3,4,5,6,7]) == 6\nassert count([1,2,3,4,5,6,7,8]) == 7\nassert count([1,2,3,4,5,6,7,8,9]) == 8\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True, False]) == 1\nassert     count([False, True, True, False]) == 2\nassert     count([False, True, False]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([True, True, True, False, False, False]) == 6, \"Example 1 is wrong\"\nassert     count([True, True, True, False, False]) == 6, \"Example 2 is wrong\"\nassert     count([True, True, False, False, False]) == 4, \"Example 3 is wrong\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([True, False, True, False]) == 2, \"Expected 2 True, got %s\" % count([True, False, True, False])\nassert count([True, False]) == 1, \"Expected 1 True, got %s\" % count([True, False])\nassert count([]) == 0, \"Expected 0 True, got %s\" % count([])\nassert count(['a']) == 0, \"Expected 0 True, got %s\" % count(['a'])\nassert count(['a', 'b']) == 0, \"Expected 0 True, got %s\" % count(['a', 'b'])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([True,False,True])==1, \"Test case incorrect\"\nassert     count([True,False,True,False,True])==2, \"Test case incorrect\"\nassert     count([False,False,True,True])==1, \"Test case incorrect\"\nassert     count([True,False,True,True])==2, \"Test case incorrect\"\nassert     count([False,True,False,True,True,True])==5, \"Test case incorrect\"\nprint(\"Pass\") if count([True,True,True,True,True,True])==6 else print(\"Fail\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([1, 0, 1]) == 2\nassert     count([1, 0, 1, 0]) == 3\nassert     count([]) == 0\nassert     count(None) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert count([True, True, False, False, False]) == 3\nassert count([True, False, True, False, False]) == 2\nassert count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count([1,2,3,4,5,True,6,False]) == 4,'return value incorrect'\nassert     count([1,2,3,4,5,True,6,False], False) == 5,'return value incorrect'\nassert     count([1,2,3,4,5,True,6,False], True) == 6,'return value incorrect'\nassert     count([1,2,3,4,5,True,6,False], 5) == 5,'return value incorrect'\nassert     count([1,2,3,4,5,True,6,False], 0) == 0,'return value incorrect'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count(['hi','bye',False,True]) == 2, 'incorrect'\nassert     count(['hi','bye',True]) == 2, 'incorrect'\nassert     count(['hi','bye','bye',True]) == 3, 'incorrect'\nassert     count(['hi','bye','bye','bye','bye']) == 1, 'incorrect'\nassert     count([]) == 0, 'incorrect'\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    add_lists([1, 2, 3], ([10, 20, 30])) == ([1, 2, 3, 10, 20, 30],)\n    add_lists([1], ((\"a\", 10, \"b\"),)) == ([1, (10, \"b\")],)\n    add_lists([(10, 20, 30), (40, 50, 60)], (\"a\", (10, 20, 30))) == ([10, 20, 30, 40, 50, 60, \"a\"],)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([1,2], (3,4,5)) == (1,2,3,4,5), \"Wrong answer\"\nassert     add_lists([1,2], (3)) == (1,2,3), \"Wrong answer\"\nassert     add_lists([1], (2,3)) == (1,2,3), \"Wrong answer\"\nassert     add_lists([1], (2,)) == (1,2), \"Wrong answer\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1, 2, 3, 4], (1, 2, 3, 4)) == None, \"Test Fail\"\nassert     add_lists([\"Hello World\", \"Hello World\"], (\"Hello World\", \"Hello World\")) == None, \"Test Fail\"\nassert     add_lists([1, 2, 3, 4], [(1, 2, 3, 4), (1, 2, 3, 4)]) == None, \"Test Fail\"\nassert     add_lists([[1, 2, 3, 4]], ([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])) == None, \"Test Fail\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists([10, 30], [(10, 20), (20, 40)]) == [(10, 20), (20, 40), (10, 30), (20, 40)]\nassert     add_lists([], [(10, 20), (20, 40)]) == [(10, 20), (20, 40)]\nassert     add_lists([10, 20, 30], [(10, 20), (20, 40)]) == [(10, 20), (20, 40), (10, 30), (20, 40)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_lists([1, 2, 3], (4, 5, 6)) == [(1, 4, 5, 6)]\nassert     add_lists([[1], 2], (4, 5, 6)) == [(1, 4), (2, 5), (3, 6)]\nassert     add_lists([(1, 2), 3], (4, 5, 6)) == [(1, 2, 4), (3, 5, 6)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_lists([1,2,3], (1,2,3)) == ([1,2,3], (1,2,3))\nassert     add_lists([1,2,3], (1,2)) == ([1,2,3], (1,2,3))\nassert     add_lists([1,2,3], (3,)) == ([1,2,3], (3,))\nassert     add_lists([1,2], (3,)) == ([1,2,3], (3,))\nassert     add_lists([1], ()) == ([1], ())\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_sorted_list([1,2,3,4],[0,5,6,7,8],[2,3,4,5]) == [0,1,2,2,3,4,5,5,6,7,8,8]\nassert     merge_sorted_list([1,2,3,4],[3,4,5,6],[2,3,4,5]) == [2,2,3,3,4,4,5,5,6,6]\nassert     merge_sorted_list([1],[2],[3]) == [1,2,3]\nassert     merge_sorted_list([1,2],[3,4],[5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_sorted_list([1, 2, 4], [4, 5, 6], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 4, 5, 6]\nassert     merge_sorted_list([1, 2, 4, 5], [4, 5, 6], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 4, 5, 6]\nassert     merge_sorted_list([1, 2, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 4, 5, 6]\nassert     merge_sorted_list([1, 2, 4], [4, 5, 6], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 4, 5, 6]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nMerge three sorted linked lists in ascending order into a single sorted linked list.\nExample:\nInput: 1->2->4, 1->3->4, 2->4->5\nOutput: 1->1->2->3->4->4->5\n\nInput: 2->3->5, 2->4->4, 1->3->4\nOutput: 1->1->2->2->3->4->4->5\n'''\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    num1 = []\n    num2 = [1,2,3,4]\n    num3 = []\n    assert merge_sorted_list(num1,num2,num3) == [1,2,3,4]\n\n    num1 = [1,2]\n    num2 = []\n    num3 = [3,4]\n    assert merge_sorted_list(num1,num2,num3) == [1,2,3,4]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,2,3,7,11,14],[2,4,6,8,10,12,16],\n                            [3,5,9,11,15,17,18]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nassert     merge_sorted_list([-1,-2,-3,-4,-5],[-5,-4,-3,-2,-1],[-1,-2,-3,-4]) == sorted([-5,-4,-3,-2,-1,-1,-2,-3,-4,-5])\nassert     merge_sorted_list([-1,-2,-3],[-5,-4],[-3,-2,-1]) == sorted([-5,-4,-3,-2,-1,-1,-2,-3,-3,-2,-1])\nassert     merge_sorted_list([-1],[-5],[-3]) == sorted([-5,-3,-1])\nassert     merge_sorted_list([],[],[]) == sorted([])\nprint('merge_sorted_list is correct')\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmerge_sorted_list([1,2,3,4],[2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]\nassert\nmerge_sorted_list([1,2,3,4],[3,4,5,6],[2,3,4,5]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_Equivalent('1000110001', 2) == 3\nodd_Equivalent('1010101010', 3) == 7\nodd_Equivalent('1101010111', 4) == 5\nodd_Equivalent('1111111111', 4) == 10\nodd_Equivalent('1111111111', 3) == 10\nodd_Equivalent('1111111111', 2) == 10\nodd_Equivalent('1111111111', 1) == 11\nodd_Equivalent('1111111111', 0) == 11\nodd_Equivalent('1111111111', -1) == 10\nodd_Equivalent('1111111111', -2) == 9\nodd_Equivalent('1111111111', -3) == 8\nodd_Equivalent('1111111111', -4) == 7\nodd_Equivalent('1111111111', -5) == 6\nodd_Equivalent('1111111111', -6) == 5\nodd_Equivalent('1111111111', -7) == 4\nodd_Equivalent('1111111111', -8) == 3\nodd_Equivalent('1111111111', -9) == 2\nodd_Equivalent('1111111111', -10) == 1\nodd_Equivalent('1111111111', -11) == 0\nodd_Equivalent('1111111111', -12) == -1\nodd_Equivalent('1111111111', -13) == -2\nodd_Equivalent('1111111111', -14) == -3\nodd_Equivalent('1111111111', -15) == -4\nodd_Equivalent('1111111111', -16) == -5\nodd_Equivalent('1111111111', -17) == -6\nodd_Equivalent('1111111111', -18) == -7\nodd_Equivalent('1111111111', -19) == -8\nodd_Equivalent('1111111111', -20) == -9\nodd_Equivalent('1111111111', -21) == -10\nodd_Equivalent('1111111111', -22) == -11\nodd_Equivalent('1111111111', -23) == -12\nodd_Equivalent('1111111111', -24) == -13\nodd_Equivalent('1111111111', -25) == -14\nodd_Equivalent('1111111111', -26) == -15\nodd_Equivalent('1111111111', -27) == -16\nodd_Equivalent('1111111111', -28) == -17\nodd_Equivalent('1111111111', -29) == -18\nodd_Equivalent('1111111111', -30) == -19\nodd_Equivalent('1111111111', -31) == -20\nodd_Equivalent('1111111111', -32) == -21\nodd_Equivalent('1111111111', -33) == -22\nodd_Equivalent('1111111111', -34) == -23\nodd_Equivalent('1111111111', -35) == -24\nodd_Equivalent('1111111111', -36) == -25\nodd_Equivalent('1111111111', -37) == -26\nodd_Equivalent('1111111111', -38) == -27\nodd_Equivalent('1111111111', -39) == -28\nodd_Equivalent('1111111111', -40) == -29\nodd_Equivalent('1111111111', -41) == -30\nodd_Equivalent('1111111111', -42) == -31\nodd_Equivalent('1111111111', -43) == -32\nodd_Equivalent('1111111111', -44) == -33\nodd_Equivalent('1111111111', -45) == -34\nodd_Equivalent('1111111111', -46) == -35\nodd_Equivalent('1111111111', -47) == -36\nodd_Equivalent('1111111111', -48) == -37\nodd_Equivalent('1111111111', -49) == -38\nodd_Equivalent('1111111111', -50) == -39\nodd_Equivalent('1111111111', -51) == -40\nodd_Equivalent('1111111111', -52) == -41\nodd_Equivalent('1111111111', -53) == -42\nodd_Equivalent('1111111111', -54) == -43\nodd_Equivalent('1111111111', -55) == -44\nodd_Equivalent('1111111111', -56) == -45\nodd_Equivalent('1111111111', -57) == -46\nodd_Equivalent('1111111111', -58) == -47\nodd_Equivalent('1111111111', -59) == -48\nodd_Equivalent('1111111111', -60) == -49\nodd_Equivalent('1111111111', -61) == -50\nodd_Equivalent('1111111111', -62) == -51\nodd_Equivalent('1111111111', -63) == -52\nodd_Equivalent('1111111111', -64) == -53\nodd_Equivalent('1111111111', -65) == -54\nodd_Equivalent('1111111111', -66) == -55\nodd_Equivalent('1111111111', -67) == -56\nodd_Equivalent('1111111111', -68) == -57\nodd_Equivalent('1111111111', -69) == -58\nodd_Equivalent('1111111111', -70) == -59\nodd_Equivalent('1111111111', -71) == -60\nodd_Equivalent('1111111111', -72) == -61\nodd_Equivalent('1111111111', -73) == -62\nodd_Equivalent('1111111111', -74) == -63\nodd_Equivalent('1111111111', -75) == -64\nodd_Equivalent('1111111111', -76) == -65\nodd_Equivalent('1111111111', -77) == -66\nodd_Equivalent('1111111111', -78) == -67\nodd_Equivalent('1111111111', -79) == -68\nodd_Equivalent('1111111111', -80) == -69\nodd_Equivalent('1111111111', -81) == -70\nodd_Equivalent('1111111111', -82) == -71\nodd_Equivalent('1111111111', -83) == -72\nodd_Equivalent('1111111111', -84) == -73\nodd_Equivalent('1111111111', -85) == -74\nodd_Equivalent('1111111111', -86) == -75\nodd_Equivalent('1111111111', -87) == -76\nodd_Equivalent('1111111111', -88) == -77\nodd_Equivalent('1111111111', -89) == -78\nodd_Equivalent('1111111111', -90) == -79\nodd_Equivalent('1111111111', -91) == -80\nodd_Equivalent('1111111111', -92) == -81\nodd_Equivalent('1111111111', -93) == -82\nodd_Equivalent('1111111111', -94) == -83\nodd_Equivalent('1111111111', -95) == -84\nodd_Equivalent('1111111111', -96) == -85\nodd_Equivalent('1111111111', -97) == -86\nodd_Equivalent('1111111111', -98) == -87\nodd_Equivalent('1111111111', -99) == -88\nodd_Equivalent('1111111111', -100) == -89\nodd_Equivalent('1111111111', -101) == -90\nodd_Equivalent('1111111111', -102) == -91\nodd_Equivalent('1111111111', -103) == -92\nodd_Equivalent('1111111111', -104) == -93\nodd_Equivalent('1111111111', -105) == -94\nodd_Equivalent('1111111111', -106) == -95\nodd_Equivalent('1111111111', -107) == -96\nodd_Equivalent('1111111111', -108) == -97\nodd_Equivalent('1111111111', -109) == -98\nodd_Equivalent('1111111111', -110) == -99\nodd_Equivalent('1111111111', -111) == -100\nodd_Equivalent('1111111111', -112) == -101\nodd_Equivalent('1111111111', -113) == -102\nodd_Equivalent('1111111111', -114) == -103\nodd_Equivalent('1111111111', -115) == -104\nodd_Equivalent('1111111111', -116) == -105\nodd_Equivalent('1111111111', -117) == -106\nodd_Equivalent('1111111"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent(s='1010', n=3) == 1\nassert \nodd_Equivalent(s='101101', n=3) == 3\nassert \nodd_Equivalent(s='1011010101', n=3) == 4\nassert \nodd_Equivalent(s='10110101010', n=3) == 6\nassert \nodd_Equivalent(s='10110101010', n=4) == 6\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_Equivalent('10100', 1) == 4\nassert odd_Equivalent('10101', 1) == 2\nassert odd_Equivalent('10101', 2) == 1\nassert odd_Equivalent('10101', 4) == 0\nassert odd_Equivalent('10111', 1) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_Equivalent('1101', 2) == 5, \"Test Failed\"\nassert odd_Equivalent('1010', 2) == 5, \"Test Failed\"\nassert odd_Equivalent('00', 2) == 2, \"Test Failed\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_Equivalent(\"1101\",3) == 4, \"odd_Equivalent should return the number of odd values\"\nassert odd_Equivalent(\"1100\",3) == 4, \"odd_Equivalent should return the number of odd values\"\nassert odd_Equivalent(\"1110\",3) == 4, \"odd_Equivalent should return the number of odd values\"\nassert odd_Equivalent(\"0001\",3) == 4, \"odd_Equivalent should return the number of odd values\"\nassert odd_Equivalent(\"0\",3) == 4, \"odd_Equivalent should return the number of odd values\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_Equivalent('00100', 1) == '10101', \"odd_Equivalent test failed\"\nassert     odd_Equivalent('00100', 2) == '00011', \"odd_Equivalent test failed\"\nassert     odd_Equivalent('00100', 3) == '00101', \"odd_Equivalent test failed\"\nassert     odd_Equivalent('00100', 4) == '00110', \"odd_Equivalent test failed\"\nassert     odd_Equivalent('00100', 5) == '00111', \"odd_Equivalent test failed\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_Equivalent(\"1101\", 2) == 1, \"Wrong answer\"\nassert     odd_Equivalent(\"1101\", 3) == 2, \"Wrong answer\"\nassert     odd_Equivalent(\"1101\", 4) == 3, \"Wrong answer\"\nassert     odd_Equivalent(\"1101\", 5) == 4, \"Wrong answer\"\nassert     odd_Equivalent(\"1101\", 6) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nodd_Equivalent('101010101010101010101010101010101',5) == 12 \n\ndef arithmetic_Equivalent(s,n):\n    '''\n    Write a python function to find the number of times the arithmetic sequence (a, b, c) \n    is repeated in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncommon_in_nested_lists([]) == set()\nassert common_in_nested_lists([[1,2], [1,3]]) == {1,3}\nassert common_in_nested_lists([[1,2], [1,3], [1,2]]) == {1}\nassert common_in_nested_lists([[1,2], [1,3], [1,2,4]]) == {1,2,4}\nassert common_in_nested_lists([[1,2], [1,3], [1,2,3]]) == {1,2,3}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5]]) == [1]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3, 4, 5]]) == [1]\nassert     common_in_nested_lists([[1, 2, 3], [2], [1, 2, 3, 4, 5]]) == [2]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5], [2]]) == [1, 2]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([[1,2,3],    [4,5],    [7],    [6,8,9]]) == 6\nassert     common_in_nested_lists([[1],    [2],    [3],    [1,2]]) == 3\nassert     common_in_nested_lists([[1,2,3],    [4],    [7,8,9]]) == None\nassert     common_in_nested_lists([[1],    [2],    [3],    [1,2],    [3,4,5]]) == None\nassert     common_in_nested_lists([[1,2,3],    [],    [7],    [6,8,9]]) == None\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    common_in_nested_lists([[1,2,3],[2,4]]) == [2,4]\n    common_in_nested_lists([[1,2,3],[1,2]]) == [1]\n    common_in_nested_lists([[1,2,3],[1],[2]]) == [1]\n    common_in_nested_lists([[1,2,3],[3],[1,2]]) == []\n    common_in_nested_lists([[1,2,3],[1,2,3]]) == []\n    common_in_nested_lists([[1,2,3],[3,4,5]]) == []\n    common_in_nested_lists([[1,2,3],[3,5,6]]) == []\n    common_in_nested_lists([[1,2,3],[4,5,6]]) == []\n    common_in_nested_lists([[1,2,3,4],[2,3,4,5,6]]) == [3]\n    common_in_nested_lists([[1,2,3,4],[1,2,3,4]]) == [1]\n    common_in_nested_lists([[1,2,3,4],[2,3,4,5,6]]) == []\n    common_in_nested_lists([[1,2,3,4],[4,5,6,7,8]]) == []\n    common_in_nested_lists([[1,2,3,4],[1,2,3,4,5,6]]) == []\n    common_in_nested_lists([[1,2,3,4],[4,5,6,7,8],[1,2,3,4,5,6]]) == []\n    common_in_nested_lists([[1,2,3,4,5],[1,2,3,4,5,6]]) == []\n    common_in_nested_lists([[1,2,3,4,5],[1,2,3,4]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6],[1,2,3,4,5,6]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == []\n    common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[1, 2], [1, 2]]) == [1]\nassert     common_in_nested_lists([[2, 4], [2, 4]]) == [2]\nassert     common_in_nested_lists([[1, 2], [4, 5]]) == []\nassert     common_in_nested_lists([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [4, 5, 6]]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[1, 2], [1, 1], [2, 2]]) == [[1, 1]]\nassert common_in_nested_lists([[1, 2], [1, 1], [2, 2], [1, 1, 1]]) == [[1, 1, 1]]\nassert common_in_nested_lists([[1, 2], [1, 1], [1, 1, 1]]) == [[1, 1, 1]]\nassert common_in_nested_lists([[1, 2], [1, 1, 1], [2, 2], [1, 1, 1]]) == [[1, 1, 1]]\nassert common_in_nested_lists([[1, 1, 2], [1, 2, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([['1', '2', '3'],['2', '3', '4'],['1', '2', '4']]) == ['1', '2', '3', '4']\nassert common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == []\nassert common_in_nested_lists([['1', '2', '3'], ['2', '3', '4']]) == ['2', '3', '4']"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists([[2, 3], [4, 5, 6], [7, 8, 9]]) == True\nassert     common_in_nested_lists([[2], [4, 5, 6], [7, 8, 9]]) == False\nassert     common_in_nested_lists([[2, 3], [4, 5, 6], [7, 8, 9], [4, 5, 6]]) == True\nassert     common_in_nested_lists([[2, 3], [4, 5, 6], [7, 8, 9], []]) == True\nassert     common_in_nested_lists([[2, 3], [4, 5, 6], [7, 8, 9], [2, 3]]) == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer('1')    ==    True\nassert     check_integer('0')    ==    False\nassert     check_integer('5')    ==    True\nassert     check_integer('2')    ==    False\nassert     check_integer('3.5')    ==    False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.1') == True\nassert     check_integer('1.0') == True\nassert     check_integer('0') == False\nassert     check_integer('a') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('9') == True\nassert     check_integer('99') == True\nassert     check_integer('--999') == False\nassert     check_integer('9.9') == False\nassert     check_integer('9.99999') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         check_integer('1') == True, \"1\"\nassert         check_integer('1.') == False, \"1.\"\nassert         check_integer('1a') == False, \"1a\"\nassert         check_integer('1.a') == False, \"1.a\"\nassert         check_integer('1,a') == False, \"1,a\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer('-123') == True\nassert     check_integer('-1e3') == True\nassert     check_integer('-5e2') == True\nassert     check_integer('+123') == True\nassert     check_integer('+12e4') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer(1) == True\nassert     check_integer(\"Hello\") == False\nassert     check_integer(\"1\") == True\nassert     check_integer(\"+1\") == True\nassert     check_integer(\"-\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert check_integer(\"\") == False\nassert check_integer(\"1\") == True\nassert check_integer(\"-1\") == True\nassert check_integer(\"0\") == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (check_integer('-45') == False)\nassert    (check_integer('45') == True)\nassert    (check_integer('3.5') == True)\nassert    (check_integer('x') == False)\nassert    (check_integer('x4') == False)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_integer('1')    == True\nassert     check_integer('1.0')    == False\nassert     check_integer('foo')    == False\nassert     check_integer('bar')    == False\nassert     check_integer('5a')    == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_integer(\"10\") == True\nassert     check_integer(\"2\") == True\nassert     check_integer(\"10.5\") == False\nassert     check_integer(\"abc\") == False\nassert     check_integer(True) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([{}, {}, {}, {}]) == True, \"The output does not match the desired output\"\nassert     empty_dit([{}, {}, {}, {}, {}]) == False, \"The output does not match the desired output\"\nassert     empty_dit([{}, {}, {}, {}]) == False, \"The output does not match the desired output\"\nassert empty_dit([{}, {}, {}, {}]) == False, \"The output does not match the desired output\""
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit([]) == True\nassert empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{}]) == False\nassert empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_dit(list1) == True\nassert     empty_dit(list2) == False\nassert     empty_dit(list3) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit([]) == True, \"Expected: True\"\nassert     empty_dit([{},{},{},{}]) == True, \"Expected: True\"\nassert     empty_dit([{},{},{},'string']) == False, \"Expected: False\"\nassert     empty_dit([{},{},{},'string','string']) == False, \"Expected: False\"\nassert     empty_dit([{},{},{},'string','string',{}]) == True, \"Expected: True\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    empty_dit(\n        [{},{},{}]\n    ) == False, \"For {}: Empty dicts is not accepted.\".format(1)\n    \n    empty_dit(\n        [{},{},{},{}]\n    ) == True, \"For {}: Empty dicts is accepted.\".format(2)"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_dit([]) == True, 'Expected True'\nassert     empty_dit([{}]) == False, 'Expected False'\nassert     empty_dit([{1:1},{}]) == True, 'Expected True'"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef add_to_list(list_of_dicts):\n    '''\n    Write a function to add a new element to the end of a list of dictionaries,\n    and return the newly added dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nempty_dit([]) == True\nempty_dit([{}]) == True\nempty_dit([{1:2},{},{1:2},{1:2},{},{1:2}]) == True\nempty_dit([{1:2,},{},{1:2,},{1:2},{},{1:2}]) == False\nempty_dit([{},{1:2},{},{1:2},{},{1:2}]) == False\nempty_dit([{1:2}]) == True\nempty_dit([{1:2},{},{1:2},{1:2},{},{1:2}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit([]) == True, 'first'\nassert empty_dit([{},{}]) == False,'second'\nassert empty_dit([{},{},{}]) == True, 'third'\nassert empty_dit([{},{},{}, {}]) == False, 'fourth'\n\ndef max_string_length(list1):\n    '''\n    Write a function to find the maximum length of string in a list.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((5,10,15)) == 300\nassert     tuple_to_int((1,0,0)) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert tuple_to_int((1,2,3)) == 6\nassert tuple_to_int((1,2,3,4,5)) == 30\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    tuple_to_int((1, 2, 3)) == 6\n    tuple_to_int((1, 2, 2)) == 7\n    tuple_to_int((1, 1, 1)) == 2\n    tuple_to_int((0, 0, 0)) == 0\n    tuple_to_int((0, 0, 1)) == 1\n    tuple_to_int((1, 1, 2, 2, 3)) == 13\n    tuple_to_int((0, 0, 0, 0, 0)) == 0\n    tuple_to_int((1, 0, 0, 0, 0)) == 1\n    tuple_to_int((0, 1, 0, 0, 0)) == 2\n    tuple_to_int((0, 0, 1, 0, 0)) == 1\n    tuple_to_int((0, 0, 0, 1, 0)) == 2\n    tuple_to_int((0, 0, 0, 0, 1)) == 3\n    tuple_to_int((0, 0, 0, 0, 0)) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1, 2))     == 12\nassert     tuple_to_int((2, 3))     == 6\nassert     tuple_to_int((3, 4))     == 8\nassert     tuple_to_int((1, 0, 0)) == 11\nassert     tuple_to_int((1, 2, 3, 4)) == 1\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 14\nassert tuple_to_int((1,2,3,4,5,6,7,8,9,10,11,12,13,14)) == 200\nassert tuple_to_int((1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)) == 1\nassert tuple_to_int((1,2,3,4)) == 14\nassert tuple_to_int((1,2,3,4,5,6,7,8,9,10,11,12,13,14)) == 200\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef int_to_tuple(num):\n    '''\n    Write a function to convert a single integer into a given tuple of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int(()) == 0, \nassert    tuple_to_int((1,2,3)) == 6,\nassert    tuple_to_int((1,2,3,4,5)) == 15,\nassert    tuple_to_int((1,2,3,4,5,6)) == 21,\nassert    tuple_to_int((1,2,3,4,5,6,7,8,9,10)) == 99,\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 45\nassert     tuple_to_int((9, 1, 9, 1, 9, 1, 9, 1, 9)) == 81\nassert     tuple_to_int((9, 1, 1, 9, 1, 9, 1, 9, 1)) == 81\nassert     tuple_to_int((9, 9, 1, 9, 9, 9, 9, 9, 9)) == 81\nassert     tuple_to_int((9, 9, 9, 9, 9, 9, 9, 9, 9)) == 81\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float([\"1\", \"2\", \"3\"]) == [1.0, 2.0, 3.0]\nassert     list_to_float([\"4\", \"5\", \"6.6\", \"7.7\", \"8.8\", \"9.9\"]) == [4.0, 5.0, 6.6, 7.7, 8.8, 9.9]\nassert     list_to_float([\"10\", \"11\", \"12.12\", \"13.13\", \"14.14\", \"15.15\"]) == [10.0, 11.0, 12.12, 13.13, 14.14, 15.15]\n\n\n\ndef float_list_to_int(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to integers.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_to_float([[1,2,3],[4,5,6]]) == [[1.,2.,3.],[4.,5.,6.]], \"list_to_float 1\"\nassert     list_to_float([[10.0,2.0,3.0],[4.0,5.0,6.0]]) == [[10.0,2.0,3.0],[4.0,5.0,6.0]], \"list_to_float 2\"\nassert     list_to_float([[1.,2.,3.],[4.,5.,6.]]) == [[1.,2.,3.],[4.,5.,6.]], \"list_to_float 3\"\nassert     list_to_float([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]], \"list_to_float 4\"\nassert     list_to_float([[1.,2.,3.],[4.,5.,6.]]) == [[1.,2.,3.],[4.,5.,6.]], \"list_to_float 5\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    list_to_float([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\n    list_to_float([[1,2.0,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2.0,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1.0,2.0,3.0],[4.0,5.0,6.0],[7,8,9]]) == [[1.0,2.0,3.0],[4.0,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5,6.0],[7,8,9]]) == [[1,2,3.0],[4,5,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,2,3.0],[4,5.0,6.0],[7,8,9]]) == [[1,2,3.0],[4,5.0,6.0],[7,8,9]]\n    list_to_float([[1,"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef float_to_list(test_list):\n    '''\n    Write a function to convert a list of numbers to a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_to_float([[1, 2], [3, 4], ['a', 'b']]) == [[1.0, 2.0], [3.0, 4.0], ['a', 'b']]\nassert     list_to_float([[1, 2], [3, 4], ['a', 'b']]) == [[1.0, 2.0], [3.0, 4.0], ['a', 'b']]\nassert     list_to_float([[1, 2], ['a', 'b'], 3]) == [[1.0, 2.0], ['a', 'b'], 3.0]\nassert     list_to_float([[1, 2], ['a', 'b'], 3]) == [[1.0, 2.0], ['a', 'b'], 3.0]\nassert     list_to_float([[1, 2], ['a', 'b'], 3]) == [[1.0, 2.0], ['a', 'b'], 3.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([1,2,3]) == [1.0,2.0,3.0]\nassert     list_to_float([2,3,4]) == [2.0,3.0,4.0]\nassert     list_to_float([2,3,4.5]) == [2.0,3.0,4.5]\nassert     list_to_float([]) == []\nassert     list_to_float([1]) == [1.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_to_float([[1, 2, '3'], [1.0, 2.0, 3.0]]) == [[1.0, 2.0, '3.0'], [1.0, 2.0, 3.0]]\nassert     list_to_float([[1, 2, 3], 'abc', [], [], -1]) == [[1, 2, 3], 'abc', [], [], -1]\nassert     list_to_float([[1, 2], 1.2, 2, -1, 'abc', ['a', 'b']]) == [[1, 2], 1.2, 2, -1, 'abc', ['a', 'b']]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nstring = \"Hello, Python!\"\nassert string_to_list(string) == ['Hello','', 'Python', '!']\n\ndef strings_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the first space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nstring_to_list('hello') == ['hello']\nassert string_to_list('hello hello') == ['hello', 'hello']\nassert string_to_list('hello hello there') == ['hello', 'hello', 'there']\n\ndef string_to_list_recursive(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_list(' hello world') == ['hello', 'world']\nassert     string_to_list(' hello world hello') == ['hello', 'world', 'hello']\nassert     string_to_list('hello world hello world') == ['hello', 'world', 'hello', 'world']\nassert     string_to_list('hello world hello') == ['hello', 'world', 'hello']\nassert     string_to_list('hello world') == ['hello', 'world']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a string of characters.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_list(\"Hi, I am a new\") == [\"Hi\", \"I am a new\"]\nassert     string_to_list(\"Hi, I am a new\") == [\"Hi\", \"I am a new\"]\nassert     string_to_list(\"Hi, I am a new\") == [\"Hi\", \"I am a new\"]\nassert     string_to_list(\"Hi, I am a new\") == [\"Hi\", \"I am a new\"]\nassert     string_to_list(\"Hi, I am a new\") == [\"Hi\", \"I am a new\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nExample:\n\nInput: \"Hello\"\nOutput: [\"H\",\"e\",\"l\",\"l\",\"o\"]\n'''\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_list(\"\")     == []\nassert     string_to_list(\"    \")     == [\"\"]\nassert     string_to_list(\"  sdf  \")     == [\"sdf\"]\nassert     string_to_list(\"  sdf sdf\")     == [\"sdf\", \"sdf\"]\nassert     string_to_list(\"  sdf sdf sdf\") == [\"sdf\", \"sdf\", \"sdf\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nstring_to_list(\"This is a sentence\") == [\"This\", \"is\", \"a\", \"sentence\"]\n\nassert \nstring_to_list(\"I am a boy\") == [\"I\", \"am\", \"a\", \"boy\"]\n\nassert \nstring_to_list(\"It's a bird!\") == [\"It\", \"is\", \"a\", \"bird\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_list('This is a test.') == ['This', 'is', 'a', 'test.']\nassert     string_to_list('This is a test.') == ['This', 'is', 'a', 'test.']\nassert     string_to_list('This is a test.') == ['This', 'is', 'a', 'test.']\nassert     string_to_list('This is a test.') == ['This', 'is', 'a', 'test.']\nassert     string_to_list('This is a test.') == ['This', 'is', 'a', 'test.']\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1, 2, 3, 1, 2, 3, 3]) == 1\nassert     search([1, 2, 3, 1, 2, 3, 3]) == 3\nassert     search([1, 2, 3, 1, 2, 3, 3]) == 3\nassert     search([1, 1, 2, 2, 3, 3]) == 1\nassert     search([1, 1, 2, 2, 3, 3]) == 2\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert search([2,2,3,5,6,6,7,8,9,10,10]) == 6\nassert search([10,10,11,12,13,13,14,15,16,16,17,18,20]) == 16\nassert search([2,2,3,5,6,6,7,8,9,10,10]) == None\nassert search([10,10,11,12,13,13,14,15,16,16,17,18,20]) == None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([1, 2, 3, 3, 4, 5, 3, 5]) == 3, 'Test Failed'\nassert     search([1, 2, 3, 4, 5, 5, 5, 5]) == 5, 'Test Failed'\nassert     search([]) == None, 'Test Failed'\nassert     search([1]) == 1, 'Test Failed'\nassert     search([5, 5, 5, 5]) == 5, 'Test Failed'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([3,5,7,1,2,4]) == 1, f'Wrong output'\nassert search([3,5,7,1,2,4]) == 1, f'Wrong output'\nassert search([4,3,5,7,1,2,4]) == 7, f'Wrong output'\nassert search([3,5,7,1,2,4]) == 1, f'Wrong output'\nassert search([3,5,7,1,2,4]) == 1, f'Wrong output'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([2,1,2,3,3]) == 1\nassert     search([1,1,2,3,3]) == 3\nassert     search([2,1,2,2,3,3]) == 2\nassert     search([3,1,2,2,2]) == 2\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     search([1,2,2,3,3,3,4,5]) == 3\nassert     search([1,1,2,3,4,4,5]) == 1\nassert     search([2,2,2,3,3,3,4,5]) == 3\nassert     search([]) == None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([1, 2, 1, 3, 4, 5, 2]) == 4\nassert     search([1, 2, 1, 3, 4, 4, 2]) == 3\n\ndef check_bit_pattern(n):\n    '''\n    A binary number has an array of bit pattern where a bit pattern is 1\n    in the position (i) is 1 if ith bit is set to 1 and zero otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert search([1, 2, 2, 2, 3, 3, 4, 4, 5, 5]) == 4\nassert search([1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5]) == 4\nassert search([1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5]) == 4\nassert search([1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5]) == 5\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(3,-2,4),(-1,-4,5),(-3,7,-1),(-4,5,9)]) == (7,36)\nassert     max_product_tuple([(4,-1,3),(-1,-4,5),(-3,7,-1),(-4,5,9)]) == (-1,-4,5)\n\ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(1, 2), (3, 4), (5, 6), (-1, -2), (0, 2)]) == (2, 6)\nassert     max_product_tuple([(1, 2), (3, 4), (5, 6), (-1, -2), (0, 2)], (4, 5, 6), (8, 7, 6)) == (2, 6)\nassert     max_product_tuple([(1, 2), (3, 4), (5, 6), (-1, -2), (0, 2)], (4, 5, 6), (8, 7, 6), (2, 4, 5, 2)) == (2, 6)\nassert     max_product_tuple([(1, 2), (3, 4), (5, 6), (-1, -2), (0, 2)], (4, 5, 6), (8, 7, 6), (2, 4, 5, 2), (3, 4, 5, 6), (2, 4, 5, 6), (5, 6, 7, 8)) == (6, 6)\n\ndef max_product_tuple_2(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(10, 2), (3, 8), (-1, -3)]) == (-1, -3)\nassert     max_product_tuple([(-1, -2), (3, 8), (10, 2)]) == (3, 8)\nassert     max_product_tuple([(-1, -2), (3, 8), (10, 2), (1, 3)]) == (3, 8)\nassert     max_product_tuple([(10, 2), (1, 3), (3, 8)]) == (3, 8)\nassert     max_product_tuple([(10, 2), (1, 3), (3, 8), (2, 5)]) == (10, 2)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product_tuple([(3,5), (2,1), (5,9), (6,3), (-4,1)]) == (-4,1)\nassert     max_product_tuple([(2,4), (4,6), (-1,3)]) == (-1,3)\nassert     max_product_tuple([(5,7), (5,6), (1,5)]) == (5,7)\nassert     max_product_tuple([(1,2), (3,4), (5,6)]) == (3,4)\nassert     max_product_tuple([(5,7), (5,6), (1,5)]) == (5,7)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product_tuple([(2, 3), (4, -5), (8, 7), (3, -4), (2, -2)]) == (8, -2)\n\ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_product_tuple([(4, 3), (5, 2)]) == (4 * 5, 3 * 2)\nassert     max_product_tuple([(10, 3), (5, 2)]) == (10 * 5, 3 * 2)\nassert     max_product_tuple([(4, 10), (5, 2)]) == (4 * 10, 3 * 2)\nassert     max_product_tuple([(-5, 2), (-4, 1), (1, 1)]) == (5 * 1, 4 * 2)\nassert     max_product_tuple([(-5, 2), (-4, -1), (1, 1)]) == (5 * 1, 4 * 2)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1,2), (2,3), (6,2)]) == (6,2)\nassert     max_product_tuple([(-5,5), (2,3), (2,3)]) == (2,3)\nassert     max_product_tuple([(-1,-2), (-2,4), (-2,2)]) == (-1,-2)\nassert     max_product_tuple([(1,2), (3,4), (5,6)]) == (5,6)\nassert     max_product_tuple([(1,2), (3,4), (5,6)]) == (5,6)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nThe sum of the proper divisors of a number, x, is equal to the sum of all proper divisors of the product of x's proper divisors.\n    The proper divisors of a number are the divisors excluding itself.\n    For example, proper divisors of 27 are 1, 3, 9, 27 (1+3+9+27=27).\n    The sum of all proper divisors of the product of those proper divisors is equal to the original number (27=27).\n    Thus, 27 is a perfect number.\n'''\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef amicable_numbers_sum_iterative(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number using\n    iterative method.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10) == 2\nassert     amicable_numbers_sum(20) == 6\nassert     amicable_numbers_sum(30) == 7\nassert     amicable_numbers_sum(40) == 10\nassert     amicable_numbers_sum(50) == 11\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(1000) == 1146\nassert     amicable_numbers_sum(10000) == 14142\nassert     amicable_numbers_sum(100000) == 23162\nassert     amicable_numbers_sum(1000000) == 23162\nassert     amicable_numbers_sum(10000000) == 4398046511104\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(500) == 1 + 424 + 6765 + 10640 + 1732, \"Incorrect result\"\nassert     amicable_numbers_sum(1000) == 1 + 824 + 1240 + 1732 + 1856, \"Incorrect result\"\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    #dictionary to record the amicable numbers\n    result = {}\n    \n    #loop from 1 to the limit\n    for i in range(1,limit+1):\n        \n        #for a number to be amicable, its sum and itself must be divisible by 1 or the other\n        sum = 0\n        if i in result:\n            result[i] += 1\n            continue\n            \n        for j in range(i+1,limit+1):\n            \n            #check if it is divisible by i or j\n            if (i%j == 0) or (j%i == 0):\n                \n                #if it is, add it to the dictionary\n                if j in result:\n                    result[j] += 1\n                else:\n                    result[j] = 1\n                \n                #add 1 to sum\n                sum += j\n        \n        #check if sum is the same as the original number\n        if i == sum:\n            \n            #add 1 to amicable numbers\n            result[i] += 1\n    \n    #sum all values in dictionary\n    sum = 0\n    for num in result:\n        sum += result[num]\n    \n    #return the sum\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    amicable_numbers_sum(100) == sum(range(1,101))-1\n    assert amicable_numbers_sum(101) == sum(range(1,102))-2"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(100) == 233168\nassert     amicable_numbers_sum(1000) == 233168\nassert     amicable_numbers_sum(10000) == 233168\nassert     amicable_numbers_sum(100000) == 233168\nassert     amicable_numbers_sum(1000000) == 233168\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(3+4j,1+2j) == 1.25\nassert angle_complex(3+4j,1+2j) == 1.25\nassert     angle_complex(3+4j,1+2j) == 1.25\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef circle_area(r):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     angle_complex(cmath.pi/2,1) == 0.0, 'Wrong answer'\nassert     angle_complex(cmath.pi/2,0.5) == 0.5 * cmath.pi, 'Wrong answer'\nassert     angle_complex(cmath.pi/2,0) == 0.0, 'Wrong answer'\nassert     angle_complex(cmath.pi/2,1j) == 0.5 * cmath.pi, 'Wrong answer'\n\ndef perfect_square(n):\n    '''\n    Write a function to check if a number is perfect square or not.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(1+2j, 1+3j) == (0+1j)\nassert     angle_complex(2-3j, 2+1j) == (1+3j)\nassert     angle_complex(4-2j, 4+1j) == (1+1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(1.0,0.0) ==     0.0\nassert     angle_complex(0.0,0.0) ==     pi\nassert     angle_complex(0.0,0.0) ==     pi/2\nassert     angle_complex(0.0,1.0) ==     1.570796326794896\nassert     angle_complex(0.0,0.0) ==     1.570796326794896\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex(0,0)==0\nassert     angle_complex(-1,1)==-90\nassert     angle_complex(1,-1)==90\nassert     angle_complex(3,2)==45\nassert     angle_complex(4,1)==180\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     angle_complex(4,2) ==     complex(-1,4),    \"Wrong answer\"\nassert     angle_complex(2,1) ==     complex(1,2),     \"Wrong answer\"\nassert     angle_complex(1,1) ==     complex(1,1),     \"Wrong answer\"\nassert     angle_complex(2,2) ==     complex(1,-1),    \"Wrong answer\"\nassert     angle_complex(2,3) ==     complex(3,2),     \"Wrong answer\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     angle_complex(1+1j, 2+1j) == 1.5707963267949\nassert     angle_complex(-1+1j, 1-1j) == -1.5707963267949\nassert     angle_complex(-1+1j, -1-1j) == 3.14159265358979\nassert     angle_complex(1-1j, -1+1j) == -1.5707963267949\nassert     angle_complex(1-1j, -1-1j) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     angle_complex(1,1) == 0\nassert     angle_complex(0,1) == 1\nassert     angle_complex(1,0) == 1\nassert     angle_complex(1,2) == 1\nassert     angle_complex(0,0) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     angle_complex(2,5) == 0.7853981633974483\nassert     angle_complex(-1,2) == 1.5707963267948966\nassert     angle_complex(1.5,-2.3) == 1.5707963267948966\nassert     angle_complex(0.2,0.3) == 0.7853981633974483\nassert     angle_complex(0.2,2) == 0.7853981633974483\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_length(\"101010111\") == 6\nassert     find_length(\"101010111\") == 6\nassert     find_length(\"01010111\") == 6\nassert     find_length(\"01010111\") == 6\nassert     find_length(\"00110101\") == 6\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_length(\"00010101\") == 3\nassert find_length(\"11011000\") == 1\nassert find_length(\"1101\") == 0\nassert find_length(\"0011\") == 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length(\"011010\") == 2\nassert     find_length(\"101100\") == 0\nassert     find_length(\"1100111\") == 5\nassert     find_length(\"1010100\") == 4\nassert     find_length(\"11110000\") == 5\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_length(\"01001101010\") == 6\nassert     find_length(\"001100011011\") == 5\nassert     find_length(\"1\") == 0\nassert     find_length(\"0\") == 0\nassert     find_length(\"0000\") == 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_length('10110001') == 5\nassert     find_length('10110010') == 5\nassert     find_length('01010100') == 5\nassert     find_length('11110101') == 0\nassert     find_length('10111000') == 0\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    a, b = 7, 5\n    solution = 1 + 1\n    assert solution == sum(a,b)\n    print(f\"Solution is : {solution}\""
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == '__main__':\n    x = sum(4,8)\n    assert x == 4+8, \"Sum of 4 and 8 is 4+8\"\n    print(\"Correct\")"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum(8,12) == 8+6+4+2+1\nassert     sum(7,11) == 7+8+5+4+3+2+1\nassert     sum(0,1) == 0\nassert     sum(9,0) == 9\nassert     sum(1,1) == 1\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum(9,12) == 4, 'WRONG'\nassert     sum(15,9) == 15, 'WRONG'\nassert     sum(0,2) == 2, 'WRONG'\nassert     sum(9,9) == 9, 'WRONG'\nassert     sum(27,27) == 27, 'WRONG'\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum(10,30) == 10 + 30\nassert     sum(11,11) == 11 + 11\nassert     sum(1,1) == 1 + 1\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum(1,5) == 5\nassert sum(5,1) == 5\nassert sum(1,1) == 2\nassert sum(5,5) == 0\nassert sum(7,3) == 14\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    assert multiply_int(2, 2) == 4\n    assert multiply_int(0, 0) == 0\n    assert multiply_int(1, 1) == 1\n    "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('Test pass.')"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(8, 2) == 16\nassert     multiply_int(1, 2) == 2\nassert     multiply_int(3, -3) == -9\nassert     multiply_int(-1, 2) == 2\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(2, 2) == 4\nassert     multiply_int(123, 12) == 12312\nassert     multiply_int(1, 1) == 1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(1,2) == 2\nassert     multiply_int(-1,2) == -2\nassert     multiply_int(1,-2) == -2\nassert     multiply_int(-1,-2) == -4\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_int(1, 0) == 0\nassert     multiply_int(2, 0) == 0\nassert     multiply_int(-1, 2) == -2\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(3, 0) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     long_words(2, ['apple', 'orange', 'hello']) == ['apple', 'orange']\nassert     long_words(3, ['apple', 'orange', 'hello']) == ['hello']\nassert     long_words(4, ['apple', 'orange', 'hello']) == ['hello', 'world']\nassert     long_words(5, ['apple', 'orange', 'hello']) == []\nassert     long_words(3, ['apple', 'orange', 'hello', 'world']) == ['hello', 'world']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nwords = [\"This\", \"is\", \"an\", \"ex\", \"testing\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     long_words(1, ['algorithm', 'is', 'easy']) == ['algorithm']\nassert     long_words(2, ['python', 'is', 'easy', 'life']) == ['python', 'life']\nassert     long_words(3, ['python', 'is', 'easy', 'life']) == ['python', 'life']\nassert     long_words(4, ['python', 'is', 'easy', 'life']) == ['python', 'life']\nassert     long_words(10, ['python', 'is', 'easy', 'life']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nSolution by Branson\n\n'''\n\ndef long_words(n, str):\n    result = []\n    for i in str.split():\n        if len(i) >= n:\n            result.append(i)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('check test of long_words')\nlong_words(5, ['banana', 'apple','microsoft', 'apple', 'banana', 'kiwi', 'kiwi', 'banana'])\nprint('\\n')\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(long_words(2, ['hello', 'world', '!', '?'])) # ['hello', 'world']\nprint(long_words(2, ['hello', 'world', '!!', '?'])) # ['hello', 'world', '!!']\nprint(long_words(2, ['hello', 'world', '!!', '!!', '!'])) # ['hello', 'world', '!!', '!!', '!']\nprint(long_words(2, ['hello', 'world', '!', '!!', '!'])) # ['hello', 'world']\nprint(long_words(2, [])) # []\nprint(long_words(3, ['hello', 'world', '!', '?'])) # []"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     long_words(4, ['foo', 'bar']) == ['bar']\nassert     long_words(4, ['foo', 'bar', 'bar']) == ['foo', 'bar']\nassert     long_words(4, ['foo', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar']) == ['foo', 'bar']\nassert     long_words(4, ['bar', 'bar']) == []\nassert     long_words(4, ['foo', 'bar', 'foo', 'bar', 'foo']) == ['bar']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nlong_words(4, [\"Python\", \"is\", \"awesome\"]) == [\"awesome\"]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('PASSED: magic_square_test')\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    matrix = [\n        [8, 3, 4, 1],\n        [9, 5, 6, 2],\n        [6, 7, 2, 3],\n        [4, 1, 5, 7]\n    ]\n    print(magic_square_test(matrix))\n    \n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    print(magic_square_test(matrix))\n\n    matrix = [[1,2,3],[4,5,6],[7,8,9],[0,0,0]]\n    print(magic_square_test(matrix))"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    [\n        [8, 1, 6, 3, 5, 7, 4, 9, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [4, 3, 8, 5, 6, 1, 7, 9, 2],\n        [2, 4, 9, 3, 5, 7, 8, 1, 6],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 7, 4, 2, 5, 3, 6, 1, 8],\n        [2, 8, 6, 5, 1, 9, 3, 7, 4],\n    ], \n    magic_square_test([\n        [8, 1, 6, 3, 5, 7, 4, 9, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [4, 3, 8, 5, 6, 1, 7, 9, 2],\n        [2, 4, 9, 3, 5, 7, 8, 1, 6],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 7, 4, 2, 5, 3, 6, 1, 8],\n        [2, 8, 6, 5, 1, 9, 3, 7, 4],\n    ])\nassert not magic_square_test([\n        [8, 1, 6, 3, 5, 7, 4, 9, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [4, 3, 8, 5, 6, 1, 7, 9, 2],\n        [2, 4, 9, 3, 5, 7, 8, 1, 6],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 7, 4, 2, 5, 3, 6, 1, 8],\n        [2, 8, 6, 5, 1, 9, 3, 7, 4],\n    ])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     magic_square_test([[4,3,8,4],\n                            [9,5,1,9],\n                            [2,7,6,2],\n                            [1,3,2,1]]) == True, \"Test Failed\"\nassert     magic_square_test([[4,3,8,4],\n                            [9,5,1,9],\n                            [2,7,6,2],\n                            [1,3,2,4]]) == False, \"Test Failed\"\nassert     magic_square_test([[4,3,8,4],\n                            [9,5,1,9],\n                            [2,7,6,2],\n                            [1,3,2,5]]) == False, \"Test Failed\"\nassert     magic_square_test([[1,2,3,4],\n                            [5,6,7,8],\n                            [9,10,11,12],\n                            [13,14,15,16]]) == False, \"Test Failed\"\nassert     magic_square_test([[1,2,3,4],\n                            [5,6,7,8],\n                            [9,10,11,12],\n                            [13,14,15,16]]) == False, \"Test Failed\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     magic_square_test([\n            [4, 9, 2],\n            [3, 5, 7],\n            [8, 1, 6]\n        ]) is True, \"The matrix is not a magic square\"\n\nassert     magic_square_test([\n            [1, 2, 3],\n            [2, 3, 1],\n            [3, 1, 2]\n        ]) is False, \"The matrix is not a magic square\"\n\nassert     magic_square_test([\n            [4, 9, 2],\n            [3, 5, 7],\n            [8, 1, 6],\n            [7, 6, 4]\n        ]) is True, \"The matrix is not a magic square\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) == True, \"Not a magic square\"\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) == False, \"Not a magic square\"\nassert     magic_square_test([[1, 2, 3],\n                            [8, 9, 4],\n                            [7, 6, 5]]) == False, \"Not a magic square\"\n\n\nimport numpy as np\n\ndef magic_square_test2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7],\n                            [8, 1, 6]]) == True, 'incorrect'\nassert     magic_square_test([[1, 2, 3], \n                            [2, 3, 1],\n                            [3, 1, 2]]) == False, 'incorrect'\nassert     magic_square_test([[1, 2, 3, 4], \n                            [2, 3, 1, 2],\n                            [3, 4, 1, 3],\n                            [4, 1, 2, 3]]) == True, 'incorrect'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7],\n                            [8, 1, 6]]) == True, \"Test 1 Failed\"\nassert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7],\n                            [8, 1, 6]]) == False, \"Test 1 Failed\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_occurrences2(nums):\n    '''\n    Another way, without using collections,\n    '''\n    if nums == []:\n        return None\n\n    max_n = 0\n    max_item = None\n    for i,n in enumerate(nums):\n        if n > max_n:\n            max_item = i\n            max_n = n\n    return max_item\n\ndef max_occurrences3(nums):\n    '''\n    Another way, using dictionary\n    '''\n    if nums == []:\n        return None\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_n = 0\n    max_item = None\n    for i,n in d.items():\n        if n > max_n:\n            max_item = i\n            max_n = n\n    return max_item\n\ndef max_occurrences4(nums):\n    '''\n    Another way, using defaultdict\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_n = 0\n    max_item = None\n    for i,n in d.items():\n        if n > max_n:\n            max_item = i\n            max_n = n\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_occurrences_test():\n    '''\n    Test Case 1\n    '''\n    nums = [1,2,2,2,3,4]\n    assert max_occurrences(nums) == 2\n\ndef max_occurrences_test_2():\n    '''\n    Test Case 2\n    '''\n    nums = [1,2,2,2,3,4,2]\n    assert max_occurrences(nums) == 2\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_occurrences_1(nums):\n    '''\n    Sort by frequency in reverse order.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_occurrences([1, 2, 1, 3, 4, 4, 4, 4, 4]) == 1\nassert     max_occurrences([1, 1, 1, 2, 1, 1, 3, 1]) == 1\nassert     max_occurrences([1, 1, 2, 2, 3, 4]) == 2\nassert     max_occurrences([]) == None\nassert     max_occurrences([1, 1, 1, 2, 1, 2, 3, 1, 3, 4, 4]) == 2\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_occurrences(lst, item):\n    '''\n    Write a function to count the number of occurrences of an item in a list.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_occurrences([1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\n\nassert     max_occurrences([1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert     max_occurrences([1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert     max_occurrences([1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_occurrences([]) == None\nassert     max_occurrences([1,1,1,2,2,3]) == 2\nassert     max_occurrences([1,1,1,1,2,2,3]) == 1\nassert     max_occurrences([]) == None\nassert     max_occurrences([2,1,1,2,2,3,3]) == 2\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_triplets(nums):\n    '''\n    Given an array A of N integers. A triplet is a triplet (i, j, k) such that i < j < k and A[i] + A[j] + A[k] == 0.\n    Find all unique triplets in A such that sum of any three numbers is zero.\n    Input: A = [-3, 0, 1, 2, -1, 1, -2]\n    Output: [[-3, 1, 2], [-2, 0, 1]]\n    Explanation: Both triplets (-3, 1, 2) and (-2, 0, 1) are solutions.\n    '''\n    # TODO: write your code here\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nreverse_vowels(\"hello\") == \"holle\"\nreverse_vowels(\"hello world\") == \"world holle\"\nreverse_vowels(\"hello, world!\") == \",world!holle\"\nreverse_vowels(\"hello world!\") == \"!dlrow,olleh\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('hellopy') == 'yhollepy'\nassert     reverse_vowels('hello world') == 'dlrow olleh'\nassert     reverse_vowels('hello!') == 'olleh!'\nassert     reverse_vowels('hello?') == 'olleh?'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert reverse_vowels('this is my string') == 'gnirts sihT'\nassert reverse_vowels('hello my name') == 'name hollo my'\nassert reverse_vowels('hello my name!') == '!name hollo my'\nassert reverse_vowels('This is my string') == 'tsay siTH'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\"\nassert     reverse_vowels(\"halo\") == \"aloh\"\nassert     reverse_vowels(\"Yo\") == \"oYo\"\nassert     reverse_vowels(\"Banana\") == \"ananaB\"\nassert     reverse_vowels(\"Bin\") == \"inB\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nstr1 = input('Enter a string: ')\nreverse_vowels(str1"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_vowels('hello world!') == '!dlrow olleh', \"Should reverse the vowels of given string\"\nassert     reverse_vowels('python') == 'ython', \"Should reverse the vowels of given string\"\nassert     reverse_vowels('python is a great language!') == '!gr et a si ng lang', \"Should reverse the vowels of given string\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels('GeeksQuiz') == 'QnesGkDeR'\nassert     reverse_vowels('qeEsGjrG') == 'jGrqgGeR'\nassert     reverse_vowels('GEEkQuiz') == 'qUizGEEk'\nassert     reverse_vowels('abracadabra') == 'brakadabra'\nassert     reverse_vowels('whyw') == 'whyw'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels(\"leetcode\") == \"tleotced\", \"Wrong\"\nassert reverse_vowels(\"hello\") == \"olleh\", \"Wrong\"\nassert reverse_vowels(\"a\") == \"a\", \"Wrong\"\nassert reverse_vowels(\"sdsd\") == \"dsds\", \"Wrong\"\nassert reverse_vowels(\"hix\") == \"hiX\", \"Wrong\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels(\"hgfdhj\") == \"jghdhf\", \"Wrong output\"\nassert     reverse_vowels(\"vttvglghhh\") == \"hghhhglvtt\", \"Wrong output\"\nassert     reverse_vowels(\"Aa\") == \"aa\", \"Wrong output\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string(()) == \"\"\nassert     tup_string((1,)) == \"1\"\nassert     tup_string((\"one\",)) == \"one\"\nassert     tup_string((\"first\", \"second\", \"third\")) == \"firstsecondthird\"\n\n\ndef tup_sum(tup1):\n    '''\n    Write a function to sum up the numbers in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tup_string((0,1,2)) == '(0, 1, 2)'\nassert     tup_string((0,1,2,3,4)) == '(0, 1, 2, 3, 4)'\nassert     tup_string((0,1,2,3,4,5)) == '(0, 1, 2, 3, 4, 5)'\nassert     tup_string((0,1,2,3,4,5,6)) == '(0, 1, 2, 3, 4, 5, 6)'\nassert     tup_string((0,1,2,3,4,5,6,7,8,9)) == '(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tup_string((1, 2, 3)) == '123'\nassert     tup_string(('a', 2, 'b')) == 'ab2'\nassert     tup_string((2, 3, 'b')) == '2b3'\nassert     tup_string((2, 3, 'b',)) == '2b3'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string((1,2,3)) == '1 2 3'\nassert     tup_string((1,2,'string')) == '1 2 string'\nassert     tup_string(('string',2)) =='string 2'\nassert     tup_string((1,2,'string','three')) == '1 2 string three'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((\"a\", \"b\", \"c\")) == \"abc\"\nassert tup_string((1, 2, 3)) == \"123\"\nassert tup_string((4, 5, 6, 7)) == \"4,5,6,7\"\nassert tup_string((True, False, True, False)) == \"True,False,True,False\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string((1, 2, 3)) == \"1, 2, 3\", \"not correct\"\nassert     tup_string((1,2,3,4)) == \"1, 2, 3, 4\", \"not correct\"\nassert     tup_string((1,2,3,4,5)) == \"1, 2, 3, 4, 5\", \"not correct\"\nassert tup_string((1,2,3,4,5,6)) == \"1, 2, 3, 4, 5, 6\", \"not correct\"\nassert     tup_string((1,2,3,4,5,6,7)) == \"1, 2, 3, 4, 5, 6, 7\", \"not correct\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tup_string(()) == \"()\", \"Expected output '()'\"\nassert tup_string((1,)) == \"(1,)\", \"Expected output '(1,)'\"\nassert tup_string((1, 2, 3)) == \"(1, 2, 3)\", \"Expected output '(1, 2, 3)'\"\nassert tup_string((1, 2, 3, 4)) == \"(1, 2, 3, 4)\", \"Expected output '(1, 2, 3, 4)'\"\nassert tup_string((1, 2, 3, 4, 5)) == \"(1, 2, 3, 4, 5)\", \"Expected output '(1, 2, 3, 4, 5)'\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tup_string((1,2,3)) == '1,2,3'\nassert     tup_string((1)) == '1'\nassert     tup_string(()) == ''\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntup_string((1, 2, 3, 4)) == '1 2 3 4'\nassert \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tup_string((1,2,3)) == '1,2,3'\n\nassert     tup_string((1,2)) == '1,2'\n\nassert     tup_string((1,)) == '1'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    sum_negativenum([-1, -1, 1, 1, 1, -2]) == -3, 'unexpected output'\n    sum_negativenum([-1, 1, 1, 1]) == 5, 'unexpected output'\n    sum_negativenum([1, -1, -1]) == -2, 'unexpected output'\n    sum_negativenum([-1, 1, 1, 1, 1]) == 4, 'unexpected output'\n\nprint(\"TESTCASE 1: PASS\")\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    sum_negativenum([-2,1,-3,4,-1]) == 2\n    sum_negativenum([-2,-4,-3,-5,-2]) == -6\n    sum_negativenum([-2,-4,-3,-6,-2]) == 2\nassert\n    sum_negativenum([-2,1,-3,4,-1]) == -3\n    sum_negativenum([-2,-4,-3,-5,-2]) == -7\n    sum_negativenum([-2,-4,-3,-6,-2]) == -3"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_negativenum([-3,4,1,5, -2,1,1,1, -3,4]) == -8, 'the expected result is -8'\nassert sum_negativenum([1,2,3,4, 5,6,7,8, 9,10]) == 23, 'the expected result is 23'"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_negativenum([-1,-2,3,-4]) == -6\nassert     sum_negativenum([-1]) == -1\nassert     sum_negativenum([-2,-3,4]) == -5\nassert     sum_negativenum([-2,-3,-4]) == -7\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import sys\n    import io\n    def readlines():\n        for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):\n            yield line.strip('\\n')\n\n    lines = readlines()\n    while True:\n        try:\n            line = next(lines)\n            n = int(line);\n            \n            ret = sum_negativenum(n)\n\n            out = str(ret);\n            print(out)\n        except StopIteration:\n            break\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_negativenum_1(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pass\n\ndef sum_negativenum_2(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # no need to invert the list\n    pass"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([1, 2, -3]) == -3, 'your function is not correct'\n\n'''\n4.4 Find the maximum element of a list of numbers using max()\n'''\n\ndef max_element_in_list(nums):\n    '''\n    Write a function to find the maximum element of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -1\nassert     sum_negativenum([-1, -2, -3, -4, 5]) == -6\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -7\n\ndef sum_negativenum_neg(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4, -5]) == -1\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -31\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == -343\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100]) == -1827\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359, -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378, -379, -380, -381, -382, -383, -384, -385, -386, -387, -388, -389, -390, -391, -392, -393, -394, -395, -396, -397, -398, -399, -400, -401, -402, -403, -404, -405, -406, -407, -408, -409, -410, -411, -412, -413, -414, -415, -416, -417, -418, -419, -420, -421, -422, -423, -424, -425, -426, -427, -428, -429, -430, -431, -432, -433, -434, -435, -436, -437, -438, -439, -440, -441, -442, -443, -444, -445, -446, -447, -448, -449, -450, -451, -452, -453, -454, -455, -456, -457, -458, -459, -460, -461, -462, -463, -464, -465, -466, -467, -468, -469, -470, -471, -472, -473, -474, -475, -476, -477, -478, -479, -480, -481, -482, -483, -484, -485, -486, -487, -488, -489, -490, -491, -492, -493, -494, -495, -496, -497, -498, -499, -500, -501, -502, -503, -504, -505, -506, -50"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhexagonal_num(1) == 1\nhexagonal_num(2) == 3\nhexagonal_num(3) == 5\nhexagonal_num(4) == 7\nhexagonal_num(5) == 11\nhexagonal_num(6) == 13\nhexagonal_num(7) == 15\nhexagonal_num(8) == 17\nhexagonal_num(9) == 19\nhexagonal_num(10) == 21\nhexagonal_num(11) == 23\nhexagonal_num(12) == 25\nhexagonal_num(13) == 27\nhexagonal_num(14) == 29\nhexagonal_num(15) == 31\nhexagonal_num(16) == 33\nhexagonal_num(17) == 35\nhexagonal_num(18) == 37\nhexagonal_num(19) == 39\nhexagonal_num(20) == 41\nhexagonal_num(21) == 43\nhexagonal_num(22) == 45\nhexagonal_num(23) == 47\nhexagonal_num(24) == 49\nhexagonal_num(25) == 51\nhexagonal_num(26) == 53\nhexagonal_num(27) == 55\nhexagonal_num(28) == 57\nhexagonal_num(29) == 59\nhexagonal_num(30) == 61\nhexagonal_num(31) == 63\nhexagonal_num(32) == 65\nhexagonal_num(33) == 67\nhexagonal_num(34) == 69\nhexagonal_num(35) == 71\nhexagonal_num(36) == 73\nhexagonal_num(37) == 75\nhexagonal_num(38) == 77\nhexagonal_num(39) == 79\nhexagonal_num(40) == 81\nhexagonal_num(41) == 83\nhexagonal_num(42) == 85\nhexagonal_num(43) == 87\nhexagonal_num(44) == 89\nhexagonal_num(45) == 91\nhexagonal_num(46) == 93\nhexagonal_num(47) == 95\nhexagonal_num(48) == 97\nhexagonal_num(49) == 99\nhexagonal_num(50) == 101\nhexagonal_num(51) == 103\nhexagonal_num(52) == 105\nhexagonal_num(53) == 107\nhexagonal_num(54) == 109\nhexagonal_num(55) == 111\nhexagonal_num(56) == 113\nhexagonal_num(57) == 115\nhexagonal_num(58) == 117\nhexagonal_num(59) == 119\nhexagonal_num(60) == 121\nhexagonal_num(61) == 123\nhexagonal_num(62) == 125\nhexagonal_num(63) == 127\nhexagonal_num(64) == 129\nhexagonal_num(65) == 131\nhexagonal_num(66) == 133\nhexagonal_num(67) == 135\nhexagonal_num(68) == 137\nhexagonal_num(69) == 139\nhexagonal_num(70) == 141\nhexagonal_num(71) == 143\nhexagonal_num(72) == 145\nhexagonal_num(73) == 147\nhexagonal_num(74) == 149\nhexagonal_num(75) == 151\nhexagonal_num(76) == 153\nhexagonal_num(77) == 155\nhexagonal_num(78) == 157\nhexagonal_num(79) == 159\nhexagonal_num(80) == 161\nhexagonal_num(81) == 163\nhexagonal_num(82) == 165\nhexagonal_num(83) == 167\nhexagonal_num(84) == 169\nhexagonal_num(85) == 171\nhexagonal_num(86) == 173\nhexagonal_num(87) == 175\nhexagonal_num(88) == 177\nhexagonal_num(89) == 179\nhexagonal_num(90) == 181\nhexagonal_num(91) == 183\nhexagonal_num(92) == 185\nhexagonal_num(93) == 187\nhexagonal_num(94) == 189\nhexagonal_num(95) == 191\nhexagonal_num(96) == 193\nhexagonal_num(97) == 195\nhexagonal_num(98) == 197\nhexagonal_num(99) == 199\nhexagonal_num(100) == 201\nhexagonal_num(101) == 203\nhexagonal_num(102) == 205\nhexagonal_num(103) == 207\nhexagonal_num(104) == 209\nhexagonal_num(105) == 211\nhexagonal_num(106) == 213\nhexagonal_num(107) == 215\nhexagonal_num(108) == 217\nhexagonal_num(109) == 219\nhexagonal_num(110) == 221\nhexagonal_num(111) == 223\nhexagonal_num(112) == 225\nhexagonal_num(113) == 227\nhexagonal_num(114) == 229\nhexagonal_num(115) == 231\nhexagonal_num(116) == 233\nhexagonal_num(117) == 235\nhexagonal_num(118) == 237\nhexagonal_num(119) == 239\nhexagonal_num(120) == 241\nhexagonal_num(121) == 243\nhexagonal_num(122) == 245\nhexagonal_num(123) == 247\nhexagonal_num(124) == 249\nhexagonal_num(125) == 251\nhexagonal_num(126) == 253\nhexagonal_num(127) == 255\nhexagonal_num(128) == 257\nhexagonal_num(129) == 259\nhexagonal_num(130) == 261\nhexagonal_num(131) == 263\nhexagonal_num(132) == 265\nhexagonal_num(133) == 267\nhexagonal_num(134) == 269\nhexagonal_num(135) == 271\nhexagonal_num(136) == 273\nhexagonal_num(137) == 275\nhexagonal_num(138) == 277\nhexagonal_num(139) == 279\nhexagonal_num(140) == 281\nhexagonal_num(141) == 283\nhexagonal_num(142) == 285\nhexagonal_num(143) == 287\nhexagonal_num(144) == 289\nhexagonal_num(145) == 291\nhexagonal_num(146) == 293\nhexagonal_num(147) == 295\nhexagonal_num(148) == 297\nhexagonal_num(149) == 299\nhexagonal_num(150) == 301\nhexagonal_num(151) == 303\nhexagonal_num(152) == 305\nhexagonal_num(153) == 307\nhexagonal_num(154) == 309\nhexagonal_num(155) == 311\nhexagonal_num(156) == 313\nhexagonal_num(157) == 315\nhexagonal_num(158) == 317\nhexagonal_num(159) == 319\nhexagonal_num(160) == 321\nhexagonal_num(161) == 323\nhexagonal_num(162) == 325\nhexagonal_num(163) == 327\nhexagonal_num(164) == 329\nhexagonal_num(165) == 331\nhexagonal_num(166) == 333\nhexagonal_num(167) == 335\nhexagonal_num(168) == 337\nhexagonal_num(169) == 339\nhexagonal_num(170) == 341\nhexagonal_num(171) == 343\nhexagonal_num(172) == 345\nhexagonal_num(173) == 347\nhexagonal_num(174) == 349\nhexagonal_num(175) == 351\nhexagonal_num(176) == 353\nhexagonal_num(177) == 355\nhexagonal_num(178) == 357\nhexagonal_num(179) == 359\nhexagonal_num(180) == 361\nhexagonal_num(181) == 363\nhexagonal_num(182) == 365\nhexagonal_num(183) == 367\nhexagonal_num(184) == 369\nhexagonal_num(185) == 371\nhexagonal_num(186) == 373\nhexagonal_num(187) == 375\nhexagonal_num(188) == 377\nhexagonal_num(189) == 379\nhexagonal_num(190) == 381\nhexagonal_num(191) == 383\nhexagonal_num(192) == 385\nhexagonal_num(193) == 387\nhexagonal_num(194) == 389\nhexagonal_num(195) == 391\nhexagonal_num(196) == 393\nhexagonal_num(197) == 395\nhexagonal_num(198) == 397\nhexagonal_num(199) == 399\nhexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 14\nassert     hexagonal_num(4) == 46\nassert     hexagonal_num(5) == 149\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     hexagonal_num(1)    == 1\nassert     hexagonal_num(2)    == 7\nassert     hexagonal_num(3)    == 15\nassert     hexagonal_num(4)    == 21\nassert     hexagonal_num(5)    == 28\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    hexagonal_num(1) == 1\n    hexagonal_num(2) == 3\n    hexagonal_num(3) == 7\n    hexagonal_num(4) == 13\n    hexagonal_num(5) == 25\n    hexagonal_num(6) == 44\n    hexagonal_num(7) == 79\n    hexagonal_num(8) == 149\n    hexagonal_num(9) == 233\n    hexagonal_num(10) == 377\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef hexagonal_num2(n): \n    '''\n    Find the nth hexagonal number in O(1).\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nhexagonal_num(2)"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     zero_count([0,0,0,0,1,1,1,0,1]) == 0.2, 'Wrong result'\n\nassert     zero_count([1,0,1,0,0]) == 0.5, 'Wrong result'\n\nassert     zero_count([0,0,0,1,0,1]) == 0.4, 'Wrong result'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nnums = array('i', [0,0,0,1,1,0,0,0])\nprint(zero_count(nums))\n\ndef count_zeros(n):\n    \"\"\"\n    Write a function to calculate the number of zeros in a list of numbers.\n    \"\"\"\n    count = 0\n    if n < 1:\n        return count\n    else:\n        for i in range(n):\n            if n == 0:\n                return count\n            else:\n                count += 1\n                n -= 1\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     zero_count([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     zero_count([0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1]) == 0.5\nassert     zero_count([0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1]) == 0.6666666666666666\nassert     zero_count([0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1]) == 0.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     zero_count([0,1,0,1,0,0,0,0]) == 0.625\nassert     zero_count([0,1,0,1,0,0,0,0,0]) == 0.625\nassert     zero_count([1,1,1]) == 0.75\nassert     zero_count([1,1,1,1]) == 0.75\nassert     zero_count([0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0]) == 0.75\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert zero_count([0,1,0,1,0,1,0,1]) == 3\nassert zero_count([0,0,0,0,1,1,0,1]) == 1\nassert zero_count([0,0,0,0,1,1,0,1,0,1]) == 2\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     zero_count([0,0,0,1,1]) == 0.5\nassert     zero_count([0,0,0,1,1,0]) == 0.6666666666666666\nassert     zero_count([0,0,0,0,1,1]) == 1\nassert     zero_count([0,0,0,0,0,0,0,0]) == 0.25\nassert     zero_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     zero_count([])==0.0, \"Should return 0 for empty array\"\nassert zero_count([1])==0.0, \"Should return 0 for single element\"\nassert zero_count([0,1])==0.5, \"Should return 1/2 for two non-zero elements\"\nassert zero_count([0,0,1])==0.75, \"Should return 1/3 for three non-zero elements\"\nassert zero_count([0,0,0,1])==0.75, \"Should return 1/4 for four non-zero elements\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     zero_count([1,0,0,0,0,0,0]) == 1.0\nassert     zero_count([1,0,0,1,0,0,1,0]) == 0.6\nassert     zero_count([1,0,1,0,0,0,0,1]) == 0.4\n\ndef zero_count_1(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    num_zeroes = 0\n    num_non_zeroes = 0\n\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     zero_count([0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True, \" 2 should be a Sum Of Non-Zero Powers Of 2\"\nassert     is_Sum_Of_Powers_Of_Two(0) == False, \" 0 should not be a Sum Of Non-Zero Powers Of 2\"\nassert     is_Sum_Of_Powers_Of_Two(1) == False, \" 1 should not be a Sum Of Non-Zero Powers Of 2\"\nassert     is_Sum_Of_Powers_Of_Two(15) == True, \" 15 should be a Sum Of Non-Zero Powers Of 2\"\nassert     is_Sum_Of_Powers_Of_Two(32) == False, \" 32 should not be a Sum Of Non-Zero Powers Of 2\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(12) == True, 'error in sample_test'\nassert \nis_Sum_Of_Powers_Of_Two(13) == False, 'error in sample_test'\nassert\n\nprint('All the test cases passed')\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True, \"test case 1 failed\"\nassert     is_Sum_Of_Powers_Of_Two(3) == True, \"test case 2 failed\"\nassert     is_Sum_Of_Powers_Of_Two(4) == True, \"test case 3 failed\"\nassert     is_Sum_Of_Powers_Of_Two(5) == False, \"test case 4 failed\"\nassert     is_Sum_Of_Powers_Of_Two(6) == True, \"test case 5 failed\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(1)\n\nassert \nis_Sum_Of_Powers_Of_Two(2)\n\nassert \nis_Sum_Of_Powers_Of_Two(4)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == False\nassert     is_Sum_Of_Powers_Of_Two(16) == False\nassert     is_Sum_Of_Powers_Of_Two(20) == True\nassert     is_Sum_Of_Powers_Of_Two(0) == False\nassert     is_Sum_Of_Powers_Of_Two(32) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True, 'Wrong Answer'\nassert     is_Sum_Of_Powers_Of_Two(1) == True, 'Wrong Answer'\nassert     is_Sum_Of_Powers_Of_Two(2) == False, 'Wrong Answer'\nassert     is_Sum_Of_Powers_Of_Two(3) == True, 'Wrong Answer'\nassert     is_Sum_Of_Powers_Of_Two(4) == True, 'Wrong Answer'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(10) == True\nassert     is_Sum_Of_Powers_Of_Two(3) == False\nassert     is_Sum_Of_Powers_Of_Two(11) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True, \"is_Sum_Of_Powers_Of_Two(0) returns True\"\nassert     is_Sum_Of_Powers_Of_Two(2) == False, \"is_Sum_Of_Powers_Of_Two(2) returns False\"\nassert     is_Sum_Of_Powers_Of_Two(4) == True, \"is_Sum_Of_Powers_Of_Two(4) returns True\"\nassert     is_Sum_Of_Powers_Of_Two(11) == False, \"is_Sum_Of_Powers_Of_Two(11) returns False\"\nassert     is_Sum_Of_Powers_Of_Two(100) == True, \"is_Sum_Of_Powers_Of_Two(100) returns True\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circle_circumference(1) == 3.141592, 'Wrong output'\nassert     circle_circumference(2) == 12.574861, 'Wrong output'\n\n'''\n3.    Write a function called to_inches which converts a distance in feet, in_to_inches, into inches.\n'''\ndef to_inches(in_to_inches, in_to_feet):\n    '''\n    Write a function to convert feet, to_inches\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circle_circumference(1) == 2 * math.pi\nassert     circle_circumference(4) == 2 * math.pi * 4\nassert     circle_circumference(8) == 2 * math.pi * 8\n\n\n'''\n10. Write a function to find the circumference of a circle. The function should be able to accept any positive integer as radius.\n'''\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     circle_circumference(3) == 6.283185307179586\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncircle_circumference(1) == pi * 2\ncircle_circumference(2) == pi * 2 * 2\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     circle_circumference(5) == 28.274333882308138\nassert     circle_circumference(2) == 9.277814168680205\nassert     circle_circumference(0) == 0\nassert     circle_circumference(-1) == None"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert extract_singly([]) == set()\nassert extract_singly([[]]) == set()\nassert extract_singly([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]) == set([1, 2, 3, 4])\nassert extract_singly([[1], [2, 3], [4, 5, 6]]) == set([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[1,2,3],[4],[5,6],[7]]) == set([1,2,3,4,5,6,7])\nassert     extract_singly([[1,2,3,4,5,6,7],[8,9]]) == set([1,2,3,4,5,6,7,8,9])\nassert     extract_singly([[1,2,3,4,5,6,7],[8,9],[10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     extract_singly([[1,2,3,4,5,6,7,8],[9],[10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     extract_singly([[1,2,3,4,5,6,7],[8],[9,10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[[1], 2], [[3], 4]]) == {1, 2, 3, 4}\nassert     extract_singly([[1], 2, [[3], 4]]) == {1, 2, 3, 4}\nassert     extract_singly([[1, 2], [[3], 4]]) == {1, 2, 3, 4}\nassert     extract_singly([[1, 2, 3], 4]) == {1, 2, 3, 4}\nassert     extract_singly([[1, 2, 3], [4, 5]]) == {1, 2, 3, 4, 5}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert extract_singly( [[1,2,3],[4,5,6]] ) == {1,2,3,4,5,6}\nassert extract_singly([1,2,3]) == {1,2,3}\nassert extract_singly([1,2,3,4,5,6,7]) == {1,2,3,4,5,6,7}\nassert extract_singly([]) == set()\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[[1, 2], 3], [[4], 5], 6, [[7, 8], 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert extract_singly([[1, 2, 3, 4], 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert extract_singly([[1], 2, 3, 4]) == [1, 2, 3, 4]\nassert extract_singly([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert extract_singly([]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_singly([1, 2, 3, 4, 5]) == 6\nassert     extract_singly([1, 2, 3, 4, 5]) == 6\nassert     extract_singly([1, 2, 3, 4, 5, 6]) == 15\nassert     extract_singly([1, 2, 3, 4, 5, 6, 7]) == 21\nassert     extract_singly([1, 2, 3, 4, 5, 6, 7, 8]) == 30\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[[1], 2], [[3, 4], 5], [[6]]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[[1], 2], [[3, 4], 5], [[6]]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[[1], 2], [[3, 4], 5], [[6]]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[[1], 2], [[3, 4], 5], [[6]]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[[1], 2], [[3, 4], 5], [[6]]]) == {1, 2, 3, 4, 5, 6}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_singly([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,4,5,6,7,8,9]\nassert extract_singly([[1],[2],[3],[4],[5],[6],[7],[8],[9]]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_singly([]) == []\nassert     extract_singly([1]) == [1]\nassert     extract_singly([[1,2]]) == [1,2]\nassert     extract_singly([[1],[2]]) == [1,2]\nassert     extract_singly([[1,2,3,4],[5,6,7,8]]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pancake_sort([3,2,1]) == [1,2,3]\nassert     pancake_sort([3,2,1,5]) == [1,5,2,3]\nassert     pancake_sort([3,2,1,5,7]) == [1,5,7,2,3]\nassert     pancake_sort([3,2,1,5,7,9,4]) == [1,4,7,5,2,9,3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nnums = [3, 2, 1, 4]\npancake_sort(nums)\n\nassert \npancake_sort([3,2,4,1])\nassert \npancake_sort([3,1,4,2])"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef pancake_sort_test():\n    '''\n    Test pancake_sort\n    '''\n    print(\"Testing pancake_sort\")\n    test_nums = [1, 2, 4, 3, 5, 6, 7, 8]\n    pancake_sort(test_nums)\n    assert test_nums == [1, 2, 3, 4, 5, 6, 7, 8]\n    print(\"Test passed\\n\")\n\nif __name__ == '__main__':\n    pancake_sort_test()\n    "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pancake_sort([]) == []\nassert     pancake_sort([1]) == [1]\nassert     pancake_sort([3, 2, 1]) == [1, 2, 3]\nassert     pancake_sort([3, 2, 1, 4, 5]) == [5, 4, 1, 2, 3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     [5, 4, 3, 2, 1] == pancake_sort([5, 4, 3, 2, 1])\nassert     [5, 4, 2, 3, 1] == pancake_sort([5, 4, 2, 3, 1])\nassert     [1, 2, 3, 4, 5] == pancake_sort([1, 2, 3, 4, 5])\nassert     [5, 4, 3, 2, 1] == pancake_sort([5, 4, 3, 2, 1])\nassert     [2, 1, 3, 4, 5] == pancake_sort([2, 1, 3, 4, 5])\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_samepair([2,3,2],['a','b','c'],['d','e','f']) == 2\nassert     count_samepair([1,2,3,4],['a','b','c','d'],['e','f','g','h']) == 3\nassert     count_samepair([1,2,3,4,5],['a','b','c','d','e'],['f','g','h','i']) == 3\nassert     count_samepair([1,2,3,4],['a','b','c','d'],['e','f','g','h']) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair(['a','a','b','c'], ['b','b','a','c'], ['a','b','a','c'])==3, \"Should be 3\"\nassert     count_samepair(['a','a','b','c'], ['b','b','a','c'], ['a','b','c','a'])==0, \"Should be 0\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_samepair([1,2,3],[2,3,2],[3,2,1]) == 1, \"incorrect\"\nassert     count_samepair([1,2,3,2,3],[2,3,2,2,2],[3,2,1,2,3]) == 2, \"incorrect\"\nassert     count_samepair([1,2,3,2,3],[2,3,2,2,2],[3,2,1,2,3]) == 2, \"incorrect\"\nassert     count_samepair([1,2,3,2,3,2,3],[2,3,2,2,2,2,2],[3,2,1,2,3,2,3]) == 3, \"incorrect\"\nassert count_samepair([1,2,3,2,3,2,3],[2,3,2,2,2,2,2],[3,2,1,2,3,2,3]) == 3, \"incorrect\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair( [1,2,3,4,5,6],\n                          [1,1,2,3,4,5],\n                          [1,2,3,4,5,6] ) ==  [3,2,1]\nassert     count_samepair( [1,2,3,4,5,6],\n                          [1,1,2,3,4,5],\n                          [1,2,3,4,5,6] ) ==  [1,3,1]\nassert     count_samepair( [1,2,3,4,5,6],\n                          [1,1,2,3,4,5],\n                          [1,1,2,3,4,5] ) ==  [0,1]\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_samepair(list1=[1, 2, 1, 2, 1, 3], list2=[1, 2, 1, 2, 1, 3], list3=[1, 2, 1, 2, 1, 3]) == 3\nassert count_samepair(list1=[1, 1, 1, 1], list2=[1, 1, 1, 1], list3=[1, 1, 1, 1]) == 1\nassert count_samepair(list1=[1], list2=[1], list3=[1]) == 0"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([1,1,2],[2,1,1],[1,2,1]) == 1, '1,1,2'\nassert     count_samepair([1,1,2],[2,1,1],[2,2,2]) == 0, '1,1,2'\nassert     count_samepair([1,1,2],[2,1,1],[1,2,2]) == 1, '1,1,2'\nassert     count_samepair([1,1,2],[2,1,1],[2,2,2]) == 1, '1,1,2'\n\n'''\nQuestion:\nHow do you find the longest sequence in a list?\n'''\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_samepair([1,2,3,1,2,3,1,2,3], \n                        [1,2,3,1,2,3,1,2,3],\n                        [1,2,3,1,2,3,1,2,3]) == 5\nassert     count_samepair([1,1,1,1], \n                        [1,1,1,1],\n                        [1,1,1,1]) == 1\nassert     count_samepair([1,2,3,1,2,3,1,2,3], \n                        [1,2,3,1,2,3,1,2,3],\n                        [1,2,3,1,2,3,1,2,3]) == 10\nassert     count_samepair([1,1,1,1], \n                        [1,1,1,1],\n                        [1,1,1,1]) == 3\nassert     count_samepair([1,2,3,1,2,3,1,2,3], \n                        [1,2,3,1,2,3,1,2,3],\n                        [1,2,3,1,2,3,1,2,3]) == 8\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair(['a','b','a','b','a','b'],['a','b','a','b','a','b'],['a','a','a']) == 2\nassert     count_samepair(['a','b','a','b','a','b'],['a','b','a','b','a','b'],['b','b','b']) == 2\nassert count_samepair(['a','b','a','b','a','b'],['a','b','a','b','a','b'],['a','a','a']) == 0\nassert count_samepair(['a','b','a','b','a','b'],['a','b','a','b','a','b'],['b','b','b','b']) == 1\nassert count_samepair(['a','b','a','b','a','b'],['a','b','a','b','a','b'],['c','c','c']) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_samepair([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists(tuple([1,2,3,4,5])) == 1, 'test case 1 failed'\nassert     find_lists(tuple([[1,2,3,4],[5,6,7,8]])) == 2, 'test case 2 failed'\nassert     find_lists(tuple([1,1,1])) == 3, 'test case 3 failed'\nassert     find_lists(tuple()) == 0, 'test case 4 failed'\n\n\ndef find_lists_of_lists(Input):\n    '''\n    Write a function to find the number of lists in each list present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(()) == 0, 'Empty tuple'\nassert     find_lists((1,2,3)) == 3, 'No of lists = 3'\nassert     find_lists((1,2,3,1,2,3)) == 3, 'No of lists = 3'\nassert     find_lists((1,2,3,1,2,3,1,2,3)) == 5, 'No of lists = 5'\nassert     find_lists((1,2,3,1,2,3,1,2,3,1,2,3,1,2,3)) == 5, 'No of lists = 5'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g')) == 2, \"False\"\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f')) == 1, \"False\"\nassert     find_lists(('a', 'b', 'c', 'd', 'e')) == 0, \"False\"\nassert     find_lists(('a', 'b', 'c', 'd')) == 1, \"False\"\nassert     find_lists(('a', 'b', 'c')) == 1, \"False\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists((1, 2, 3, (4, 5), 6)) == 2\nassert     find_lists((1, 2, 3, (4, 5), 6, 7)) == 3\nassert     find_lists((1, 2, 3, (4, 5, 6, 7), 8)) == 3\nassert     find_lists((1, 2, 3, 4, 5, 6, 7, 8)) == 1\nassert     find_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_duplicates(list_of_lists):\n    '''\n    Write a function that takes a list of lists and returns a new list with\n    only unique elements.\n    '''\n    pass\n\n\ndef find_duplicates(list_of_lists):\n    '''\n    Write a function that takes a list of lists and returns a new list with\n    only unique elements.\n    '''\n    # your code here\n    pass\n\ndef find_duplicates(list_of_lists):\n    '''\n    Write a function that takes a list of lists and returns a new list with\n    only unique elements.\n    '''\n    # your code here\n    pass\n\ndef find_duplicates(list_of_lists):\n    '''\n    Write a function that takes a list of lists and returns a new list with\n    only unique elements.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists((1, 2, 3, 4, 5, 6, 7)) == 1, 'Wrong'\nassert     find_lists((2, 3, 4, 5, 6, 7, 8)) == 3, 'Wrong'\nassert     find_lists((10, 20, 30, 40, 50)) == 2, 'Wrong'\nassert     find_lists((1,2,3,4,5)) == 0, 'Wrong'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists(tuple()) == 0\nassert     find_lists(tuple([1,2,3])) == 1\nassert     find_lists(tuple([1])) == 1\nassert     find_lists(tuple([\"a\",\"b\"])) == 1\nassert     find_lists(tuple([1,\"a\"])) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lists((1,2)) == 1\nassert     find_lists((1,2,3,4,5,6)) == 2\nassert     find_lists((1,2,3,4,5,6,7,8,9,10)) == 3\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    find_lists(('a', 'b', 'c', 'd', 'e')) == 2, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'e', 'e')) == 1, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', 'e')) == 0, 'Wrong output'\n    find_lists(('a', 'b', 'c', 'd', '"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"check your answer!\")\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([2, 4, 1, 10]) ==  6\nassert     max_Abs_Diff([3, 4, -1, 10]) == 8\nassert     max_Abs_Diff([2, 4, -1, 10]) == 9\nassert     max_Abs_Diff([2, 4, -1, 10, -8, 12, -4, -2]) == 16\nassert     max_Abs_Diff([-5, -3, -1, -7, 0]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_Abs_Diff_2(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = arr[0] - arr[1]\n    for i in range(1,len(arr) - 1):\n        maxDiff = max(maxDiff, arr[i] - arr[i+1])\n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint (max_Abs_Diff([-5, 11, 2]))\nprint (max_Abs_Diff([-5, 2, 11]))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Abs_Diff([1, 2, -3, 4, -10]) == 10\nassert     max_Abs_Diff([1, -2, -5, -4, 10]) == 6\nassert     max_Abs_Diff([1, 2, -3, 4, -10, 10]) == 10\nassert     max_Abs_Diff([-2, -2, -3, -4, -5, -6, -10, -20, -30]) == -10\nassert     max_Abs_Diff([-2, -2, -3, -4, -5, -6, -10, -20, -30, -40]) == -20\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([1, 2, 3]) == 2, 'First'\nassert max_Abs_Diff([1, 2, 5]) == 3, 'Second'\nassert max_Abs_Diff([3, 4, 5]) == 4, 'Third'\nassert max_Abs_Diff([5, 6, 7]) == 7, 'Fourth'\nassert max_Abs_Diff([5, 6, -7]) == 6, 'Fifth'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(4, 10, 5) == (4, -1)\nassert     find_solution(4, 10, 7) == (4, -1)\nassert     find_solution(1, 1, 1) == (1, 1)\nassert     find_solution(1, 1, 2) == (1, 1)\nassert     find_solution(1, 1, 3) == (1, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution(4, 0, 5) == (1, 3)\nassert     find_solution(0, 4, 5) == (1, 3)\nassert     find_solution(4, 4, 5) == (1, 1)\nassert     find_solution(0, 0, 10) == (5, 5)\nassert     find_solution(10, 10, 10) == (1, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_solution(4, 2, 5) == (1, 2)\nassert     find_solution(3, 7, 8) == (1, 2)\nassert     find_solution(2, 5, 9) == None\nassert     find_solution(8, 2, 14) == (1, 2)\nassert     find_solution(5, 1, 1) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_solution(1, 3, 7) == (2, 1)\nfind_solution(1, -3, 7) == None\nfind_solution(2, 3, 7) == (1, 2)\nfind_solution(2, -3, 7) == None\nfind_solution(3, 3, 7) == (1, 1)\nfind_solution(3, -3, 7) == None\nfind_solution(3, 3, -7) == (1, -1)\nfind_solution(3, -3, -7) == (1, -1)"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_solution(1, 2, 5) == (1, 2)\nassert     find_solution(1, 3, 5) == (1, 2)\nassert     find_solution(1, 5, 5) == (1, 2)\nassert     find_solution(2, 3, 5) == None\nassert     find_solution(2, 5, 5) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_solution(1, 2, 4) == (2, 1)\nassert     find_solution(1, 2, 5) == None\nassert     find_solution(1, 2, 6) == None\nassert     find_solution(2, 3, 4) == (1, 2)\nassert     find_solution(2, 3, 5) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution(1, 2, 3) == (1, 1)\nassert     find_solution(3, 2, 7) == (2, 2)\nassert     find_solution(10, 20, 100) == (10, 0)\nassert     find_solution(0, 4, 8) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_solution(3, 4, 6) == (1, 2)\nassert     find_solution(3, 5, 9) == (1, 3)\nassert     find_solution(3, 6, 6) == (1, 1)\nassert     find_solution(3, 7, 12) == (1, 5)\nassert     find_solution(1, 6, 7) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_solution((2, 3), -1, 5) == (1, -2)\nassert     find_solution((2, 3), -1, 4) == None\nassert     find_solution((2, 3), -1, -6) == None\nassert     find_solution((1, 2), -1, 5) == (2, -1)\nassert     find_solution((1, 2), -1, 4) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([1,2,3], [4,5,6]) == None, \"Should return None\"\nassert     remove_elements([1,2,2], [4,5,6]) == [], \"Should return an empty list\"\nassert     remove_elements([1,2,2], [4,5,5]) == None, \"Should return None\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_elements([1, 2, 3, 4, 5, 6, 7, 8], [3, 8]) == [1, 2, 4, 5, 6, 7]\nassert     remove_elements([1, 2, 3, 4, 5, 6, 7, 8], []) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     remove_elements([1, 2, 3, 4, 5, 6, 7, 8], [1, 2]) == [3, 4, 5, 6, 7, 8]\nassert     remove_elements([1, 2, 3, 4, 5, 6, 7, 8], []) == []\nassert     remove_elements([1, 2, 3, 4, 5, 6, 7, 8], []) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4,5,6,7], [2,3,4,6,7]) == [1,5,6,7]\nassert     remove_elements([1,2,3,4,5,6,7], [4,6,7]) == [1,2,3,5,6,7]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nremove_elements([1,2,3], [3]) == []\nremove_elements([1,2,3], [2]) == [1]\nremove_elements([1,2,3], [1]) == [2,3]\nremove_elements([1,2,3], []) == [1,2,3]\nremove_elements([], [1,2,3]) == []\nremove_elements([], [2]) == []\nremove_elements([], []) == []\nremove_elements([], []) == []\n\ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_elements([1,2,3,4,5], [3,4]) == [1,2], \"Remove 3,4\"\nassert     remove_elements([1,2,3,4,5], [1,2]) == [], \"Remove 1,2\"\nassert     remove_elements([], [3,4]) == [], \"Remove 3,4\"\nassert     remove_elements([1,2,3,4,5], []) == [1,2,3,4,5], \"Remove 1,2,3,4,5\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([1,2,3,4], [2,3,4]) == [1,4]\nassert     remove_elements([1,2,3,4,5,6,7,8], [2,3,4]) == [1,5,6,7,8]\nassert     remove_elements([1,2,3,4,5,6,7,8], [1,5,6,7,8]) == []\nassert     remove_elements([1,2,3,4,5,6,7,8], [1,3,5,6,7,8]) == [2,4,5,6,7,8]\nassert     remove_elements([], [1,2,3,4,5,6,7,8]) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,2,3,4,5,6,7,8,9,0],[2,3,4,6]) ==  [1,5,7,9,0]\nassert     remove_elements([1,2,3,4,5,6,7,8,9,0],[4,6,8]) ==  [1,2,3,5,7,9,0]\nassert     remove_elements([1,2,3,4,5,6,7,8,9,0],[]) ==  [1,2,3,4,5,6,7,8,9,0]\nassert     remove_elements([1,2,3,4,5,6,7,8,9,0],[]) ==  [1,2,3,4,5,6,7,8,9,0]\nassert     remove_elements([1,2,3,4,5,6,7,8,9,0],[1,2,3,4,5,6,7,8,9,0]) ==  [1,2,3,5,6,7,8,9,0]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements([1,2,3,4,5,6,7,8,9], [3,4,5,6,8,9]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [3,4,5,6,8,9,10]) == [1,2,7,8,9,10]\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [3,4,5,6,8,9,10,11]) == [1,2,7,8,9,10,11]\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_elements(['a', 'b', 'c', 'd'], ['e', 'f', 'g']) == ['b', 'c', 'd']\nassert     remove_elements(['a', 'b', 'c', 'd'], ['b', 'e', 'f', 'g']) == ['a', 'c', 'd']\nassert     remove_elements(['a', 'b', 'c', 'd'], ['d']) == ['a', 'b', 'c']\nassert     remove_elements(['a', 'b', 'c', 'd'], ['a', 'b', 'c']) == ['d']\nassert     remove_elements(['a', 'b', 'c', 'd'], ['a', 'e', 'f', 'g']) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements([1,2,3], [2,3]) == 2\nassert     remove_elements([1,2,3], []) == 3\nassert     remove_elements([], [2,3]) == 3\nassert     remove_elements([2,3], [2,3]) == 1\n\ndef find_positions(search_word, alphabet):\n    '''\n    Write a function which accepts a search_word and a alphabet and returns the positions of all the\n    characters in the alphabet which are present in the search_word.\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef sum_series(n):\n    '''\n    Write a function that calculates the sum of the series:\n\n    1/1 + 1/2 + 1/3 +... + 1/n\n\n    for instance\n    n = 3\n\n    the sum of the series is 1/1 + 1/2 + 1/3 = 1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_series(5) == sum_series(10) == sum_series(20) == sum_series(50) == sum_series(100) == sum_series(500) == sum_series(1000) == sum_series(5000) == sum_series(10000) == sum_series(50000) == sum_series(100000)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_series(1) == 1\nassert     sum_series(5) == 5\nassert     sum_series(10) == 45\nassert     sum_series(100) == 280\nassert     sum_series(1000) == 30280\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('=== TEST ===')\ntest_results = ['', 0, 0, 1, 2, 3, 5, 8, 11, 13, 21, 34]\n\ntest_cases = [(0,0), (1,1), (2,3), (3,5), (4,8), (5,11), (6,13), (7,21), (8,34)]\n\nfor n, expected in test_cases:\n    result = sum_series(n)\n    print(n, expected, result)\n    assert result == expected\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sum_series(0) == 0\nassert sum_series(1) == 1\nassert sum_series(2) == 3\nassert sum_series(3) == 4\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_series(5) == 5, \"Expected 5, but got %d\" % sum_series(5)\nassert     sum_series(8) == 30, \"Expected 30, but got %d\" % sum_series(8)\nassert     sum_series(20) == 100, \"Expected 100, but got %d\" % sum_series(20)\nassert     sum_series(35) == 535, \"Expected 535, but got %d\" % sum_series(35)\nassert     sum_series(50) == 2550, \"Expected 2550, but got %d\" % sum_series(50)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given its legs.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \narea_polygon(3, 4) == 1/3\nassert \narea_polygon(1, 1) == 1\narea_polygon(3, 3) == 3 * 1\nassert\n\ndef length_of_side(s, l):\n    '''\n    Write a function to calculate the length of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(area_polygon(4, 3)) # 6.5\nprint(area_polygon(3, 5)) # 15\nprint(area_polygon(9, 4)) # 45\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_polygon(4,3) == 2.0/4, 'Wrong answer, expected area of a regular polygon of length 4 to be 2/4'\nassert     area_polygon(9,5) == 6.0/9, 'Wrong answer, expected area of a regular polygon of length 9 to be 6/9'\nassert     area_polygon(2,2) == 2.0/4, 'Wrong answer, expected area of a regular polygon of length 2 to be 2/4'\nassert     area_polygon(5,3) == 1.0, 'Wrong answer, expected area of a regular polygon of length 5 to be 1'\nassert     area_polygon(6,5) == 1.5, 'Wrong answer, expected area of a regular polygon of length 6 to be 1.5'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     area_polygon(5, 1) == 5, 'Wrong answer in area_polygon: {}'.format(area_polygon(5, 1))\nassert     area_polygon(5, 2) == 10, 'Wrong answer in area_polygon: {}'.format(area_polygon(5, 2))\nassert     area_polygon(5, 3) == 15, 'Wrong answer in area_polygon: {}'.format(area_polygon(5, 3))\nassert     area_polygon(5, 4) == 20, 'Wrong answer in area_polygon: {}'.format(area_polygon(5, 4))\nassert     area_polygon(5, 5) == 25, 'Wrong answer in area_polygon: {}'.format(area_polygon(5, 5))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram given the length of base and height.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef unit_circle(l):\n    '''\n    Write a function to calculate the area of a unit circle given the length of its major radius.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_perfect_squares(a, b): \n    '''\n    Find perfect squares in an interval.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert div_sum(8) == True\nassert div_sum(8) == False\nassert div_sum(10) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef div_sum_2(a,b):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert div_sum(10) == True\nassert div_sum(25) == False\nassert div_sum(10) == True\nassert div_sum(7) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndiv_sum(10) == True\nassert \ndiv_sum(100) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef div_sum_2(a, b):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_char_position('a') == 1\nassert     count_char_position('A') == 1\nassert     count_char_position('I') == 1\nassert     count_char_position('o') == 2\nassert     count_char_position('u') == 2\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nstr1 = \"csfSsf\"\ncount_char_position(str1)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_char_position(\"hello\") == \"2\", 'Example test, 1'\nassert     count_char_position(\"Hello\") == \"2\", 'Example test, 2'\nassert     count_char_position(\"Hello, world!\") == \"3\", 'Example test, 3'\nassert     count_char_position(\"HELLO\") == \"1\", 'Example test, 4'\nassert     count_char_position(\"HELLO WORLD\") == \"4\", 'Example test, 5'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_char_position(\"abcab\") == 3 \nassert     count_char_position(\"aabcb\") == 2\nassert     count_char_position(\"abcabcd\") == 4\nassert     count_char_position(\"abcdefg\") == 12\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_char_position('') == 0\nassert     count_char_position('AA') == 1\nassert     count_char_position('AAB') == 1\nassert     count_char_position('AAAB') == 2\nassert     count_char_position('AAABCCCDDD') == 6\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert count_char_position('abc') == 0, \"1st example\"\nassert count_char_position('A') == 1, \"2nd example\"\nassert count_char_position('a') == 1, \"3rd example\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_char_position(\"abbcde\") == 3\nassert count_char_position(\"abc\") == 3\nassert count_char_position(\"zzzz\") == 0\nassert count_char_position(\"z\") == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_char_position('heLlo') == 5\nassert count_char_position('') == 0\nassert count_char_position('a') == 1\nassert count_char_position('A') == 1\nassert count_char_position('a') == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_even_pair([1,3,5]) == 2\nassert     find_even_pair([2,4,6]) == 3\nassert     find_even_pair([1,3,5,7]) == 2\nassert     find_even_pair([2,4,6,8]) == 3\nassert     find_even_pair([1,3,5,7,9]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_even_pair([4, 5, 3]) == 0\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([7, 3, 5, 7]) == 1\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([5, 5, 7, 7]) == 0\nfind_even_pair([]) == 0\nfind_even_pair([7, 7]) == 2\nfind_even_pair([]) == 0\nfind_even_pair([5, 6]) == 0\nfind_even_pair([3, 5]) == 0\nfind_even_pair([7, 7]) == 0\nfind_even_pair([3, 3]) == 1\nfind_even_pair([]) == 0\nfind_even_pair([5, 5, 5, 5, 5]) == 3\nfind_even_pair([5, 5, 5, 5, 5, 5, 5, 5]) == 1\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 1\nfind_even_pair([1, 1, 1, 1, 1, 1]) == 1\nfind_even_pair([]) == 0\nfind_even_pair([1, 1]) == 1\nfind_even_pair([1, 1, 1, 1]) == 0\nfind_even_pair([1, 1, 1, 1, 1]) == 0\nfind_even_pair([5, 5, 5, 5, 5, 5]) == 0\nfind_even_pair([5, 5, 5, 5, 5, 5, 5, 5, 5]) == 1\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 7]) == 0\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair([7, 3, 5, 3, 7]) == 2\nfind_even_pair([9, 5, 7, 3]) == 2\nfind_even_pair([5, 5, 7, 7]) == 2\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 0\nfind_even_pair(["
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_even_pair(A) == 2\nassert     find_even_pair([10,5,2,8,5,3,7]) == 2\nassert     find_even_pair([10,5,2,8,5,3,7,1]) == 1\n\nA = [10, 5, 2, 8, 5, 3, 7]\n\ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_even_pair([1, 2, 3, 4]) == 1\nfind_even_pair([1, 1, 1, 1]) == 2\nfind_even_pair([1, 3, 2, 4]) == 0"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_even_pair([0, 1, 2, 4, 5, 7, 8, 10]) == 2\nassert \nfind_even_pair([1, 1, 2, 2, 5, 5, 7, 8, 11]) == 4\nassert \nfind_even_pair([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert \nfind_even_pair([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 0\nassert \nfind_even_pair([0, 1, 2, 4, 5, 7, 8, 10, 11]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_even_pair([1,3,4,8]) == 1\nassert\nfind_even_pair([1,2,3,4]) == 0\nassert\nfind_even_pair([1,1,3,4]) == 2\nassert\nfind_even_pair([1,2,3,4,5]) == 0\nassert\nfind_even_pair([1,2,3,4,5,6,7,8]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(find_even_pair([1, 3, 7]))\nprint(find_even_pair([2, 5, 10]))\nprint(find_even_pair([1, 8, 10, 9]))\nprint(find_even_pair([1, 3, 5, 7, 9]))\nprint(find_even_pair([1, 1, 3, 5, 7, 9]))\n\n\ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_even_pair([1,2,3,4,5]) == 2\nassert     find_even_pair([1,2,3,4,5,6,7]) == 3\nassert     find_even_pair([1,2,3,4,5,6]) == 1\nassert     find_even_pair([1,2,3,4]) == 0\nassert     find_even_pair([1]) == 0\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"next_power_of_2(9):\", next_power_of_2(9))\nassert next_power_of_2(16) == 2**4\nassert next_power_of_2(1) == 2**0\n\nprint('\\n')"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nnext_power_of_2(3) == 2\nassert next_power_of_2(3) == 4\nassert next_power_of_2(5) == 8\nassert next_power_of_2(4) == 8\nassert next_power_of_2(1) == 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(4) == 2\nassert next_power_of_2(8) == 2\nassert next_power_of_2(10) == 4\nassert next_power_of_2(16) == 4\nassert next_power_of_2(32) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnext_power_of_2(4) == 2\nnext_power_of_2(13) == 2\nnext_power_of_2(7) == 4\nnext_power_of_2(5) == 1\nnext_power_of_2(8) == 2\nnext_power_of_2(25) == 4\nnext_power_of_2(9) == 4\nnext_power_of_2(36) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_power_of_2(2) == 2\nassert next_power_of_2(4) == 4\nassert next_power_of_2(8) == 8\nassert next_power_of_2(16) == 16\nassert next_power_of_2(32) == 32\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(4) == 4\nassert     next_power_of_2(5) == 8\nassert     next_power_of_2(6) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(4) == 2\nassert     next_power_of_2(5) == 2\nassert     next_power_of_2(7) == 4\nassert     next_power_of_2(8) == 4\nassert     next_power_of_2(10) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 4\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(5) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert next_power_of_2(1) == 1 \nassert next_power_of_2(16) == 2 \nassert next_power_of_2(64) == 4 \nassert next_power_of_2(4294967296) == 8 \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(frequency([1,1,1,1],1)) # --> 3\nprint(frequency([1,2,3,4,5,6,1,3],1)) # --> 6\nprint(frequency([1,2,3,4,5,6,1,3],3)) # --> 0\nprint(frequency([1,2,3,4,5,6,1,3],7)) # --> 0\nprint(frequency([1,2,3,4,5,6,1,3],9)) # --> 0\nprint(frequency([],1)) # --> 0\n\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef frequency2(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfrequency([1,1,3,3,5,5,3,2,1,2,3,3,5],1) == 3, 'incorrect'\nassert \nfrequency([1,1,3,3,5,5,3,2,1,2,3,3,5],5) == 1, 'incorrect'\nassert \nfrequency([1,1,3,3,5,5,3,2,1,2,3,3,5],3) == 2, 'incorrect'\nassert \nfrequency([1,1,3,3,5,5,3,2,1,2,3,3,5],2) == 0, 'incorrect'\nassert \nfrequency([1,1,2,2,3,3,4,4,5,5,5,5,5,5,5],5) == 5, 'incorrect'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \na = [1,1,1,2,2,2,3,3,3]\nassert frequency(a,1) == 3\nassert frequency(a,2) == 3\nassert frequency(a,3) == 0\nassert frequency(a,4) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency(numbers, 5) == 3\nassert     frequency([], 1) == 0\nassert     frequency(numbers, 5) == 3\nassert     frequency([4,3,2], 2) == 1\nassert     frequency([4,3,2], 5) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency([1,2,3,3,4,5,6],3) == 2\nassert     frequency([1,2,3,3,4,5,6],7) == 0\nassert     frequency([1,2,3,3,4,5,6],10) == 0\nassert     frequency([1,2,3,4,5,6],9) == 1\nassert     frequency([1,2,3,4,5,6],1) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([1, 2, 3, 4, 5],2) == 2\nassert     frequency([1, 2, 3, 4, 5],3) == 1\nassert     frequency([1, 2, 3, 4, 5],1) == 4\nassert     frequency([1, 2, 3, 4, 5],6) == 0\n\ndef word_frequency(words,x):\n    '''\n    Write a function to count the number of occurrences of a word in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency([1,2,3,4,4,3,1,5],4) == 2\nassert     frequency([0,0,0,1,1,1], 1) == 5\nassert     frequency([0,0,0,1,1,1], 2) == 3\nassert     frequency([0,0,0,1,1,1], 3) == 1\nassert     frequency([1,1,1], 1) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency(None,[]) == 0\nassert     frequency([1,2],1) == 0\nassert     frequency([1,2,1],1) == 1\nassert     frequency([1,2,1,1],1) == 2\nassert     frequency([1,2,1,1,1],1) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency([1, 3, 3, 5, 6, 7, 2], 3) == 3, 'Wrong Output'\nassert     frequency([], 3) == 0, 'Wrong Output'\nassert     frequency([3, 4, 1], 4) == 0, 'Wrong Output'\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_range_list([10, 20, 30, 40, 50], 0, 1) == 90\nassert     sum_range_list([10, 20, 30, 40, 50], 1, 2) == 110\nassert     sum_range_list([10, 20, 30, 40, 50], 2, 3) == 150\nassert     sum_range_list([10, 20, 30, 40, 50], 3, 4) == 190\nassert     sum_range_list([10, 20, 30, 40, 50], 4, 5) == 250\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_range_list([1,2,3,4,5],2,5) == 6\nsum_range_list([1,2,3,4,5,6],2,6) == 11\nsum_range_list([1,2,3,4,5],0,4) == 15\nsum_range_list([1,2,3,4,5],0,5) == 15\nsum_range_list([1,2,3,4,5],0,6) == 15"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9\nassert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 10\nassert sum_range_list([1, 2, 3, 4, 5], 0, 3) == 7\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_range_list([1,2,3,4,5],1,3) == 10, \"Should be 10\"\nassert     sum_range_list([1,2,3,4,5],2,5) == 9, \"Should be 9\"\nassert     sum_range_list([1,2,3,4,5],0,3) == 15, \"Should be 15\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_range_list([1, 2, 3], 1, 2) == 1\nassert     sum_range_list([1, 2, 3], 1, 3) == 2\nassert     sum_range_list([1, 2, 3], 0, 4) == 3\nassert     sum_range_list([1, 2, 3], 1, 0) == 1\nassert     sum_range_list([1, 2, 3], -1, -2) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_range_list([1, 2, 3, 4, 5], 1, 3) == 9\nassert \nsum_range_list([1, 2, 3, 4, 5], 0, 3) == 5\nassert \nsum_range_list([1, 2, 3, 4, 5], 0, 5) == 15\nassert \nsum_range_list([1, 2, 3, 4, 5], 0, 4) == 15"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_range_list([1,2,3,4,5], 1, 4) == 15, \"incorrect\"\nassert     sum_range_list([5,1,2,3,4], 2, 4) == 13, \"incorrect\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_range_list([3, 5, 7, 11], 0, 3) == 10, \"wrong\"\nassert     sum_range_list([3, 5, 7, 11], 0, 4) == 16, \"wrong\"\nassert     sum_range_list([3, 5, 7, 11], 1, 3) == 12, \"wrong\"\nassert     sum_range_list([3, 5, 7, 11], 0, 2) == 18, \"wrong\"\nassert     sum_range_list([3, 5, 7, 11], 3, 5) == 9, \"wrong\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 0, 1) == 1, \"Wrong answer\"\nassert     sum_range_list([1, 2, 3, 4], 1, 2) == 5, \"Wrong answer\"\nassert     sum_range_list([1, 2, 3, 4], 1, 3) == 6, \"Wrong answer\"\nassert     sum_range_list([1, 2, 3, 4], 0, 4) == 10, \"Wrong answer\"\nassert     sum_range_list([1, 2, 3, 4], -2, -1) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert perimeter_pentagon(3) == 5, \"Test Failed\"\nassert perimeter_pentagon(6) == 10, \"Test Failed\"\nassert perimeter_pentagon(9) == 21, \"Test Failed\"\nassert perimeter_pentagon(12) == 36, \"Test Failed\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(5) == 10\nassert     perimeter_pentagon(6) == 18\nassert     perimeter_pentagon(7) == 21\nassert     perimeter_pentagon(8) == 30\nassert     perimeter_pentagon(9) == 37\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(4)==12, \"expected value 12 but got %s\"%perimeter_pentagon(4)\nassert     perimeter_pentagon(5)==20, \"expected value 20 but got %s\"%perimeter_pentagon(5)\nassert     perimeter_pentagon(6)==26, \"expected value 26 but got %s\"%perimeter_pentagon(6)\nassert     perimeter_pentagon(7)==41, \"expected value 41 but got %s\"%perimeter_pentagon(7)\nassert     perimeter_pentagon(8)==56, \"expected value 56 but got %s\"%perimeter_pentagon(8)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(2) == 8\nassert     perimeter_pentagon(5) == 14\nassert     perimeter_pentagon(10) == 28\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(5) == 10, \"No, it is not a regular pentagon.\"\nassert     perimeter_pentagon(3) == 6, \"No, it is not a regular pentagon.\"\nassert     perimeter_pentagon(1) == 5, \"No, it is not a regular pentagon.\"\n\ndef is_pentagonal(n):\n    '''\n    Write a function to determine whether or not a number is pentagonal.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert math.isclose(perimeter_pentagon(5), 60.24, abs_tol=0.001)\nassert math.isclose(perimeter_pentagon(6), 63.64, abs_tol=0.001)\nassert math.isclose(perimeter_pentagon(7), 63.6, abs_tol=0.001)\nassert math.isclose(perimeter_pentagon(8), 63.62, abs_tol=0.001)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle from its radius.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perimeter_pentagon(5) == 10, 'is not correct'\nassert     perimeter_pentagon(0) == 5, 'is not correct'\nassert     perimeter_pentagon(1) == 5, 'is not correct'\nassert     perimeter_pentagon(2) == 10, 'is not correct'\nassert     perimeter_pentagon(3) == 15, 'is not correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(6) == 15\nassert     perimeter_pentagon(10) == 50\nassert     perimeter_pentagon(14) == 152\nassert     perimeter_pentagon(21) == 1030\nassert     perimeter_pentagon(27) == 1042\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance('aAaAaAa') == 2\nassert     count_occurance('aAAaAAaAa') == 3\nassert     count_occurance('aaa') == 3\nassert     count_occurance('AAaaAAaAa') == 3\nassert     count_occurance('aaAAaaAAa') == 4\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance(\"meeting\") == 2\nassert     count_occurance(\"this\") == 1\nassert     count_occurance(\"coding\") == 2\nassert     count_occurance(\"programming\") == 3\nassert     count_occurance(\"meeting\") == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_occurance('std') == 2 \nassert     count_occurance('stdsdsd') == 3\nassert     count_occurance('bla') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance('abcd') == 0\nassert     count_occurance('abcd') == 1\nassert     count_occurance('aabcdddddd') == 5\nassert     count_occurance('aabcdddddd') == 4\nassert     count_occurance('ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance('the number of times i come in the house') == 2\nassert count_occurance('a lil bit longer') == 1\nassert count_occurance('mice') == 0\n\ndef min_max_val(lst):\n    '''\n    Write a function that takes a list of integers and returns the minimum and maximum values in the list.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_occurance('The quick brown fox jumps over the lazy dog') == 4\nassert count_occurance('The quick brown fox jumps over the lazy dog') == 3\nassert count_occurance('The quick brown fox jumps over the lazy dog') == 2\nassert count_occurance('Hello world') == 1\n\nprint(\"Passed\")\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_occurance_without_using_loop(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_occurance('apples, pears') == 2\nassert     count_occurance('apples, pears, pears') == 2\nassert     count_occurance('apples, pears, apples') == 1\nassert     count_occurance('apples, pears, apples, pears') == 2\nassert     count_occurance('apples, pears, apples, pears, pears') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance('std') == 2\nassert count_occurance('i am std') == 2\nassert count_occurance('i am madam') == 1\nassert count_occurance('i am madam and madam') == 1\nassert count_occurance('i am madam and madam and madam') == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_type_data(data):\n    '''\n    Write a function to check if all the elements in data tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_type((10, 2, 9)) == False\nassert check_type((10, 2, 9, \"a\")) == False\nassert check_type((10, 2, 9, False)) == False\nassert check_type((10, 2, 9, \"a\", True)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type(('python', 'java', 'c', 'c++')) == True, 'All the elements are not same type'\nassert    check_type(('python', 'java', 'c', 5)) == False, 'All the elements are same type'\nassert    check_type(('python', 5)) == False, 'One element is not in the tuple'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type((\"ab\", 2, True))     ==     (True, \"ab\", True)\nassert     check_type((\"ab\", 2, 3.0))     ==     (False, \"ab\", 3.0)\nassert     check_type((\"ab\", \"a\", \"3\"))     ==     (False, \"ab\", \"a\")\nassert     check_type((\"ab\", False, \"3\"))     ==     (False, \"ab\", \"3\")\nassert     check_type((1, True, \"a\"))     ==     (True, 1, True)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((1,2,3,4,5)) == False, \"test 1\"\nassert     check_type((1.0,2.0,3.0,4.0,5.0)) == True, \"test 2\"\nassert     check_type((1,2,3,4,5.0)) == True, \"test 3\"\nassert     check_type((1,2,3,4,5.0,\"a\",[1,2,3])) == True, \"test 4\"\nassert     check_type((1,2,3,4,5.0,\"a\",[1,2,3],\"xyz\",[1,2,3],{1:1,2:2})) == True, \"test 5\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type(('a','b','a')) == True, 'One element data type mismatched'\nassert     check_type((1,2,3)) == True, 'One element data type mismatched'\nassert     check_type((1,'b','a')) == False, 'Two element data type mismatched'\nassert     check_type((1,'b',3)) == False, 'Two element data type mismatched'\n\n\ndef max_data_type(test_tuple):\n    '''\n    Write a function to return the max value of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncheck_type((1,2,'3',3))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type(('physics', 'chemistry','maths')) == True, \"Wrong\"\nassert check_type(('physics','maths', 'chemistry')) == False, \"Wrong\"\nassert check_type(('physics','maths', 'chemistry','sport','maths')) == True, \"Wrong\"\nassert check_type(('physics','maths', 'chemistry','sport','maths', 'computer')) == False, \"Wrong\"\n\ndef check_count(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same count or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type([1, 2, 3]) == True, \"check_type([1, 2, 3]) failed\"\nassert check_type([1.0, 2.0, 3.0]) == False, \"check_type([1.0, 2.0, 3.0]) failed\"\nassert check_type((1, 2, 3)) == True, \"check_type((1, 2, 3)) failed\"\nassert check_type([\"a\", \"b\", \"c\"]) == True, \"check_type(['a', 'b', 'c']) failed\"\nassert check_type({\"a\":1, \"b\":2, \"c\":3}) == True, \"check_type({\"a\":1, \"b\":2, \"c\":3}) failed\"\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_majority([1, 2, 2, 3, 3, 3, 3, 4], 7, 3) == True\nassert     is_majority([1, 2, 2, 3, 3, 3, 3, 4], 7, 2) == False\nassert     is_majority([1, 2, 2, 3, 3, 3, 3, 4], 5, 3) == False\nassert     is_majority([1, 2, 2, 3, 3, 3, 3, 4], 5, 2) == True\nassert     is_majority([1, 2, 2, 3, 3, 3, 3, 4], 5, 4) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_majority([1, 1, 1, 1, 1, 1], 5, 1) == True\nassert     is_majority([1, 1, 1, 1, 1, 1], 5, 2) == False\nassert     is_majority([1, 2, 2, 2, 2, 2, 2], 6, 1) == False\nassert     is_majority([1, 2, 2, 2, 2, 2, 2], 6, 2) == True\nassert     is_majority([1, 2, 2, 2, 2, 2, 2], 6, 3) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 5) == True\nassert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 5) == True\nassert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 5) == True\nassert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 5) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_majority([1,2,2,2,3,3,3,4], 6, 2) == True\nassert     is_majority([1,2,2,2,3,3,3,4], 6, 2) == False\nassert     is_majority([1,1,1,2,2,2,2,3,3,3,3,4], 6, 2) == False\nassert     is_majority([1,1,1,2,2,2,2,3,3,3,3,4], 6, 2) == True\nassert     is_majority([1,1,1,1,1,1,1,1,1,1,1,1], 3, 1) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_majority([1, 1, 1, 2, 2, 2], 6, 1) == True\nassert     is_majority([1, 1, 1, 2, 2, 3], 6, 3) == False\nassert     is_majority([1, 1, 1, 2, 2, 3, 3], 6, 3) == True\nassert     is_majority([1, 2, 3, 4, 4, 5], 5, 4) == True\nassert     is_majority([1, 2, 3, 4, 5], 5, 4) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(1) == 0, \"The answer is incorrect\"\nassert     count_Set_Bits(2) == 1, \"The answer is incorrect\"\nassert     count_Set_Bits(0) == 0, \"The answer is incorrect\"\nassert     count_Set_Bits(8) == 0, \"The answer is incorrect\"\nassert     count_Set_Bits(9) == 0, \"The answer is incorrect\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(count_Set_Bits(12345)) == 6\nprint(count_Set_Bits(1000000)) == 31\nprint(count_Set_Bits(1)) == 1\nprint(count_Set_Bits(0)) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(15) == 4\nassert     count_Set_Bits(9) == 3\nassert     count_Set_Bits(7) == 2\nassert     count_Set_Bits(5) == 1\n\ndef count_Set_Bits2(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code here\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Set_Bits(2) == 0, 'Wrong return value'\nassert     count_Set_Bits(3) == 0, 'Wrong return value'\nassert     count_Set_Bits(13) == 1, 'Wrong return value'\nassert     count_Set_Bits(0) == 1, 'Wrong return value'\nassert     count_Set_Bits(11) == 2, 'Wrong return value'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(32) == 1, \"Error\"\nassert     count_Set_Bits(128) == 1, \"Error\"\nassert     count_Set_Bits(256) == 0, \"Error\"\nassert     count_Set_Bits(512) == 1, \"Error\"\nassert     count_Set_Bits(1024) == 2, \"Error\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(10) == 5\nassert     count_Set_Bits(11) == 5\nassert     count_Set_Bits(100) == 5\nassert     count_Set_Bits(101) == 6\nassert     count_Set_Bits(1000) == 6\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(7) == 2,    \"error in count_Set_Bits\"\nassert     count_Set_Bits(0) == 0,    \"error in count_Set_Bits\"\nassert     count_Set_Bits(1) == 0,    \"error in count_Set_Bits\"\nassert     count_Set_Bits(32) == 1,    \"error in count_Set_Bits\"\nassert     count_Set_Bits(63) == 1,    \"error in count_Set_Bits\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(5) == 1\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(7) == 2\nassert     count_Set_Bits(2) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_values_string(\"abd\") == \"ab\"\nassert     odd_values_string(\"abcd\") == \"ac\"\nassert     odd_values_string(\"defg\") == \"def\"\nassert     odd_values_string(\"1234\") == \"14\"\nassert     odd_values_string(\"jklmn\") == \"jklmn\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string('sunny day') == 'rsdnmy'\nassert     odd_values_string('abcdabcd') == 'abcd'\nassert     odd_values_string('abac') == 'abc'\nassert     odd_values_string('a') == ''\nassert     odd_values_string('') == ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string('The quick brown fox jumps over the lazy dog') == \n         'Tqick brwnf olqjmps ova udt'\nassert     odd_values_string('The quick brown fox jumps over the lazy dog') ==\n         'Tqick brwnf olqjmps ova udt'\nassert     odd_values_string('The quick brown fox jumps over the lazy dog') ==\n         'Tqick brwnf olqjmps ova udt'"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string('something') =='somthing'\nassert     odd_values_string('something') =='somthing'\nassert     odd_values_string('abcdefg') == 'abcdeg'\nassert     odd_values_string('abcde') == 'abcd'\nassert     odd_values_string('abcde') == 'abcd'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string('d') == 'd'\nassert     odd_values_string('c') == 'c'\nassert     odd_values_string('a') == 'a'\nassert     odd_values_string('aac') == 'ac'\nassert     odd_values_string('aacbc') == 'bc'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string('Python') == 'yPthon', \"should return 'yPthon'\"\nassert     odd_values_string('Python3.7') == 'yPtho', \"should return 'yPtho'\"\nassert     odd_values_string('Pythons') == 'Ptho', \"should return 'Ptho'\"\nassert     odd_values_string('Pythons3') == 'Ptho', \"should return 'Ptho'\"\nassert     odd_values_string('Python3.7') == 'Python', \"should return 'Python'\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\n\nWrite a python function that takes two lists as input, and returns the \nintersection of the two lists. \n'''\n\ndef intersection(list1, list2):\n    '''\n    Write a python function to find the intersection of two lists using \"and\".\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string(\"apple\") == \"pple\"\nassert odd_values_string(\"orange\") == \"orng\"\nassert odd_values_string(\"grapes\") == \"grapp\"\nassert odd_values_string(\"crocodile\") == \"croco\"\nassert odd_values_string(\"grapes\") == \"grapp\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string(\"abd\") == \"bc\"\nassert odd_values_string(\"abcd\") == \"bc\"\nassert odd_values_string(\"abcdxyz\") == \"bcxyz\"\nassert odd_values_string(\"xyxzyz\") == \"xyzyz\"\nassert odd_values_string(\"xxxyxyxy\") == \"xyxyxy\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_values_string(\"aabccbb\") == \"bbb\", \"First test case\"\nassert     odd_values_string(\"aaac\") == \"c\", \"Second test case\"\nassert     odd_values_string(\"kll\") == \"\", \"Third test case\"\nassert     odd_values_string(\"asdf\") == \"asdf\", \"Fourth test case\"\n\n\ndef remove_space(string):\n    '''\n    Write a python function to remove the extra space from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(5,7,9) == 5\nassert     min_of_three(1,4,5) == 1\nassert     min_of_three(0,0,0) == 0"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    #test\n    assert min_of_three(5,8,7) == 5\n    assert min_of_three(2,7,7) == 2\n    assert min_of_three(5,7,7) == 5\n    "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(2,3,1) == 1,'min_of_three(2,3,1) is not 1'\nassert     min_of_three(1,2,3) == 1,'min_of_three(1,2,3) is not 1'\nassert     min_of_three(3,1,2) == 1,'min_of_three(3,1,2) is not 1'\nassert     min_of_three(1,2,3) == 1,'min_of_three(1,2,3) is not 1'\nassert     min_of_three(2,2,2) == 2,'min_of_three(2,2,2) is not 2'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_of_three(0,1,2) == 0\nassert     min_of_three(0,0,0) == 0\nassert     min_of_three(1,1,1) == 1\nassert     min_of_three(1,0,0) == 0\nassert     min_of_three(2,0,0) == 0\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(3,3,1) == 1\nassert     min_of_three(1,1,1) == 1\nassert     min_of_three(0,0,0) == 0\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(10,5,2) == 2\nassert     min_of_three(-10,-5,-2) == -10\nassert     min_of_three(-1,2,-5) == -1\nassert     min_of_three(10,-5,-2) == -5\nassert     min_of_three(-10,-5,2) == -5\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(5,4,3) ==     4,'should be 4'\nassert     min_of_three(3,3,3) ==     3,'should be 3'\nassert     min_of_three(5,4,3) ==     5,'should be 5'\nassert     min_of_three(5,4,2) ==     2,'should be 2'\nassert     min_of_three(0,0,0) ==     0,'should be 0'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_of_three(2,3,4) == 2\nassert min_of_three(2,3,4) == 2\nassert min_of_three(2,3,5) == 3\nassert min_of_three(2,3,0) == 0\nassert min_of_three(2,3,100) == 100\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,2,2) == 2\nassert     min_of_three(1,1,2) == 1\nassert     min_of_three(1,2,2) == 2\nassert     min_of_three(2,2,2) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(1,2,3) == 1\n\n\n\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(2,0,7) == True\nassert all_Bits_Set_In_The_Given_Range(8,0,9) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(3,0,4) == True, \"3 set bits\"\nassert     all_Bits_Set_In_The_Given_Range(0,0,4) == True, \"0 set bits\"\nassert     all_Bits_Set_In_The_Given_Range(0,1,4) == True, \"1 set bits\"\nassert     all_Bits_Set_In_The_Given_Range(0,2,4) == True, \"2 set bits\"\nassert     all_Bits_Set_In_The_Given_Range(0,3,4) == True, \"3 set bits\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(10,2,8) == False\nall_Bits_Set_In_The_Given_Range(10,2,10) == True\nall_Bits_Set_In_The_Given_Range(10,1,10) == True\nall_Bits_Set_In_The_Given_Range(0,0,0) == True\nall_Bits_Set_In_The_Given_Range(0,1,0) == False\nall_Bits_Set_In_The_Given_Range(10,10,10) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(8,0,8) == True, 'All Bits set in given range should be True'\nassert     all_Bits_Set_In_The_Given_Range(8,0,7) == False, 'All Bits set in given range should be False'\nassert     all_Bits_Set_In_The_Given_Range(8,1,8) == False, 'All Bits set in given range should be False'\nassert     all_Bits_Set_In_The_Given_Range(8,1,7) == True, 'All Bits set in given range should be True'\nassert     all_Bits_Set_In_The_Given_Range(8,7,8) == True, 'All Bits set in given range should be True'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(10,0,0) == True, 'fails for -10, 0, 0'\nassert     all_Bits_Set_In_The_Given_Range(10,1,10) == False, 'fails for -10, 1, 10'\nassert     all_Bits_Set_In_The_Given_Range(10,1,11) == True, 'fails for -10, 1, 11'\nassert     all_Bits_Set_In_The_Given_Range(0,10,10) == False, 'fails for 0, 10, 10'\nassert     all_Bits_Set_In_The_Given_Range(0,10,11) == True, 'fails for 0, 10, 11'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,1) == True\nassert     all_Bits_Set_In_The_Given_Range(9,0,1) == False\nassert     all_Bits_Set_In_The_Given_Range(1,0,1) == False\nassert     all_Bits_Set_In_The_Given_Range(9,2,3) == False\n\ndef is_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(10,0,9) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,10) == False\nassert     all_Bits_Set_In_The_Given_Range(10,1,10) == False\nassert     all_Bits_Set_In_The_Given_Range(10,5,10) == True\nassert     all_Bits_Set_In_The_Given_Range(10,1,2) == True\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     re_arrange_array([-5, -3, -1, 2, 4], 2) == [-5, -1, -3, 2, 4]\nassert     re_arrange_array([-5, -3, -1, 2, 4], 3) == [-5, -3, 2, -1, 4]\nassert     re_arrange_array([-5, -3, -1, 2, 4], 5) == [-5, -3, -1, 2, 4]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     re_arrange_array([10, 20, 5, -1, -3, -20], 3) == [-1, -20, 5, 10, 20, -3]\nassert     re_arrange_array([10, 20, 5, -1, -3, -20], 0) == [-1, -3, -20, -10, 20, 5]\nassert     re_arrange_array([10, 20, 5, -1, -3, -20], 1) == [-1, -3, -20, 10, 5, 20]\nassert     re_arrange_array([10, 20, 5, -1, -3, -20], 2) == [-20, -1, -3, -10, 5, 20]\nassert     re_arrange_array([10, 20, 5, -1, -3, -20], 5) == [-1, -20, -3, -5, -10, 20]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     re_arrange_array([1, -3, -10, 5, 6, 7], 5) == [-10, -3, 1, 5, 6, 7]\nassert     re_arrange_array([1, -3, 5, -6, -7], 5) == [-6, -7, -3, 1, 5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef binary_search(arr, n):\n    '''\n    Write a function that takes in an array arr and an integer n, and returns the index of the element in arr that is closest to n.\n\n    HINT: If the array is ordered properly, binary search should return the lowest index of the element equal to or larger than n.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     re_arrange_array([-1, 1, -3, 5, 6, -7, 8, -9], 3) == [-1, -7, -9, 1, 5, 8, 6, 3]\nassert     re_arrange_array([-1, 1, -3, 5, 6, -7, 8, -9], 5) == [-1, -3, 1, 5, -7, 6, 8, -9]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7], 4) == [1, 2, 3, 4, 5, 6, 7]\nassert     re_arrange_array([-1, 1, -3, 5, 6, -7, 8, -9], 2) == [-1, 1, -7, 5, -9, 6, 8, -3]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7], 3) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([0, -2, -1, 1, 2], 2) == [-2, -1, 0, 1, 2]\nassert     re_arrange_array([0, -1, 1, 2, -3, -4, -5, 6, 7], 3) == [-5, -3, 0, 1, 2, -1, -4, -6, 7]\nassert     re_arrange_array([0, -1, 1, 2, -3, -4, -5, 6, 7], 4) == [-3, -1, 0, 1, 2, -4, -5, -6, 7]\nassert     re_arrange_array([0, -1, 1, 2, -3, -4, -5, 6, 7], 5) == [-4, -3, -1, 0, 1, 2, -5, -6, 7]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, -5, -6, -7], 2) == [-5, -6, 1, 2, 3, -7, -4], \"Wrong\"\nassert     re_arrange_array([1, 2, 3, 4, -5, -6, -7], 1) == [-6, 1, 2, 3, -7, -5, -4], \"Wrong\"\nassert     re_arrange_array([1, 2, 3, 4, -5, -6, -7], 0) == [-7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4], \"Wrong\"\nassert     re_arrange_array([1, 2, 3, 4, -5, -6, -7], 8) == [-7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, -5, -6, -7], \"Wrong\"\nassert     re_arrange_array([1, 2, 3, 4, -5, -6, -7], 1) == [-6, 1, 2, 3, -7, -5, -4], \"Wrong\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    # Test 1\n    print('Test 1')\n    print('-'*20)\n    arr1 = [1, 2, 3, 4, 5, -6]\n    re_arrange_array(arr1, 3)\n    print(arr1)\n    \n    # Test 2\n    print('Test 2')\n    print('-'*20)\n    arr2 = [1, 2, 3, 4, 5, -6, 7, 8, 9]\n    re_arrange_array(arr2, 3)\n    print(arr2)\n    \n    # Test 3\n    print('Test 3')\n    print('-'*20)\n    arr3 = [-10, -20, -30, -40, -50]\n    re_arrange_array(arr3, 3)\n    print(arr3"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_blank('a b','') == 'a b'\nassert     replace_blank('a\\t\\tb','') == 'a\\t\\tb'\nassert     replace_blank('a \\t b','') == 'a\\t\\tb'\nassert     replace_blank('a\\t\\tb','') == 'a\\t\\tb'\nassert     replace_blank('','') == ''\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank('I   love   the   program   which   makes   a   fun   ','') == 'I   love   the   program   which   makes   a   fun   '\nassert replace_blank('I   love   the   program   which   makes   a   fun   ','') == 'I   love   the   program   which   makes   a   fun   '\nassert replace_blank('I   love   the   program   which   makes   a   fun   ','') == 'I   love   the   program   which   makes   a   fun   '\nassert replace_blank('I   love   the   program   which   makes   a   fun   ', '.') == 'I   love   the   program   which   makes   a   fun.'\nassert replace_blank('I   love   the   program   which   makes   a   fun   ', 'a') == 'I   love   the   program   which   makes   a   fun   '\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\n1.    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n2.    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n3.    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n4.    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_blank('',' ') == '', 'failed replace_blank'\nassert     replace_blank('a  ','') == 'a ', 'failed replace_blank'\nassert     replace_blank('a    ','') == 'a', 'failed replace_blank'\nassert     replace_blank('a     ','') == 'a', 'failed replace_blank'\nassert     replace_blank('a      ','') == 'a', 'failed replace_blank'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank(string = \"Hi   Cody, \", char = \" \") == \"Hi Cody, \", \"failed\"\nassert     replace_blank(string = \"\", char = \" \") == \"\", \"failed\"\nassert     replace_blank(string = \"Abhi\", char = \" \") == \"Abhi\", \"failed\"\nassert     replace_blank(string = \"Abhi\", char = \"_\") == \"Abhi\", \"failed\"\nassert     replace_blank(string = \"Abhi\", char = \"\") == \"Abhi\", \"failed\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_blank('test test ', 'x') == 'test test x','replace_blank is not working as intended'\nassert     replace_blank('test test ', 'x') == 'test test x','replace_blank is not working as intended'\nassert     replace_blank('test test ', 'x') == 'test test x','replace_blank is not working as intended'\n\ndef replace_blank_v2(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank('now','') == 'now'\nassert     replace_blank('','') == ''\nassert     replace_blank('i love you','') == 'i love you'\nassert     replace_blank('(5)','') == '(5)'\nassert     replace_blank('     ','') =='  '\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_blank('t','y') == 'y', 'Fail'\nassert     replace_blank('h','z') == 'hzz', 'Fail'\nassert     replace_blank('','z') == 'z', 'Fail'\nassert     replace_blank('x','z') == 'xzz', 'Fail'\nassert     replace_blank('tt','x') == 'xx', 'Fail'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef larg_ncount(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlarg_nnum([1,4,5,2,2,3,4],2) == [4,5]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert larg_nnum([5,3,2,1,4], 2) == [5,3]\nassert larg_nnum([1,2,3,4,5], 1) == [1,2,3,4,5]\nassert larg_nnum([1,2,3,4,5], 3) == [4,5]\nassert larg_nnum([1,2,3,4,5], 5) == [1,2,3,4]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     larg_nnum([1,2,3,5,10],2) == [10,5], \"Wrong\"\nassert     larg_nnum([1,2,3,5,10],1) == [10], \"Wrong\"\n\ndef larg_nnum_heap(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     larg_nnum([1,4,3,7,9,2,6,8,0],5) == [9,7,8,6,3]\nassert     larg_nnum([3,4,5,6,7],2) == [7,5]\nassert     larg_nnum([3,4,5,6,7],1) == [4,5,6,7]\n\ndef insert_after_e(list1):\n    '''\n    Write a function that takes in a list and an integer e, and returns a new list containing all the numbers in the list\n    after inserting e between each pair of adjacent numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n    # if (len(list1) < n):\n    #     return list1\n    # if (n == 0):\n    #     return list1\n    # if (n > len(list1)):\n    #     n = len(list1)\n    # return list1[len(list1) - n:len(list1)]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     larg_nnum([1,2,3,4,5],2) == [5,4]\nassert     larg_nnum([1,2,3,4,5],3) == [4,3,5]\nassert     larg_nnum([1,2,3,4,5],4) == [3,2,4,5]\nassert     larg_nnum([1,2,3,4,5],5) == [2,3,4,5]\nassert     larg_nnum([1,2,3,4,5],6) == [4,3,2,1,5]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert larg_nnum([1,2,3,4,5],3) == [4,5,3]\nassert larg_nnum([1,2,3,4,5],2) == [3,5]\nassert larg_nnum([1,2,3,4,5],1) == [1,2,3,4,5]\nassert larg_nnum([1,2,3,4,5],0) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef larg_nnum_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsuface_cylinder(5, 3) == 0.948\nassert     lateralsuface_cylinder(0, 10) == 0.0\nassert     lateralsuface_cylinder(10, 1) == 1.31\nassert     lateralsuface_cylinder(100, 10) == 0.5\n\ndef lateralsuface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert lateralsuface_cylinder(0,0) == 0\nassert lateralsuface_cylinder(0,1) == 0\nassert lateralsuface_cylinder(1,0) == 0\nassert lateralsuface_cylinder(1,1) == 0\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(1,1) == 0.5, 'WRONG'\nassert lateralsuface_cylinder(2,1) == 0.5, 'WRONG'\nassert lateralsuface_cylinder(1,2) == 0.5, 'WRONG'\nassert lateralsuface_cylinder(2,2) == 0.5, 'WRONG'\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(3,4)==(8*3.14159*4)\nassert     lateralsuface_cylinder(2,3)==(5*3.14159*2)\nassert     lateralsuface_cylinder(10,10)==(50*3.14159*2)\nprint('Coding complete? Click \"Check\" to earn cool rewards!')"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(5) == 12"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\n\ndef volume_pyramid(height):\n    '''\n    Write a function to find the volume of a pyramid given its height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(3) == 27\n\nassert     volume_cube(2) == 8\nassert     volume_cube(1) == 1\nassert     volume_cube(0) == 0"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(5) == 125\nassert     volume_cube(7) == 210\nassert     volume_cube(8) == 3300\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(1) == 1.0\nassert     volume_cube(5) == 50.0\nassert     volume_cube(3) == 27.0\nassert     volume_cube(7) == 497\nassert     volume_cube(11) == 5091.0\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    volume_cube(2) == 8\n    volume_cube(1) == 1\n    volume_cube(0) == 1\n\ndef volume_pyramid(base, height):\n    '''\n    Write a function to compute the volume of a pyramid given its base and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    volume_cube(5) ==  25\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_bit_set_number(0b0110) == 0b1000\nassert \neven_bit_set_number(0b0100) == 0b1000\nassert \neven_bit_set_number(0b1001) == 0b1000\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert even_bit_set_number(2) == 0\nassert even_bit_set_number(10) == 1\nassert even_bit_set_number(20) == 0\nassert even_bit_set_number(40) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(2) == 4\nassert     even_bit_set_number(4) == 0\nassert     even_bit_set_number(1) == 4\nassert     even_bit_set_number(32) == 32\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_bit_set_number(1) == 1\neven_bit_set_number(2) == 2\neven_bit_set_number(3) == 3\neven_bit_set_number(4) == 4\neven_bit_set_number(8) == 4\neven_bit_set_number(16) == 8\neven_bit_set_number(32) == 16\neven_bit_set_number(64) == 32\neven_bit_set_number(128) == 64\neven_bit_set_number(256) == 128\neven_bit_set_number(512) == 256\neven_bit_set_number(1024) == 512\neven_bit_set_number(2048) == 1024\neven_bit_set_number(4096) == 2048\neven_bit_set_number(8192) == 4096\neven_bit_set_number(16384) == 8192\neven_bit_set_number(32768) == 16384\neven_bit_set_number(65536) == 32768\neven_bit_set_number(131072) == 65536\neven_bit_set_number(262144) == 131072\neven_bit_set_number(524288) == 262144\neven_bit_set_number(1048576) == 524288\neven_bit_set_number(2097152) == 1048576\neven_bit_set_number(4194304) == 2097152\neven_bit_set_number(8388608) == 4194304\neven_bit_set_number(16777216) == 8388608\neven_bit_set_number(33554432) == 16777216\neven_bit_set_number(67108864) == 33554432\neven_bit_set_number(134217728) == 67108864\neven_bit_set_number(268435456) == 134217728\neven_bit_set_number(536870912) == 268435456\neven_bit_set_number(1073741824) == 536870912\neven_bit_set_number(2147483648) == 1073741824\neven_bit_set_number(4294967296) == 2147483648\neven_bit_set_number(8589934592) == 4294967296\neven_bit_set_number(17592186044416) == 8589934592\neven_bit_set_number(35184372088832) == 17592186044416\neven_bit_set_number(67108864) == 35184372088832\neven_bit_set_number(134217728) == 67108864\neven_bit_set_number(268435456) == 134217728\neven_bit_set_number(536870912) == 268435456\neven_bit_set_number(1073741824) == 536870912\neven_bit_set_number(2147483648) == 1073741824\neven_bit_set_number(4294967296) == 1073741824\neven_bit_set_number(8589934592) == 4294967296\neven_bit_set_number(17592186044416) == 8589934592\neven_bit_set_number(35184372088832) == 17592186044416\neven_bit_set_number(67108864) == 35184372088832\neven_bit_set_number(134217728) == 67108864\neven_bit_set_number(268435456) == 134217728\neven_bit_set_number(536870912) == 268435456\neven_bit_set_number(1073741824) == 536870912\neven_bit_set_number(2147483648) == 1073741824\neven_bit_set_number(4294967296) == 1073741824\neven_bit_set_number(8589934592) == 4294967296\neven_bit_set_number(17592186044416) == 8589934592\neven_bit_set_number(35184372088832) == 17592186044416\neven_bit_set_number(67108864) == 35184372088832\neven_bit_set_number(134217728) == 67108864\neven_bit_set_number(268435456) == 134217728\neven_bit_set_number(536870912) == 268435456\neven_bit_set_number(1073741824) == 536870912\neven_bit_set_number(2147483648) == 1073741824\neven_bit_set_number(4294967296) == 1073741824\neven_bit_set_number(8589934592) == 4294967296\neven_bit_set_number(17592186044416) == 8589934592\neven_bit_set_number(35184372088832) == 17592186044416\neven_bit_set_number(67108864) == 35184372088832\neven_bit_set_number(134217728) == 67108864\neven_bit_set_number(268435456) == 134217728\neven_bit_set_number(536870912) == 268435456\neven_bit_set_number(1073741824) == 536870912\neven_bit_set_number(2147483648) == 1073741824\neven_bit_set_number(4294967296) == 1073741824\neven_bit_set_number(8589934592) == 4294967296\neven_bit_set_number(17592186044416) == 8589934592\neven_bit_set_number(35184372088832) == 17592186044416\neven_bit_set_number(67108864) == 35184372088832\neven_bit_set_number(134217728) == 67108864\neven_bit_set_number(268435456) == 134217728\neven_bit_set_number(536870912) == 268435456\neven_bit_set_number(1073741824) == 536870912\neven_bit_set_number(2147483648) == 1073741824\neven_bit_set_number(4294967296) == 1073741824\neven_bit_set_number(8589934592) == 4294967296\neven_bit_set_number(17592186044416) == 8589934592\neven_bit_set_number(35184372088832) == 17592186044416\neven_bit_set_number(67108864) == 35184372088832\neven_bit_set_number(134217728) == 67108864\neven_bit_set_number(268435456) == 134217728\neven_bit_set_number(536870912) == 268435456\neven_bit_set_number(1073741824) == 536870912\neven_bit_set_number(2147483648) == 1073741824\neven_bit_set_number(4294967296) == 1073741824\neven_bit_set_number(8589934592) == 4294967296\neven_bit_set_number(17592186044416) == 8589934592\neven_bit_set_number(35184372088832) == 17592186044416\neven_bit_set_number(67108864) == 35184372088832\neven_bit_set_number(134217728) == 67108864\neven_bit_set_number(268435456) == 134217728\neven_bit_set_number(536870912) == 268435456\neven_bit_set_number(1073741824) == 536870912\neven_bit_set_number(2147483648) == 1073741824\neven_bit_set_number(4294967296) == 1073741824\neven_bit_set_number(8589934592) == 4294967296\neven_bit_set_number(17592186044416) == 8589934592\neven_bit_set_number(35184372"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(0) == 0\nassert even_bit_set_number(1) == 1\nassert even_bit_set_number(3) == 2\nassert even_bit_set_number(10) == 4\nassert even_bit_set_number(11) == 8\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_bit_set_number(0b100)==True\nassert     even_bit_set_number(0b0101)==False\nassert     even_bit_set_number(0b0000)==False\nassert     even_bit_set_number(0b1)==True\nassert     even_bit_set_number(0b0)==True\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_bit_set_number(1) == 1\nassert     even_bit_set_number(10) == 1\nassert even_bit_set_number(100) == 1\nassert even_bit_set_number(1000) == 1\nassert even_bit_set_number(10000) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_bit_set_number(7) == 0b1110000\nassert     even_bit_set_number(9) == 0b11110000\nassert even_bit_set_number(10) == 0b101000000\n\ndef even_bit_reset_number(n):\n    '''\n    Write a python function to reset all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_bit_set_number(0b0011) == 0b0000\nassert even_bit_set_number(0b1010) == 0b1010\nassert even_bit_set_number(0b1011) == 0b0000\nassert even_bit_set_number(0b1001) == 0b1000\nassert even_bit_set_number(0b1010) == 0b0000\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (2, 2)]) == {(1, 2): 5, (2, 2): 3}\nassert check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (2, 2)]) == {(1, 2): 5, (2, 2): 3}\nassert check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (2, 2)], ((1, 2), (1, 2))) == {(1, 2): 4, (2, 2): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef create_nested_dictionary(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a nested dictionary mapping each unique tuple to a dictionary mapping the letter of that tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    ((1, 2, 3, 4, 5, 6), 1) == check_occurences([(1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)])\n    ((1, 2, 3, 4, 5, 6), 1) == check_occurences([(1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)])\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_occurences([]) == {}, \"No input\"\nassert check_occurences([('hi', 5), ('hi', 7), ('hi', 1), ('hi', 6)]) == {('hi', 5): 1, ('hi', 6): 1, ('hi', 7): 1}, \"Wrong output\"\nassert check_occurences([(5,), (6,), (7,), (5,), (6,), (5,)]) == {(5,): 3, (6,): 3, (7,): 3}, \"Wrong output\"\nassert check_occurences([(3,), (3,), (3,)]) == {(3,): 3}, \"Wrong output\"\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([('Hello', 'World'), ('Hello', 'World'), ('How', 'are', 'you'), ('How', 'are', 'you')]) == {('Hello', 'World'): 2, ('How', 'are', 'you'): 2}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_occurences([('a', 1), ('a', 2), ('a', 1), ('b', 3), ('b', 1), ('b', 4)]) == {('a', 1): 2, ('a', 2): 1, ('a', 1): 1, ('b', 3): 1, ('b', 1): 2, ('b', 4): 1}\nassert     check_occurences([('a', 1), ('a', 2), ('a', 1), ('b', 3), ('b', 1), ('b', 4)]) == {('a', 1): 2, ('a', 2): 1, ('a', 1): 1, ('b', 3): 1, ('b', 1): 2, ('b', 4): 1}\nassert     check_occurences([('a', 1), ('a', 2), ('a', 1), ('b', 3), ('b', 1), ('b', 4)]) == {('a', 1): 2, ('a', 2): 1, ('a', 1): 1, ('b', 3): 1, ('b', 1): 2, ('b', 4): 1}\nassert     check_occurences([('a', 1), ('a', 2), ('a', 1), ('b', 3), ('b', 1), ('b', 4)]) == {('a', 1): 2, ('a', 2): 1, ('a', 1): 1, ('b', 3): 1, ('b', 1): 2, ('b', 4): 1}\nassert     check_occurences([('a', 1), ('a', 2), ('a', 1), ('b', 3), ('b', 1), ('b', 4)]) == {('a', 1): 2, ('a', 2): 1, ('a', 1): 1, ('b', 3): 1, ('b', 1): 2, ('b', 4): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_occurences([(1, 2), (2, 1), (1, 3), (1, 4)]) == {(1, 2): 1, (2, 1): 1, (1, 3): 1, (1, 4): 1}\nassert check_occurences([(1, 2), (2, 1), (3, 2), (4, 1)]) == {(1, 2): 2, (2, 1): 2, (3, 2): 1, (4, 1): 1}\nassert check_occurences([(1, 2), (2, 1), (3, 1), (1, 3), (1, 4)]) == {(1, 2): 2, (2, 1): 2, (3, 1): 1, (1, 3): 1, (1, 4): 1}\nassert check_occurences([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4)]) == {(1, 2): 2, (1, 3): 1, (1, 4): 2, (2, 3): 1, (2, 4): 1}\nassert check_occurences([(1, 2), (1, 3), (2, 3), (3, 4), (3, 2), (2, 1)]) == {(1, 2): 2, (1, 3): 2, (2, 3): 1, (3, 4): 1, (3, 2): 1, (2, 1): 2}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_occurences([(1,2),(2,3),(3,4),(4,5)]) == {(1,2):1, (2,3):2, (3,4):3, (4,5):1}\nassert     check_occurences([(1,2),(1,3),(1,4),(1,5)]) == {(1,2):2, (1,3):1, (1,4):1, (1,5):1}\nassert     check_occurences([]) == {}\nassert     check_occurences([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,32),(32,33),(33,34),(34,35),(35,36),(36,37),(37,38),(38,39),(39,40),(40,41),(41,42),(42,43),(43,44),(44,45),(45,46),(46,47),(47,48),(48,49),(49,50),(50,51),(51,52),(52,53),(53,54),(54,55),(55,56),(56,57),(57,58),(58,59),(59,60),(60,61),(61,62),(62,63),(63,64),(64,65),(65,66),(66,67),(67,68),(68,69),(69,70),(70,71),(71,72),(72,73),(73,74),(74,75),(75,76),(76,77),(77,78),(78,79),(79,80),(80,81),(81,82),(82,83),(83,84),(84,85),(85,86),(86,87),(87,88),(88,89),(89,90),(90,91),(91,92),(92,93),(93,94),(94,95),(95,96),(96,97),(97,98),(98,99),(99,100),(100,101),(101,102),(102,103),(103,104),(104,105),(105,106),(106,107),(107,108),(108,109),(109,110),(110,111),(111,112),(112,113),(113,114),(114,115),(115,116),(116,117),(117,118),(118,119),(119,120),(120,121),(121,122),(122,123),(123,124),(124,125),(125,126),(126,127),(127,128),(128,129),(129,130),(130,131),(131,132),(132,133),(133,134),(134,135),(135,136),(136,137),(137,138),(138,139),(139,140),(140,141),(141,142),(142,143),(143,144),(144,145),(145,146),(146,147),(147,148),(148,149),(149,150),(150,151),(151,152),(152,153),(153,154),(154,155),(155,156),(156,157),(157,158),(158,159),(159,160),(160,161),(161,162),(162,163),(163,164),(164,165),(165,166),(166,167),(167,168),(168,169),(169,170),(170,171),(171,172),(172,173),(173,174),(174,175),(175,176),(176,177),(177,178),(178,179),(179,180),(180,181),(181,182),(182,183),(183,184),(184,185),(185,186),(186,187),(187,188),(188,189),(189,190),(190,191),(191,192),(192,193),(193,194),(194,195),(195,196),(196,197),(197,198),(198,199),(199,200),(200,201),(201,202),(202,203),(203,204),(204,205),(205,206),(206,207),(207,208),(208,209),(209,210),(210,211),(211,212),(212,213),(213,214),(214,215),(215,216),(216,217),(217,218),(218,219),(219,220),(220,221),(221,222),(222,223),(223,224),(224,225),(225,226),(226,227),(227,228),(228,229),(229,230),(230,231),(231,232),(232,233),(233,234),(234,235),(235,236),(236,237),(237,238),(238,239),(239,240),(240,241),(241,242),(242,243),(243,244),(244,245),(245,246),(246,247),(247,248),(248,249),(249,250),(250,251),(251,252),(252,253),(253,254),(254,255),(255,256),(256,257),(257,258),(258,259),(259,260),(260,261),(261,262),(262,263),(263,264),(264,265),(265,266),(266,267),(267,268),(268,269),(269,270),(270,271),(271,272),(272,273),(273,274),(274,275),(275,276),(276,277),(277,278),(278,279),(279,280),(280,281),(281,282),(282,283),(283,284),(284,285),(285,286),(286,287),(287,288),(288,289),(289,290),(290,291),(291,292),(292,293),(293,294),(294,295),(295,296),(296,297),(297,298),(298,299),(299,300),(300,301),(301,302),(302,303),(303,304),(304,305),(305,306),(306,307),(307,308),(308,309),(309,310),(310,311),(311,312),(312,313),(313,314),(314,315),(315,316),(316,317),(317,318),(318,319),(319,320),(320,321),(321,322),(322,323),(323,324),(324,325),(325,326),(326,327),(327,328),(328,329),(329,330),(330,331),(331,332),(332,333),(333,334),(334,335),(335,336),(336,337),(337,338),(338,339),(339,340),(340,341),(341,342),(342,343),(343,344),(344,345),(345,346),(346,347),(347,348),(348,349),(349,350),(350,351),(351,352),(352,353),(353,354),(354,355),(355,356),(356,357),(357,358),(358,359),(359,360),(360,361),(361,362),(362,363),(363,364),(364,365),(365,366),(366,367),"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_occurences([(1, 2), (2, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (2, 3): 1, (2, 4): 1, (3, 4): 1}\nassert     check_occurences([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (1, 3): 1, (1, 4): 1, (2, 3): 2, (2, 4): 2, (3, 4): 2}\nassert     check_occurences([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (1, 3): 1, (1, 4): 1, (2, 3): 2, (2, 4): 2, (3, 4): 2}\nassert     check_occurences([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (1, 3): 1, (1, 4): 1, (2, 3): 2, (2, 4): 2, (3, 4): 2}\nassert     check_occurences([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (1, 3): 1, (1, 4): 1, (2, 3): 2, (2, 4): 2, (3, 4): 2}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_of_substrings('banana') == 2, \"expected 2, got %s\" % number_of_substrings('banana')\nassert number_of_substrings('abcd') == 3, \"expected 3, got %s\" % number_of_substrings('abcd')\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings(\"string\") == 8\nassert     number_of_substrings(\"geeksforgeeks\") == 12\nassert     number_of_substrings(\"luffy\") == 5\nassert     number_of_substrings(\"\") == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Testing the correctness of number_of_substrings function...')\nprint(number_of_substrings(\"abcabc\")) == 3\nprint(number_of_substrings(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababAbba\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    string = input('Enter a string: ')\n    assert len(string) >= 1 and type(string) == str\n    print(number_of_substrings(string)"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_of_substrings(\"abcd\") == 3\nassert     number_of_substrings(\"abcd\") == 1\nassert     number_of_substrings(\"abc\") == 1\nassert     number_of_substrings(\"abc\") == 1\nassert     number_of_substrings(\"\") == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(number_of_substrings(\"cde\")) # Should return 4 because there are four non-empty substrings\nprint(number_of_substrings(\"abc\")) # Should return 3 because there are three non-empty substrings\nprint(number_of_substrings(\"abcabcabc\")) # Should return 6 because there are six non-empty substrings\nprint(number_of_substrings(\"ab\")) # Should return 1 because there is only one non-empty substring\nprint(number_of_substrings(\"\")) # Should return 0 because there are no non-empty substrings\nprint(number_of_substrings(\"a\")) # Should return 1 because there is only one non-empty substring\nprint(number_of_substrings(\"\")) # Should return 0 because there are no non-empty substrings\nprint(number_of_substrings(\"a\"*20+\"b\"*20)) # Should return 60 because there are 60 non-empty substring"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_of_substrings(\"hmmnhahahah\") == 4\nassert     number_of_substrings(\"algoexpert\") == 3\nassert     number_of_substrings(\"\") == 0\nassert     number_of_substrings(\"h\") == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_of_substrings('') == 0, 'Please check the input data'\nassert     number_of_substrings('abc') == 3, 'Please check the input data'\nassert     number_of_substrings('abcc') == 4, 'Please check the input data'\nassert     number_of_substrings('abcd') == 4, 'Please check the input data'\nassert     number_of_substrings('abcde') == 5, 'Please check the input data'\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(1, 0) == 1 \nassert     get_total_number_of_sequences(1, 1) == 1 \nassert     get_total_number_of_sequences(4, 1) == 1 \nassert     get_total_number_of_sequences(5, 2) == 2 \nassert     get_total_number_of_sequences(10, 2) == 2 \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(5,4) == 6\nassert get_total_number_of_sequences(10,9) == 116\nassert get_total_number_of_sequences(10,10) == 108\nassert get_total_number_of_sequences(10,11) == 102\nassert get_total_number_of_sequences(10,12) == 96\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(4, 4) == 8\nassert     get_total_number_of_sequences(5, 5) == 7\nassert     get_total_number_of_sequences(6, 6) == 10\nassert     get_total_number_of_sequences(7, 7) == 17\nassert     get_total_number_of_sequences(8, 8) == 24\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(6, 2) == 8\nassert     get_total_number_of_sequences(7, 2) == 16\nassert     get_total_number_of_sequences(4, 2) == 20\nassert     get_total_number_of_sequences(2, 2) == 4\nassert     get_total_number_of_sequences(11, 2) == 88\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert get_total_number_of_sequences(10, 10) == 25\nassert get_total_number_of_sequences(5, 10) == 15\nassert get_total_number_of_sequences(8, 7) == 24\nassert get_total_number_of_sequences(4, 2) == 4\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(0,0) == 1\nassert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(2,1) == 1\nassert     get_total_number_of_sequences(3,1) == 1\nassert     get_total_number_of_sequences(10,2) == 5\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(1,0) == 1\nassert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(10,10) == 20\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(2, 3) == 2, 'test should be 2'\nassert get_total_number_of_sequences(3, 4) == 3, 'test should be 3'\nassert get_total_number_of_sequences(10, 6) == 23, 'test should be 23'\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(1,2) == 0\nassert     get_total_number_of_sequences(1,3) == 1\nassert     get_total_number_of_sequences(1,4) == 2\nassert     get_total_number_of_sequences(2,4) == 2\nassert     get_total_number_of_sequences(3,4) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(10, 3) == 29\nassert     get_total_number_of_sequences(13, 4) == 50\nassert     get_total_number_of_sequences(14, 4) == 52\nassert     get_total_number_of_sequences(15, 4) == 78\nassert     get_total_number_of_sequences(16, 4) == 92\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list([3,4,5],[1,2]) == [3,4,5]\nassert     replace_list([1,2],3) == [1,2]\nassert     replace_list([],3) == []\nassert     replace_list([1],3) == [1]\nassert     replace_list([3,4,5,6],[1,2]) == [3,4,5,6]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef subtract_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns the first list minus the second list.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list(['a'],['b']) == ['a', 'b']\nassert     replace_list(['a','b'],['c','d']) == ['c', 'd']\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([1, 2, 3], [4, 5, 6]) == None\nassert     replace_list([1, 2, 3], [4, 5]) == [4, 5, 3]\nassert     replace_list([], [4, 5, 6]) == None\nassert     replace_list([], []) == []\nassert     replace_list([0, 1], [2, 3]) == [0, 2]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nreplace_list([1, 2, 3, 4], [5, 6]) == [[1, 2, 3], 5, 6]\nreplace_list([1, 2, 3, 4], [5]) == [[1, 2, 3], 5, 4]\nreplace_list([1, 2, 3], [5, 6]) == [[1, 2], 5, 6]"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) == [[1,2,3],[4,5,6]]\nassert     replace_list([1,2,3],[4,5,6,7,8]) == [[1,2,3],[4,5,6,7,8]]\nassert     replace_list([1,2,3],[4,5,6],[1,2,3]) == [[1,2,3],[4,5,6],[1,2,3]]\nassert     replace_list([1,2,3],[4,5,6],[1,2,3,4,5,6]) == [[1,2,3],[4,5,6],[1,2,3,4,5,6]]\nassert     replace_list([1,2,3],[4,5,6,7,8],[1,2,3,4,5,6]) == [[1,2,3],[4,5,6,7,8]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_list([1,2,3,4], [2,5,6,7,4]) == [1,2,3,4,5,6,7]\nassert     replace_list([1,2,3], [2,5,6,7,4]) == [1,2,3,2,5,6,7,4]\nassert     replace_list([2,5,6,7,4], [1,2,3,4]) == [2,5,6,7,4,1,2,3]\n\nprint('Check your code and check your grade')\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_list([1, 2, 3, 4], [-1, -2, -3, -4]) == [[1, 2, 3, 4], [-1, -2, -3, -4]]\nassert     replace_list([1, 2, 3, 4], [4, 5, 6]) == [[1, 2, 3, 4], [4, 5, 6]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef replace_list_rec(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the elements of the first list, but with the last element replaced with the elements of the second list.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [1, 2, 3, 8, 5]\nassert     replace_list([1, 2, 3, 4, 5], [7, 8, 9, 10, 11]) == [1, 2, 3, 8, 5]\nassert     replace_list([1, 2, 3, 4, 5], [7, 8]) == [1, 2, 3, 8, 5]\nassert     replace_list([1, 2, 3, 4, 5], [10]) == [1, 2, 3, 4, 5]\nassert     replace_list([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_charac(\"abcdefg\") == 7\nassert count_charac(\"1234abcd\") == 7\nassert count_charac(\"ab12cd\") == 3\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert (count_charac(\"\") == 0)\nassert (count_charac(\"abc\") == 3)\nassert (count_charac(\"abc\") == 3)\nassert (count_charac(\"abcabc\") == 6)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_charac('abc') == 3\nassert     count_charac('') == 0\nassert     count_charac('abcd') == 4\nassert     count_charac('abcdabcd') == 8\nassert     count_charac('abcdabcdabcd') == 16\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_charac('Hello') == 5, \"count_charac: expected 5, but got %s\" % (count_charac('Hello'))\nassert     count_charac('A') == 1, \"count_charac: expected 1, but got %s\" % (count_charac('A'))\nassert     count_charac('a') == 2, \"count_charac: expected 2, but got %s\" % (count_charac('a'))\nassert     count_charac('A') == 1, \"count_charac: expected 1, but got %s\" % (count_charac('A'))\nassert     count_charac('A') == 1, \"count_charac: expected 1, but got %s\" % (count_charac('A'))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\nassert count_charac('Python') == 6\nassert count_charac('hello') == 5\nassert count_charac('python is great') == 14\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_charac('') == 0, 'Wrong'\nassert     count_charac('a') == 1, 'Wrong'\nassert     count_charac('ab') == 2, 'Wrong'\nassert     count_charac('abc') == 3, 'Wrong'\nassert     count_charac('abcd') == 4, 'Wrong'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_charac(str1) == 7\n\ndef count_charac_v2(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_charac(\"\") == 0\nassert count_charac(\"w\") == 1\nassert count_charac(\"waw\") == 2\nassert count_charac(\"ew\") == 2\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_charac(str1):\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(next_Perfect_Square(4)) # 4\nprint(next_Perfect_Square(5)) # 5\nprint(next_Perfect_Square(6)) # 8\nprint(next_Perfect_Square(20)) # 16\nprint(next_Perfect_Square(28)) # 16\nprint(next_Perfect_Square(100)) # 100\nprint(next_Perfect_Square(144)) # 144\nprint(next_Perfect_Square(1248)) # 8\nprint(next_Perfect_Square(12736)) # 8\nprint(next_Perfect_Square(4096)) # 8\nprint(next_Perfect_Square(76543)) # 8\nprint(next_Perfect_Square(156896)) # 8\n\ndef next_Perfect_Square_2(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=math.sqrt(N)\n    y=int(math.ceil(x))\n    while(y*y<N):\n        y+=1\n    return y*y\n    "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nnext_Perfect_Square(9) == 10\n\nassert \nnext_Perfect_Square(16) == 17\n\nassert \nnext_Perfect_Square(2) == 3\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert next_Perfect_Square(3) == 4\nassert next_Perfect_Square(4) == 5\nassert next_Perfect_Square(5) == 8\nassert next_Perfect_Square(6) == 9\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    next_Perfect_Square(1) == 1\n    next_Perfect_Square(2) == 3\n    next_Perfect_Square(3) == 4\n    next_Perfect_Square(4) == 5\n    next_Perfect_Square(5) == 6\n    next_Perfect_Square(6) == 7\n    next_Perfect_Square(7) == 8\n    next_Perfect_Square(8) == 9\n    next_Perfect_Square(9) == 10\n    next_Perfect_Square(10) == 11\n    next_Perfect_Square(11) == 12\n    next_Perfect_Square(12) == 13\n    next_Perfect_Square(13) == 14\n    next_Perfect_Square(14) == 15\n    next_Perfect_Square(15) == 16\n    next_Perfect_Square(16) == 17\n    next_Perfect_Square(17) == 18\n    next_Perfect_Square(18) == 19\n    next_Perfect_Square(19) == 20\n    next_Perfect_Square(20) == 21\n    next_Perfect_Square(21) == 22\n    next_Perfect_Square(22) == 23\n    next_Perfect_Square(23) == 24\n    next_Perfect_Square(24) == 25\n    next_Perfect_Square(25) == 26\n    next_Perfect_Square(26) == 27\n    next_Perfect_Square(27) == 28\n    next_Perfect_Square(28) == 29\n    next_Perfect_Square(29) == 30\n    next_Perfect_Square(30) == 31\n    next_Perfect_Square(31) == 32\n    next_Perfect_Square(32) == 33\n    next_Perfect_Square(33) == 34\n    next_Perfect_Square(34) == 35\n    next_Perfect_Square(35) == 36\n    next_Perfect_Square(36) == 37\n    next_Perfect_Square(37) == 38\n    next_Perfect_Square(38) == 39\n    next_Perfect_Square(39) == 40\n    next_Perfect_Square(40) == 41\n    next_Perfect_Square(41) == 42\n    next_Perfect_Square(42) == 43\n    next_Perfect_Square(43) == 44\n    next_Perfect_Square(44) == 45\n    next_Perfect_Square(45) == 46\n    next_Perfect_Square(46) == 47\n    next_Perfect_Square(47) == 48\n    next_Perfect_Square(48) == 49\n    next_Perfect_Square(49) == 50\n    next_Perfect_Square(50) == 51\n    next_Perfect_Square(51) == 52\n    next_Perfect_Square(52) == 53\n    next_Perfect_Square(53) == 54\n    next_Perfect_Square(54) == 55\n    next_Perfect_Square(55) == 56\n    next_Perfect_Square(56) == 57\n    next_Perfect_Square(57) == 58\n    next_Perfect_Square(58) == 59\n    next_Perfect_Square(59) == 60\n    next_Perfect_Square(60) == 61\n    next_Perfect_Square(61) == 62\n    next_Perfect_Square(62) == 63\n    next_Perfect_Square(63) == 64\n    next_Perfect_Square(64) == 65\n    next_Perfect_Square(65) == 66\n    next_Perfect_Square(66) == 67\n    next_Perfect_Square(67) == 68\n    next_Perfect_Square(68) == 69\n    next_Perfect_Square(69) == 70\n    next_Perfect_Square(70) == 71\n    next_Perfect_Square(71) == 72\n    next_Perfect_Square(72) == 73\n    next_Perfect_Square(73) == 74\n    next_Perfect_Square(74) == 75\n    next_Perfect_Square(75) == 76\n    next_Perfect_Square(76) == 77\n    next_Perfect_Square(77) == 78\n    next_Perfect_Square(78) == 79\n    next_Perfect_Square(79) == 80\n    next_Perfect_Square(80) == 81\n    next_Perfect_Square(81) == 82\n    next_Perfect_Square(82) == 83\n    next_Perfect_Square(83) == 84\n    next_Perfect_Square(84) == 85\n    next_Perfect_Square(85) == 86\n    next_Perfect_Square(86) == 87\n    next_Perfect_Square(87) == 88\n    next_Perfect_Square(88) == 89\n    next_Perfect_Square(89) == 90\n    next_Perfect_Square(90) == 91\n    next_Perfect_Square(91) == 92\n    next_Perfect_Square(92) == 93\n    next_Perfect_Square(93) == 94\n    next_Perfect_Square(94) == 95\n    next_Perfect_Square(95) == 96\n    next_Perfect_Square(96) == 97\n    next_Perfect_Square(97) == 98\n    next_Perfect_Square(98) == 99\n    next_Perfect_Square(99) == 100\n    next_Perfect_Square(100) == 101\n    next_Perfect_Square(101) == 102\n    next_Perfect_Square(102) == 103\n    next_Perfect_Square(103) == 104\n    next_Perfect_Square(104) == 105\n    next_Perfect_Square(105) == 106\n    next_Perfect_Square(106) == 107\n    next_Perfect_Square(107) == 108\n    next_Perfect_Square(108) == 109\n    next_Perfect_Square(109) == 110\n    next_Perfect_Square(110) == 111\n    next_Perfect_Square(111) == 112\n    next_Perfect_Square(112) == 113\n    next_Perfect_Square(113) == 114\n    next_Perfect_Square(114) == 115\n    next_Perfect_Square(115) == 116\n    next_Perfect_Square(116) == 117\n    next_Perfect_Square(117) == 118\n    next_Perfect_Square(118) == 119\n    next_Perfect_Square(119) == 120\n    next_Perfect_Square(120) == 121\n    next_Perfect_Square(121) == 122\n    next_Perfect_Square(122) == 123\n    next_Perfect_Square(123) == 124\n    next_Perfect_Square(124) == 125\n    next_Perfect_Square(125) == 126\n    next_Perfect_Square(126) == 127\n    next_Perfect_Square(127) == 128\n    next_Perfect_Square(128) == 129\n    next_Perfect_Square(129) == 130\n    next_Perfect_Square(130) == 131\n    next_Perfect_Square(131) == 132\n    next_Perfect_Square(132) == 133\n    next_Perfect_Square(133) == 134\n    next_Perfect_Square(134) == 135\n    next_Perfect_Square(135) == 136\n    next_Perfect_Square(136) == 137\n    next_Perfect_Square(137) == 138\n    next_Perfect_Square(138) == 139\n    next_Perfect_Square(139) == 140\n    next_Perfect_Square(140) == 141\n    next_Perfect_Square(141) == 142\n    next_Perfect_Square(142) == 143\n    next_Perfect_Square(143) == 144\n    next_Perfect_Square(144) == 145\n    next_Perfect_Square(145) == 146\n    next_Perfect_Square(146) == 147\n    next_Perfect_Square(147) == 148\n    next_Perfect_Square(148) == 149\n    next_Perfect_Square(149) == 150\n    next_Perfect_Square(150) == 151\n    next_Perfect_Square(151) == 152\n    next_Perfect_Square(152) == 153\n    next_Perfect_Square(153) == 154\n    next_Perfect_Square(154) == 155\n    next_Perfect_Square(155) == 156\n    next_Perfect_Square(156) == 157\n    next_Perfect_Square(157) == 158\n    next_Perfect_Square(158) == 159\n    next_Perfect_Square(159) == 160\n    next_Perfect_Square(160) == 161\n    next_Perfect_Square(161) == 162\n    next_Perfect_Square(162) == 163\n    next_Perfect_Square(163) == 164\n    next_Perfect_Square(164) == 165\n    next_Perfect_Square(165) == 166\n    next_Perfect_Square(166"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(16) == 19\nassert     next_Perfect_Square(25) == 29\nassert     next_Perfect_Square(36) == 37\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert next_Perfect_Square(16) == 9\nassert next_Perfect_Square(19) == 3\nassert next_Perfect_Square(100) == 1\nassert next_Perfect_Square(144) == 9\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(next_Perfect_Square(4))\nprint(next_Perfect_Square(11))\nprint(next_Perfect_Square(1))\nprint(next_Perfect_Square(8))\n\n'''\nwrite a python function to find the Fibonacci sequence, starting from a given number.\n\nfibonacci(n) is defined as a[0] = 0, a[1] = 1,\na[2] = 2, a[n] = a[n-1] + a[n-2].\n'''\ndef Fibonacci(n):\n    '''\n    Write a python function to find the Fibonacci sequence, starting from a given number.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nnext_Perfect_Square(3) == 4, \"Error 1\"\nnext_Perfect_Square(4) == 5, \"Error 2\"\nnext_Perfect_Square(2) == 3, \"Error 3\"\nnext_Perfect_Square(1) == 2, \"Error 4\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(16) == 19\nassert     next_Perfect_Square(128) == 256\nassert next_Perfect_Square(256) == 256\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nnext_Perfect_Square(7) == 9\nnext_Perfect_Square(8) == 9\nnext_Perfect_Square(6) == 9\nnext_Perfect_Square(9) == 10\nnext_Perfect_Square(10) == 10\nnext_Perfect_Square(15) == 16\nnext_Perfect_Square(16) == 17\nnext_Perfect_Square(17) == 18\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    max_sum([3, 8, 2, 3, 7, 2]) == 8\n    max_sum([4, 5, 1, 8, 9, 10]) == 16\n    max_sum([1, 2, 3]) == 3\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_sum([3, 8, 2, 1, 3]) == 6\nassert max_sum([10, 5, 4, 3, 8, 1]) == 5\nassert max_sum([3, 10, 2, 8, 1, 5, 4]) == 11\nassert max_sum([0, 10, 2, 3, 4, 5, 3, 10, 1, 3]) == 16\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert max_sum([3, 8, 2, 10, 12, 1, 14, 7]) == 22\nassert max_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 22"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum([-3, -1, -2, -5, -10, -3, 4, 5]) == 5, \"Example 1 did not pass\"\nassert max_sum([-4, -5, -7, -3, -1, 1, 2, 4, 7, 10, 10]) == 9, \"Example 2 did not pass\"\nassert max_sum([-4, -5, -7, -3, -1, 1, 2, 4, 7, 10, 10]) == 13, \"Example 3 did not pass\"\nassert max_sum([-2, -5, -10, -4, -1, 1, 2, 4, 7, 10, 10]) == 15, \"Example 4 did not pass\"\nassert max_sum([]) == 0, \"Example 5 did not pass\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nTest:\nmax_sum([-2,4,-1,-3,2,3]) # 6\nmax_sum([4,-5,2,-3,0,-1]) # 5\nmax_sum([-1,-3]) # 3\nmax_sum([2,4,-1,-3,0]) # 6\nmax_sum([1,1,1,2]) # 3\nmax_sum([-2,-3,-5,-2]) # 4\n''"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum([3, 8, 6, 7, 9, 1, 10]) == 23\nassert     max_sum([5, 1, 4, 8, 5, 7, 9, 9]) == 18\nassert     max_sum([9, 7, 4, 8, 5, 7, 10, 6, 2, 1]) == 13\nassert     max_sum([3, 4, 5, 9, 11, 2, 4, 8, 10, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, 6, 2, 5, 1, 5, 8, 6, 10, 8, 5, 3, 5, 6, 8, 10, 4, 1, 8, 8, 7, 10, 3, 8, 9, 9, 2, 1, 9, 4, 5, 3, "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(max_sum([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\n\nassert max_sum([0, 4, 6, 2, 10, 8, 14, 12, 9, 15]) == 30\nassert max_sum([0, 10, 6, 2, 12, 8, 14, 4, 9, 15]) == 33\nassert max_sum([0, 14, 6, 2, 10, 8, 4, 9, 15]) == 31\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     babylonian_squareroot(5) == 2.0\nassert     babylonian_squareroot(4) == 2.0\nassert     babylonian_squareroot(9) == 3.0\nassert     babylonian_squareroot(100) == 10.0\nassert     babylonian_squareroot(27) == 3.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(15) == 4\nassert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(5) == 2\nassert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(0) == "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     babylonian_squareroot(2)    ==    1.4142135623730951\nassert     babylonian_squareroot(3)    ==    1.7320508075688772\nassert     babylonian_squareroot(5)    ==    1.8736036428750994\nassert     babylonian_squareroot(12)    ==    2.449489742783178\nassert     babylonian_squareroot(13)    ==    2.64575131107544\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # passing\n    babylonian_squareroot(5) == 2.0\n    # failing\n    babylonian_squareroot(10) == 2.9\n\ndef random_number():\n    '''\n    Write a function for generating random numbers\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(25) == 5\nassert     babylonian_squareroot(32) == 6\nassert     babylonian_squareroot(40) == 7\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(2) == 1.732050807568877\nassert     babylonian_squareroot(0) == 0\nassert     babylonian_squareroot(5) == 2.732050807568877\nassert     babylonian_squareroot(8) == 3.1622776601683795\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     babylonian_squareroot(13) == 3\nassert     babylonian_squareroot(100) == 10\n\n'''\nTest your code by running the cells below to test that the function works.\n'''"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(3) == 2\nassert     babylonian_squareroot(5) == 2.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     babylonian_squareroot(100) == 10\nassert    babylonian_squareroot(5) == 2\nassert    babylonian_squareroot(17) == 3\nassert    babylonian_squareroot(0) == 0\nassert    babylonian_squareroot(1) == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lps1(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \n    In case of the empty string return 0\n    '''\n    pass\n\n\ndef lps2(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \n    In case of the empty string return 0\n    '''\n    pass"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    lps(\"aac\") == 3\n    lps(\"aab\") == 2\n    lps(\"aabb\") == 3\n    lps(\"aabcaa\") == 4\n    lps(\"aaaaa\") == 5\n    lps(\"\") == 0\n    lps(\"aba\") == 3\n\ndef lps_table(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lps(\"aaaaaaaaaaaa\") == 6\nassert     lps(\"abbabaaa\") == 6\nassert     lps(\"babad\") == 4\nassert     lps(\"bbaaabaa\") == 4\nassert     lps(\"aa\") == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert lps(\"abcbabcb\") == 7\nassert lps(\"abcda\") == 3\nassert lps(\"a\") == 1\nassert lps(\"\") == 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lps(\"aabcaaba\") == 3\nassert     lps(\"bananas\") == 3\nassert     lps(\"abbacccc\") == 3\nassert     lps(\"ababbacccc\") == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lps('bbbab') == 4\nassert     lps('dab') == 4\nassert     lps('ab') == 2\nassert     lps('d') == 1\nassert     lps('cdad') == 5\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lps(\"aaa\") == 5\nassert     lps(\"aa\") == 2\nassert     lps(\"aaa\") == 5\nassert     lps(\"babad\") == 7\nassert     lps(\"aba\") == 4\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lps(\"aaaaa\") == 1, \"invalid string\"\nassert     lps(\"abcdbca\") == 3, \"invalid string\"\nassert     lps(\"abbdba\") == 2, \"invalid string\"\nassert     lps(\"aba\") == 2, \"invalid string\"\nassert     lps(\"ab\") == 1, \"invalid string\"\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert False == False \n\n\ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and calculates the n-th Fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     harmonic_sum(2) == 3\nassert     harmonic_sum(3) == 7\nassert     harmonic_sum(4) == 14\nassert     harmonic_sum(5) == 21\nassert     harmonic_sum(6) == 28\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         harmonic_sum(0) == 1\nassert         harmonic_sum(1) == 1\nassert         harmonic_sum(2) == 1.5\nassert         harmonic_sum(3) == 2\nassert         harmonic_sum(4) == 2.833333333333333\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nharmonic_sum(10) == 55.0\n\n\n\ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and calculates the nth Fibonacci number.\n    '''\n    pass"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(harmonic_sum(10))"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 2\nassert     harmonic_sum(3) == 3\nassert     harmonic_sum(4) == 5\nassert     harmonic_sum(5) == 8\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     harmonic_sum(5) == 8\nassert     harmonic_sum(10) == 55\nassert     harmonic_sum(15) == 148\nassert     harmonic_sum(16) == 193\nassert     harmonic_sum(2) == 1\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\n\\nProblem 5:')\nprint('----------------')\nprint('Test Case #1:')\nprint('----------------')\nprint('Expected Output:')\nprint('----------------')\nprint('1/1')\nprint('----------------')\nprint('Actual Output:')\nprint('----------------')\nprint('1/1')\nprint('----------------')\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection_array([1,2,3],[2,5,6]) == [2,5]\nassert     intersection_array([1,2,3,4],[5,6,7,8]) == []\nassert     intersection_array([1,2,3,4,5],[2,5,6,7,8]) == [2,5]\nassert     intersection_array([1,2,3,4,5,6],[1,2,5,6]) == [2,5]\nassert     intersection_array([1,2,3,4,5,6,7],[1,2,5,6,8]) == [2,5]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\narray_nums1 = [1,2,2,1]\narray_nums2 = [2,2]\n\narray_nums1 = [1,2,2,1]\narray_nums2 = [2]\n\narray_nums1 = []\narray_nums2 = []\n\narray_nums1 = [0]\narray_nums2 = [1]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection_array([1,2,3,5,7,7],[2,4,6,8,10,11]) == [2,4,6]\nassert intersection_array([1,2,3,5,7,7],[6,8,10]) == []\nassert intersection_array([1,2,3,5,7,7],[1,3,5,7]) == [1,3,5]\nassert intersection_array([1,2,3,5,7,7],[4,8,10]) == []\nassert intersection_array([1,2,3,5,7,7],[2,3,6,7,8,9]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection_array([1,2,3,4,5], \n                            [1,2,5,6,7]) == [1,2,5]\nassert     intersection_array([1,2,3,4,5],\n                            [1,2,4]) == []\nassert     intersection_array([1,2,3,4,5],\n                            []) == []\nassert     intersection_array([],\n                            [1,2,3,4,5]) == []\nassert     intersection_array([1,2,3,4,5],\n                            [1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,3,4,5,6], \n                             [5,6,7,8,9,10,11]) == [5,6]\nassert     intersection_array([1,2,3,4,5,6], \n                             [7,8,9,10,11]) == []\nassert     intersection_array([1,2,3,4,5,6], \n                             [7,8,9,10,11,12,13]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection_array([1,2,3,4],[4,5,6,7]) == [4,5,6,7], \"Wrong Answer\"\nassert     intersection_array([1,2,3,4],[3,4,5,6]) == [3,4,5], \"Wrong Answer\"\nassert     intersection_array([1,2,3,4],[4,5,6,7]) == [4,5,6,7], \"Wrong Answer\"\nassert     intersection_array([1,2,3,4],[3,4,5,6,7]) == [], \"Wrong Answer\"\nassert     intersection_array([1,2,3,4],[1,2,3,4]) == [1,2,3,4], \"Wrong Answer\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection_array([1,2,3], [2,3,4]) == [2,3]\nassert     intersection_array([1,2,3], [3,4,5]) == [3]\nassert     intersection_array([1,2,3,4], [3,4,5]) == []\nassert     intersection_array([1,2,3], []) == []\nassert     intersection_array([1,2,3], [1,2,3]) == [1,2,3]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection_array([1,2,3],[2,3,4]) == [2,3]\nassert     intersection_array([1,2,3,4],[2,3,4,5]) == []\nassert     intersection_array([1,2],[2,3,4]) == [2,3]\nassert     intersection_array([1,2,3],[1,2]) == [1,2]\nassert     intersection_array([1,2,3],[1,2,3]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_X_3(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_X([(1,2,3),(1,2,3)], 1) == 3\nassert count_X([(1,2,3),(1,2,3)], 2) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_X([0, 1, 1, 2, 2, 2], 1) == 4\nassert count_X([0, 0, 0], 0) == 1\nassert count_X([0, 0, 1, 1, 1, 1, 1, 1], 1) == 5\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_X([1, 2, 3, 4], 2) == 2,     \"Test case 1 failed\"\nassert count_X([1, 1, 1, 1], 1) == 3,     \"Test case 2 failed\"\nassert count_X([1, 2, 3, 4, 5], 5) == 0,     \"Test case 3 failed\"\nassert count_X([], 3) == 0,     \"Test case 4 failed\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(count_X(('a', 'b', 'c', 'a'), 'a'))\nprint(count_X((1, 2, 3, 4), 10))\nprint(count_X((1, 'a', 'b', 'c', 'a'), 'c'))\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     insert_element([\"q\",\"w\",\"e\",\"r\",\"t\",\"y\",\"u\",\"i\",\"o\",\"p\"], \"a\") == [\"a\",\"q\",\"w\",\"e\",\"r\",\"t\",\"y\",\"u\",\"i\",\"o\",\"p\"]\nassert     insert_element([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"], \"z\") == [\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"]\nassert     insert_element([\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"], \"z\") == [\"z\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"]\nassert     insert_element([\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"], \"c\") == [\"c\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"]\nassert     insert_element([\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"], \"c\") == [\"c\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element([1, 2, 3], 1) == [1, 1, 2, 3], 'Test 1 failed'\nassert     insert_element([1, 2, 3], 2) == [1, 1, 2, 2, 3], 'Test 2 failed'\nassert     insert_element([1, 2, 3], 3) == [1, 1, 2, 3, 2], 'Test 3 failed'\nassert     insert_element([1, 2, 3], 4) == [1, 1, 2, 3, 4], 'Test 4 failed'\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],1) == [0,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],5) == [0,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],6) == [0,1,2,3,4,5,6]\nassert     insert_element([1,2,3,4,5],10) == [0,1,2,3,4,5,10]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     insert_element(['a','b','c'], 'd') == ['d','a','b','c']\nassert     insert_element(['a','b','c'], 'e') == ['a','e','b','c']\nassert     insert_element(['a','b','c'], 'f') == ['a','f','b','c']\nassert     insert_element(['a','b','c'], 'g') == ['g','a','b','c']\nassert     insert_element(['a','b','c'], 'h') == ['a','b','h','c']\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert insert_element([5,2,4,1,3],2) == [2,5,2,4,1,3]\nassert insert_element([2,4,5],4) == [2,4,4,5]\nassert insert_element([],2) == [2]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([],1)==[1]\nassert     insert_element([1],1)==[1,1]\nassert     insert_element([1,2],1)==[1,1,2]\nassert     insert_element([1,2],2)==[2,1,2]\nassert     insert_element([1,2],3)==[3,1,2]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert insert_element([1, 2, 3], 0) == [0, 1, 2, 3]\nassert insert_element([1, 2, 3], 4) == [0, 1, 2, 3, 4]\nassert insert_element([1, 2, 3], 1) == [0, 1, 1, 2, 3]\nassert insert_element([1, 2, 3], 2) == [0, 1, 1, 2, 2, 3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef insert_element_before_each(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     insert_element([3,1,2,0,4], 4) ==    [3,1,2,4,0,2,4,0,1,3]\nassert     insert_element([3,1,2,0,4], 2) ==    [3,1,4,0,2,0,1,3]\nassert     insert_element([3,1,2,0,4], 1) ==    [3,1,2,4,0,1,3]\nassert     insert_element([3,1,2,0,4], 3) ==    [3,1,2,0,4,3]\nassert     insert_element([3,1,2,0,4], 5) ==    [3,1,2,0,4,3]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert(complex(1,1))     ==     (1.0, 1.0)\nassert     convert(complex(-1,2))     ==     (-1.0, 2.0)\nassert     convert(complex(1.5,2.0))     ==     (1.5, 2.0)\nassert     convert(complex(0,1))     ==     (0.0, 1.0)\nassert     convert(complex(-0.1,-0.9))     ==     (-0.1, -0.9)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert([1 + 2j, 2 + 3j, 3 + 4j, 4 + 5j, 5 + 6j]) == [(5+3j), (1 + 2j), (2 + 3j), (3 + 4j), (4 + 5j)]\nassert     convert([1 + 2j, 2 + 3j, 3 + 4j, 4 + 5j, 5 + 6j]) == [(5+3j), (1 + 2j), (2 + 3j), (3 + 4j), (4 + 5j)]\nassert convert([1 + 2j, 2 + 3j, 3 + 4j, 4 + 5j, 5 + 6j]) == [(5+3j), (1 + 2j), (2 + 3j), (3 + 4j), (4 + 5j)]\nassert convert([1 + 2j, 2 + 3j, 3 + 4j, 4 + 5j, 5 + 6j]) == [(5+3j), (1 + 2j), (2 + 3j), (3 + 4j), (4 + 5j)]\n\ndef square(number):\n    '''\n    Write a python function to return the square of a number.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert([1,2,3,4]) == [(0.00-3j),(0.00+3j),(1.00+2j),(1.00-2j)], 'Convert 1st number'\nassert    convert([1,2,3,4,5,6]) == [(0.00-3j),(0.00+3j),(1.00+2j),(1.00+2j),(1.00+2j),(1.00-2j)], 'Convert 2nd number'\nassert    convert([-1,2,3,4]) == [(1.00+0j),(-1.00+2j),(1.00+2j),(1.00-2j)], 'Convert 3rd number'\nassert    convert([-1,2,3,4,5,6]) == [(1.00+0j),(-1.00+2j),(1.00+2j),(1.00+2j),(1.00+2j),(1.00-2j)], 'Convert 4th number'\nassert    convert([-1,-2,-3,4]) == [(1.00+0j),(1.00+0j),(1.00+0j),(1.00+4j)], 'Convert 5th number'\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert([[2, 0], [1, 1]]) == [(1.0, 0.0), (1.0, 1.0)]\nassert     convert([[1, 1]]) == [(1.0, 1.0)]\nassert     convert([[0, 0]]) == []\nassert     convert([[2, 2], [1, 1]]) == [(1.41421, 1.41421), (1.41421, 1.41421)]\nassert     convert([[-2, 2], [1, 1]]) == [(1.41421, -1.41421), (1.41421, 1.41421)]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert([1,2])==[3.14,0.28]\nassert     convert([1,2,3])==[-0.28,1.57]\nassert     convert([1,2,3,4,5])==[3.14,1.57]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert(complex(1, 2)) == 'Complex number cannot be converted to polar coordinates'\nassert     convert(complex(0, 0)) == 'Complex number cannot be converted to polar coordinates'\nassert     convert(complex(-1, -2)) == 'Complex number cannot be converted to polar coordinates'\nassert     convert(complex(3, -5)) == 'Complex number cannot be converted to polar coordinates'\nassert     convert(complex(-2, 6)) == 'Complex number cannot be converted to polar coordinates'\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert([2+3j,4-5j]) == ['(2+3j,4-5j)', '(4-5j,2+3j)']\nassert convert(['(1+2j,2-4j)', '(4-5j,2+3j)']) == ['(1+2j,2-4j)', '(4-5j,2+3j)']\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert([3,4]) == ('3+4i', '2i')\nassert     convert([3,2+4j]) == ('3+4i', '4i')\n\ndef vector_addition(numbers1, numbers2):\n    '''\n    Write a python function to compute vector addition of two lists of complex numbers.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert([2,3,4]) == ([(2+3j),(3+4j),(4+4j)], [(0, 0),(3, 4),(1, 2)])\nassert     convert([0,0,0]) == ([(0+0j),(0+0j),(0+0j)], [(0, 0),(0, 0),(0, 0)])\n\ndef a(x):\n    '''\n    Write a python function to get the value of pi, e and a for the given real number.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 5, 5]) == 5,'returns 5'\nassert     count_integer([1, 2, 3, 4, '5', 5]) == 5,'returns 5'\nassert     count_integer([1, 2, 3, 4, 5, 5, 5, 5]) == 5,'returns 5'\nassert     count_integer([1, 2, 3, 4, '5', 5, 5, 5, 5, 5, 5, 5]) == 10,'returns 10'\nassert     count_integer([]) == 0,'returns 0'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    count_integer([1,2,3,4,5]) == 6\n    count_integer([]) == 0\n    count_integer([1,2,3,4,5,6,7,8,9,10]) == 15\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_integer([1, 2, 3, 4, 5]) == 5\nassert count_integer([1, 1, 1, 1, 1]) == 6\nassert count_integer([1, 2, 3]) == 3\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_integer([1,2,3,4,5]) == 4\nassert count_integer([1,2,\"\",3,4,5]) == 5\n\ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncount_integer([1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]) == 6, 'Wrong Output'\n\ndef sum_list_elements(list1):\n    '''\n    Write a python function that returns the sum of list elements.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9]) == 9\nassert     count_integer([]) == 0\nassert     count_integer([1]) == 1\nassert     count_integer([1,2,3,4,5,6,7,8,9]) == 9\n\n\ndef count_even_and_odd(list1):\n    '''\n    Write a python function that returns the number of even and odd numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([1, 2, 3, 4]) == 4, 'count_integer([1,2,3,4]) should be 4'\nassert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 18, 'count_integer([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) should be 20'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert count_integer([1, 2, 3, 4, 5]) == 4\nassert count_integer([]) == 0\nassert count_integer([1, 2, 3]) == 3\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_integer([1, 2, 3, 4, 5]) == 5\nassert     count_integer([1, 2, 3, 4, 5, 'a', 'b']) == 6\nassert     count_integer([1, 'a', 'b', 'c']) == 3\nassert     count_integer([]) == 0\nassert     count_integer([1, 2, 3, 4, 'a', 'b']) == 6\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5, \"Wrong output\"\nassert     count_integer([10, 0, -1, 3, 5, 0]) == 4, \"Wrong output\"\nassert     count_integer([1,2,3,4]) == 4, \"Wrong output\"\n\n'''\nWrite a Python function that returns True if the given string starts with the given character, otherwise returns False.\n'''\n\ndef starts_with(str1, str2):\n    '''\n    Write a python function that returns True if the given string starts with the given character, otherwise returns False.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([1,2,3,4], 2) == [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]\nassert     combinations_colors([1,2,3,4], 3) == [(1,2,3), (1,2,4), (1,3,4), (2,3,4)]\nassert     combinations_colors([1,2,3,4], 4) == [(1,2,3,4)]\nassert     combinations_colors([1,2,3,4], 1) == [(1,2,3,4)]\nassert     combinations_colors([], 2) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors([1,2,3], 2) == \nassert     combinations_colors([1,2,3], 1) == \nassert     combinations_colors([1,2,3], 0) == \nassert     combinations_colors([], 0) == \nassert     combinations_colors([1], 1) == \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors([0, 1, 2], 1) == [()]\nassert     combinations_colors([0, 1, 2], 2) == [(0,), (0, 1), (0, 2), (1,), (1, 2), (2,), (0, 1, 2)]\nassert     combinations_colors([0, 1, 2], 3) == [(0,), (0, 1), (0, 2), (1,), (1, 2), (2,), (0, 1, 2, 3)]\n\ndef color_combos(l):\n    '''\n    Write a function that takes in a list of colors and returns a list of tuples for each color combination. \n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1,2,3,4,5,6], 3) == [(1,2,3), (1,2,4), (1,2,5), (1,2,6), (1,3,4), (1,3,5), (1,3,6), (1,4,5), (1,4,6), (1,5,6), (2,3,4), (2,3,5), (2,3,6), (2,4,5), (2,4,6), (2,5,6), (3,4,5), (3,4,6), (3,5,6), (4,5,6)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(1,2),(1,3),(2,3)]\nassert     combinations_colors([1,2,3], 3) == [(1,2,3)]\n\ndef reverse_colors(l):\n    '''\n    Write a function that takes a list and returns a new list with the colors reversed.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_colors(['A', 'B', 'C', 'D'], 2) == [('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]\nassert     combinations_colors(['A', 'B', 'C', 'D'], 3) == [('A', 'B', 'C'), ('A', 'B', 'D'), ('A', 'C', 'D'), ('B', 'C', 'D')]\nassert     combinations_colors(['A', 'B', 'C', 'D'], 4) == [('A', 'B', 'C', 'D')]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1, 2, 3, 4], 2) == [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\nassert     combinations_colors([1, 2, 3, 4], 3) == [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]\nassert     combinations_colors([1, 2, 3, 4], 4) == [[1, 2, 3, 4]]\nassert     combinations_colors([1, 2, 3, 4], 5) == [[1, 2, 3, 4], [1, 2, 3, 4, 5]]\nassert     combinations_colors([1, 2, 3, 4], 6) == [[1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1,2,3], 2) == [\n                    (1, 2), \n                    (1, 3), \n                    (2, 3)\n                ], 'Wrong answer'\nassert     combinations_colors([\"dog\", \"cat\", \"bird\"], 2) == [\n                    ('dog', 'cat'), \n                    ('dog', 'bird'), \n                    ('cat', 'bird')\n                ], 'Wrong answer'\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors(['a', 'b', 'c', 'd'], 4) == ['(a,a,a,a)','(a,a,a,b)','(a,a,a,c)','(a,a,a,d)','(a,a,b,a)','(a,a,b,b)','(a,a,b,c)','(a,a,b,d)','(a,a,c,a)','(a,a,c,b)','(a,a,c,c)','(a,a,c,d)','(a,a,d,a)','(a,a,d,b)','(a,b,a,a)','(a,b,a,b)','(a,b,a,c)','(a,b,a,d)','(a,b,b,a)','(a,b,b,b)','(a,b,b,c)','(a,b,b,d)','(a,b,c,a)','(a,b,c,b)','(a,b,c,c)','(a,b,c,d)','(a,b,d,a)','(a,b,d,b)','(a,c,a,a)','(a,c,a,b)','(a,c,a,c)','(a,c,a,d)','(a,c,b,a)','(a,c,b,b)','(a,c,b,c)','(a,c,b,d)','(a,c,d,a)','(a,c,d,b)','(a,d,a,a)','(a,d,a,b)','(a,d,a,c)','(a,d,a,d)','(a,d,b,a)','(a,d,b,b)','(a,d,b,c)','(a,d,b,d)','(a,d,c,a)','(a,d,c,b)','(b,a,a,a)','(b,a,a,b)','(b,a,a,c)','(b,a,a,d)','(b,a,b,a)','(b,a,b,b)','(b,a,b,c)','(b,a,b,d)','(b,a,c,a)','(b,a,c,b)','(b,a,c,c)','(b,a,c,d)','(b,a,d,a)','(b,a,d,b)','(b,b,a,a)','(b,b,a,b)','(b,b,a,c)','(b,b,a,d)','(b,b,b,a)','(b,b,b,b)','(b,b,b,c)','(b,b,b,d)','(b,b,c,a)','(b,b,c,b)','(b,b,c,c)','(b,b,c,d)','(b,b,d,a)','(b,b,d,b)','(b,c,a,a)','(b,c,a,b)','(b,c,a,c)','(b,c,a,d)','(b,c,b,a)','(b,c,b,b)','(b,c,b,c)','(b,c,b,d)','(b,c,d,a)','(b,c,d,b)','(b,d,a,a)','(b,d,a,b)','(b,d,a,c)','(b,d,a,d)','(b,d,b,a)','(b,d,b,b)','(b,d,b,c)','(b,d,b,d)','(b,d,c,a)','(b,d,c,b)','(b,d,c,c)','(b,d,c,d)','(b,d,d,a)','(b,d,d,b)','(c,a,a,a)','(c,a,a,b)','(c,a,a,c)','(c,a,a,d)','(c,a,b,a)','(c,a,b,b)','(c,a,b,c)','(c,a,b,d)','(c,a,c,a)','(c,a,c,b)','(c,a,c,c)','(c,a,c,d)','(c,a,d,a)','(c,a,d,b)','(c,b,a,a)','(c,b,a,b)','(c,b,a,c)','(c,b,a,d)','(c,b,b,a)','(c,b,b,b)','(c,b,b,c)','(c,b,b,d)','(c,b,c,a)','(c,b,c,b)','(c,b,c,c)','(c,b,c,d)','(c,b,d,a)','(c,b,d,b)','(c,c,a,a)','(c,c,a,b)','(c,c,a,c)','(c,c,a,d)','(c,c,b,a)','(c,c,b,b)','(c,c,b,c)','(c,c,b,d)','(c,c,d,a)','(c,c,d,b)','(c,d,a,a)','(c,d,a,b)','(c,d,a,c)','(c,d,a,d)','(c,d,b,a)','(c,d,b,b)','(c,d,b,c)','(c,d,b,d)','(c,d,c,a)','(c,d,c,b)','(c,d,c,c)','(c,d,c,d)','(c,d,d,a)','(c,d,d,b)','(d,a,a,a)','(d,a,a,b)','(d,a,a,c)','(d,a,a,d)','(d,a,b,a)','(d,a,b,b)','(d,a,b,c)','(d,a,b,d)','(d,a,c,a)','(d,a,c,b)','(d,a,c,c)','(d,a,c,d)','(d,a,d,a)','(d,a,d,b)','(d,b,a,a)','(d,b,a,b)','(d,b,a,c)','(d,b,a,d)','(d,b,b,a)','(d,b,b,b)','(d,b,b,c)','(d,b,b,d)','(d,b,c,a)','(d,b,c,b)','(d,b,c,c)','(d,b,c,d)','(d,b,d,a)','(d,b,d,b)','(d,c,a,a)','(d,c,a,b)','(d,c,a,c)','(d,c,a,d)','(d,c,b,a)','(d,c,b,b)','(d,c,b,c)','(d,c,b,d)','(d,c,d,a)','(d,c,d,b)','(d,d,a,a)','(d,d,a,b)','(d,d,a,c)','(d,d,a"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_colors([1, 2, 3], 1) == [[1, 2, 3]]\nassert     combinations_colors([1, 2, 3], 2) == [[1, 2], [1, 3], [2, 3]]\nassert     combinations_colors([1, 2, 3], 3) == [[1, 2, 3]]\nassert     combinations_colors([1, 2, 3], 4) == [[1, 2, 3, 4]]\nassert     combinations_colors([1, 2, 3], 5) == []\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 0\nassert     count_Primes_nums(7) == 3\nassert     count_Primes_nums(12) == 4\nassert     count_Primes_nums(15) == 4\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(5) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Primes_nums(10) == 3, \"Fail, since 10 is not prime!\"\nassert     count_Primes_nums(7) == 4, \"Fail, since 7 is not prime!\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Primes_nums(10) == 4, 'Error in the function'\nassert count_Primes_nums(4) == 0, 'Error in the function'\nassert count_Primes_nums(2) == 0, 'Error in the function'\n\ndef count_Primes_from_nums(n1, n2):\n    '''\n    Write a python function that takes in two non-negative numbers and returns the number of prime numbers less than the sum of the given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Primes_nums(0) == 0, \"input 0 should return 0\"\nassert     count_Primes_nums(1) == 0, \"input 1 should return 0\"\nassert     count_Primes_nums(2) == 2, \"input 2 should return 2\"\nassert     count_Primes_nums(3) == 2, \"input 3 should return 2\"\nassert     count_Primes_nums(4) == 1, \"input 4 should return 1\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Primes_nums(100) == 61, \"The expected output is : 61, but the actual output is: {}\".format(count_Primes_nums(100))\nprint(\"Correctness of count_Primes_nums : Passed\")\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(1, 1) == (1, 1)\nassert     swap_numbers(2, 2) == (2, 2)\nassert     swap_numbers(3, 3) == (3, 3)\nassert     swap_numbers(7, 8) == (8, 7)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(1,2) == (2, 1)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(3,4) == (4,3)\nassert swap_numbers(5,6) == (6,5)\nassert swap_numbers(5,4) == (4,5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(3,2) == (2,3)\nassert     swap_numbers(2,2) == (2,2)\nassert     swap_numbers(3,3) == (3,3)\nassert     swap_numbers(4,4) == (4,4)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers(3,4) == (4,3)\nassert     swap_numbers(4,3) == (3,4)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,1) == (1,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(2,1) == (1,2)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(1,1) == (1,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert swap_numbers(3,1) == (1,3)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(3,3) == (3,3)\nassert     swap_numbers(5,7) == (7,5)\nassert     swap_numbers(0,0) == (0,0)\nassert     swap_numbers(5,5) == (5,5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(6,8) == (8,6)\nassert swap_numbers(8,6) == (6,8)\nassert swap_numbers(2,4) == (4,2)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert swap_numbers(3, 5) == (5, 3)\nassert swap_numbers(1, 5) == (5, 1)\nassert swap_numbers(0, 5) == (5, 0)\nassert swap_numbers(-5, -3) == (-3, -5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(4, 5) == (5, 4)\nassert     swap_numbers(1, 5) == (5, 1)\nassert     swap_numbers(2, 3) == (3, 2)\nassert     swap_numbers(0, 1) == (1, 0)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (maximize_elements((1,2,4),(2,4,3))) == (2,4,3)\nassert     (maximize_elements((1,2,4),(4,3,2))) == (4,3,2)\nassert     (maximize_elements((1,2,4),(2,3,4))) == (2,3,4)\nassert     (maximize_elements((1,2,4,5),(2,3,4,5))) == (2,3,4,5)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements( (1,3,4), (5,6,7) ) == (5,6,7)\nassert maximize_elements( (1,3,4), (5,6,7,8) ) == (5,6,7)\nassert maximize_elements( (1,3), (2,4,5) ) == (2,4,5)\nassert maximize_elements( (1,2,3,4), (5,6,7,8) ) == (5,6,7,8)\nassert maximize_elements( (1,2,3), (4,5,6,7) ) == (4,5,6,7)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximize_elements((1,1,1), (2,2,2)) == (2,2,2)\nassert maximize_elements((1,2,3), (1,3,4)) == (3,3,4)\nassert maximize_elements((1,2,3), (4,3,2)) == (4,3,3)\nassert maximize_elements((1,2,3), (4,3,5)) == (3,3,5)\nassert maximize_elements((1,2,3), (4,4,3)) == (4,4,3)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements((1,2,3,4,5),(2,3,4,5,6)) == (1,2,3,4,5)\nassert     maximize_elements((4,5,6,7,8),(1,2,3,4,5)) == (1,2,3,4,5)\nassert     maximize_elements((3,2,1),(4,5,6)) == (4,5,6)\nassert     maximize_elements((4,5,6),(3,2,1)) == (4,5,6)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements(test_tup1, test_tup2) == (1,2,3)\nassert     maximize_elements(test_tup2, test_tup1) == (1,2,3)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements( (2,3), (10,5)) == (10,5)\nassert     maximize_elements( (1,2), (3,4)) == (3,4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((1, 4), (2, 7)) == (7, 4)\nassert     maximize_elements((-5, 6), (10, -1)) == (6, 10)\nassert     maximize_elements((-8, -2), (10, 3)) == (10, 3)\nassert     maximize_elements((1, 2, 3), (4, 5, 6)) == (6, 6)\nassert     maximize_elements((0, 1), (3, 2)) == (3, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((2, 1), (4, 6)) == (4, 6)\nassert     maximize_elements((2, 2), (4, 6)) == (2, 2)\n\ndef check_if_two_lists_are_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if two tuples are equal.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_nth_prime(func):\n    '''\n    Use the given function to calculate the nth prime number, and check whether it is correct.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_prime(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nimport math\n\ndef nth_prime(n):\n    \"\"\"\n    Returns the nth prime number.\n    \"\"\"\n    if n > 1:\n        return nth_prime_helper(n, 2)\n    elif n <= 1:\n        return 2\n\ndef nth_prime_helper(n, prime):\n    \"\"\"\n    Returns the nth prime number.\n    \"\"\"\n    if prime > math.sqrt(n):\n        return nth_prime_helper(n, 3)\n    if n % prime == 0:\n        return nth_prime_helper(n, prime + 1)\n    else:\n        return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    newman_prime(1) == 5\n    newman_prime(2) == 7\n    newman_prime(3) == 11\n    newman_prime(4) == 13\n    newman_prime(5) == 17\n    newman_prime(6) == 19\n    newman_prime(7) == 23\n    newman_prime(8) == 29\n    newman_prime(9) == 31\n    newman_prime(10) == 37\n    newman_prime(11) == 41\n    newman_prime(12) == 43\n    newman_prime(13) == 47\n    newman_prime(14) == 53\n    newman_prime(15) == 59\n    newman_prime(16) == 61\n    newman_prime(17) == 67\n    newman_prime(18) == 71\n    newman_prime(19) == 73\n    newman_prime(20) == 79\n    newman_prime(21) == 83\n    newman_prime(22) == 89\n    newman_prime(23) == 97\n    newman_prime(24) == 101\n    newman_prime(25) == 103\n    newman_prime(26) == 107\n    newman_prime(27) == 109\n    newman_prime(28) == 113\n    newman_prime(29) == 127\n    newman_prime(30) == 131\n    newman_prime(31) == 137\n    newman_prime(32) == 139\n    newman_prime(33) == 149\n    newman_prime(34) == 151\n    newman_prime(35) == 157\n    newman_prime(36) == 163\n    newman_prime(37) == 167\n    newman_prime(38) == 173\n    newman_prime(39) == 179\n    newman_prime(40) == 181\n    newman_prime(41) == 191\n    newman_prime(42) == 193\n    newman_prime(43) == 197\n    newman_prime(44) == 199\n    newman_prime(45) == 211\n    newman_prime(46) == 223\n    newman_prime(47) == 227\n    newman_prime(48) == 229\n    newman_prime(49) == 233\n    newman_prime(50) == 239\n    newman_prime(51) == 241\n    newman_prime(52) == 251\n    newman_prime(53) == 257\n    newman_prime(54) == 263\n    newman_prime(55) == 269\n    newman_prime(56) == 271\n    newman_prime(57) == 277\n    newman_prime(58) == 281\n    newman_prime(59) == 283\n    newman_prime(60) == 293\n    newman_prime(61) == 307\n    newman_prime(62) == 311\n    newman_prime(63) == 313\n    newman_prime(64) == 317\n    newman_prime(65) == 331\n    newman_prime(66) == 337\n    newman_prime(67) == 347\n    newman_prime(68) == 349\n    newman_prime(69) == 353\n    newman_prime(70) == 359\n    newman_prime(71) == 367\n    newman_prime(72) == 373\n    newman_prime(73) == 379\n    newman_prime(74) == 383\n    newman_prime(75) == 389\n    newman_prime(76) == 397\n    newman_prime(77) == 401\n    newman_prime(78) == 409\n    newman_prime(79) == 419\n    newman_prime(80) == 421\n    newman_prime(81) == 433\n    newman_prime(82) == 439\n    newman_prime(83) == 443\n    newman_prime(84) == 449\n    newman_prime(85) == 457\n    newman_prime(86) == 461\n    newman_prime(87) == 463\n    newman_prime(88) == 467\n    newman_prime(89) == 479\n    newman_prime(90) == 487\n    newman_prime(91) == 491\n    newman_prime(92) == 499\n    newman_prime(93) == 503\n    newman_prime(94) == 509\n    newman_prime(95) == 511\n    newman_prime(96) == 513\n    newman_prime(97) == 521\n    newman_prime(98) == 523\n    newman_prime(99) == 541\n    newman_prime(100) == 547\n    newman_prime(101) == 551\n    newman_prime(102) == 557\n    newman_prime(103) == 563\n    newman_prime(104) == 569\n    newman_prime(105) == 571\n    newman_prime(106) == 577\n    newman_prime(107) == 583\n    newman_prime(108) == 591\n    newman_prime(109) == 597\n    newman_prime(110) == 601\n    newman_prime(111) == 607\n    newman_prime(112) == 613\n    newman_prime(113) == 617\n    newman_prime(114) == 619\n    newman_prime(115) == 631\n    newman_prime(116) == 641\n    newman_prime(117) == 647\n    newman_prime(118) == 653\n    newman_prime(119) == 659\n    newman_prime(120) == 661\n    newman_prime(121) == 673\n    newman_prime(122) == 677\n    newman_prime(123) == 683\n    newman_prime(124) == 691\n    newman_prime(125) == 701\n    newman_prime(126) == 709\n    newman_prime(127) == 717\n    newman_prime(128) == 719\n    newman_prime(129) == 727\n    newman_prime(130) == 733\n    newman_prime(131) == 739\n    newman_prime(132) == 741\n    newman_prime(133) == 743\n    newman_prime(134) == 751\n    newman_prime(135) == 757\n    newman_prime(136) == 761\n    newman_prime(137) == 763\n    newman_prime(138) == 769\n    newman_prime(139) == 773\n    newman_prime(140) == 783\n    newman_prime(141) == 791\n    newman_prime(142) == 797\n    newman_prime(143) == 809\n    newman_prime(144) == 811\n    newman_prime(145) == 821\n    newman_prime(146) == 823\n    newman_prime(147) == 827\n    newman_prime(148) == 829\n    newman_prime(149) == 839\n    newman_prime(150) == 853\n    newman_prime(151) == 857\n    newman_prime(152) == 859\n    newman_prime(153) == 861\n    newman_prime(154) == 867\n    newman_prime(155) == 869\n    newman_prime(156) == 873\n    newman_prime(157) == 879\n    newman_prime(158) == 881\n    newman_prime(159) == 887\n    newman_prime(160) == 907\n    newman_prime(161) == 911\n    newman_prime(162) == 913\n    newman_prime(163) == 919\n    newman_prime(164) == 929\n    newman_prime(165) == 937\n    newman_prime(166) == 941\n    newman_prime(167) == 947\n    newman_prime(168) == 953\n    newman_prime(169) == 967\n    newman_prime(170) == 971\n    newman_prime(171) == 977\n    newman_prime(172) == 983\n    newman_prime(173) == 991\n    ne"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     division_elements((1,2,3), (4,5,6)) == (0.25, 0.4, 0.5)\nassert     division_elements((1,2,3), (4,5,6,7,8,9)) == (0.5, 0.4, 0.25)\nassert     division_elements((1,2,3,4), (5,6,7,8)) == (0.3, 0.6, 1, 2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     division_elements((2,4),(4,2)) == (1,2)\nassert     division_elements((2,4),(2,2)) == (2,0)\nassert     division_elements((2,4),(2,4)) == (0,0)\nassert     division_elements((2,4),(4,3)) == (0.5,0.6666666666666666)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements((1,2),(3,4)) == (1/2, 3/4)\nassert     division_elements((2,3),(4,5)) == (2/3, 4/5)\nassert     division_elements((1.5,2.5),(3.5,4.5)) == (1.5/2.5, 3.5/4.5)\nassert     division_elements((-1.5,2.5),(-3.5,4.5)) == (-1.5/2.5,-3.5/4.5)\nassert     division_elements((0,3),(4,5)) == (0/3, 4/5)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     division_elements((1, 2, 3, 4), (1, 0, -1, 2)) == (1.0, 0.5, -0.5, 2.0)\nassert     division_elements((1.0, 1.0, 1.0, 1.0), (1.0, 0.0, -1.0, 2.0)) == (1.0, 0.5, -0.5, 2.0)\nassert     division_elements((1.0, 1.0, 1.0, 1.0), (0.0, -1.0, -1.0, -1.0)) == (1.0, -1.0, -1.0, -1.0)\nassert     division_elements((1.0, 1.0, 1.0, 1.0), (1.0, 1.0, 1.0, 1.0)) == (1.0, 1.0, 1.0, 1.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (division_elements((1,2,3),(4,5,6)) == (1/2,2/5,3/6)), 'Wrong Answer'\nassert     (division_elements((2,4,6),(3,2,2)) == (3,2,2)), 'Wrong Answer'\nassert     (division_elements((6,6,4),(7,2,4)) == (6,6,4)), 'Wrong Answer'\nassert     (division_elements((2,5,6),(7,4,2)) == (2,5,6)), 'Wrong Answer'\n\nprint('You have passed all the tests.')\nprint('You passed', grade, 'out of', TOTAL, 'test cases.'"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.5, 0.75)\nassert     division_elements((2, 4, 6), (1, 3, 5)) == (2.0, 3.0, 5.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     division_elements((10, 20, 30), (0, 0, 0)) == (0, 0, 0)\nassert     division_elements((10, 20, 30), (0, 20, 30)) == (0, 0.5, 1.0)\nassert     division_elements((10, 20, 30), (0, 20, 30)) == (0.1, 0.2, 0.3)\nassert     division_elements((-5, -2, 3), (-10, 0, 9)) == (-0.5, -0.2, 1)\nassert     division_elements((-5, -2, 3), (-10, 0, 9)) == (-0.7, -0.3, 1.3)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((1,2), (3,4)) == (1,0.5)\nassert     division_elements((3,4), (1,2)) == (0.5,1.0)\n\nprint('PASSED: division_elements')"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"Test passed\")\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements( (1, 2), (2, 3)) == (1/2, 1/3)\nassert     division_elements( (3, 4), (2, 1)) == (3/2, 4/1)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_two_parts([1,2,3,4,5,6], 4) == ((1,2,3,4), (5,6))\nassert     split_two_parts([1,2,3,4,5,6], 1) == ((1,2,3,4,5), ())\nassert     split_two_parts([1,2,3,4], 2) == ((1,2,3,4), (1,2,3))\nassert     split_two_parts([1,2,3,4], 5) == ((1,2,3,4), (1,2,3,4,5))\nassert     split_two_parts([], 2) == ((), ())\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4], [5])\n\ndef split_three_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into three parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4], 3) == ([1, 2, 3], [4])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 3) == ([1, 2, 3], [4, 5, 6, 7])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 6) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 7) == ([1, 2, 3, 4, 5], )\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == ([1, 2, 3], [4, 5, 6, 7, 8, 9])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == ([1, 2, 3, 4], [5, 6, 7, 8, 9])\n\ndef keep_first_k_items(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and returns the first L items of the list.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([10,20,30,40,50], 2) == ([10,20], [30,40,50]), \"split_two_parts should return a tuple of lists\"\nassert     split_two_parts([10,20,30,40,50], 5) == ([10,20,30], [40,50]), \"split_two_parts should return a tuple of lists\"\nassert     split_two_parts([10,20,30,40,50], 6) == ([10,20,30], [40,50]), \"split_two_parts should return a tuple of lists\"\nassert     split_two_parts([10,20,30,40,50], 10) == ([10,20,30], []), \"split_two_parts should return a tuple of lists\"\nassert     split_two_parts([10,20,30,40,50], 0) == ([], []), \"split_two_parts should return a tuple of lists\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 6) == ([1, 2, 3, 4, 5], [])\nassert     split_two_parts([1, 2, 3, 4, 5], 0) == ([1, 2, 3, 4, 5], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dog_age(10) ==.5\nassert     dog_age(50) == 4\nassert     dog_age(100) == 5\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(1) ==.1, 'dog_age(1)'\nassert     dog_age(25) == 4.0, 'dog_age(25)'\nassert     dog_age(10) ==.5, 'dog_age(10)'\nassert     dog_age(9) == 2.9, 'dog_age(9)'\nassert     dog_age(5) == 3.7, 'dog_age(5)'\nprint('[Passed all test cases]')\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndog_age(60) == 3\nprint('Correct!')\n\ndef dog_age_in_year(age, birth_year):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         dog_age(0) == 0, f'dog_age({0}) is wrong. Expected: 0'\nassert         dog_age(1) ==.5, f'dog_age({1}) is wrong. Expected:.5'\nassert         dog_age(10) == 4, f'dog_age({10}) is wrong. Expected: 4'\nassert         dog_age(20) == 4, f'dog_age({20}) is wrong. Expected: 4'\nassert         dog_age(30) == 4, f'dog_age({30}) is wrong. Expected: 4'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dog_age(5) == 16\nassert     dog_age(32) == 240\nassert     dog_age(90) == 442\nassert     dog_age(29) == 12\nassert     dog_age(60) == 0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert dog_age(5) == 8, '5 dog years is 8 dog years'\nassert dog_age(12) == 24, '12 dog years is 24 dog years'\nassert dog_age(13) == 27, '13 dog years is 27 dog years'\nassert dog_age(3) == 7, '3 dog years is 7 dog years'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert dog_age(10) == '0 years'\nassert dog_age(12) == '2 years'\nassert dog_age(2) == '2 years'\nassert dog_age(18) == '6 years'\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert list_split([1,2,3,4,5,6], 2) == [[1,2],[3,4],[5,6]]\n\nassert list_split([1,2,3,4,5,6], 3) == [[1,2,3],[4,5,6]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef every_nth(L, n):\n    '''\n    Write a function that takes a list and an integer n and returns a list of every nth element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_split([1,2,3,4,5], 1) == [[1],[2],[3],[4],[5]]\nassert list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert list_split([1,2,3,4,5], 3) == [[1,2,3],[4,5]]\nassert list_split([1,2,3,4,5], 4) == [[1,2,3,4]]\nassert list_split([1,2,3,4,5], 5) == [[1,2,3,4,5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_split([1,2,3,4,5], 1) == [[1], [2], [3], [4], [5]]\nassert     list_split([1,2,3,4,5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1,2,3,4,5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1,2,3,4,5], 4) == [[1, 2, 3, 4], [5]]\nassert     list_split([1,2,3,4,5], 5) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef list_split(S, step):\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i + step])\n        i += step\n    return result\n\nassert list_split([1,2,3,4,5,6,7], 2) == [[1,2], [3,4], [5,6], [7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 5) == [[1, 2, 3, 4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 6) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef list_split2(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return []\n    else:\n        return list_split(S[step::step], step) + list_split(S[0:step:step], step)\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 2) == [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 3) == [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_list(L):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(1)==2\nassert     lateralsurface_cube(2)==6\nassert     lateralsurface_cube(3)==24\nassert     lateralsurface_cube(4)==36\nassert     lateralsurface_cube(5)==50\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsurface_cube(3) == 6, \"wrong\"\nassert     lateralsurface_cube(2) == 4, \"wrong\"\nassert     lateralsurface_cube(1) == 2, \"wrong\"\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsurface_cube(1) == 1\nassert     lateralsurface_cube(2) == 4\nassert     lateralsurface_cube(3) == 6\nassert     lateralsurface_cube(4) == 8\nassert     lateralsurface_cube(5) == 10\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(2) == 10\nassert     lateralsurface_cube(3) == 14\nassert     lateralsurface_cube(4) == 18\nassert     lateralsurface_cube(5) == 22\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlateralsurface_cube(3) == 6, \"Side length = 3, expected lateralsurface_cube(3) = 6\"\nassert \nlateralsurface_cube(4) == 24, \"Side length = 4, expected lateralsurface_cube(4) = 24\"\nassert \nlateralsurface_cube(5) == 35, \"Side length = 5, expected lateralsurface_cube(5) = 35\"\nassert \nlateralsurface_cube(6) == 48, \"Side length = 6, expected lateralsurface_cube(6) = 48\"\nassert \nlateralsurface_cube(7) == 56, \"Side length = 7, expected lateralsurface_cube(7) = 56\"\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef lateralsurface_rectangle(l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(10) == 200\nassert     lateralsurface_cube(20) == 400\nassert     lateralsurface_cube(30) == 600\nassert     lateralsurface_cube(50) == 1400\nassert     lateralsurface_cube(100) == 3200\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsquare_Sum(5) == 6\nassert \nsquare_Sum(10) == 36\n\nprint(square_Sum.__doc__"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_Sum(5) == 5**2+6**2+7**2+8**2+9**2, \"square_Sum is not giving the correct output\"\nprint(\"sum of squares of odd natural numbers:\", square_Sum(5))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsquare_Sum(2) == 1\nassert square_Sum(4) == 29\nassert square_Sum(5) == 78\nassert square_Sum(6) == 144\nassert square_Sum(7) == 563\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsquare_Sum(2) == 9\nassert square_Sum(3) == 25\nassert square_Sum(4) == 25\nassert square_Sum(5) == 77\nassert square_Sum(6) == 216\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_Sum(1) == 1, \"Check your code for square_Sum\"\nassert     square_Sum(5) == 14, \"Check your code for square_Sum\"\nassert     square_Sum(10) == 285, \"Check your code for square_Sum\"\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_star_num(10) == 55\nassert find_star_num(1) == 4\nassert find_star_num(0) == 1\n\ndef find_num_stars(n): \n    '''\n    Write a function to find then'th number of stars in a pyramid.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 10\nassert     find_star_num(4) == 34\nassert     find_star_num(5) == 67\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_star_num(1) == 1\nassert find_star_num(2) == 3\nassert find_star_num(3) == 4\nassert find_star_num(4) == 5\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_find_star_num():\n    assert find_star_num(1) == 2\n    assert find_star_num(2) == 3\n    assert find_star_num(3) == 4\n    "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print('Testing find_star_num:')\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\t*** ALL TESTS PASSED; YOU'RE THE CODE BEST! ***\")"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     ascii_value(\"A\") == 65\nassert     ascii_value(\"a\") == 97\nassert     ascii_value(\"B\") == 66\nassert     ascii_value(\"b\") == 98\nassert     ascii_value(\"C\") == 67\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('e') == 69\nassert     ascii_value('A') == 65\nassert     ascii_value('E') == 69\nassert     ascii_value(' ') == 32\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    ascii_value('a') == 97\n    ascii_value('B') == 98\n    ascii_value('c') == 99\n    ascii_value('z') == 122\n\ndef ascii_count(s):\n    '''\n    Write a function to count the ascii value of the characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('A') == 65\nassert     ascii_value('0') == 48\nassert     ascii_value('z') == 122\nassert     ascii_value('9') == 57\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nascii_value('a') == 65\nascii_value('f') == 102\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_even_and_even_index([1,2,3,4,5]) == 5\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint (\"check if the output is correct:\", sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) == 14\nassert \nprint (\"check if the output is correct:\", sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) == 0\nassert \nprint (\"check if the output is correct:\", sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) == 1\nassert \nprint (\"check if the output is correct:\", sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6]) == 10\nassert     sum_even_and_even_index([0,2,4,6,8,10]) == 12\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 16\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 22\nassert     sum_even_and_even_index([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == -1\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_even_and_even_index([]) == 0\nassert sum_even_and_even_index([1, 2, 3, 4]) == 10\nassert sum_even_and_even_index([]) == 0\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5]) == 0\nassert     sum_even_and_even_index([5,10,15,20,25]) == 60\nassert     sum_even_and_even_index([1,4,8,14,16,18,19]) == 7"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nif __name__ == '__main__':\n    arr = [-1, -5, -1, 0, -2, -3]\n    print(f\"sum_even_and_even_index(arr): {sum_even_and_even_index(arr)}\")"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5, 'Sum should be 5'\nassert     sum_even_and_even_index([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -15, 'Sum should be -15'\nassert     sum_even_and_even_index([-1, -2, -3, -4, -5, -6, -7, -8, -9, 10]) == -15, 'Sum should be -15'\n\nprint('All the test cases are passed')"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(2) == 5\nassert     even_Power_Sum(10) == 385\nassert     even_Power_Sum(4) == 16\nassert     even_Power_Sum(0) == 1\nassert     even_Power_Sum(1) == 1"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_Power_Sum(0) == 0, \"even_Power_Sum(0) returns wrong result\"\nassert     even_Power_Sum(1) == 0, \"even_Power_Sum(1) returns wrong result\"\nassert     even_Power_Sum(4) == 8, \"even_Power_Sum(4) returns wrong result\"\nassert even_Power_Sum(10) == 144, \"even_Power_Sum(10) returns wrong result\"\nassert even_Power_Sum(15) == 1764, \"even_Power_Sum(15) returns wrong result\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_Power_Sum(2) == 32\nassert even_Power_Sum(3) == 776\nassert even_Power_Sum(5) == 2325\nassert even_Power_Sum(10) == 89187918"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_Power_Sum(5) == 41\nassert     even_Power_Sum(4) == 16\nassert     even_Power_Sum(3) == 14\nassert     even_Power_Sum(2) == 10\nassert     even_Power_Sum(1) == 2\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_Power_Sum(2) == 20\nprint('Test passed')\n\nassert even_Power_Sum(3) == 30\nprint('Test passed')\n\nassert even_Power_Sum(4) == 60\nprint('Test passed')\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert even_Power_Sum(3) == 4\nassert even_Power_Sum(4) == 16\nassert even_Power_Sum(5) == 64\nassert even_Power_Sum(6) == 100\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_Power_Sum(0) == 0, \"Your function should return 0\"\nassert     even_Power_Sum(1) == 1, \"Your function should return 1\"\nassert     even_Power_Sum(2) == 2, \"Your function should return 2\"\nassert     even_Power_Sum(3) == 12, \"Your function should return 12\"\nassert     even_Power_Sum(4) == 4, \"Your function should return 4\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_Power_Sum(3) == 28\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_Power_Sum(5) == 3\nassert     even_Power_Sum(6) == 11\nassert     even_Power_Sum(7) == 18\nassert     even_Power_Sum(8) == 60\nassert     even_Power_Sum(9) == 124\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_Power_Sum(0) == 0, \"Error in even_Power_Sum(0)\"\nassert even_Power_Sum(1) == 0, \"Error in even_Power_Sum(1)\"\nassert even_Power_Sum(2) == 1, \"Error in even_Power_Sum(2)\"\nassert even_Power_Sum(3) == 0, \"Error in even_Power_Sum(3)\"\nassert even_Power_Sum(4) == 1, \"Error in even_Power_Sum(4)\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rear_extract([('hello', 'goodbye'), ('goodbye', 'hello')]) == [('goodbye', 'hello')], 'Revere extract test 1 failed'\nassert     rear_extract([('a', 'b'), ('c', 'd'), ('e', 'f')]) == ['e', 'f'], 'Revere extract test 2 failed'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert rear_extract([(3, 'a'), (4, 'b')]) == ['b','b']\nassert rear_extract([(3, 'a'), (4, 'b')]) == ['b','b']\nassert rear_extract([(3, 'a'), (4, 'b')]) == ['b','b']\nassert rear_extract([(3, 'a'), (4, 'b')]) == ['b','b']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == ['a', 'd', 'c', 'b']\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['b', 'c', 'a']\nassert     rear_extract([('a', 1)]) == ['a']"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert rear_extract([(0,1),(2,3),(4,5)]) == [1,3,5], 'Wrong output'\nassert rear_extract([(2,3)]) == [3], 'Wrong output'\nassert rear_extract([(2,3)]) == [3], 'Wrong output'\nassert rear_extract([]) == [], 'Wrong output'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_rear_extract():\n    test_list = [('red', 10), ('blue', 10), ('red', 5), ('blue', 5), ('red', 5)]\n    assert rear_extract(test_list) == ['blue','red', 'blue','red', 'blue']\n\ntest_rear_extract()\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rear_extract([('a',),('b',),('c',)]) == ['b','c','a'], 'Rear Extract'\nassert     rear_extract([(1,),(2,),(3,)]) == [2,3,1], 'Rear Extract'\nassert     rear_extract([]) == [], 'Rear Extract'\nassert     rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6,1,3,5], 'Rear Extract'\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rear_extract([(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four'), (5, 'five')]) == ['five', 'four', 'three', 'two', 'one'], \"Your rear_extract() has some bugs.\"\n\n\ndef rear_insert(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rear_extract([('a', 1), ('b', 2)]) == [1, 2]\nassert rear_extract([('a', 1), ('b', 2), ('c', 3)]) == [1, 2, 3]\nassert rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == [1, 2, 3, 4]\nassert rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntest_list = [(1,2),(3,4),(5,6),(7,8),(9,10)]\ncorrect_output = [(2, 1), (4, 3), (6, 5), (8, 7), (10, 9)]\nprint(rear_extract(test_list))\nprint(correct_output)\n\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     substract_elements((1,2,3),(2,3,4)) == (1,0,1)\nassert     substract_elements((1,2,3),(3,4,5)) == (0,1,2)\nassert     substract_elements((1,2,3,4),(1,2,3,4)) == (0,0,0,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     substract_elements((1, 2, 3, 4, 5, 6), (0, 2, 4)) == (1, 3, 5)\nassert     substract_elements((1, 2, 3, 4, 5, 6), (4, 1, 6)) == (5, 1, 5)\nassert     substract_elements((1, 2, 3, 4, 5, 6), (6, 1, 4)) == (5, 1, 5)\nassert     substract_elements((1, 2, 3, 4, 5, 6), (6, 5, 1)) == (5, 1, 5)\nassert     substract_elements((1, 2, 3, 4, 5, 6), (6, 1, 6)) == (5, 1, 5)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef subtract_elements_alternative(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     substract_elements((1,2,3,4),(1,2,3)) == (0,2,3,4), \"substract_elements did not work correctly\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     substract_elements(('a', 'b'), ('c', 'd')) == ('a', 'c')\nassert     substract_elements(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'b', 'd')"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert (substract_elements((1,2,3), (4,5,6)) == (3,2,1)), \"Wrong\"\nassert substract_elements((3,4,5), (6,7,8)) == (1,2,3), \"Wrong\"\nassert substract_elements((10,20,30), (40,50,60)) == (10,20,30), \"Wrong\"\nprint(\"Passed all test cases\")\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     substract_elements(('a',1),('a',2)) == ('a',0)\nassert     substract_elements(('a',1),('a',1)) == ('a',0)\nassert     substract_elements(('a',1),('a',2)) == ('a',0)\nassert     substract_elements(('b',1),('a',2)) == ('b',0)\n\nprint(\"Congratulations! Your code is correct!\")\nprint(\"Let's test your code with a few test cases in the box below.\")\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsubstract_elements((1, 2, 3), (2, 3, 4)) == (1, 0, -1)\nassert substract_elements((1, 2, 3), (4, 5, 6)) == (1, 0, -5)\nassert substract_elements((1, 2, 3), (3, 2, 1)) == (1, 0, -2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsubstract_elements((1, 2, 3, 4), (2, 3, 4)) == (1, -1, -1, -1)\n\ndef pair_of_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and outputs the number of elements that are in common between the tuples.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(even_binomial_Coeff_Sum(5)) # result: 1\nprint(even_binomial_Coeff_Sum(6)) # result: 3\nprint(even_binomial_Coeff_Sum(7)) # result: 3\nprint(even_binomial_Coeff_Sum(8)) # result: 6\nprint(even_binomial_Coeff_Sum(9)) # result: 7\nprint(even_binomial_Coeff_Sum(10)) # result: 7\nprint(even_binomial_Coeff_Sum(11)) # result: 7\nprint(even_binomial_Coeff_Sum(12)) # result: 7\nprint(even_binomial_Coeff_Sum(13)) # result: 7\nprint(even_binomial_Coeff_Sum(14)) # result: 7\nprint(even_binomial_Coeff_Sum(15)) # result: 7\nprint(even_binomial_Coeff_Sum(16)) # result: 7\nprint(even_binomial_Coeff_Sum(17)) # result: 7\nprint(even_binomial_Coeff_Sum(18)) # result: 7\nprint(even_binomial_Coeff_Sum(19)) # result: 7\nprint(even_binomial_Coeff_Sum(20)) # result: 7\nprint(even_binomial_Coeff_Sum(21)) # result: 7\nprint(even_binomial_Coeff_Sum(22)) # result: 7\nprint(even_binomial_Coeff_Sum(23)) # result: 7\nprint(even_binomial_Coeff_Sum(24)) # result: 7\nprint(even_binomial_Coeff_Sum(25)) # result: 7\nprint(even_binomial_Coeff_Sum(26)) # result: 7\nprint(even_binomial_Coeff_Sum(27)) # result: 7\nprint(even_binomial_Coeff_Sum(28)) # result: 7\nprint(even_binomial_Coeff_Sum(29)) # result: 7\nprint(even_binomial_Coeff_Sum(30)) # result: 7\nprint(even_binomial_Coeff_Sum(31)) # result: 7\nprint(even_binomial_Coeff_Sum(32)) # result: 7\nprint(even_binomial_Coeff_Sum(33)) # result: 7\nprint(even_binomial_Coeff_Sum(34)) # result: 7\nprint(even_binomial_Coeff_Sum(35)) # result: 7\nprint(even_binomial_Coeff_Sum(36)) # result: 7\nprint(even_binomial_Coeff_Sum(37)) # result: 7\nprint(even_binomial_Coeff_Sum(38)) # result: 7\nprint(even_binomial_Coeff_Sum(39)) # result: 7\nprint(even_binomial_Coeff_Sum(40)) # result: 7\nprint(even_binomial_Coeff_Sum(41)) # result: 7\nprint(even_binomial_Coeff_Sum(42)) # result: 7\nprint(even_binomial_Coeff_Sum(43)) # result: 7\nprint(even_binomial_Coeff_Sum(44)) # result: 7\nprint(even_binomial_Coeff_Sum(45)) # result: 7\nprint(even_binomial_Coeff_Sum(46)) # result: 7\nprint(even_binomial_Coeff_Sum(47)) # result: 7\nprint(even_binomial_Coeff_Sum(48)) # result: 7\nprint(even_binomial_Coeff_Sum(49)) # result: 7\nprint(even_binomial_Coeff_Sum(50)) # result: 7\nprint(even_binomial_Coeff_Sum(51)) # result: 7\nprint(even_binomial_Coeff_Sum(52)) # result: 7\nprint(even_binomial_Coeff_Sum(53)) # result: 7\nprint(even_binomial_Coeff_Sum(54)) # result: 7\nprint(even_binomial_Coeff_Sum(55)) # result: 7\nprint(even_binomial_Coeff_Sum(56)) # result: 7\nprint(even_binomial_Coeff_Sum(57)) # result: 7\nprint(even_binomial_Coeff_Sum(58)) # result: 7\nprint(even_binomial_Coeff_Sum(59)) # result: 7\nprint(even_binomial_Coeff_Sum(60)) # result: 7\nprint(even_binomial_Coeff_Sum(61)) # result: 7\nprint(even_binomial_Coeff_Sum(62)) # result: 7\nprint(even_binomial_Coeff_Sum(63)) # result: 7\nprint(even_binomial_Coeff_Sum(64)) # result: 7\nprint(even_binomial_Coeff_Sum(65)) # result: 7\nprint(even_binomial_Coeff_Sum(66)) # result: 7\nprint(even_binomial_Coeff_Sum(67)) # result: 7\nprint(even_binomial_Coeff_Sum(68)) # result: 7\nprint(even_binomial_Coeff_Sum(69)) # result: 7\nprint(even_binomial_Coeff_Sum(70)) # result: 7\nprint(even_binomial_Coeff_Sum(71)) # result: 7\nprint(even_binomial_Coeff_Sum(72)) # result: 7\nprint(even_binomial_Coeff_Sum(73)) # result: 7\nprint(even_binomial_Coeff_Sum(74)) # result: 7\nprint(even_binomial_Coeff_Sum(75)) # result: 7\nprint(even_binomial_Coeff_Sum(76)) # result: 7\nprint(even_binomial_Coeff_Sum(77)) # result: 7\nprint(even_binomial_Coeff_Sum(78)) # result: 7\nprint(even_binomial_Coeff_Sum(79)) # result: 7\nprint(even_binomial_Coeff_Sum(80)) # result: 7\nprint(even_binomial_Coeff_Sum(81)) # result: 7\nprint(even_binomial_Coeff_Sum(82)) # result: 7\nprint(even_binomial_Coeff_Sum(83)) # result: 7\nprint(even_binomial_Coeff_Sum(84)) # result: 7\nprint(even_binomial_Coeff_Sum(85)) # result: 7\nprint(even_binomial_Coeff_Sum(86)) # result: 7\nprint(even_binomial_Coeff_Sum(87)) # result: 7\nprint(even_binomial_Coeff_Sum(88)) # result: 7\nprint(even_binomial_Coeff_Sum(89)) # result: 7\nprint(even_binomial_Coeff_Sum(90)) # result: 7\nprint(even_binomial_Coeff_Sum(91)) # result: 7\nprint(even_binomial_Coeff_Sum(92)) # result: 7\nprint(even_binomial_Coeff_Sum(93)) # result: 7\nprint(even_binomial_Coeff_Sum(94)) # result: 7\nprint(even_binomial_Coeff_Sum(95)) # result: 7\nprint(even_binomial_Coeff_Sum(96)) # result: 7\nprint(even_binomial_Coeff_Sum(97)) # result: 7\nprint(even_binomial_Coeff_Sum(98)) # result: 7\nprint(even_binomial_Coeff_Sum(99)) # result: 7\nprint(even_binomial_Coeff_Sum(100)) # result: 7\nprint(even_binomial_Coeff_Sum(101)) # result: 7\nprint(even_binomial_Coeff_Sum(102)) # result: 7\nprint(even_binomial_Coeff_Su"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_binomial_Coeff_Sum(4) == 7\nassert even_binomial_Coeff_Sum(1) == 1\nassert even_binomial_Coeff_Sum(2) == 1\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint even_binomial_Coeff_Sum(3)==1, \"3,3,1\"\nprint even_binomial_Coeff_Sum(4)==6, \"4,4,6\"\nprint even_binomial_Coeff_Sum(5)==10, \"5,5,10\"\nprint even_binomial_Coeff_Sum(8)==32, \"8,8,32\"\nprint even_binomial_Coeff_Sum(9)==64, \"9,9,64\"\nprint even_binomial_Coeff_Sum(10)==137, \"10,10,137\"\nprint even_binomial_Coeff_Sum(11)==255, \"11,11,255\"\nprint even_binomial_Coeff_Sum(12)==1357, \"12,12,1357\"\nprint even_binomial_Coeff_Sum(13)==1021, \"13,13,1021\"\nprint even_binomial_Coeff_Sum(14)==3189, \"14,14,3189\"\nprint even_binomial_Coeff_Sum(15)==13115, \"15,15,13115\"\nprint even_binomial_Coeff_Sum(16)==6535, \"16,16,6535\"\nprint even_binomial_Coeff_Sum(17)==19061, \"17,17,19061\"\nprint even_binomial_Coeff_Sum(18)==33603, \"18,18,33603\"\nprint even_binomial_Coeff_Sum(19)==131215, \"19,19,131215\"\nprint even_binomial_Coeff_Sum(20)==22015, \"20,20,22015\"\nprint even_binomial_Coeff_Sum(21)==144115, \"21,21,144115\"\nprint even_binomial_Coeff_Sum(22)==214115, \"22,22,214115\"\nprint even_binomial_Coeff_Sum(23)==90615, \"23,23,90615\"\nprint even_binomial_Coeff_Sum(24)==246985, \"24,24,246985\"\nprint even_binomial_Coeff_Sum(25)==144105, \"25,25,144105\"\nprint even_binomial_Coeff_Sum(26)==280615, \"26,26,280615\"\nprint even_binomial_Coeff_Sum(27)==146685, \"27,27,146685\"\nprint even_binomial_Coeff_Sum(28)==337965, \"28,28,337965\"\nprint even_binomial_Coeff_Sum(29)==161905, \"29,29,161905\"\nprint even_binomial_Coeff_Sum(30)==48785, \"30,30,48785\"\nprint even_binomial_Coeff_Sum(31)==198605, \"31,31,198605\"\nprint even_binomial_Coeff_Sum(32)==97765, \"32,32,97765\"\nprint even_binomial_Coeff_Sum(33)==495985, \"33,33,495985\"\nprint even_binomial_Coeff_Sum(34)==201605, \"34,34,201605\"\nprint even_binomial_Coeff_Sum(35)==223905, \"35,35,223905\"\nprint even_binomial_Coeff_Sum(36)==128885, \"36,36,128885\"\nprint even_binomial_Coeff_Sum(37)==594565, \"37,37,594565\"\nprint even_binomial_Coeff_Sum(38)==142905, \"38,38,142905\"\nprint even_binomial_Coeff_Sum(39)==337965, \"39,39,337965\"\nprint even_binomial_Coeff_Sum(40)==136605, \"40,40,136605\"\nprint even_binomial_Coeff_Sum(41)==564565, \"41,41,564565\"\nprint even_binomial_Coeff_Sum(42)==170905, \"42,42,170905\"\nprint even_binomial_Coeff_Sum(43)==69095, \"43,43,69095\"\nprint even_binomial_Coeff_Sum(44)==219415, \"44,44,219415\"\nprint even_binomial_Coeff_Sum(45)==144115, \"45,45,144115\"\nprint even_binomial_Coeff_Sum(46)==80845, \"46,46,80845\"\nprint even_binomial_Coeff_Sum(47)==50125, \"47,47,50125\"\nprint even_binomial_Coeff_Sum(48)==271085, \"48,48,271085\"\nprint even_binomial_Coeff_Sum(49)==141155, \"49,49,141155\"\nprint even_binomial_Coeff_Sum(50)==349565, \"50,50,349565\"\nprint even_binomial_Coeff_Sum(51)==128885, \"51,51,128885\"\nprint even_binomial_Coeff_Sum(52)==604565, \"52,52,604565\"\nprint even_binomial_Coeff_Sum(53)==170905, \"53,53,170905\"\nprint even_binomial_Coeff_Sum(54)==79095, \"54,54,79095\"\nprint even_binomial_Coeff_Sum(55)==404565, \"55,55,404565\"\nprint even_binomial_Coeff_Sum(56)==219415, \"56,56,219415\"\nprint even_binomial_Coeff_Sum(57)==894565, \"57,57,894565\"\nprint even_binomial_Coeff_Sum(58)==569055, \"58,58,569055\"\nprint even_binomial_Coeff_Sum(59)==304565, \"59,59,304565\"\nprint even_binomial_Coeff_Sum(60)==161905, \"60,60,161905\"\nprint even_binomial_Coeff_Sum(61)==97765, \"61,61,97765\"\nprint even_binomial_Coeff_Sum(62)==495985, \"62,62,495985\"\nprint even_binomial_Coeff_Sum(63)==201605, \"63,63,201605\"\nprint even_binomial_Coeff_Sum(64)==97765, \"64,64,97765\"\nprint even_binomial_Coeff_Sum(65)==48785, \"65,65,48785\"\nprint even_binomial_Coeff_Sum(66)==223905, \"66,66,223905\"\nprint even_binomial_Coeff_Sum(67)==138605, \"67,67,138605\"\nprint even_binomial_Coeff_Sum(68)==594565, \"68,68,594565\"\nprint even_binomial_Coeff_Sum(69)==142905, \"69,69,142905\"\nprint even_binomial_Coeff_Sum(70)==337965, \"70,70,337965\"\nprint even_binomial_Coeff_Sum(71)==136605, \"71,71,136605\"\nprint even_binomial_Coeff_Sum(72)==564565, \"72,72,564565\"\nprint even_binomial_Coeff_Sum(73)==170905, \"73,73,170905\"\nprint even_binomial_Coeff_Sum(74)==69095, \"74,74,69095\"\nprint even_binomial_Coeff_Sum(75"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 0\nassert     even_binomial_Coeff_Sum(2) == 2\nassert     even_binomial_Coeff_Sum(3) == 8\nassert     even_binomial_Coeff_Sum(4) == 20\nassert     even_binomial_Coeff_Sum(5) == 30\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_binomial_Coeff_Sum( 4) == (5, 40, 120, 1000)\nassert     even_binomial_Coeff_Sum(6) == (15, 2525, 77760, 272760, 231144, 2000000)\n\ndef even_binomial_Coeff_Sum_in_List( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients in a list.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum(10) == \"AVERAGE = 1/3\"\nassert even_binomial_Coeff_Sum(5) == \"AVERAGE = 4/35\"\nassert even_binomial_Coeff_Sum(2) == \"AVERAGE = 4/7\"\nassert even_binomial_Coeff_Sum(1) == \"AVERAGE = 4/5\"\nassert even_binomial_Coeff_Sum(0) == \"AVERAGE = 0\"\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_binomial_Coeff_Sum(0) == 0, \"Wrong output.\"\nassert     even_binomial_Coeff_Sum(1) == 1, \"Wrong output.\"\nassert     even_binomial_Coeff_Sum(2) == 4, \"Wrong output.\"\nassert     even_binomial_Coeff_Sum(3) == 32, \"Wrong output.\"\nassert     even_binomial_Coeff_Sum(4) == 216, \"Wrong output.\"\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert even_binomial_Coeff_Sum(0) == 0\nassert even_binomial_Coeff_Sum(1) == 0\nassert even_binomial_Coeff_Sum(2) == 1\nassert even_binomial_Coeff_Sum(3) == 2\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_binomial_Coeff_Sum(1) == 0\nassert \neven_binomial_Coeff_Sum(2) == 0\nassert \neven_binomial_Coeff_Sum(3) == 0\nassert \neven_binomial_Coeff_Sum(4) == 0\nassert \neven_binomial_Coeff_Sum(5) == 0\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 5\nassert     even_binomial_Coeff_Sum(4) == 17\nassert     even_binomial_Coeff_Sum(5) == 103\nassert     even_binomial_Coeff_Sum(6) == 505\nassert     even_binomial_Coeff_Sum(7) == 661\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(1,1) == 3.14159265358979, \"incorrect volume_cylinder\"\nassert     volume_cylinder(1,2) == 3.14159265358979, \"incorrect volume_cylinder\"\nassert     volume_cylinder(2,2) == 6.282700841929645, \"incorrect volume_cylinder\"\nassert     volume_cylinder(2,3) == 12.566370614359172, \"incorrect volume_cylinder\"\nassert     volume_cylinder(3,2) == 12.566370614359172, \"incorrect volume_cylinder\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cylinder(2,1) == 2\nassert     volume_cylinder(2,2) == 4\nassert     volume_cylinder(2,0) == 0\nassert     volume_cylinder(0,1) == 0\nassert     volume_cylinder(3,2) == 6\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cylinder(1,1) == 3.141592653589793, \"Test Case Failed\"\nassert     volume_cylinder(1,2) == 4.188790204774208, \"Test Case Failed\"\nassert     volume_cylinder(1,3) == 4.240740740740741, \"Test Case Failed\"\nassert     volume_cylinder(2,3) == 7.074074074074074, \"Test Case Failed\"\nassert     volume_cylinder(2,4) == 7.074074074074074, \"Test Case Failed\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(3,4) ==  9.1140320\nassert     volume_cylinder(10,5) ==  28.25\n\nprint('\\033[92m' + \"Assessment 3 - Part A: Functionality\" + '\\033[0m')\nprint('\\033[94m' + \"Expected Output(s)\" + '\\033[0m')\nprint('\\033[92m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[92m' + \"ans: \" + str(volume_cylinder(5,3)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(5,2)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(5,1)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(3.2,6.7)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(3.2,2)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(3,1)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(5,0)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(5,5)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(1.3,0.1)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(3.2,0.2)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(5,0)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(0,5)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(0,0)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,0)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,1)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,2)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,3)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(5,4)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(5,3)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,1)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(5,2)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,2)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,3)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,4)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,5)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,6)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,7)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,8)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,9)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,10)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprint('\\033[94m' + \"ans: \" + str(volume_cylinder(10,11)) + '\\033[0m')\nprint('\\033[94m' + \"Volume of a Cylinder\" + '\\033[0m')\nprin"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(1,1) == 3.14\nassert     volume_cylinder(1,2) == 1.57\nassert     volume_cylinder(1,3) == 0.314\nassert     volume_cylinder(2,2) == 2.28\nassert     volume_cylinder(2,3) == 2.5\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(2,3) == 8.31447*r**2*h\nassert volume_cylinder(2,3) == volume_cylinder(h=3,r=2)\nassert volume_cylinder(r=2,h=3) == 8.31447*r**2*h\nassert volume_cylinder(r=2) == volume_cylinder(h=2)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    volume_cylinder(1,1) == 3.1416\n    volume_cylinder(5,5) == 78.5398\n    volume_cylinder(10,10) == 7854.159\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cylinder(1,1) == pi * r ** 2 * h\nassert     volume_cylinder(2,2) == pi * r ** 2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cylinder(r=3, h=4) == pi * 3**2 * 4\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert volume_cylinder(1, 1) == 1.33\nassert volume_cylinder(2, 1) == 2.67\nassert volume_cylinder(0.5, 1) == 0.14\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_filter({\"a\":1,\"b\":2,\"c\":3}, 1) == {\"a\":1,\"b\":2,\"c\":3}, \"Error 1\"\nassert     dict_filter({\"a\":1,\"b\":2,\"c\":3}, 2) == {\"a\":1,\"b\":2,\"c\":3}, \"Error 2\"\nassert     dict_filter({\"a\":1,\"b\":2,\"c\":3}, 3) == {\"a\":1,\"b\":2,\"c\":3}, \"Error 3\"\nassert     dict_filter({\"a\":1,\"b\":2,\"c\":3}, 4) == {}, \"Error 4\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef dict_select(dict,keys):\n    '''\n    Write a function that takes in a dictionary and a list of keys and returns the corresponding values as a list.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5},1) == {'b':2,'c':3,'d':4,'e':5}, 'incorrect'\nassert dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5},1) == {'a':1,'b':2,'e':5}, 'incorrect'\nassert dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5},4) == {'b':2,'c':3,'d':4,'e':5}, 'incorrect'\n\nprint('Success: dict_filter')\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 1) == {'a': 1, 'b': 2, 'd': 4, 'e': 5}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2) == {'a': 1, 'b': 2, 'e': 5}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 4) == {'c': 3, 'd': 4, 'e': 5}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 6) == {}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 10) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 0) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 5) == {}\nassert     dict_filter({}, 1) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_filter({1:2,3:4,4:5},2) == {3:4,4:5}\nassert     dict_filter({1:2,3:4,4:5},1) == {1:2,3:4,4:5}\nassert     dict_filter({1:2,3:4,4:5},0) == {1:2,3:4,4:5}\nassert     dict_filter({1:2,3:4,4:5},3) == {3:4,4:5}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({'a': -1,'b': -2,'c': 1},1) == {'a': -1,'b': -2}\nassert dict_filter({'a': -1,'b': -2,'c': 1},0) == {}\nassert dict_filter({'a': -1,'b': -2,'c': 1},2) == {'a': -1,'b': -2}\nassert dict_filter({'a': -1,'b': -2,'c': 1},1) == {'a': -1,'b': -2}\nassert dict_filter({'a': -1,'b': -2,'c': 1},-1) == {'a': -1,'b': -2,'c': 1}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 0) == {'b': 2, 'c': 3, 'd': 4}, 'incorrect'\nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, -1) == {}, 'incorrect'\nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 1) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}, 'incorrect'\nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'a': 1, 'b': 2, 'c': 3}, 'incorrect'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 1) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 4) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 5) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_filter({'apple':2,'kiwi':1,'orange':3,'lemon':4},3) == {'apple':2,'lemon':4}, 'INCORRECT'\nassert     dict_filter({'apple':2,'kiwi':1,'orange':3,'lemon':4},2) == {'kiwi':1,'orange':3}, 'INCORRECT'\nassert     dict_filter({'apple':2,'kiwi':1,'orange':3,'lemon':4},1) == {'kiwi':1,'orange':3}, 'INCORRECT'\nassert     dict_filter({'apple':2,'kiwi':1,'orange':3,'lemon':4},0) == {}, 'INCORRECT'\nassert     dict_filter({},0) == {}, 'INCORRECT'\nprint('TESTS DICTIONARY FILTER PASSED')\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements([(1, 2), (3, 5), (3, 4, 6, 8), (3, 2, 1), (8, 7), (6, 5, 4), (9, 8), (5, 2, 1), (3, 6, 4, 2), (1, 5, 3, 6), (8, 2, 5, 3, 2, 7), (7, 8, 9, 6), (2, 1, 3, 4, 9, 5, 8)]) == 7\n\n\n\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((2,4,1))==0, 'count_first_elements function is not working properly'\nassert     count_first_elements((4,2,1))==3, 'count_first_elements function is not working properly'\nassert     count_first_elements((1,4,2))==3, 'count_first_elements function is not working properly'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 5)) == 5\nassert     count_first_elements((1, 2, 3, 4)) == 4\nassert     count_first_elements((1, 2, 3)) == 3\nassert     count_first_elements((1, 2)) == 2\nassert     count_first_elements((1, 2, 3, 4, 5, 6)) == 4\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements((1,1,2,2,3,2,2,3,3,1,1)) == 4\nassert     count_first_elements((1,2,2,2,3,2,2,3,3,1,1)) == 0\nassert     count_first_elements((1,2,2,2,3,2,2,3,3,1,1,1)) == 4\nprint(\"You've got it right!\""
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements((1,2,3,4,5,6,7,8,9,10,20)) == 5, \\\n        'count_first_elements (failed)'\nassert count_first_elements((1,2,3,4,5,6,7,8,9,10)) == 0, \\\n        'count_first_elements (failed)'\nassert count_first_elements
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements((0,0,1)) == 1, 'Test 0 failed'\nassert     count_first_elements((1,0,1)) == 2, 'Test 1 failed'\nassert     count_first_elements((0,0,2)) == 1, 'Test 2 failed'\nassert     count_first_elements((0,0,3)) == 1, 'Test 3 failed'\nassert     count_first_elements((0,0,4)) == 1, 'Test 4 failed'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements( ('a', 'b', 'c', 'd') ) == 2\nassert     count_first_elements( ('a', 'b', 'c') ) == 1\nassert     count_first_elements( ('a', 'b', 'c', 'd', 'e', 'f') ) == 0\nassert     count_first_elements( ('a', 'b', 'c') ) == 1\nassert     count_first_elements( ('b', 'a', 'b', 'c', 'd', 'e', 'f') ) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 2, 1)) == 3\nassert     count_first_elements((0, 1, 2, 3, 4, 5)) == 1\nassert     count_first_elements((0, 1, 2, 3, 4, 5, 4, 3, 2, 1)) == 4\nassert count_first_elements((0, 1, 2, 3, 4, 5, 4, 3, 2, 1)) == 0\nassert count_first_elements((0,)) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'f')) == 5\nassert     count_first_elements(('f', 'e', 'd', 'c', 'b', 'a')) == 3\nassert     count_first_elements(('f', 'g', 'h', 'i', 'j', 'k')) == 0\nassert     count_first_elements(('d', 'b', 'e', 'c', 'f', 'g')) == 4\nassert     count_first_elements(('e', 'd', 'c', 'b', 'a', 'f')) == 5\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements((5,8,1)) == 1, \"test 1 failed\"\nassert     count_first_elements((8,2,1)) == 1, \"test 2 failed\"\nassert     count_first_elements((2,7,8,1)) == 2, \"test 3 failed\"\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_num_decagonal(1) == 1\n    is_num_decagonal(2) == 10\n    is_num_decagonal(5) == 15\n    is_num_decagonal(9) == 36\n    is_num_decagonal(10) == 55\n    is_num_decagonal(20) == 70\n    is_num_decagonal(50) == 985\n\ndef decagonal_sum(n):\n    '''\n    Write a function to find the sum of all the decagonals less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 2\nassert     is_num_decagonal(3) == 3\nassert     is_num_decagonal(4) == 5\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    n = 6\n    num = is_num_decagonal(n)\n    print(num)"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 10\nassert     is_num_decagonal(3) == 121\nassert     is_num_decagonal(4) == 1440\nassert     is_num_decagonal(5) == 15120\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_num_decagonal(1) == 1 \nassert is_num_decagonal(3) == 28\nassert is_num_decagonal(5) == 76\nassert is_num_decagonal(7) == 888\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 5\nassert     is_num_decagonal(4) == 8\nassert     is_num_decagonal(5) == 15\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"All done\""
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 10\nassert is_num_decagonal(3) == 33\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sequential_search([1, 2, 5, 8], 5) == (True, 1), \"Should find 1\"\nassert     sequential_search([1, 2, 5, 8], 8) == (True, 4), \"Should find 4\"\nassert     sequential_search([1, 2, 5, 8], 9) == (False, -1), \"Should not find 9\"\nassert     sequential_search([], 5) == (False, -1), \"Empty list\"\nassert     sequential_search([1, 2, 5, 8], 0) == (False, -1), \"Item not found\"\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([1,2,3], 2) == (True, 1)\nassert     sequential_search([1,2,3], 1) == (True, 0)\nassert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([1,2,3], -1) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsequential_search(['a','c','f','g'], 'c') == (True, 2)\nassert \nsequential_search(['a','c','f','g'], 'b') == (False, -1)\nassert \nsequential_search([], 'h') == (False, -1)\nassert \nsequential_search(['a','c','f','g'], 'z') == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert sequential_search([1,2,4,6,8,9],1) == (True,0)\nassert sequential_search([1,2,4,6,8,9],10) == (False,4)\nassert sequential_search([1,2,4,6,8,9],4) == (True,3)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)\n    sequential_search([1, 2, 3, 4, 5], 0) == (False, None)\n    sequential_search([1, 2, 3, 4, 5], -1) == (False, None)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequential_search(['a', 'b', 'c', 'd'], 'b') == (True, 1)\nassert     sequential_search(['a', 'b', 'c', 'd'],'m') == (False, -1)\nassert     sequential_search([],'m') == (False, -1)\nassert     sequential_search([], 'a') == (False, -1)\nassert     sequential_search(['a', 'b', 'c', 'd'], 'c') == (True, 2)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"Correct:\", sequential_search([1, 3, 4, 5], 1) == (True, 0))\nprint(\"Correct:\", sequential_search([1, 3, 4, 5], 3) == (True, 2))\nprint(\"Correct:\", sequential_search([1, 3, 4, 5], 4) == (True, 3))\nprint(\"Correct:\", sequential_search([1, 3, 4, 5], 5) == (True, 4))\nprint(\"Correct:\", sequential_search([1, 3, 4, 5], 6) == (False, -1))\n\nassert sequential_search([], 1) == (False, -1)\nassert sequential_search([], 1) == (False, -1)\nassert sequential_search([], 1) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)\nassert     sequential_search([], 4) == (False, -1)\nassert     sequential_search([3, 4, 5], 3) == (True, 0)\nassert     sequential_search([2, 3, 4], 5) == (True, 2)\nassert     sequential_search([2, 4, 6], 8) == (True, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_unique([1,2,3,3,3,4,5,6]) == True, \"Should return True\"\nassert     all_unique([1,2,3,4,5,6]) == False, \"Should return False\"\nassert     all_unique([\"A\",\"B\",\"C\"]) == False, \"Should return False\"\nassert     all_unique([]) == True, \"Should return True\"\nassert     all_unique([]) == False, \"Should return False\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not all_unique([1,2,3,4])\nassert all_unique([1,2,3,4,5])\nassert not all_unique([1,2,3,4,5,6,7])\nassert all_unique([1,2,3,4,5])\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique([1,2,3,4]) == True\nassert     all_unique([1,2,3,4,5]) == False\nassert     all_unique([1,1,2,2]) == False\nassert     all_unique([1,2,1,2]) == False\nassert     all_unique([1]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([1,1,2]) == False, 'Should return False'\nassert     all_unique([1,2,1]) == True, 'Should return True'\nassert     all_unique([1,1,1,1]) == True, 'Should return True'\nassert     all_unique([1]) == True, 'Should return True'\nassert     all_unique([]) == True, 'Should return True'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([2,3,4,4,3,5,7,8]) == True, \"wrong output\"\nassert     all_unique([2,3,4,4,5,5,6,7,8]) == True, \"wrong output\"\nassert     all_unique([2,2,3,4,4,4,4,5,5,5]) == False, \"wrong output\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_unique([1, 2, 2, 3]) == True, \"Wrong\"\nassert     all_unique([1, 2, 2, 2]) == False, \"Wrong\"\nassert     all_unique([]) == True, \"Wrong\"\nassert     all_unique(['a', 'b', 'c']) == False, \"Wrong\"\nassert     all_unique(['a']) == True, \"Wrong\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique([1,1,2,2,3]) == True\nassert     all_unique([1,1,2,2]) == False\nassert     all_unique([1,1,2]) == True\nassert     all_unique([1,1]) == True\nassert     all_unique([\"hello\",\"world\",\"hello\"]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([1,2,3,4,5]) == False\nassert     all_unique([1,2,3,4,5]) == True\nassert     all_unique([1,2,3]) == False\nassert     all_unique([1,2,3]) == True\nassert     all_unique([1,2,3,4,5,6]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique(['c','a','b','d','e','a','b','e','d','c']) == True, \"All Unique elements!\"\nassert     all_unique(['a','c','b','d','e']) == False, \"Not All Unique elements!\"\nassert     all_unique(['c','a','b','d','e','a','b','e','d','c','a']) == False, \"Duplicate elements!\"\nassert     all_unique(['c','a','b','d','e','a','b','e','d','c','a','b']) == False, \"No elements!\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef dot_product(v1,v2):\n    '''\n    Write a function to compute dot product of two vectors.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sub_list([1,2,3], [-1,2,3]) == [-1,-1,2], \"sub_list error\"\nassert     sub_list([1,-2,3], [-1,2,3]) == [-1,-1,2], \"sub_list error\"\n\ndef do_math(x, y, f):\n    '''\n    Given two ints, perform math on them and return the result.\n    '''\n    return f(x,y)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sub_list([1,2],[3,4]) == [-1,-2], \"Wrong Answer\"\n\nprint(\"Passed!\")\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sub_list([1,2,3,4],[0,1,2,3]) == [1,3,3,3], \"Wrong result\"\nassert     sub_list([-1,-2,-3,-4],[1,2,3,4]) == [-2,-3,-3,-4], \"Wrong result\"\nassert     sub_list([-1,-2,-3,-4],[1,2,3,4]) == [-2,-3,-3,-4], \"Wrong result\"\nassert     sub_list([-1,-2,-3,-4],[-1,-2,-3,-4]) == [-1,-2,-3,-4], \"Wrong result\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef dot(a,b):\n    '''\n    Given two lists, compute the dot product of these lists.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    sub_list([], []) == []\n    sub_list([1,2,3], []) == []\n    sub_list([1,2,3], [1]) == [2,3,3]\n    sub_list([1,2,3], [1,1,2]) == [1,3,2]\n    sub_list([1,2,3], [1,1,3]) == [1,2,2]\n    sub_list([1,2,3], [1,2,2]) == [1,2,1]\n    sub_list([1,2,3], [1,2,3,4]) == [1,2,1,4]\n    sub_list([1,2,3,4], [1,2,3]) == [1,2,4,4]\n    sub_list([1,2,3,4], [1,2,3,4,5]) == [1,2,4,5,5]\n    sub_list([1,2,3,4,5], [1,2,3,4,5,6]) == [1,2,4,5,6,6]\n    sub_list([1,2,3,4,5,6], [1,2,3,4,5,6,7]) == [1,2,4,5,6,7,7]\n    sub_list([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]) == [1,2,4,5,6,7,8,8]\n    sub_list([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9]) == [1,2,4,5,6,7,8,9,9]\n    sub_list([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]) == [1,2,4,5,6,7,8,9,10,10]\n    sub_list([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11]) == [1,2,4,5,6,7,8,9,10,11,11]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,4,5,6,7,8,9,10,11,12,12]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12], [1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,2,4,5,6,7,8,9,10,11,12,13,13]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13], [1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,14]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,15]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,16]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,18]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,19]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,20]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,21]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,22]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,23]\n    sub_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23], [1,2,3,4,5,6,7,8,9,10,11,1"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sub_list([1,2,3,4],[3,2,1]) == [-2,-1,-1,-2], \\\n        print('Error in sub_list')\n\ndef remove_element(nums1, nums2):\n    '''\n    Write a function to remove all elements of a list from another list.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nvalidate(12345) == True\nassert validate(10101) == False\nassert validate(4567) == True\nassert validate(456789) == True\nassert validate(1784) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    validate(71) == True \n    validate(7) == False\n    validate(91) == True\n    validate(100) == False\n    validate(100100) == False\n    validate(11) == True\n    validate(13) == False\n    validate(14) == False\n    validate(15) == False\n    validate(100100100) == False\n    validate(111111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(111) == True\n    validate(11) == True\n    validate(1) == True\n    validate(0) == True\n    validate(-1) == True\n    validate(-10) == True\n    validate(-100) == True\n    validate(-100) == True\n    validate(-100000) == True\n    validate(-1) == True\n    validate(0) == True\n    validate(1) == True\n    validate(10) == True\n    validate(100) == True\n    validate(100) == True\n    validate(101) == False\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(111) == True\n    validate(11) == True\n    validate(1) == True\n    validate(0) == True\n    validate(-1) == True\n    validate(-10) == True\n    validate(-100) == True\n    validate(-100000) == True\n    validate(-1) == True\n    validate(0) == True\n    validate(1) == True\n    validate(10) == True\n    validate(100) == True\n    validate(100) == True\n    validate(101) == False\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(111) == True\n    validate(11) == True\n    validate(1) == True\n    validate(0) == True\n    validate(-1) == True\n    validate(-10) == True\n    validate(-100) == True\n    validate(-100000) == True\n    validate(-1) == True\n    validate(0) == True\n    validate(1) == True\n    validate(10) == True\n    validate(100) == True\n    validate(100) == True\n    validate(101) == False\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(111) == True\n    validate(11) == True\n    validate(1) == True\n    validate(0) == True\n    validate(-1) == True\n    validate(-10) == True\n    validate(-100) == True\n    validate(-100000) == True\n    validate(-1) == True\n    validate(0) == True\n    validate(1) == True\n    validate(10) == True\n    validate(100) == True\n    validate(100) == True\n    validate(101) == False\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(111) == True\n    validate(11) == True\n    validate(1) == True\n    validate(0) == True\n    validate(-1) == True\n    validate(-10) == True\n    validate(-100) == True\n    validate(-100000) == True\n    validate(-1) == True\n    validate(0) == True\n    validate(1) == True\n    validate(10) == True\n    validate(100) == True\n    validate(100) == True\n    validate(101) == False\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(111) == True\n    validate(11) == True\n    validate(1) == True\n    validate(0) == True\n    validate(-1) == True\n    validate(-10) == True\n    validate(-100) == True\n    validate(-100000) == True\n    validate(-1) == True\n    validate(0) == True\n    validate(1) == True\n    validate(10) == True\n    validate(100) == True\n    validate(100) == True\n    validate(101) == False\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n    validate(111) == True\n    validate(111111) == True\n    validate(1111) == True\n    validate(111) == True\n    validate(11) == True\n    validate(1) == True\n    validate(0) == True\n    validate(-1) == True\n    validate(-10) == True\n    validate(-100) == True\n    validate(-100000) == True\n    validate(-1) == True\n    validate(0) == True\n    validate(1) == True\n    validate(10) == True\n    validate(100) == True\n    validate(100) == True\n    validate(101) == False\n    validate(11) == True\n    validate(11) == True\n    validate(11) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nvalidate(8125) == True\nvalidate(12345) == True\nvalidate(3443) == True\nvalidate(10) == False\nvalidate(8) == True"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef balanced(s): \n    '''\n    Write a python function takes in a string and check whether it is balanced or not.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nvalidate(123)\nvalidate(11)\nvalidate(12)\nvalidate(88)\nvalidate(99)\nvalidate(4)"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert validate(113) == True\nassert validate(91) == False\nassert validate(11) == False\nassert validate(22) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     validate(1) == False, \"First case should be False\"\nassert     validate(2) == True, \"Second case should be True\"\nassert     validate(10) == True, \"Third case should be True\"\nassert     validate(100) == False, \"Fourth case should be False\"\nassert     validate(6) == False, \"Fifth case should be False\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_element([1,2,3,4,5],4) == False\nassert     check_element([1,2,3,4,5],0) == True\nassert     check_element([1,2,3,4,5],1) == True\nassert     check_element([1,2,3,4,5],2) == True\nassert     check_element([1,2,3,4,5],3) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_element([1,2,3,1,2,3], 1) == True, \"check_element(['1', '2', '3', '1', '2', '3'], 1)\"\nassert     check_element([1,2,3,1,2,3], 1) == True, \"check_element(['1', '2', '3', '1', '2', '3'], 1)\"\nassert     check_element([1,2,3,1,2,3], '2') == True, \"check_element(['1', '2', '3', '1', '2', '3'], '2')\"\nassert     check_element([1,2,3,1,2,3], 3) == True, \"check_element(['1', '2', '3', '1', '2', '3'], 3)\"\nassert     check_element([1,2,3,1,2,3], 10) == False, \"check_element(['1', '2', '3', '1', '2', '3'], 10)\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_element([1,2,3],3) == True, 'Wrong Output'\nassert     check_element([2,2,3],3) == True, 'Wrong Output'\nassert     check_element([2,3,3],3) == False, 'Wrong Output'\nassert     check_element([],3) == False, 'Wrong Output'\n\ndef print_odd(numbers):\n    '''\n    Write a function that takes in a list and prints every item that is an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    check_element([1, 2, 3, 1], 1) == True\n    check_element([1, 2, 3, 1], 5) == False\n    check_element([1, 1, 1, 5], 5) == False\n    check_element([5, 5, 5, 5], 5) == True\n    check_element([], 5) == False\n    check_element([1], 1) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_element([1,2,3,4,5],5) == True\nassert     check_element([1,2,3,4,5],1) == False\nassert     check_element([],1) == False\nassert     check_element([1,2,3,4],4) == True\n\ndef check_each_element(list):\n    '''\n    Write a function that takes in a list and returns a string that contains each item in the list, in the same order.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_element([1,2,3,4], 1) == True, \"Expected True\"\nassert     check_element([1,2,3,4], 5) == False, \"Expected False\"\nassert     check_element([1,2,3,4], 4) == True, \"Expected True\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_element([1,1,1],1) == True\nassert     check_element([1,1,1],2) == False\nassert     check_element(['1','1','1'],1) == True\nassert     check_element(['1','1','1'],2) == False\nassert     check_element(['1','1','1'],'1') == True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_element([1,2,3,4],3) == True, \" Wrong input\"\nassert     check_element([1,2,3,4],2) == False, \" Wrong input\"\nassert     check_element([],1) == False, \" Empty list\"\nassert     check_element([1],1) == False, \" Wrong input\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_element(my_list,5) == True, \"Your implementation does not work as expected.\"\nassert     check_element(my_list,10) == False, \"Your implementation does not work as expected.\"\nassert     check_element(my_list,20) == True, \"Your implementation does not work as expected.\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_element(['a',1,'b',3,2],'b')\nassert not check_element(['a',1,'b',3,2],'c')\nassert     check_element(['a',1,'b',3,2],'b')"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three('a') == True\nassert     text_match_two_three('aab') == False\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('abb') == True\nassert     text_match_two_three('bb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three('abc')== True\nassert     text_match_two_three('acb')== False\nassert     text_match_two_three('abc')== True\nassert     text_match_two_three('abcdef')== False\nassert     text_match_two_three('abcbabc')== True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three('abbb') == True\nassert     text_match_two_three('bbbb') == False\nassert     text_match_two_three('cacacac') == False\nassert     text_match_two_three('aaaab') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('abaaabab') == True\nassert     text_match_two_three('abaaaabab') == True\nassert     text_match_two_three('aabaabab') == True\nassert     text_match_two_three('abaabaab') == False\n\ndef text_match_two_three_new(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    for i in text:\n        if i == 'a':\n            count += 1\n    if count == 2 or count == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three(\"aaabbbbbbb\") == \"aaabbbbbbb\"\nassert     text_match_two_three(\"aaaaaabbbbbbbbbb\") == \"aaabbbbbbbbb\"\nassert     text_match_two_three(\"aaaaaabbbbbbbbbb\") == \"aaabbbbbbbbb\"\nassert     text_match_two_three(\"aaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('abc') == True, \"incorrect return value\"\nassert     text_match_two_three('abc') == True, \"incorrect return value\"\nassert     text_match_two_three('abc') == True, \"incorrect return value\"\nassert     text_match_two_three('abc') == True, \"incorrect return value\"\nassert     text_match_two_three('abc') == True, \"incorrect return value\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('ababbb') == True\nassert     text_match_two_three('abbbb') == True\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert text_match_two_three('') is True\nassert text_match_two_three('bb') is False\nassert text_match_two_three('bbbb') is True\nassert text_match_two_three('bbbbb') is True\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3, 1, 5], 5, 2) == 9\nassert max_sub_array_sum_repeated([2, 2, -1, -2, -4], 4, 2) == 6\nassert max_sub_array_sum_repeated([1, 2, 3, 5], 2, 2) == 8\nassert max_sub_array_sum_repeated([-1, -2, 3, -4], 2, 2) == 4\nassert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 5, 2) == -1\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nmax_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 6, 2) == 6\nmax_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 6, 3) == 9\nmax_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 6, 4) == 10\n\n\"\"\"\nfrom math import inf\ndef max_sub_array_sum_repeated(a, n):\n    if n == 0:\n        return 0\n    max_sum = -inf\n    max_index = 0\n    for i in range(1, n):\n        cur_sum = a[i-1] + a[i]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            max_index = i\n    return max_sum\n\nassert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 6) == 6\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 2)) == 7\nassert \nprint(max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 3)) == 12\nassert \nprint(max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 4)) == 6\nassert \nprint(max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 5)) == 4\nassert \nprint(max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 6)) == 4\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum_repeated([], 0, 0) == 0, 'Empty Array'\nassert     max_sub_array_sum_repeated([0], 1, 1) == 0, 'Single Element Array'\nassert     max_sub_array_sum_repeated([1, 3, 5, 7], 2, 1) == 14, 'Repeated Array'\nassert     max_sub_array_sum_repeated([3, 2, -2, 5, -4], 3, 2) == 15, 'Repeated Array'\nassert     max_sub_array_sum_repeated([5, 7, -1, -2, 3], 1, 3) == 14, 'Repeated Array'\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3, 4], 3, 3) == 10, 'Should be 10'\nassert     max_sub_array_sum_repeated([2, 3, 4, 5], 3, 3) == 10, 'Should be 10'\nassert     max_sub_array_sum_repeated([4, 5, 6, 7, 8], 3, 3) == 15, 'Should be 15'\nassert     max_sub_array_sum_repeated([1, 1, 1, 1, 1], 2, 3) == 10, 'Should be 10'\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 3, 3) == 12, 'Should be 12'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_Sum(2) == 4\nassert square_Sum(3) == 9\nassert square_Sum(4) == 28\nassert square_Sum(5) == 63\nassert square_Sum(6) == 144\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_Sum(3) == 3*2*1\nassert square_Sum(2) == 1*4\nassert square_Sum(5) == 1*4*1*2\n\n'''\n    Write a python function takes in an integer n and returns the sum of squares of first n odd natural numbers.\n'''\ndef square_Sum2(n):\n  pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nn = 5\nsquare_Sum(n) == sum([x**2 for x in range(n) if x%2 == 0])\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(square_Sum(10))\n    print(square_Sum(9))\n    print(square_Sum(0))\n    print(square_Sum(1))\n    print(square_Sum(8))\n    print(square_Sum(15))"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_Sum(5) == 55\nassert     square_Sum(0) == 0\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert square_Sum(3) == 9\nassert square_Sum(4) == 32\nassert square_Sum(8) == 5040\nassert square_Sum(9) == 12663\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_Sum(1) == 0\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 4\nassert     square_Sum(4) == 10\nassert     square_Sum(5) == 22\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint square_Sum(3) == 10, \"Wrong answer!\"\nprint square_Sum(2) == 9, \"Wrong answer!\"\nprint square_Sum(1) == 1, \"Wrong answer!\"\nprint square_Sum(0) == 0, \"Wrong answer!\"\n\nprint square_Sum.__doc__\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nTwo lists of integers are given. Find the sum of max length of all lists.\n\nInput:\n\nA = [[1,2,5],[1,3,7],[2,2,7]]\nB = [[1,2,4],[2,5,9],[1,1,2]]\n\nOutput:\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3, \"max_length = 3\"\nassert     max_length([[1, 2, 3], [], [4, 5, 6]]) == 2, \"max_length = 2\"\nassert     max_length([[1, 2, 3], [4, 5, 6]]) == 2, \"max_length = 2\"\nassert     max_length([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == 3, \"max_length = 3\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length([[1,2,3],[1,2,3],[1,2,3]]) == 3, \"Function should return the length of the longest list in the input list\"\nassert max_length([[1,2,3],[1,2,3],[1,2,3]]) == 3, \"Function should return the length of the longest list in the input list\"\nassert max_length([[1],[2],[3]]) == 1, \"Function should return the length of the longest list in the input list\"\nassert max_length([[]]) == 0, \"Function should return the length of the longest list in the input list\"\nassert max_length([]) == 0, \"Function should return the length of the longest list in the input list\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #length = 0\n    #max_length = list1[0]\n    #for i in range(len(list1)):\n    #    if len(list1[i]) > length:\n    #        max_length = list1[i]\n    #        length = len(list1[i])\n    #return max_length\n\n    # modified\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n\nassert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3, 'test 1 failed'\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length([]) == 0, 'Empty list: should be 0'\nassert     max_length([[]]) == 0, 'Empty list: should be 0'\nassert     max_length([[], []]) == 0, 'Empty list: should be 0'\nassert     max_length([[1], []]) == 1, 'List of 1: should be 1'\nassert     max_length([[1], [1]]) == 1, 'List of 1: should be 1'\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length([[1,3],[2,4]]) == 2\nassert     max_length([[5,4],[3,1]]) == 3\nassert     max_length([[1,1],[1,1],[1,1]]) == 1\nassert     max_length([[1,1,1,1],[1,1,1,1]]) == 1\nassert     max_length([[1],[1]]) == 1\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmax_length([[1,2],2,3,1,2,3,1,2,3]) == 5\nassert \nmax_length([[1,2],2,3,1,2,3,1,2,3,1,2,3,1,2,3]) == 6\nassert \nmax_length([[1,2,3],2,3,1,2,3,1,2,3]) == 4\nassert \nmax_length([[1,2,3],2,3,1,2,3,1,2,3,1,2,3,1,2,3]) == 6\nassert \nmax_length([[1,2,3],[2,3,4,5,6],2,3,1,2,3,1,2,3,1,2,3]) == 6\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length([['a','b'],['c','d'],['e','f']]) == ['e','f'], \"Failed\"\nassert     max_length([['a','b','c','d'],['e','f'],['g','h','i','j']]) == ['e','f'], \"Failed\"\nassert     max_length([['a','b','c'],['d','e','f'],['g','h','i']]) == ['e','f'], \"Failed\"\nassert     max_length([['a','b','c'],['d','e','f'],['g','h']]) == ['g','h'], \"Failed\"\nassert     max_length([['a','b','c','d'],['e','f'],['g','h','i']]) == ['e','f'], \"Failed\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length([[]]) == 0\nassert     max_length([]) == 0\nassert     max_length([[1]]) == 1\nassert     max_length([[1, 2], [3]]) == 2\nassert     max_length([[1, 2], [3, 4]]) == 2\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length([[1,2,3,4,5],[2,3,4,5,6],\n                   [3,4,5,6,7]]) == 6, \"This is correct\"\nassert     max_length([[1,2,3,4,5],[2,3,4,5,6],\n                   [3,4,5,6,7]]) == 5, \"This is correct\"\nassert     max_length([[1,2,3,4,5],[2,3,4,5,6]]) == 4, \"This is correct\"\nassert     max_length([]) == 0, \"This is correct\"\nassert     max_length([[1,2],[3,4],[5,6]]) == 3, \"This is correct\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_no_of_ways(3, 3) == 1, \"correct count_no_of_ways(n, k) is : {}\".format(count_no_of_ways(3, 3))\nassert     count_no_of_ways(3, 4) == 2, \"correct count_no_of_ways(n, k) is : {}\".format(count_no_of_ways(3, 4))\nassert     count_no_of_ways(3, 5) == 3, \"correct count_no_of_ways(n, k) is : {}\".format(count_no_of_ways(3, 5))\nassert     count_no_of_ways(5, 5) == 5, \"correct count_no_of_ways(n, k) is : {}\".format(count_no_of_ways(5, 5))\nassert     count_no_of_ways(5, 6) == 7, \"correct count_no_of_ways(n, k) is : {}\".format(count_no_of_ways(5, 6))\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_no_of_ways(3, 4) == 3\nassert     count_no_of_ways(6, 5) == 7\nassert     count_no_of_ways(4, 3) == 4\nassert     count_no_of_ways(3, 4) == 3\nassert     count_no_of_ways(6, 5) == 7\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_no_of_ways(4, 3) == 1\nassert     count_no_of_ways(2, 3) == 1\nassert     count_no_of_ways(2, 1) == 2\nassert     count_no_of_ways(2, 2) == 2\nassert     count_no_of_ways(3, 1) == 3\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_no_of_ways(2, 2) == 1\nassert \ncount_no_of_ways(2, 3) == 2\nassert \ncount_no_of_ways(2, 4) == 4\nassert count_no_of_ways(2, 5) == 5\nassert \ncount_no_of_ways(2, 6) == 8\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_no_of_ways(5, 3) == 2\nassert count_no_of_ways(3, 3) == 2\nassert count_no_of_ways(4, 2) == 1\nassert count_no_of_ways(5, 5) == 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_one_two_ways(n, k): \n    '''\n    Write a function to paint the fence in such a way that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_no_of_ways(4, 2) == 5\nassert count_no_of_ways(3, 2) == 4\nassert count_no_of_ways(2, 2) == 3\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find(2,2) == 2\nassert     find(3,3) == 0\nassert     find(4,4) == 1\n\ndef divide(num, divisor):\n    '''\n    Write a python function to divide two numbers (rounded down to the nearest integer).\n    '''\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind(10,10)\nfind(10,11)\nfind(10.01,10.01)\nfind(10.01,10.00)\nfind(10.00,10.01)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(3,4)==0\nassert     find(3,3)==0\nassert     find(4,5)==1\nassert     find(6,7)==2\nassert     find(10,11)==1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find(3,4) == 0\nassert     find(4,3) == 1\nassert     find(5,6) == 1\nassert     find(1,1) == 0\nassert     find(1,3) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find(5,7) == 2\n    find(9,4) == 2\n    find(6,7) == 3\n    find(-4,3) == -2\n    find(0,0) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(3,8) == 0\nassert     find(10,6) == 2\nassert     find(10,5) == 2\nassert     find(-4,4) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"The output of find is:\")\nprint(find(2,3))\nprint(find(2.5, 3.5))\nprint(find(4.5, 5.5))\nprint(find(7.5, 8.5))\nprint(find(1.5, 1.5))\nprint(find(6.5, 6.5))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(1, 1) == 1\nassert otherside_rightangle(1, 2) == 1.5\nassert otherside_rightangle(1, 3) == 1.666666666666667\nassert otherside_rightangle(1, 4) == 1.25\nassert otherside_rightangle(1, 5) == 1.125\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     otherside_rightangle(2,3) == 4\nassert     otherside_rightangle(1,3) == 2\nassert     otherside_rightangle(4,3) == 2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(1, 1) == 1\nassert     otherside_rightangle(3, 4) == 1.7320508075688772\nassert     otherside_rightangle(5, 3) == 4\nassert     otherside_rightangle(9, 8) == 6.283185307179586\nassert     otherside_rightangle(10, 7) == 5.635544807756488\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(1,1) == 1.0\nassert     otherside_rightangle(1,2) == 0.5\nassert     otherside_rightangle(2,1) == 0.5\nassert     otherside_rightangle(2,2) == 1.0\nassert     otherside_rightangle(3,2) == math.sqrt(2.0)/2.0\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(2,4) == 2, 'incorrect'\nassert     otherside_rightangle(3,5) == 2, 'incorrect'\nassert     otherside_rightangle(5,2) == 2, 'incorrect'\nassert     otherside_rightangle(9,3) == 1, 'incorrect'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     otherside_rightangle(3,4) == 3.60\nassert     otherside_rightangle(4,3) == 4.60\nassert     otherside_rightangle(5,4) == 5.34\nassert     otherside_rightangle(3,5) == 3.80\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(w=1,h=2) == 1.0\nassert otherside_rightangle(w=1,h=3) == 1.5\nassert otherside_rightangle(w=1,h=4) == 1.8\nassert otherside_rightangle(w=1,h=5) == 2.2\nassert otherside_rightangle(w=1,h=6) == 2.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(4,3) == 5\nassert     otherside_rightangle(7,4) == 10\nassert     otherside_rightangle(8,6) == 12\nassert     otherside_rightangle(9,5) == 15\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     otherside_rightangle(2,4) == 1.4142135623730951\nassert otherside_rightangle(2,3) == 1.5\nassert otherside_rightangle(1,2) == 2.0\nassert otherside_rightangle(1,1) == 1.0\nassert otherside_rightangle(3,4) == 0.0\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert (max_val([1, 3, 5]) == 5), 'wrong answer'\nassert (max_val([1, 3, 5, 3, 1, 2, 3]) == 5), 'wrong answer'\nassert (max_val([3, 1, 5, 3, 1, 2, 3, 3]) == 5), 'wrong answer'\nassert (max_val([[1, 3, 5], 5, 3, 1, 2, 3]) == 5), 'wrong answer'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_val([]) == None, \"should be None\"\nassert     max_val([0]) == 0, \"should be 0\"\nassert     max_val([1, 2]) == 2, \"should be 2\"\nassert     max_val([1, -2]) == 1, \"should be 1\"\nassert     max_val([1, \"a\"]) == \"a\", \"should be 1\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_val([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_val([1,2,3,4,5,6,7,8,9,0]) == 9\nassert     max_val([1,2,3,4,5,6,7,8,9,0,1]) == 9\nassert     max_val([1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]) == 9\nassert     max_val([1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]) == 9\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_val([4,6,2,1,9,6,7]) == 9, \"Wrong output\"\nassert max_val([1,5,6,7,3,8,7,3,5,2,5,7,4]) == 14, \"Wrong output\"\nassert max_val([5,1,4,3]) == 4, \"Wrong output\"\nprint(\"PASSED ALL TEST CASES!\")"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_val([10, 20, 30, 50, -90, -10]) == 10\nassert     max_val([10, 20, 30, 50, -90, -10, -20]) == 50\nassert     max_val([10, 20, 30, 50, -90, -10, -20, -30]) == 50\nassert     max_val([]) == None\nassert     max_val([-90, -10, -20]) == -10\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_val([1, 3, 2, 4, 5]) == 5\nassert     max_val([2, 9, 2, 4, 9, 3]) == 9\nassert     max_val([3, 4, 5, 6, 7]) == 7\nassert     max_val([6, 4, 5, 6, 7]) == 7\nassert     max_val([9, 2, 3, 4, 5]) == 9\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_val([10, 20, None, None, 30, 20, None, 40, None, None]) == 40\nassert max_val([10, 20, None, None, 30, 20, None, 40, None, None]) == 40\nassert max_val([10, 20, 20, None, 30, 20, 20, 40, None, None]) == 30\nassert max_val([10, 20, None, None, 30, 20, None, 40, None, None]) == 30\nassert max_val([10, 20, 20, None, 30, None, None, 40, None, None]) == 40\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_val([2, 3, 4]) == 4\nassert     max_val([6, 9, 7]) == 9\nassert     max_val([-6, -3, -9]) == -3\nassert     max_val([1, 2, 3, 4, 5]) == 5\nassert     max_val([1, 2, 3, 4, 5, 1]) == 5\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_div(1) == 0\nassert     sum_div(10) == 2\nassert     sum_div(100) == 23\nassert     sum_div(1000) == 2436\nassert     sum_div(10000) == 128225\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_div(10) == 2 + 3 + 5 + 10 / 2 == 7\nassert     sum_div(12) == 2 + 3 + 6 + 12 / 2 == 8\nassert     sum_div(0) == 2 + 3 + 5 + 10 / 2 == 7\nassert     sum_div(-10) == 2 + 3 + 5 + 10 / 2 == 7\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_div(100) == 40, 'incorrect sum_div'\nassert     sum_div(7) == 7, 'incorrect sum_div'\nassert     sum_div(3) == 3, 'incorrect sum_div'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_div(4) == 4\nassert     sum_div(10) == 10\nassert     sum_div(13) == 13\nassert     sum_div(0) == 0\nassert     sum_div(15) == 1\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_div(number):\n    '''\n    Write a function to return the number of divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_div(5) == 1 + 2 + 3 + 5\nsum_div(7) == 1 + 7\nsum_div(3) == 1 + 3\nsum_div(10) == 1 + 2 + 5\nsum_div(20) == 1 + 2 + 4 + 5 + 10\n\ndef sum_div_pyth(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n\ndef sum_div_pyth(number):\n    if number == 1:\n        return 1\n    else:\n        return 1 + sum_div_pyth(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_div(1) == 1\nassert     sum_div(2) == 3\nassert     sum_div(10) == 33\nassert     sum_div(12) == 55\nassert     sum_div(6) == 4\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_div(5) == 1 + 1 + 1 + 5, \"sum_div(5) == 1 + 1 + 1 + 5\"\nassert     sum_div(12) == 1 + 1 + 2 + 3 + 4 + 6 + 12, \"sum_div(12) == 1 + 1 + 2 + 3 + 4 + 6 + 12\"\nassert     sum_div(8) == 1 + 1 + 2 + 8, \"sum_div(8) == 1 + 1 + 2 + 8\"\n\ndef sum_div_unchecked(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    The list of divisors of a number should not be counted.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert get_Inv_Count([0,0,2]) == 1\nassert get_Inv_Count([3,4,5,1]) == 5\nassert get_Inv_Count([4,3,2,1]) == 1"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([1,3,5,2,4]) == 3, \"1 4 2 5 3\"\nassert     get_Inv_Count([1,2,3,4,5]) == 0, \"1 2 3 4 5\"\nassert     get_Inv_Count([1,2,3]) == 0, \"1 2 3\"\nassert     get_Inv_Count([1,2,3,4,5,6]) == 5, \"1 2 3 4 5 6\"\nassert     get_Inv_Count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 0, \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([1, 2, 3, 4, 5]) == 5\nassert     get_Inv_Count([1, 5, 4, 3, 2]) == 5\nassert     get_Inv_Count([1, 1, 1, 1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 5\n    arr = list(range(1,n+1))\n    print(\"Original Array: \", arr)\n\n    inversions = get_Inv_Count(arr)\n    print(\"Inversions Count: \", inversions)"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    get_Inv_Count([1,2,3]) == 0\n    get_Inv_Count([1,3,2]) == 1\n    get_Inv_Count([1,1,1]) == 2\n    get_Inv_Count([2,3,1,2,1]) == 5\n    get_Inv_Count([2,1,3,1,5,4,6,7]) == 2\n    get_Inv_Count([1,3,2,6,7,4]) == 3\n    get_Inv_Count([1,3,2,6,7,4,5,8,9]) == 2\n    get_Inv_Count([1,3,2,6,7,4,5,8,9,10]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([1,2,2,3]) == 3\nassert     get_Inv_Count([2,1,1]) == 1\nassert     get_Inv_Count([1,1,1,1]) == 0\nassert     get_Inv_Count([2,2,2]) == 0\nassert     get_Inv_Count([1,1,1,1,1,1,1,1]) == 5\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Inv_Count([1,2,3]) == 0\nassert get_Inv_Count([3,2,1]) == 3\nassert get_Inv_Count([2,1,3]) == 3\nassert get_Inv_Count([1,2,3,4,5]) == 4\nassert get_Inv_Count([1,2,3,4,5,6]) == 4\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Inv_Count([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     get_Inv_Count([1,2,3,4,5,6,7,8,9]) == 0\nassert     get_Inv_Count([1,2,3,4,5]) == 0\nassert     get_Inv_Count([1,2,3,4]) == 0\nassert     get_Inv_Count([1,2,3,4,1,2,3,4]) == 2\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([5,4,3,2,1]) == 0, \"Test Failed\"\nassert     get_Inv_Count([1,5,4,3,2]) == 3, \"Test Failed\"\nassert     get_Inv_Count([1,5,4,3,2,3,4,5,6]) == 6, \"Test Failed\"\nassert     get_Inv_Count([6,5,4,3,2,1]) == 3, \"Test Failed\"\nassert     get_Inv_Count([7,3,4,5,6,2,1,8,9,10,11,12,13,14,15,16]) == 31, \"Test Failed\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flatten_list([\n    [\n        1,\n        [\n            [1, 2, 3, 4],\n            [1, 2, 3],\n            4,\n        ],\n    ],\n    [\n        [\n            1,\n            [1, 2, 3],\n            4,\n        ],\n        [\n            1,\n            [1, 2, 3],\n            4,\n        ],\n    ],\n    [\n        [\n            1,\n            [1, 2, 3],\n            4,\n        ],\n    ],\n]) == \\\n    [\n        1,\n        [\n            1,\n            2,\n            3,\n            4,\n        ],\n        1,\n        2,\n        3,\n        4,\n    ]\n\n\nclass Node:\n    '''\n    Write a class to represent a node in a BST. Your class should have the\n    following attributes and methods:\n    \n    data: The value stored in the node\n    left: The left child of the node\n    right: The right child of the node\n    insert: Inserts a new node with data into the tree\n    find: Returns the node with the corresponding data\n    preorder: Traverse the tree in preorder\n    inorder: Traverse the tree in inorder\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    flatten_list([1,2,[3,4]]) == [1, 2, 3, 4]\n    flatten_list([1,2,[3,[4,5]],6]) == [1, 2, 3, 4, 5, 6]\n    flatten_list([1,[2,[3,[4,[5,[6,[7,[8]]]]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    flatten_list([1,[2,[3,[4,[5,[6,[7,[8]]]]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    flatten_list([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert flatten_list([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert flatten_list([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert flatten_list([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert flatten_list([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     flatten_list([1,2,3]) == [1,2,3], 'not working'\nassert     flatten_list([2,3,[4,[5,6]]]) == [2,3,4,5,6], 'not working'\nassert     flatten_list([2,3,[4,[5,6],7]]) == [2,3,4,5,6,7], 'not working'\nassert     flatten_list([2,3,[4,5,6,[7,8],9]]) == [2,3,4,5,6,7,8,9], 'not working'\nassert     flatten_list([]) == [], 'not working'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4], \"Wrong\"\nassert     flatten_list([1, 2, 3]) == [1, 2, 3], \"Wrong\"\nassert     flatten_list([[1, 2, 3]]) == [1, 2, 3], \"Wrong\"\nassert     flatten_list([[1], [2], [3]]) == [1, 2, 3], \"Wrong\"\nassert     flatten_list([]) == [], \"Wrong\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     flatten_list([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     flatten_list([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     flatten_list([]) == []\nassert     flatten_list([[1, 2, 3], [], None]) == [1, 2, 3, None]\nassert     flatten_list([1, None, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flatten_list([1,[2,[3,[4,[5]]]]]) == [1,2,3,4,5]\nassert     flatten_list([1,2,3,4,5]) == [1,2,3,4,5]\nassert     flatten_list([[1,2,3,4],[5,6,7]]) == [1,2,3,4,5,6,7]\nassert     flatten_list([[1,2,3,4],[5,6,7],8]) == [1,2,3,4,5,6,7,8]\nassert     flatten_list([[1,2,3,4],[5,6,7],8],flatten = False) == [[1,2,3,4],[5,6,7],8]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     flatten_list([[[[[]]]]]) == [], 'Invalid: return []'\nassert     flatten_list([[[], [[]]]]) == [[]], 'Invalid: return [[]]'\nassert     flatten_list([[], [[], [[]]]]) == [[], []], 'Invalid: return [[]]'\nassert     flatten_list([[], [[], []]]) == [[], []], 'Invalid: return [[]]'\nassert     flatten_list([[[[[]]]]]) == [[[[]]]], 'Invalid: return [[[[]]]]'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     flatten_list([[[1],2],3,[4,5]]) == [1,2,3,4,5]\nassert     flatten_list([1,2,3,4,5]) == [1,2,3,4,5]\nassert     flatten_list([]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not flatten_list([[1], [[2]]])\nassert not flatten_list([[1,2], [[3,4]]])\nassert flatten_list([[1], [[[2]]]]) == [[1], [2]]\nassert flatten_list([[[[[1]]]]]) == [[1]]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert max_aggregate([[100, 200, 300],\n                    [300, 400, 500],\n                    [1000, 2000, 3000]]) == 3000\n\nassert max_aggregate([[100, 200, 300],\n                    [300, 400, 500],\n                    [1000, 2000, 3000]]) == 3000"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_aggregate([('1', '2', '3'), ('4', '5', '6')]) == ('1', '4', '6')\nassert max_aggregate([('1', '2', '3'), ('2', '5', '6')]) == ('2', '5', '6')\nassert max_aggregate([('1', '2', '3'), ('4', '5', '6'), ('3', '5', '6')]) == ('3', '5', '6')\nassert max_aggregate([('1', '2', '3'), ('4', '5', '6'), ('3', '5', '6'), ('2', '5', '6')]) == ('4', '5', '6')\nassert max_aggregate([('1', '2', '3'), ('4', '5', '6'), ('4', '5', '6'), ('2', '5', '6')]) == ('4', '5', '6')\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_aggregate([(1,), (2,), (3,), (4,), (5,), (5,), (5,), (5,), (6,), (6,)]) == 5\nassert     max_aggregate([(1,), (2,), (3,), (4,), (5,), (6,)]) == 6\nassert     max_aggregate([(1,), (2,), (3,), (4,), (5,)]) == 5\nassert     max_aggregate([(1,)]) == 1\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate([(1,2,3),(4,5,6)]) == 6\nassert max_aggregate([(1,2,3),(4,5,6),(3,6,9),(4,5,6)]) == 6\nassert max_aggregate([(1,2,3),(4,5,6),(3,6,9),(1,2,3)]) == 6\nassert max_aggregate([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == 3\n\ndef largest_sequence(lst):\n    '''\n    Write a function to find the largest subsequence in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate([(1,1),(2,1),(3,1)]) == (1,2)\nassert     max_aggregate([(1,2),(2,2),(3,2)]) == (2,2)\nassert     max_aggregate([(1,3),(2,3),(3,3)]) == (3,3)\nassert     max_aggregate([(1,4),(2,4),(3,4)]) == (4,4)\nassert     max_aggregate([(1,5),(2,5),(3,5)]) == (5,5)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef part_2(stdata):\n    '''\n    Write a function that takes as input a list of tuples and returns a single tuple containing the minimum\n    and maximum values of the first and second elements of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([(1, 2, 3), (4, 5, 6), (3, 4, 6)]) == 7\nassert     max_aggregate([(1, 2, 3), (1, 2, 3), (3, 4, 6)]) == 5\nassert     max_aggregate([(1, 2, 3), (4, 5, 6), (1, 2, 3)]) == 7\nassert     max_aggregate([(1, 2, 3), (1, 2, 3), (3, 4, 6)]) == 8\nassert     max_aggregate([(1, 2, 3), (4, 5, 6), (2, 2, 6), (2, 1, 5)]) == 8\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_aggregate([(10, 2), (20, 1), (5, 2), (5, 3)]) == (25, 3)\nassert     max_aggregate([(100, 1), (100, 1), (100, 1), (100, 1)]) == (100, 1)\nassert     max_aggregate([(100, 1), (100, 2), (100, 1), (100, 1)]) == (100, 1)\nassert     max_aggregate([(100, 1), (100, 2), (100, 3), (100, 1)]) == (100, 3)\nassert     max_aggregate([(100, 1), (100, 2), (100, 3), (100, 4)]) == (100, 4)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_aggregate([(\"a\", 1), (\"b\", 4), (\"c\", 6)]) == (\"a\", 6)\nassert     max_aggregate([(\"a\", 1), (\"b\", 4), (\"c\", 6)]) == (\"c\", 6)\nassert     max_aggregate([(\"a\", 1), (\"b\", 4), (\"c\", 6)]) == (\"a\", 4)\nassert     max_aggregate([(\"a\", 1), (\"b\", 4), (\"c\", 6)]) == (\"b\", 4)\nassert     max_aggregate([(\"a\", 1), (\"b\", 4), (\"c\", 6)]) == (\"b\", 4)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_aggregate([(1, 2), (3, 4), (5, 6)]) == 6\nassert     max_aggregate([(1, 2), (3, 4), (5, 6), (1, 6), (2, 6), (3, 6), (4, 6)]) == 6\nassert     max_aggregate([(1, 2), (2, 2), (1, 2), (3, 4), (2, 4), (1, 4), (2, 4), (3, 4)]) == 8\nassert     max_aggregate([(1, 2), (3, 4), (5, 6), (1, 6), (2, 6), (3, 6), (4, 6), (1, 6), (2, 6), (3, 6), (4, 6)]) == 10\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"Test case 1: \", count_binary_seq(3))\nprint(\"Test case 2: \", count_binary_seq(4))\nprint(\"Test case 3: \", count_binary_seq(5))\nprint(\"Test case 4: \", count_binary_seq(6))\nprint(\"Test case 5: \", count_binary_seq(7))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_binary_seq(2) == 8\nassert     count_binary_seq(3) == 10\nassert     count_binary_seq(4) == 12\nassert     count_binary_seq(5) == 14\nassert     count_binary_seq(6) == 16\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef palindrome_permutation(s):\n    '''\n    Write a function to check whether the given string is palindrome or not\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_binary_seq(2) == 3\nassert     count_binary_seq(3) == 5\nassert     count_binary_seq(4) == 8\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_binary_seq_with_skip(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits with a skip of one in between.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_binary_seq(2) == 2\ncount_binary_seq(5) == 5\ncount_binary_seq(8) == 5\ncount_binary_seq(10) == 5\ncount_binary_seq(5) == 5\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_binary_seq(0)==0, \"Error: count_binary_seq(0)\"\nassert     count_binary_seq(1)==1, \"Error: count_binary_seq(1)\"\nassert     count_binary_seq(2)==4, \"Error: count_binary_seq(2)\"\nassert     count_binary_seq(3)==6, \"Error: count_binary_seq(3)\"\nassert     count_binary_seq(4)==10, \"Error: count_binary_seq(4)\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_binary_seq(3) == 4, \"3\"\nassert     count_binary_seq(4) == 6, \"4\"\nassert     count_binary_seq(5) == 10, \"5\"\nassert     count_binary_seq(6) == 14, \"6\"\nassert     count_binary_seq(7) == 21, \"7\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_binary_seq(3) == 7 \nassert     count_binary_seq(8) == 23 \nassert     count_binary_seq(6) == 20 \nassert     count_binary_seq(7) == 29 \n\n'''\nProblem 1.4\n'''\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_depth({'foo': {'bar': {'baz': {}, 'qux': {}}}}) == 3, 'test failed'\nassert     dict_depth({}) == 0, 'test failed'\nassert     dict_depth({'foo': {'bar': {'baz': {}, 'qux': {}}}}) == 2, 'test failed'\n\n\n\ndef dict_depth_comp(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({}) == 0, \"empty dictionary has depth 0\"\nassert     dict_depth({'a':1}) == 1, \"one key has depth 1\"\nassert     dict_depth({'a':{'b':2}}) == 2, \"two keys have depth 2\"\nassert     dict_depth({'a':[{'b':2}]}) == 2, \"two keys, one value has depth 2\"\nassert     dict_depth({'a':{'b':2,'c':{'d':4}}}).is_integer() == True, \"four keys, two values has depth 4\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reverse_dict(d):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth({}) == 0, 'Empty dictionary must have depth 0'\nassert     dict_depth({'a': 1, 'b': 2}) == 2, '{\\'a\\': 1, \\'b\\': 2} has depth 2'\nassert     dict_depth({'a': 1, 'b': {'c': 2}}) == 3, '{\\'a\\': 1, \\'b\\': {\\'c\\': 2}} has depth 3'\nassert     dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': {'e': {'f': 4}}}) == 6, '{\\'a\\': 1, \\'b\\': 2, \\'c\\': 3, \\'d\\': {\\'e\\': {\\'f\\': 4}}} has depth 6'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth({'a': 1, 'b': {'c': 2}}) == 2\nassert     dict_depth({'a': 1, 'b': {'c': 2, 'd': {'e': {'f': 3, 'g': 4}}}}) == 3\nassert     dict_depth({'a': 1, 'b': {'c': 2, 'd': {'e': {'f': 3, 'g': 4}, 'h': 5}}}) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({}) == 0, 'Empty dictionary should return 0'\nassert     dict_depth({'key1':'value1', 'key2':'value2'}) == 2,'single level'\nassert     dict_depth({'key1':{'key2':'value2'}}) == 3,'single level with dictionary inside'\nassert     dict_depth({'key1':[1,2,3]}) == 1,'single level with list inside'\nassert     dict_depth({'key1':{'key2':{'key3':'value3'}}}),'single level with dictionary inside and dictionary inside'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({1:2, 3:4}) == 0\nassert     dict_depth({1:2, 3:4, 5:6}) == 1\nassert     dict_depth({1:2, 3:4, 5:6, 7:8}) == 2\nassert     dict_depth({1:2, 3:4, 5:6, 7:8, 9:10}) == 3\nassert     dict_depth({1:2, 3:4, 5:6, 7:8, 9:10, 11:12}) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({'a': 'A', 'b': 'B', 'c': 'C'}) == 2\nassert     dict_depth({'a': 1, 'b': {'x': 'X', 'y': 'Y'}, 'c': 3}) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Element([[10,20,30,40,50],[60,70,80,90,100]],[[-1,-1,-1,-1,3],[-1,-1,-1,-1,2]],[[-1,-1,-1,-1,0],[-1,-1,-1,-1,0]],0) == 50\nassert     find_Element([[10,20,30,40,50],[60,70,80,90,100]],[[-1,-1,-1,-1,3],[-1,-1,-1,-1,2]],[[-1,-1,-1,-1,0],[-1,-1,-1,-1,0]],1) == 60\nassert     find_Element([[10,20,30,40,50],[60,70,80,90,100]],[[-1,-1,-1,-1,3],[-1,-1,-1,-1,2]],[[-1,-1,-1,-1,0],[-1,-1,-1,-1,0]],2) == 70\nassert     find_Element([[10,20,30,40,50],[60,70,80,90,100]],[[-1,-1,-1,-1,3],[-1,-1,-1,-1,2]],[[-1,-1,-1,-1,0],[-1,-1,-1,-1,0]],3) == 90\nassert     find_Element([[10,20,30,40,50],[60,70,80,90,100]],[[-1,-1,-1,-1,3],[-1,-1,-1,-1,2]],[[-1,-1,-1,-1,0],[-1,-1,-1,-1,0]],4) == 100\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Element([1,5,4,8,2],[[-1,7],[0,2],[2,9],[-1,-2],[4,10]],'1',2) == 4\nassert     find_Element([1,5,4,8,2],[[-1,7],[0,2],[2,9],[-1,-2],[4,10]],'0',2) == 1\nassert     find_Element([1,5,4,8,2],[[-1,7],[0,2],[2,9],[-1,-2],[4,10]],'2',2) == 5\nassert     find_Element([1,5,4,8,2],[[-1,7],[0,2],[2,9],[-1,-2],[4,10]],'9',2) == 8\nassert     find_Element([1,5,4,8,2],[[-1,7],[0,2],[2,9],[-1,-2],[4,10]],'4',2) == 4\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Element([],[],[],0) == 0\nassert     find_Element([1],[],0,[0]) == 0\nassert     find_Element([1,2],[[0,1,0,1,0,1]],0,[0]) == 1\nassert     find_Element([1,2,3],[[0,1,0,1,0,1]],0,[0]) == 2\nassert     find_Element([1,2,3],[[0,1,0,1,0,1]],0,[1]) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_Element([1,2,3,4,5],range(4),[2,4,2,1],3) == 4"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Element([5,1,4,2,5,2,3,4,5,2],\n                        [3,2,1],\n                        [0,2,3,1],\n                        2) == 5, \"Wrong answer\"\nassert     find_Element([5,1,4,2,5,2,3,4,5,2],\n                        [3,2,1],\n                        [0,2,3,1],\n                        3) == 2, \"Wrong answer\"\nassert     find_Element([5,1,4,2,5,2,3,4,5,2],\n                        [3,2,1],\n                        [0,2,3,1],\n                        10) == 5, \"Wrong answer\"\nassert     find_Element([5,1,4,2,5,2,3,4,5,2],\n                        [3,2,1],\n                        [0,2,3,1],\n                        0) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Element([1,2,3,4,5],[[1,2],[3,4],[5,6]], 2, 2)== 4, \"Wrong\"\nassert     find_Element([2,3,4,5,6,7], [[2,3,4],[5,6],[7,8,9]], 3, 5)== 6, \"Wrong\"\nassert     find_Element([1,2,3,4,5],[[1,2],[3,4],[5,6]], 4, 4)== 5, \"Wrong\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Element([2,4,6,8,10,12,14,16,18,20],[[2,4],[6,8],[10,12],[14,16],[18,20]],3,1) == 2\nassert     find_Element([2,4,6,8,10,12,14,16,18,20],[[2,4],[6,8],[10,12],[14,16],[18,20]],1,2) == 10\nassert     find_Element([2,4,6,8,10,12,14,16,18,20],[[2,4],[6,8],[10,12],[14,16],[18,20]],1,3) == 12\nassert     find_Element([2,4,6,8,10,12,14,16,18,20],[[2,4],[6,8],[10,12],[14,16],[18,20]],1,4) == 14\nassert     find_Element([2,4,6,8,10,12,14,16,18,20],[[2,4],[6,8],[10,12],[14,16],[18,20]],1,5) == 16\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Element([[1,2,3],[4,5,6],[7,8,9]],3,1,3)==True\nassert     find_Element([[1,2,3],[4,5,6],[7,8,9]],3,1,1)==False\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_a_verse(word):\n    '''\n    Write a function is_a_verse to determine whether a word is a verse.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     start_withp(['pearl','pearls','policeman','policemen']) == ['pearl', 'policeman']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef start_withp_and_return_words(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and ending with letter 'a'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     start_withp(['pythons', 'python', 'pythonprogramming']) == ['python', 'pythonprogramming']\nassert     start_withp(['pythons', 'pythonprogramming']) == ['python', 'pythonprogramming']\nassert     start_withp(['python', 'pythonprogramming']) == ['python', 'pythonprogramming']\nassert     start_withp(['pythons', 'pythonprogramming', 'pythonprogramming']) == ['pythonprogramming', 'pythonprogramming']\nassert     start_withp(['programming', 'programmingprogramming']) == ['programming', 'programmingprogramming']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     start_withp(['ph','py','pa','p','a']) == ['py','pa','a']\nassert start_withp(['ph','py','pa']) == None\nassert start_withp(['ph','py','pa','p','a','p','p','a','py','pa','p']) == ['py','pa','p']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \n\nwords = ['pap', 'papapapa', 'kapapapa', 'papapapapapapapapa', 'papapapapapapapa', 'papapapapapapa']\nstart_withp(words)\n\n\ndef start_with_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return_result = []\n    for word in words:\n        if word.startswith('p'):\n            return_result.append(word)\n    return return_result\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     start_withp(['pallavi','bunny','kittu','mam','kiran','ram']) == 'pallavi'\nassert start_withp(['kall','bunny','kittu','mam','kiran','ram']) == None\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     start_withp(['hi', 'hello', 'there']) == ['hello', 'there']\nassert     start_withp(['hi', 'hello', 'there']) == ['there', 'hello']\nassert     start_withp(['hi', 'hello', 'there']) == ['hello', 'there']\nassert     start_withp(['hi', 'hello', 'there']) == ['hello', 'there']\nassert     start_withp(['hi', 'hello', 'there']) == ['there', 'hello']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('\\n', start_withp(['helloooo', 'hello', 'world']))\nassert start_withp(['helloooo', 'hello', 'world']) == ['helloooo', 'hello']\nassert start_withp(['helloooo', 'hello', 'world']) == []\nassert start_withp(['helloooo', 'hello', 'world']) == ['helloooo']\nassert start_withp(['hello', 'world']) == ['hello', 'world']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp([\"i\", \"an\", \"apple\"]) == [\"apple\", \"apple\"]\nassert     start_withp([\"I\", \"am\", \"apple\"]) == None\n\ndef start_with(words):\n    '''\n    Write a function to return all words from a list of words that start with letter 'a' or 'e'.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\na = [1,12,2,3,5,6,7,8,9]\nn = len(a)\nindex = 3\nk = 5\n\nprint max_sum_increasing_subseq(a, n, index, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum_increasing_subseq([1], 1, 0, 0) == 0\nassert     max_sum_increasing_subseq([2,1], 2, 0, 0) == 1\nassert     max_sum_increasing_subseq([1,2,3], 3, 1, 0) == 2\nassert     max_sum_increasing_subseq([1,2,3,4], 4, 2, 1) == 5\nassert     max_sum_increasing_subseq([1,2,3,4,5], 5, 2, 1) == 8\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef find_decreasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_increasing_subseq([3, 1, 4, 2, 6, 7, 5], 6, 4) == 17\nassert     max_sum_increasing_subseq([3, 1, 4, 2, 6, 7, 5], 6, 5) == 19\nassert     max_sum_increasing_subseq([3, 1, 4, 2, 6, 7, 5], 6, 2) == 16\nassert     max_sum_increasing_subseq([3, 1, 4, 2, 6, 7, 5], 6, 1) == 14\nassert     max_sum_increasing_subseq([3, 1, 4, 2, 6, 7, 5], 6, 0) == 13\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_sum_increasing_subseq_dp(a, n):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum_increasing_subseq([1, 3, -2, 5, -3, 1, 6], 10, 4) == 7\nassert max_sum_increasing_subseq([1, 3, -2, 5, -3, 1, 6], 5, 1) == 8\nassert max_sum_increasing_subseq([1, 3, -2, 5, -3, 1, 6], 5, 2) == 6\nassert max_sum_increasing_subseq([1, 3, -2, 5, -3, 1, 6], 5, 3) == 4\nassert max_sum_increasing_subseq([1, 3, -2, 5, -3, 1, 6], 5, 4) == 6\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex(('a','b'),3,2) == (\":\", \"b\")\nassert     colon_tuplex(('a','b', 'c'),3,2) == (\":\", \"b\")\nassert     colon_tuplex(('a','b', 'c', 'd'),3,2) == (\":\", \"d\")\nassert     colon_tuplex(('a','b', 'c', 'd', 'e'),3,2) == (\":\", \"e\")\nassert     colon_tuplex(('a','b', 'c', 'd', 'e', 'f'),3,2) == (\":\", \"e\")\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     colon_tuplex([1,2,3,4,5],2,3)    ==    [(1,2,3),(4,5)]\nassert     colon_tuplex([1,2,3,4,5],3,2)    ==    [(1,2),(3,4),(5)]\nassert     colon_tuplex([1,2,3,4,5],1,3)    ==    [(1,2,3)]\nassert     colon_tuplex([1,2,3,4,5],2,1)    ==    [(1,2),(3,4),(5)]\n\ndef check_tuple(tuplex,m,n):\n    '''\n    Write a function to check if a tuple is of the right size.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef string_xor(string_1,string_2):\n    '''\n    Write a function to XOR two strings.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     colon_tuplex([1,2,3,4],0,1) == (1,2,3)\nassert     colon_tuplex([1,2,3,4],0,2) == (1,2,3)\nassert     colon_tuplex([1,2,3,4],0,3) == (1,2,3)\nassert     colon_tuplex([1,2,3,4],0,4) == (1,2,3)\nassert     colon_tuplex([1,2,3,4],0,5) == (1,2,3,4)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     colon_tuplex(((1,2),3),2,3) == ((1,3),2)\nassert     colon_tuplex(((1,2,3),4),2,3) == ((1,4),2)\nassert     colon_tuplex(((1,2,3),4),2,2) == ((1,2),4)\n\ndef set_diff(set1,set2):\n    '''\n    Write a function to get the union of two set.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef all_subsets(iterable):\n    '''\n    Write a function to get all subsets of a set\n    '''\n    pass\n\ndef sublist(lst,sublist):\n    '''\n    Write a function to check whether a list is a sublist of another list.\n    '''\n    pass\n\ndef reverse(lst):\n    '''\n    Write a function to get a reversed list.\n    '''\n    pass\n\ndef list_of_subsets(lst,k):\n    '''\n    Write a function to get a list of subsets of a list of size k.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert colon_tuplex(((1,2,3),(4,5,6)),3,2) == ((1,2),(4,5))\n\ndef update_value(tuplex,i,value):\n    '''\n    Write a function to update the value at index i in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     colon_tuplex(('a','b','c','d','e'),2,5) == ('b','c','d','e','a')\nassert     colon_tuplex(('a','b','c','d','e'),3,5) == ('c','d','e','a','b')\nassert     colon_tuplex(('a','b','c','d','e'),1,3) == ('a','b','c','d','e')\n\n\ndef reverse_tuple(tuplex):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     large_product([1,2,3], [4,5,6], 3) == 24\nassert     large_product([1,2,3,4], [4,5,6,7], 3) == 120\nassert     large_product([1,2,3,4], [4,5,6,7], 4) == 240\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     large_product([3, 4, 5, 6], [7, 8, 9], 4) == [64, 2048, 3888, 40000]\nassert large_product([3, 4, 5, 6], [7, 8, 9], 3) == [64, 24, 288]\nassert large_product([], [3, 4, 5, 6], 3) == []\nassert large_product([1, 2, 3, 4], [4, 2, 1, 3], 2) == [12, 8, 8, 8]\nassert large_product([2, 3, 4, 5], [3, 1, 2, 4], 3) == [60, 12, 24]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert large_product([1,2,3], [2,2,2], 2) == 3\nassert large_product([1,2,3], [2,2,3], 2) == 6\nassert large_product([1,2,3], [2,3,4], 3) == 12\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     large_product([1, 2, 3], [4, 5, 6], 2) == (6, 24)\nassert large_product([0, 2, 3], [4, 5, 6], 2) == (6, 0)\nassert large_product([1, 2, 3], [4, 5, 6], 1) == (6, 24)\nassert large_product([-1, -2, -3], [-4, -5, -6], 2) == (-6, 0)\n\ndef large_product_of_three(nums1, nums2, nums3, N):\n    '''\n    Write a function to find the specified number of largest products from three given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     large_product([], [], 0) == []\nassert     large_product([2], [], 0) == []\nassert     large_product([], [1], 0) == []\nassert     large_product([1], [1], 0) == [1]\nassert     large_product([1,2], [1,2], 1) == [1,2]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     large_product([5, 4, 2, 8], [2, 7, 4, 6], 2) == [28, 24]\nassert     large_product([1, 2, 3, 5], [7, 7, 6, 4], 2) == [10, 16]\nassert     large_product([5, 4, 2, 8], [2, 7, 4, 6], 1) == [28, 7]\nassert     large_product([2, 3], [6, 2], 0) == []\nassert     large_product([], [1, 3], 0) == []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     large_product([-2, 7, -10, -4],\n                       [2, 3, -4],\n                       1) == (14, -2)\nassert large_product([-2, -3, 5, 6],\n                      [-3, 4, -2],\n                      2) == (18, -4)\nassert large_product([0, -1, -2, 2],\n                      [-1, -3, 3, -4],\n                      3) == (0, -1)\nassert large_product([1, -2, -3, 4],\n                      [-1, -2, 3, 4],\n                      4) == (24, -1)\nassert large_product([1, 2, -3, -4],\n                      [-2, 1, -3, -4],\n                      3) == (6, -2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     large_product([1,2,3,4],[5,6,7,8],4) == 28, 'Wrong answer'\nassert     large_product([1,2,3,4],[5,6,7,8],3) == 64, 'Wrong answer'\nassert     large_product([2,4,8,16,32,64],[2,4,8,16,32,64],4) == 8, 'Wrong answer'\nassert     large_product([2,4,8,16,32,64],[2,4,8,16,32,64],3) == 64, 'Wrong answer'\nassert     large_product([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(10,20) == 20, 'Should be 20'\nassert     maximum(50,100) == 100, 'Should be 100'\nassert     maximum(10,50) == 50, 'Should be 50'\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum(10,20)==20\nassert maximum(20,10)==20\nassert maximum(-10,-20)==-20\nassert maximum(-10,20)==20\nassert maximum(20,-10)==20\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(5,4)==5, 'Wrong output'\nassert maximum(4,5)==4, 'Wrong output'\n\nprint('Correct'"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmaximum(3,4) == 3\nassert \nmaximum(-1,4) == 4\nassert\nmaximum(3,-1) == 3\nassert\nmaximum('a','b') == 'a'\nassert\nmaximum('a','b') == 'a'\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum(5,6) == 5, \"Failed with 5\"\nassert     maximum(8,6) == 8, \"Failed with 8\"\nassert     maximum(4,5) == 5, \"Failed with 4\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum(8,2) == 8\nassert     maximum(4,8) == 8\nassert     maximum(7,9) == 9\nassert     maximum(4,7) == 7\nassert     maximum(-2,-1) == -1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(2,3)==3\nassert     maximum(10,5)==10\nassert     maximum(-10,2)==2\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum(10,1) == 10\nassert maximum(1,10) == 10\nassert maximum(-1,10) == 10\nassert maximum(10,-1) == 10\nassert maximum(10,-1,-100) == -100\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum(4,2)==4\nassert maximum(2,4)==4\nassert maximum(2,-4)==4\nassert maximum(-2,4)==4\nassert maximum(2.0,4.0)==4.0\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum(10,20) == 20, \"Wrong\"\nassert     maximum(10,10) == 10, \"Wrong\"\nassert     maximum(20,10) == 20, \"Wrong\"\nassert     maximum(20,-20) == 20, \"Wrong\"\nassert     maximum(10,20.0) == 20, \"Wrong\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef tuple_to_string(lst):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple(\"Hi\") == ('H', 'i')\nassert     string_to_tuple(\"joe\") == ('J', 'o', 'e')\nassert     string_to_tuple(\"Python\") == ('P', 'y', 't', 'H', 'o', 'n')\nassert     string_to_tuple(\"\") == ()\nassert     string_to_tuple(\"12345\") == ('1', '2', '3', '4', '5')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('hello') == (5, 4, 2, 3, 1, 0, 0, 0, 0)\nassert     string_to_tuple('hello world') == (1, 1, 0, 0, 0, 1, 2, 1, 3)\nassert     string_to_tuple('hello world!') == (1, 1, 0, 0, 0, 1, 2, 1, 3)\nassert     string_to_tuple('hello world!!') == (1, 1, 0, 0, 0, 1, 2, 1, 3)\nassert     string_to_tuple('hello world!!!') == (1, 1, 0, 0, 0, 1, 2, 1, 3)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple('the quick brown fox jumps over the lazy dog') == ('t', 'h', 'e', 'q', 'u', 'c', 'o', 'r','m', 'f', 'x', 'j', 'p', 'a','s','s', 'o', 'v', 'e', 'r', 'l', 'd', 'g', 'f', 'y')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert string_to_tuple(\"the quick brown fox jumps over the lazy dog\") == ('t', 'h', 'e','', 'q', 'u', 'i', 'c', 'k', 'b', 'o','', 'w', 'o', 'r', 'l', 'a', 'z', 'd','', 'p', 'a','m','', 'l', 'y', 'u', 'n','', 'j', 'u', 'p','s','', 'h', 'a', 'r', 'l', 'y')\nassert string_to_tuple(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\nassert string_to_tuple(\"Hello, I'm crazy!\") == ('H', 'e', 'l', 'l', 'o', ',', 'I','m', 'c', 'a', 'r', 'i', '!')\nassert string_to_tuple(\"\") == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_tuple(\"Hello\") == ('H', 'e', 'l', 'l', 'o')\nassert     string_to_tuple(\"This is a test string\") == ('T', 'h', 'i','s', 'i','s', 'a','m', 't', 'e', 'r','s', 't', 'r', 'i', 'n', 'g')\n\n'''\nQuestion 2\nWrite a function which finds the index of the first occurrence of a substring in the given string.\n'''\n\ndef find_index(str1, sub):\n    '''\n    Write a function which finds the index of the first occurrence of a substring in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple(\"12345\") == ('1', '2', '3', '4', '5')\nassert     string_to_tuple(\"hehe\") == ('h', 'e', 'e', 'h')\nassert     string_to_tuple(\"aa\") == ('a', 'a')\nassert     string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert     string_to_tuple(\"\") == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_tuple('a') == ('a', )\nassert     string_to_tuple('ab') == ('a', 'b')\nassert     string_to_tuple('abc') == ('a', 'b', 'c')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple(\"abc\")     == ('a','b','c'), \"The actual output was\" + str(string_to_tuple('abc'))\nassert     string_to_tuple(\"abc\")     == ('a','b','c'), \"The actual output was\" + str(string_to_tuple('abc'))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_left_most_unset_bit(0b01010101) == 0b00000001\nassert     set_left_most_unset_bit(0b01010110) == 0b00000100\nassert     set_left_most_unset_bit(0b01010100) == 0b00001000\nassert     set_left_most_unset_bit(0b01011000) == 0b00000010\nassert     set_left_most_unset_bit(0b01011010) == 0b00000001\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_left_most_unset_bit(15) == 1\nassert     set_left_most_unset_bit(8) == 0\nassert     set_left_most_unset_bit(0) == 1\nassert     set_left_most_unset_bit(1) == 0\nassert     set_left_most_unset_bit(2) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_left_most_unset_bit(7) == 0\nassert     set_left_most_unset_bit(8) == 1\nassert     set_left_most_unset_bit(9) == 1\nassert     set_left_most_unset_bit(10) == 2\nassert     set_left_most_unset_bit(11) == 3\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert set_left_most_unset_bit(5) == 0\nassert set_left_most_unset_bit(3) == 0\nassert set_left_most_unset_bit(6) == 1\nassert set_left_most_unset_bit(9) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_left_most_unset_bit(5) == 2\nassert     set_left_most_unset_bit(256) == 7\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     set_left_most_unset_bit(1) == 0\nassert set_left_most_unset_bit(2) == 1\nassert set_left_most_unset_bit(3) == 1\nassert set_left_most_unset_bit(7) == 2\nassert set_left_most_unset_bit(10) == 2\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nset_left_most_unset_bit(1)\nset_left_most_unset_bit(6)\nset_left_most_unset_bit(2**31)\nset_left_most_unset_bit(2**63)"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nset_left_most_unset_bit(0b11010000) == 0b10111000\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cone(1,2) == 1\nassert     volume_cone(0,1) == 0\nassert     volume_cone(10,10) == 300\n\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cone(1,1) == math.pi * 1**2 * 1, \"it should be pi*r^2\"\nassert     volume_cone(2,2) == math.pi * 2**2 * 2, \"it should be pi*r^2\"\n\ndef volume_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cone(3,6) == math.pi*(3**2)/4, 'Expected: (math.pi*(3**2)/4), got:'+ str(volume_cone(3,6))\nassert     volume_cone(3,2) == 0, 'Expected: 0, got:'+ str(volume_cone(3,2))\nassert     volume_cone(0,3) == 0, 'Expected: 0, got:'+ str(volume_cone(0,3))\nassert     volume_cone(3,0) == 0, 'Expected: 0, got:'+ str(volume_cone(3,0))\nassert     volume_cone(10,5) == 148.9243, 'Expected: 148.9243, got:'+ str(volume_cone(10,5))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cone(3, 5) == 5.64285714285714\nassert     volume_cone(4, 7) == 20.73913043478262\nassert     volume_cone(2.5, 0) == 0\nassert     volume_cone(2.5, 1) == 1.5\nassert     volume_cone(2.5, -1) == 1.5\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cone(10,10)==100\nassert     volume_cone(10,20)==500\nassert     volume_cone(100,10)==1000\nassert     volume_cone(100,20)==2000\nassert     volume_cone(100,100)==10000\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(1.0,1.0) == 1.0\nassert     volume_cone(5,5) == 200.0\nassert     volume_cone(3,3) == 12.5\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(2,1) == math.pi/3 * math.pow(2,2)* 2\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with the given radius.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(1,2) == 2, 'inputs are not correct'\nassert     volume_cone(5,7) == 25, 'inputs are not correct'\nassert     volume_cone(5,6) == 35, 'inputs are not correct'\nassert     volume_cone(4,2) == math.pi * 4**2 / 3, 'inputs are not correct'\nassert     volume_cone(5,2) == 5 * math.pi, 'inputs are not correct'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef surface_area_cylinder(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nhighest_Power_of_2(16) == 8 \nhighest_Power_of_2(8) == 1\nhighest_Power_of_2(9) == 2\nhighest_Power_of_2(16) == 8\nhighest_Power_of_2(1024) == 1024\nhighest_Power_of_2(1) == 1\nhighest_Power_of_2(0) == 1\n\n\ndef max_sequence(n):\n    '''\n    Write a python function to find the maximum value in a sequence of positive integers n1, n2,..., nk.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhighest_Power_of_2(1) == 1\nhighest_Power_of_2(8) == 8\nhighest_Power_of_2(17) == 16\nhighest_Power_of_2(1024) == 512\nhighest_Power_of_2(536870912) == 1024\nhighest_Power_of_2(393217728) == 1024\nhighest_Power_of_2(1537995888) == 1024\nhighest_Power_of_2(8589934592) == 1024\nhighest_Power_of_2(32768) == 8\nhighest_Power_of_2(4294967295) == 8\nhighest_Power_of_2(9223372036854775807) == 8\nhighest_Power_of_2(2147483647) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649) == 8\nhighest_Power_of_2(2147483649"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__': \n    print(highest_Power_of_2(100)) \n    print(highest_Power_of_2(1000)) \n    print(highest_Power_of_2(2147483647))\n    print(highest_Power_of_2(2147483648)) \n    print(highest_Power_of_2(2147483649))"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     highest_Power_of_2(16) == 4\nassert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(100) == 16\nassert     highest_Power_of_2(63) == 6\nassert     highest_Power_of_2(8) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     highest_Power_of_2(3) == 2\nassert     highest_Power_of_2(4) == 2\nassert     highest_Power_of_2(5) == 2\nassert     highest_Power_of_2(6) == 2\nassert     highest_Power_of_2(7) == 3\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 5\nassert     find_lucas(5) == 8\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_lucas(0) == 0\nfind_lucas(1) == 1\nfind_lucas(2) == 3\nfind_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lucas(0) == 1\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 2\nassert     find_lucas(3) == 3\nassert     find_lucas(4) == 5\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_sum(n):\n    '''\n    Given a number n, find sum of all natural numbers up to n.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\n===== Test Case 1 =====\\n\")\nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(3) == 4\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not \nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(10) == 89\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert add_string(['1','2','3','4','5','6'], 'x') == '1x2x3x4x5x6x'\nassert add_string(['1','2','3','4','5','6'], 'xyz') == '1xyz2xyz3xyz4xyz5xyz6xyz'\nassert add_string(['1','2','3','4','5','6'], 'abcd') == '1abcd2abcd3abcd4abcd5abcd6abcd'\nassert add_string(['1','2','3','4','5','6'], 'xy') == '1x2x3x4x5x6x'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_string(['1', '2', '3', '4'], '1st: {}, 2nd: {}, 3rd: {}, 4th: {}') == '1st: 1, 2nd: 2, 3rd: 3, 4th: 4'\nassert add_string(['1', '2', '3', '4'], '{1st}, {2nd}, {3rd}, {4th}') == '1st: 1, 2nd: 2, 3rd: 3, 4th: 4'\nassert add_string(['1', '2', '3', '4'], '1st: {}, 2nd: {}, 3rd: {}, 4th: {}, 5th: {}') == '1st: 1, 2nd: 2, 3rd: 3, 4th: 4, 5th: 5'\nassert add_string(['1', '2', '3', '4'], '1st: {1}, 2nd: {2}, 3rd: {3}, 4th: {4}') == '1st: 1, 2nd: 2, 3rd: 3, 4th: 4'\nassert add_string(['1', '2', '3', '4'], '1st: {1}, 2nd: {2}, 3rd: {3}, 4th: {4}, 5th: {5}') == '1st: 1, 2nd: 2, 3rd: 3, 4th: 4, 5th: 5'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_string(['a', 'b'], 'Hello {0}, you are {1}') == 'Hello a, you are b', 'Wrong result'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_string([1,2,3,4], '{0} {1} {2} {3}') == '1 2 3 4'\nassert     add_string([1,2,3,4], '{0} {1} {2} {3} {4}') == '1 2 3 4'\nassert     add_string([1,2,3,4], '{0} {1} {2} {3} {4}') == '1 2 3 4'\nassert     add_string([1,2,3,4], '{0} {1} {2} {3}') == '1 2 3 4'\nassert     add_string([1,2,3,4], '{0} {1} {2}') == '1 2 3 4'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_string([1, 2, 3, 4], '{0}') == ['1', '2', '3', '4']\nassert     add_string(['a', 'b', 'c', 'd'], '{0}{0}{0}') == ['a', 'aa', 'aaa']\nassert     add_string(['a', 'b', 'c', 'd'], '{0}{0}{0}{0}') == ['a', 'aa', 'aaa', 'aaaa']\n\n\ndef add_string_map(map_, string):\n    '''\n    Write a function to apply a given format string to all of the keys and values in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_string(['foo', 'bar'], '{0} {1}') == 'foo bar', 'expected: foo bar'\nassert     add_string(['foo', 'bar'], '{1} {0}') == 'bar foo', 'expected: bar foo'\nassert     add_string(['foo', 'bar'], '{1} {0}') == 'bar foo', 'expected: bar foo'\n\n'''\nReference:\n- https://stackoverflow.com/questions/5319561/format-a-python-list-of-objects-with-a-given-string-format\n''"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_string([1,2], '{} : {}') == '1 : 2'\nassert     add_string([1,2,3], '{} : {}') == '1 : 2 : 3'\nassert     add_string([1,2,3,4,5], '{} : {}') == '1 : 2 : 3 : 4 : 5'\n\ndef is_prime(n):\n    '''\n    Write a function to determine if the integer is a prime.\n    '''\n    pass\n\ndef is_prime(n):\n    '''\n    Write a function to determine if the integer is a prime.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary([[1, 2, 3], [4, 5, 6], [7, 8, 9]], ['c', 'b', 'a'], ['s', 'w', 'x']) == {'c': {'s': {'w': {'x': [1, 2, 3]}}, 'w': {'s': {'x': [4, 5, 6]}}}, 'b': {'s': {'w': {'x': [7, 8, 9]}}}, 'a': {'s': {'w': {'x': [1, 2, 3]}}}}, 'incorrect'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef convert_to_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert nested dictionary to one list.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert_list_dictionary([1,2,3], ['a','b','c'], ['m','n','o']) == {1: {'a':'m', 'b': 'n', 'c': 'o'}, 2: {'a':'m', 'b': 'n', 'c': 'o'}, 3: {'a':'m', 'b': 'n', 'c': 'o'}}\nassert     convert_list_dictionary([1,2,3], ['a','b','c'], ['m','n','o'], ['p','q','r']) == {1: {'a':'m', 'b': 'n', 'c': 'o'}, 2: {'a':'m', 'b': 'n', 'c': 'o'}, 3: {'a':'m', 'b': 'n', 'c': 'o'}, 4: {'a': 'p', 'b': 'q', 'c': 'r'}}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary([1,2,3], ['a', 'b', 'c'], ['d', 'e', 'f']) == {1: {'a': {'d': 'd', 'e': 'e', 'f': 'f'}}, 2: {'b': {'d': 'd', 'e': 'e', 'f': 'f'}}, 3: {'c': {'d': 'd', 'e': 'e', 'f': 'f'}}}\n\ndef convert_list_dictionary_2(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dict = {}\n    for i in range(len(l1)):\n        l1_dict[i] = {l1[i]: {}}\n    for i in range(len(l2)):\n        for j in range(len(l2[i])):\n            l1_dict[i][l2[i][j]] = l3[i][j]\n\n    return l1_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert_list_dictionary([{1, 2}, [3, 4]], ['a', 'b'], ['d', 'e']) == {1: {2: 'a'}, 3: {4: 'b'}, 'd': {'e': 'd'}}\nassert convert_list_dictionary([[1, 2], ['a', 'b']], ['a', 'b'], ['d', 'e']) == {1: {2: 'a'}, 'a': {'b': 'a'}, 3: {'e': 'b'}, 'd': {'e': 'd'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([[\"a\", \"b\", \"c\", \"d\"], [3, 2, 1, 0]], [\"abcd\", {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}], {\"a\": 3, \"b\": 2, \"c\": 1, \"d\": 0}) == {\"abcd\": {\"a\": 3, \"b\": 2, \"c\": 1, \"d\": 0}, \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n\nassert     convert_list_dictionary([[\"a\", \"b\", \"c\", \"d\"], [3, 2, 1, 0]], {\"a\": \"abcd\", \"b\": \"efgh\", \"c\": \"z\"}, {\"a\": 3, \"b\": 2, \"c\": 1, \"d\": 0}) == {\"a\": 3, \"b\": 2, \"c\": 1, \"d\": 0}\n\nassert     convert_list_dictionary([[\"a\", \"b\", \"c\", \"d\"], [3, 2, 1, 0]], {\"a\": \"abcd\", \"b\": \"efgh\", \"c\": \"z\"}, [\"a\", \"b\", \"c\", \"d\"]) == {\"a\": \"abcd\", \"b\": \"efgh\", \"c\": \"z\"}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary([1, 2], [\"a\", \"b\"], [\"1\", \"2\"]) == {\"1\": [\"a\"], \"2\": [\"b\"]}\nassert convert_list_dictionary([1, 2], [\"a\", \"b\"], [\"1\", \"2\", \"3\"]) == {\"1\": [\"a\"], \"2\": [\"b\", \"3\"]}\nassert convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\", \"4\"]) == {\"1\": [\"a\"], \"2\": [\"b\", \"3\", \"4\"], \"3\": [\"c\"]}\nassert convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == {\"1\": [\"a\"], \"2\": [\"b\", \"3\", \"4\"], \"3\": [\"c\", \"5\"]}\nassert convert_list_dictionary([1, 2, 3, 4], [\"a\", \"b\", \"c\", \"d\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == {\"1\": [\"a\"], \"2\": [\"b\", \"3\", \"4\", \"5\"], \"3\": [\"c\", \"d\", \"6\"]}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert convert_list_dictionary([1,2,3], ['A','B','C'], ['X','Y','Z']) == {1: {'A': 'X'}, 2: {'B': 'Y'}, 3: {'C': 'Z'}}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_max_sum_approach_2 (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_max_sum(0) == 0\nassert     get_max_sum(1) == 1\nassert     get_max_sum(4) == 10\nassert     get_max_sum(10) == 89\nassert     get_max_sum(50) == 146\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 3\nassert     get_max_sum(4) == 6\nassert     get_max_sum(5) == 13\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nget_max_sum(1) == 1\nget_max_sum(2) == 3\nget_max_sum(3) == 6\nget_max_sum(4) == 10\nget_max_sum(5) == 13\nget_max_sum(6) == 18\nget_max_sum(7) == 24\nget_max_sum(8) == 33\nget_max_sum(9) == 40\nget_max_sum(10) == 48\nget_max_sum(11) == 56\nget_max_sum(12) == 63\nget_max_sum(13) == 72\nget_max_sum(14) == 81\nget_max_sum(15) == 90\nget_max_sum(16) == 96\nget_max_sum(17) == 99\nget_max_sum(18) == 105\nget_max_sum(19) == 108\nget_max_sum(20) == 111\nget_max_sum(21) == 114\nget_max_sum(22) == 117\nget_max_sum(23) == 120\nget_max_sum(24) == 123\nget_max_sum(25) == 126\nget_max_sum(26) == 129\nget_max_sum(27) == 132\nget_max_sum(28) == 135\nget_max_sum(29) == 138\nget_max_sum(30) == 141\nget_max_sum(31) == 144\nget_max_sum(32) == 147\nget_max_sum(33) == 150\nget_max_sum(34) == 153\nget_max_sum(35) == 156\nget_max_sum(36) == 159\nget_max_sum(37) == 162\nget_max_sum(38) == 165\nget_max_sum(39) == 168\nget_max_sum(40) == 171\nget_max_sum(41) == 174\nget_max_sum(42) == 177\nget_max_sum(43) == 180\nget_max_sum(44) == 183\nget_max_sum(45) == 186\nget_max_sum(46) == 189\nget_max_sum(47) == 192\nget_max_sum(48) == 195\nget_max_sum(49) == 198\nget_max_sum(50) == 201\nget_max_sum(51) == 204\nget_max_sum(52) == 207\nget_max_sum(53) == 210\nget_max_sum(54) == 213\nget_max_sum(55) == 216\nget_max_sum(56) == 219\nget_max_sum(57) == 222\nget_max_sum(58) == 225\nget_max_sum(59) == 228\nget_max_sum(60) == 231\nget_max_sum(61) == 234\nget_max_sum(62) == 237\nget_max_sum(63) == 240\nget_max_sum(64) == 243\nget_max_sum(65) == 246\nget_max_sum(66) == 249\nget_max_sum(67) == 252\nget_max_sum(68) == 255\nget_max_sum(69) == 258\nget_max_sum(70) == 261\nget_max_sum(71) == 264\nget_max_sum(72) == 267\nget_max_sum(73) == 270\nget_max_sum(74) == 273\nget_max_sum(75) == 276\nget_max_sum(76) == 279\nget_max_sum(77) == 282\nget_max_sum(78) == 285\nget_max_sum(79) == 288\nget_max_sum(80) == 291\nget_max_sum(81) == 294\nget_max_sum(82) == 297\nget_max_sum(83) == 300\nget_max_sum(84) == 303\nget_max_sum(85) == 306\nget_max_sum(86) == 309\nget_max_sum(87) == 312\nget_max_sum(88) == 315\nget_max_sum(89) == 318\nget_max_sum(90) == 321\nget_max_sum(91) == 324\nget_max_sum(92) == 327\nget_max_sum(93) == 330\nget_max_sum(94) == 333\nget_max_sum(95) == 336\nget_max_sum(96) == 339\nget_max_sum(97) == 342\nget_max_sum(98) == 345\nget_max_sum(99) == 348\nget_max_sum(100) == 351\nget_max_sum(101) == 354\nget_max_sum(102) == 357\nget_max_sum(103) == 360\nget_max_sum(104) == 363\nget_max_sum(105) == 366\nget_max_sum(106) == 369\nget_max_sum(107) == 372\nget_max_sum(108) == 375\nget_max_sum(109) == 378\nget_max_sum(110) == 381\nget_max_sum(111) == 384\nget_max_sum(112) == 387\nget_max_sum(113) == 390\nget_max_sum(114) == 393\nget_max_sum(115) == 396\nget_max_sum(116) == 399\nget_max_sum(117) == 402\nget_max_sum(118) == 405\nget_max_sum(119) == 408\nget_max_sum(120) == 411\nget_max_sum(121) == 414\nget_max_sum(122) == 417\nget_max_sum(123) == 420\nget_max_sum(124) == 423\nget_max_sum(125) == 426\nget_max_sum(126) == 429\nget_max_sum(127) == 432\nget_max_sum(128) == 435\nget_max_sum(129) == 438\nget_max_sum(130) == 441\nget_max_sum(131) == 444\nget_max_sum(132) == 447\nget_max_sum(133) == 450\nget_max_sum(134) == 453\nget_max_sum(135) == 456\nget_max_sum(136) == 459\nget_max_sum(137) == 462\nget_max_sum(138) == 465\nget_max_sum(139) == 468\nget_max_sum(140) == 471\nget_max_sum(141) == 474\nget_max_sum(142) == 477\nget_max_sum(143) == 480\nget_max_sum(144) == 483\nget_max_sum(145) == 486\nget_max_sum(146) == 489\nget_max_sum(147) == 492\nget_max_sum(148) == 495\nget_max_sum(149) == 498\nget_max_sum(150) == 501\nget_max_sum(151) == 504\nget_max_sum(152) == 507\nget_max_sum(153) == 510\nget_max_sum(154) == 513\nget_max_sum(155) == 516\nget_max_sum(156) == 519\nget_max_sum(157) == 522\nget_max_sum(158) == 525\nget_max_sum(159) == 528\nget_max_sum(160) == 531\nget_max_sum(161) == 534\nget_max_sum(162) == 537\nget_max_sum(163) == 540\nget_max_sum(164) == 543\nget_max_sum(165) == 546\nget_max_sum(166) == 549\nget_max_sum(167) == 552\nget_max_sum(168) == 555\nget_max_sum(169) == 558\nget_max_sum(170) == 561\nget_max_sum(171) == 564\nget_max_sum(172) == 567\nget_max_sum(173) == 570\nget_max_sum(174) == 573\nget_max_sum(17"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_sum(5) == 13\nassert     get_max_sum(25) == 31\nassert     get_max_sum(13) == 13\nassert     get_max_sum(7) == 15\nassert     get_max_sum(17) == 21\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_sum (5) == 15, \"get_max_sum(5) == 15 should be True\"\nassert     get_max_sum (10) == 45, \"get_max_sum(10) == 45 should be True\"\nassert     get_max_sum (20) == 110, \"get_max_sum(20) == 110 should be True\"\nassert     get_max_sum (30) == 240, \"get_max_sum(30) == 240 should be True\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_sum(12) == 15\nassert     get_max_sum(20) == 23\nassert     get_max_sum(30) == 33\nassert     get_max_sum(40) == 44\nassert     get_max_sum(50) == 55\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length_list([1,2,3,4]) == 4\nassert     max_length_list([1,2,3,4,5]) == 5\nassert     max_length_list([1,2,3,4,5,6]) == 6\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_length_list([1,2,3,4,5,6,7,8,9,0]) == 9\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length_list([]) == None\nassert     max_length_list([1,2,3]) == 3\nassert     max_length_list([1,2,3,4,5,6,7]) == 5\n\n\ndef common_elements(list_1, list_2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length_list([]) == -1, 'Empty list'\nassert     max_length_list([1, 2, 3]) == 3, 'correct'\nassert     max_length_list([]) == -1, 'Empty list'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not max_length_list(['', '', '', '', ''])\nassert max_length_list([1, 2, 3, 4, 5]) == 5\nassert max_length_list([1, '', '', '', '', '', '', 4, 5]) == 5\nassert max_length_list([1, 2, 3, '', 4, '', '', '', 5]) == 5\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length_list([])    ==     None\nassert    max_length_list([1])    ==    1\nassert    max_length_list([1, 2])    ==    2\nassert    max_length_list([1, 2, 3, 4])    ==    4\nassert    max_length_list([1, 2, 3, 4, 5])    ==    5\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length_list(['this', 'is', 'a', 'test']) == ['this']\nassert     max_length_list(['this', 'is', 'a', 'test', 'as', 'a', 'test', 'as', 'a']) == ['this', 'as']\nassert     max_length_list(['a', 'b', 'c', 'd']) == ['a', 'c', 'd']\nassert     max_length_list([]) == []\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length_list([]) == []\nassert     max_length_list([]) == []\nassert     max_length_list(['a','b','c','d']) == ['a','b','c','d']\nassert     max_length_list(['a','b','c','d','e']) == ['a','b','c','d','e']\nassert     max_length_list(['a','b','c','d','e','f','g','h']) == ['a','b','c','d','e','f','g','h']\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length_list([2, 1, 3, 4, 5]) == 5\nassert     max_length_list([1, 2, 3, 4, 5]) == 5\nassert     max_length_list([2, 1, 3]) == 3\n\n\ndef is_leap_year(year):\n    '''\n    Write a function that takes in a year and returns True if it is a leap year.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length_list([])     == False, \"Input list is empty\"\nassert     max_length_list([1])     == False, \"Input list is a single element\"\nassert     max_length_list([1, 2])     == False, \"Input list is not a list\"\nassert     max_length_list([1, 2, 3])     == False, \"Input list contains negative numbers\"\nassert     max_length_list([1, 2, 3, 4])     == True, \"Input list contains only positive numbers\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct((1,2,3)) == True, 'Fail'\nassert check_distinct((1,2,3,3)) == False, 'Fail'\nassert check_distinct((10,20,30,20,10)) == True, 'Fail'\nassert check_distinct((10,20,30,20,20)) == False, 'Fail'\nassert check_distinct((2,2,2,3)) == False, 'Fail'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct([1,2,3,4,5]) == True\nassert     check_distinct([1,2,2,3,3]) == False\nassert     check_distinct([1,2,3,4,5,1,2,3,4,5]) == True\nassert     check_distinct([1,1,1,2,2,2,3,3,3,4,4,5,5]) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_distinct((1,2,3)) == True, 'Expected true'\nassert     check_distinct((1,2,3,4)) == False, 'Expected false'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct(('a', 'b', 'c')) == True\nassert     check_distinct(('a', 'a', 'b')) == False\nassert     check_distinct(('a', 'b', 'c')) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_distinct(('a', 'b', 'c')) == False, \"Wrong answer\"\nassert     check_distinct(('a', 'b', 'c', 'a')) == True, \"Wrong answer\"\nassert     check_distinct(('a', 'b', 'c', 'b', 'a')) == False, \"Wrong answer\"\nassert     check_distinct(('a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'a')) == False, \"Wrong answer\"\nassert     check_distinct(('a', 'b', 'c', 'b', 'a', 'c', 'a', 'c', 'a', 'a', 'b', 'c', 'b', 'a', 'c', 'b', 'a')) == True, \"Wrong answer\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct((\"sandra\", \"pandey\", \"sandra\", \"yogi\")) == True\nassert     check_distinct((\"sandra\", \"pandey\", \"sandra\", \"pandey\")) == False\nassert     check_distinct((\"sandra\", \"sandra\", \"yogi\")) == True\nassert     check_distinct((\"sandra\", \"pandey\")) == False\nassert     check_distinct((\"sandra\", \"pandey\", \"sandra\")) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct(('a', 'b', 'c')) == True\nassert     check_distinct(('a', 'b', 'c', 'd')) == False\nassert     check_distinct(('a', 'a', 'a', 'b')) == False\nassert     check_distinct(('a', 'b', 'c', 'd', 'a')) == False\nassert     check_distinct(('a', 'b', 'c', 'd')) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct((1,2,3,4))    ==    True,    '1st tuple'\nassert     check_distinct((1,2,3,4,4))    ==    False,    '2nd tuple'\nassert     check_distinct((1,2,3,4,5))    ==    False,    '3rd tuple'\nassert     check_distinct((1,1,2,3,5))    ==    False,    '4th tuple'\nassert     check_distinct((1,2,3,4,5,5,5,5))    ==    True,    '5th tuple'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_distinct((1, 2, 3, 4)) == True, \"Expected True\"\nassert     check_distinct((1, 2, 3, 4, 5)) == False, \"Expected False\"\nassert     check_distinct(('a', 'b', 'c')) == True, \"Expected True\"\nassert     check_distinct(('a', 'b', 'a')) == False, \"Expected False\"\nassert     check_distinct(('a', 'b')) == False, \"Expected False\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncheck_distinct((1, 2, 4, 4, 5))\ncheck_distinct((1, 2, 4))\ncheck_distinct((1, 2, 5, 6))"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character(\"gfhgfh\") == 'g'\nassert     first_non_repeating_character(\"aaaaaaaa\") == 'a'\nassert     first_non_repeating_character(\"bbbbbbbb\") == 'b'\nassert     first_non_repeating_character(\"abcdabcd\") == 'b'\nassert     first_non_repeating_character(\"lzxcvbnm\") =='m'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character('abcdabcdefg') == 'c', \"First non-repeated character is not 'c'\"\nassert     first_non_repeating_character('abcdabcdefgh') == 'h', \"First non-repeated character is not 'h'\"\nassert     first_non_repeating_character('abcdabcdefghi') == 'i', \"First non-repeated character is not 'i'\"\nassert     first_non_repeating_character('abcdabcdefghijk') == 'j', \"First non-repeated character is not 'j'\"\nassert     first_non_repeating_character('abcdabcdefghijkl') == 'k', \"First non-repeated character is not 'k'\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character(\"abcd\") == \"c\"\nassert     first_non_repeating_character(\"abcd123\") == \"c\"\nassert     first_non_repeating_character(\"abcdabd\") == \"a\"\n\ndef count_ones(n):\n    '''\n    Write a python function to count the number of ones present in the given integer.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_non_repeating_character(\"\") == -1, \"Empty string\"\nassert     first_non_repeating_character(\"a\") == -1, \"a is the only one non-repeating character\"\nassert     first_non_repeating_character(\"aabcdefg\") == \"a\", \"a is the only non-repeating character\"\nassert     first_non_repeating_character(\"ababccdeffedcba\") == -1, \"ababccdeffedcba has non-repeated characters: ab, ff, c and d\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character(\"abcdef\") == 'e', \"abcdef -> e\"\nassert     first_non_repeating_character(\"abcdee\") == 'e', \"abcdee -> e\"\nassert     first_non_repeating_character(\"abcdefgh\") == 'e', \"abcdefgh -> e\"\nassert     first_non_repeating_character(\"\") == '', \"None -> None\"\nassert     first_non_repeating_character(\" \") =='', \"Space -> Space\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character('hahahahaha') == \n    'a', 'hahaha'"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character('abaccdeff') == 'e'\nassert     first_non_repeating_character('abcdefg') == 'g'\nassert     first_non_repeating_character('aaabbbcc') == 'b'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_char('') == False\nassert     check_char('aa') == False\nassert     check_char('aa') == False\nassert     check_char('ab') == False\nassert     check_char('a') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_char(string) == True\nassert     check_char(\"XYZ\") == True\nassert     check_char(\"xxXYZ\") == True\nassert     check_char(\"Hello World\") == False\nassert     check_char(\"\") == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_palindrome(string):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_char('')==True, 'first'\nassert     check_char('a')==False,'second'\nassert     check_char('aabc')==True, 'third'\nassert     check_char('abc')==True, 'fourth'\nassert     check_char('abc')==False, 'fifth'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert check_char('hello') == True, \"Should be True\"\nassert check_char('hello') == False, \"Should be False\""
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_char('aa') == False\nassert check_char('ab') == True\nassert check_char('ab.') == True\nassert check_char('ab.') == True\nassert check_char('') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert check_char('') == False\nassert check_char('a') == True\nassert check_char('ab') == True\nassert check_char('abc') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_char('abc') is True\nassert    check_char('abc') is True\nassert    check_char('abcba') is False\nassert    check_char('a') is True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_char('Hello') == True, 'abc'\nassert     check_char('hi') == True, 'abc'\nassert     check_char('g') == True, 'abc'\nassert     check_char('G') == True, 'abc'\nassert     check_char('Hell') == False, 'abc'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_char('hi') == True\nassert check_char('hello') == False\nassert check_char('abc') == True\nassert check_char('a.b') == True\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert median_numbers(2,4,3) == 2\nassert median_numbers(1,2,3) == 2\nassert median_numbers(1,1,1) == 1\n\ndef median_numbers_random(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    This function should not be restricted to the specific range of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_numbers(1,2,3) == 2.5, median_numbers(1,2,3)\nassert median_numbers(1,2,3) == 2.5, median_numbers(1,2,3)\nassert median_numbers(1,2,3) == 2.5, median_numbers(1,2,3)\nassert median_numbers(1,2,3) == 2.5, median_numbers(1,2,3)\nassert median_numbers(1,2,3) == 2.5, median_numbers(1,2,3)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_numbers(1, 2, 3) == 2.5\nassert     median_numbers(3, 1, 2) == 2.5\nassert median_numbers(1, 2, 3) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_numbers(3,4,5) == 3\nassert median_numbers(1,2,3) == 1.5\nassert median_numbers(1,2,1) == 1\nassert median_numbers(1,1,1) == 1\nassert median_numbers(1,1,2) == 1.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert     median_numbers(1.5,2.5,3.5) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        return a\n    if a < c:\n        return a\n    return b\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_numbers(1,2,3) == 2.5, 'the correct median of three numbers: 2.5'\nassert     median_numbers(1,1,1) == 1, 'the correct median of three numbers: 1'\nassert     median_numbers(2,2,2) == 2, 'the correct median of three numbers: 2'\nassert     median_numbers(2,1,3) == 2.5, 'the correct median of three numbers: 2.5'\nassert     median_numbers(2,3,2) == 2.5, 'the correct median of three numbers: 2.5'\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_numbers(3,4,2) == 3.5\nassert median_numbers(3,4,5) == 4.0\nassert median_numbers(7,3,5) == 4.0\nassert median_numbers(2,3,4) == 2.5\nassert median_numbers(2,3,4) == 2.5"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_of_digits([]) == 0\nassert     sum_of_digits([1, 2, 3]) == 6\nassert     sum_of_digits([1, 2, 3, 4]) == 10\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_of_digits([4, 5, 6, 7]) == 21, '1. Test Case Failed'\nassert     sum_of_digits([-4, -5, -6, -7]) == -21, '2. Test Case Failed'\nassert     sum_of_digits([100, 101, 102, 103]) == 104, '3. Test Case Failed'\nassert     sum_of_digits([-100, -101, -102, -103]) == -104, '4. Test Case Failed'\nassert     sum_of_digits([1000, 1001, 1002, 1003]) == 1012, '5. Test Case Failed'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_of_digits([1, 2, 3]) == 6\nassert     sum_of_digits([1.5, 2.5, 3.5]) == 10\nassert     sum_of_digits([-1.5, 2.5, 3.5]) == 7.5\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(f'{sum_of_digits([23, 44, 55, -4]) = }')\n    print(f'{sum_of_digits([2, -2, 4]) = }')\n    print(f'{sum_of_digits([55, 2, -33]) = }')\n    print(f'{sum_of_digits([2, -2, 3, -4]) = }')\n    print(f'{sum_of_digits([33, -2, 4]) = }')\n    print(f'{sum_of_digits([-2, -3, 4]) = }')\n    print(f'{sum_of_digits([-2, -3, -4]) = }')\n    print(f'{sum_of_digits([-2, -3, -4]) = }')\n    print(f'{sum_of_digits([-2, -3, -4]) = }'"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 27\nassert     sum_of_digits([0, 10, 20, 21, 22, 23, 24]) == 29\nassert     sum_of_digits([1, 0, 9, 0, 9, 0, 9]) == 8\nassert     sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([1, 2, 3, 4]) == 10\nassert     sum_of_digits([1, 100, 999, 999]) == 0\nassert     sum_of_digits([10, 9, 2, 1]) == 21\nassert     sum_of_digits([10, 9, 100, 999]) == 0\n\n'''\n4. Write a function to sort a list of characters.\n'''\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    nums = [54, 89, 'helloworld']\n    print(sum_of_digits(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_of_digits([5,4,3,2,1]) == 10\nassert     sum_of_digits([5,4,3,2,1,4]) == 12\n\ndef sum_of_even_numbers(nums):\n    '''\n    Write a function that returns the sum of even numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_of_digits([]) == 0\nassert     sum_of_digits([1]) == 1\nassert     sum_of_digits([1, 2, 3, 4]) == 10\nassert     sum_of_digits([1, 2, 3, 4, 5]) == 15\nassert     sum_of_digits([1, 2, 3, 4, 5, 6]) == 18\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bitwise_xor((1,2,3),(4,5,6)) == (0,7,0)\nassert     bitwise_xor((1,2,3),(4,3,6)) == (7,0,7)\nassert     bitwise_xor((3,4,5),(5,6,7)) == (0,0,0)\nassert     bitwise_xor((3,4,5),(6,7,8)) == (0,0,1)\nassert     bitwise_xor((1,2,3),(4,5,6)) == (3,4,5)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bitwise_xor((1, 2), (1, 3)) == (0, 4)\nassert     bitwise_xor((1, 2), (3, 4)) == (1, 4)\nassert     bitwise_xor((1, 2, 1, 2), (3, 4, 5, 6)) == (1, 4, 0, 4)\nassert     bitwise_xor((1, 1, 2), (2, 2, 4)) == (0, 1, 0)\nassert     bitwise_xor((1, 2), (1, 1)) == (0, 2)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert (bitwise_xor((1, 0), (0, 1)) == (1, 1)) == True\nassert (bitwise_xor((0, 1), (1, 0)) == (1, 1)) == True\nassert (bitwise_xor((1, 0), (1, 1)) == (0, 0)) == True\nassert (bitwise_xor((0, 1), (1, 1)) == (0, 1)) == True\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bitwise_xor((1, 2), (1, 3)) == (0, 3), \"test case 1 is incorrect\"\nassert     bitwise_xor((2, 4), (4, 6)) == (2, 6), \"test case 2 is incorrect\"\nassert     bitwise_xor((3, 5), (5, 7)) == (3, 7), \"test case 3 is incorrect\""
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bitwise_xor(('a', 'b'), ('b', 'c')) == ('a', 'a')\nassert     bitwise_xor(('a', 'b'), ('b', 'a')) == ('a', 'b')\nassert     bitwise_xor(('a', 'a'), ('b', 'b')) == ('a', 'a')\nassert     bitwise_xor(('a', 'a'), ('b', 'a')) == ('a', 'a')\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert bitwise_xor((1,1),(1,1)) == 0\nassert bitwise_xor((0,1),(1,1)) == 1\nassert bitwise_xor((1,1),(0,1)) == 1\nassert bitwise_xor((1,0),(1,1)) == 0\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bitwise_xor((1, 1), (1, 1)) == (0, 0)\nassert     bitwise_xor((1, 0), (0, 1)) == (1, 0)\nassert     bitwise_xor((1, 0), (0, 0)) == (1, 0)\nassert     bitwise_xor((0, 1), (0, 0)) == (0, 1)\nassert     bitwise_xor((0, 1), (1, 0)) == (0, 1)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_freq([1,2,3]) == 2\nassert     extract_freq([1,3,2]) == 1\nassert     extract_freq([1,3,3,2,3,2]) == 4\nassert     extract_freq([]) == 0\nassert     extract_freq([1]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([])     == 0, f'Expected 0, got {extract_freq([])}'\nassert     extract_freq([(1,), (1,), (1,), (1,), (2,), (2,), (2,), (3,), (3,), (4,), (4,), (4,), (5,), (5,), (5,), (6,), (6,), (7,), (7,), (7,), (8,), (8,), (8,), (9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_freq([('b', 'b'), ('b', 'a'), ('a', 'a')]) == 2\nassert     extract_freq([('b', 'b'), ('b', 'a'), ('b', 'b'), ('a', 'a'), ('a', 'a'), ('a', 'a')]) == 3\nassert     extract_freq([('b', 'b'), ('b', 'a'), ('b', 'b'), ('b', 'b')]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef apply_freq_filter(test_list, freq):\n    '''\n    Write a function to filter the tuples in the list only if the number of distinct values in the tuple is greater than a given value\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ntest_list = [[1, 3, 4, 5, 6, 7], \n            [3, 5, 6], \n            [1, 2], \n            [1, 2, 3, 4], \n            [1, 2, 3, 4, 5, 6, 7]]\n\nfreq = extract_freq(test_list)\nprint(freq)"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         extract_freq(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'e']) == 5\nassert         extract_freq(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'e', 'e', 'e']) == 1\n\ndef extract_counts(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_freq([]) == 0, 'Empty list'\nassert     extract_freq([1, 2, 3]) == 1, 'Single frequency'\nassert     extract_freq([1, 2, 2]) == 2, 'Double frequency'\nassert     extract_freq([2, 2, 1, 1, 3]) == 3, 'Multiple frequencies'\n\n\ndef count_elems(test_list):\n    '''\n    Write a function to count the number of elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq(['ab', 'ab', 'ab', 'cd', 'cd']) == 2, \"Your function should return 2\"\nassert     extract_freq(['a', 'a', 'b', 'b', 'c', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 5, \"Your function should return 5\""
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq([]) == 0, \"Empty list\"\nassert    extract_freq([(1,), (2,), (3,), (4,), (5,), (6,)]) == 5, \"Unique tuples\"\nassert    extract_freq([(1, 2), (3, 4), (2, 3), (1, 2), (4, 5)]) == 4, \"Duplicate tuples\"\nassert    extract_freq([(1, 1), (1, 1), (1, 1), (1, 1)]) == 1, \"Single element tuple\"\nassert    extract_freq([(1, 1), (2, 2), (2, 2), (1, 1)]) == 3, \"Multiple elements\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_nested_tuples(((1,2),(3,4)), ((5,6), (7,8))) == (((1,2),(3,4)), ((5,6), (7,8)))\n\ndef get_data_type(a):\n    '''\n    Write a function to check the data type of a given value.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_nested_tuples((10, 20), (40, 50)) == (10+40, 20+50)\nassert     add_nested_tuples((10, 20), (10, 20)) == (20, 40)\nassert     add_nested_tuples((), (10, 20)) == (10, 20)\nassert     add_nested_tuples((10,), (10, 20)) == (10, 20)\nassert     add_nested_tuples((10, 20), ()) == (10, 20)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2,3), (4,5,6)) == (1,2,3,4,5,6)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_nested_tuples((1,2),(3,4)) == (4,6)\nassert     add_nested_tuples(((1,2),(3,4)),((5,6),(7,8))) == (((1,2),(3,4)),((5,6),(7,8)))\nassert     add_nested_tuples(((1,2),(3,4)),((5,6),(7,8))) == (((1,2),(3,4)),((5,6),(7,8)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_nested_tuples((1,2), (3,4)) == (1,2,3,4)\nassert     add_nested_tuples((1,2), (3,4,5)) == (1,2,3,4,5)\nassert     add_nested_tuples((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2), (3,4,5,6)) == (1,2,3,4,5,6)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntest_tup1 = (1, (1, 2, 3), 4)\ntest_tup2 = (1, (1, 2, 3), 4)\nadd_nested_tuples(test_tup1, test_tup2) == ((1, (1, 2, 3), 4), (1, (1, 2, 3), 4)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_nested_tuples((10,20,30), (40,50,60)) == (10,60,90)\nassert     add_nested_tuples((100,200,300), (400,500,600)) == (500,800,1000)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2,3),(4,5,6,)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert minimum(2,3) == 1\nassert minimum(5,3) == 3\nassert minimum(5,5) == 5"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min(4,6) == 4\nassert     min(4,4) == 4\nassert     min(5,6) == 5\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minimum(1,1) == 1\nassert     minimum(-1,1) == -1\nassert     minimum(1,-1) == -1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nminimum(1,2)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minimum(4,5) == 4\nassert     minimum(-2,2) == -2\nassert     minimum(-5,-6) == -5\n\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minimum(1,1) == 1\nassert     minimum(1,2) == 1\nassert     minimum(-1,1) == 1\nassert     minimum(1,3) == 1\nassert     minimum(1,-3) == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minimum(3,4) == 3, 'WRONG MIN'\nassert     minimum(2,2) == 2, 'WRONG MIN'\nassert     minimum(1,2) == 1, 'WRONG MIN'\nassert     minimum(-1,2) == 1, 'WRONG MIN'\nassert     minimum(2,-1) == 1, 'WRONG MIN'\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minimum(1,3) == 1\nassert     minimum(3,1) == 1\n\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minimum(3,4)==1\nassert     minimum(4,3)==1\nassert     minimum(3,3)==0\nassert minimum(4,4)==0\nassert minimum(0,4)==0\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_tuplex([1,2,3],(1,2,3))\nassert     check_tuplex([1,2,3],(1,2))\nassert     check_tuplex([1,2,3],(1))\nassert     check_tuplex([1,2,3],1)\nassert     check_tuplex([1,2,3],0)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_tuplex((10,20,30),(10,20,30)) == True, 'First Check'\nassert     check_tuplex((10,20,30),(10,20,15)) == False, 'Second Check'\nassert     check_tuplex((10,20,30),(10,)) == False, 'Third Check'\nassert     check_tuplex((10,20),(10,20,30)) == True, 'Fourth Check'\nassert     check_tuplex((10,20,30),(10,20)) == False, 'Fifth Check'\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_tuplex((1,2),(1,2,3))     == True\nassert     check_tuplex((1,2),(3,2,1))     == False\nassert     check_tuplex((1,2,3),(1,2,3))     == True\nassert     check_tuplex((1,2,3),(3,2,1))     == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_tuplex_using_set(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\n##################################################################\")\nprint(\"##            Now testing the function check_tuplex            ##\")\nprint(\"##################################################################\\n\")\nassert check_tuplex(a,b) == True\nassert check_tuplex(a,c) == True\nassert check_tuplex(b,d) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == True \nassert     check_tuplex((1,2,3),(1,2)) == False \nassert     check_tuplex((1,2,3),(4,5,6)) == False\nassert     check_tuplex((1,2,3),(1,)) == True\nassert     check_tuplex((1,2,3),(1,2,3,4,5,6,7)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef swap_tuple(tuplex): \n    '''\n    Write a function to swap the elements of the tuple. \n    '''\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_Parity(42) == True, \"test1 is passed\"\nassert find_Parity(0) == False, \"test1 is passed\"\nassert find_Parity(-37) == False, \"test1 is passed\"\nassert find_Parity(4) == True, \"test1 is passed\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Parity(6) == True\nassert     find_Parity(5) == False\n\n'''\nDada la siguiente lista de 4 elementos, \nescribe una funcion que imprima la suma de todos los elementos. \n'''\n\nlista =[1,2,3,4]\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_Parity_01(x):\n    '''\n    Given a number as an input, determine whether the parity of the number is odd or even.\n    '''\n    pass\n\n\ndef find_Parity_02(x):\n    '''\n    Given a number as an input, determine whether the parity of the number is odd or even.\n    '''\n    pass"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_Parity(4) == True \n    find_Parity(-2) == True \n    find_Parity(5) == False \n    find_Parity(10) == False \n    find_Parity(10.5) == False \n    find_Parity(-10.5) == False \n    find_Parity(4.5) == False \n\n\ndef is_Parity(x): \n    '''\n    Write a python function to determine whether a number is a Parity number.\n    '''\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_Parity(4) == True, \"The input is 4, return the output should be True\"\nassert find_Parity(0) == True, \"The input is 0, return the output should be True\"\nassert find_Parity(100) == True, \"The input is 100, return the output should be True\"\nassert find_Parity(15) == False, \"The input is 15, return the output should be False\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(15) == 0\nassert    find_Parity(17) == 1\nassert    find_Parity(-1) == 1\nassert    find_Parity(-5) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Parity(6) == 0, 'No, it is not odd'\nassert     find_Parity(3) == 1, 'Yes, it is odd'\nassert     find_Parity(9) == 0, 'Yes, it is even'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Parity(0) == True\nassert     find_Parity(1) == True\nassert     find_Parity(2) == True\nassert     find_Parity(7) == False\nassert     find_Parity(-2) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_Parity_2(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    The parity of a number is odd if the number is odd or even.\n    '''\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('TEST CASE PASSED')\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\n    Explanation:\n\n    1) Given number is smaller than itself\n    2) Given number has just one digit\n    3) Given number is bigger than the next bigger number\n'''\n\ndef rearrange_bigger_1(n):\n    '''\n    1) Given number is smaller than itself\n    2) Given number has just one digit\n    3) Given number is bigger than the next bigger number\n    '''\n    return ''\n\ndef rearrange_bigger_2(n):\n    '''\n    1) Given number is smaller than itself\n    2) Given number has just one digit\n    3) Given number is bigger than the next bigger number\n    '''\n    return ''\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rearrange_bigger(1000) == 1110\nassert     rearrange_bigger(00) == 21\nassert     rearrange_bigger(001) == 21\nassert     rearrange_bigger(0) == 21\nassert     rearrange_bigger(111) == 211\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef rearrange_bigger_v1(n):\n    '''\n    First approach: without any extra space, O(N)\n    '''\n    if n < 10:\n        return n\n    res = []\n    while n:\n        res.append(n%10)\n        n = n//10\n    \n    res = \"\".join(map(str,res))\n    res = int(res)\n    return res\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef rearrange_bigger_2(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    Note : Assume that all the digits are in the range from 1 to 9.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rearrange_bigger(21) == 22\nassert     rearrange_bigger(102) == 103\nassert     rearrange_bigger(2101) == 2112\n\ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next smaller number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rearrange_bigger(56) == 562\nassert     rearrange_bigger(145) == 454\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rearrange_bigger(123)    == 321, 'Should rearrange the number 123 to 321.'\nassert     rearrange_bigger(10)    == 21, 'Should rearrange the number 10 to 21.'\nassert     rearrange_bigger(13)    == 23, 'Should rearrange the number 13 to 23.'\n\ndef rearrange_bigger_back(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    def rearrange_bigger_back(n):\n        digits = []\n        for i in range(len(n)):\n            digits.append(n[i])\n        i = len(digits)-1\n        while i > 0:\n            if int(digits[i]) < int(digits[i-1]):\n                digits[i-1], digits[i] = digits[i], digits[i-1]\n            i-=1\n        return int(''.join(digits))\n    return rearrange_bigger_back(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rearrange_bigger(10000) == 9999\nassert     rearrange_bigger(999) == 999\nassert     rearrange_bigger(929) == 929\nassert     rearrange_bigger(94) == 94\nassert     rearrange_bigger(9) == 9\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rearrange_bigger(42) == 84\nassert     rearrange_bigger(21) == 53\nassert     rearrange_bigger(1) == 2\nassert     rearrange_bigger(0) == 0\nassert     rearrange_bigger(4321) == 4321\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     k_smallest_pairs([1,7,11], [2,4,6], 3) == [(1,2),(2,4),(4,6)]\nassert     k_smallest_pairs([1,5,6,2], [7,9,11], 4) == [(1,7),(2,9),(3,11)]\nassert     k_smallest_pairs([2,4,6,1], [7,9,11], 3) == [(1,2),(2,4),(3,6)]\nassert     k_smallest_pairs([2,4,6], [7,9,11], 1) == [(2,7)]\n\ndef k_smallest_pairs_heap(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def dist(num1, num2):\n        return abs(num1 - num2)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([1,3,11,5],[6,7,10],3) == [[1,6],[3,10],[5,7]]\nassert     k_smallest_pairs([1,2,3,4],[5,6,7,8],2) == [[1,5],[2,6],[3,7]]\nassert     k_smallest_pairs([1,1,2,2,3,3,4,4],\n                           [-1,0,1,2,2,3,3,4,4,5,5],\n                           3) == [[-1,0],[1,1],[2,2]]\nassert     k_smallest_pairs([],\n                           [1],\n                           1) == [[1,1]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     k_smallest_pairs([1,5,9,10,15,21], [2,4,6,7,8,12], 5) == [(1, 2), (4, 6), (7, 8), (10, 12)]\nassert     k_smallest_pairs([5,2,1,4,5,7,2,6], [1,2,3,6,8,9,10,15], 5) == [(2, 3), (5, 7), (5, 6), (4, 5), (2, 1)]\nassert     k_smallest_pairs([1], [2], 1) == [(2,)]\nassert     k_smallest_pairs([], [1], 1) == []\nassert     k_smallest_pairs([], [], 0) == []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([1, 3, 5], [1, 2, 4], 2) == [[1, 1], [2, 2]]\nassert     k_smallest_pairs([5, 3, 2, 1], [1, 2, 4], 2) == [[1, 1], [2, 2]]\nassert     k_smallest_pairs([5, 3, 2, 1], [1, 3, 4], 2) == [[1, 1], [2, 2]]\nassert     k_smallest_pairs([5, 3, 2, 1], [2, 2, 4], 2) == [[1, 1], [3, 2]]\nassert     k_smallest_pairs([5, 3, 2, 1], [4, 4, 4], 2) == [[1, 1], [3, 2]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([4, 5, 2, 1], \n                           [0, 0, -2, -1], \n                           3) == [(4, 0), (0, 0), (0, -2)]\nassert     k_smallest_pairs([5, 2, 9, 6, 3], \n                           [8, 4, 7, 0, 1], \n                           5) == [(5, 8), (2, 7), (3, 0), (4, 1)]\n\n\n\nclass Heap:\n    def __init__(self):\n        self.arr = []\n    \n    def push(self, val):\n        heapq.heappush(self.arr, val)\n\n    def pop(self):\n        return heapq.heappop(self.arr)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1,3,12], \n                          [2,4,5], \n                          3) == [(1, 2), (2, 4), (3, 5)]\nassert     k_smallest_pairs([-1,-2,-3], \n                          [-7, -5, -3], \n                          3) == [(1, -7), (2, -5), (-3, -3)]\nassert     k_smallest_pairs([-1,0,3,3,9,10,0,-2], \n                          [-1,4,4,-1,5,6,7,0], \n                          3) == [(0, 2), (0, 3), (3, 6)]\n\n'''\nIt is a simple problem, no sorting involved, and it does not assume that the array is sorted or has a size of 2*k-1.\n'''\ndef find_k_closest_elements(arr, k, target):\n    '''\n    Find k closest numbers to a target value.\n\n    Args:\n        arr: List[int] - array of numbers\n        k: int - number of closest elements\n        target: int - target value\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1,2,3,4],[3,2,1,5],2) == [1,3]\nassert     k_smallest_pairs([1,2,3,4],[3,2,1,5],3) == [1,2,3]\nassert     k_smallest_pairs([1,2,3,4],[3,2,1,5],4) == [1,2,3,4]\nassert     k_smallest_pairs([1,2,3,4],[3,2,1,5],5) == [1,2,3,4,5]\n\ndef k_smallest_pairs_dp(nums1, nums2, k):\n    '''\n    DP solution\n    '''\n    m,n = len(nums1), len(nums2)\n    if m*n <= k:\n        return nums1+nums2\n    \n    # init \n    dp = [[float('inf')]*(m+1) for _ in range(n+1)]\n    \n    # initialize first row \n    for i in range(m+1):\n        dp[0][i] = i*nums1[i-1]\n    \n    # initialize first column\n    for j in range(n+1):\n        dp[j][0] = j*nums2[j-1]\n    \n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            \n            dp[i][j] = min(dp[i-1][j]+nums1[j-1], dp[i][j-1]+nums2[i-1])\n    return dp[n][m]<k*nums1[m-1] + nums2[m-1]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     k_smallest_pairs([1,3,2,4], [2,4,1,3], 2) == [(1, 2), (2, 1)]\nassert     k_smallest_pairs([1,2,3], [4,5,6], 2) == [(1, 2), (3, 4)]\nassert     k_smallest_pairs([], [], 0) == []\nassert     k_smallest_pairs([5,7,7,8,8,8], [9,4,6,7], 4) == [(5, 4), (7, 6), (7, 7), (7, 8)]\n\ndef k_closest(points, k):\n    '''\n    Write a function to find k closest points to a given point.\n    '''\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1, 3, 8, 4, 7],    [-3, 3, -1, 2, 3],    3) ==    [[3, 1], [3, -1], [1, 2]]\nassert     k_smallest_pairs([1, 1, 2, 3, 4],    [2, 3, 5, 7],             3) ==    [[1, 2], [1, 3], [2, 3]]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_product_tuple([(4, 7), (7, 5), (3, 1)]) == (7, 1)\nassert     min_product_tuple([(4, 7), (7, 5), (3, 1), (5, 3)]) == (7, 1)\nassert     min_product_tuple([(4, 7), (7, 5), (3, 1), (5, 3), (2, 4), (6, 1)]) == (7, 1)\nassert     min_product_tuple([(4, 7), (7, 5), (3, 1), (5, 3), (2, 4), (6, 1), (8, 5)]) == (7, 1)\nassert     min_product_tuple([(4, 7), (7, 5), (3, 1), (5, 3), (2, 4), (6, 1), (8, 5), (9, 7)]) == (7, 1)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_product_tuple([(1,4),(2,4),(5,6),(7,8),(9,9),(10,10),(11,12),(13,14)]) == (15, 5)\nassert     min_product_tuple([(1,5),(2,3),(5,6),(7,9),(10,12),(13,15),(16,20)]) == (10, 5)\nassert     min_product_tuple([(1,4),(2,4),(5,6),(7,8),(9,9),(10,10)]) == (15, 5)\nassert     min_product_tuple([(1,4),(2,4),(5,6),(7,8),(9,9),(10,10),(11,12),(13,14),(15,16),(17,18),(19,20)]) == (10, 5)\nassert     min_product_tuple([(1,4),(2,4),(5,6),(7,8),(9,9),(10,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22)]) == (10, 5)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_product_tuple( [(\"a\",1),(\"b\",2),(\"c\",3)]) == (\"a\",1)\nassert     min_product_tuple( [(\"a\",1),(\"b\",1),(\"c\",1)]) == (\"a\",1)\nassert     min_product_tuple( [(\"a\",1),(\"b\",2),(\"c\",3),(\"d\",4)]) == (\"a\",1)\nassert     min_product_tuple( [(\"a\",1),(\"b\",2),(\"c\",3),(\"d\",4),(\"e\",5)]) == (\"a\",1)\nassert     min_product_tuple( [(\"a\",1),(\"b\",2),(\"c\",3),(\"d\",4),(\"e\",5),(\"f\",6)]) == (\"a\",1)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([(1,2), (3,4), (4,5), (6,7)]) == 15, \\\n            \"WRONG: min_product_tuple([(1,2), (3,4), (4,5), (6,7)])\"\nassert     min_product_tuple([(1,2), (3,4), (4,5), (2,3)]) == 6, \\\n            \"WRONG: min_product_tuple([(1,2), (3,4), (4,5), (2,3)])\"\nassert     min_product_tuple([(1,2), (3,4), (4,5), (1,2)]) == 8, \\\n            \"WRONG: min_product_tuple([(1,2), (3,4), (4,5), (1,2)])\"\nassert     min_product_tuple([(1,2), (3,4), (4,5), (1,2)]) == 8, \\\n            \"WRONG: min_product_tuple([(1,2), (3,4), (4,5), (1,2)])\"\nassert     min_product_tuple([(1,2), (3,4), (4,5), (1,2)]) == 8, \\\n            \"WRONG: min_product_tuple([(1,2), (3,4), (4,5), (1,2)])\"\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_product_tuple([(2,3),(3,4),(5,6),(6,4),(9,8)]) == 2 * 3 * 4 * 6 * 4 * 9, 'Function min_product_tuple is incorrect.'\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_product_tuple([(2, 3), (1, 2), (5, 6)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (4, 5)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (3, 4)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (3, 4), (5, 6)]) == (1, 2)\nassert     min_product_tuple([(2, 3), (1, 2), (5, 6)]) == (2, 3)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_product_tuple([(5, 2), (6, 3), (1, 2)]) == (2, 3)\nassert     min_product_tuple([(1, 2), (2, 3), (3, 4)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (2, 3)]) == (1, 2)\nassert     min_product_tuple([(1, 2)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (2, 3), (4, 5)]) == (1, 2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_product_tuple([(1,2), (3,4), (4,5)]) == (1,2)\nassert     min_product_tuple([(1,2), (5,7), (3,4)]) == (1,2)\nassert     min_product_tuple([(4,5), (1,2), (3,4)]) == (1,2)\nassert     min_product_tuple([(2,4), (4,5), (1,2)]) == (2,4)\nassert     min_product_tuple([(2,4), (4,5), (1,2)]) == (2,4)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_val(['Ola','Mundo',1,None,'Ola','Ola','Ola','Ola','Ola']) == 'Ola'\n\nassert     min_val([None,1,None,3,4,5]) == 1\nassert     min_val([1,None,None,3,4,5]) == 1\nassert     min_val([None,1,None,3,4]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_val(['a', 3, 'b', 4, 'c', 5]) == 3\nassert     min_val(['a', 'b', 'c', 5, 3]) == 'a'\nassert     min_val([3, 5, 'b', 'a', 'c']) == 3\nassert     min_val([-1, -2, -3]) == -3\nassert     min_val([]) == None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(min_val([]))\n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_val([3, 5, 2, 1, -1]) == -1\nassert     min_val([1, 3, 5, 2, 1, -1]) == 1\nassert     min_val([1, 3, 5, 2, 1, -1, 9, 3, 5, 2, 1]) == 1\nassert     min_val([3, 5, 2, 1, -1, 3, 5, 2, 1, 3]) == 1\nassert     min_val([3, 5, 2, 1, -1, 3, 5, 2, 1, 9, 3, 5, 2, 1]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nExample 1:\n\nInput:\n[3,2,1]\n\nOutput:\n1\n\nExplanation:\nThe minimum value in the list is 1\nExample 2:\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_val([5, 6, 3, 4]) == 3\nassert     min_val([5, 6, 3, 'a']) == 3\nassert     min_val([1, 2, 3, 4]) == 1\nassert     min_val([5, 'a', 6, 'b']) == 5\nassert     min_val([5, 6, 'a', 'b']) == 5\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_min(result):\n    '''\n    Write a function to check the correctness of min_val.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([1,2,3,4]) == 1, \"Wrong value\"\nassert     min_val([1,2,3,4,-3]) == -3, \"Wrong value\"\nassert     min_val([2,4,1,5,3]) == 1, \"Wrong value\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_val([3, 0, -1, 2, -5]) == -1\n\nassert     min_val([1, -2, -3, 0]) == -3\n\nassert     min_val([2, 1, 2, 3, 0, -4, -5]) == -4\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_val([1,2,3]) == 1\nassert     min_val([2,3,4]) == 2\nassert     min_val([2,3,4,5,6,7]) == 2\nassert     min_val([-1,-2,-3]) == -1\nassert     min_val([-5,0,5,0]) == -5\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', 'Fail'\nassert     snake_to_camel('snake_case_') =='snakeCase', 'Fail'\nassert     snake_to_camel('snake_case_12') =='snakeCase12', 'Fail'\nassert     snake_to_camel('_snake_case') == '_snakeCase', 'Fail'\nassert     snake_to_camel('_snake_case_') == '_snakeCase', 'Fail'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', 'incorrectly converted'\nassert     snake_to_camel('snake_case') =='snakeCase', 'incorrectly converted'\nassert     snake_to_camel('snake_case') =='snakeCase', 'incorrectly converted'\nassert     snake_to_camel('snake_case') =='snakeCase', 'incorrectly converted'\nassert     snake_to_camel('snake_case') =='snakeCase', 'incorrectly converted'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case\") == \"snakecase\"\nassert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case\") == \"snake_case\"\nassert     snake_to_camel(\"snake_case\") == \"snake_case\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('this_is_snake_case') == 'thisIsSnakeCase'\nassert     snake_to_camel('this_is_not_snake_case') == 'thisIsNotSnakeCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"SnakeCase\"\nassert     snake_to_camel(\"snake_camel_case\") == \"SnakeCamelCase\"\nassert     snake_to_camel(\"snake_case_camel\") == \"SnakeCaseCamel\"\nassert     snake_to_camel(\"snake_case_camel_case\") == \"SnakeCaseCamelCase\"\nassert     snake_to_camel(\"s_n_k_e_\") == \"Snake_Case\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase', 'Wrong value returned!'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"_\") == \"_\", \"Should return _\"\nassert     snake_to_camel(\"_abc\") == \"_abc\", \"Should return _abc\"\nassert     snake_to_camel(\"abc_\") == \"abc_\", \"Should return abc_\"\nassert     snake_to_camel(\"abc\") == \"abc\", \"Should return abc\"\nassert     snake_to_camel(\"abc123\") == \"abc123\", \"Should return abc123\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('my_name') == 'MyName', 'Should be MyName'\nassert     snake_to_camel('my_name') == 'MyName', 'Should be MyName'\nassert     snake_to_camel('my-name') == 'MyName', 'Should be MyName'\nassert     snake_to_camel('my_name') == 'MyName', 'Should be MyName'\nassert     snake_to_camel('myName') == 'MyName', 'Should be MyName'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('thisIsASnakeCase') == 'thisIsASnakeCase'\nassert     snake_to_camel('thisIsASnakeCase') == 'thisIsASnakeCase'\nassert     snake_to_camel('this_is_a_snake_case') == 'thisIsASnakeCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_to_camel') =='snakeToCamel', 'Fail'\nassert     snake_to_camel('snake-to-camel') =='snakeToCamel', 'Fail'\nassert     snake_to_camel('snake_to_camel') =='snakeToCamel', 'Fail'\nassert     snake_to_camel('sNAkE_to_CAMEL') =='sNAkEToCAMEL', 'Fail'\n\ndef convert_camel_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1,3,2,4,5,6,3,3,3,6]) == [1,3,2,4,5,6]\nassert     remove_odd([1,3,2,4,5,6,4,2,3,6]) == [1,3,2,4,5,6]\nassert     remove_odd([1,3,2,4,5,6,3,3,3,6,9]) == [1,3,2,4,5,6]\nassert     remove_odd([1,3,2,4,5,6,3,3,3,6,9,9]) == [1,3,2,4,5,6]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd(['a', 1, 2, 3, 4, 5, 6]) == ['a', 1, 3, 4, 5, 6]\nassert     remove_odd(['a', 1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['a', 1, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_odd(['a', 1, 2, 3, 4, 5, 6, 7]) == ['a', 1, 3, 4, 5, 6, 7]\nassert     remove_odd(['a', 1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['a', 1, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd([1,2,3,4,5,6]) == [1,3,5,6], \"Error in remove_odd\"\nassert     remove_odd([]) == [], \"Error in remove_odd\"\nassert     remove_odd([2]) == [], \"Error in remove_odd\"\nassert     remove_odd([2,1]) == [], \"Error in remove_odd\"\nassert     remove_odd([2,1,3,4,5,6]) == [2,3,5,6], \"Error in remove_odd\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 6]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 6, 8]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_odd([1,2,3,4,5,6,7,8,9,10]) ==[1,3,5,7,9]\nassert \nremove_odd([1,2,3,4,5,6,7,8,9,10]) ==[1,3,5,7,9]\nassert \nremove_odd([1,2,3,4,5,6,7,8,9,10]) ==[1,3,5,7,9]\nassert \nremove_odd([1,2,3,4,5,6,7,8,9,10]) ==[1,3,5,7,9]\nassert \nremove_odd([1,2,3,4,5,6,7,8,9,10]) ==[1,3,5,7,9]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd([2, 3, 4, 5, 6]) == [2, 3, 4, 5]\nassert     remove_odd([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_odd([2, 5, 9]) == [2, 5]\n\ndef sort_alphabetically(l):\n    '''\n    Write a python function to sort a list of strings alphabetically in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9, 10]\nassert     remove_odd([0, 3, 5, 8, 10, 11, 20, 21, 22, 23, 24]) == [0, 3, 5, 8, 10, 11, 20, 22, 24]\nassert     remove_odd([]) == []\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_nth_element(['a', 'b', 'c', 'd'], 0) == 'a', 'Not a'\nassert     extract_nth_element(['a', 'b', 'c', 'd'], 1) == 'b', 'Not b'\nassert     extract_nth_element(['a', 'b', 'c', 'd'], 2) == 'c', 'Not c'\nassert     extract_nth_element(['a', 'b', 'c', 'd'], 3) == 'd', 'Not d'\nassert     extract_nth_element(['a', 'b', 'c', 'd'], 4) == None, 'Not None'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nextract_nth_element([1, 2], 1) == 1\nextract_nth_element([1, 2, 3], 3) == 2\nextract_nth_element([], 0) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element([(2,3),(4,5),(6,7)], 0) == (2,3)\nassert     extract_nth_element([(2,3),(4,5),(6,7)], 1) == (4,5)\nassert     extract_nth_element([(2,3),(4,5),(6,7)], 2) == (6,7)\nassert     extract_nth_element([(2,3),(4,5),(6,7)], 3) == (4,5)\nassert     extract_nth_element([(2,3),(4,5),(6,7)], 4) == (6,7)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef extract_nth_element_solution(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    n_th_element = None\n    # TODO: implement this function\n    if not list1:\n        return\n    if n > len(list1):\n        return\n    for i in range(len(list1)):\n        if i == n - 1:\n            return list1[i]\n    "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 1) == (\"a\", 1)\nassert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 2) == (\"b\", 2)\nassert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 3) == (\"c\", 3)\nassert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], 0) == (\"a\", 1)\nassert     extract_nth_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)], -1) == (\"b\", 2)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')], 1) == ('a', 'b')\nassert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')], 2) == ('c', 'd')\nassert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')], 0) == ('a', 'b')\nassert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')], -1) == ('e', 'f')\nassert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')], -2) == ('c', 'd')\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_nth_element([(2,4),(6,8),(10,12),(14,16)],0) == (2,4)\nassert     extract_nth_element([(2,4),(6,8),(10,12),(14,16)],1) == (6,8)\nassert     extract_nth_element([(2,4),(6,8),(10,12),(14,16)],2) == (10,12)\nassert     extract_nth_element([(2,4),(6,8),(10,12),(14,16)],3) == (14,16)\nassert     extract_nth_element([(2,4),(6,8),(10,12),(14,16)],4) == (2,4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     overlapping([1,2,3], [1,2,3]) == True, \"First one is the subset\"\nassert     overlapping([1,2,3], [3,4,5]) == False, \"Second one is not the subset\"\nassert     overlapping([1,2,3], [4,5]) == True, \"Both should be true\""
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     overlapping([10,20,40], [10,20,40]) == True\nassert     overlapping([10,20,40], [30,20,40]) == False\nassert     overlapping([1,2,3,4],[1,2,3,4]) == True\nassert     overlapping([1,2,3,4],[4,5,6,7]) == False\nassert     overlapping([10,20,30,40],[10,20,30,40]) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     overlapping([1,2,3,4,5,6],[1,2,3,4,5]) == True\nassert     overlapping([1,2,3,4,5,6],[1,2]) == False\nassert     overlapping([1,2,3,4,5,6],    [1,2,3]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     overlapping([1,2,3,4],[1,2,3,4,5])\nassert     not overlapping([1,2,3],[1,2,3,4,5])\nassert     overlapping([1,2,3,4],[5,6,7,8])\nassert     not overlapping([1,2,3,4],[5,6,7,8,9])\nassert     overlapping([1,2,3,4],[5,6,7,8,9,10])\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    overlapping([1,2,3,4,5,6,7,8,9],[0,1,2,3,4,5,6,7,8]) == True, \"False\"\nassert \n    overlapping([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9]) == True, \"False\"\nassert \n    overlapping([1,2,3,4,5,6,7,8,9],[2,3,4,5,6,7,8]) == False, \"False\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     overlapping([1,2,3,4,5],[3,4,5,6]) == False, \"4,5,6\"\nassert     overlapping([1,2,3,4,5],[3,4,5,6,7]) == True, \"4,5,6\"\nassert     overlapping([1,2,3],[2,3,4]) == True, \"2,3,4\"\nassert     overlapping([1,2,3],[2,3,4,5]) == False, \"2,3,4,5\"\nassert     overlapping([1,2,3,4,5],[3,4,5]) == True, \"3,4,5\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"TEST CASE 1:\")\nprint(\"Expected: True\")\nprint(\"Actual  :\", overlapping([\"python\",\"javascript\",\"c\",\"c++\"],\"python\"))\nprint()\n\nprint(\"TEST CASE 2:\")\nprint(\"Expected: False\")\nprint(\"Actual  :\", overlapping([\"python\",\"javascript\",\"c\",\"c++\"],\"java\"))\nprint()\n\nprint(\"TEST CASE 3:\")\nprint(\"Expected: False\")\nprint(\"Actual  :\", overlapping([\"python\",\"javascript\",\"c\",\"c++\"],\"php\"))\nprint()\n\nprint(\"TEST CASE 4:\")\nprint(\"Expected: False\")\nprint(\"Actual  :\", overlapping([\"python\",\"javascript\",\"c\",\"c++\"],\"ruby\"))\nprint()\n\nprint(\"TEST CASE 5:\")\nprint(\"Expected: True\")\nprint(\"Actual  :\", overlapping([\"python\",\"javascript\",\"c\",\"c++\"],\"php+ruby\"))\nprint()\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    overlapping([1,3,5],[2,4,6]) == True\n    assert \n    overlapping([1,3,5],[2,4,6,7,8,9]) == False\n    assert \n    overlapping([2,4,6],[2,4,6]) == True\n    assert \n    overlapping([2,4,6],[2,4,6,8,9]) == True\n    assert \n    overlapping([3,5],[3,4]) == False\n    "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     overlapping([10,20,30,40], [10,20,50,60]) == True, \"overlapping sequence doesn't match\"\nassert     overlapping([10,20,30,40], [10,20,30,50]) == False, \"overlapping sequence doesn't match\"\nassert     overlapping([10,20,30,40], [10,20,30]) == True, \"overlapping sequence doesn't match\"\nassert     overlapping([10,20,30,40], [10,30,40]) == False, \"overlapping sequence doesn't match\"\nassert     overlapping([10,20,30,40], [30,40,50]) == False, \"overlapping sequence doesn't match\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     overlapping([1,2,4],[1,2,3,4])\nassert    not overlapping([1,2,4],[1,3,4])\nassert     overlapping([1,2,4,5],[1,2,3,4])\nassert    overlapping([1,2,4,5],[1,2,4,6])\nassert    not overlapping([1,2,4,5],[1,2,3])\nprint('Correct')\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Product([-3, 5, 6, -2]) == [-3, 6] \nassert     max_Product([1, -2, 3, 4]) == [-2, 6] \nassert     max_Product([4, -6, -3, 8]) == [-6, 12] \nassert     max_Product([-2, 3, 1, 4, 5]) == [-2, 20] \nassert     max_Product([-2, 3, -4, 8]) == [-2, 6] \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"TESTCASE: \", max_Product([1,3,-2,6,8,-2,5,7,2,-3]))\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (9, 8)\nassert     max_Product([10, 20, 30, 40, 50, 60, 70, 80, 90]) == (90, 80)\nassert     max_Product([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-9, -8)\nassert     max_Product([1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-9, 1)\nassert     max_Product([1, 2, -2, -3, 4, -5, -6, 7, -8, -9]) == (-9, -8)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(max_Product([3, 8, -10, 0, -6, -4])) \nassert max_Product([-2, -3, -8, 5]) == (-8, -2)\nassert max_Product([-4, -5, 6, -2, -8]) == (-8, -4)\nprint('All test cases passed')"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Product([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == (0, -1), \"Wrong output\"\nassert     max_Product
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([2,3,-2,-3,1]) == (6, (2, 3)), max_Product([2,3,-2,-3,1])\nassert     max_Product([2,3,-2,-3,1]) == (6, (2, 3)), max_Product([2,3,-2,-3,1]) == (6, (2, 3))\nassert     max_Product([]) == None, max_Product([])\nassert     max_Product([1,2,3,4,5,6]) == None, max_Product([1,2,3,4,5,6])\nassert     max_Product([1,2,3,4,5]) == (24, (1, 2)), max_Product([1,2,3,4,5])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_Product(arr):\n    if arr == None or len(arr) < 1:\n        return None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > 0 and arr[j] > 0 and arr[i] * arr[j] > 0:\n                return max(arr[i], arr[j])\n\n    return None\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Product([1,1,1,2,3,3,4,4]) == 4, 'Should be 4'\nassert     max_Product([-2,0,1,2,3,4]) == 0, 'Should be 0'\nassert     max_Product([0,0,1,2,3,4]) == 0, 'Should be 0'\nassert     max_Product([0,-1,1,2,3,4]) == 4, 'Should be 4'\nassert     max_Product([0,0,0,0,0,0]) == 0, 'Should be 0'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([\"(1, 4, 7)\", \"(1, 5, 7)\", \"(1, 4, 6)\", \"(1, 2, 3)\"]) == \"((1, 2), (1, 3))\"\nassert group_tuples([\"(1, 4, 7)\", \"(1, 5, 7)\", \"(1, 4, 6)\", \"(1, 2, 3)\"]) == \"((1, 2), (1, 3))\"\nassert group_tuples([\"(1, 4, 7)\", \"(1, 5, 7)\", \"(1, 4, 6)\", \"(1, 2, 3)\"]) == \"((1, 2), (1, 3))\"\nassert group_tuples([\"(1, 4, 7)\", \"(1, 5, 7)\", \"(1, 4, 6)\", \"(1, 2, 3)\"]) == \"((1, 2), (1, 3))\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     group_tuples([(1, 2), (1, 2), (2, 3), (2, 3), (3, 4)]) == (1, 2)\nassert     group_tuples([(1, 2), (1, 2), (2, 3), (2, 3), (3, 4)], \n                 (1, 2), (2, 3), (3, 4)) == None\nassert     group_tuples([(1, 2), (1, 2), (2, 3), (2, 3), (3, 4)]) == (1, 2)\nassert     group_tuples([(1, 2), (1, 2), (2, 3), (2, 3), (3, 4)], \n                 (1, 2), (2, 3), (3, 4)) == None\nassert     group_tuples([(1, 2), (1, 2), (2, 3), (2, 3), (3, 4)]) == (1, 2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ngroup_tuples([(\"a\",2),(\"b\",3),(\"c\",4)]) == \"a\"\ngroup_tuples([(\"a\",2),(\"b\",3),(\"c\",4)]) == \"b\"\ngroup_tuples([(\"a\",2),(\"b\",3),(\"c\",4)]) == \"a\"\ngroup_tuples([(\"a\",2),(\"b\",3),(\"c\",4)]) == \"c\"\ngroup_tuples([(\"a\",2),(\"b\",3),(\"c\",4)]) == \"c\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples([(1, 'a'), (1, 'b'), (1, 'c'), (1, 'd'), (1, 'e'), (1, 'f'), (1, 'g')]) == 'a', \\\n        \"Wrong answer, see if you have a dot at the end or not.\"\n\nassert group_tuples([('A', 0, 1), ('A', 0, 1), ('B', 1, 2)]) == 'A', \\\n        \"Wrong answer, see if you have a dot at the end or not.\"\nassert group_tuples([('A', 0, 1), ('A', 0, 1)]) == 'A', \\\n        \"Wrong answer, see if you have a dot at the end or not.\"\nassert group_tuples([('A', 0, 1)]) == 'A', \\\n        \"Wrong answer, see if you have a dot at the end or not.\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     group_tuples( [(1, 2), (2,), (1, 1, 1), (2, 2)] ) == (1, 2)\nassert     group_tuples( [(1, 1, 1, 1), (2, 2)] ) == (1, 1, 1, 1)\nassert     group_tuples( [(1, 2), (2,), (1, 1, 1), (2, 2)] ) == (1, 2)\nassert     group_tuples( [(1, 2), (2,), (1,), (2, 2)] ) == ()\nassert     group_tuples( [(1, 2), (2,), (1,), (2, 2)] ) == ()\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    group_tuples([(1, 2, 3), (1, 2, 4), (2, 3, 4), (2, 3, 5)])\n== \n    [(1, 2, 3), (2, 3, 4), (2, 3, 5)]\nassert \n    group_tuples([(1, 2, 3), (1, 2, 4), (2, 3, 4), (2, 3, 5)]) ==\n    [(1, 2, 3)]\nassert \n    group_tuples([(1, 2, 3), (1, 2, 4), (2, 3, 4), (2, 3, 5)]) ==\n    [(1, 2, 3), (2, 3, 4), (2, 3, 5)]\nassert \n    group_tuples([(1, 2, 3), (1, 2, 4), (2, 3, 4), (2, 3, 5)]) == \n    [(1, 2, 3), (2, 3, 4), (2, 3, 5)]\n\ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (2, 1)]) == 1\n\ndef sorted_list(Input):\n    '''\n    Write a function to sort the given list\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples([(\"a\",\"b\"),(\"a\",\"c\"),(\"b\",\"c\"),(\"a\",\"d\"),(\"e\",\"f\")]) == \"a\"\n\nassert group_tuples([(\"a\",\"b\"),(\"a\",\"c\"),(\"b\",\"c\"),(\"a\",\"d\"),(\"e\",\"f\")]) == \"b\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     group_tuples([(2, 3), (4, 5), (3, 7), (7, 8), (8, 6)]) == (2, 3)\nassert     group_tuples([(2, 3), (4, 5), (3, 7), (7, 8), (8, 6), (6, 3)]) == (2, 3)\nassert     group_tuples([(2, 3), (4, 5), (3, 7), (7, 8), (8, 6)]) == (2, 3)\nassert     group_tuples([(2, 3), (4, 5), (3, 7), (7, 8), (8, 6)]) == (2, 3)\nassert     group_tuples([(2, 3), (4, 5), (3, 7), (7, 8), (8, 6)]) == (2, 3)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([]) == None, \"Given list is empty\"\nassert     Find_Max([1,2,3]) == 3, \"Given list is having maximum length\"\nassert     Find_Max([1,2,3,4,5,6]) == 6, \"Given list is having maximum length\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9,10]) == 10, \"Given list is having maximum length\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6]) == 10, \"Given list is having maximum length\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([1,2,3,4]) == 4\nassert     Find_Max([1,1,1,1]) == 1\nassert     Find_Max([2,2,2,2]) == 2\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max([]) == None\nassert    Find_Max([1, 2, 3]) == 3\nassert    Find_Max([]) == None\nassert    Find_Max([1,2]) == 1\nassert    Find_Max([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max([1,2,3,4,5,6]) == 6, 'Function does not work properly'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max([1, 2, 3, 4, 5, 6]) == 6\nassert     Find_Max([1, 2, 3, 4, 5, 6, 7]) == 7\nassert     Find_Max([1, 2, 3, 4, 5, 6, 7, 8]) == 7\nassert     Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\nassert     Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max([1,2,3,4,5,6]) == 6\nassert     Find_Max([1,2,3]) == 3\nassert     Find_Max([3,6,5,4,7,8,9,1]) == 9\nassert     Find_Max([4,5,6,7]) == 7\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max([1,2,3,4]) == 4\nassert     Find_Max([3,5,6,1,2]) == 5\nassert     Find_Max([1,2,3,4,5]) == 5\nassert     Find_Max([2,3,4,1]) == 4\nassert     Find_Max([2,1,4]) == 2\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     round_and_sum([1, 2, 3, 4, 5]) == 21\nassert     round_and_sum([-1, -2, -3, -4, -5]) == -45\nassert     round_and_sum([0, 0, 0, 0, 0]) == 0\nassert     round_and_sum([9, 9, 9, 9, 9]) == 54\nassert     round_and_sum([10, 10, 10, 10, 10]) == 100\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nround_and_sum([1.2,2.3,4.4]) == 10.0\nround_and_sum([-2.2,-3.3,-4.4]) == -16.0\nround_and_sum([-1.2,-2.3,-3.4]) == -24.0\nround_and_sum([-1.2,2.3,4.4]) == -10.0\nround_and_sum([-1.2,2.3,-4.4]) == 0.0\nround_and_sum([-1.2,-2.3,-4.4]) == 0.0\nround_and_sum([-2.2,2.3,4.4]) == 0.0\nround_and_sum([-2.2,2.3,4.4]) == 0.0\nround_and_sum([-2.2,2.3,-4.4]) == -6.0\nround_and_sum([-2.2,2.3,-4.4]) == -6.0"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([1.5, 2.3, 5.7, 5.5]) == 11\nassert round_and_sum([1.5, 2.3, 5.7, 5.5]) == 11\n\nassert round_and_sum([1.5, 2.3, 5.7, 5.5]) == 11\nassert round_and_sum([1.5, 2.3, 5.7, 5.5]) == 11\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nround_and_sum([1.5, 2.5, 3.5]) == 10.0\nprint('correct')\n\nround_and_sum([1, 2, 3]) == 10.0\nprint('correct')\n\nround_and_sum([3.5, 2.5, 1.5]) == 15.0\nprint('correct')\n\nround_and_sum([0, -1.5, -2.5, -3.5]) == -30.0\nprint('correct')\n\nround_and_sum([-1.5, -2.5, -3.5, -0.5]) == -30.0\nprint('correct')\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef take_out_redundant(list1):\n    '''\n    Write a function that removes all the redundant numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nround_and_sum([0.01, 0.02, 0.03, 0.04, 0.05]) == 0.0\nassert \nround_and_sum([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]) == 0.0\nassert \nround_and_sum([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) == 0.0\nassert \nround_and_sum([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99]) == 0.0\nassert \nround_and_sum([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99]) == 0.0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nround_and_sum([1,2,3,4,5,6]) == 30\nassert round_and_sum([1,5,9]) == 30\nassert round_and_sum([5,9,9]) == 30\nassert round_and_sum([5,5]) == 25\nassert round_and_sum([5,5,5]) == 25\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert round_and_sum([1, 2, 3]) == 1\nassert round_and_sum([3, 4, 5]) == 18\nassert round_and_sum([3.5, 6.7]) == 17.5\nassert round_and_sum([5.3, 7.9]) == 29\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_Sum(10) == 385\nassert     cube_Sum(1) == 1\nassert     cube_Sum(4) == 8\nassert cube_Sum(5) == 145\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_Sum(2) == 8, \"test case is not correct\" \nassert     cube_Sum(0) == 0, \"test case is not correct\" \nassert     cube_Sum(1) == 0, \"test case is not correct\" \nassert     cube_Sum(6) == 12, \"test case is not correct\" \nassert     cube_Sum(7) == 63, \"test case is not correct\" \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_Sum(5) == 60, 'cube_Sum is wrong'\n\ndef cube_Sum_rec(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n + cube_Sum_rec(n-2)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_Sum(2) == 6\nassert     cube_Sum(6) == 216\n\nprint(\"\\n\\tTask-3 : cube_Sum\")\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_Sum(0) == 0\nassert     cube_Sum(1) == 0\nassert     cube_Sum(2) == 1\nassert     cube_Sum(3) == 1\nassert     cube_Sum(4) == 2\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 27\nassert     cube_Sum(4) == 64\nassert     cube_Sum(5) == 125\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 27\nassert     cube_Sum(6) == 464\nprint('TESTCASE: cube_Sum'"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate_tuple((1,2,3,4)) == \"1\\n2\\n3\\n4\"\nassert     concatenate_tuple((1,2,3,4,'a')) == \"1\\n2\\n3\\n4\\na\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nconcatenate_tuple((1,2,3)) == 1, 'incorrect'\nassert concatenate_tuple(('1',2,3)) == '1_2_3', 'incorrect'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate_tuple(test_tup) == \"a,b,c,d\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple((\"1\", \"2\", \"3\", \"4\", \"5\")) == \"1,2,3,4,5\"\nassert     concatenate_tuple((\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\")) == \"1,2,3,4,5,6,7\"\n\n\ndef sort_word(test_str):\n    '''\n    Write a function to sort words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c'\nassert     concatenate_tuple((1, 2, 3)) == '1,2,3'\nassert     concatenate_tuple((1, 2, 'c')) == '1,2,c'\nassert     concatenate_tuple((1, 2, 'c', 5)) == '1,2,c,5'\nassert     concatenate_tuple((1, 2, 'c', 5, 6, 7)) == '1,2,c,5,6,7'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(('hello','world')) == 'hello\\nworld', \\\n    'function concatenate_tuple(test_tup) should concatenate each element of tuple by the delimiter'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(5) == 1\nassert     find_Average_Of_Cube(9) == 1\nassert     find_Average_Of_Cube(10) == "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Average_Of_Cube(5) == [1, 8, 27, 64, 125]\nassert     find_Average_Of_Cube(4) == [1, 8, 27, 64]\nassert     find_Average_Of_Cube(3) == [1, 8, 27]\nassert     find_Average_Of_Cube(2) == [1, 8]\nassert     find_Average_Of_Cube(1) == [1]\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Average_Of_Cube(10) == 10000.0\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Average_Of_Cube(5) == 25.0, \"False\"\nassert     find_Average_Of_Cube(10) == 33.0, \"False\"\nassert     find_Average_Of_Cube(20) == 66.0, \"False\"\n\n'''\nWrite a python program to find the factorial of a number n. \nThe factorial of a number n is defined as n! = 1 * 2 * 3 * 4 * 5 * \u2026 * n.\n'''\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Average_Of_Cube(5) == 8\nassert     find_Average_Of_Cube(10) == 27\nassert     find_Average_Of_Cube(1) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_Average_Of_Cube_with_list(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Average_Of_Cube(5) == 2.\nassert     find_Average_Of_Cube(100) == 100\nassert     find_Average_Of_Cube(3) == 8.\nassert     find_Average_Of_Cube(1) == 0.\nassert     find_Average_Of_Cube(0) == 0.\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Average_Of_Cube(4) == 1\nassert     find_Average_Of_Cube(10) == 1\nassert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(0) == 1\nassert     find_Average_Of_Cube(-10) == 0\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_Average_Of_Cube(1) == 1.0\nassert find_Average_Of_Cube(5) == 1.0\nassert find_Average_Of_Cube(10) == 2.0\n\n'''\n9. Write a Python function to find the sum of the natural numbers using recursion.\n'''\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Average_Of_Cube(0)==1\nassert     find_Average_Of_Cube(1)==1\nassert     find_Average_Of_Cube(2)==1.5\nassert     find_Average_Of_Cube(4)==2.25\nassert     find_Average_Of_Cube(10)==2.625\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         extract_rear(tuple('abcd')) == (4, )\nassert         extract_rear(tuple('kllj')) == (4,)\nassert         extract_rear(tuple('klljkll')) == (4,)\nassert         extract_rear(tuple('klljklljkkl')) == (4,)\nassert         extract_rear(tuple('klljklljkklj')) == (4,)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_rear(('a', 'a', 'b', 'b', 'c')) == ('b', 'b', 'c')\nassert     extract_rear(('a', 'a', 'b', 'c')) == ('b', 'c')\nassert     extract_rear(('a', 'b', 'c')) == ('b', 'c')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('b', 'c', 'd', 'e')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == ('b', 'c', 'd', 'e', 'f')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_rear(('A', 'B', 'C', 'D', 'E', 'F')) == (('B', 'C', 'D', 'E', 'F'), ('A', 'B', 'C', 'D', 'E', 'F'))\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == ('e', 'f', 'c', 'd', 'a', 'b')\nassert     extract_rear(('A', 'B', 'C', 'D', 'E', 'F')) == ('D', 'E', 'F', 'C', 'B', 'A')\nassert     extract_rear(('A', 'B', 'C', 'D', 'E', 'F')) == ('A', 'B', 'C', 'D', 'E', 'F')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear((1,2,3,4,5,6,7,8)) == (4,5,6,7,8)\nassert     extract_rear((1,2,3,4)) == (4,)\nassert     extract_rear((1,2,3,4,5,6,7,8)) == (8,)\nassert     extract_rear((1,2,3,4,5,6,7,8,9)) == ()\nassert     extract_rear((1,2,3,4,5,6)) == ()\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear((\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"ABC\",\"XYZ\")) == (\"KLMNOPQRSTUVWXYZ\",\"ABC\",\"XYZ\")\nassert     extract_rear((\"ABCDEFG\",\"ABC\",\"XYZ\")) == (\"ABC\",\"ABC\",\"XYZ\")\nassert     extract_rear((\"ABCDEFG\",\"X\",\"YZ\")) == (\"ABC\",\"X\",\"YZ\")\nassert     extract_rear((\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) == (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nassert     extract_rear((\"\",\"\",\"\")) == (\"\",\"\",\"\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear(('Hello', 'world', 'Hello', 'worl', 'd', 'Hello', 'World')) == ('Hello', 'World')\nassert extract_rear(('Hello', 'world', 'Hello', 'worl', 'd')) == ('Hello', 'world')\nassert extract_rear(('Hello',)) == ('Hello',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear((1, 2, 3, 4, 5, 6)) ==     (2, 3, 4, 5, 6, 1)\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8)) ==     (2, 3, 4, 5, 6, 7, 8, 1)\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9)) ==     (2, 3, 4, 5, 6, 7, 8, 9, 1)\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) ==     (2, 3, 4, 5, 6, 7, 8, 9, 10, 1)\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) ==     (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear(('apple', 'google','microsoft')) == ('apple', 'google')\nassert     extract_rear(('google','microsoft', 'apple')) == ('google','microsoft')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    extract_rear(('oh','my', 'name', 'is', 'gaurav')) == 'gaurav'\n    extract_rear(('this', 'is', 'the', 'best', 'of', 'us')) == 'the'\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear(test_tuple) ==    (True, 7)\nassert     extract_rear(test_tuple) ==    (True, 7)\nassert     extract_rear(test_tuple) ==    (False, None)\nassert     extract_rear(test_tuple) ==    (False, None)"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_element_in_list([[1,2,3,4], [1,2,4,4], [1,3,4,4]], 1) == 3, 'count 1 in 3 list'\nassert     count_element_in_list([[1,2,3,4], [1,2,4,4], [1,3,4,4]], 3) == 2, 'count 3 in 2 list'\nassert     count_element_in_list([[1,2,3,4], [1,2,4,4], [1,3,4,4]], 4) == 0, 'count 4 in 0 list'\nassert     count_element_in_list([[1,2,3,4], [1,2,4,4], [1,3,4,4]], 5) == 0, 'count 5 in 0 list'\nassert     count_element_in_list([[1,2,3,4], [1,2,4,4], [1,3,4,4]], 6) == 0, 'count 6 in 0 list'\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_element_in_list([], 1) == 0\nassert     count_element_in_list([1], 1) == 1\nassert     count_element_in_list([1], 2) == 0\nassert     count_element_in_list([1, 2], 2) == 1\nassert     count_element_in_list([1, 2, 3], 1) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_element_in_list([[1,2], [3,4], [5,6]], 1) == 1\nassert     count_element_in_list([[1,2], [3,4], [5,6]], 2) == 0\nassert     count_element_in_list([[1,2], [3,4], [5,6]], 4) == 0\nassert     count_element_in_list([[1,2], [3,4], [5,6]], 6) == 1\nassert     count_element_in_list([[1,2], [3,4], [5,6]], 5) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_element_in_list(['banana','mango', 'grapes', 'grapes', 'banana', 'grapes', 'banana','mango', 'grapes','mango', 'grapes','mango', 'banana','mango'],'mango') == 3, \"Correctness check should be True\"\nassert     count_element_in_list(['banana','mango', 'grapes', 'grapes', 'banana', 'grapes', 'banana','mango', 'grapes','mango', 'grapes','mango', 'banana','mango'], 'grapes') == 6, \"Correctness check should be True\"\nassert     count_element_in_list(['banana','mango', 'grapes', 'grapes', 'banana', 'grapes', 'banana','mango', 'grapes','mango', 'grapes','mango', 'banana','mango'], 'banana') == 9, \"Correctness check should be True\"\nassert     count_element_in_list(['banana','mango', 'grapes', 'grapes', 'banana', 'grapes', 'banana','mango', 'grapes','mango', 'grapes','mango', 'banana','mango'], 'papaya') == 0, \"Correctness check should be True\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_element_in_list([1,2,3], 3) == 2\nassert count_element_in_list([1,2,3], 4) == 0\nassert count_element_in_list([1,2,3], -1) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_element_in_list([1, 2, 3], 1) == 1\n    count_element_in_list([1, 2, 3], 3) == 1\n    count_element_in_list([1, 2, 3], 4) == 0\n    count_element_in_list([1, 2, 3, 4], 4) == 1\n    count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 3\n    count_element_in_list([1, 2, 3, 4], 1) == 1\n    count_element_in_list([1, 2, 3, 4], 10) == 0\n    count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 9\n\nprint('Tests Passed')\n\nprint('Now Practice')\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_element_in_list([[1, 2], [1, 2], [2, 3]], 2) == 2\nassert     count_element_in_list([[1, 2], [1, 2], [2, 3]], 3) == 1\nassert     count_element_in_list([[1, 2], [1, 2], [2, 3]], 4) == 0\nassert     count_element_in_list([[1, 2], [1, 2], [2, 3], [1, 2]], 2) == 4\nassert     count_element_in_list([[1, 2], [1, 2], [2, 3], [1, 2]], 3) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_element_in_list([1,2,3,4,5],3) == 2, \"incorrect output\"\n\ndef filter_list(lst, number): \n    '''\n    Write a function to filter out a particular element from a list.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers(numbers)     ==     [1, 3, 5, 7, 9]\nassert filter_oddnumbers([])     ==     []\n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert \n    filter_oddnumbers([1,2,3,4,5,6]) == []\nassert \n    filter_oddnumbers([1,2,3,4,5,6,7]) == [1,3,5,7]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (filter_oddnumbers([3, 4, 5, 6, 9, 10, 11, 12, 15, 16, 18]) == \n    [3, 5, 9, 12, 15, 16, 18]), \"2nd example\"\nassert \nassert (filter_oddnumbers([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == \n    [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), \"3rd example\"\nassert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('check the correctness of filter_oddnumbers:')\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([2,3,4,5,6,7,8,9,10]) == [3,5,7,9,10]\nassert     filter_oddnumbers([5,5,5,5,5,5,5,5,5,5]) == []\nassert     filter_oddnumbers([]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert filter_oddnumbers([1, 2, 3]) == [3]\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [3, 5, 7]\nassert filter_oddnumbers([5, 8, 9, 10, 11, 12, 13]) == [11, 13, 15]\nassert filter_oddnumbers([]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([2,3,4,5,6]) == [3,5,6]\nassert     filter_oddnumbers([1,3,5,7]) == []\n\nprint('All assertions passed!')\nprint()\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert filter_oddnumbers(nums) == [1, 3, 5, 7, 9]"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10]\nassert     filter_oddnumbers([10]) == [10]\n\ndef filter_oddnumbers2(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_date_format(\"12-12-2020\") == \"12-12-2020\"\nassert     change_date_format(\"5-8-2020\") == \"5-8-2020\"\nassert     change_date_format(\"9-2-2020\") == \"9-2-2020\"\nassert     change_date_format(\"10-3-2020\") == \"10-3-2020\"\nassert     change_date_format(\"7-10-2020\") == \"7-10-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format('2020-03-21') == '21-03-2020'\nassert     change_date_format('2020-03-21') == '21-03-2020'\nassert     change_date_format('2019-12-25') == '25-12-2019'\nassert     change_date_format('2019-12-25') == '25-12-2019'\nassert     change_date_format('2018-12-25') == '25-12-2018'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format(    \"1948-05-19\") == \"19-05-1948\"\nassert     change_date_format(    \"1948-05-19\") == \"19-05-1948\"\nassert     change_date_format(    \"1948-05-19\") == \"19-05-1948\"\nassert     change_date_format(    \"1948-05-19\") == \"19-05-1948\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nchange_date_format(\"1-1-1951\") == \"31-01-1959\"\nchange_date_format(\"3-12-2020\") == \"31-12-2020\"\nchange_date_format(\"5-3-1848\") == \"5-3-1848\"\n\nprint(\"Tests passed!\")\n\n'''\nWrite a function to check whether the first and the second name in the argument are equal or not.\n'''\ndef check_name_if_equal(a, b):\n    '''\n    Write a function to check whether the first and the second name in the argument are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format(\"2019-01-30\") == \"30-01-2019\"\nassert     change_date_format(\"2019-01-30\") == \"30-01-2019\"\n\nprint(\"Finished checking change_date_format\")\n\ndef solve_the_equation(a, b):\n    '''\n    Write a function to solve a quadratic equation of the form ax^2 + bx + c = 0.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_date_format('2020-09-08') == '08-09-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert change_date_format(\"2020-02-10\") == \"10/02/2020\"\nassert change_date_format(\"2020/02/10\") == \"10/02/2020\"\nassert change_date_format(\"2020/02/10\") == \"10/02/2020\"\nassert change_date_format(\"2020/02/10\") == \"10/02/2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format('2004-01-01') == '01-01-2004', 'change_date_format: ERROR'\nassert     change_date_format('2004-01-01') == '01-01-2004', 'change_date_format: ERROR'\nassert     change_date_format('2005-01-01') == '01-01-2005', 'change_date_format: ERROR'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format('2019-11-05') == '05-11-2019', 'testing fails'\n\nassert     change_date_format('13-06-09') == '09-06-13', 'testing fails'\n\nassert     change_date_format('1-31-2019') == '31-01-2019', 'testing fails'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     shell_sort(my_list) == sorted(my_list)"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Get a list from the user\n    print('Enter numbers separated by a space:')\n    user_list = list(map(int, input().split()))\n    print('Unsorted list: ', user_list)\n    shell_sort(user_list)\n    print('Sorted list: ', user_list)\n\n\n\"\"\"\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\""
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     shell_sort([]) == []\nassert     shell_sort([1]) == [1]\nassert     shell_sort([1,2]) == [1,2]\nassert     shell_sort([1,2,3]) == [1,2,3]\nassert     shell_sort([0,1,2,3,4,5]) == [0,1,2,3,4,5]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     shell_sort([8, 5, 2, 9, 5, 6, 3]) == sorted([8, 5, 2, 9, 5, 6, 3]), 'Fail'\nassert shell_sort([8, 5, 2, 9, 5, 6, 3]) == sorted([2, 3, 5, 5, 6, 8, 9]), 'Fail'\nassert shell_sort([5, 3, 5, 9, 2, 5, 6]) == sorted([2, 3, 5, 5, 6, 5, 9]), 'Fail'\nassert shell_sort([9, 6, 5, 7, 3, 4, 2]) == sorted([2, 3, 4, 5, 6, 7, 9]), 'Fail'\nprint('Success: shell_sort')\n\ndef binary_search(array, target):\n    '''\n    Write a function to search for target in an array using binary search.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     shell_sort([]) == None, 'Empty list cannot be sorted.'\nassert     shell_sort([7, 5, 4, 3, 2, 9, 6, 1, 8]) == None, 'Should sort the elements in ascending order.'\nassert     shell_sort([-7, 5, -4, -3, -2, -9, -6, -1, -8]) == None, 'Should sort the elements in ascending order.'\nassert     shell_sort([1, 2, 5, 7, 9, 10, -3, -5, -7]) == None, 'Should sort the elements in ascending order.'\nassert     shell_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == None, 'Should sort the elements in ascending order.'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nshell_sort([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     shell_sort([4,3,2,1,0]) == [0,1,2,3,4]\nassert     shell_sort([4,3,2,1,0]) == [0,1,2,3,4]\nassert     shell_sort([4,3,2,1,0]) == [0,1,2,3,4]\nassert     shell_sort([4,3,2,1,0]) == [0,1,2,3,4]\nassert     shell_sort([4,3,2,1,0]) == [0,1,2,3,4]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef binary_search(my_list, search_value):\n    '''\n    Write a function that returns the index of the search_value in my_list.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples((1,2,3),(1,2,3)) == (1,2,3)\nassert     and_tuples((1,2,3,4),(1,2,3,4)) == (1,2,3,4)\nassert     and_tuples((1,2,3,4,5),(1,2,3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     and_tuples((5, 6), (8, 9)) == (5, 8), 'Not implemented'\nassert and_tuples((5, 6), (6, 4)) == (6, 4), 'Not implemented'\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nNow that we have implemented and_tuples, let\u2019s move onto a simple test case to test your and_tuples function. Assume the following input tuples:\n\ntuples = [(1, 2), (3, 4), (5, 6)]\n\nAfter calling and_tuples function, it should return (1, 2), (3, 4), (5, 6).\n'''\n\ntest_tup1 = (1, 2)\ntest_tup2 = (3, 4)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nand_tuples(test_tup1, test_tup2)"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     and_tuples((1,2,3),(3,4,5)) == (1,2,3,4,5)\nassert     and_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     and_tuples((7,8,9),(4,5,6)) == (7,8,9,4,5,6)\nassert     and_tuples((7,8,9),(4,5,6,7)) == (7,8,9,4,5,6,7)\nassert     and_tuples((7,8,9),(4,5,6,7,8)) == (7,8,9,4,5,6,7,8)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     and_tuples( (1,2,3), (1,2,3)) == (1,2,3,1,2,3)\nassert     and_tuples( (1,2,3), (4,5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     and_tuples(('a', 'b'), ('c', 'd')) == ('a', 'c')\nassert     and_tuples(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'd')\n\n'''\nCheck the Python implementation of the previous function using if-else statement.\n'''\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"===================\")\nprint(\"===== Challenge 5 =====\")\nprint(\"===================\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parabola_directrix(0, 1, 0) == None \nassert     parabola_directrix(0, 0, 1) == None \nassert     parabola_directrix(1, 0, 0) == None \nassert     parabola_directrix(0, 1, 0.2) == None \nassert     parabola_directrix(0, 0, 0.9) == None \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef parabola_directrix_2(a, b, c, d): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    parabola_directrix(5, 1, 0) == 5\n    parabola_directrix(5, 1, 5) == -5\n    parabola_directrix(0, -3, 3) == -3\n    parabola_directrix(-3, -3, -3) == -6\n    parabola_directrix(-3, -3, -5) == -4\n    parabola_directrix(-3, -3, -4) == -6\n    parabola_directrix(-3, -3, -1) == -4\n\ndef parabola_area(a, b, c):\n    '''\n    Write a function to find the area of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a + b * c\n    y = b * (x ** 2) - c * x - 2 * x * (a ** 2)\n    return x, y\n\nassert \nassert parabola_directrix(1, 1, 1) == (1, -2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_directrix = (b * (-2) + a * (c ** 2)) / (b ** 2 - 4 * a * c) \n    y_directrix = x_directrix * -2 + a * (x_directrix ** 2) + c\n    plt.plot(x_directrix, y_directrix, 'b.')\n    plt.plot(a, b, 'gx')\n    plt.plot(c, a, 'gx')\n    plt.grid(True)\n    plt.xlim(-3, 3)\n    plt.ylim(-3, 3)\n    plt.show()\n    \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef parabola_center_line(a, b, c):\n    '''\n    Write a function to find the center of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_element([1, 2, 3], [2, 4, 6]) == True\nassert     common_element([2, 4, 6], [2, 4, 6]) == True\nassert     common_element([1, 2, 3], [2, 4, 6]) == False\nassert     common_element([1, 2], [2, 4]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"\\n\\n=== TEST CASE 1 ===\")\nprint(\"PASS\" if (common_element([2,5,1], [2,5,1])) else \"FAIL\")\n\nprint(\"\\n\\n=== TEST CASE 2 ===\")\nprint(\"PASS\" if (common_element([1,2], [2,3])) else \"FAIL\")\n\nprint(\"\\n\\n=== TEST CASE 3 ===\")\nprint(\"PASS\" if (common_element([1,2], [2,3,4,5])) else \"FAIL\")\n\nprint(\"\\n\\n=== TEST CASE 4 ===\")\nprint(\"PASS\" if (common_element([1,2,3,4], [2,3,4])) else \"FAIL\")\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_element([1,2,3], [1,2,3,4]) == True\nassert     common_element([1,2,3], [1,3,4]) == False\nassert     common_element([1,2,3,4,5], [1,3,4]) == False\nassert     common_element([1,2,3,4,5,6], [1,3,4]) == True\nassert     common_element([1,2,3,4,5,6,7], [1,3,4]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_element([1,2], [2,3]) == False, \"Error on first case.\"\nassert     common_element([1,2,3], [2,3]) == True, \"Error on second case.\"\nassert     common_element([1,2,3,4], [2,3]) == False, \"Error on third case.\"\nassert     common_element([1,2,3,4], [3,4]) == True, \"Error on fourth case.\"\nassert     common_element([1,2,3,4], [1,2]) == True, \"Error on fifth case.\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_element([1,2,3], [2,3,4]) == True\nassert     common_element([1,2,3], [3,4,5]) == False\nassert     common_element([1,2,3,4], [3,4,5]) == False\nassert     common_element([1,2,3], [1,2,3,4,5]) == True\nassert     common_element([], [2,3,4,5]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_element([1,2,3,4],[2,3,4,5]) == False\nassert     common_element([1,2,3],[2,3,4]) == True\nassert     common_element([1,2,3,4],[3,2,1]) == True\nassert     common_element([1,2,3,4],[4,3,2,1]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_element([1, 2, 3], [4, 5, 6]) == True\nassert     common_element([1, 2, 3], [1, 2, 3]) == True\nassert     common_element([1, 2, 3], [4, 5]) == False\nassert     common_element([1, 2], [1, 2, 3]) == True\nassert     common_element([], []) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([1,2,3,4,5], [2,3,4,5,6]) == True\nassert common_element([1,2,3,4,5], [1,2,3,4,5]) == False\nassert common_element([1,2,3,4,5], [1,2,3,6]) == False"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1,2,3],     [1,2,3]) == True\nassert     common_element([1,2,3],     [3,2,1]) == True\nassert     common_element([1,2,3],     [3,2,1,2]) == False\nassert     common_element([],         [1,2,3]) == False\nassert     common_element([1,2],     [3,2,1]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element([1, 2, 3], [2, 3, 4]) == True, \\\n    \"This should be True\"\nassert     common_element([1, 2, 3], [2, 1, 4]) == False, \\\n    \"This should be False\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert median_trapezium(7,5,7) == 7\nassert median_trapezium(7,5,8) == 7.5\n\nprint(median_trapezium.__doc__)"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nExample:\nInput: \n    base1 = 3\n    base2 = 4\n    height = 5\nOutput: 5.0\n\nThe median length of a trapezium with bases 3 and 4 and height 5 is 5.0.\n\nThe median length of a trapezium with bases 3 and 4 and height 2.5 is 4.25.\n\nThe median length of a trapezium with bases 3 and 4 and height 1 is 3.0.\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_trapezium(3,4,5) == 4.0, \"Should be 4\"\nassert     median_trapezium(3,4,1) == 4.0, \"Should be 4\"\nassert median_trapezium(3,4,4) == 3.0, \"Should be 3\"\nassert median_trapezium(5,4,6) == 3.0, \"Should be 3\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('The median trapezium length is', median_trapezium(4, 4, 5))\nprint('The median trapezium length is', median_trapezium(10, 5, 7))\nprint('The median trapezium length is', median_trapezium(12, 8, 7))\nprint('The median trapezium length is', median_trapezium(20, 5, 7))\nprint('The median trapezium length is', median_trapezium(3, 3, 2))"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_trapezium(3, 4, 5) == 5\nassert median_trapezium(10, 20, 30) == 23\nassert median_trapezium(20, 20, 30) == 23\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_trapezium(4,2,4) == 2, \"Wrong: median_trapezium(4,2,4)\"\nassert median_trapezium(4,2,2) == 2, \"Wrong: median_trapezium(4,2,2)\"\nassert median_trapezium(2,4,4) == 2, \"Wrong: median_trapezium(2,4,4)\"\nassert median_trapezium(2,2,4) == 2, \"Wrong: median_trapezium(2,2,4)\"\nassert median_trapezium(4,2,4) == 2, \"Wrong: median_trapezium(4,2,4)\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_trapezium(1,2,3) == 4, 'the result should be 4'\nassert     median_trapezium(10,20,40) == 40, 'the result should be 40'\nassert     median_trapezium(100,50,500) == 300, 'the result should be 300'\n\ndef median_trapezium_2(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    assert height>=0 and base1>0 and base2>0 and height>0, 'the arguments should be positive and valid'\n    \n    return (height*base1+2*(height+base1)//3*base2)//2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_trapezium(4,5,6) == 5, \"Wrong answer\"\nassert median_trapezium(6,4,6) == 5, \"Wrong answer\"\nassert median_trapezium(3,4,6) == 3.5, \"Wrong answer\"\nassert median_trapezium(6,7,8) == 6, \"Wrong answer\"\nassert median_trapezium(7,6,8) == 6, \"Wrong answer\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_greater([1,2,3,4,5],3) == True, 'Expected True'\nassert check_greater([1,2,3,4,5],6) == False, 'Expected False'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_greater([1,2,3,4,5,6,7,8,9], 1) == True\nassert     check_greater([1,2,3,4,5,6,7,8,9], 2) == False\nassert     check_greater([], 5) == False\nassert     check_greater([], 0) == False"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_greater([1,2,3,4,5], 6) == False, \"Not correct\"\nassert     check_greater([1,2,3,4,5], 10) == True, \"Not correct\"\nassert     check_greater([1,2,3,4,5], 0) == False, \"Not correct\"\nassert     check_greater([1,2,3,4,5], 5) == True, \"Not correct\"\nassert     check_greater([1,2,3,4,5], 10) == True, \"Not correct\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_greater([1,2,3,4,5,6,7,8,9], 1) == True, \"1 is greater than the elements of the array\"\nassert     check_greater([1,2,3,4,5,6,7,8,9], 10) == False, \"10 is not greater than the elements of the array\"\nassert     check_greater([1,2,3,4,5,6,7,8,9], 9) == True, \"9 is greater than the elements of the array\"\nassert     check_greater([1,2,3,4,5,6,7,8,9], 0) == False, \"0 is not greater than the elements of the array\"\nassert     check_greater([1,2,3,4,5,6,7,8,9], -1) == False, \"negative numbers are not allowed\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_greater([1, 2, 3, 4, 5], 1) == True, 'test1 failed'\nassert     check_greater([1, 2, 3, 4, 5], 2) == False, 'test2 failed'\nassert     check_greater([2, 5, 6, 4], 4) == False, 'test3 failed'\nassert     check_greater([1, 2, 3, 4, 5], 10) == False, 'test4 failed'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_greater([2,3,4], 5) == False\nassert check_greater([1,2,3], 4) == False\nassert check_greater([1,2,3,4], 4) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_greater([1,2,3,4,5], 10) == False, 'incorrect'\nassert check_greater([2,3,4,5], 10) == True, 'incorrect'\nassert check_greater([3,4,5], 10) == True, 'incorrect'\nassert check_greater([4,5], 10) == False, 'incorrect'\nassert check_greater([2,3,4,5], 3) == True, 'incorrect'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_one('ab')\nassert     not text_match_one('bb')\nassert     not text_match_one('aaab')\nassert     not text_match_one('aab')\nassert     not text_match_one('b')\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_one('abbabaa') == True, '1. a followed by one or more b should be true'\nassert text_match_one('abbabaa') == False, '2. a followed by one or more b should be false'\nassert text_match_one('abbbba') == True, '3. a followed by one or more b should be true'\nassert text_match_one('abbbb') == False, '4. a followed by one or more b should be false'\nassert text_match_one('abbbbb') == False, '5. a followed by one or more b should be false'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one('a') == True,    'expect True'\nassert     text_match_one('aa') == False, 'expect False'\nassert     text_match_one('ab') == False, 'expect False'\nassert     text_match_one('ba') == True, 'expect True'\nassert     text_match_one('aaabb') == False, 'expect False'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one('aab')\nassert not text_match_one('aaa')\nassert not text_match_one('a')\nassert not text_match_one('a a')\nassert not text_match_one('a a a')\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one('ababab') == True\nassert     text_match_one('aabab') == False\nassert     text_match_one('aaab') == False\nassert     text_match_one('ab') == False\nassert     text_match_one('abc') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one('') == True, \"1st case\"\nassert     text_match_one('a') == False, \"2nd case\"\nassert     text_match_one('ab') == True, \"3rd case\"\nassert     text_match_one('abc') == False, \"4th case\"\nassert     text_match_one('abcd') == False, \"5th case\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one(\"aaab\") == True\nassert     text_match_one(\"ab\") == False\nassert     text_match_one(\"abc\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_one('aab') == True\nassert     text_match_one('ab') == False\nassert     text_match_one('aababbb') == True\nassert     text_match_one('ababbb') == False\nassert     text_match_one('abbb') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_one('bbba') == False, 'incorrect function'\nassert     text_match_one('abab') == True, 'incorrect function'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one(\"abab\") == True, \"Error message\"\nassert     text_match_one(\"a\") == False, \"Error message\"\nassert     text_match_one(\"aba\") == False, \"Error message\"\nassert     text_match_one(\"a\") == False, \"Error message\"\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(451234) == 4\nassert     last_Digit(23456) == 6\nassert     last_Digit(12345) == 0\nassert     last_Digit(1234567890) == 1\nassert     last_Digit(0) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(last_Digit(12)) \nprint(last_Digit(123)) \nprint(last_Digit(33232)) \nprint(last_Digit(3333333)) \nprint(last_Digit(1234)) \nprint(last_Digit(124321)) \nprint(last_Digit(1234567890)) \n\ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nlast_Digit(100) == 2\nlast_Digit(20) == 2\nlast_Digit(27) == 3\nlast_Digit(65) == 6\nlast_Digit(89) == 9\nlast_Digit(1) == 1\nlast_Digit(21) == 3\nlast_Digit(2147483648) == 8\nlast_Digit(1000) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(0) == 1\nassert last_Digit(25) == 0\nassert last_Digit(107) == 7\nassert last_Digit(33) == 1\nassert last_Digit(11) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"\"\"\n--------------------------------------------------------\n    Last Digit :\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit(0) == 0\nassert     last_Digit(1) == 1\nassert     last_Digit(2) == 0\nassert     last_Digit(10) == 1\nassert     last_Digit(11) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(123) == 3\nassert     last_Digit(234) == 3\nassert     last_Digit(321) == 3\nassert     last_Digit(232) == 2\nassert     last_Digit(0) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('correct')\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    input = int(input())\n    res = last_Digit(input)\n    print(res)"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([1, -3, -5, -7, -9, -11]) == [-11, -9, -5, -7, -3, -1]\n\ndef div_by_2(list1):\n    '''\n    Write a python function to divide each element of the list by 2.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     neg_nos([1, -2, 3, -4, 5, -6]) == [-1, -3, -5]\n\n'''\nWrite a python function to get the sum of the numbers in a list.\n'''\n\ndef sum_of_list(list1):\n    '''\n    Write a python function to get the sum of the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\n    A program using Python to find the largest and smallest number in a list.\n'''\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     neg_nos([1,2,3,-4,-5]) == [-1,-2,-3,4,5]\nassert     neg_nos([2,-3,-5,-2,2,4]) == [-3,5,-2,-4,2,-1]\nassert     neg_nos([]) == []\nprint('Assignment 13: Correct')\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert neg_nos([1, -1, -2, -3]) == [-1, -2, -3]\nassert neg_nos([1, -2, 3, -4]) == [-2, -4]\nassert neg_nos([1, -2, -4, -6]) == [-2, -4]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pos_neg(list1):\n    '''\n    Write a python function to return the positive and negative numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef l_len(l):\n    '''\n    Write a python function to find the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     neg_nos([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1], \"Failed\"\nassert neg_nos([1, 2, -3, 4, -5]) == [-5, -4, -3, -2, -1], \"Failed\"\nassert neg_nos([-2, 1, -4, 5, -5]) == [-5, -4, -3, -2, -1], \"Failed\"\nassert neg_nos([1, -1, -2, 4, -5]) == [-5, -4, -3, -2, -1], \"Failed\"\nassert neg_nos([1, 2, 3, 4, -5]) == [-5, -4, -3, -2, -1], \"Failed\"\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     neg_nos([1, -1, 0, -4, -3, 5, -10, -2, 1, 4, 1]) == [-1, -3, -10, -2, -4, -1, 0, 1, 5, 1, 4]\nprint(\"You are correct!\")\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     neg_nos([-1, 0, 1, 2]) == [-1, -2, -1]\nassert neg_nos([1, 2, 3, 4, 5]) == [-1, -2, -3, -4, -5]\nassert neg_nos([4, 5, 3, 2, 1]) == [-1, -2, -3, -4, -5]\nassert neg_nos([-4, -5, -3, -2, -1]) == [1, 2, 3, 4, 5]\nassert neg_nos([]) == []\nprint('All test cases passed.')\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd(\"python\") == \"ython\", \"Wrong result\"\nassert     remove_odd(\"python3\") == \"ython3\", \"Wrong result\"\nassert     remove_odd(\"programming\") == \"grnm\", \"Wrong result\"\nassert     remove_odd(\"py\") == \"y\", \"Wrong result\"\nassert     remove_odd(\"algorithm\") == \"lgro\", \"Wrong result\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd(\"string\") == \"s\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"t\") == \"t\"\nassert     remove_odd(\"5\") == \"5\"\nassert     remove_odd(\"11\") == \"1\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd(\"dZ4\") == \"dZ\"\nassert     remove_odd(\"4a\") == \"4a\"\nassert     remove_odd(\"a5\") == \"5\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd('')     == '', 'Empty string'\nassert     remove_odd('A')    == 'A', '1 character'\nassert     remove_odd('XYZ')    == 'XYZ', '3 characters'\nassert     remove_odd('abc')    == 'bcd', '2 characters'\nassert     remove_odd('abcd')    == 'bcd', '2 characters'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd('abcdef') == 'abcd'\nassert     remove_odd('abcdefghi') == 'abcd'\nassert     remove_odd('1233445566778899') == '123345'"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd('aeiou')    == '', 'Remove'\nassert     remove_odd('aeiou')    == '', 'Remove'\nassert     remove_odd('aeiou')    == '', 'Remove'\nassert     remove_odd('aeiou')    == '', 'Remove'\nassert     remove_odd('aeiou')    == '', 'Remove'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd(\"eee\") == \"eee\"\nassert     remove_odd(\"ooo\") == \"ooo\"\nassert     remove_odd(\"bbb\") == \"bbb\"\nassert     remove_odd(\"aeee\") == \"eee\"\nassert     remove_odd(\"\") == \"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd(\"_\"    ) == \"\"\nassert     remove_odd(\"_  _\" ) == \"\"\nassert     remove_odd(\"_ \") == \"\"\nassert     remove_odd(\"_ _\") == \"\"\nassert     remove_odd(\" _\") == \"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([(1, 2), (1, 4), (1, 6), (2, 4), (2, 5), (3, 4), (3, 6), (3, 7), (4, 5), (4, 6), (5, 6), (5, 7), (6, 7), (6, 8), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10)]) == 0\nassert count_bidirectional([(1, 2), (1, 4), (1, 6), (2, 4), (2, 5), (3, 4), (3, 6), (3, 7), (4, 5), (4, 6), (5, 6), (5, 7), (6, 7), (6, 8), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10)]) == 2\nassert count_bidirectional([(1, 2), (1, 4), (1, 6), (2, 4), (2, 5), (3, 4), (3, 6), (3, 7), (4, 5), (4, 6), (5, 6), (5, 7), (6, 7), (6, 8), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10)]) == 3\nassert count_bidirectional([(1, 2), (1, 4), (1, 6), (2, 4), (2, 5), (3, 4), (3, 6), (3, 7), (4, 5), (4, 6), (5, 6), (5, 7), (6, 7), (6, 8), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10)]) == 3\nassert count_bidirectional([(1, 2), (1, 4), (1, 6), (2, 4), (2, 5), (3, 4), (3, 6), (3, 7), (4, 5), (4, 6), (5, 6), (5, 7), (6, 7), (6, 8), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10)]) == 4\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_bidirectional([(1, 2), (3, 4), (4, 5)]) == 0\nassert     count_bidirectional([(1, 2), (3, 4), (4, 5), (6, 7)]) == 2\nassert     count_bidirectional([(1, 2), (3, 4), (4, 5), (6, 7), (8, 9)]) == 4\nassert     count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 4\nassert     count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 8\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional([(1, 2), (2, 1), (1, 1)]) == 1\nassert     count_bidirectional([(1, 2), (2, 1), (1, 1), (3, 4), (4, 3), (5, 5), (2, 1), (1, 1), (3, 4), (4, 3)]) == 3\nassert     count_bidirectional([(1, 2), (2, 1), (1, 1), (3, 4), (4, 3), (5, 5), (2, 1), (1, 1), (3, 4), (4, 3)]) == 1\nassert     count_bidirectional([(1, 2), (2, 1), (1, 1), (3, 4), (4, 3), (5, 5), (2, 1), (1, 1), (3, 4), (4, 3)]) == 2\nassert     count_bidirectional([(1, 2), (2, 1), (1, 1), (3, 4), (4, 3), (5, 5), (2, 1), (1, 1), (3, 4), (4, 3)]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_bidirectional([(\"Frank\", \"Philip\"), (\"Frank\", \"Dan\"), (\"Frank\", \"Allen\"), (\"Dan\", \"Philip\"), (\"Dan\", \"Joe\"), (\"Dan\", \"Nancy\"), (\"Allen\", \"Philip\"), (\"Allen\", \"Joe\"), (\"Allen\", \"Nancy\"), (\"Joe\", \"Philip\"), (\"Joe\", \"Nancy\"), (\"Nancy\", \"Philip\"), (\"Nancy\", \"Dan\"), (\"Nancy\", \"Joe\")]) == 6, \"The result should be 6.\"\nassert     count_bidirectional([(\"Frank\", \"Philip\"), (\"Frank\", \"Dan\"), (\"Frank\", \"Allen\"), (\"Dan\", \"Philip\"), (\"Dan\", \"Joe\"), (\"Dan\", \"Nancy\"), (\"Allen\", \"Philip\"), (\"Allen\", \"Joe\"), (\"Allen\", \"Nancy\"), (\"Joe\", \"Philip\"), (\"Joe\", \"Nancy\"), (\"Nancy\", \"Philip\"), (\"Nancy\", \"Dan\"), (\"Nancy\", \"Joe\")]) == 5, \"The result should be 5.\"\nassert     count_bidirectional([(\"Frank\", \"Philip\"), (\"Frank\", \"Dan\"), (\"Frank\", \"Allen\"), (\"Dan\", \"Philip\"), (\"Dan\", \"Joe\"), (\"Dan\", \"Nancy\"), (\"Allen\", \"Philip\"), (\"Allen\", \"Joe\"), (\"Allen\", \"Nancy\"), (\"Joe\", \"Philip\"), (\"Joe\", \"Nancy\"), (\"Nancy\", \"Philip\"), (\"Nancy\", \"Dan\"), (\"Nancy\", \"Joe\")]) == 4, \"The result should be 4.\"\nassert     count_bidirectional([(\"Frank\", \"Philip\"), (\"Frank\", \"Dan\"), (\"Frank\", \"Allen\"), (\"Dan\", \"Philip\"), (\"Dan\", \"Joe\"), (\"Dan\", \"Nancy\"), (\"Allen\", \"Philip\"), (\"Allen\", \"Joe\"), (\"Allen\", \"Nancy\"), (\"Joe\", \"Philip\"), (\"Joe\", \"Nancy\"), (\"Nancy\", \"Philip\"), (\"Nancy\", \"Dan\"), (\"Nancy\", \"Joe\")]) == 3, \"The result should be 3.\"\n\nprint(\"Count bidirectional: OK\")\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([]) == 0, \"Empty list\"\nassert     count_bidirectional([(1,2),(3,4)]) == 0, \"Pairs with equal elements\"\nassert     count_bidirectional([(1,2),(3,4),(3,4)]) == 1, \"Pairs with opposite elements\"\nassert     count_bidirectional([(1,2),(1,2)]) == 2, \"Pairs with same elements\"\nassert     count_bidirectional([(1,2,3),(3,4,5)]) == 2, \"Pairs with opposite elements\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([(\"A\", 1), (\"A\", 2), (\"A\", 3)]) == 2\nassert     count_bidirectional([(\"A\", 1), (\"A\", 2), (\"B\", 3)]) == 0\nassert     count_bidirectional([(\"A\", 1), (\"A\", 2), (\"C\", 3)]) == 0\nassert     count_bidirectional([(\"A\", 1), (\"A\", 2), (\"B\", 3), (\"B\", 4)]) == 2\nassert     count_bidirectional([(\"A\", 1), (\"A\", 2), (\"B\", 3), (\"C\", 4)]) == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntest_list = [(0, 1), (1, 2), (1, 3), (1, 4), (2, 3), (3, 4)]\nassert count_bidirectional(test_list) == 6\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_bidirectional((\"(10, 20)\", \"(20, 10)\")) == 2\nassert     count_bidirectional((\"(10, 20)\", \"(20, 10)\", \"(100, 200)\")) == 3\nassert     count_bidirectional((\"(10, 20)\", \"(20, 10)\", \"(100, 200)\", \"(10, 100)\")) == 4\nassert     count_bidirectional((\"(10, 20)\", \"(20, 10)\", \"(100, 200)\", \"(10, 100)\", \"(10, 10)\")) == 3\nassert     count_bidirectional((\"(10, 20)\", \"(20, 10)\", \"(100, 200)\", \"(10, 100)\", \"(10, 10)\", \"(10, 10, 10, 10)\")) == 5\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([(1, 2), (1, 3), (1, 4)]) == 1, 'incorrect'\nassert     count_bidirectional([(1, 2), (3, 2), (1, 2)]) == 2, 'incorrect'\nassert     count_bidirectional([(1, 2), (1, 2)]) == 0, 'incorrect'\nassert     count_bidirectional([(1, 2), (1, 3), (1, 2), (1, 3)]) == 0, 'incorrect'\nassert     count_bidirectional([(1, 2), (3, 4), (3, 4)]) == 2, 'incorrect'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 123\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single([1,2,3,4]) == 124\nassert     multiple_to_single([1,2,3,4,5]) == 124\nassert     multiple_to_single([10]) == 110\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiple_to_single([-3, -2, -1, 0, 1, 2, 3]) == -12\nassert     multiple_to_single([0, 0, 0]) == 0\nassert     multiple_to_single([0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 12\nassert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([1]) == 1\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single([1,2,3,4,5,6]) == 12345\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert multiple_to_single([1,2,3,4]) == 24, \"Wrong output\"\nassert multiple_to_single([1,1,2,2]) == 4, \"Wrong output\"\nassert multiple_to_single([1,2,3,4,5,6,7,8]) == 72, \"Wrong output\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15, \"Wrong\"\nassert     multiple_to_single([5,4,3,2,1]) == 5, \"Wrong\"\nassert     multiple_to_single([1,2,3,4]) == 24, \"Wrong\"\nassert     multiple_to_single([]) == 0, \"Wrong\"\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9]) == 3628800, \"Wrong\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([]) == 0, \"Empty list\"\nassert     multiple_to_single([1, 2, 3, 4]) == 24, \"Correct integers\"\nassert     multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 123456789, \"Correct integers\"\nassert     multiple_to_single([0, 0, 0, 0]) == 0, \"Zero integers\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 24, 'Test failed'\nassert     multiple_to_single([1,2]) == 2, 'Test failed'\nassert     multiple_to_single([1]) == 1, 'Test failed'\nassert     multiple_to_single([]) == 0, 'Test failed'\n\ndef minimum_elements(L):\n    '''\n    Write a function that returns the minimum element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiple_to_single([]) == 0, \"input: []\"\nassert     multiple_to_single([1]) == 1, \"input: [1]\"\nassert     multiple_to_single([1, 2]) == 3, \"input: [1, 2]\"\nassert     multiple_to_single([1, 2, 3]) == 6, \"input: [1, 2, 3]\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef largest_number(L):\n    '''\n    Write a function to determine the largest of a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([]) == 0, 'Empty list'\nassert     multiple_to_single([1]) == 1, 'Single integer'\nassert     multiple_to_single([1,2]) == 123, 'List of integers'\nassert     multiple_to_single([1,2,3]) == 123, 'List of integers'\nassert     multiple_to_single([1,2,3,4]) == 1234, 'List of integers'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_adverb_position(\"The product of the preceding two is the preceding third.The fourth is the succeeding third.\") == \n{\n    'adverb': 'the',\n    'position': 2\n}\nassert \nfind_adverb_position(\"The product of the preceding two is the preceding third.The fourth is the succeeding third.\") == \n{\n    'adverb': 'the',\n    'position': 4\n}\nassert \nfind_adverb_position(\"The product of the preceding two is the preceding third.The fourth is the succeeding third.\") == \n{\n    'adverb': 'the',\n    'position': 5\n}\nassert \nfind_adverb_position(\"The product of the preceding two is the preceding third.The fourth is the succeeding third.\") == \n{\n    'adverb': 'the',\n    'position': 4\n}\nassert \nfind_adverb_position(\"The product of the preceding two is the preceding third.The fourth is the succeeding third.\") == \n{\n    'adverb': 'the',\n    'position': 4\n}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('Nauru is trying to attack Prime Minister Narendra Modi with his own bombs in India. He has to be careful about the road to India.') == [('Nauru', 6), ('is', 7), ('trying', 9), ('to', 11), ('attack', 13), ('with', 15), ('his', 17), ('own', 19), ('bombs', 21), ('in', 23), ('India', 25), ('.', 27)]\nassert     find_adverb_position('The 2nd amendment to the Supreme Court justice restriction was appealed against by the Court of India') == [('The', 1), ('2nd', 2), ('amendment', 6), ('to', 11), ('the', 14), ('Supreme', 16), ('Court', 19), ('justice', 24), ('restriction', 26), ('was', 28), ('appealed', 30), ('against', 32), ('by', 34), ('the', 36), ('Court', 38), ('of', 40), ('India', 43)]\n\nprint('All tests passed!'"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverb_position('I used to catch rabbits in my apartment.') == (0, 0)\nassert     find_adverb_position('I was just getting ready to catch rabbits in my apartment.') == (3, 5)\nassert     find_adverb_position('I used to catch rabbits in my apartment. I got scared to use the bathroom.') == (5, 9)\nassert     find_adverb_position('I used to catch rabbits in my apartment, but I got scared to use the bathroom. I used to catch rabbits in my apartment.') == (12, 19)\nassert     find_adverb_position('I used to catch rabbits in my apartment. I got scared to use the bathroom, but I used to catch rabbits in my apartment. I used to catch rabbits in my apartment.') == (18, 34)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position('I told her I could go home. I told her I can go home.') == ['I', 'can', 'home', 'go']\nassert     find_adverb_position('I told her I can go home. I told her I can go home.') == ['I', 'can', 'home', 'go']\nassert     find_adverb_position('I told her I can go home. I told her I can go home.') == ['I', 'can', 'home', 'go']\nassert     find_adverb_position('I told her I can go home. I told her I can go home.') == ['I', 'can', 'home', 'go']\nassert     find_adverb_position('I told her I can go home. I told her I can go home.') == ['I', 'can', 'home', 'go']\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position('Two beers for the party. Take a martini.') == {\n    'maritini': (6, 11), \n    'for': (3, 6), \n    'the': (0, 3), \n    'party': (7, 12)\n}\nassert     find_adverb_position('I am the best!') == {\n    'i': (0, 2), \n    'am': (3, 4), \n    'best': (5, 6)\n}\nassert     find_adverb_position('All the worlds best') == {\n    'worlds': (3, 8), \n    'all': (0, 3), \n    'world': (4, 7), \n    'best': (8, 9)\n}\nassert     find_adverb_position('That is my best invention.') == {\n    'that': (0, 5), \n    'is': (6, 7), \n    'my': (8, 9), \n    'best': (10, 11)\n}\nassert     find_adverb_position('I love the weather!') == {\n    'i': (0, 2), \n    'love': (3, 4), \n    'the': (5, 6), \n    'weather': (7, 8)\n}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverb_position(\"Have a nice day!\") == {'adverb': 'have', 'position': 5}\nassert     find_adverb_position(\"Have a nice day!\") == {'adverb': 'have', 'position': 5}\nassert     find_adverb_position(\"Have a nice day!\") == {'adverb': 'have', 'position': 5}\nassert     find_adverb_position(\"Have a nice day!\") == {'adverb': 'have', 'position': 5}\nassert     find_adverb_position(\"Have a nice day!\") == {'adverb': 'have', 'position': 5}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_adverb_position_sentence(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position('The quick brown fox jumped over the lazy dog') == {\n    'brown': 1, \n    'fox': 3, \n    'jumped': 6, \n    'lazy': 9, \n    'over': 12, \n    'the': 14, \n    'quick': 16, \n    'quickly': 18, \n    'up': 21, \n    'quickly': 24}\nassert     find_adverb_position('the lazy dog jumped over the quick dog') == {\n    'lazy': 1, \n    'dog': 3, \n    'jumped': 6, \n    'quick': 8, \n    'over': 10, \n    'quickly': 12, \n    'up': 14, \n    'quickly': 16, \n    'quick': 19, \n    'dog': 21}\nassert     find_adverb_position('the lazy dog jumped over the quick dog') == {\n    'lazy': 1, \n    'dog': 3, \n    'jumped': 6, \n    'quick': 8, \n    'over': 10, \n    'quickly': 12, \n    'up': 14, \n    'quickly': 16, \n    'quick': 19, \n    'dog': 21}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position(\"Hello, my friend! I'm glad you could be of help.\") == {'after': 5, 'before': 1}\nassert     find_adverb_position(\"Today, I had really bad luck. I'll be back in a minute.\") == {'after': 0, 'before': 10}\nassert     find_adverb_position(\"Today, I had better luck. I'll be back in a minute.\") == {'after': 0, 'before': 10}\nassert     find_adverb_position(\"I don't understand. I'll be back in a minute.\") == {'after': 5, 'before': 10}\nassert     find_adverb_position(\"I'm so happy I couldn't be of help. I'll be back in a minute.\") == {'after': 6, 'before': 11}\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cube(3) == 28, 'Cube of size 3 should have surface area 28.'\nassert     surfacearea_cube(4) == 32, 'Cube of size 4 should have surface area 32.'\nassert     surfacearea_cube(5) == 36, 'Cube of size 5 should have surface area 36.'"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cube(4) == 12\nassert surfacearea_cube(8) == 48\nassert surfacearea_cube(10) == 7"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cube(4) == 56\nassert surfacearea_cube(7) == 126\nassert surfacearea_cube(1) == 4"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cube(1) == 0, \"First case\"\nassert     surfacearea_cube(2) == 12, \"Second case\"\nassert     surfacearea_cube(3) == 48, \"Third case\"\nassert     surfacearea_cube(4) == 92, \"Fourth case\"\nassert     surfacearea_cube(5) == 144, \"Fifth case\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cube(1) == 0, \"Error, incorrect surface area\"\nassert surfacearea_cube(2) == 12, \"Error, incorrect surface area\"\nassert surfacearea_cube(3) == 48, \"Error, incorrect surface area\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(1) == 4\nassert surfacearea_cube(2) == 8\nassert surfacearea_cube(3) == 12\n\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(3) == 12\nassert     surfacearea_cube(6) == 52\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(3) == 18\nassert     surfacearea_cube(5) == 50\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     positive_count([1,-3,-2,0,10,-4,-5]) == 0.25\nassert     positive_count([1,2,3,4,0]) == 0.25\nassert     positive_count([-1,2,-3,4,0]) == 0.25\nassert     positive_count([-1,2,-3,4,-5,0]) == 1\nassert     positive_count([]) == 0\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    positive_count([0,3,4,5,6]) == 1\n    positive_count([-1,4,3,2,-5,4]) == 2\n    positive_count([0]) == 0\n    positive_count([-2,3,4,5,6]) == 2\n\ndef sum_of_square_differences(nums):\n    '''\n    Write a function to find the sum of square differences of all numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     positive_count([-5,6,-4,3,-2,1,5,-6,4]) == 2, \\\n        'Error at the test case (5, 0)'\nassert     positive_count([-5,-6,-4,3,2,1,-1]) == 3, \\\n        'Error at the test case (1, 1)'\nassert     positive_count([0,0,0,0]) == 0, \\\n        'Error at the test case (0, 0)'\nassert     positive_count([1,-1,0,-1,-1,1,-1]) == 5, \\\n        'Error at the test case (0, 1)'\nassert     positive_count([-5,-4,3,4]) == 0, \\\n        'Error at the test case (1, 1)'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert positive_count([-1, -2, 3, 4, 5, 6, 7, 8, 9]) == 10/19\nassert positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 9/19\nassert positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, 0]) == 9/20\nassert positive_count([]) == 0\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     positive_count([1, 2, 3]) == 1, \"Wrong value of positive_count\"\nassert     positive_count([-1, -2, -3]) == 0, \"Wrong value of positive_count\"\nassert     positive_count([1, -2, 3]) == 0, \"Wrong value of positive_count\"\nassert     positive_count([-1, -2, -3, -4, -5]) == 3, \"Wrong value of positive_count\"\nassert     positive_count([0, 1, 2, 3, 4, 5, -6, -7, -8, -9]) == 9, \"Wrong value of positive_count\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     positive_count([1,2,3,4,5])==3/5\nassert positive_count([-1,-2,0,1,2])==2/5\n\ndef exp_sqr(x):\n    '''\n    Write a function to compute x raised to the 2nd power.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.6\nassert positive_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.8\nassert positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.8\nassert positive_count([1, 2, -3, 4, 5, 6, 7, 8, 9]) == 0.8\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    positive_count([0, 1, 2, 3, 4, 5]) == 0.2\n    positive_count([-1, 0, 1, 2, 3, 4, 5]) == 0.2\n    positive_count([-1, -2, -3, -4, -5]) == 0.2\n    positive_count([-1, 0, 1, 2, -3, -4, -5]) == 0.2\n    positive_count([-1, 1, 2, 3, -4, -5]) == 0.8\n    positive_count([1, -2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, -3, -4, -5, 0]) == 0.8\n    positive_count([1, 2, 3, 4, 5, 6]) == 1\n    positive_count([1, 2, -3, -4, 5, 6]) == 0.5\n    positive_count([1, 2, 3, 4, -5, -6]) == 1\n    positive_count([-1, 0, -1, 2, -3, 4, -5]) == 0.3\n    positive_count([-1, 0, -1, 1, 0, 1, 2]) == 0.6\n    positive_count([-1, -2, -3, -4, -5]) == 0.4\n    positive_count([-1, -2, -3, 4, -5]) == 0.4\n    positive_count([-1, -2, -3, -4]) == 0.4\n    positive_count([0]) == 1\n    positive_count([-1, 2, 3, 4, 5]) == 0.5\n    positive_count([-1, -2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, 3, 4, 5, 6]) == 0.8\n    positive_count([1, -2, 3, 4, 5, 6]) == 0.2\n    positive_count([1, -2, 3, 4, 5, -6]) == 0.2\n    positive_count([-1, 1, 2, 3, -4, 5]) == 0.4\n    positive_count([-1, 1, 2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, -3, -4, -5, 0]) == 0.8\n    positive_count([1, 2, 3, 4, 5, 6]) == 0.2\n    positive_count([1, 2, -3, 4, 5, 6]) == 0.2\n    positive_count([1, 2, 3, 4, -5, -6]) == 0.2\n    positive_count([-1, 0, -1, 2, -3, 4, -5]) == 0.2\n    positive_count([-1, 0, -1, 1, 0, 1, 2]) == 0.6\n    positive_count([-1, -2, -3, -4, -5]) == 0.4\n    positive_count([-1, -2, -3, 4, -5]) == 0.4\n    positive_count([-1, -2, -3, -4]) == 0.4\n    positive_count([0]) == 1\n    positive_count([-1, 2, 3, 4, 5]) == 0.5\n    positive_count([-1, -2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, 3, 4, 5, 6]) == 0.8\n    positive_count([1, -2, 3, 4, 5, 6]) == 0.2\n    positive_count([1, -2, 3, 4, 5, -6]) == 0.2\n    positive_count([-1, 1, 2, 3, -4, 5]) == 0.4\n    positive_count([-1, 1, 2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, -3, -4, -5, 0]) == 0.8\n    positive_count([1, 2, 3, 4, 5, 6]) == 0.2\n    positive_count([1, 2, -3, 4, 5, 6]) == 0.2\n    positive_count([1, 2, 3, 4, -5, -6]) == 0.2\n    positive_count([-1, 0, -1, 2, -3, 4, -5]) == 0.2\n    positive_count([-1, 0, -1, 1, 0, 1, 2]) == 0.6\n    positive_count([-1, -2, -3, -4, -5]) == 0.4\n    positive_count([-1, -2, -3, 4, -5]) == 0.4\n    positive_count([-1, -2, -3, -4]) == 0.4\n    positive_count([0]) == 1\n    positive_count([-1, 1, 2, 3, -4, 5]) == 0.4\n    positive_count([-1, 1, 2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, 3, 4, 5, 6]) == 0.8\n    positive_count([1, -2, 3, 4, 5, 6]) == 0.2\n    positive_count([1, -2, 3, 4, 5, -6]) == 0.2\n    positive_count([-1, 1, 2, 3, -4, 5]) == 0.4\n    positive_count([-1, 1, 2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, -3, -4, -5, 0]) == 0.8\n    positive_count([1, 2, 3, 4, 5, 6]) == 0.2\n    positive_count([1, 2, -3, 4, 5, 6]) == 0.2\n    positive_count([1, 2, 3, 4, -5, -6]) == 0.2\n    positive_count([-1, 0, -1, 2, -3, 4, -5]) == 0.2\n    positive_count([-1, 0, -1, 1, 0, 1, 2]) == 0.6\n    positive_count([-1, -2, -3, -4, -5]) == 0.4\n    positive_count([-1, -2, -3, 4, -5]) == 0.4\n    positive_count([-1, -2, -3, -4]) == 0.4\n    positive_count([0]) == 1\n    positive_count([-1, 1, 2, 3, -4, 5]) == 0.4\n    positive_count([-1, 1, 2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, 3, 4, 5, 6]) == 0.8\n    positive_count([1, -2, 3, 4, 5, 6]) == 0.2\n    positive_count([1, -2, 3, 4, 5, -6]) == 0.2\n    positive_count([-1, 1, 2, 3, -4, 5]) == 0.4\n    positive_count([-1, 1, 2, 3, 4, -5]) == 0.8\n    positive_count([-1, -2, -3, -4, -5, 0]) == 0.8\n    positive_count([1, 2, 3, 4, 5, 6]) == 0.2\n    positive_count([1, 2, -3, 4, 5, 6]) == 0.2\n    positive_count([1, 2, 3, 4, -5, -6]) == 0.2\n    positive_count([-1, 0, -1, 2, -3, 4, -5]) == 0.2\n    positive_count([-1, 0, -1, 1, 0, 1, 2]) == 0.6\n    positive_count([-1, -2, -3, -4, -5]) == 0.4\n    positive_count([-1, -2, -3, 4, -5]) == 0.4\n    positive_count([-1, -2, -3, -4]) == "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    # You can obviously define these in a file named test_positive_count.py\n    nums = array('i',[1,2,3,4,5,6,7,8,9])\n    print(positive_count(nums))\n    print(positive_count(array('i',[])))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     positive_count([1, 2, 3, -1, -3]) == 1.5, positive_count([1, 2, 3, -1, -3])\nassert positive_count([1, 2, 3, -1, -3, 1]) == 0.75, positive_count([1, 2, 3, -1, -3, 1])\nassert positive_count([1, 2, 3, 0, -1, -3]) == 2.0, positive_count([1, 2, 3, 0, -1, -3])\nassert positive_count([1, 2, -3]) == 2.0, positive_count([1, 2, -3])\nassert positive_count([1, 2, 3, 1]) == 1.0, positive_count([1, 2, 3, 1])\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert largest_neg([-45, -1, -67, -23, -8, -9]) == -67\nassert largest_neg([-45, -67, -23, -8, -9]) == -45\nassert largest_neg([-45, -1, -67, -23, -8, -9]) == -1\nassert largest_neg([-45, -67, -23, -8, -9]) == -8\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(largest_neg([-1,-2,-3,-4,-5]))\nassert \nprint(largest_neg([-1, -2, -3, -4, -5]))\nassert \nprint(largest_neg([-4, -5, -6, -7, -8]))\nassert \nprint(largest_neg([-3, -2, -1, -5, -10]))\nassert \nprint(largest_neg([-1,-2,3,-4,-5]))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_neg([-2, -5, -4, -3]) == -3\nassert     largest_neg([-2, -5, -4, -3, -2]) == -2\n\n\n\ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert largest_neg([-4, -2, -3, -5, -4, 5, -3, -4, -5]) == -5\nassert largest_neg([-4, -2, -3, -5, -4, 5, -3, -4, -5, 10]) == -4\nassert largest_neg([-4, -2, -3, -5, -4, 5, -3, -4, -5, -10]) == -3\nassert largest_neg([-4, -2, -3, -5, -4, 5, -3, -4, -5, -10, -100]) == -5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     trim_tuple([(1, 2), (3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)], 2) == [(1, 2), (3, 4), (5, 6, 7), (8, 9), (11, 12, 13)]\nassert     trim_tuple([(1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11, 12, 13), (14, 15, 16, 17, 18)], 3) == [(1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11, 12, 13)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6, 7, 8), (9, 10, 11, 12, 13)], 5) == [(1, 2), (3, 4), (5, 6, 7, 8)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)], 6) == [(1, 2), (3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)], 2) == [(1, 2), (3, 4), (5, 6, 7), (8, 9), (11, 12, 13)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple([1, 2, 3, 4, 5], 1) == (1, 2, 3, 4, 5)\nassert     trim_tuple([1, 2, 3, 4, 5], 2) == (1, 2, 3)\nassert     trim_tuple([1, 2, 3, 4, 5], 3) == (1, 2, 3)\nassert     trim_tuple([1, 2, 3, 4, 5], 4) == (1, 2)\nassert     trim_tuple([1, 2, 3, 4, 5], 5) == (1)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntrim_tuple([(), (1,), (2,), (3, 4, 5), (6,)], 3) == [(1,), (2,), (3, 4, 5)]\ntrim_tuple([(1,2), (2,), (3, 4, 5), (6,), (7,)], 3) == [(1, 2), (2,), (3, 4, 5)]\ntrim_tuple([(1,2,3), (2,), (3, 4, 5), (6,), (7,)], 3) == [(1, 2, 3), (2,), (3, 4, 5)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([[1,2,3,4,5],(1,2),(1,2,3,4),(1,2,3)], 2) == [[1,2,3,4,5],(1,2),(1,2,3,4),(1,2,3)]\nassert     trim_tuple([[1,2,3,4,5],(1,2),(1,2,3,4),(1,2,3)], 5) == [[1,2,3,4,5],(1,2),(1,2,3,4),(1,2,3,4,5)]\nassert     trim_tuple([[1,2,3,4,5],(1,2),(1,2,3,4),(1,2,3)], 1) == [[1,2,3,4,5],(1,2),(1,2,3,4),(1,2,3)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple([1, 2, 3, 4, 5], 2) == [(1,2),(3,4),(5)]\nassert     trim_tuple([1, 2, 3, 4, 5], 0) == [(1,2,3,4,5)]\nassert     trim_tuple([1, 2, 3, 4, 5], 5) == [(1,2,3,4,5)]\nassert     trim_tuple([1, 2, 3, 4, 5], 6) == [(1,2,3,4,5)]"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple([[1,2,3], [4,5,6], [7,8,9]], 2) == [[1,2,3], [4,5,6], [7,8,9]]\nassert     trim_tuple([[1,2,3], [4,5,6], [7,8,9]], 3) == [[1,2,3], [4,5,6]]\nassert     trim_tuple([[1,2,3,4], [5,6,7,8], [9,10,11,12]], 2) == [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\nassert     trim_tuple([[1,2,3,4], [5,6,7,8], [9,10,11,12]], 3) == [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\nassert     trim_tuple([[1,2,3,4], [5,6,7,8], [9,10,11,12]], 4) == [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef replace_in_list(test_list, K, val):\n    '''\n    Write a function to replace the Kth element in the list by the given value.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([(1,2,3), (4,5,6), (7,8,9)], 1) == [(1,2,3), (4,5,6), (7,8,9)]\nassert     trim_tuple([(1,2,3), (4,5,6), (7,8,9)], 0) == [(1,2,3), (4,5,6), (7,8,9)]\nassert     trim_tuple([(1,2,3), (4,5,6), (7,8,9)], -1) == [(1,2,3), (4,5,6), (7,8,9)]\nassert     trim_tuple([(1,2,3), (4,5,6), (7,8,9)], 1) == [(1,2,3), (4,5,6), (7,8,9)]\nassert     trim_tuple([(1,2,3), (4,5,6), (7,8,9)], -1) == [(1,2,3), (4,5,6), (7,8,9)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     trim_tuple([1, 2, 3, 4, 5], 3) == [1, 2, 3]\nassert     trim_tuple([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]\nassert     trim_tuple([1, 2, 3, 4, 5], 0) == []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), ('a', 'b', 'c', 'd', 'e', 'f'), ('a', 'b', 'c', 'd')], 4) == \\\n            ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nassert     trim_tuple([('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), ('a', 'b', 'c', 'd', 'e', 'f'), ('a', 'b', 'c', 'd')], 2) == \\\n            ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\ndef in_range(test_list, K, A, B):\n    '''\n    Write a function to check whether all the numbers in the given list are in range A to B inclusive.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    index_multiplication((1, 2), (2, 3)) == (2, 6), 'Fail'\n    index_multiplication((2, 3), (3, 4)) == (6, 12), 'Fail'\n    index_multiplication((3, 4), (4, 5)) == (12, 20), 'Fail'\n    index_multiplication((4, 5), (5, 6)) == (20, 30), 'Fail'\n    index_multiplication((5, 6), (6, 7)) == (30, 42), 'Fail'\n    index_multiplication((6, 7), (7, 8)) == (42, 56), 'Fail'\n    index_multiplication((7, 8), (8, 9)) == (56, 72), 'Fail'\n    index_multiplication((8, 9), (9, 10)) == (72, 90), 'Fail'\n    index_multiplication((9, 10), (10, 11)) == (90, 120), 'Fail'\n    index_multiplication((10, 11), (11, 12)) == (120, 150), 'Fail'\n    index_multiplication((11, 12), (12, 13)) == (150, 180), 'Fail'\n    index_multiplication((12, 13), (13, 14)) == (180, 210), 'Fail'\n    index_multiplication((13, 14), (14, 15)) == (210, 240), 'Fail'\n    index_multiplication((14, 15), (15, 16)) == (240, 270), 'Fail'\n    index_multiplication((15, 16), (16, 17)) == (270, 300), 'Fail'\n    index_multiplication((16, 17), (17, 18)) == (300, 330), 'Fail'\n    index_multiplication((17, 18), (18, 19)) == (330, 360), 'Fail'\n    index_multiplication((18, 19), (19, 20)) == (360, 390), 'Fail'\n    index_multiplication((19, 20), (20, 21)) == (390, 420), 'Fail'\n    index_multiplication((20, 21), (21, 22)) == (420, 450), 'Fail'\n    index_multiplication((21, 22), (22, 23)) == (450, 480), 'Fail'\n    index_multiplication((22, 23), (23, 24)) == (480, 510), 'Fail'\n    index_multiplication((23, 24), (24, 25)) == (510, 540), 'Fail'\n    index_multiplication((24, 25), (25, 26)) == (540, 570), 'Fail'\n    index_multiplication((25, 26), (26, 27)) == (570, 600), 'Fail'\n    index_multiplication((26, 27), (27, 28)) == (600, 630), 'Fail'\n    index_multiplication((27, 28), (28, 29)) == (630, 660), 'Fail'\n    index_multiplication((28, 29), (29, 30)) == (660, 690), 'Fail'\n    index_multiplication((29, 30), (30, 31)) == (690, 720), 'Fail'\n    index_multiplication((30, 31), (31, 32)) == (720, 760), 'Fail'\n    index_multiplication((31, 32), (32, 33)) == (760, 800), 'Fail'\n    index_multiplication((32, 33), (33, 34)) == (800, 830), 'Fail'\n    index_multiplication((33, 34), (34, 35)) == (830, 880), 'Fail'\n    index_multiplication((34, 35), (35, 36)) == (880, 900), 'Fail'\n    index_multiplication((35, 36), (36, 37)) == (900, 940), 'Fail'\n    index_multiplication((36, 37), (37, 38)) == (940, 980), 'Fail'\n    index_multiplication((37, 38), (38, 39)) == (980, 1020), 'Fail'\n    index_multiplication((38, 39), (39, 40)) == (1020, 1080), 'Fail'\n    index_multiplication((39, 40), (40, 41)) == (1080, 1100), 'Fail'\n    index_multiplication((40, 41), (41, 42)) == (1100, 1140), 'Fail'\n    index_multiplication((41, 42), (42, 43)) == (1140, 1200), 'Fail'\n    index_multiplication((42, 43), (43, 44)) == (1200, 1230), 'Fail'\n    index_multiplication((43, 44), (44, 45)) == (1230, 1260), 'Fail'\n    index_multiplication((44, 45), (45, 46)) == (1260, 1290), 'Fail'\n    index_multiplication((45, 46), (46, 47)) == (1290, 1320), 'Fail'\n    index_multiplication((46, 47), (47, 48)) == (1320, 1350), 'Fail'\n    index_multiplication((47, 48), (48, 49)) == (1350, 1380), 'Fail'\n    index_multiplication((48, 49), (49, 50)) == (1380, 1410), 'Fail'\n    index_multiplication((49, 50), (50, 51)) == (1410, 1440), 'Fail'\n    index_multiplication((50, 51), (51, 52)) == (1440, 1470), 'Fail'\n    index_multiplication((51, 52), (52, 53)) == (1470, 1500), 'Fail'\n    index_multiplication((52, 53), (53, 54)) == (1500, 1530), 'Fail'\n    index_multiplication((53, 54), (54, 55)) == (1530, 1560), 'Fail'\n    index_multiplication((54, 55), (55, 56)) == (1560, 1590), 'Fail'\n    index_multiplication((55, 56), (56, 57)) == (1590, 1620), 'Fail'\n    index_multiplication((56, 57), (57, 58)) == (1620, 1650), 'Fail'\n    index_multiplication((57, 58), (58, 59)) == (1650, 1680), 'Fail'\n    index_multiplication((58, 59), (59, 60)) == (1680, 1710), 'Fail'\n    index_multiplication((59, 60), (60, 61)) == (1710, 1740), 'Fail'\n    index_multiplication((60, 61), (61, 62)) == (1740, 1770), 'Fail'\n    index_multiplication((61, 62), (62, 63)) == (1770, 1800), 'Fail'\n    index_multiplication((62, 63), (63, 64)) == (1800, 1830), 'Fail'\n    index_multiplication((63, 64), (64, 65)) == (1830, 1860), 'Fail'\n    index_multiplication((64, 65), (65, 66)) == (1860, 1890), 'Fail'\n    index_multiplication((65, 66), (66, 67)) == (1890, 1920), 'Fail'\n    index_multiplication((66, 67), (67, 68)) == (1920, 1950), 'Fail'\n    index_multiplication((67, 68), (68, 69)) == (1950, 1980), 'Fail'\n    index_multiplication((68, 69), (69, 70)) == (1980, 2020), 'Fail'\n    index_multiplication((69, 70), (70, 71)) == (2020, 2040), 'Fail'\n    index_multiplication((70, 71), (71, 72)) == (2040, 2070), 'Fail'\n    index_multiplication((71, 72), (72, 73)) == (2070, 2100), 'Fail'\n    index_multiplication((72, 73), (73, 74)) == (2100, 2140), 'Fail'\n    index_multiplication((73, 74), (74, 75)) == (2140, 2180), 'Fail'\n    index_multiplication((74, 75), (75, 76)) == (2180, 2200), 'Fail'\n    index_multiplication((75, 76), (76, 77)) == (2200, 2320), 'Fail'\n    index_multiplication((76, 77), (77, 78)) == (2320, 2350), 'Fail'\n    index_multiplication((77, 78), (78, 79)) == (2350, 2380), 'Fai"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18)\nassert     index_multiplication((1,2,3),(4,5,6,7)) == (4,10,18,42)\nassert     index_multiplication((1,2),(3,4,5)) == (3,4,5,6)\nassert     index_multiplication((1,2),(3,4)) == (3,4,5,6)\nassert     index_multiplication((1,2),(3)) == (3,4,5,6)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_multiplication((1,2,3),(2,4,5)) == (2,4,10)\nassert     index_multiplication((1,2,3),(2,3,4)) == (2,6,12)\nassert     index_multiplication((1,2,3),(3,2,4)) == (6,8,12)\nassert     index_multiplication((3,2,1),(2,4,5)) == (6,8,20)\nassert     index_multiplication((3,2,1),(2,3,4)) == (6,8,20)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18)\nassert     index_multiplication((1,2),(3,4,5)) == (3,4)\nassert     index_multiplication((1,2),(3,4)) == (3,4)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ix_mul_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nassert ix_mul_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nassert index_multiplication(ix_mul_tup1, ix_mul_tup2) == (1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\n\ndef index_multiplication_in_list(test_list1, test_list2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    index_multiplication((1, 2, 3), (10, 20, 30)) == (1, 10, 30)\nassert\n    index_multiplication((-2, -3, -4), (2, -1, -7)) == (-2, -3, -14)\n    index_multiplication((7, 8, 9), (5, 10, -20)) == (-15, -25, -15)\n    index_multiplication((2, -3, 4), (1, 1, 1)) == (2, -3, 4)\n    index_multiplication((3, 6, 9), (7, 8, 10)) == (3, 6, 9)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_multiplication((1, 3), (3, 5)) == (1, 9)\nassert     index_multiplication((1, 2), (3, 4)) == (1, 2)\nassert     index_multiplication((1, 2, 3), (3, 4, 5)) == (1, 2, 3)\nassert     index_multiplication((1, 2), (3, 4, 5)) == (1, 2, 3)\nassert     index_multiplication((1, 2, 3), (3, 4, 5)) == (1, 2, 3)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_multiplication((1,2,3,4), (5,6,7,8)) == (5, 6, 7, 8), 'Index wise multiplication incorrect'\nassert     index_multiplication((2,3,4,5), (6,7,8,9)) == (6,7,8,9), 'Index wise multiplication incorrect'\nassert     index_multiplication((1,1,1,1), (2,2,2,2)) == (2, 2, 2, 2), 'Index wise multiplication incorrect'\nprint('Tests are passed')\n\nprint('\\nMultiplication: ')\n\ndef tuple_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == \\\n        ((5, 20, 45, 80), (15, 36, 63, 96))\nprint(\"correct\")\nassert index_multiplication((3, 5, 7, 9), (4, 2, 6, 8)) == \\\n        ((32, 64, 96, 128), (12, 24, 48, 80))\nprint(\"correct\")\nassert index_multiplication((7, 9, 11, 13), (2, 4, 8, 10)) == \\\n        ((140, 176, 192, 208), (112, 144, 160, 192))\nprint(\"correct\")\nassert index_multiplication((2, 4, 6, 8), (3, 5, 7, 9)) == \\\n        ((30, 60, 90, 120), (18, 40, 72, 96))\nprint(\"correct\")\nassert index_multiplication((2, 3, 4, 6), (4, 6, 8, 10)) == \\\n        ((24, 48, 72, 96), (16, 30, 48, 64))\nprint(\"correct\")\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Occurrence((1,3),[1,3,4]) == 3, \"Should return 3\"\nassert     count_Occurrence((1,1),[1,1,1]) == 2, \"Should return 2\"\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    tup = ('a', 'b', 'a', 'a', 'b', 'a', 'b')\n    lst = ['a', 'a', 'b']\n    assert count_Occurrence(tup, lst) == 4, \"Fail\"\n    print(\"Pass\")\n\nmain("
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Occurrence((1,2,3,1,2,3), [1,2,3]) == 4, \"incorrect\"\nassert     count_Occurrence((1,2,3,1,2,3), {1,2,3}) == 4, \"incorrect\"\nassert     count_Occurrence((1,2,3,1,2,3), {1,2,3,4}) == 0, \"incorrect\"\nassert     count_Occurrence((1,2,3,1,2,3), {}) == 0, \"incorrect\"\nassert     count_Occurrence((1,2,3,1,2,3), {}) == 0, \"incorrect\"\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Occurrence([1,3,2], [2,3,1]) == (2, 2, 0)\nassert     count_Occurrence([1,3,2], [3,1,2]) == (0, 2, 2)\nassert     count_Occurrence([1,3,2], [2,1,2]) == (2, 0, 2)\nassert     count_Occurrence([1,3,2], [2,3,1]) == (0, 1, 1)\nassert     count_Occurrence([1,3,2], [2,3,3]) == (0, 0, 1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert \nassert count_Occurrence((\"GeeksforGeeks\",), [\"GeeksforGeeks\"]) == Counter({\"GeeksforGeeks\":1})"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntup = (1,2,3,1,2,3,3,4) \nlst = [1,2,3,1,2,3,4] \ncount_Occurrence(tup, lst)"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test\n    assert count_Occurrence((1,2,3,4,5,6,7), [1,2,3,4,5]) == 4\n    assert count_Occurrence((1,2,3,4,5,6,7), [1,2,5,6,7]) == 4\n    assert count_Occurrence((1,2,3,4,5,6,7), [1,2,4,5,6,7]) == 4\n    "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_Occurrence((1,2,3,4),[1,2,3,4]) == 4\nassert count_Occurrence((1,2,3,4,5),[1,2,3,4]) == 2\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_nums([0, 1, 2, 3]) == [0, 1, 8, 27]\nassert     cube_nums([0, 0, 0, 0]) == [0, 0, 0, 0]\nassert     cube_nums([]) == []\nassert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]\nassert     cube_nums([\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125], 'cube_nums failed'\n\ndef powers(lst):\n    '''\n    Write a function to find the cube, the fourth power, the fifth power, and the sixth power\n    of the input elements.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_nums([1,2,3]) == [1,8,27], \"Wrong answer\"\nassert     cube_nums([0,4,6]) == [0,64,36], \"Wrong answer\"\nassert     cube_nums([2,4,6]) == [4,64,36], \"Wrong answer\"\nassert     cube_nums([1,2,3,5]) == [1,4,9,27], \"Wrong answer\"\nassert     cube_nums([-2,-4,-6]) == [-256,-64,-36], \"Wrong answer\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_nums(nums = [-1, 2, -3, 4, -5]) == [\n    [-1, 8, -27, 64, -125],\n    [2, 16, -36, 64, -125],\n    [-3, 27, 81, 64, -125]\n]\nassert     cube_nums(nums = [-1, -2, -3, -4, -5]) == [\n    [-1, -8, -27, -64, -125],\n    [-2, -16, -36, -64, -125],\n    [-3, -27, -81, -64, -125],\n    [-4, -36, -16, -64, -125],\n    [-5, -36, -27, -81, -64]\n]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_greater_nums(nums):\n    '''\n    Write a function to get the greater elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_nums([1,2,3]) == [1, 8, 27], 'wrong'\nassert     cube_nums([4,5,6]) == [4, 125, 216], 'wrong'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_nums([1,2,3,4]) == [1,8,27,64]\nassert     cube_nums([0,-1,2,-3,4]) == [0,0,0,0,0]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncal_sum(0) == 0\ncal_sum(1) == 1\ncal_sum(2) == 3\ncal_sum(3) == 5\ncal_sum(4) == 8\ncal_sum(5) == 13\ncal_sum(6) == 21\ncal_sum(7) == 34\ncal_sum(8) == 55\ncal_sum(9) == 89\ncal_sum(10) == 144\ncal_sum(11) == 233\ncal_sum(12) == 377\ncal_sum(13) == 610\ncal_sum(14) == 987\ncal_sum(15) == 1597\ncal_sum(16) == 2584\ncal_sum(17) == 4181\ncal_sum(18) == 6765\ncal_sum(19) == 10946\ncal_sum(20) == 17711\ncal_sum(21) == 28657\ncal_sum(22) == 46368\ncal_sum(23) == 75025\ncal_sum(24) == 121393\ncal_sum(25) == 196418\ncal_sum(26) == 317811\ncal_sum(27) == 514229\ncal_sum(28) == 832040\ncal_sum(29) == 1346269\ncal_sum(30) == 2615917\ncal_sum(31) == 4107409\ncal_sum(32) == 5497558\ncal_sum(33) == 8241750\ncal_sum(34) == 1258626\ncal_sum(35) == 24157817\ncal_sum(36) == 39088169\ncal_sum(37) == 5655273\ncal_sum(38) == 89263672\ncal_sum(39) == 14930352\ncal_sum(40) == 28822413\ncal_sum(41) == 49943150\ncal_sum(42) == 7014087\ncal_sum(43) == 1193157\ncal_sum(44) == 18069845\ncal_sum(45) == 25842760\ncal_sum(46) == 433494437\ncal_sum(47) == 7014087\ncal_sum(48) == 1134903\ncal_sum(49) == 18069845\ncal_sum(50) == 3524578\ncal_sum(51) == 5702887\ncal_sum(52) == 9051711\ncal_sum(53) == 14534504\ncal_sum(54) == 21876561\ncal_sum(55) == 36552\ncal_sum(56) == 62613\ncal_sum(57) == 1134903\ncal_sum(58) == 18069845\ncal_sum(59) == 274877906944\ncal_sum(60) == 5497558\ncal_sum(61) == 8453803\ncal_sum(62) == 139344\ncal_sum(63) == 28979362\ncal_sum(64) == 424760\ncal_sum(65) == 755279\ncal_sum(66) == 1134903\ncal_sum(67) == 26291461\ncal_sum(68) == 44914063\ncal_sum(69) == 75025\ncal_sum(70) == 1216929\ncal_sum(71) == 196418\ncal_sum(72) == 4835729\ncal_sum(73) == 75527\ncal_sum(74) == 1099511627776\ncal_sum(75) == 317811\ncal_sum(76) == 5497558\ncal_sum(77) == 82417\ncal_sum(78) == 1258626\ncal_sum(79) == 4107409\ncal_sum(80) == 751226\ncal_sum(81) == 121393\ncal_sum(82) == 2207809\ncal_sum(83) == 3524578\ncal_sum(84) == 51179161\ncal_sum(85) == 8202148\ncal_sum(86) == 14930352\ncal_sum(87) == 28979362\ncal_sum(88) == 424760\ncal_sum(89) == 75527\ncal_sum(90) == 1134903\ncal_sum(91) == 26291461\ncal_sum(92) == 44914063\ncal_sum(93) == 75025\ncal_sum(94) == 1216929\ncal_sum(95) == 196418\ncal_sum(96) == 4835729\ncal_sum(97) == 755279\ncal_sum(98) == 1099511627776\ncal_sum(99) == 317811\ncal_sum(100) == 5497558\ncal_sum(101) == 82417\ncal_sum(102) == 1258626\ncal_sum(103) == 4107409\ncal_sum(104) == 751226\ncal_sum(105) == 121393\ncal_sum(106) == 2207809\ncal_sum(107) == 3524578\ncal_sum(108) == 51179161\ncal_sum(109) == 8202148\ncal_sum(110) == 14930352\ncal_sum(111) == 28979362\ncal_sum(112) == 424760\ncal_sum(113) == 755279\ncal_sum(114) == 1134903\ncal_sum(115) == 26291461\ncal_sum(116) == 44914063\ncal_sum(117) == 75025\ncal_sum(118) == 1216929\ncal_sum(119) == 196418\ncal_sum(120) == 4835729\ncal_sum(121) == 75527\ncal_sum(122) == 1099511627776\ncal_sum(123) == 317811\ncal_sum(124) == 5497558\ncal_sum(125) == 82417\ncal_sum(126) == 1258626\ncal_sum(127) == 4107409\ncal_sum(128) == 751226\ncal_sum(129) == 121393\ncal_sum(130) == 2207809\ncal_sum(131) == 3524578\ncal_sum(132) == 51179161\ncal_sum(133) == 8202148\ncal_sum(134) == 14930352\ncal_sum(135) == 28979362\ncal_sum(136) == 424760\ncal_sum(137) == 75527\ncal_sum(138) == 1134903\ncal_sum(139) == 26291461\ncal_sum(140) == 44914063\ncal_sum(141) == 75025\ncal_sum(142) == 1216929\ncal_sum(143) == 196418\ncal_sum(144) == 4835729\ncal_sum(145) == 755279\ncal_sum(146) == 1099511627776\ncal_sum(147) == 317811\ncal_sum(148) == 5497558\ncal_sum(149) == 82417\ncal_sum(150) == 1258626\ncal_sum(151) == 4107409\ncal_sum(152) == 751226\ncal_sum(153) == 121393\ncal_sum(154) == 2207809\ncal_sum(155) == 3524578\ncal_sum(156) == 51179161\ncal_sum(157) == 8202148\ncal_sum(158) == 14930352\ncal_sum(159) == 28979362\ncal_sum(160) == 424760\ncal_sum(161) == 75527\ncal_sum(162) == 1134903\ncal_sum(163) == 26291461\ncal_sum(164) == 44914063\ncal_sum(165) == 75025\ncal_sum(166) == 1216929\ncal_sum(167) == 196418\ncal_sum(168) == 4835729\ncal_sum(169) == 755279\ncal_sum(170) == 1099511627776\ncal_sum(171) == 317811\ncal_sum(172) == 5497558\ncal_sum(173) == 82417\ncal_sum(174) == 1258626\ncal_sum(175) == 4107409\ncal_sum(176) == 751226\ncal_sum(177) == 121393\ncal_sum(178) == 2207809\ncal_sum(179) == 3524578\ncal_sum(180) == 51179161\ncal_sum(181) ="
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nWrite a function to get a list of all numbers from 1 to n. \n\nWrite a function to get a list of all numbers from 1 to n \nbut ignoring the numbers that are multiples of 3 or 5.\n\nWrite a function to get a list of all numbers from 1 to n \nbut ignoring the numbers that are divisible by 3 or 5.\n\nWrite a function to get a list of all numbers from 1 to n\nbut ignoring the numbers that are divisible by 3 or 5 and \nand multiples of 4.\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nPart 3: Print out all the perrin numbers.\n'''\n\ndef perrin_gen():\n    '''\n    Write a generator to generate the first 100 perrin numbers.\n    '''\n    for x in range(101):\n        yield x\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef cal_sum(n):\n    return sum(range(n))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cal_sum(1) == 1.0, 'Should be 1.0'\nassert     cal_sum(5) == 15.0, 'Should be 15.0'\nassert     cal_sum(10) == 55.0, 'Should be 55.0'\nassert     cal_sum(11) == 56.0, 'Should be 56.0'\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_string([\"a\", \"b\", \"c\", \"d\", \"e\"], 1) == [\"a\"]\nassert     extract_string([\"a\", \"b\", \"c\", \"d\", \"e\"], 2) == [\"a\", \"b\"]\nassert     extract_string([\"a\", \"b\", \"c\", \"d\", \"e\"], 3) == [\"a\", \"b\", \"c\"]\nassert     extract_string([\"a\", \"b\", \"c\", \"d\", \"e\"], 4) == [\"a\", \"b\", \"c\", \"d\"]\nassert     extract_string([\"a\", \"b\", \"c\", \"d\", \"e\"], 5) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_string(['abc', 'abcde', 'a'], 5) == ['abc', 'abcde']\nassert     extract_string(['a', 'ab', 'abc'], 1) == ['a', 'ab', 'abc']\nassert     extract_string(['a', 'ab', 'abc'], 2) == ['a', 'ab']\nassert     extract_string(['a', 'ab', 'abc'], 5) == ['a']\nassert     extract_string(['a', 'ab', 'abc'], 8) == []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string('abc', 0) == ['a']\nassert     extract_string('abc', 1) == ['b', 'c']\nassert     extract_string('abc', 2) == ['a', 'b', 'c']\n\nprint('Test 1 Success')\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string(['Hello', 'world', '!'], 1) == ['H', 'd', '!']\nassert     extract_string(['Hello', 'world', '!'], 2) == ['He', 'd', '!']\nassert     extract_string(['Hello', 'world', '!'], 3) == ['H', 'd', '!']\nassert     extract_string(['Hello', 'world', '!'], 4) == ['H', 'd', '!']\nassert     extract_string(['Hello', 'world', '!'], 5) == ['Hello', 'd', '!']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_string('Hello', 4) == 'Hell' \nassert     extract_string('Hello', 0) == '' \nassert     extract_string('Hello', 5) == 'Hell' \nassert     extract_string('Hello', -1) == 'He' \nassert     extract_string('Hello', -5) == 'Hell' \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_string([\"x\",\"y\",\"z\",\"w\"], 2) == [\"xx\",\"yw\"]\nassert     extract_string([\"x\",\"y\",\"z\",\"w\"], 3) == [\"xw\",\"yz\"]\nassert     extract_string([\"x\",\"y\",\"z\",\"w\",\"xyz\"], 3) == [\"xyz\"]\nassert     extract_string([\"x\",\"y\",\"z\",\"w\",\"xyz\"], 5) == [\"xwxyz\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef split_string_and_return_last_char(str):\n    '''\n    Write a function to return the last character of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces(\"Hi \\nhello\") == \"Hihello\"\nassert     remove_whitespaces(\"hello \\nHi\") == \"HelloHi\"\nassert     remove_whitespaces(\"hello \\nHi \\n  Goodbye\") == \"HelloHi Goodbye\"\nassert     remove_whitespaces(\"hello \\nHi \\n  Goodbye \\n\") == \"HelloHi Goodbye\"\nassert     remove_whitespaces(\"  \\n  \\nHi\\n\") == \"Hi\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(\" a     b   c\") == \"abc\", \"Wrong\"\nassert     remove_whitespaces(\"a    b c\") == \"abc\", \"Wrong\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_whitespaces(\"     a   b   c  \") == \"a b c\"\nassert     remove_whitespaces(\"   a   b   c  \") == \"a b c\"\nassert     remove_whitespaces(\"a     b  c  \") == \"a b c\"\nassert     remove_whitespaces(\"a   b   c  \") == \"a b c\"\nassert     remove_whitespaces(\"a     b c\") == \"a b c\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_whitespaces(\"hello\") == \"hello\"\nassert     remove_whitespaces(\" hello \") == \"hello\"\nassert     remove_whitespaces(\" hello \") == \"hello\"\nassert     remove_whitespaces(\"   hello   \") == \"hello\"\nassert     remove_whitespaces(\" hello   \") == \"hello\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef to_lowercase(text1):\n    '''\n    Write a function to convert all lowercase letters to lowercase letters\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(\"We love Python  \") == \"We love Python\", \"remove_whitespaces failed\"\nassert     remove_whitespaces(\"We love Python and only Python\") == \"We love Python and only Python\", \"remove_whitespaces failed\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces('') == '',\\\n'incorrect remove_whitespaces'\nassert remove_whitespaces(' ') == '',\\\n'incorrect remove_whitespaces'\nassert remove_whitespaces('        ') == '',\\\n'incorrect remove_whitespaces'\nassert remove_whitespaces('    ') == '',\\\n'incorrect remove_whitespaces'\nassert remove_whitespaces('  ') == '',\\\n'incorrect remove_whitespaces'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces('') == ''\nassert     remove_whitespaces(' ') == '','remove_whitespaces() function should return empty string if the given string has only whitespaces.'\nassert     remove_whitespaces(' Hello') =='Hello','remove_whitespaces() function should return the same string if the given string has whitespaces.'\nassert     remove_whitespaces('Hello') == 'Hello','remove_whitespaces() function should return the same string if the given string has whitespaces.'\nassert     remove_whitespaces('Hello  ') == 'Hello','remove_whitespaces() function should return the same string if the given string has whitespaces.'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\"          \") == \"\", \"Err: remove_whitespaces()\"\nassert     remove_whitespaces(\"\\n \\t  \") == \"\", \"Err: remove_whitespaces()\"\nassert     remove_whitespaces(\"\\n \\t \\n\") == \"\", \"Err: remove_whitespaces()\"\n\ndef solve_regex(input_string):\n    '''\n    Write a function which takes a string as input and returns an equivalent expression in the\n    form of regular expression as described in the problem statement.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces('we are happy') == 'we are happy', \\\n            f\"\\n{remove_whitespaces('we are happy')} should be 'we are happy'\"\nassert     remove_whitespaces('We are Happy') == 'We are Happy', \\\n            f\"\\n{remove_whitespaces('We are Happy')} should be 'We are Happy'\"\n\nassert     remove_whitespaces('Hello, I am happy') == 'Hello, I am happy', \\\n            f\"\\n{remove_whitespaces('Hello, I am happy')} should be 'Hello, I am happy'\"\nassert     remove_whitespaces('Hello, I am   happy') == 'Hello, I am happy', \\\n            f\"\\n{remove_whitespaces('Hello, I am   happy')} should be 'Hello, I am happy'\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     loss_amount(100,250) == 0, 'ValueError'\nassert loss_amount(100,100) == 0, 'ValueError'\nassert loss_amount(100,150) == -50, 'ValueError'\nassert loss_amount(200,200) == 0, 'ValueError'\nassert loss_amount(100,250.5) == -50.5, 'ValueError'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nloss_amount(actual_cost = 10, sale_amount = 5) == 5\nassert loss_amount(actual_cost = 5, sale_amount = 15) == 0\nassert loss_amount(actual_cost = 10, sale_amount = 5) == 5\n\n\ndef loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    pass"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert loss_amount(9,10)==0\nassert loss_amount(5,6)==10\nassert loss_amount(2,2)==0\nassert loss_amount(4,5)==5\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(200,100) == 0, 'incorrect'\nassert     loss_amount(200,150) == 50, 'incorrect'\nassert     loss_amount(200,100) == 0, 'incorrect'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     loss_amount(1,1) == 0, \"1 is not an amount of loss\"\nassert     loss_amount(100,100) == 0, \"100 is an amount of loss\"\nassert     loss_amount(20,50) == -10, \"20 is an amount of loss\"\nassert     loss_amount(200,0) == 0, \"0 is an amount of loss\"\n\nprint(\"Congratulations! Your solution is correct\")"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(1000,500) == 0, \"Wrong output\"\nassert     loss_amount(2000,500) == 500, \"Wrong output\"\nassert     loss_amount(1500,200) == 500, \"Wrong output\"\nassert     loss_amount(1200,500) == 1500, \"Wrong output\"\nassert     loss_amount(1000,5000) == 500, \"Wrong output\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     loss_amount(100,30) == 20\nassert    loss_amount(100,200) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nloss_amount(actual_cost = 200000, sale_amount = 100000) == 200000\nloss_amount(actual_cost = 200000, sale_amount = 200000) == "
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(10,5) == 5 \nassert loss_amount(10,0) == 0 \nassert loss_amount(10,10) == 0 "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(sumofFactors(6))\n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i*i <= n: \n        if n % i == 0: \n            sum += i\n        i += 1\n    if n > 0 and n % 2 == 0: \n        sum += n\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert sumofFactors(18) == 14, \"sum is 14\"\n    assert sumofFactors(15) == 0, \"sum is 0\"\n    assert sumofFactors(1) == 0, \"sum is 0\"\n    assert sumofFactors(8) == 3, \"sum is 3\"\n    "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sumofFactors(12) == 8\nassert sumofFactors(13) == 5\nassert sumofFactors(5) == 0\nassert sumofFactors(6) == 2\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sumofFactors(0) == 0, \"error in function sumofFactors\"\nassert     sumofFactors(1) == 0, \"error in function sumofFactors\"\nassert     sumofFactors(2) == 1, \"error in function sumofFactors\"\nassert     sumofFactors(3) == 1, \"error in function sumofFactors\"\nassert     sumofFactors(4) == 2, \"error in function sumofFactors\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sumofFactors(0) == 0, 'Test case 1: Expected 0'\nassert     sumofFactors(2) == 0, 'Test case 2: Expected 0'\nassert     sumofFactors(3) == 0, 'Test case 3: Expected 0'\nassert     sumofFactors(4) == 0, 'Test case 4: Expected 0'\nassert     sumofFactors(5) == 1, 'Test case 5: Expected 1'\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    \ndef isPrime(n) : \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sumofFactors(0) == 0 \nassert     sumofFactors(1) == 0\nassert     sumofFactors(4) == 0\nassert     sumofFactors(6) == 0\nassert     sumofFactors(8) == 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sumofFactors(3) == 6\nassert     sumofFactors(8) == 15\nassert     sumofFactors(10) == 10\nassert     sumofFactors(15) == 60\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sumofFactors(0) == 0, \"Should be 0.\"\nassert     sumofFactors(2) == 0, \"Should be 0.\"\nassert     sumofFactors(6) == 6, \"Should be 6.\"\nassert     sumofFactors(4) == 4, \"Should be 4.\"\nassert     sumofFactors(8) == 6, \"Should be 6.\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not \n\n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz('hello zzzzzzzz') == False, 'hello'\nassert     text_match_wordz('hello zzzzzzzz') == True, 'zzzzzzzzz'\nassert     text_match_wordz('hello') == False, 'hello'\nassert     text_match_wordz('hello z') == False, 'hello z'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz('zebra') == False\nassert     text_match_wordz('apple') == False\nassert     text_match_wordz('acctual') == False\nassert     text_match_wordz('zebra') == True\nassert     text_match_wordz('apple') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz('tez') == True\nassert     text_match_wordz('tiz') == False\nassert     text_match_wordz('tizn') == False\nassert     text_match_wordz('tizp') == False\nassert     text_match_wordz('tez') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz(\"How are you, you?\") == True\nassert     text_match_wordz(\"Zebra\") == False\nassert     text_match_wordz(\"Zebra, orange, elephant\") == True\nassert     text_match_wordz(\"Zebra, orange, elephant, buffalo\") == False\nassert     text_match_wordz(\"apple, banana, orange\") == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz('the quick zebra') == True, \"The quick zebra should match\"\nassert     text_match_wordz('the zebra quick') == False, \"Zebra quick should not match\"\nassert     text_match_wordz('the zebra quick quick') == False, \"Zebra quick quick should not match\"\nassert     text_match_wordz('the zebra quick zebra') == False, \"Zebra quick zebra should not match\"\nassert     text_match_wordz('the zebra quick Zebra') == True, \"Zebra quick Zebra should match\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz('') == True\nassert     text_match_wordz('blah') == False\nassert     text_match_wordz('blah') == False\nassert     text_match_wordz('blah blah') == False\nassert     text_match_wordz('blah z') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    text_match_wordz('asdfzqwe123') == False, 'test_fail_1'\n    text_match_wordz('asdfzqwe123') == False, 'test_fail_2'\n    text_match_wordz('asdfzqwe123') == True, 'test_success_1'\n    text_match_wordz('asdfzqwe123') == True, 'test_success_2'\n    text_match_wordz('asdfzqwe123') == False, 'test_success_3'\n\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing a 'z'.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz(\"Foxtrot\") == True\nassert     text_match_wordz(\"Brent\") == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(2) == False\nassert     check_monthnumb_number(3) == True\nassert     check_monthnumb_number(5) == False\nassert     check_monthnumb_number(7) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(1) == True, 'check_monthnumb_number(1)'\nassert     check_monthnumb_number(2) == True, 'check_monthnumb_number(2)'\nassert     check_monthnumb_number(3) == True, 'check_monthnumb_number(3)'\nassert     check_monthnumb_number(4) == True, 'check_monthnumb_number(4)'\nassert     check_monthnumb_number(5) == True, 'check_monthnumb_number(5)'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(1) == True, \"not a valid month number\"\nassert     check_monthnumb_number(2) == True, \"not a valid month number\"\nassert     check_monthnumb_number(3) == True, \"not a valid month number\"\nassert     check_monthnumb_number(4) == True, \"not a valid month number\"\nassert     check_monthnumb_number(5) == True, \"not a valid month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(12) == True, \"error\"\nassert check_monthnumb_number(1) == True, \"error\"\nassert check_monthnumb_number(4) == False, \"error\"\nassert check_monthnumb_number(28) == True, \"error\"\n\n'''\nWrite a function to check whether the given date is valid or not.\n'''\ndef check_date(date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(31) == True, \"Wrong\"\nassert     check_monthnumb_number(30) == True, \"Wrong\"\nassert     check_monthnumb_number(29) == False, \"Wrong\"\nassert     check_monthnumb_number(28) == True, \"Wrong\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_yearnumb_number(yearnum):\n    '''\n    Write a function to check whether the given year number is leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(1) == True, 'Test Case 1 Failed'\nassert     check_monthnumb_number(2) == False, 'Test Case 2 Failed'\nassert     check_monthnumb_number(3) == True, 'Test Case 3 Failed'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         check_monthnumb_number(11) == True, \"Example: 11, 12, 2, 9, 20, 22, 13, 7, 21, 8, 4\"\nassert         check_monthnumb_number(12) == True, \"Example: 11, 12, 2, 9, 20, 22, 13, 7, 21, 8, 4\"\nassert         check_monthnumb_number(1) == True, \"Example: 11, 12, 2, 9, 20, 22, 13, 7, 21, 8, 4\"\nassert         check_monthnumb_number(2) == False, \"Example: 11, 12, 2, 9, 20, 22, 13, 7, 21, 8, 4\"\nassert         check_monthnumb_number(3) == False, \"Example: 11, 12, 2, 9, 20, 22, 13, 7, 21, 8, 4\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(12) == True\nassert     check_monthnumb_number(1) == False\nassert     check_monthnumb_number(22) == False\nassert     check_monthnumb_number(5) == False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_string_list([\"hi\", \"hello\"]) == [\"hello\", \"hi\"]\nassert     reverse_string_list([\"hi\", \"hello\", \"Goodbye\"]) == [\"Goodbye\", \"hello\", \"hi\"]\nassert     reverse_string_list([\"hi\"]) == [\"hi\"]\nassert     reverse_string_list([\"\"]) == [\"\"]"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_string_list([\"hello\", \"goodbye\", \"a\", \"b\"]) == ['b', 'a', 'hello', 'goodbye'], 'Fail'\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert reverse_string_list([\"hello\", \"goodbye\", \"good morning\"]) == [\"goodbye\", \"good morning\", \"hello\"]\nassert reverse_string_list([\"bob\", \"sue\"]) == [\"sue\", \"bob\"]\nassert reverse_string_list([\"I\", \"am\", \"a\", \"programmer\"]) == [\"a\", \"am\", \"I\", \"programmer\"]\n\ndef reverse_string_list_2(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_string_list([\"test\", \"wo\", \"rld\"]) == [\"rld\", \"wo\", \"test\"]\nassert     reverse_string_list([\"t\", \"e\", \"s\", \"t\"]) == [\"t\", \"e\", \"s\", \"t\"]\nassert not reverse_string_list([\"test\"])\nassert not reverse_string_list([])\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(reverse_string_list([1,2,3]))\nprint(reverse_string_list(['a','b','c']))\nprint(reverse_string_list(['a','b','c', None]))\nprint(reverse_string_list([True, False]))"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_string_list([]) ==     []\nassert     reverse_string_list(['a', 'b', 'c']) ==     ['c', 'b', 'a']\nassert     reverse_string_list(['A', 'B', 'C']) ==     ['C', 'B', 'A']\nassert     reverse_string_list(['A', 'B', 'C', 'D', 'E']) ==     ['E', 'D', 'C', 'B', 'A']"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_string_list(['hello', 'world']) == ['world', 'hello'], 'Should be [world, hello]'\nassert     reverse_string_list(['hello', 'world', 'world']) == ['world', 'world', 'hello'], 'Should be [world, world, hello]'\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_string_list([\"hello\", \"world\"]) == [\"world\", \"hello\"]\nassert     reverse_string_list([\"spam\", \"eggs\", \"foo\"]) == [\"foo\", \"eggs\", \"spam\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nFind_Min(['a', 'b', 'c', 'd', 'e']) == ['b', 'c', 'd', 'e']\nprint(\"Correct\")\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nFind_Min([1,2,3,4,5]) == 3, \"correctness of Find_Min() function\"\nassert \nFind_Min([1,2,3,4,5,6]) == 4, \"correctness of Find_Min() function\"\nassert \nFind_Min([1,2,3,4,5,6,7]) == 5, \"correctness of Find_Min() function\"\nassert \nFind_Min([1,2,3,4,5,6,7,8]) == 6, \"correctness of Find_Min() function\"\nassert \nFind_Min([1,2,3,4,5,6,7,8,9]) == 7, \"correctness of Find_Min() function\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert Find_Min([[1,2,3],\n[4,5],\n[7],\n[8,9],\n[10]]) == [4,5,7], \"Should be [4,5,7]\"\nassert Find_Min([[1,2,3,4],\n[2,3],\n[1],\n[1,2],\n[1,3,4]]) == [1,2], \"Should be [1,2]\"\n\n\ndef Find_Max(lst):\n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nFind_Min([]) == None \nFind_Min([[]]) == None\nFind_Min([1,2]) == None\nFind_Min([1,2,3]) == 1\nFind_Min([1,2,3,4,5]) == 1\nFind_Min([1,2,3,4,5,6,7]) == 1\nFind_Min([1,2,3,4,5,6,7,8,9]) == 1\nFind_Min([1,2,3,4,5,6,7,8,9,10]) == 2\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 3\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 3\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 4\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]) == 5\nFind_Min([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,2"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min([1,2,3]) == 1\nassert    Find_Min([3,2,3,5,4]) == 3\nassert    Find_Min([3,2,3,5,4,1]) == 2\nassert    Find_Min([3,2,3,5,4,1,1]) == 1\nassert    Find_Min([3,2,3,5,4,1,2]) == 2\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min([]) == -1, \"should return -1\"\nassert     Find_Min([1,2,3,4,5,6]) == 1, \"should return 1\"\nassert     Find_Min([1,2,3,4,5,6,7,8,9,10]) == 4, \"should return 4\"\nassert     Find_Min([1,2,3,4,5,6,7,8,9,10,11]) == 5, \"should return 5\"\nassert     Find_Min([1,2,3,4,5,6,7,8,9,10,11,12]) == 6, \"should return 6\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min([[1, 2, 3, 4],\n                   [0, 0, 1],\n                   [0, 1, 2],\n                   [2, 2],\n                   [1, 0, 1],\n                   [1, 1]]) ==     [0, 0, 1], \"Should be 0, 0, 1\"\nassert     Find_Min([[0, 0, 1],\n                   [0, 1, 2],\n                   [2, 2],\n                   [1, 0, 1],\n                   [1, 1]]) ==     [0, 0, 1], \"Should be 0, 0, 1\"\nassert     Find_Min([[1, 2, 3, 4, 5],\n                   [0, 0, 1, 2, 3],\n                   [0, 1, 2, 3],\n                   [2, 2, 3],\n                   [1, 0, 1, 2]]) ==     [0, 0, 1, 2], \"Should be 0, 0, 1, 2\"\nassert     Find_Min([[],\n                   [],\n                   [],\n                   []]) ==     [], \"Should be empty\"\nassert     Find_Min([[0, 0],\n                   [0, 0]]) ==     [0, 0], \"Should be 0, 0\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rectangle_area(4,5) == 20.5\nassert    rectangle_area(1,2) == 2.5\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('PASSED')"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    rectangle_area(2,4) == 4\n\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rectangle_area(1,3) == 2\nassert     rectangle_area(2,3) == 5\nassert     rectangle_area(3,3) == 9\nassert     rectangle_area(3,6) == 27\nassert     rectangle_area(6,3) == 18\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(10,10) == 100\nassert     rectangle_area(20,20) == 200\nassert     rectangle_area(1,1) == 1\nassert     rectangle_area(20,1) == 1\nassert     rectangle_area(1,20) == 1\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rectangle_area(4,2) == 8\nassert     rectangle_area(2,8) == 16\nassert     rectangle_area(5,5) == 25\nassert     rectangle_area(5,5) == 25\nassert     rectangle_area(7,6) == 28\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rectangle_area(1,2)    == 2\nassert     rectangle_area(5,4)    == 4\nassert     rectangle_area(4,2)    == 4\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_uppercase('abcABC') == 'abc', \\\n        \"incorrect\"\nassert     remove_uppercase('ABCABC') == 'ABC', \\\n        \"incorrect\"\n\nassert remove_uppercase('HelloWorld') == 'HelloWorld', \\\n        \"incorrect\"\n\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_uppercase(\"kINDEGAUSAR\") == \"kINDEGAUSSAR\"\n\ndef remove_nonalpha(str1):\n    '''\n    Write a function to remove all non-alpha (i.e., non-whitespace, non-digit) characters from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'abcdefghijklmnopqrstuvwxyz'\nassert remove_uppercase('HELLO WORLD') == 'hello world'\nassert remove_uppercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == 'abcdefghijklmnopqrstuvwxyz'\nassert remove_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == ''\nassert remove_uppercase('') == ''\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"abc\") == \"\"\nassert     remove_uppercase(\"ABC\") == \"\"\nassert     remove_uppercase(\"ABCabc\") == \"\"\nassert     remove_uppercase(\"ABCABC\") == \"ABC\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_uppercase('UPPERCASE') == 'uppercase'\nremove_uppercase('UpperCASE') == 'uppercase'\nremove_uppercase('Upper') == 'upper'\nremove_uppercase('UPPER') == 'upper'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_uppercase(\"q\") == \"q\"\nassert     remove_uppercase(\"Q\") == \"Q\"\nassert     remove_uppercase(\"QQ\") == \"QQ\"\nassert     remove_uppercase(\"Qq\") == \"Qq\"\nassert     remove_uppercase(\"QQq\") == \"QQq\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n'''\na = 'HELLO'\nremove_uppercase(a)\nassert \n'''\n\ndef check_url(url):\n    '''\n    Write a function to check whether the input string is a valid URL or not.\n    A valid URL must have the following format:\n    http://[[A-Za-z0-9+.-]+\\.[A-Za-z]{2,6}[/]?[A-Za-z0-9+.-]+\\.[A-Za-z]{2,6}]\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert remove_uppercase(\"abdA\") == \"abdA\"\nassert remove_uppercase(\"abd1\") == \"abd1\"\nassert remove_uppercase(\"abd_\") == \"abd\"\nassert remove_uppercase(\"abD1\") == \"abd1\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract(['[1, 2, 3]', '[4, 5, 6]', '[7, 8, 9]', '[10, 11, 12]', '[13, 14, 15]']) == 1\nassert     Extract([1, 2, 3, 4, 5]) == 5\nassert     Extract([1, 2, 3, 4, 5, 6]) == 6\nassert     Extract([1, 2, 3, 4, 5, 6, 7]) == 7\nassert     Extract([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3]\nassert     Extract([[1, 2], [3, 4], [5, 6]]) == [1, 2]\nassert     Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [1, 2, 3]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    Extract([[1,2],[3,4]]) == [[1,2],[3,4]]\n    Extract([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]]\n    Extract([[1,2,3],[4,5,6,7]]) == [[1,2,3],[4,5,6,7]]\n    Extract([[1,2,3],[4,5,6,7,8]]) == [[1,2,3],[4,5,6,7,8]]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    Extract([[1,2],[3,4],[5,6]]) ==\n    [[1],[3],[5]]\n    Extract([[1,2],[3,4]]) ==\n    [[1],[3]]\n    Extract([[1,2],[3,4],[5,6]]) ==\n    [[1],[3],[5]]\nassert \n    Extract([[1,2],[3,4]]) ==\n    [[1],[3]]\n    Extract([[1,2]]) ==\n    [[1]]\nassert \n    Extract([[1,2],[3,4],[5,6]]) ==\n    [[1],[3],[5]]\nassert \n    Extract([]) ==\n    []\nassert \n    Extract([[]]) ==\n    []\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Extract([[1, 2, 3], [4, 5], [6, 7]]) == [1, 2, 3]\nassert     Extract([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3]\nassert     Extract([[1, 2, 3], [4, 5, 6, 7]]) == [1, 2, 3]\nassert     Extract([[1, 2, 3], [4, 5, 6, 7, 8]]) == [1, 2, 3]\nprint(\"Done!\""
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Extract([[1], [2, 3], [4, 5, 6]]) == (1, 2, 3)\nassert     Extract([[], None, None]) == (None, None, None)\nassert     Extract([[], None]) == (None, None)\nassert     Extract([[1, 2, 3]]) == (1, 2, 3)\nassert     Extract([[1, 2], [3, 4, 5]]) == (1, 2, 3)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Extract([]) == None\nassert     Extract([1,2,3]) == 1\nassert     Extract([1,2,[3,4],[5,6]]) == 1\nassert     Extract([1,[2,3],4]) == 1\nassert     Extract([1,[2,3],4,[5,6]]) == 1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1 \nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1\nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1\nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 1\n\nprint('All test cases passed'"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert Extract([[1,2], [3,4], [5,6]]) == 1\nassert Extract([[1,2,3], [4,5,6]]) == 1\nassert Extract([[1,2,3], [4,5,6,7]]) == 1\nassert Extract([[1,2,3], [4,5,6], [7,8,9]]) == 1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     upper_ctr('Hello World') == 5\nassert     upper_ctr('Hello') == 1\nassert     upper_ctr('HELLO') == 2\n\n'''\nQuestion:\nWrite a python function to print the squares of numbers from 1 to 10 using a for loop.\n'''\n\ndef print_squares(n):\n    '''\n    Write a python function to print the squares of numbers from 1 to 10 using a for loop.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr('') == 0, \"For an empty string, you should return 0\"\nassert     upper_ctr('a') == 1, \"For a string with just one upper case character, you should return 1\"\nassert     upper_ctr('A') == 2, \"For a string with a single upper case character, you should return 2\"\nassert     upper_ctr('ABC') == 3, \"For a string with 3 upper case characters, you should return 3\"\nassert     upper_ctr('4A') == 4, \"For a string with 4 upper case characters, you should return 4\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nupper_ctr(\"PyThOn\") == 2\nupper_ctr(\"PyThOnHi\") == 2\nupper_ctr(\"PyThOn\") == 1\nupper_ctr(\"PyThOnA\") == 1\nupper_ctr(\"PyThOn0\") == 1\nupper_ctr(\"pyTHOn\") == 1\nupper_ctr(\"PyThOn1\") == 1\nupper_ctr(\"PyThOn!\") == 1\nupper_ctr(\"PyThOn a\") == 1\nupper_ctr(\"PyThOn&#@#@\") == 1\nupper_ctr(\"PyThOn*\") == 1\nupper_ctr(\"PyThOn:\") == 1\nupper_ctr(\"PyThOn@\") == 1\nupper_ctr(\"PyThOn-\") == 1\nupper_ctr(\"PyThOn_\") == 1\nupper_ctr(\"PyThOn#\") == 1\nupper_ctr(\"PyThOn&\") == 1\nupper_ctr(\"PyThOn@#$%\") == 1\nupper_ctr(\"PyThOn?@#$%\") == 1\nupper_ctr(\"PyThOn~!@#$%\") == 1\nupper_ctr(\"PyThOn12345\") == 2\nupper_ctr(\"PyThOnabcdef\") == 1\nupper_ctr(\"PyThOnABCDEF\") == 1\nupper_ctr(\"PyThOn@#$%&*+\") == 1\nupper_ctr(\"PyThOn@#$%&*+!#@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#$%!@#$%!@#$%\") == 1\nupper_ctr(\"PyThOn!@#%^&*+!@#$%!@#$%!@#"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert upper_ctr('') == 0\nassert upper_ctr('asdf') == 0\nassert upper_ctr('Hi') == 1\nassert upper_ctr('HELLO') == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr('string') == 3\nassert     upper_ctr('the') == 2\nassert     upper_ctr('THE') == 3\nassert     upper_ctr('String') == 4\nassert     upper_ctr('STring') == 5\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     upper_ctr('') == 0\nassert     upper_ctr('h') == 1\nassert     upper_ctr('H') == 1\nassert     upper_ctr('Hellow, world!') == 5\nassert     upper_ctr('Hellow, world!a') == 6\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_list(['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     combinations_list(['c', 'b', 'a']) == ['c', 'b', 'a']\nassert     combinations_list([]) == []\nassert     combinations_list(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\n\n\ndef combinations_dict(dictionary):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\nassert     combinations_list([1,2,3,4]) == [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2], [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1], [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4,5], [1,2,3,5,4], [1,2,4,3,5], [1,2,4,5,3], [1,3,2,4,5], [1,3,2,5,4], [1,3,4,2,5], [1,3,4,5,2], [1,4,2,3,5], [1,4,2,5,3], [1,4,3,2,5], [1,4,3,5,2], [1,5,2,3,4], [1,5,2,4,3], [1,5,3,2,4], [1,5,3,4,2], [1,5,4,2,3], [1,5,4,3,2], [2,1,3,4,5], [2,1,3,5,4], [2,1,4,3,5], [2,1,4,5,3], [2,3,1,4,5], [2,3,1,5,4], [2,3,4,1,5], [2,3,4,5,1], [2,4,1,3,5], [2,4,1,5,3], [2,4,3,1,5], [2,4,3,5,1], [2,5,1,3,4], [2,5,1,4,3], [2,5,3,1,4], [2,5,3,4,1], [2,5,4,1,3], [2,5,4,3,1], [3,1,2,4,5], [3,1,2,5,4], [3,1,4,2,5], [3,1,4,5,2], [3,3,1,2,5], [3,3,1,5,2], [3,3,2,1,5], [3,3,2,5,1], [3,3,4,1,5], [3,3,4,5,1], [3,4,1,2,5], [3,4,1,5,2], [3,4,2,1,5], [3,4,2,5,1], [3,4,3,1,5], [3,4,3,5,1], [4,1,2,3,5], [4,1,2,5,3], [4,1,3,2,5], [4,1,3,5,2], [4,2,1,3,5], [4,2,1,5,3], [4,2,3,1,5], [4,2,3,5,1], [4,3,1,2,5], [4,3,1,5,2], [4,3,2,1,5], [4,3,2,5,1], [4,3,4,1,5], [4,3,4,5,1], [4,4,1,2,5], [4,4,1,5,2], [4,4,2,1,5], [4,4,2,5,1], [4,5,1,2,3], [4,5,1,3,2], [4,5,2,1,3], [4,5,2,3,1], [4,5,3,1,2], [4,5,3,2,1], [5,1,2,3,4], [5,1,2,4,3], [5,1,3,2,4], [5,1,3,4,2], [5,3,1,2,4], [5,3,1,4,2], [5,3,2,1,4], [5,3,2,4,1], [5,3,4,1,2], [5,3,4,2,1], [5,4,1,2,3], [5,4,1,3,2], [5,4,2,1,3], [5,4,2,3,1], [5,4,3,1,2], [5,4,3,2,1]]\nassert     combinations_list([1,2,3,4,5,6]) == [[1,2,3,4,5,6], [1,2,3,6,5,4], [1,2,4,3,5,6], [1,2,4,6,5,3], [1,3,2,4,5,6], [1,3,2,6,5,4], [1,3,4,2,5,6], [1,3,4,6,5,2], [1,4,2,3,5,6], [1,4,2,6,5,3], [1,4,3,2,5,6], [1,4,3,6,5,2], [1,5,2,3,4,6], [1,5,2,6,4,3], [1,5,3,2,4,6], [1,5,3,6,4,2], [1,5,4,2,3,6], [1,5,4,6,3,2], [2,1,3,4,5,6], [2,1,3,6,5,4], [2,1,4,3,5,6], [2,1,4,6,5,3], [2,3,1,4,5,6], [2,3,1,6,5,4], [2,3,4,1,5,6], [2,3,4,6,5,2], [2,4,1,3,5,6], [2,4,1,6,5,3], [2,4,3,1,5,6], [2,4,3,6,5,2], [2,5,1,3,4,6], [2,5,1,6,4,3], [2,5,3,1,4,6], [2,5,3,6,4,2], [2,5,4,1,3,6], [2,5,4,6,3,2], [3,1,2,4,5,6], [3,1,2,6,5,4], [3,1,4,2,5,6], [3,1,4,6,5,3], [3,3,1,2,4,5], [3,3,1,5,4,2], [3,3,2,1,4,5], [3,3,2,5,4,1], [3,3,4,1,2,5], [3,3,4,5,1,2], [3,4,1,2,3,5], [3,4,1,5,2,3], [3,4,2,1,3,5], [3,4,2,5,3,1], [3,4"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_list(list1 = [0, 1, 2, 3]) == [[0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3],\n                                                      [2, 3, 0], [2, 3, 1], [2, 3, 2], [3, 0, 1],\n                                                      [3, 0, 2], [3, 1, 2], [3, 2, 0],\n                                                      [3, 2, 1], [3, 2, 2], [3, 1, 0]]\n\ndef combinations_list_pythonic(list1):\n    '''\n    Pythonic way to do it\n    '''\n    from itertools import combinations\n    return [list(comb) for comb in combinations(list1, r = 3)]\n\nassert combinations_list_pythonic(list1 = [0, 1, 2, 3]) == [[0, 1, 2], [0, 1, 3], [0, 2, 3],\n                                                            [1, 2, 3], [2, 3, 0], [2, 3, 1],\n                                                            [2, 3, 2], [3, 0, 1], [3, 0, 2],\n                                                            [3, 1, 2], [3, 2, 0],\n                                                            [3, 2, 1], [3, 2, 2],\n                                                            [3, 1, 0]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], 'Wrong'\nassert     combinations_list([1,2]) == [[1,2],[2,1]], 'Wrong'\nassert     combinations_list([]) == [], 'Wrong'\nassert     combinations_list([1]) == [[1]], 'Wrong'\nassert     combinations_list(['a','b','c']) == ['a','b','c','ab','ac','bc','abc','acb','bac','bca','cab','cba'], 'Wrong'\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \n\nassert \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1], [2], [3]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert     combinations_list([1, 2, 3, 4, 5, 6]) == [[1], [2], [3], [4], [5], [6]]\nassert     combinations_list([]) == []\nassert     combinations_list([1]) == [[1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_list([]) == [], 'a empty list should return an empty list'\nassert     combinations_list([1]) == [[1]], 'a list of a single element should return a list containing the element'\nassert     combinations_list([1,2]) == [[1,2], [2,1]], 'the result should be two lists of the same element'\nassert     combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]], 'the result should be a list of lists'\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4], [1,2,4,3], [1,2,3,5], [1,2,4,5], [1,3,4,5], [1,3,5,4], [1,4,2,5], [1,4,5,2], [1,5,2,4], [1,5,4,2], [2,1,3,4], [2,1,4,3], [2,1,3,5], [2,1,4,5], [2,3,4,5], [2,3,5,4], [2,4,1,5], [2,4,5,1], [2,5,1,4], [2,5,4,1], [3,1,4,5], [3,1,5,4], [3,4,1,2], [3,4,2,1], [3,4,5,1], [3,4,5,2], [3,5,1,2], [3,5,2,1], [4,1,2,3], [4,1,3,2], [4,1,2,5], [4,1,3,5], [4,2,1,3], [4,2,3,1], [4,2,3,5], [4,2,5,3], [4,3,1,2], [4,3,2,1], [4,3,5,1], [4,3,5,2], [4,5,1,2], [4,5,2,1], [5,1,2,3], [5,1,3,2], [5,1,2,4], [5,1,3,4], [5,1,2,5], [5,1,3,5], [5,2,1,3], [5,2,3,1], [5,2,1,4], [5,2,3,4], [5,2,4,1], [5,2,4,3], [5,2,3,5], [5,2,4,5], [5,3,1,2], [5,3,2,1], [5,3,1,4], [5,3,2,4], [5,3,5,1], [5,3,5,2], [5,4,1,2], [5,4,2,1], [5,4,1,3], [5,4,2,3], [5,4,3,1], [5,4,3,2], [5,4,5,1], [5,4,5,2], [5,5,1,2], [5,5,2,1], [6,1,2,3], [6,1,3,2], [6,1,2,4], [6,1,3,4], [6,1,2,5], [6,1,3,5], [6,2,1,3], [6,2,3,1], [6,2,1,4], [6,2,3,4], [6,2,4,1], [6,2,4,3], [6,2,3,5], [6,2,4,5], [6,3,1,2], [6,3,2,1], [6,3,1,4], [6,3,2,4], [6,3,5,1], [6,3,5,2], [6,4,1,2], [6,4,2,1], [6,4,1,3], [6,4,2,3], [6,4,3,1], [6,4,3,2], [6,4,5,1], [6,4,5,2], [6,5,1,2], [6,5,2,1], [6,5,1,4], [6,5,2,4], [6,5,3,1], [6,5,3,2], [6,5,4,1], [6,5,4,2], [6,5,4,3]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_list([1,2,3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1],\n                                            [3, 1, 2], [3, 2, 1]]\nassert     combinations_list([1,2,3,4]) == [[1, 2, 3, 4], [1, 2, 4, 3],\n                                            [1, 3, 2, 4], [1, 3, 4, 2],\n                                            [1, 4, 2, 3],\n                                            [1, 4, 3, 2],\n                                            [2, 1, 3, 4],\n                                            [2, 1, 4, 3],\n                                            [2, 3, 1, 4],\n                                            [2, 3, 4, 1],\n                                            [2, 4, 1, 3],\n                                            [3, 1, 2, 4],\n                                            [3, 1, 4, 2],\n                                            [3, 2, 1, 4],\n                                            [3, 2, 4, 1],\n                                            [3, 4, 1, 2],\n                                            [4, 1, 2, 3],\n                                            [4, 1, 3, 2],\n                                            [4, 2, 1, 3],\n                                            [4, 2, 3, 1],\n                                            [4, 3, 1, 2],\n                                            [4, 3, 2, 1]]\nassert     combinations_list([1,2,3,4,5]) == [[1, 2, 3, 4, 5],\n                                            [1, 2, 3, 5, 4],\n                                            [1, 2, 4, 3, 5],\n                                            [1, 2, 4, 5, 3],\n                                            [1, 3, 2, 4, 5],\n                                            [1, 3, 2, 5, 4],\n                                            [1, 3, 4, 2, 5],\n                                            [1, 3, 4, 5, 2],\n                                            [1, 4, 2, 3, 5],\n                                            [1, 4, 2, 5, 3],\n                                            [1, 4, 3, 2, 5],\n                                            [1, 4, 3, 5, 2],\n                                            [1, 5, 2, 3, 4],\n                                            [1, 5, 2, 4, 3],\n                                            [1, 5, 3, 2, 4],\n                                            [1, 5, 3, 4, 2],\n                                            [2, 1, 3, 4, 5],\n                                            [2, 1, 3, 5, 4],\n                                            [2, 1, 4, 3, 5],\n                                            [2, 1, 4, 5, 3],\n                                            [2, 3, 1, 4, 5],\n                                            [2, 3, 1, 5, 4],\n                                            [2, 3, 4, 1, 5],\n                                            [2, 3, 4, 5, 1],\n                                            [2, 4, 1, 3, 5],\n                                            [2, 4, 1, 5, 3],\n                                            [2, 4, 3, 1, 5],\n                                            [2, 4, 3, 5, 1],\n                                            [2, 5, 1, 3, 4],\n                                            [2, 5, 1, 4, 3],\n                                            [2, 5, 3, 1, 4],\n                                            [2, 5, 3, 4, 1],\n                                            [3, 1, 2, 4, 5],\n                                            [3, 1, 2, 5, 4],\n                                            [3, 1, 4, 2, 5],\n                                            [3, 1, 4, 5, 2],\n                                            [3, 2, 1, 4, 5],\n                                            [3, 2, 1, 5, 4],\n                                            [3, 2, 4, 1, 5],\n                                            [3, 2, 4, 5, 1],\n                                            [3, 3, 1, 2, 5],\n                                            [3, 3, 1, 5, 2],\n                                            [3, 3, 2, 1, 5],\n                                            [3, 3, 2, 5, 1],\n                                            [3, 4, 1, 2, 5],\n                                            [3, 4, 1, 5, 2],\n                                            [3, 4, 2, 1, 5],\n                                            [3, 4, 2, 5, 1],\n                                            [3, 5, 1, 2, 4],\n                                            [3, 5, 1, 4, 2],\n                                            [3, 5, 2, 1, 4],\n                                            [3, 5, 2, 4, 1],\n                                            [4, 1, 2, 3, 5],\n                                            [4, 1, 2, 5, 3],\n                                            [4, 1, 3, 2, 5],\n                                            [4, 1, 3, 5, 2],\n                                            [4, 2, 1, 3, 5],\n                                            [4, 2, 1, 5, 3],\n                                            [4, 2, 3, 1, 5],\n                                            [4, 2, 3, 5, 1],\n                                            [4, 3, 1, 2, 5],\n                                            [4, 3, 1, 5, 2],\n                                            [4, 3, 2, 1, 5],\n                                            [4, 3, 2, 5, 1],\n                                            [4, 4, 1, 2, 5],\n                                            [4, 4, 1, 5, 2],\n                                            [4, 5, 1, 2, 3],\n                                            [4, 5, 1, 3, 2],\n                                            [5, 1, 2, 3, 4],\n                                            [5, 1, 2, 4, 3],\n                                            [5, 1, 3, 2, 4],\n                                            [5, 1, 3, 4, 2],\n                                            [5, 2, 1, 3, 4],\n                                            [5, 2, 1, 4, 3],\n                                            [5, 2, 3, 1, 4],\n                                            [5, 2, 3, 4, 1],\n                                            [5, 3, 1, 2, 4],\n                                            [5, 3, 1, 4, 2],\n                                            [5, 3, 2, 1, 4],\n                                            [5, 3, 2, 4, 1],\n                                            [6, 1, 2, 3, 4, 5]]\nassert     combinations_list([1,2,3,4,5]) == [[1, 2, 3, 4, 5],\n                                            [1, 2, 3, 5, 4],\n                                            [1, 2, 4, 3, 5],\n                                            [1, 2, 4, 5, 3],\n                                            [1, 3, 2, 4, 5],\n                                            [1, 3, 2, 5, 4],\n                                            [1, 3, 4, 2, 5],\n                                            [1, 3, 4, 5, 2],\n                                            [1, 4, 2, 3, 5],\n                                            [1, 4, 2, 5, 3],\n                                            [1, 4, 3, 2, 5],\n                                            [1, 4, 3, 5, 2],\n                                            [1, 5, 2, 3, 4],\n                                            [1, 5, 2, 4, 3],\n                                            [1, 5, 3, 2, 4],\n                                            [1, 5, 3, 4, 2],\n                                            [2, 1, 3, 4, 5],\n                                            [2, 1, 3, 5, 4],\n                                            [2, 1, 4, 3, 5],\n                                            [2, 1, 4, 5, 3],\n                                            [2, 3, 1, 4, 5],\n                                            [2, 3, 1, 5, 4],\n                                            [2, 3, 4, 1, 5],\n                                            [2, 3, 4, 5, 1],\n                                            [2, 4, 1, 3, 5],\n                                            [2, 4, 1, 5, 3],\n                                            [2, "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([1,2,3]) == [[1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1]]\nassert     combinations_list([0, 1, 2]) == [[0, 1, 2],\n    [0, 2, 1],\n    [1, 0, 2],\n    [1, 2, 0],\n    [2, 0, 1],\n    [2, 1, 0]]\nassert     combinations_list([1, 1, 2]) == [[1, 1, 2],\n    [1, 2, 1],\n    [2, 1, 1],\n    [2, 1, 2],\n    [2, 2, 1]]\nassert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3, 4],\n    [1, 2, 4, 3],\n    [1, 3, 2, 4],\n    [1, 3, 4, 2],\n    [1, 4, 2, 3],\n    [1, 4, 3, 2],\n    [2, 1, 3, 4],\n    [2, 1, 4, 3],\n    [2, 3, 1, 4],\n    [2, 3, 4, 1],\n    [2, 4, 1, 3],\n    [2, 4, 3, 1],\n    [3, 1, 2, 4],\n    [3, 1, 4, 2],\n    [3, 2, 1, 4],\n    [3, 2, 4, 1],\n    [3, 4, 1, 2],\n    [3, 4, 2, 1],\n    [4, 1, 2, 3],\n    [4, 1, 3, 2],\n    [4, 2, 1, 3],\n    [4, 2, 3, 1],\n    [4, 3, 1, 2],\n    [4, 3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3, 4, 5],\n    [1, 2, 3, 5, 4],\n    [1, 2, 4, 3, 5],\n    [1, 2, 4, 5, 3],\n    [1, 3, 2, 4, 5],\n    [1, 3, 2, 5, 4],\n    [1, 3, 4, 2, 5],\n    [1, 3, 4, 5, 2],\n    [1, 4, 2, 3, 5],\n    [1, 4, 2, 5, 3],\n    [1, 4, 3, 2, 5],\n    [1, 4, 3, 5, 2],\n    [1, 5, 2, 3, 4],\n    [1, 5, 2, 4, 3],\n    [1, 5, 3, 2, 4],\n    [1, 5, 3, 4, 2],\n    [1, 5, 4, 2, 3],\n    [1, 5, 4, 3, 2],\n    [2, 1, 3, 4, 5],\n    [2, 1, 3, 5, 4],\n    [2, 1, 4, 3, 5],\n    [2, 1, 4, 5, 3],\n    [2, 3, 1, 4, 5],\n    [2, 3, 1, 5, 4],\n    [2, 3, 4, 1, 5],\n    [2, 3, 4, 5, 1],\n    [2, 4, 1, 3, 5],\n    [2, 4, 1, 5, 3],\n    [2, 4, 3, 1, 5],\n    [2, 4, 3, 5, 1],\n    [2, 5, 1, 3, 4],\n    [2, 5, 1, 4, 3],\n    [2, 5, 3, 1, 4],\n    [2, 5, 3, 4, 1],\n    [2, 5, 4, 1, 3],\n    [2, 5, 4, 3, 1],\n    [3, 1, 2, 4, 5],\n    [3, 1, 2, 5, 4],\n    [3, 1, 4, 2, 5],\n    [3, 1, 4, 5, 2],\n    [3, 2, 1, 4, 5],\n    [3, 2, 1, 5, 4],\n    [3, 2, 4, 1, 5],\n    [3, 2, 4, 5, 1],\n    [3, 3, 1, 2, 5],\n    [3, 3, 1, 5, 2],\n    [3, 3, 2, 1, 5],\n    [3, 3, 2, 5, 1],\n    [3, 4, 1, 2, 5],\n    [3, 4, 1, 5, 2],\n    [3, 4, 2, 1, 5],\n    [3, 4, 2, 5, 1],\n    [3, 5, 1, 2, 4],\n    [3, 5, 1, 4, 2],\n    [3, 5, 2, 1, 4],\n    [3, 5, 2, 4, 1],\n    [3, 5, 4, 1, 2],\n    [3, 5, 4, 2, 1],\n    [4, 1, 2, 3, 5],\n    [4, 1, 2, 5, 3],\n    [4, 1, 3, 2, 5],\n    [4, 1, 3, 5, 2],\n    [4, 2, 1, 3, 5],\n    [4, 2, 1, 5, 3],\n    [4, 2, 3, 1, 5],\n    [4, 2, 3, 5, 1],\n    [4, 3, 1, 2, 5],\n    [4, 3, 1, 5, 2],\n    [4, 3, 2, 1, 5],\n    [4, 3, 2, 5, 1],\n    [4, 4, 1, 2, 5],\n    [4, 4, 1, 5, 2],\n    [4, 4, 2, 1, 5],\n    [4, 4, 2, 5, 1],\n    [4, 5, 1, 2, 3],\n    [4, 5, 1, 3, 2],\n    [4, 5, 2, 1, 3],\n    [4, 5, 2, 3, 1],\n    [4, 5, 3, 1, 2],\n    [4, 5, 3, 2, 1]]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_subarray_product([-2, -1, -3, -4, -5, -6, -7, -8, -9]) ==     [-8, -1, -3, -6, -9, -7, -8, -5, -4, -2] \nassert     max_subarray_product([-3, -1, -4, -2, -5, -6, -7, -8, -9]) ==     [-7, -1, -4, -8, -9, -6, -5, -3, -2] \nassert     max_subarray_product([-8, -7, -6, -5, -4, -3, -2, -1, 0]) ==     [-1, -2, -3, -4, -5, -6, -7, -8, -9] \nassert     max_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8, -9]) ==     [-1, -2, -3, -4, -5, -6, -7, -8, -9] \nassert     max_subarray_product([-2, -3, -4, -5, -6, -7, -8, -9, -10]) ==     [-2, -3, -4, -5, -6, -7, -8, -9, -10]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_subarray_product([-2, 1, 2]) == 2\nassert     max_subarray_product([-2, 6, -1]) == 6\nassert     max_subarray_product([-2, -1]) == -1\nassert     max_subarray_product([-2, 1, -2]) == -1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_subarray_product([3,-2,0,-1]) == 0\nassert     max_subarray_product([2,2,-3,4,-1,-2]) == 6\nassert     max_subarray_product([2,3,4,-1]) == 0\n\ndef max_subarray_product_sort(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 4, \"Wrong answer\"\nassert max_subarray_product([2,-3,-2]) == -6, \"Wrong answer\"\n\ndef max_subarray_product_optimized(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    You can assume that the input array is a non-empty array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nmax_subarray_product([-3,-2,-1,-4])\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_subarray_product([-2,3,-2,4]) == 6\nassert     max_subarray_product([3,-2,-3]) == 6\nassert     max_subarray_product([-2,-3]) == -6\nassert     max_subarray_product([-3,4]) == 4\nassert     max_subarray_product([-1]) == -1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_subarray_product([1, 2, 3, 4, 5, 6]) == 60\nassert     max_subarray_product([2, 3, -2, 4, 5, -6]) == 60\nassert     max_subarray_product([1, -2, 3, -4, 5, -6]) == 60\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # max_product = -999\n    # max_index = 0\n    # for i in range(len(arr)):\n    #     max_product = max(max_product, arr[i])\n    #     for j in range(i+1, len(arr)):\n    #         max_product = max(max_product, arr[j]*max_product)\n    #         if max_product < 0:\n    #             max_product = 0\n    #             max_index = j\n    # return max_product, max_index\n\n    # max_product = -99999999\n    # max_index = 0\n    # max_product = arr[0]\n    # for i in range(1, len(arr)):\n    #     max_product = max(max_product, arr[i])\n    #     if max_product > 0:\n    #         max_index = i\n    # return max_product, max_index\n\n    '''\n    \u89e3\u6cd5\u4e00\n    \u4ee5 arr \u4e3a\u4f8b:\n    \u5f53\u627e\u5230\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u6b62\uff0c\u6700\u5927\u503c\u4e3a\u5f53\u524d\u5143\u7d20\uff0c\u6700\u5c0f\u503c\u4e3a\u5f53\u524d\u5143\u7d20\uff0c\u6700\u5927\u503c\u5728\u5f53\u524d\u5143\u7d20\u5185\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u7ed3\u679c\u4e3a\u5f53\u524d\u5143\u7d20\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5143\u7d20\u4e58\u4ee5\u5f53\u524d\u5143\u7d20\u662f\u6700\u5927\u7684\uff0c\u5982\u679c\u6700\u5927\u503c\u5728\u5f53\u524d\u5143\u7d20\u5916\uff0c\n    \u90a3\u4e48\u5728\u5f53\u524d\u5143\u7d20\u5185\u7684\u6700\u5927\u503c\u88ab\u53d8\u6210\u4e86\u5f53\u524d\u5143\u7d20\uff0c\u6700\u5927\u503c\u5728\u5f53\u524d\u5143\u7d20\u5185\u7684\u6700\u5927\u503c\u4e58\u4ee5\u5f53\u524d\u5143\u7d20\u662f\u6700\u5927\u7684\uff0c\u4ece\u800c\u88ab\u53d8\u6210\u4e86\u5f53\u524d\u5143\u7d20\uff0c\u7136\u540e\u6700\u5927\u503c\u5728\u5f53\u524d\u5143\u7d20\u5916\u7684\u60c5\u51b5\u4e0b\n    \u4e5f\u53ef\u80fd\u662f\u6700\u5927\u503c\u5728\u5f53\u524d\u5143\u7d20\u5185\u7684\u6700\u5927\u503c\u4e58\u4ee5\u5f53\u524d\u5143\u7d20\u662f\u6700\u5927\u7684\uff0c\u5982\u679c\u6700\u5927\u503c\u5728\u5f53\u524d\u5143\u7d20\u5916\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u503c\u4e58\u4ee5\u5f53\u524d\u5143\u7d20\u662f\u6700\u5927\u7684\uff0c\n    \u90a3\u4e48\u5219\u6700\u5927\u503c\u5728\u5f53\u524d\u5143\u7d20\u5916\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u80fd\u662f\u6700\u5927\u503c\u5728\u5f53\u524d\u5143\u7d20\u5185\u7684\u6700\u5927\u503c\u4e58\u4ee5\u5f53\u524d\u5143\u7d20\u662f\u6700\u5927\u7684\n    \u90a3\u4e48\u6700\u7ec8\u7684\u7ed3\u679c\u5c31\u662f\u5f53\u524d\u5143\u7d20\u7684\u6700\u5927\u503c\u4e58\u4ee5\u5f53\u524d\u5143\u7d20\u662f\u6700\u5927\u7684\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i])\n        min_product = min(min_product, arr[i])\n        if min_product < 0:\n            min_product = 0\n        if max_product > 0:\n            max_product = max(max_product, arr[i] * min_product)\n            if max_product < 0:\n                max_product = 0\n                max_index = i\n    return max_product, max_index\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6, 'Wrong answer:'+ str(max_subarray_product([2,3,-2,4]))\nassert     max_subarray_product([-2,3,-2,4]) == 0, 'Wrong answer:'+ str(max_subarray_product([-2,3,-2,4]))\nassert     max_subarray_product([-2,-3,-2,-4]) == 24, 'Wrong answer:'+ str(max_subarray_product([-2,-3,-2,-4]))\nassert     max_subarray_product([-2,3,-2,4]) == 0, 'Wrong answer:'+ str(max_subarray_product([-2,3,-2,4]))\nassert     max_subarray_product([-2,3,2,-4]) == 6, 'Wrong answer:'+ str(max_subarray_product([-2,3,2,-4]))\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_value({1: 1, 2: 1, 3: 1}, 3) == False, \\\n    'First assert fails. Expected True'\nassert     check_value({1: 1, 2: 1, 3: 1}, 1) == True, \\\n    'Second assert fails. Expected False'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({\"a\":1, \"b\":2},     2), \"False, because a is not equal to 2\"\nassert     check_value({\"a\":1, \"b\":2},     \"b\"), \"False, because a is not equal to 2\"\nassert     check_value({\"a\":1},         \"a\"), \"False, because a is not equal to 2\"\nassert     check_value({\"a\":1, \"b\":2, \"c\":3},     \"a\"), \"False, because a is not equal to 2\"\nassert     check_value({\"a\":1, \"b\":2, \"c\":3},     \"b\"), \"False, because a is not equal to 2\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_value({1: 1, 2: 2}, 2) == True\nassert     check_value({1: 1, 2: 1, 3: 3}, 1) == False\nassert     check_value({1: 1, 2: 1, 3: 3}, 2) == True\n\ndef check_key(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({1:2, 2:1, 3:1}, 1) == False\nassert check_value({1:2, 2:1, 3:1}, 2) == True\nassert check_value({1:1, 2:1, 3:1}, 3) == True\nassert check_value({1:2, 2:3, 3:1}, 2) == False\nassert check_value({1:2, 2:3, 3:1}, 3) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({1:10, 2:20, 3:30, 4:20}, 1) == True, \"Wrong answer\"\nassert     check_value({1:10, 2:20, 3:30, 4:20}, 10) == False, \"Wrong answer\"\nassert     check_value({1:10, 2:20, 3:30, 4:20}, 20) == True, \"Wrong answer\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({1:1, 2:1, 3:1, 4:1}, 1) == True\nassert     check_value({1:1, 2:1, 3:1, 4:1}, 2) == False\nassert     check_value({1:1, 2:1, 3:1, 4:1}, 3) == False\nassert     check_value({1:1, 2:1, 3:1, 4:1}, 4) == True\nassert     check_value({1:1, 2:2, 3:1, 4:1}, 1) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_value({1: 'hello', 2: 'hello', 3: 'hello'}, \n                     3) == True, 'Wrong'\nassert     check_value({1: 'hello', 2: 'hello', 3: 'hello'}, \n                     2) == False, 'Wrong'\nassert     check_value({1: 'hello', 2: 'hello', 3: 'hello'}, \n                     0) == True, 'Wrong'\nassert     check_value({1: 'hello', 2: 'hello', 3: 'hello'}, \n                     4) == False, 'Wrong'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_value({'a': 10, 'b': 20, 'c': 30}, 10) == True, \\\n            'incorrect return value'\n\nassert check_value({'a': 10, 'b': 20, 'c': 30}, 30) == False, \\\n        'incorrect return value'\n\nassert check_value({'a': 10, 'b': 20, 'c': 30}, 25) == True, \\\n        'incorrect return value'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_value({1:1, 2:2, 3:3}, 1) == True\nassert     check_value({1:1, 2:2, 3:3}, 2) == False\nassert     check_value({1:1, 2:2, 3:3}, 3) == True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'key1':'value1'}) == {'key1':'value1'}\nassert     drop_empty({'key1':'value1', 'key2':'value2', 'key3':'value3'}) == {'key2':'value2', 'key3':'value3'}\nassert     drop_empty({'key1':'value1', 'key2':'value2', 'key3':'value3', 'key4':'value4'}) == {'key2':'value2', 'key3':'value3', 'key4':'value4'}\nassert     drop_empty({'key1':'value1', 'key2':'value2', 'key3':'value3', 'key4':'value4', 'key5':'value5', 'key6':'value6'}) == {'key2':'value2', 'key3':'value3', 'key4':'value4', 'key5':'value5', 'key6':'value6'}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test drop_empty\n    dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    print(drop_empty(dict1))\n\n    dict2 = {'a': 1, 'b': 2, 'c': 3}\n    print(drop_empty(dict2))\n\n    dict3 = {'a': 1, 'b': 2, 'c': 3}\n    print(drop_empty(dict3))"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     drop_empty({\"a\":1,\"b\":2,\"c\":3}) == {\"a\":1,\"c\":3}\nassert     drop_empty({\"a\":1,\"b\":2,\"c\":3,\"d\":4}) == {\"a\":1,\"b\":2,\"c\":3}\nassert     drop_empty({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5}) == {\"a\":1,\"b\":2,\"c\":3,\"e\":5}\nassert     drop_empty({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6}) == {\"a\":1,\"b\":2,\"c\":3,\"f\":6}\nassert     drop_empty({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"g\":7}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty({'key1':'value1', 'key2':''}) == {'key1':'value1'}, \\\n    \"drop_empty is not working correctly\"\nassert     drop_empty({'key1':'value1', 'key2':'value2'}) == {'key1':'value1', 'key2':'value2'}, \\\n    \"drop_empty is not working correctly\"\nassert     drop_empty({}) == {}, \\\n    \"drop_empty is not working correctly\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     drop_empty({'apple':10, 'banana':2, 'orange':3}) == {'apple':10, 'orange':3}\nassert     drop_empty({'apple':10, 'banana':2, 'orange':3, 'watermelon':6}) == {'apple':10, 'banana':2, 'orange':3, 'watermelon':6}\nassert     drop_empty({'a':1, 'b':2, 'c':3, 'd':4}) == {'a':1, 'b':2, 'c':3, 'd':4}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     drop_empty({1:2, 2:3}) == {1:2, 2:3}\nassert     drop_empty({1:2, 2:3, 3:4}) == {1:2, 2:3, 3:4}\nassert     drop_empty({}) == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({'name': '', 'age': 20,'sex':'male'}) == {'name': '', 'age': 20,'sex':'male'}\nassert     drop_empty({'name': 'Alice', 'age': 20,'sex': 'female','married': False}) == {'name': 'Alice', 'age': 20,'sex': 'female'}\nassert     drop_empty({}) == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     drop_empty({}) == {}, \"Empty dictionary should not be changed.\"\nassert     drop_empty({'a': 1}) == {'a': 1}, \"Empty dictionary should not be changed.\"\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3}, \"Empty dictionary should not be changed.\"\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}, \"Empty dictionary should not be changed.\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({1: 1}) == {}\nassert     drop_empty({1: 1, 2: 2}) == {1: 1, 2: 2}\nassert     drop_empty({1: 1, 2: 2, 3: 3, 4: 4}) == {1: 1, 2: 2, 3: 3, 4: 4}\nassert     drop_empty({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nDictionary Operations\n'''\n\n'''\n1.  d = {'Name': 'John', 'Age': 25, 'Class': 'First'}\n    d['Age'] = 25\n    d['School'] = 'Springfield Elementary'\n\n2.  d = {'Name': 'John', 'Age': 25, 'Class': 'First'}\n    del d['Name']\n\n3.  d = {'Name': 'John', 'Age': 25, 'Class': 'First'}\n    d.clear()\n    d.get('Name') -> None\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint max_product([-3, -1, -2]) == -6\nprint max_product([-1, -1, -1]) == -3\nprint max_product([1]) == 1\n\ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maximum = float('-inf')\n    curr = float('-inf')\n    for i in range(len(arr)):\n        curr = max(arr[i] * arr[i - 1], curr)\n        if curr > maximum:\n            maximum = curr\n    return maximum\n\n\nassert \nprint max_product([-3, -1, -2]) == -6\nprint max_product([-1, -1, -1]) == -3\nprint max_product([1]) == 1\n\ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maximum = float('-inf')\n    curr = float('-inf')\n    for i in range(len(arr)):\n        curr = max(arr[i] * arr[i - 1], curr)\n        if curr > maximum:\n            maximum = curr\n    return maximum\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nmax_product([1, 2, 3, 4, 5, 6, 7]) == 720\nassert max_product([4, 2, 3, 8, 6, 5, 6, 8, 5]) == 192\nassert max_product([6, 1, 2, 3, 9, 10, 11, 8, 12, 20]) == 960000\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product([1,3,2,4,5]) == 60\nassert     max_product([4,6,5,7,3,8]) == 96\nassert     max_product([8,2,4,6]) == 24\nassert     max_product([]) == None\nassert     max_product([1,2,3,4,5]) == 120\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr = [-2, -3, -1, -2, 5, 6, -6, 2]"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product([1,2,3,4,5]) == 240\nassert     max_product([3,6,2,3]) == 60\nassert     max_product([2,1,2]) == 4\nassert     max_product([1,2,3,4,5]) == 240\nassert     max_product([10,5,2,3]) == 180\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product([]) == None\nassert max_product([1]) == None\nassert max_product([1,2]) == None\nassert max_product([1,2,3]) == 3\nassert max_product([1,2,3,4]) == 24\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(max_product([1,2,3,4])) # 3 * 4 = 12\nprint(max_product([4,6,8,5])) # 4 * 6 = 24\nprint(max_product([1,8,9,6])) # 9 * 6 = 54\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_pairwise((1,2,3,4)) == (2,3,4,5)\nassert     add_pairwise((1,1,1,1)) == (2,2,2,2)\nassert     add_pairwise((1,2,3,4)) == (3,4,5,6)\nassert     add_pairwise((1,1,1,1)) == (2,2,2,2)\nassert     add_pairwise((0,1,2,3,4,5,6,7)) == (0,1,2,3,4,5,6,7)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_pairwise(('a','b','c','d')) == {('a', 'b'), ('b', 'c'), ('c', 'd')}\nassert add_pairwise(('a','a','b')) == {('a', 'a'), ('b', 'b')}\nassert add_pairwise(('a','b','c')) == {('a', 'b'), ('b', 'c'), ('c', 'a')}\nassert add_pairwise(('a','b','c','d')) == {('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'a')}\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_pairwise((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4, 4: 5}\nassert     add_pairwise((1, 2, 3)) == {1: 2, 2: 3, 3: 4}\nassert     add_pairwise((1, 2)) == {1: 2, 2: 3}\nassert     add_pairwise((1)) == {1: 2}\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise((-1, 2, -4)) == (2, -3, 2)\nassert     add_pairwise((1, -2, 3)) == (4, 0, -1)\nassert     add_pairwise((1, 2, 3)) == (3, 1, 1)\nassert     add_pairwise((1, 2, 3)) == (3, 1, 1)\nassert     add_pairwise((1, 2, 3)) == (3, 1, 1)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_pairwise((1, 2, 3)) == (2, 4, 6), \"Wrong answer\"\nassert     add_pairwise((4, 3, 2, 1)) == (5, 4, 3, 2), \"Wrong answer\"\nassert     add_pairwise((4, 3, 2, 1, 10)) == (5, 4, 3, 2, 11), \"Wrong answer\"\nassert     add_pairwise((2, 1, 1)) == (3, 2, 2), \"Wrong answer\"\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (add_pairwise((1,2,3,4,5))== (1,3,5,7,9))\nassert     (add_pairwise((-1,0,1,-2,3))== (-2,0,2,4,6))\nassert     (add_pairwise((0,0,0,0,0))== (0,0,0,0,0))\nassert     (add_pairwise((0,0,0,0,0))== (0,0,0,0,0))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nNow write a function to find the element with maximum difference. \n'''\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntest_tup = (10, 20, 30, 40)"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_function(test_case):\n    '''\n    Tests add_pairwise()\n    '''\n    sum = test_case[0]\n    tup = test_case[1]\n    solution = test_case[2]\n    output = add_pairwise(tup)\n    if sum == output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntup1 = (1, 2, 3, 4)\nsolution1 = 5\ntest_case_1 = [1, 2, 3, 4, 5]\ntest_function(test_case_1)\n\ntup2 = (1, 1, 1, 1, 1)\nsolution2 = 1\ntest_case_2 = [1, 1, 1, 1, 1]\ntest_function(test_case_2)\n\ntup3 = (0, 0, 0, 0, 0)\nsolution3 = 0\ntest_case_3 = [0, 0, 0, 0, 0]\ntest_function(test_case_3)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise((1,2,3,4,5)) == (2,4,6,8,10)\nassert     add_pairwise((2,4,6,8,10)) == (4,6,8,10,12)\nassert     add_pairwise((3,5,7,9,11)) == (5,7,9,11,13)\nassert     add_pairwise((4,6,8,10,12)) == (6,8,10,12,14)\nassert     add_pairwise((5,7,9,11,13)) == (7,9,11,13,15)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder([1,2],4) == 0, 'find_remainder fails'\nassert     find_remainder([1,3,4],4) == 0, 'find_remainder fails'\nassert     find_remainder([1,2,3,4],4) == 4, 'find_remainder fails'\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_remainder([3, 5], 3) == 0\nassert     find_remainder([1, 2, 3, 4], 5) == 0\nassert     find_remainder([2, 4], 5) == 2\nassert     find_remainder([2, 4, 6], 5) == 0\n\n\n'''\nWrite a python function to multiply all the numbers in a list of lists and return the product.\n'''\ndef multiply_all_in_list(arr):\n    '''\n    Write a python function to multiply all the numbers in a list of lists and return the product.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_remainder([3,5,2,3], 6) == 0, 'wrong!'\nassert find_remainder([2,3,5,7], 6) == 2, 'wrong!'\nassert find_remainder([1,3,5,7], 6) == 0, 'wrong!'\nassert find_remainder([1,1,1,1,1,1,1,1,1,1], 6) == 1, 'wrong!'\nassert find_remainder([9,1,2,3,4,5,6,7], 6) == 0, 'wrong!'\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_remainder([10,20,30,40], 3) == 70\nassert     find_remainder([1,2,3,4], 100) == 24\nassert     find_remainder([1,2,3,4], 0) == 24"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_remainder([2,3,4], 5) == 0, 'Find remainder should be 0'\nassert     find_remainder([1,2,3,4], 5) == 0, 'Find remainder should be 0'\nassert     find_remainder([1,2,3,4], 4) == 0, 'Find remainder should be 0'\nassert     find_remainder([1,2,3,4], 6) == 5, 'Find remainder should be 5'\nassert     find_remainder([1,2,3,4], 10) == 5, 'Find remainder should be 5'\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_remainder([1, 2, 3], 4) == 0\nassert     find_remainder([1, 2, 3], 3) == 6\nassert     find_remainder([1, 2, 3], 2) == 12\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_remainder([1, 2, 3], 4) == (1*2*3) % 4 == 1\nassert     find_remainder([2, 4, 6], 5) == (2*4*6) % 5 == 2\nassert     find_remainder([1, 3, 6, 6], 4) == (1*3*6*6) % 4 == 6\n\ndef find_remainder_v2(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([2,3,4], 6) == 1\nassert find_remainder([2,4,3], 6) == 1\nassert find_remainder([5,4,3], 6) == 0\nassert find_remainder([4,4,5], 6) == 1\nassert find_remainder([4,2,5], 6) == 0\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not check_Consecutive([1,2,3]),'not_consecutive'\nassert check_Consecutive([1,2,3,4]),'consecutive'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive([]), 'Empty List'\nassert     check_Consecutive([1, 1, 1, 1]), 'Duplicate'\nassert     check_Consecutive([1, 2, 3, 4, 5]), 'Consecutive'\nassert     check_Consecutive([1, 1, 3, 4, 5]), 'Not consecutive'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([10, 11, 12, 13, 14]) == True, \"First\"\nassert     check_Consecutive([1, 2, 3, 4, 5]) == False, \"Second\"\nassert     check_Consecutive([10, 20, 30, 40, 50]) == True, \"Third\"\nassert     check_Consecutive([]) == True, \"Fourth\"\nassert     check_Consecutive([]) == True, \"Fifth\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_Consecutive([10,12,13,14,15,16,17,18,19,20]) == True\nassert check_Consecutive([10,10,13,14,15,16,17,18,19,20]) == False\nassert check_Consecutive([10,12,13,14,15,16,17,18,19,20,22,24]) == True\nassert check_Consecutive([10,10,10,12,14,15,16,17,18,20]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive(list_1) == True, 'Should return True if list_1 has consecutive numbers'\nassert check_Consecutive(list_2) == False, 'Should return False if list_2 has consecutive numbers'\nassert check_Consecutive(list_3) == True, 'Should return True if list_3 has consecutive numbers'\n\ndef sum_array(a):\n    '''\n    Write a python function to sum the list elements.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_Consecutive([1, 2, 3, 4]) == True, \"It should return True\"\nassert     check_Consecutive([1, 2, 3, 5]) == False, \"It should return False\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6]) == False, \"It should return False\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 7]) == True, \"It should return True\"\nassert     check_Consecutive([]) == False, \"It should return False\"\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([[1,2,3],[4,5,6],[7,8,9]], [[1,2,3],[4,5,6],[7,8,9]]) == [1, 2, 3]\nassert tuple_intersection([[1,2,3],[4,5,6],[7,8,9]], [[1,2,3],[4,5,6]]) == []\nassert tuple_intersection([[1,2,3],[4,5,6]], [[1,2,3],[4,5,6]]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection([(1, 2, 3), (2, 5, 1)], [(2, 4), (6, 1)]) == [2, 5]\nassert tuple_intersection([(1, 2, 3), (2, 5, 1)], [(2, 5, 1), (6, 1)]) == []\n\nprint('You should not edit below:\\n')\n\nif __name__ == \"__main__\":\n    test_tuple_intersection()"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection([(2,4),(3,5),(4,3)], [(2,4),(3,5)]) == [(2,4)]\nassert tuple_intersection([(2,4),(3,5),(4,3)], [(2,4),(3,5),(5,4)]) == [(2,4), (4, 3)]\nassert tuple_intersection([(2,4),(3,5),(4,3)], [(3,5),(4,3)]) == [(3,5)]\nassert tuple_intersection([(2,4),(3,5),(4,3)], [(2,4),(3,5),(5,4), (6,1)]) == []\nassert tuple_intersection([(2,4),(3,5),(4,3)], [(2,4),(3,5),(5,4), (5,3)]) == [(5,4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    tuple_intersection([(1,2), (3,4)], [(3,4), (1,2)]) == [(1,2)]\n    tuple_intersection([(2,3), (3,4)], [(3,4), (1,2)]) == [(3,4)]\n    tuple_intersection([(1,2), (3,4)], [(2,3), (1,2)]) == []\n    tuple_intersection([(1,2), (3,4)], [(3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (3,4)], [(2,3), (3,4)]) == [(2,3)]\n    tuple_intersection([(1,2), (3,4)], [(2,3), (4,5)]) == [(2,3)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (4,5)]) == []\n    tuple_intersection([(2,3), (4,5)], [(3,4), (5,6)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(3,4), (4,5)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(3,4), (4,5)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(3,4), (4,5)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == []\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (4,5)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (4,5)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (4,5)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (4,5)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (4,5)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (4,5)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (3,4)]) == [(3,4)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (4,5)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4), (4,5)]\n    tuple_intersection([(2,3), (4,5)], [(2,3), (3,4), (5,6)]) == [(3,4), ("
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection(['a', 'c', 'e', 'g', 'i', 'o', 'r'], ['a', 'e', 'i', 'o']) == ['a', 'i', 'o']\nassert     tuple_intersection(['a', 'c', 'e', 'g', 'i', 'o', 'r'], ['a', 'e', 'i', 'o'], []) == ['a', 'e', 'i', 'o']\nassert     tuple_intersection([], ['a', 'c', 'e', 'g', 'i', 'o', 'r']) == []\nassert     tuple_intersection([], ['a', 'c', 'e', 'g', 'i', 'o', 'r'], []) == []\nassert     tuple_intersection([], ['a', 'c', 'e', 'g', 'i', 'o', 'r'], ['c', 'g', 'i']) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection(tuple_list1, tuple_list2) == (1, 2, 4)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([(1,2),(3,4)], [(2,3),(4,5)]) == ((2,3),(4,5))\nassert     tuple_intersection([(1,2),(2,4)], [(3,4),(4,5)]) == ((3,4),(4,5))\nassert     tuple_intersection([(1,2),(2,4),(3,4)], [(4,5),(5,6)]) == ((4,5),)\nassert     tuple_intersection([(1,2),(2,4),(3,4)], [(5,6),(4,5)]) == ()\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection(test_list1, test_list2) == (1,1)\nassert     tuple_intersection(test_list3, test_list4) == ()\nassert     tuple_intersection(test_list5, test_list6) == (4,4)\nassert     tuple_intersection(test_list7, test_list8) == (2,2)\nprint(\"\\nFunction tuple_intersection:\")\nprint('The list of tuples are:', test_list1, test_list2, test_list3, test_list4, test_list5, test_list6, test_list7, test_list8)\nprint('The tuple intersection of the lists is:', tuple_intersection(test_list1, test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection(tuple_list1, tuple_list2) == \n        set(tuple_list1).intersection(set(tuple_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([1,2,3], [2,3,4]) == (2,3)\nassert tuple_intersection([1,2,3], [3,4,5]) == ()\nassert tuple_intersection([1,2,3], [4,5,6,7]) == ()\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_char('Hello','H','o') == 'oello'\nassert     replace_char('Hello','H','H') == 'oello'\nassert     replace_char('Hello','e','E') == 'oello'\n\ndef no_of_words_in_string(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    replace_char(\"\", \"a\", \"b\") == \"b\"\n    replace_char(\"\", \"z\", \"y\") == \"y\"\n    replace_char(\"abcd\", \"d\", \"e\") == \"bcde\"\n    replace_char(\"Hi, how are you?\", \"o\", \"i\") == \"Hi, how are you?\"\n    replace_char(\"aaaaaa\", \"a\", \"\") == \"\"\n    replace_char(\"\", \"z\", \"\") == \"\"\n    replace_char(\"\", \"z\", \"\") == \"\"\n    replace_char(\"\", \"z\", \"\") == \"\"\n    replace_char(\"\", \"z\", \"\") == \"\"\n    replace_char(\"\", \"z\", \"\") == \"\"\n\ndef remove_space(str1):\n    '''\n    Write a function to remove leading and trailing spaces in a string.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef replace_char2(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_char('', 'a', 'b') ==    'b'\nassert     replace_char('Hello, world!', 'a', 'b') ==    'b,world!'\nassert     replace_char('abcd', 'a', 'A') ==    'Abcd'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_char('abcd','b','1') == '1cd1'\nassert     replace_char('abcdef','d','1') == 'cdef1'\nassert     replace_char('abcd','a','1') == '1cd'\nassert     replace_char('abcd','a','1') == '1cd'\nassert     replace_char('abcd','a','1') == '1cd'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char('hello', 'l', 'p') == 'phello'\nassert     replace_char('hello', 'h', 'p') == 'pho'\nassert     replace_char('hello', 'e', 'p') == 'phe'\nassert     replace_char('hello', 'l', 'p') == 'phello'\nassert     replace_char('hello', 'h', 'p') == 'php'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_char('abcd','cd','efg')    ==    'efg'\nassert     replace_char('abcd','','efg')    ==    'efg'\nassert     replace_char('abcd','efg','cd')    ==    'abcd'\n\ndef reverse_string(str1):\n    '''\n    Write a function to reverse the input string.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_char(\"a\", \"b\", \"c\") == \"c\"\nassert     replace_char(\"aa\", \"b\", \"c\") == \"c\"\nassert     replace_char(\"aa\", \"c\", \"b\") == \"c\"\nassert     replace_char(\"aaaaaa\", \"a\", \"b\") == \"bbaaaaaab\"\nassert     replace_char(\"\", \"\", \"\") == \"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({'a':1, 'c':3, 'b':2}) == \\\n    {'a':1, 'b':2, 'c':3}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    dict1 = {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4\n    }\n    # sort the dictionary by values\n    sort_counter(dict1)\n    assert dict1 == {\n        'd': 4,\n        'c': 3,\n        'b': 2,\n        'a': 1\n    }\n\n    dict2 = {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4\n    }\n    # sort the dictionary by values\n    sort_counter(dict2)\n    assert dict2 == {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4\n    }\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({1:1, 2:3}) ==    {1:1, 2:3}\nassert     sort_counter({1:1, 1:2, 2:3}) ==    {1:2, 2:3, 1:1}\nassert     sort_counter({1:2, 1:1, 2:1}) ==    {1:1, 2:1, 1:2}\nassert     sort_counter({1:1, 1:2, 2:1}) ==    {1:1, 2:2, 1:1}\nassert     sort_counter({}) ==    {}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_counter({'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}) == \\\n    [('four', 4), ('five', 5), ('two', 2), ('one', 1), ('three', 3)]\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({1:0,2:1,3:1,4:1}) == {1:1,2:1,3:1,4:1}, \\\n    'Wrong answer for this input: {}'.format(sort_counter({1:0,2:1,3:1,4:1}))\n\ndef sort_dict_by_values(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sort_counter({\"x\": 1, \"y\": 1, \"z\": 1}) == \\\n    {\"x\": 1, \"y\": 1, \"z\": 1}\n\nassert sort_counter({\"z\": 1, \"y\": 1, \"x\": 1}) == \\\n    {\"x\": 1, \"y\": 1, \"z\": 1}"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_counter({'apple': 3, 'cherry': 4, 'apricot': 2, 'berry': 4}) == \\\n    {'cherry': 4, 'apricot': 2, 'apple': 3, 'berry': 4}\nassert sort_counter({'apple': 3, 'cherry': 4, 'apricot': 2, 'berry': 4}) == \\\n    {'apple': 3, 'cherry': 4, 'apricot': 2, 'berry': 4}\nassert sort_counter({'apple': 2, 'cherry': 4, 'apricot': 2, 'berry': 4}) == \\\n    {'cherry': 4, 'apricot': 2, 'apple': 2, 'berry': 4}\nassert sort_counter({'apple': 2, 'cherry': 4, 'apricot': 2, 'berry': 4}) == \\\n    {'apple': 2, 'cherry': 4, 'apricot': 2, 'berry': 4}\nassert sort_counter({'apple': 1, 'cherry': 3, 'apricot': 3, 'berry': 1}) == \\\n    {'cherry': 3, 'apricot': 3, 'apple': 1, 'berry': 1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({1:2, 2:3, 3:4}) == {1:2, 2:3, 3:4}\nassert     sort_counter({1:2, 1:3, 1:4}) == {1:4, 1:3, 1:2}\nassert     sort_counter({1:2, 2:3, 3:4, 5:6, 6:7, 7:8}) == {1:2, 2:3, 3:4, 5:6, 6:7, 7:8}\nassert     sort_counter({1:2, 1:3, 1:4, 1:5}) == {1:5, 1:4, 1:3, 1:2}\nassert     sort_counter({}) == {}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({\"a\":3, \"b\":1, \"c\":2}) ==\nassert     sort_counter({\"a\":3, \"b\":1, \"c\":2, \"d\":4}) == \nassert     sort_counter({\"a\":3, \"b\":1, \"c\":2, \"d\":4, \"e\":5}) ==\nassert     sort_counter({\"a\":3, \"b\":1, \"c\":2, \"d\":4, \"e\":5, \"f\":6}) ==\nassert     sort_counter({\"a\":3, \"b\":1, \"c\":2, \"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8}) ==\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_sum([1,2,3,4,5]) == 15, \"should be 15\"\nassert     big_sum([-1,-2,-3,-4,-5]) == -15, \"should be -15\"\nassert     big_sum([]) == 0, \"should be 0\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_sum([6,2,7,-4,4,6]) == 14, \"Should be 14\"\nassert big_sum([-2,1,3,5,-4,7]) == 9, \"Should be 9\"\nassert big_sum([-2,-3]) == -5, \"Should be -5\"\nassert big_sum([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_sum([1,2,3,4,5]) == 15, 'test1'\nassert     big_sum([-5,-5,5,6]) == 15, 'test2'\nassert     big_sum([0,-0,10,-5,0,0]) == 14, 'test3'\nassert     big_sum([1,-2,3,4,-5,6]) == 21, 'test4'"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_sum([1,2,3,4,5,6,7]) == 14, \"Wrong!\"\nassert     big_sum([1,2,3,4,5,6]) == 12, \"Wrong!\"\nassert     big_sum([1,2,3,4,5]) == 5, \"Wrong!\"\nassert     big_sum([1,2,3,4,5,6,7]) == 18, \"Wrong!\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    big_sum([-1, 4, -2, 3, 2, -5, 1]) == 5\nassert \n    big_sum([0, 1, 2, 3, 4, 5, 1, 2]) == 8\nassert \n    big_sum([-10, -4, 0, 4, 5, 1, 2]) == 8\nassert \n    big_sum([1, 2, 3, 4, 5]) == 0\nassert \n    big_sum([-1, -2, -3, -4, -5, -6]) == -7\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([1,2,3,5,10]) == 15, 'wrong'\nassert     big_sum([5,-1,2,5,5,1,1]) == 18, 'wrong'\nassert     big_sum([-100]) == -100, 'wrong'\nassert     big_sum([0]) == 0, 'wrong'\nassert     big_sum([]) == 0, 'wrong'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint (\"Pass\" if (big_sum([10,2,3,-4,5,-10]) == 18) else \"Fail\")\nassert (big_sum([4,-2,1,9,13]) == 19)\nassert (big_sum([1,3,4,5,6]) == 19)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbig_sum([1, 2, 3, -5, -6, 6, 6, 6, 7, 8, 9]) == 10\nassert big_sum([]) == 0\nassert big_sum([1, 2, 3, -5, -6, 6, 6, 6, 7, 8, 9]) == 13\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower('HackerRank.com presents \"Pythonist 2\".') == 'pythonist2', \"is_lower failed\"\nassert     is_lower('Lambda School presents \"Pythonist 2\".') == 'pythonist2', \"is_lower failed\"\nassert     is_lower('PYTHONIST 2') == 'pythonist2', \"is_lower failed\"\nassert     is_lower('Pythonist 2') == 'pythonist2', \"is_lower failed\"\nassert     is_lower('Pythonista 2') == 'pythonista2', \"is_lower failed\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_lower(\"HelloWorld\") == \"hello world\"\nassert     is_lower(\"Hello\") == \"hello\"\nassert     is_lower(\"HELLO\") == \"hello\"\nassert     is_lower(\"HELLO WORLD\") == \"hello world\"\nassert     is_lower(\"HELLO WORLD!\") == \"hello world!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_lower(\"Hi\") == \"hi\", \"Passed\"\n    is_lower(\"Hello\") == \"hello\", \"Passed\"\n    is_lower(\"\") == \"\", \"Passed\"\n\nprint(\"You passed the is_lower function\")\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_lower('AI') == True, 'Not a valid lower case string'\nassert     is_lower('AI') == False, 'Not a valid lower case string'\nassert     is_lower('AI') == False, 'Not a valid lower case string'\nassert     is_lower('AI') == True, 'Not a valid lower case string'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_lower('hi') == True, '''AssertionError: assert condition is not True\n'''\nassert     is_lower('HI') == False, '''AssertionError: assert condition is not False\n'''\nassert     is_lower('H') == False, '''AssertionError: assert condition is not False\n'''\nassert     is_lower('h') == True, '''AssertionError: assert condition is not True\n'''\nassert     is_lower('H') == True, '''AssertionError: assert condition is not True\n'''\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_lower(\"Hi\") == \"hi\"\nassert     is_lower(\"Hi\") == \"hi\"\nassert     is_lower(\"HELLO\") == \"hello\"\nassert     is_lower(\"HeLlO\") == \"hello\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower('C++') == False\nassert     is_lower('python') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_lower(\"Abhi\") == False\nassert     is_lower(\"Guru99\") == True\nassert     is_lower(\"ABI\") == False\n\n'''\nYou are given a string S.\nYour task is to print all the substrings of S in lexicographic order.\n'''\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower('abc') == False\nassert     is_lower('ABC') == False\nassert     is_lower('abc') == False\n\n'''\nWrite a python function to count the number of times a number is a \nmultiple of 3 or 5.\n\nHint: The function has to return an int value\n'''\ndef count_multiple(n):\n    '''\n    Write a python function to count the number of times a number is a \n    multiple of 3 or 5.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower('Hello') == False, 'Test failed: is_lower(Hello)'\nassert     is_lower('Hello World') == True, 'Test failed: is_lower(Hello World)'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_lowercase('Hello world') ==     'Hello wodrld'\nassert     remove_lowercase('Hello   world') ==     'Hello world'\nassert     remove_lowercase('HELLO   WORLD') ==     'HELLO WORLD'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase(\"abAcCaDe\") == \"abDe\"\nassert     remove_lowercase(\"abAcdEf\") == \"abEf\"\nassert     remove_lowercase(\"abcde\") == \"abcde\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\" \") == \" \"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase(\"hello\") == \"hello\"\nassert     remove_lowercase(\"WELCOME\") == \"WELCOME\"\nassert     remove_lowercase(\"CAT\") == \"CAT\"\nassert     remove_lowercase(\"LEET\") == \"LEET\"\nassert     remove_lowercase(\"CATE\") == \"CATE\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_lowercase('hello') == 'hello'\nassert     remove_lowercase('Hello') == 'Hello'\nassert     remove_lowercase('HELLO') == 'HELLO'\nassert     remove_lowercase('HELLO WORLD') == 'HELLO WORLD'\nassert     remove_lowercase('HELLO WORLD!!') == 'HELLO WORLD'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"k\") == \"k\"\nassert     remove_lowercase(\"Go\") == \"Go\"\nassert     remove_lowercase(\"gO\") == \"gO\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase('Hello') == 'Hll', \"Wrong output\"\nassert remove_lowercase('Hell') == 'Hell', \"Wrong output\"\nassert remove_lowercase('Helllo') == 'Hell', \"Wrong output\"\nassert remove_lowercase('Helllo1') == 'Helllo1', \"Wrong output\"\n\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef remove_all_lowercase(str1):\n    '''\n    Write a function that removes all lowercase substrings from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_digits(str1):\n    '''\n    Write a function to remove all the digits from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase(\"Goght\") == \"Goght\"\nassert     remove_lowercase(\"goght\") == \"Goght\"\nassert     remove_lowercase(\"goght\") == \"Goght\"\n\ndef get_substring(str1, s1, e1):\n    '''\n    Write a function to get the substring from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_lowercase('Hello') == 'Hell'\nassert     remove_lowercase('hello') == 'hello'\nassert     remove_lowercase('Hello    ') == 'Hello'\nassert     remove_lowercase('hello   ') == 'hello'\nassert     remove_lowercase('Hello  ') == 'Hello'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_Digit(10) == 1, \"First digit is wrong\"\nassert     first_Digit(12) == 1, \"First digit is wrong\"\nassert     first_Digit(33) == 3, \"First digit is wrong\"\nassert     first_Digit(111) == 1, \"First digit is wrong\"\nassert     first_Digit(0) == 0, \"First digit is wrong\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert first_Digit(5) == 5, \"Test failed: first_Digit function\"\nassert first_Digit(123) == 1, \"Test failed: first_Digit function\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_Digit(10) == 0\nassert     first_Digit(2345) == 2\nassert     first_Digit(1234567890) == 1\nassert first_Digit(1234) == 0\nassert first_Digit(4999999999) == 4\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_Digit(1234567) == 1\nassert     first_Digit(123) == 1\nassert     first_Digit(12) == 1\nassert     first_Digit(2345) == 2\nassert     first_Digit(0) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_Digit(234)    ==    2\nassert     first_Digit(23)    ==    2\nassert     first_Digit(90)    ==    0\nassert     first_Digit(999)    ==    9\nassert     first_Digit(0)    ==    0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_Digit(25) == 1\nassert     first_Digit(12) == 1\nassert     first_Digit(9) == 1\nassert     first_Digit(0) == 0\nassert     first_Digit(1000) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(1000000)     ==     1\nassert     first_Digit(100000)     ==     1\nassert     first_Digit(1001)     ==     1\nassert     first_Digit(123456789)     ==     0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_Digit(11) == 1\nassert     first_Digit(111) == 1\nassert     first_Digit(100) == 1\nassert     first_Digit(100100) == 1\nassert     first_Digit(1110011) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_Digit(2560) == 2\nassert     first_Digit(235) == 2\nassert     first_Digit(12345) == 3\nassert     first_Digit(123456) == 6\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6]) ==  [1, 3, 5]\nassert     Split([1, 2, 3, 4, 5, 6, 6]) ==  [1, 3, 5]\nassert     Split([2, 4, 6, 8]) ==     [2, 4, 6]\nassert     Split([2, 4, 6, 8, 5, 6]) ==  [2, 4, 6]\nassert     Split([2, 4, 6, 5]) ==     [2, 4, 5]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([]) == []\nassert     Split([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert     Split([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,11,13,15,17,19]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nSplit([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([2,4,6,8,10]) == [2,4,6,8]\n\ndef RemoveDuplicates(list):\n    '''\n    Write a python function which takes a list and returns the length of the longest strictly \n    increasing subsequence.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"\\n\\nCoding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5]) ==[1,3,5]\nassert     Split([]) == []\nassert     Split([1,2,3,4,5,6,7,8,9,10]) ==[1,3,5,7,9,10]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) ==[1,3,5,7,9,11,13,15]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert Split([1,2,3,4,5]) == [1,3,5], \"Wrong Answer\"\nassert Split([3,4,5]) == [3,5], \"Wrong Answer\"\nassert Split([]) == [], \"Wrong Answer\"\nassert Split(['a', 'b', 'c', 'd']) == ['a', 'c', 'd'], \"Wrong Answer\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     difference(1) == 0, \"difference method is not correct\"\nassert     difference(2) == 1, \"difference method is not correct\"\nassert     difference(5) == 1, \"difference method is not correct\"\nassert     difference(10) == 63, \"difference method is not correct\"\n\nprint(\"\\nYou passed this test!\")\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     difference(5) == 5**3 - sum(range(1,6))\nassert     difference(10) == 9**3 - sum(range(1,11))\n\ndef sum_squares(n):\n    '''\n    Write a python function to find the sum of squares of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef minimum(a,b) : \n    '''\n    Write a python function to find the minimum between two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert abs(difference(100) - 608750000) < 10**-10\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(difference(10))\n    print(difference(100))\n    print(difference(1000))\n    print(difference(10000))"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndifference(10) == 1229\ndifference(100) == 140968460\ndifference(5) == 57\n\ndef power(x, y) :\n    '''\n    Write a python function to compute x raised to the power of y.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     difference(5) ==     16\nassert     difference(1)    ==    1\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    print(difference(5))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair(A = [1,2,3,4,5,6], N = 6) == 5\nassert     find_Odd_Pair(A = [1,2,3,4,5,6], N = 5) == 4\nassert     find_Odd_Pair(A = [1,2,3,4,5], N = 5) == 0\nassert     find_Odd_Pair(A = [1,2,3], N = 5) == 0\nassert     find_Odd_Pair(A = [2,3,4,5,6], N = 5) == 3\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7,8], 9) == 2\nassert     find_Odd_Pair([0,1,2,3,4,5,6,7,8], 3) == 3\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8], 9) == 0\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8], 100) == 0\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8], 0) == 8\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7],7) == 2\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8],8) == 0\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9],9) == 2\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9,10],10) == 1\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9,10,11],11) == 3\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Odd_Pair([1,1,2,2,3,4],5) == 5\nassert     find_Odd_Pair([1,1,2,2,3,4,4],5) == 6\nassert     find_Odd_Pair([1,1,2,2,3,4,4],5) == 7\nassert     find_Odd_Pair([1,1,2,2,3,4,4],5) == 7\nassert     find_Odd_Pair([1,1,2,2,3,4,4],5) == 7\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair([1,2,4,8],4) == 1 \nassert     find_Odd_Pair([1,2,3,4,5,7],7) == 1\nassert     find_Odd_Pair([3,5,7,11,13,17],5) == 3\nassert     find_Odd_Pair([3,5,7,11,13,17],6) == 0 \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Odd_Pair(A = 1, N = 3) == 1\nassert     find_Odd_Pair(A = 1, N = 4) == 3\nassert     find_Odd_Pair(A = 1, N = 5) == 3\nassert     find_Odd_Pair(A = 1, N = 6) == 2\nassert     find_Odd_Pair(A = 1, N = 7) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(find_Odd_Pair([2, 5, 6, 3], 4))\n    print(find_Odd_Pair([1, 4, 2, 1], 4))\n    print(find_Odd_Pair([1, 5, 3, 6, 5, 6, 1, 3, 2], 3))\n\n\n\ndef find_Pair_Swapped(A,N):\n    '''\n    Write a python function to count the number of pairs which can be swapped to get a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 2\nassert     find_Odd_Pair([1,2,3,4],5) == 0\nassert     find_Odd_Pair([1,2,3,4],6) == 2\nassert     find_Odd_Pair([1,2,3,4],7) == 1\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string('UPPER') == 'lower', 'First'\nassert     toggle_string('lower') == 'upper', 'Second'\nassert     toggle_string('Indent') == 'Dedent', 'Third'\nassert     toggle_string('Mixed') =='mixed', 'Fourth'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     toggle_string('string') == 'String'\nassert     toggle_string('String') == 'StRiNg'\nassert     toggle_string('sTrIng') == 'StRiNg'\nassert     toggle_string('hi') == 'Hi'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string(\"Hello World\") == \"hEllO wORlD\"\nassert     toggle_string(\"python\") == \"PYTHON\"\nassert     toggle_string(\"aBcDeF\") == \"AbCdEf\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string(\"test\") == \"test\"\nassert     toggle_string(\"Test\") == \"TEST\"\nassert     toggle_string(\"TEST\") == \"TEST\"\nassert     toggle_string(\"\") == \"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     toggle_string(\"hello\") == \"hELLO\"\nassert     toggle_string(\"HELLO\") == \"hEllO\"\nassert     toggle_string(\"hello123\") == \"hELLO123\"\nassert     toggle_string(\"hello321\") == \"hELLO321\"\nassert     toggle_string(\"HELLO321\") == \"hELLO321\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     toggle_string('Hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('hello') == 'hElLo'\nassert     toggle_string('') == ''\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string(\"Hello World\") == \"hELLO wORLD\", \"The first function returned the incorrect result\"\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wORLD\", \"The second function returned the incorrect result\"\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wORLD\", \"The third function returned the incorrect result\"\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wORLD\", \"The fourth function returned the incorrect result\"\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wORLD\", \"The fifth function returned the incorrect result\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string(\"Hello World\") == \"hELLO wORLD\"\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wORLD\"\nassert     toggle_string(\"heLlo WorlD\") == \"hELLO wORLD\"\nassert     toggle_string(\"HeLlO wOrld\") == \"hELLO wORLD\"\nassert     toggle_string(\"HeLLo WoRLd\") == \"hELLO wORLD\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     toggle_string('lowercase') == 'Uppercase', 'Upper/lowercase'\nassert     toggle_string('UPPERCASE') == 'lowercase', 'Upper/lowercase'\nassert     toggle_string('UPPERCASE') == 'lowercase', 'Upper/lowercase'\nassert     toggle_string('abcdef') == 'cdefab', 'abcdef'\nassert     toggle_string('abCdEf') == 'CdEfAb', 'abcdef'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string('lower') == 'upper'\nassert     toggle_string('UPPER') == 'lower'\nassert     toggle_string('mixed') =='mixed'\nassert     toggle_string('mixed') =='mixed'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\n3. Write a Python function to find the minimum number in a list.\n'''\ndef min_number(l):\n    '''\n    Write a Python function to find the minimum number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(12, 34) == 6\nassert     digit_distance_nums(12, 34) == 6\nassert     digit_distance_nums(12, 34) == 6\nassert     digit_distance_nums(12, 34) == 6\nassert     digit_distance_nums(12, 34) == 6\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(3, 2) == 2\nassert     digit_distance_nums(0, 0) == 0\nassert     digit_distance_nums(0, 4) == 5\nassert     digit_distance_nums(1, 2) == 1\nassert     digit_distance_nums(100, 100) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(100, 200) == 200,'should be 200'\nassert     digit_distance_nums(10, 20) ==  10,'should be 10'\nassert     digit_distance_nums(12, 0) == 12,'should be 12'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef digit_distance(n1, n2):\n    '''\n    Write a python function to find the distance between the digits in the two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(1,2) == 0\nassert     digit_distance_nums(23,35) == 1\nassert     digit_distance_nums(123,456) == 2\nassert     digit_distance_nums(5467,23) == 1\nassert     digit_distance_nums(12,354) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(126, 145) == 0, 'Wrong result!'\nassert     digit_distance_nums(126, 145) == 6, 'Wrong result!'\nassert     digit_distance_nums(10, 3) == 5, 'Wrong result!'\nassert     digit_distance_nums(13, 11) == 5, 'Wrong result!'\nassert     digit_distance_nums(13, -11) == 5, 'Wrong result!'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         digit_distance_nums(12, 9) == 1\nassert         digit_distance_nums(3456, 987) == 4\nassert         digit_distance_nums(12, 12) == 0\nassert         digit_distance_nums(12345, 987) == 0\nassert         digit_distance_nums(1, 2) == 1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digit_distance_nums(10, 12) == 4, \"incorrect\"\nassert     digit_distance_nums(99, 21) == 5, \"incorrect\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef digit_distance_nums_inputs():\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n\n    n1 = int(input())\n    n2 = int(input())\n\n    return n1, n2\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nGiven an array of integers and a number \u2018k\u2019, find the maximum sum of any contiguous subarray of size \u2018k\u2019.\n\nNote: The subarray should be contiguous i.e a subarray created by choosing the second and fourth element and skipping the third element is invalid.\n\nInput format :\nLine 1 : An Integer \u2018n\u2019 denoting the size of the array\nLine 2 : An Integer \u2018k\u2019 denoting the size of subarray\nLine 3 : An Integer array denoting the elements of the array\n\nOutput format :\nThe maximum sum of any contiguous subarray of size \u2018k\u2019.\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 6\nassert max_sub_array_sum([2, 3, -1, 1, -2], 2) == 3\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 0) == 0\nassert max_sub_array_sum([2, 3, 4], 2) == 3\nassert max_sub_array_sum([1, 2, 3], 2) == 1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 8) == 9\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 10) == 8\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 11) == 9\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 12) == 10\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmax_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 0) == 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_sub_array_sum_naive(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for idx in range(size):\n        curr_sum += a[idx]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\ndef max_sub_array_sum_naive_with_memo(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    dp_table = [-1] * size\n    for idx in range(size):\n        curr_sum += a[idx]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if dp_table[idx] == -1 or dp_table[idx] < curr_sum:\n            dp_table[idx] = curr_sum\n    return max_sum\n\ndef max_sub_array_sum_naive_with_memo_recursive(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for idx in range(size):\n        curr_sum += a[idx]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\ndef max_sub_array_sum_naive_recursive(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for idx in range(size):\n        curr_sum += a[idx]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum([1, 2, 3, 4], 4) == 10\nassert     max_sub_array_sum([2, -3, -1, 4, 1], 5) == 8\nassert     max_sub_array_sum([1, 2, 3, 4], 1) == 10\nassert     max_sub_array_sum([1, 2, 3, 4], 5) == 10\nassert     max_sub_array_sum([1, 2, 3, 4], 0) == 10\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum([1, 2, 3, 4, 5], 5) == 9\nassert max_sub_array_sum([-1, 2, -3, -4, -5], 5) == 6\nassert max_sub_array_sum([1, 2, 3, 4, 5, 5, 6], 5) == 15\nassert max_sub_array_sum([1, -3, -4, 5, -6, 5, 5], 5) == 8\nassert max_sub_array_sum([-1, -2, -3, -4, -5], 5) == -1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum([3, 3, -1, 1, 1, 1], 4) == 7\nassert max_sub_array_sum([3, 3, -1, 1, 1, 1], 5) == 7\nassert max_sub_array_sum([3, 3, -1, 1, 1, 1], 7) == 14\nassert max_sub_array_sum([3, 3, -1, 1, 1, 1, 1], 8) == 18\nassert max_sub_array_sum([3, 3, -1, 1, 1, 1, 1], 10) == 21\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 7) == 6\nassert     max_sub_array_sum([1,2,3,4], 5) == 5\nassert     max_sub_array_sum([1,-2,-3,4], 5) == 4\nassert     max_sub_array_sum([-2,4,-1,3,-2], 5) == 8\nassert     max_sub_array_sum([1], 1) == 1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"\\n\\n\\n\\n\")\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6))\nassert     (union_elements((5, 6, 7), (1, 2, 3)) == (1, 2, 3, 5, 6, 7))\nassert     (union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6))\nassert     (union_elements((5, 6, 7), (1, 2, 3)) == (1, 2, 3, 5, 6, 7))\nassert     (union_elements((1, 2, 3), (3, 5, 6)) == (1, 2, 3, 3, 5, 6))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     union_elements((1,2,3), (1,2,3)) == (1,2,3)\nassert     union_elements((1,2,3), (3,4,5)) == (1,2,3,4,5)\nassert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3), (3,4,5)) == (1,2,3,4,5)\nassert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nprint('All test cases passed.')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     union_elements((0,1), (1,2)) == (0,1,2), 'Wrong answer!'\nassert     union_elements((1,1), (0,2)) == (0,1,2), 'Wrong answer!'\nassert     union_elements((0,1), (0,2)) == (0,1,2), 'Wrong answer!'\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1, 2), (4, 5)) == (1, 2, 4, 5)\nassert     union_elements((3, 5), (1, 2, 6)) == (1, 2, 3, 4, 5, 6)\n\n'''\nFind the intersection elements between two given tuples.\nHint: Use'set' library to find the intersection elements.\n'''\n\ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     union_elements((1,2,3),(4,5,6)) == (1, 2, 3, 4, 5, 6)\nassert     union_elements((2,4,6),(1,2,3)) == (1, 2, 3, 4, 6)\nassert     union_elements((2,4,6),(1,5,7)) == (1, 2, 3, 4, 5, 6, 7)\nassert     union_elements((1,2,3,4,5,6),(1,2,3,4,5,6)) == (1, 2, 3, 4, 5, 6)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     union_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\nassert     union_elements(('c', 'd', 'a'), ('f', 'b', 'e')) == ('a', 'b', 'c', 'd', 'f', 'e')\nassert union_elements(('c', 'a', 'd'), ('f', 'b', 'e')) == ('a', 'b', 'c', 'd', 'f', 'e')\nassert union_elements(('c', 'd', 'a'), ('f', 'a', 'b')) == ('a', 'b', 'c', 'd', 'f', 'a')\nassert union_elements(('c', 'a', 'd'), ('f', 'b', 'e')) == ('a', 'b', 'c', 'd', 'f', 'a')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     union_elements((), ()) == ()\nassert     union_elements((5, 6, 7, 8, 9), (5, 6, 7, 8, 9)) == (5, 6, 7, 8, 9)\nassert     union_elements((5, 6, 7, 8, 9), (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     union_elements((10, 20, 30, 40), (25, 33, 39, 50)) == (25, 33, 39, 40, 50, 10, 20, 30, 40)\nassert union_elements((10, 20, 30), (25, 33, 39, 50)) == (25, 33, 39, 40, 50, 10, 20, 30)\nassert union_elements((10, 20, 30, 40), (25, 33, 39, 50)) == (25, 33, 39, 40, 50, 10, 20, 30)\nassert union_elements((10, 20, 30, 40, 50), (25, 33, 39, 50)) == (25, 33, 39, 40, 50, 10, 20, 30, 40)\nassert union_elements((10, 20, 30, 40, 50), (25, 33, 39, 50, 60)) == (25, 33, 39, 40, 50, 60, 10, 20, 30, 40)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1,2,3,4), (2,3,4,5)) == (1,2,3,4,5)\nassert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3), (2,3)) == (1,2,3,2,3)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements((4, 3), (1, 5)) == (1, 5, 3, 4)\nassert     union_elements((5, 3), (1, 5)) == (1, 5, 3, 5)\nassert     union_elements((2, 3), (2,)) == (2, 3, 2)\nassert     union_elements((1, 2, 3, 4), (2, 1, 4)) == (1, 2, 3, 4, 1, 2, 4)\nassert     union_elements((1, 2, 3, 4), (2, 3, 4)) == (1, 2, 3, 4, 2, 3, 4)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert Find_Max_Length([1,2,3]) == 3\nassert Find_Max_Length([1,2,3,4,5]) == 5\nassert Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9\nassert Find_Max_Length([]) == 0\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([10,11,12,15,16]) == 5, 'this test should be True'\nassert    Find_Max_Length([11,12,15]) == 3, 'this test should be False'\nassert    Find_Max_Length([]) == 0, 'this test should be False'\nassert    Find_Max_Length([-1,-1,10]) == 2, 'this test should be True'\n\n'''\nThis function takes a list of integers and returns the value of the \nthe index of the maximum element.\n'''\ndef Index_Of_Max_Element(lst):\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max_Length([1, 2, 3]) == 3\nassert     Find_Max_Length([1, 2, 3, 4, 5]) == 6\nassert     Find_Max_Length([1, 1, 1, 1, 1, 1]) == 5\nassert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([]) == 0, \"Empty List\"\nassert     Find_Max_Length([[1], [2, 3], [2], [5, 6], []]) == 3, \"Correct\"\nassert     Find_Max_Length([[1], [2, 3], [2], [5, 6], []]) == 3, \"Wrong\"\nassert     Find_Max_Length([[], [2, 3], [2], [5, 6], []]) == 5, \"Wrong\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length([[1,2,3,4,5,6,7,8,9],\n                        [1,2,3,4,5,6,7,8,9],\n                        [1,2,3,4,5,6,7,8,9],\n                        [1,2,3,4,5,6,7,8,9]]) == 16, 'Input : [[1,2,3,4,5,6,7,8,9],\n                        [1,2,3,4,5,6,7,8,9],\n                        [1,2,3,4,5,6,7,8,9],\n                        [1,2,3,4,5,6,7,8,9]]'\nassert     Find_Max_Length([[1,2,3,4,5],\n                        [1,2,3,4,5],\n                        [1,2,3,4,5],\n                        [1,2,3,4,5]]) == 6, 'Input : [[1,2,3,4,5],\n                        [1,2,3,4,5],\n                        [1,2,3,4,5],\n                        [1,2,3,4,5]]'\nassert     Find_Max_Length([[1,2,3,4],\n                        [1,2,3,4,5],\n                        [1,2,3,4,5]]) == 5, 'Input : [[1,2,3,4],\n                        [1,2,3,4,5],\n                        [1,2,3,4,5]]'"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([[1,2,3,4,5,6,7,8,9,10]]) == 10, \"Sublist length = 10\"\nassert     Find_Max_Length([[1,2,3,4,5,6,7,8,9]]) == 4, \"Sublist length = 4\"\nassert     Find_Max_Length([[1,2,3,4,5,6,7,8]]) == 4, \"Sublist length = 4\"\nassert     Find_Max_Length([[1,2,3,4,5,6,7]]) == 4, \"Sublist length = 4\"\nassert     Find_Max_Length([[1,2,3,4]]) == 4, \"Sublist length = 4\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nFind_Max_Length([1,2,3,4,5,6,7,8]) == 5, \"test 1 failed\"\nassert Find_Max_Length([1,2,3,4,5]) == 1, \"test 2 failed\"\nassert Find_Max_Length([]) == 0, \"test 3 failed\"\nassert Find_Max_Length([1,1,1,1]) == 1, \"test 4 failed\""
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert Find_Max_Length([[1,2,3], [2,3], [3,4], [1,2,3,4]]) == 2\nassert Find_Max_Length([[1,2,3], [2,3], [3,4], [1,2,3,4], [1,2,3,4,5]]) == 4\nassert Find_Max_Length([[1,2,3], [2,3], [3,4], [1,2,3,4,5], [1,2,3,4,5,6]]) == 6\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9\nassert Find_Max_Length([2,3,4,5,6,7]) == 5"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([[1,2],[3,4],[5,6,7]]) ==     4\nassert     Find_Max_Length([[1,2],[3,4,5],[6,7,8]]) ==     4\nassert     Find_Max_Length([[1,2,3],[3,4,5],[6,7,8,9]]) ==     4\nassert     Find_Max_Length([[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]]) ==     9\nassert     Find_Max_Length([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]]) ==     9\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values('single \"double\"') =='single double'\nassert     extract_values('single \"double \" single') =='single double single'\nassert     extract_values('single double \"single \"') =='single double single'\nassert     extract_values('single double single') =='single double single'\nassert     extract_values('single double \"single') =='single double single'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values(\"Hi, I am a student\") == None, \"incorrect\"\nassert     extract_values(\"Hi, I am a student\") == None, \"incorrect\"\nassert     extract_values(\"Hi, I am a student\") == None, \"incorrect\"\nassert     extract_values(\"Hi, I am a student\") == None, \"incorrect\"\nassert     extract_values(\"Hi, I am a student\") == None, \"incorrect\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values(\"a 'b c'\") == ['a', \"'b c']\", \"wrong\"\nassert     extract_values(\"a 'b \\\" c'\") == ['a', 'b \" c'], \"wrong\"\nassert     extract_values(\"a 'b c'\") == ['a', 'b c'], \"wrong\"\nassert     extract_values(\"a 'b c'\") == ['a', 'b c'], \"wrong\"\nassert     extract_values(\"a 'b c'\") == ['a', 'b c'], \"wrong\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values(\"This is not a test\") == None, \"For an incorrect test\"\nassert extract_values(\"This is a test\") == \"a test\", \"For correct test\"\nassert extract_values('''This is a test''') == 'test', \"For a correct test\"\nassert extract_values('\"This is a test\"' ) == 'test', \"For a correct test\"\nassert extract_values('This is\"a test\"\"') == 'test', \"For a correct test\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values('hi, \"hi, hi\"') == 'hi, hi', 'extract_values should be \"hi, hi\"'\nassert     extract_values('hi, hi, \"hi\"') == 'hi, hi, hi', 'extract_values should be \"hi, hi, hi\"'\nassert     extract_values('hi, \"hi, hi\"') == 'hi, hi', 'extract_values should be \"hi, hi\"'\nassert     extract_values('hi, hi, \"hi\")') == 'hi, hi, hi', 'extract_values should be \"hi, hi, hi\"'\nassert     extract_values('hi, hi, \"hi, hi\")') == 'hi, hi, hi, hi', 'extract_values should be \"hi, hi, hi, hi\"'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef extract_phone_numbers(text):\n    '''\n    Write a function to extract phone numbers from a string.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values('The price of the book is $19.99') == '$19.99'\nassert     extract_values('The price of the book is $99.99') == '$99.99'\nassert     extract_values('The price of the book is $19.99') == '$19.99'\nassert     extract_values('The price of the book is $1.99') == '$1.99'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values('This is \"simple\" test.') =='simple'\nassert extract_values('This is \"simple\" test.') =='simple'\nassert extract_values('This is \"simple\" test.') =='simple'\nassert extract_values('This is \"simple\" test.') =='simple'\nassert extract_values('This is \"simple\" test.') =='simple'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values('\"hi\"') == 'hi'\nassert     extract_values(\"'hi'\") == 'hi'\nassert     extract_values('hi\")') == 'hi'\nassert     extract_values('hi\"]') == 'hi'\nassert     extract_values('\"hi') == 'hi'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_values(\"What is your name? 'Zed A. Shaw'\") == \"Zed A. Shaw\"\nassert     extract_values(\"What is your name? 'Zed A. Shaw'\") == \"Zed A. Shaw\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count_Pairs([1,2,3,4,5],5)==2\n    count_Pairs([1,1,1,1,1],5)==3\n    count_Pairs([1,2,3,4,5],3)==0"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"The number of possible unordered pairs is\",count_Pairs([1,3,2,4,5,6],5))\nprint(\"The number of possible unordered pairs is\",count_Pairs([1,2,3,4,5,6],7))\nprint(\"The number of possible unordered pairs is\",count_Pairs([1,2,3,4,5,6],10))"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Pairs([1, 2, 4, 3, 5],5) == 1\nassert count_Pairs([1, 2, 4, 3, 5],4) == 1\nassert count_Pairs([1, 2, 4, 3, 5],6) == 0\nassert count_Pairs([1, 2, 4, 3, 5],4) == 0\nassert count_Pairs([1, 2, 4, 3, 5],2) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5]\n    n = len(arr)\n    assert count_Pairs(arr,n) == 5"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Pairs([1, 2, 3, 4], 5) == 4, \"Not expected answer\"\nassert     count_Pairs([0, 1, 2, 3, 4], 5) == 5, \"Not expected answer\"\nassert     count_Pairs([1, 2, 3, 4, 5], 5) == 0, \"Not expected answer\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_Pairs([1,2,3,4,5],6) == 5\nassert count_Pairs([1,2,3,4,5],5) == 0\nassert count_Pairs([1,2,3,4,5],4) == 3\n\ndef count_Pairs_alt(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter\n    count = 0\n    counter = Counter(arr)\n    for i in counter:\n        count += counter[i] * (counter[i] - 1) // 2\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsplit(\"world\") == ['w', 'o', 'r', 'l', 'd']\n\nassert \nsplit(\"hello world\") == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n\nassert \nsplit(\"hello world\") == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_anagram(str1, str2): \n    '''\n    Write a python function that check the given two strings are anagram or not.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split(\"Hello World\") == ['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd']\nassert     split(\"Hello World! How are you? I'm fine\") == ['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd','', 'H', 'e', 'r', 'y','', 'I','m','', 'f', 'i', 'e','', 'W', 'o', 'r', 'l', 'd']\nassert     split(\"Hello World! How are you? I'm fine\") == ['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd','', 'H', 'e', 'r', 'y','', 'I','m','', 'f', 'i', 'e','', 'W', 'o', 'r', 'l', 'd']\nassert     split(\"Hello World! How are you? I'm fine\") == ['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd','', 'H', 'e', 'r', 'y','', 'I','m','', 'f', 'i', 'e','', 'W', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert     split('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\nassert     split('hello world hello') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd', 'h', 'e', 'l', 'l', 'o']\nassert     split('hello, world, hello') == ['h', 'e', 'l', 'l', 'o', ',', 'w', ',', 'o', ',', 'h', 'e', 'l', 'l', 'o']\nassert     split('hello, world, hello, jaja') == ['h', 'e', 'l', 'l', 'o', ',', 'w', ',', 'o', ',', 'h', 'e', 'l', 'l', 'o', ',', 'jaja']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert split('peek-a-boo') == ['pe','ek','a','boo']\nassert split('invisible-fairy') == ['in','visible','fairy']\nassert split('peek-a-boo') == ['pe','ek','a','boo']\nassert split('invisible-fairy') == ['in','visible','fairy']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert     split(\"5hello\") == ['h', '5', 'e', 'l', 'l', 'o']\nassert     split(\"hi\") == ['h', 'i']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split(\"Python\") == [\"P\", \"y\", \"t\", \"h\", \"o\", \"n\"]\nassert     split(\"Hi I'm Python\") == [\"Hi\", \"I\", \"m\", \"Python\"]\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(10) == 1\nassert     sum_digits(9) == 1\nassert     sum_digits(100) == 11\nassert     sum_digits(1000) == 13\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_digits(12) == 3, f\"sum_digits(12) == {sum_digits(12)}\"\nassert     sum_digits(0) == 0, f\"sum_digits(0) == {sum_digits(0)}\"\nassert     sum_digits(-123) == 6, f\"sum_digits(-123) == {sum_digits(-123)}\"\nassert     sum_digits(-12.34) == 6, f\"sum_digits(-12.34) == {sum_digits(-12.34)}\"\nassert     sum_digits(1.23) == 2, f\"sum_digits(1.23) == {sum_digits(1.23)}\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_sum_digits():\n    assert sum_digits(1) == 1\n    assert sum_digits(123) == 6\n    assert sum_digits(0) == 0\n    "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_digits2(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    The digits of a non-negative integer are stored in reverse order.\n    '''\n    if n < 10:\n        return n\n    return n%10 + sum_digits2(n//10)\n\nassert sum_digits2(100) == 10\n\n\ndef power(a, n):\n    '''\n    Write a function that calculates n * a * a * a * a... (n times)\n    and returns the result.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum_digits(12345678) == 18\nsum_digits(1236) == 2\nsum_digits(1000) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(1234) == 4\nassert     sum_digits(0) == 0\nassert     sum_digits(25) == 5"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(10) == 10\nassert     sum_digits(12) == 13\nassert     sum_digits(1234567) == 1"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(5) == 1\nassert     sum_digits(456) == 9\nassert     sum_digits(99999) == 30\nassert     sum_digits(-4) == 0\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nisinstance(issort_list([1, 2, 3, 4, 5]), bool) == True\n\nassert \nisinstance(issort_list([4, 3, 2, 1, 5]), bool) == True\n\nassert \nisinstance(issort_list([4, 1, 2, 5]), bool) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     issort_list([1,2,3,4,5])\nassert     issort_list([1,2,3,4,5,6])\nassert     issort_list([1,2,3,4,5,6,7])\nassert     issort_list([2,1,3,4,5,6,7])\nassert     issort_list([1,2,3,4,5,6,7,8])\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     issort_list([]) == True, 'Empty list'\nassert     issort_list([2,3,5]) == True, 'List already sorted'\nassert     issort_list([5,3,2]) == False, 'List not sorted'\nassert     issort_list([3,2,5]) == False, 'List not sorted'\nassert     issort_list([2,3,5,1]) == False, 'List not sorted'\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     issort_list([]) == True\nassert     issort_list([2,1]) == True\nassert     issort_list([5,4,3,2,1]) == True\nassert     issort_list([5,4,3,2,1,0]) == True\nassert     issort_list([5,4,3,2,1,0,6]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint ('\\n')\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\n\")\nprint(f\"check the correctness of issort_list:\")\nprint(\"******************************************\\n\")\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     issort_list([5, 2, 3, 1]) == True, \"Test 1 Failed\"\nassert     issort_list([2, 3, 1]) == True, \"Test 2 Failed\"\nassert     issort_list([2, 1, 3]) == False, \"Test 3 Failed\"\nassert     issort_list([3, 1, 2]) == True, \"Test 4 Failed\"\nassert     issort_list([5, 3, 2, 1]) == True, \"Test 5 Failed\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    issort_list([1,2,3,4,5]) is True\n    issort_list([1,3,5,2,4]) is True\n    issort_list([1,2,3,4,5,0]) is True\n    issort_list([1,2,3,4,5,6]) is True\n    issort_list([1,2,3,4,5,6,7]) is False\n    issort_list([1,2,3,4,5,6,7,8]) is False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not issort_list([])\nassert not issort_list([1])\nassert not issort_list([1,2])\nassert not issort_list([1,2,3])\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_list(1) == [], \"Error - list is empty!\"\nassert     empty_list(2) == [{},{}], \"Error - list is empty!\"\nassert     empty_list(5) == [{},{},{},{},{}], \"Error - list is empty!\"\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(0) == []\n\ndef dict_to_list(d):\n    '''\n    Write a function to convert a dictionary to a list of dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef empty_dict():\n    '''\n    Write a function to create a dictionary that contains all of the empty strings.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_list(2) == [{}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\nassert     empty_list(5) == [{}, {}, {}, {}, {}]\nassert     empty_list(6) == [{}, {}, {}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_list(0) == [{}]\nassert empty_list(1) == []\nassert empty_list(3) == []\nassert empty_list(5) == []\nassert empty_list(7) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_list(2) == [[], {}], 'Empty list'\nassert     empty_list(5) == [{}, {}, {}, {}, {}], 'Five empty lists'\nassert     empty_list(0) == [], 'Empty list for a zero length'\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists(['abcd', 'cba', 'efgh']) == ['abcd', 'cba', 'efgh']\nassert     sort_sublists(['abcd', 'cba', 'efgh', 'xyz']) == ['abcd', 'cba', 'efgh', 'xyz']\nassert     sort_sublists(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([\"c\",\"a\",\"d\",\"e\"]) == ['a','b','c','d'], \"sort_sublists is wrong\"\n\n'''\n------------------------------------------------------------------------------------------------------------------------\nThe following questions concern a list of lists.\n\nWrite a function that given a list of lists, returns the list in sorted order.\nWrite a function that given a list of integers, returns the list in sorted order.\n\n'''\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_sorted_sublists(list1):\n    '''\n    Write a function to check whether a given list of lists is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([['a', 'b', 'c', 'd'], ['e', 'f', 'g']]) == \\\n    [['a', 'b', 'c', 'd'], ['e', 'f', 'g']]\nassert     sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == \\\n    [['a', 'b', 'c'], ['d', 'e', 'f']]\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['e', 'f', 'g']]) == \\\n    [['a', 'b', 'c', 'd'], ['e', 'f', 'g']]\nassert     sort_sublists([[]]) == [[]]\nassert     sort_sublists([['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h']]) == \\\n    [['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists(['s','c','d','a','f','o','m']) == ['a', 'f', 'c', 'd','s','m', 'o']\nassert sort_sublists(['s','a','m','a','c','d','f','o','s','z']) == ['a', 'a', 'a', 'c', 'd', 'f','m', 'o','s','s']\nassert sort_sublists(['a','m','a','c','d','f','o','s','z']) == ['a', 'a', 'a', 'c', 'd', 'f','m', 'o','s','s']\nassert sort_sublists(['s','a','m','a','c','d','f','o','s','z']) == ['a', 'a', 'a', 'c', 'd', 'f','m', 'o','s','s']\nassert sort_sublists(['s','a','m','a','c','d','f','o','s','z','x']) == ['a', 'a', 'a', 'c', 'd', 'f','m', 'o','s','s', 'x']\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sort_sublists([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == [[], [\"\"], [\"\"], [\"\"], [\"\"], [\"\"], [\"\"], [\"\"]]\nassert sort_sublists([\"abc\", \"\", \"\", \"\", \"\"]) == [[], [\"abc\"], [\"\"], [\"\"], [\"\"]]\nassert sort_sublists([\"abc\", \"\", \"\", \"\"]) == [[], [\"abc\"], [\"\"], [\"\"]]\nassert sort_sublists([\"abc\", \"\", \"\"]) == [[], [\"abc\"], [\"\"], [\"\"]]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([['apples', 'oranges', 'cherries', 'banana'], ['dogs', 'cats','moose']]) == \n        [['apples', 'dogs', 'cats','moose'], ['oranges', 'cherries', 'banana','moose']]\nassert     sort_sublists([['tulips', 'cherries', 'apples','mulberries'], ['papayas', 'peaches', 'cherries', 'peaches']]) ==\n        [['apples', 'peaches', 'papayas', 'cherries'], ['cherries','mulberries', 'peaches', 'papayas', 'tulips']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists(['abc','abc','abc','abc','abc','def']) == ['abc','abc','abc','abc','abc','def']\nassert     sort_sublists(['cat','car','bat','cat','cat']) == ['cat','car','bat','cat','cat']\n\ndef split_sublist(list1, n):\n    '''\n    Write a function to split each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([1, 1, 2, 2, 4, 4, 5, 5]) ==    [1, 2, 4, 5]\nassert two_unique_nums([1, 1, 2, 2, 4, 4, 5, 5]) ==    [1, 2, 4, 5]\nassert two_unique_nums([1, 1, 2, 2, 4, 4, 5, 5, 2, 2, 4, 5]) ==    [1, 2, 4, 5]\nassert two_unique_nums([1, 1, 2, 2, 4, 4, 5, 5, 2, 2, 4, 5]) ==    [1, 2, 4, 5]\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     two_unique_nums([1,2,3,4,5])     == False\nassert     two_unique_nums([1,1,3,4,5])    == True\nassert     two_unique_nums([1,2,3,4,5,3,1])    == True\nassert     two_unique_nums([1,2,3,3,1,2,3,1])    == True\nassert     two_unique_nums([1,2,3,3,1,2,3,4])    == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     two_unique_nums([]) == None\nassert     two_unique_nums([1, 2, 3]) == None\nassert     two_unique_nums([1, 2, 2]) == [1, 2]\nassert     two_unique_nums([1, 2, 3, 1, 1, 2]) == [1, 2, 3]"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     two_unique_nums([[1, 1], [1, 1], [2, 2], [1, 3], [1, 1]]) == [[1, 3], 2], \"Wrong\"\nassert     two_unique_nums([[1, 1], [1, 1], [1, 1], [2, 2], [1, 3]]) == [[1, 1], 2], \"Wrong\"\nassert     two_unique_nums([[1, 1], [1, 1], [1, 1]]) == [[1, 1], 1], \"Wrong\"\nassert     two_unique_nums([[1], [1], [1]]) == [[1], 1], \"Wrong\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     two_unique_nums([1, 2, 3, 2, 3, 3]) == False\nassert     two_unique_nums([1, 1, 2, 3, 4, 5]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     two_unique_nums([1, 2, 3]) == True\nassert     two_unique_nums([1, 2, 3, 4]) == False\nassert     two_unique_nums([1, 2, 3, 4, 4, 3]) == False\nassert     two_unique_nums([1, 2, 3, 4, 4, 3, 3]) == True\nassert     two_unique_nums([1, 2, 3, 4, 4, 4, 3, 3]) == False\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     two_unique_nums([[1,1],[2,2],[3,3],[3,3]]) == [[1,3],[2,3]], 'incorrect'\nassert two_unique_nums([[1,2],[2,1],[1,2]]) == [[1,2],[2,1]], 'incorrect'\nassert     two_unique_nums([[1,2],[2,1],[3,3],[3,3]]) == [[1,3],[2,3]], 'incorrect'\nassert two_unique_nums([[1,2],[1,3],[2,3]]) == [[1,2],[1,3],[2,3]], 'incorrect'\nassert two_unique_nums([[1,2],[1,3],[2,3],[3,3]]) == [[1,3],[2,3]], 'incorrect'\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     two_unique_nums([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]) == 4, \"error message\"\nassert     two_unique_nums([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6]) == 3, \"error message\"\nassert     two_unique_nums([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6]) == 5, \"error message\"\nassert     two_unique_nums([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) == 6, \"error message\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     two_unique_nums([[0,1,1,1,1,1,2,2,2,2], [1,1,1,1,2,2,2,2,3,3], [0,1,2,3,4,5,6,7,8,9]]) == True\nassert     two_unique_nums([[0,1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,0], [1,2,3,4,5,6,7,8,9,0]]) == False\nassert     two_unique_nums([[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,0]]) == True\nassert     two_unique_nums([[0,1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,0], [0,1,2,3,4,5,6,7,8,9]]) == False\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1,2,3,4,3,5,5,1,1,5,1,1]) == 120, \"Wrong result\"\n\nprint(\"Correct\")"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_product([1,1,1,1,1,2,3,4,5,6]) == 120, 'Not correct'\nassert unique_product([1,1,1,1,1,2,3,4,5,6]) == 120, 'Not correct'\nassert unique_product([1,1,1,1,1,1,2,3,4,5,6]) == 120, 'Not correct'\nassert unique_product([1,1,1,1,1,2,3,4,5,6]) == 120, 'Not correct'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([]    ) == 1, \"1\"\nassert     unique_product([1,2,3,4,5]) == 120, \"120\"\nassert     unique_product([-1,-2,-3,-4,-5]) == -240, \"240\"\nassert     unique_product([-1,-2,-3,-4,-5,1]) == -240, \"240\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    unique_product([1,2,3,4]) == 24\n    unique_product([1,2,2,3,4,4]) == 24\n    unique_product([1,1,2,3,4]) == 12\n    unique_product([-1,-2,-3]) == -6\n    unique_product([]) == 1\n    unique_product([-1, -2, -3]) == -6\n    unique_product([-1, 2, -3]) == -6\n    unique_product([-1, 2, -3, 2, -5]) == -6\n    unique_product([-1, 2, -3, 2, 5]) == -6\n    unique_product([-1, -2, -3, 2, 5]) == -6\n    unique_product([-1, 2, -3, 2, 5, 2, 5]) == -6\n    unique_product([-1, -2, -3, 2, 5, 2]) == -6\n    unique_product([-1, -2, -3, 2, 5, 2, 5, 2]) == -6\n    unique_product([-1, -2, -3, 2, 5, 2, 5, 2, 2, 2]) == -6\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_product([1,2,3,2,4,3,2]) == 24, 'Should be 24'\nassert     unique_product([1,1,1,2,2,2,3,3,3,3,4,4]) == 24, 'Should be 24'\nassert     unique_product([1,2,3,2,4,3,2]) == 24, 'Should be 24'\nassert     unique_product([1,2,3,2,4,3,2,4,4,4,5,5,5,5,6]) == 120, 'Should be 120'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([1,2,2,3,4,5,5]) == 120, \"wrong\"\nassert     unique_product([1,1,1,1,1,1]) == 1, \"wrong\"\nassert     unique_product([1,1,1,2,2,2,3]) == 6, \"wrong\"\nassert     unique_product([1,1,2,2,2,3,4]) == 24, \"wrong\"\nassert     unique_product([1,1,2,2,2,3,4,5]) == 120, \"wrong\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([1, 1, 3, 4, 5]) == 120, \"Should be 120\"\nassert     unique_product([2, 3, 4, 5]) == 60, \"Should be 60\"\nassert     unique_product([5, 4, 3, 2, 1]) == 240, \"Should be 240\"\nassert     unique_product([]) == 1, \"Should be 1\""
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert unique_product([3,5,2,3]) == 15, 'Product of unique numbers is not correct!'\nassert unique_product([1,3,2,3,5]) == 15, 'Product of unique numbers is not correct!'\n\nprint('All the tests passed!')\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_product([1,2,3,3]) == 6\nassert     unique_product([1,2,3]) == 6\nassert     unique_product([1,2,3,4]) == 24\nassert     unique_product([1,2,3,4,5]) == 120\nassert     unique_product([]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_product([0,1,2,3,4,5,6,7,8,9])==45\nassert     unique_product([-1,0,1,-2,-3,4,5,6,7,8,9])==45\nassert     unique_product([])==1\nassert     unique_product([-1])==1\nassert     unique_product([-1,0,1,-2,-3,4,5,6,7,8,9])==45\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(2,1) == 1.57079633\nassert     surfacearea_cylinder(1,4) == 3.141592653589793\nassert     surfacearea_cylinder(4,1) == 4.71238898038469\nassert     surfacearea_cylinder(3.5,1) == 4.71238898038469\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(0,1) == 2.81\nassert     surfacearea_cylinder(1,0) == 2.81\nassert     surfacearea_cylinder(1,1) == 4.89\nassert     surfacearea_cylinder(3,4) == 24.89"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(1, 1) == 2\nassert surfacearea_cylinder(1, 2) == 2\nassert surfacearea_cylinder(1, 3) == 2\nassert surfacearea_cylinder(2, 1) == 4\nassert surfacearea_cylinder(2, 2) == 4\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    surfacearea_cylinder(1,1) == 2\n    surfacearea_cylinder(0.5,2) == 2*pi*0.5**2\n    surfacearea_cylinder(3,3) == pi*3**2\n    surfacearea_cylinder(0.1,0.1) == 2*pi*0.1**2"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cylinder(1,1) == 2*pi*(1+1/2), 'Expected 2*pi*(1+1/2), got {}'.format(surfacearea_cylinder(1,1))\nassert surfacearea_cylinder(2,2) == pi*(2**2), 'Expected pi*(2**2), got {}'.format(surfacearea_cylinder(2,2))\nassert surfacearea_cylinder(4,3) == 2*pi*(1/3)**2, 'Expected 2*pi*(1/3)**2, got {}'.format(surfacearea_cylinder(4,3))\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cylinder(1.0, 1.0) == 2.59\nassert     surfacearea_cylinder(1.0, 2.0) == 2.59\nassert     surfacearea_cylinder(1.5, 2.0) == 3.28\nassert     surfacearea_cylinder(3.0, 2.0) == 3.28\nassert     surfacearea_cylinder(3.5, 2.0) == 3.28\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(1,1) == 2*pi*1**2, 'incorrect'\nassert     surfacearea_cylinder(2,1) == 2*pi*2**2, 'incorrect'\nassert     surfacearea_cylinder(3,1) == 2*pi*3**2, 'incorrect'\nassert     surfacearea_cylinder(4,1) == 2*pi*4**2, 'incorrect'\nassert     surfacearea_cylinder(5,1) == 2*pi*5**2, 'incorrect'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"Correct!\")\nprint()\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([2,3,4], []) == False, \"is_Sub_Array failed to check the correctness of function\"\nassert     is_Sub_Array([2,3,4,5], [1,2,4]) == True, \"is_Sub_Array failed to check the correctness of function\"\nassert     is_Sub_Array([], [1,2,4]) == False, \"is_Sub_Array failed to check the correctness of function\"\nassert     is_Sub_Array([1,2,3,4,5,6,7], [1,2,4,6]) == True, \"is_Sub_Array failed to check the correctness of function\"\nassert     is_Sub_Array([], [1,2,3,4,5,6,7,8,9]) == False, \"is_Sub_Array failed to check the correctness of function\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([1,2,3,4,5], [1,2]) == True, \"is_Sub_Array fails\"\nassert is_Sub_Array([1,2,3,4,5], [4,5,6]) == False, \"is_Sub_Array fails\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a Python program to construct the following pattern, using a nested for loop. \n* \n* * \n* * * \n* * * * \n* * * * * \n* * * * \n* * * \n* * \n* \n'''\n\nfor i in range(4):\n    for j in range(4 - i):\n        print(' ', end='')\n    for k in range(2 * i + 1):\n        print('*', end='')\n    print('')\n\n'''\nWrite a Python program to construct the following pattern, using a nested for loop. \n* \n* * \n* * * \n* * * * \n* * * * * \n* * * * \n* * * \n* * \n* \n'''\n\nfor i in range(4):\n    for j in range(i + 1):\n        print('*', end='')\n    print('')\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sub_Array([\"a\", \"b\", \"c\", \"d\"], [\"e\", \"c\"]) == True, \"is_Sub_Array test 1\"\nassert     is_Sub_Array([\"a\", \"b\", \"c\", \"d\"], [\"e\"]) == False, \"is_Sub_Array test 2\"\nassert     is_Sub_Array([\"a\", \"b\", \"c\", \"d\"], [\"e\", \"c\", \"f\"]) == False, \"is_Sub_Array test 3\"\nassert     is_Sub_Array([\"a\", \"b\", \"c\", \"d\"], [\"e\", \"c\", \"f\", \"g\"]) == True, \"is_Sub_Array test 4\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sub_Array(A = [1,2,3], B = [2]) == True, 'fails is_Sub_Array'\nassert     is_Sub_Array(A = [1,2,3], B = [1,2]) == False, 'fails is_Sub_Array'\nassert     is_Sub_Array(A = [1,2,3], B = []) == True, 'fails is_Sub_Array'\nassert     is_Sub_Array(A = [], B = [2]) == False, 'fails is_Sub_Array'\nassert     is_Sub_Array(A = [1,2,3], B = [1,2,3]) == True, 'fails is_Sub_Array'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sub_Array([2, 1], [1])==True, \"First element is sublist of second\"\nassert     is_Sub_Array([2, 1, 1], [1])==True, \"Second element is sublist of second\"\nassert     is_Sub_Array([2, 1], [])==False, \"Empty list is sublist of second\"\nassert     is_Sub_Array([], [2])==False, \"Empty list is sublist of second\"\nassert     is_Sub_Array([1, 2], [1, 2])==True, \"Same list is sublist of second\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([1,2,3,4,5],[[1,2,3,4,5]]) == True\nassert     is_Sub_Array([1,2,3,4,5],[[1,2,3]]) == False\nassert     is_Sub_Array([1,2,3,4,5],[[1,2,3,4,5,6]]) == False\nassert     is_Sub_Array([1,2,3,4,5],[[1,2,3,4,5,5]]) == False\nassert     is_Sub_Array([1,2,3,4,5],[[1,2,3,4,5,6,6]]) == True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sub_Array([1,2,3,4,5], [2,3,4]) == True\nassert     is_Sub_Array([1,2,3,4,5], [1,3,4]) == True\nassert     is_Sub_Array([1,2,3,4,5], []) == False\nassert     is_Sub_Array([1,2,3,4,5], [1,2,3,4,5]) == False\nassert     is_Sub_Array([1,2,3,4,5], [1,2,3,4,6]) == False\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(100) == 10\nassert     last_Digit_Factorial(1000) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlast_Digit_Factorial(121) == 5\nlast_Digit_Factorial(2147483647) == 6\nlast_Digit_Factorial(9) == 9\nlast_Digit_Factorial(8) == 1\nlast_Digit_Factorial(9) == 0\n\n\ndef num_of_Digit_Factorial(n): \n    '''\n    Write a python function to find the number of digit in factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(1) == 0\nassert     last_Digit_Factorial(2) == 1\nassert     last_Digit_Factorial(3) == 1\nassert     last_Digit_Factorial(7) == 0\nassert     last_Digit_Factorial(9) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit_Factorial(24) == 3\nassert     last_Digit_Factorial(42) == 1\n\ndef factorial_tail_recursion(n):\n    '''\n    Write a python function to find the factorial of a given number using tail recursion.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"correct\")\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(last_Digit_Factorial(2))\nprint(last_Digit_Factorial(7))\nprint(last_Digit_Factorial(3))\nprint(last_Digit_Factorial(8))\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(6) == 6\nassert     last_Digit_Factorial(9) == 9\nassert     last_Digit_Factorial(99) == 9\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(12) == 7\nassert     last_Digit_Factorial(20) == 6\nassert     last_Digit_Factorial(0) == 0\nassert     last_Digit_Factorial(100) == 6\nassert     last_Digit_Factorial(1) == 1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([1,2,3,4],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\",\"g\"]) == [1,2,3,4, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nassert     interleave_lists([\"A\"],[\"B\",\"C\",\"D\",\"E\"],[\"F\",\"G\",\"H\",\"I\"]) == [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\nassert     interleave_lists([1],[\"B\",\"C\",\"D\",\"E\"],[\"F\",\"G\",\"H\",\"I\"]) == [1, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\nassert     interleave_lists([\"A\"],[\"B\",\"C\",\"D\",\"E\"],[\"F\",\"G\",\"H\",\"I\"]) == [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\nassert     interleave_lists([\"A\",\"B\",\"C\",\"D\"],[\"E\",\"F\",\"G\",\"H\",\"I\"],[\"J\",\"K\",\"L\",\"M\",\"N\"]) == [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\"]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],['a','b','c']) == [1,4,2,5,3,6,a,b,c]\nassert     interleave_lists([],[],[]) == []\nassert     interleave_lists([1,2,3],[4,5,6,7],[8,9,10]) == [1,4,2,5,3,6,7,8,9,10]\nassert     interleave_lists([],[],[1,2,3]) == [1,2,3]\nassert     interleave_lists([1,2,3],[4,5,6,7],[8,9,10,11]) == [1,4,2,5,3,6,7,8,9,10,11]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([],[],[]) == []\nassert     interleave_lists([2,4,6,8],[1,3,5],[7,9]) == [2,1,3,4,5,6,7,8,9]\nprint('tests passed')\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     interleave_lists([1,2,3],['a','b','c'],[4,5,6]) == [1,4,5,2,4,6,3,6,5,3]\nassert     interleave_lists([1,2,3,4,5],['a','b','c'],[4,5,6]) == [1,4,5,2,4,6,3,6,5,3]\nassert     interleave_lists([1,2,3,4,5],['a','b','c'],[4,5,6,7,8]) == [1,4,5,2,4,6,3,6,5,3,7,8]\n\n\n\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a given list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) ==  [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3,4], [5,6], [7,8,9]) ==  [1,5,2,6,3,7,4,8,9]\nassert     interleave_lists([1,2,3], [4,5], [6,7,8]) ==  [1,4,6,2,5,7,3,8]\nassert     interleave_lists([], [1,2], [3,4]) ==  [1,3,2,4]\nassert     interleave_lists([1,2], [], [3,4]) ==  [1,3,2,4]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"A\",\"B\",\"C\"]) == [\"1\",\"a\",\"2\",\"b\",\"3\",\"c\",\"A\",\"B\",\"C\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]) == [\"1\",\"a\",\"2\",\"b\",\"3\",\"c\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"A\",\"B\",\"C\",\"D\",\"E\"]) == [\"1\",\"a\",\"2\",\"b\",\"3\",\"c\",\"A\",\"B\",\"C\",\"D\",\"E\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"A\",\"B\",\"C\"]) == [\"1\",\"a\",\"2\",\"b\",\"3\",\"c\",\"A\",\"B\",\"C\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"A\",\"B\",\"C\",\"D\",\"E\"]) == [\"1\",\"a\",\"2\",\"b\",\"3\",\"c\",\"A\",\"B\",\"C\",\"D\",\"E\"]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3], [4,5,6], [7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\nassert     interleave_lists([1,2,3], [4,5,6], [7,8,9,10,11]) == [1,4,7,2,5,8,3,6,9,10,11]\nassert     interleave_lists([1,2,3], [4,5,6], [7,8,9,10,11,12]) == [1,4,7,2,5,8,3,6,9,10,11,12]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef interleave_lists2(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    This function should not use the built in functions.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar((2,5,4,1),(2,5,1,4)) ==     (5,1)\nassert     find_dissimilar((1,2,3,4),(2,4,5,6)) ==     (1,3)\nassert     find_dissimilar((1,2,3,4),(2,3,4,5)) ==     (1,3)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar((1, 1, 2), (1, 2, 2)) == ((1, 1), (2, 2))\nassert     find_dissimilar((2, 2, 2), (1, 1, 2)) == ((2, 2), (1, 1))\nassert     find_dissimilar((2, 2, 2), (2, 2, 2)) == ((2, 2), )\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar((1, 2, 4), (3, 4, 1))     ==     [1, 2] \nassert     find_dissimilar((3, 4, 1), (1, 2, 4))     ==     [1, 2] \nassert     find_dissimilar((3, 4, 1), (1, 4, 1))     ==     [1] \nassert     find_dissimilar((1, 4, 1), (3, 4, 1))     ==     [1] \nassert     find_dissimilar((1, 4, 1), (1, 4, 1))     ==     [] \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_dissimilar((1, 2, 3), (1, 2, 2)) == True\n    find_dissimilar((1, 2, 3), (1, 2, 1)) == False\n    find_dissimilar((1, 1, 1), (1, 1, 1)) == False\n    find_dissimilar((1, 2, 3), (1, 2, 4)) == True\n    find_dissimilar((1, 2, 4), (1, 2, 3)) == False\n    find_dissimilar((1, 2, 3), (1, 2, 3, 4)) == False\n    find_dissimilar((1, 2, 3), (1, 1, 1)) == True"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar((1,3,4,7),(2,6,8,9)) == (3,4), \"Wrong output\"\nassert     find_dissimilar((1,3,4,5),(2,6,8,9)) == (3,5), \"Wrong output\"\nassert     find_dissimilar((1,2,3,5),(2,4,6,8)) == (1,2), \"Wrong output\"\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_dissimilar((1, 2, 3, 4, 5, 6), (4, 1, 2, 6, 4, 2)) == 1\nassert     find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)) == 6\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((2, 5, 1, 3), (2, 5, 2, 4)) == (1, 3)\nassert     find_dissimilar((2, 5, 1, 3), (2, 5, 2, 5)) == ()\n\ndef find_mismatch(test_tup1, test_tup2):\n    '''\n    Write a function to find the mismatch elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd')) == (('a', 'c'), ('b', 'd'))\nassert     find_dissimilar(('a', 'b', 'c'), ('b', 'd', 'a')) == (('a', 'c'), ('b', 'd'))\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd', 'e', 'f')) == (('c', 'd', 'e', 'f'), ('a', 'b'))\nassert     find_dissimilar(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'c', 'd', 'e', 'f')) == (('c', 'd', 'e'), ('a', 'b'))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_ele((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 0) == (2,4,6,8,10)\nassert     even_ele((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 1) == (1,3,5,7,9)\nassert     even_ele((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 0) == (2,4,6,8,10)\nassert     even_ele((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 1) == (1,3,5,7,9)\nassert     even_ele((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 0) == (2,4,6,8,10)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_ele(((1, 2, 3, 4, 5, 6, 7), 8, 9), lambda x: x % 2 == 0) == (1, 2, 3, 4, 5, 6, 7)\nassert even_ele(((1, 2, 3, 4, 5, 6, 7), 8, 9, (10, 11, 12, 13)), lambda x: x % 2 == 0) == (1, 2, 3, 4, 5, 6, 7)\nassert even_ele(((1, 2, 3, 4, 5, 6, 7), 8, 9, (10, 11, 12, 13, 14)), lambda x: x % 2 == 0) == (1, 2, 3, 4, 5, 6, 7)\nassert even_ele(((1, 2, 3, 4, 5, 6, 7), 8, 9, (10, 11, 12, 13, 14, 15)), lambda x: x % 2 == 0) == (1, 2, 3, 4, 5, 6, 7)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_ele((1, 2, 3, 4, 5), even_ele) == (2, 4, 6, 8, 10), \"Result is not as expected\"\n\n\ndef remove_all_x(test_list, x):\n    '''\n    Write a function to remove all the elements with a certain x\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_ele(((1,2,3),(4,5),(6,7),(8,9)),even_ele) == ((1,2,3),(4,5),(6,7),(8,9))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_ele(((2,4),(6,7),(1,3)),lambda tup: tup[0]%2 == 0 ) == ((2,4),(6,7),(1,3))\nassert     even_ele(((2,4),(6,7),(1,3)),lambda tup: tup[0]%2 == 1 ) == ((2,4),(6,7))\nassert     even_ele(((2,4),(6,7),(1,3)),lambda tup: tup[0]%2 == 1 ) == ((2,4),(6,7))\nassert     even_ele(((2,4),(6,7),(1,3)),lambda tup: tup[0]%2 == 1 ) == ((2,4),(6,7))\nassert     even_ele(((2,4),(6,7),(1,3)),lambda tup: tup[0]%2 == 1 ) == ((2,4),(6,7))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_ele([1, 2, 3, 4, 5], even_ele) == [1, 2, 3, 4]\nassert \neven_ele([1, 2, 3, 4, 5, 6, 7], even_ele) == [1, 2, 3, 4, 5, 6]\nassert \neven_ele([1, 2, 3, 4, 5, 6, 7, 8, 9], even_ele) == [1, 2, 3, 4, 5, 6, 7]\n\n'''\nGiven a nested tuple of integers, \nwrite a function to find the largest integer in the tuple.\n'''\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntest_tuple = (\n        ('d', 1),\n        (2, 3),\n        (4, 'd'),\n        (5, 7),\n        (8, 2),\n        (10, 'a'))\neven_fnc = (\n        lambda ele: ele[0] % 2 == 0,\n        lambda ele: ele[0] % 2!= 0)\nexpected_result = (\n        (2, 3),\n        (4, 'd'),\n        (5, 7),\n        (8, 2))\nassert even_ele(test_tuple, even_fnc) == expected_result\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surface_Area(4,3)==12\nassert     surface_Area(6,4)==40\nassert     surface_Area(8,6)==72\nassert     surface_Area(5,5)==25\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    surface_Area(5,4) == 10\n    surface_Area(4,6) == 12\n    surface_Area(10,7) == 50\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(1,1) == 2\nassert     surface_Area(2,1) == 2\nassert     surface_Area(3,1) == 6\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"Checking the correctness of surface_Area(b,s)...\")\nassert surface_Area(8,5) == 100\nassert surface_Area(2,5) == 25\nassert surface_Area(2.5,5) == 75\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surface_Area(3,5) == 12\nassert     surface_Area(3,4) == 12\nassert     surface_Area(4,4) == 16\nassert     surface_Area(4,5) == 22\nassert     surface_Area(5,5) == 30\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surface_Area(4,6) == 36, \"Surface_Area() is wrong\""
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surface_Area(1,1) == 0\nassert    surface_Area(2,4) == 14\nassert    surface_Area(2,2) == 4\n\n'''\nWrite a function to find the smallest distance between 2 points in a 2D plane.\n'''\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surface_Area(10,10)==290\nassert surface_Area(5,5)==20\nassert surface_Area(4,3)==36\nprint(\"Test case passed\")\nprint()"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({'a':1}) == False, 'First assertion failed'\nassert     my_dict({'a':1}) == True, 'Second assertion failed'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert my_dict(my_dict) == False, \"MY_DICT: True\"\nassert my_dict({}) == True, \"MY_DICT: True\"\nassert my_dict({\"key\":\"value\"}) == False, \"MY_DICT: True\"\nassert my_dict({\"key\":\"value\",\"key\":\"value\"}) == True, \"MY_DICT: True\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     my_dict({}) == True, \"my_dict(dict1)\"\nassert     my_dict({\"z\": 2}) == False, \"my_dict(dict1)\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     my_dict({\"a\":1, \"b\":2}) == False, \"Wrong Answer\"\nassert     my_dict({\"a\":1}) == True, \"Wrong Answer\"\nassert     my_dict({\"a\":1, \"b\":2, \"c\":3}) == False, \"Wrong Answer\"\nprint(\"Expected True, got True\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     my_dict({})\nassert     not my_dict({\"a\": 1, \"b\": 2, \"c\": 3})\nassert     not my_dict({\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"})\nassert     my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5})\nassert     my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     my_dict({}) == True, 'fail the test case 1'\nassert     my_dict({1:1, 2:2}) == True, 'fail the test case 2'\nassert     my_dict({'a':1, 'b':2}) == False, 'fail the test case 3'"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert my_dict({}) == True\nassert not my_dict({\"1\":1})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     catalan_number(1) == 0, \"First number should be 0\"\nassert catalan_number(2) == 1, \"Second number should be 1\"\nassert catalan_number(3) == 2, \"Third number should be 2\"\nassert catalan_number(4) == 5, \"Fourth number should be 5\"\nassert catalan_number(5) == 14, \"Fifth number should be 14\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 5\nassert     catalan_number(5) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     catalan_number(0) == 1, 'Wrong!'\nassert     catalan_number(1) == 1, 'Wrong!'\nassert     catalan_number(2) == 2, 'Wrong!'\nassert     catalan_number(3) == 3, 'Wrong!'\nassert     catalan_number(4) == 8, 'Wrong!'\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(catalan_number(5)"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     catalan_number(1) == 1, \"for 1st catalan number\"\nassert     catalan_number(2) == 2, \"for 2nd catalan number\"\nassert     catalan_number(3) == 6, \"for 3rd catalan number\"\nassert     catalan_number(4) == 14, \"for 4th catalan number\"\nassert     catalan_number(5) == 42, \"for 5th catalan number\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs('The children go out in the rain') == [(1, 7), (5, 7), (9, 7)]\nassert     find_adverbs('The children go out in the rain and the sun goes down') == [(1, 7), (6, 7), (9, 7)]\nassert     find_adverbs('The children go out in the rain, and the sun goes down') == [(1, 7), (7, 7), (9, 7)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs(\"He read a book\") ==     [2]\nassert     find_adverbs(\"His father was a farmer\") ==     [12]\nassert     find_adverbs(\"He read a book in the library\") ==    [0]\nassert     find_adverbs(\"She was raised to be a child\") ==    [4]\nassert     find_adverbs(\"He is cool and he can speak\") ==    [1]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs('The lecture is about the use of adverbs in English.') == {'and', 'at', 'about', 'the', 'ly'}\nassert     find_adverbs('The lecture is about the use of adverbs in English.') == {'and', 'at', 'about', 'the', 'ly'}\nassert     find_adverbs('The lecture is about the use of adverbs in English.') == {'about', 'the', 'ly'}\nassert     find_adverbs('The lecture is about the use of adverbs in English.') == set()\nassert     find_adverbs('The lecture is about the use of adverbs in English.') == set()\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs('I am quite pleased to hear that, ') == [('am quite pleased to hear that', 1)]\nassert     find_adverbs('I am quite pleased to hear that, but I am disappointed to hear that too!') == [('am quite pleased to hear that', 1), ('I am disappointed to hear that too!', 2)]\nassert     find_adverbs('I am quite pleased to hear that and I am disappointed to hear that too!') == [('am quite pleased to hear that', 1), ('I am disappointed to hear that too!', 2)]\nassert     find_adverbs('I am quite pleased to hear that, but I am disappointed to hear that too!') == []\nassert     find_adverbs('I am quite pleased to hear that and I am disappointed to hear that too!') == []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverbs('') == 'None'\nassert     find_adverbs('the') == 'None'\nassert     find_adverbs('ly') == 'None'\nassert     find_adverbs('I am a Python developer') == 'None'\nassert     find_adverbs('so') == 'None'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs(\"when do you want to go to school\") ==    [('to', 8), ('ly', 10)]\nassert     find_adverbs(\"when do you want to go to school\") ==    [('to', 6), ('ly', 7)]\nassert     find_adverbs(\"when do you want to go to school\") ==    [('to', 8), ('ly', 8), ('want', 5), ('to', 12), ('school', 7), ('go', 6), ('to', 12), ('school', 7)]\nassert     find_adverbs(\"when do you want to go to school\") ==    [('to', 6), ('ly', 7), ('want', 5), ('to', 12), ('school', 7), ('go', 6), ('to', 12), ('school', 7)]\nassert     find_adverbs(\"when do you want to go to school\") ==    [('to', 8), ('ly', 10)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ntext = 'I am very happy for you! I am also glad to see you! I am also very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, ver"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_adverbs('This is a test, use for a test.') == 'this is a test, use for a test.'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs(\"I'm going to fly! what are your bad habits?\") ==    [4, 20]\nassert     find_adverbs(\"I'd like to leave this house and move to another\") ==    [2, 11]\nassert     find_adverbs(\"I'm so tired\") ==    [6, 14]\nassert     find_adverbs(\"I'm so tired. I'm tired. I'm tired.\") ==    [6, 14]\nassert     find_adverbs(\"I'm so tired. I'm tired. I'm tired. I'm tired.\") ==    [6, 14]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs('This is an awesome text') == ['this']\nassert     find_adverbs('This is an awesome text') == ['this']\nassert     find_adverbs('This is an awesome text') == ['this']\nassert     find_adverbs('This is an awesome text') == ['this']\n\ndef find_nouns(text):\n    '''\n    Write a function to find all nouns and their positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     expensive_items([1,4,5,7,8], 3) == (7,8,1)\nassert     expensive_items([1,4,5,7,8], 1) == (7,8)\nassert     expensive_items([1,4,5,7,8], 0) == ()\nassert     expensive_items([1,4,5,7,8], 2) == (7,8)\nassert     expensive_items([1,4,5,7,8], 3) == (7,8)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items([1,10,100,1000,10000], 2) == (1000,100)\nassert     expensive_items([1,10,100,1000,10000], 5) == (10000,1000,100,10,1)\nassert     expensive_items([1,10,100,1000,10000], 8) == (10000,10000,1000,100,10,1,10,1)\nassert     expensive_items([1,10,100,1000,10000], 10) == (10000,10000,1000,100,10,1,10,1,10,1)\nassert     expensive_items([1,10,100,1000,10000], 11) == (10000,10000,1000,100,10,1,10,1,10,1,10,1)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     expensive_items([('item1', 15), ('item2', 14), ('item3', 16), ('item4', 18), ('item5', 18), ('item6', 19)], 3) ==     [('item3', 16), ('item5', 18), ('item4', 18)], \\\n    \"Incorrect result\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items([(3,'A'),(2,'B'),(5,'C'),(1,'D'),(4,'E')],3) == ['D','E','C']\nassert expensive_items([(2,'A'),(3,'B'),(3,'C'),(4,'D'),(5,'E')],3) == ['B','C','A']\nassert expensive_items([(1,'A'),(2,'B'),(3,'C'),(3,'D'),(4,'E')],3) == ['A','D','C']\nassert expensive_items([(1,'A'),(2,'B'),(3,'C'),(3,'D'),(4,'E')],4) == ['C','A','B']\nassert expensive_items([(1,'A'),(2,'B'),(3,'C'),(3,'D'),(4,'E')],5) == ['C','A','B','D','E']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     expensive_items([10,9,8,7,6,5,4,3,2,1],4) == [10,9,8,7,6]\nassert     expensive_items([],1) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     expensive_items([{\"name\": \"laptop\", \"cost\": 200},\n                            {\"name\": \"phone\", \"cost\": 200},\n                            {\"name\": \"tablet\", \"cost\": 150}],1) ==    [{\"name\": \"phone\", \"cost\": 200}]\nassert     expensive_items([{\"name\": \"laptop\", \"cost\": 200},\n                            {\"name\": \"phone\", \"cost\": 200},\n                            {\"name\": \"tablet\", \"cost\": 150}],2) ==    [{\"name\": \"phone\", \"cost\": 200},\n                                                                     {\"name\": \"tablet\", \"cost\": 150}]\nassert     expensive_items([{\"name\": \"laptop\", \"cost\": 200},\n                            {\"name\": \"phone\", \"cost\": 200},\n                            {\"name\": \"tablet\", \"cost\": 150}],3) ==    [{\"name\": \"phone\", \"cost\": 200},\n                                                                     {\"name\": \"tablet\", \"cost\": 150}]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     expensive_items([(3,4),(2,5),(1,4),(2,4),(5,6)],2) == [(1,4),(2,4),(5,6)]\nassert expensive_items([(3,4),(2,5),(1,4),(2,4),(5,6)],3) == [(2,4),(1,4),(5,6)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert expensive_items([20,80,40,50,60,100],1) == [100]\nassert expensive_items([20,80,40,50,60,100],2) == [100, 60]\nassert expensive_items([20,80,40,50,60,100],3) == [100, 60, 50]\nassert expensive_items([20,80,40,50,60,100],4) == [100, 60, 50, 40]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    split_Arr(list, 4)\n\n    assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef combine_Arr(arr1, arr2):\n    '''\n    Write a python function to combine a list with a given length.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_positive_numbers(numbers):\n    '''\n    Write a python function that takes a list of integers and checks whether all integers in the list are positive or not.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_Arr([\"sachin\", \"rohit\", \"ashish\", \"hari\", \"rohit\"], 1) == [\"sachin\", \"rohit\", \"ashish\", \"hari\"]\nassert split_Arr([\"sachin\", \"rohit\", \"ashish\", \"hari\", \"rohit\"], 3) == [\"sachin\", \"rohit\", \"ashish\", \"hari\"]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef mod_100(a, b):\n    '''\n    Write a python function to calculate the modulus of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7,8,9], 5) == [[1,2,3,4],5,6,7,8,9]\nassert     split_Arr([1,2,3,4,5,6,7,8,9], 5, 10) == [[1,2,3,4],5,6,7,8,9,10]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert split_Arr([\"hello\", \"there\", \"you\"], 1) == [\"hello\", \"there\"], 'error'\nassert split_Arr([\"hello\", \"there\", \"you\"], 3) == [\"hello\", \"there\", \"you\"], 'error'\nassert split_Arr([\"hello\", \"there\", \"you\"], 5) == [\"hello\", \"there\", \"you\"], 'error'\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_Arr([1,2,3], 1) == [[1], [2, 3]]\nassert     split_Arr([1,2,3], 2) == [[1, 2], [3]]\nassert     split_Arr([1,2,3], 3) == [[1, 2, 3]]\nassert     split_Arr([1,2,3], 4) == [[1, 2, 3]]\nassert     split_Arr([1,2,3], 5) == [[1, 2, 3]]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_tuple([1,2,3])    ==     (1,2,3)\nassert     list_tuple([1,2,3,4])    ==     (1,2,3,4)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_tuple(list_1) == (1, 2, 3)\nassert     list_tuple(list_2) == (1, )\nassert     list_tuple(list_3) == (1, 2)\nassert     list_tuple(list_4) == (1, 2, 3, 4)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), \"WRONG!\"\nassert     list_tuple([]) == (), \"WRONG!\"\nassert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5), \"WRONG!\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nWrite a function to count the number of even and odd numbers in a given list.\n'''\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple([1,2,3,4])==(1,2,3,4)\nassert     list_tuple([1,2,3])==(1,2,3)"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), \"Wrong output\"\nassert     list_tuple((1, 2, 3)) == (1, 2, 3), \"Wrong output\"\nassert     list_tuple({1: 2}) == {1: 2}, \"Wrong output\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), \"list_tuple failed\"\nassert     list_tuple([1, \"2\", 3]) == (1, \"2\", 3), \"list_tuple failed\"\nassert     list_tuple([\"a\", \"b\", \"c\"]) == (\"a\", \"b\", \"c\"), \"list_tuple failed\"\nassert     list_tuple([\"a\"]) == (\"a\",), \"list_tuple failed\"\n\ndef list_tuple2(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple([1,2,3])==(1,2,3), \"incorrect\"\nassert list_tuple([1,2,3])==(1,2,3), \"incorrect\"\nassert list_tuple([1,2,3])==(1,2,3), \"incorrect\"\nassert list_tuple([1,2,3])==(1,2,3), \"incorrect\"\nassert list_tuple([1,2,3])==(1,2,3), \"incorrect\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_diff([-2, -3, -9, -6]) == 3, 'First'\nassert     big_diff([1, 2, 3, 4]) == 0, 'Second'\nassert     big_diff([-10, -5, -6, -2, -4, -8]) == 5, 'Third'\nassert     big_diff([3, -1, 1]) == 2, 'Fourth'\nassert     big_diff([-1, -1]) == 1, 'Fifth'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_diff([10, 3, 5, 6]) == 0, \"big_diff([10, 3, 5, 6]) should return 0\"\nassert     big_diff([7, 2, 10, 9]) == 3, \"big_diff([7, 2, 10, 9]) should return 3\"\nassert     big_diff([2, 10, 7, 9]) == 3, \"big_diff([2, 10, 7, 9]) should return 3\"\nassert     big_diff([9, 8, 7, 6, 5]) == 1, \"big_diff([9, 8, 7, 6, 5]) should return 1\"\nassert     big_diff([99, 1]) == 98, \"big_diff([99, 1]) should return 98\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_diff([-2, -5, -45]) == 65\nassert     big_diff([]) == 0\nassert     big_diff([2]) == -1\n\n\ndef check_palindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_diff([-1, -1, -1, -1, -1]) == -6, 'Wrong output'\nassert     big_diff([1, 2, 3, 4, 5]) == 6, 'Wrong output'\nassert     big_diff([1, 1, 1]) == 1, 'Wrong output'\nprint('  Passed all test cases.')\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"Pass\" if (5 == big_diff([10, 3, 5, 6])) else \"Fail\")\nprint(\"Pass\" if (1 == big_diff([7, 2, 10, 9])) else \"Fail\")\nprint(\"Pass\" if (0 == big_diff([7, 2, 10, 9])) else \"Fail\")\nprint(\"Pass\" if (8 == big_diff([-1, 5, -10, -9])) else \"Fail\")\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     big_diff([-3, 4, 1, 2, -7, -5, 3]) == -3\nassert big_diff([3, -1, -5, -3, -1, 5, -5, 1]) == 4\nassert big_diff([1, 1, 0, -1, -1, -2, -2, 3]) == -4"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_diff([10, 3, 5, 6]) == 3\nassert     big_diff([2, 10, 7, 5]) == 6\nassert     big_diff([2, 11, 5, 10, 7, 2]) == 3\nassert     big_diff([1, 2, 3]) == 3\nassert     big_diff([1]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_diff([]) == 0, \"Not a valid test case\"\nassert     big_diff([1]) == 1, \"Not a valid test case\"\nassert     big_diff([-1]) == 1, \"Not a valid test case\"\nassert     big_diff([1, 2, 3, 4, 5]) == 4, \"Not a valid test case\"\nassert     big_diff([10, 5, -2, 5, -3, -1]) == 9, \"Not a valid test case\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_diff([1, 2, 3, 4]) == 3\nassert     big_diff([-1, -2, -3, -4]) == -6\nassert     big_diff([-4, -3, -2, -1]) == -8\nassert     big_diff([1, 1, 1, 1]) == 0\nassert     big_diff([-1, -2, -3, -4]) == -4\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perfect_squares(5, 0) == [0, 1, 4]\nassert     perfect_squares(0, 4) == [0, 1, 2, 3, 4]\nassert     perfect_squares(4, 0) == [0, 1, 4]\nassert     perfect_squares(8, 0) == [0, 1, 2, 4, 8]\n\ndef check_list_of_integers(nums):\n    '''\n    Write a function to check if a given list of integers contains any duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sorted_list(l, reverse=False):\n    '''\n    Write a function that sorts the list in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perfect_squares(1, 5) == [1, 4]\nassert     perfect_squares(0, 1) == []\nassert     perfect_squares(2, 5) == [4, 9]\nassert     perfect_squares(2, 1) == [4]\n\ndef primes(a, b):\n    '''\n    Write a function to find all primes between two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perfect_squares(4, 16) == {1, 4, 9, 16}\nassert     perfect_squares(3, 9) == {1, 3, 4, 9}\nassert     perfect_squares(0, 9) == {0}\nassert     perfect_squares(0, 0) == {0}\n\ndef fibonacci(n):\n    '''\n    Write a function that returns the n-th Fibonacci number\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perfect_squares(1, 1) == [1]\nassert     perfect_squares(2, 3) == [2]\nassert     perfect_squares(3, 4) == [3]\nassert     perfect_squares(10, 2) == [4, 4]\nassert     perfect_squares(100, 2) == [2, 4, 4, 6, 4, 8, 8, 10]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perfect_squares(1, 1) == [1], \"not perfect squares\"\nassert     perfect_squares(6, 9) == [4, 9], \"four perfect square\"\nassert     perfect_squares(6, 5) == [2, 3], \"two perfect squares\"\nassert     perfect_squares(17, 8) == [16, 25], \"one perfect square\"\nassert     perfect_squares(9, 4) == [4], \"no perfect square\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perfect_squares(4, 10) == 16\nassert     perfect_squares(100, 11) == 121\nassert     perfect_squares(10, 20) == 16\nassert     perfect_squares(0, 1) == 0\nassert     perfect_squares(1, 2) == 1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perfect_squares(1, 5) == [1, 4]\nassert     perfect_squares(0, 9) == [0, 4, 9]\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef polar_rect_to_cart(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     polar_rect(0,1)==(0,0)\nassert     polar_rect(0,0)==(0,0)\nassert     polar_rect(1,0)==(0,0)\nassert     polar_rect(0,0)==(0,0)\nassert     polar_rect(0,-1)==(0,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\npolar_rect(1.3, 2.5)\n\nprint(\"----------------\")\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     polar_rect(0,0) == (0,0)\nassert     polar_rect(5,0) == (5,0)\nassert     polar_rect(0,5) == (0,5)\nassert     polar_rect(2,4) == (2,4)\nassert     polar_rect(2,4) == (2,4)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \npolar_rect(0,0) == (0,0)\npolar_rect(1,0) == (1,0)\npolar_rect(1,1) == (1,1)\npolar_rect(2,1) == (2,1)\n\ndef point_in_rect(a,b,c,d):\n    '''\n    Write a function to determine whether a point (x,y) lies in a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     polar_rect(1,1) == (1.5707963267948966, 1.5707963267948966), polar_rect(1,1)\nassert     polar_rect(1,4) == (1.5707963267948966, 4.71238898038469), polar_rect(1,4)\nassert     polar_rect(1,0) == (1.5707963267948966, 0.0), polar_rect(1,0)\nassert     polar_rect(-1,2) == (-1.5707963267948966, 2.3561944901923427), polar_rect(-1,2)\nassert     polar_rect(0,0) == (0.0, 0.0), polar_rect(0,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     polar_rect(1,0) == (1,0)\nassert polar_rect(1,2) == (1,2)\nassert polar_rect(-1,0) == (-1,0)\nassert polar_rect(-1,2) == (-1,2)\nassert polar_rect(0,-2) == (0,-2)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \npolar_rect(2,3) == (5,5)\npolar_rect(2,3) == (2,3)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert swap_List([2,3,4,5,6,7]) == [4,3,2,5,6,7]\nassert swap_List([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    swap_List([1,2,3,4,5,6,7,8,9]) == [9,1,2,3,4,5,6,7,8]\n    swap_List([1,2,3,4,5,6,7,8,9,10]) == [10,1,2,3,4,5,6,7,8,9]\n\n    swap_List([2,3,4,5,6,7,8,9,10,1]) == [10,2,3,4,5,6,7,8,9,1]\n    swap_List([2,3,4,5,6,7,8,9,10,1]) == [10,2,3,4,5,6,7,8,9,1]\n\n    swap_List([2,3,4,5,6,7,8,9,10,1,2]) == [2,10,2,3,4,5,6,7,8,9,1]\n    swap_List([2,3,4,5,6,7,8,9,10,1,2]) == [2,10,2,3,4,5,6,7,8,9,1]\n\n    swap_List([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n    swap_List([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n\n    swap_List([2,3,4,5,6,7,8,9,10,1,2,3]) == [2,3,4,5,6,7,8,9,10,1,2,3]\n    swap_List([2,3,4,5,6,7,8,9,10,1,2,3]) == [2,3,4,5,6,7,8,9,10,1,2,3]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    swap_List([2,3,4,5]) == [4,3,5,2]\n    swap_List([1,2,3,4]) == [4,3,2,1]\n    swap_List([1,2,3,4,5]) == [4,3,5,2,1]\n    swap_List([1,2,3,4,5,6]) == [4,3,5,6,2,1]\n\n'''\nExpected Output:\n[4, 3, 5, 2]\n[4, 3, 2, 1]\n[4, 3, 2, 1, 5]\n[4, 3, 2, 1, 5, 6]\n'''\n\n'''\nQ-5\nWrite a python function to find all the elements in a list that are divisible by 3.\n\n'''\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef shuffle_List(newList): \n    '''\n    Write a python function to shuffle a list in-place.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([1,2,3,4,5]) == [4,5,3,2,1]\nassert swap_List([2,1,5,4,3]) == [5,4,3,1,2]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([]) == []\nassert     swap_List([1,2,3,4,5]) == [5,1,4,2,3]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List([1, 2, 3, 4]) == [2, 3, 4, 1], \"Swap with one element\"\nassert     swap_List([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1], \"Swap with two elements\"\nassert     swap_List([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6, 1], \"Swap with three elements\"\nassert     swap_List([1, 2, 3, 4, 5, 6, 7]) == [2, 3, 4, 5, 6, 7, 1], \"Swap with four elements\"\nassert     swap_List([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 3, 4, 5, 6, 7, 8, 1], \"Swap with five elements\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nWrite a python function to interchange the first and last elements in a list.\nSample Input    Expected Output\nlist1 = [1,2,3,4,5]    list1 = [1,5,3,4,2]\nlist2 = [1,2,3,4,5]    list2 = [1,5,3,4,2]\nlist3 = [1,2,3,4,5]    list3 = [1,2,3,4,5]\nlist4 = [1,2,3,4,5]    list4 = [1,2,3,4,5]\nlist5 = []    list5 = []\nlist6 = []    list6 = []\nlist7 = []    list7 = []\nlist8 = []    list8 = []\nlist9 = [1,2,3,4,5]    list9 = [1,2,3,4,5]\nlist10 = [1,2,3,4,5]    list10 = [1,2,3,4,5]\nlist11 = []    []\nlist12 = []    []\nlist13 = []    []\nlist14 = []    []\nlist15 = []    []\n'''"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(0,0) == 1\nassert     binomial_Coeff(0,1) == 0\nassert     binomial_Coeff(1,0) == 1\nassert     binomial_Coeff(1,1) == 1\nassert     binomial_Coeff(2,0) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     binomial_Coeff(1,1)    ==    1\nassert     binomial_Coeff(2,2)    ==    2\nassert     binomial_Coeff(3,2)    ==    4\nassert     binomial_Coeff(4,2)    ==    10\nassert     binomial_Coeff(5,2)    ==    24\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     binomial_Coeff(8,1) == 8, 'your binomial_Coeff function is not correct'\nassert     binomial_Coeff(8,2) == 26, 'your binomial_Coeff function is not correct'\nassert     binomial_Coeff(8,3) == 243, 'your binomial_Coeff function is not correct'\nassert     binomial_Coeff(8,4) == 512, 'your binomial_Coeff function is not correct'\nassert     binomial_Coeff(8,5) == 765, 'your binomial_Coeff function is not correct'\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     binomial_Coeff(5,2) == 3+3+2+1+1+1+1\nassert     binomial_Coeff(10,2) == 10+8+6+4+4+4+3+3+2+1\nassert     binomial_Coeff(5,1) == 5+4+3+2+1\nassert     binomial_Coeff(10,1) == 10+8+6+4+3+2+1\nassert     binomial_Coeff(10,5) == sum([1]*5)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     binomial_Coeff(5,1)==0\nassert     binomial_Coeff(5,2)==6\nassert     binomial_Coeff(5,3)==12\nassert     binomial_Coeff(5,4)==20\nassert     binomial_Coeff(5,5)==30\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('check complete')"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(5,2) == 1\nassert     binomial_Coeff(6,2) == 5\nassert     binomial_Coeff(10,3) == 55\nassert     binomial_Coeff(20,4) == 2845\nassert     binomial_Coeff(30,5) == 284545\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(0,0) == 1\nassert     binomial_Coeff(0,1) == 0\nassert     binomial_Coeff(1,0) == 1\nassert     binomial_Coeff(1,1) == 1\nassert     binomial_Coeff(2,0) == 0\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip(\"192.168.0.10\") == \"192.168.0.10\"\nassert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\nassert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\nassert     removezero_ip(\"1.1.1.1\") == \"1.1.1.1\"\nassert     removezero_ip(\"0.0.0.1\") == \"0.0.0.1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('Example:')\n    print(removezero_ip('192.0.2.1'))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert removezero_ip('192.0.2.1') == '192.0.2.1'\n    assert removezero_ip('192.0.2.001') == '192.0.2.1'\n    "
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip(\"1.1.1.0\") == \"1.1.1.1\", \"1.1.1.0 should be the same as 1.1.1.1\"\nassert     removezero_ip(\"1.1.1.00001\") == \"1.1.1.1\", \"1.1.1.00001 should be the same as 1.1.1.1\"\nassert     removezero_ip(\"123456789.1.1.1\") == \"123456789.1.1.1\", \"123456789.1.1.1 should be the same as 123456789.1.1.1\"\nassert     removezero_ip(\"1.1.1.11\") == \"1.1.1.11\", \"1.1.1.11 should be the same as 1.1.1.11\"\nassert     removezero_ip(\"255.255.255.255\") == \"255.255.255.255\", \"255.255.255.255 should be the same as 255.255.255.255\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert removezero_ip('255.1.0.5') == '255.1.0.5'\nassert removezero_ip('0.0.0.0') == '0.0.0.0'\nassert removezero_ip('1.1.1.1') == '1.1.1.1'\nassert removezero_ip('1.0.0.0') == '1.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     removezero_ip('00-1-2-3-4-5') == '00-1-2-3-4-5','sample output'\nassert removezero_ip('00001.0.2.3.4.5') == '00001.0.2.3.4.5','sample output'\nassert removezero_ip('0.1.2.3.4.5') == '0.1.2.3.4.5','sample output'\nassert removezero_ip('1.2.3.4.5') == '1.2.3.4.5','sample output'\nassert removezero_ip('1.2.3.4') == '1.2.3.4','sample output'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     removezero_ip('0.0.1.0') == '0.0.1.0'\nassert     removezero_ip('0.0.0.1') == '0.0.0.1'\nassert     removezero_ip('0.1.0.0') == '0.1.0.0'\nassert     removezero_ip('0.0.1.0') == '0.0.1.0'\nassert     removezero_ip('1.2.3.4') == '1.2.3.4'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef addzero_ip(ip):\n    '''\n    Write a function to add leading zeros in an ip address.\n    '''\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3'\nassert     removezero_ip('000.1.2.3') == '000.1.2.3'\nassert     removezero_ip('0.01.2.3') == '0.01.2.3'\nassert     removezero_ip('0.1.2.0') == '0.1.2.0'\nassert     removezero_ip('0.1.2.1') == '0.1.2.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     removezero_ip(\"0.1.2.3\") == \"1.2.3\", \"Wrong\"\nassert     removezero_ip(\"0.011.2.3\") == \"1.2.3\", \"Wrong\"\nassert     removezero_ip(\"11.2.3\") == \"1.2.3\", \"Wrong\"\nassert     removezero_ip(\"11.002.3\") == \"1.2.3\", \"Wrong\"\nassert     removezero_ip(\"0.1.1.3\") == \"1.1.3\", \"Wrong\"\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     diff_even_odd([2, 4, 6, 8]) == 2\nassert     diff_even_odd([1, 3, 5]) == 3\nassert     diff_even_odd([1, 3, 5, 7, 9]) == 1\nassert     diff_even_odd([1, 4, 7, 9, 12, 15]) == 3\nassert     diff_even_odd([1, 2, 3, 5, 6]) == 2\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(diff_even_odd([1,2,3,4,5,6]))\nprint(diff_even_odd([1,2,3,4,5,6,7]))"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6,7,8,9,10]) ==     0, 'Wrong output'\nassert     diff_even_odd([9,12,6,20,2,11]) ==     15, 'Wrong output'\nassert     diff_even_odd([10,1,6,20,2,11]) ==     16, 'Wrong output'\n\n\n\ndef diff_even_odd_2(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Correctness of the solution: ')\nprint('Test Case 1: ', diff_even_odd([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\nprint('Test Case 2: ', diff_even_odd([1, 2, 3, 4, 5]))\nprint('Test Case 3: ', diff_even_odd([1, 3, 5]))\nprint('Test Case 4: ', diff_even_odd([10]))\nprint('Test Case 5: ', diff_even_odd([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\nprint('Test Case 6: ', diff_even_odd([1, 2, 3, 4, 5]))\nprint('Test Case 7: ', diff_even_odd([1, 3, 5]))\nprint('Test Case 8: ', diff_even_odd([10]))\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    diff_even_odd([1, 2, 3, 4, 5]) == 1\n    diff_even_odd([-1, -2, -3, -4, -5]) == 5\n    diff_even_odd([-1, -2, -3, -4, -5, -6]) == -7\n    diff_even_odd([-1, -2, -3, -4, -5, -6, -7]) == -9\n    diff_even_odd([1, 2, 3, 4, 5]) == 2\n    diff_even_odd([10, 11, 12, 13, 14, 15]) == 11\n    diff_even_odd([100, 101, 102, 103, 104]) == 102\n    diff_even_odd([100, 101, 102, 103, 104, 105]) == 102\n    diff_even_odd([100, 101, 102, 103, 104, 105, 106]) == 102\n    diff_even_odd([1, 1.1, 1.2, 1.3, 1.4]) == 0.1\n    diff_even_odd([10, 2, 30, 1.1, 9.2]) == 12.2\n    diff_even_odd([20, 19, 18, 17, 16, 15]) == 14\n    diff_even_odd([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 4\n    diff_even_odd([10, -2, 30, 1.1, 9.2]) == 17.2\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('\\ndiff_even_odd:')\nprint(diff_even_odd([1,2,3,4,5,6,7]))\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndiff_even_odd([2,3,4,7]) == 1\nassert \ndiff_even_odd([2,3,4,7,8]) == 1\nassert \ndiff_even_odd([2,3,4,7,8,9]) == 1\nassert \ndiff_even_odd([2,3,4,7,8,9,10]) == 1\nassert \ndiff_even_odd([2,3,4,7,8,9,10,11]) == 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndiff_even_odd([4, 3, 2]) == 2\nassert \ndiff_even_odd([3, 5, 2]) == 3\nassert \ndiff_even_odd([3, 1, 2]) == -1\nassert \ndiff_even_odd([3, 2, 5, 2, 1, 4]) == 2"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5]) == 3\nassert     diff_even_odd([3, 4, 5]) == 0\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\nassert diff_even_odd([10, 11, 12]) == 0\nassert     diff_even_odd([10, 11, 13]) == 1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Swaps('10110', '01101') == 5\nassert min_Swaps('11111', '01011') == 2"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nstr1=\"0110101\"\nstr2=\"0110100\"\n\nmin_Swaps(str1,str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Swaps(\"010101\",\"010101\") == 0\nassert     min_Swaps(\"010101\",\"010102\") == 1\nassert     min_Swaps(\"110001\",\"1010110\") == 3\nassert     min_Swaps(\"1111\",\"010101\") == 3\nassert     min_Swaps(\"1101\",\"1010110\") == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Swaps('10111','10101') == 1\nassert     min_Swaps('11111','11101') == 3\nassert     min_Swaps('111010101','111010110') == 6\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \n\ndef swap_pairs(str1):\n    '''\n    Write a python function to swap the odd and even bits in a binary number and return the new number.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert min_Swaps(\"001011\",\"101011\") == 2\n\ndef max_xor(str1,str2) : \n    '''\n    Write a python function to find the maximum number of XOR's that are used in the given bit string.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_Swaps(\"0101\",\"1010\") == 1\nassert     min_Swaps(\"0100\",\"1100\") == 1\nassert     min_Swaps(\"1010\",\"0101\") == 1\nassert     min_Swaps(\"1101\",\"0000\") == 1\nassert     min_Swaps(\"1010\",\"0101\") == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Swaps('110101','101010') ==     4, 'Should be 4'\nassert     min_Swaps('001100','000110') ==     5, 'Should be 5'\nassert     min_Swaps('110101','101011') ==     4, 'Should be 4'\nassert     min_Swaps('110101','110101') ==     0, 'Should be 0'\nassert     min_Swaps('110101','110110') ==     1, 'Should be 1'\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_size(()) == 0 \nassert     tuple_size((1,)) == 1 \nassert     tuple_size((1, 2, 3, 4, 5)) == 5 \nassert     tuple_size((1, 2, 3, 4, 5, 6)) == 7 \nassert     tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 10 \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_size( (1,) ) == 1\nassert     tuple_size( (1,1) ) == 2\nassert     tuple_size( (1,2,3) ) == 5\nassert     tuple_size( (1,2,3,4,5) ) == 10\nassert     tuple_size( (1,2,3,4,5,6,7,8,9) ) == 19\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_size((0,1)) == 1\nassert tuple_size((0,1,2)) == 3\nassert tuple_size((0,1,2,3,4,5,6,7,8,9)) == 21\nassert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == 71\nassert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,88"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_size((1, 'hello', 'world')) == 5\nassert     tuple_size(('hello', 'world')) == 5\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test code\n    assert tuple_size([(2,), (2, 3), (2, 3)]) == 12\n    assert tuple_size([(2,), (2, 3), (2, 3, 4)]) == 20\n    assert tuple_size([(2,), (2, 3), (2, 3, 4), (4,)]) == 20\n    "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_size((1,2,3,4,5,6)) == 13\nassert    tuple_size((1,2,3)) == 3\nassert    tuple_size((1,2,3,4)) == 4\nassert    tuple_size((1,2,3,4,5)) == 5\nassert    tuple_size((1,2,3,4,5,6,7)) == 7\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    tuple_list = []\n    tuple_list.append(\"apple\")\n    tuple_list.append(\"pear\")\n    tuple_list.append(\"orange\")\n    tuple_list.append(\"banana\")\n    tuple_list.append(\"grape\")\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n    print(tuple_list)\n    # The tuple_list is:\n    # ['apple', 'pear', 'orange', 'banana', 'grape']\n    print(\"The size of tuple_list in bytes is: {}\".format(sys.getsizeof(tuple_list)))\n    # The size of tuple_list in bytes is: 48\n    print(\"The tuple_list is:\")\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_size((\"a\",\"b\",\"c\",\"d\")) == 4\nassert tuple_size((\"\",\"\",\"\",\"\")) == 0\nassert tuple_size((\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\")) == 24\nassert tuple_size((\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\")) == 24\nassert tuple_size((\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\")) == 24\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_kth_recursive(arr1, arr2, k, low, high):\n    if low > high:\n        return -1\n    mid = low + (high-low)//2\n    if arr1[mid] == k:\n        return arr1[mid]\n    elif arr1[mid] < k:\n        return find_kth_recursive(arr1, arr2, k, mid+1, high)\n    else:\n        return find_kth_recursive(arr1, arr2, k, low, mid-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_kth([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18,19], 4) == 7\nassert     find_kth([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18,19], 8) == 10\nassert     find_kth([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18,19], 17) == 19\n\nprint(\"Congratulations! Your code passed all the tests\\n\")\n\n'''\nProblem 4:\nWrite a function that takes a sorted array of integers and an integer and returns the index of the corresponding \nelement in the array. If the element does not exist in the array, return -1.\n'''\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nfind_kth([1, 2, 3, 4], [2, 3, 5, 6], 3) == 4\nfind_kth([2, 5, 8, 9, 10], [1, 3, 4, 7], 3) == 4\nfind_kth([2, 5, 8, 9, 10], [1, 3, 4, 7], 4) == 6"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_kth([1,2,3,4,5],    [0,6,8,9],        2) == 1\nassert     find_kth([1,2,3,4,5,6,7,8],    [0,6,8,9],        4) == 4\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_kth([1,2,3,4,5], [2,3,4,5,6], 1) == 1\nassert     find_kth([1,2,3,4,5], [2,3,4,5,6], 0) == -1\nassert     find_kth([1,2,3,4,5], [2,3,4,5,6], 7) == 6\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_kth([1, 2], [3, 4], 2) == 2\nassert     find_kth([1, 2], [3, 4], 3) == -1\nassert     find_kth([3], [1, 2], 1) == 1\nassert     find_kth([], [1, 2], 1) == -1\nassert     find_kth([3], [], 0) == -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('test case 1:')\narr1 = [3, 2, 5, 1, 8, 5, 7]\narr2 = [0, 3, 4, 6, 9, 9, 9, 9, 9, 8]\nk = 2\nprint(find_kth(arr1, arr2, k))\nassert find_kth(arr1, arr2, k) == 2\nprint('')\n\nprint('test case 2:')\narr1 = [2, 1, 2, 1, 1, 2, 1, 2, 2, 2]\narr2 = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\nk = 1\nprint(find_kth(arr1, arr2, k))\nassert find_kth(arr1, arr2, k) == 2\nprint('')\n\nprint('test case 3:')\narr1 = [2, 1, 2, 1, 1, 2, 1, 2, 2, 2]\narr2 = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\nk = 2\nprint(find_kth(arr1, arr2, k))\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_kth([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], 6) == 7\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     armstrong_number(753) == False\nassert     armstrong_number(153) == True\nassert     armstrong_number(24) == True\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(num):\n    '''\n    Write a function that takes a positive integer and returns True if it is prime otherwise False.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     armstrong_number(3) == True, \"3 is not armstrong number\"\nassert     armstrong_number(104) == True, \"104 is not armstrong number\"\nassert     armstrong_number(0) == False, \"0 is armstrong number\"\nassert     armstrong_number(19) == False, \"19 is armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(153) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef test_armstrong_number():\n    assert armstrong_number(153) == True\n    assert armstrong_number(953) == False\n    assert armstrong_number(100) == False\n    assert armstrong_number(36) == False\n    "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nExpected output:\n    False\n    True\n'''"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_average(10) == (10, 10.0)\nassert     sum_average(100) == (100, 100.0)\nassert     sum_average(1000) == (1000, 1000.0)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint (\"correct\")\nprint (\"check\""
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(3) == sum_average(5) == 10\nassert     sum_average(4) == 11\nassert     sum_average(100) == 450"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_average(5) == 5.0, \"Should be 5.0\"\nassert     sum_average(5) == 5.0, \"Should be 5.0\"\nassert     sum_average(10) == 15.0, \"Should be 15.0\"\nassert     sum_average(100) == 200.0, \"Should be 200.0\"\nassert     sum_average(0) == 0.0, \"Should be 0.0\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_average(10) == sum(range(1, 11))/10\nassert     sum_average(8) == sum(range(1, 9))/8\nassert     sum_average(1) == sum(range(1, 2))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_average(1) == 1,     \"Wrong\"\nassert     sum_average(2) == 1.5,     \"Wrong\"\nassert     sum_average(10) == 10,     \"Wrong\"\nassert     sum_average(4) == 3,     \"Wrong\"\nassert     sum_average(100) == 50,     \"Wrong\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_average(5) == 5\nassert     sum_average(10) == 55\nassert     sum_average(0) == 0\nassert     sum_average(1) == 1\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_average(1) == 1, 'Error 1: function returns wrong value'\nassert sum_average(2) == 1, 'Error 2: function returns wrong value'\nassert sum_average(3) == 3, 'Error 3: function returns wrong value'\nassert sum_average(4) == 6, 'Error 4: function returns wrong value'\nassert sum_average(5) == 11, 'Error 5: function returns wrong value'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_average(5) == 10, 'WRONG!'\nassert     sum_average(12) == 22.5, 'WRONG!'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Even(1) == True, \"1 is not Even\"\nassert is_Even(2) == True, \"2 is Even\"\nassert is_Even(3) == False, \"3 is not even\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_Even(2) == True\nassert is_Even(2) == False\nassert is_Even(12) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_Even_2(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Even(2) == True\nassert     is_Even(4) == True\nassert     is_Even(9) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Even(1) == False, \"is_Even not returning the correct value\"\nassert     is_Even(2) == True, \"is_Even returning the wrong value\"\nassert     is_Even(3) == False, \"is_Even returning the wrong value\"\nassert     is_Even(4) == False, \"is_Even returning the wrong value\"\nassert     is_Even(5) == True, \"is_Even returning the wrong value\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_Even(1)\nassert not is_Even(3)\nassert is_Even(3)\nassert not is_Even(0)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Even(2) == True\nassert     is_Even(4) == False\nassert     is_Even(8) == True\nassert     is_Even(-2) == True\nassert     is_Even(-4) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Even(10) == False, \"This number is odd\"\nassert     is_Even(12) == True, \"This number is even\"\nassert     is_Even(13) == False, \"This number is odd\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Even(0) == True\nassert     is_Even(1) == False\nassert     is_Even(2) == True\nassert     is_Even(3) == False\nassert     is_Even(4) == False\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char('abcd') == -1, 'First repeated character should be -1.'\nassert     first_repeated_char('aaba') == -1, 'First repeated character should be -1.'\nassert     first_repeated_char('aabcd') == 1, 'First repeated character should be 1.'\nassert     first_repeated_char('aacdd') == 1, 'First repeated character should be 1.'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_repeated_char('A')    == 'A'\nassert     first_repeated_char('Aaba')    == 'A'\nassert     first_repeated_char('AaAaA')    == 'A'\nassert     first_repeated_char('AaBaBa')    == 'A'\nassert     first_repeated_char('B')    == 'B'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char(\"abcdefgh\") == \"d\", \"should return 'd' from 'abcdefgh'\"\nassert     first_repeated_char(\"abab\") == \"b\", \"should return 'b' from 'abab'\"\nassert     first_repeated_char(\"\") == \"\", \"should return an empty string if given an empty string\"\nassert     first_repeated_char(\"abc\") == \"\", \"should return an empty string if given a string that only has one character\"\nassert     first_repeated_char(\"aabb\") == \"\", \"should return an empty string if given a string that has two characters with the same value\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_repeated_char(\"abcabc\") == \"a\"\nassert     first_repeated_char(\"abcab\") == \"a\"\nassert     first_repeated_char(\"abcabcd\") == \"a\"\nassert     first_repeated_char(\"abcdabcd\") == \"a\"\nassert     first_repeated_char(\"abcd\") == \"a\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    first_repeated_char(\"aab\") == \"a\"\nassert first_repeated_char(\"aba\") == \"a\"\nassert first_repeated_char(\"abaab\") == \"a\"\nassert first_repeated_char(\"bababab\") == \"a\"\nassert first_repeated_char(\"abcabc\") == \"a\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('check the correctness of first_repeated_char')\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_repeated_char('') == '', 'Expected \"\":'\nassert     first_repeated_char('abc') == '', 'Expected \"\":'\nassert     first_repeated_char('b') == 'a', 'Expected \"a\":'\nassert     first_repeated_char('cabcabc') == 'a', 'Expected \"a\":'\nassert     first_repeated_char('cabc') == 'a', 'Expected \"a\":'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char(\"hello\") == 'e', 'Sample test 1 failed'\nassert     first_repeated_char(\"ab\") == '', 'Sample test 2 failed'\nassert     first_repeated_char(\"abab\") == 'a', 'Sample test 3 failed'\nassert     first_repeated_char(\"aabbbba\") == 'a', 'Sample test 4 failed'\nassert     first_repeated_char(\"aabbbba\") == 'a', 'Sample test 5 failed'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char(\"aaaabaaaaaaccc\") == \"a\"\nassert     first_repeated_char(\"aaaabaaaaaacccdd\") == \"a\"\nassert     first_repeated_char(\"abc\") == \"a\"\nassert     first_repeated_char(\"aabcd\") == \"a\"\nassert     first_repeated_char(\"abcdef\") == \"a\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char('aaaaaaaaaa') == 'a'\nassert     first_repeated_char('aaaaaaaaaaaa') == 'a'\nassert     first_repeated_char('aaaaaaaaaaaaaaa') == 'a'\nassert     first_repeated_char('aaaaaaaaaaaaaaaaaaaa') == 'a'\nassert     first_repeated_char('aaaaaaaaaaaaaaaaaaaaa') == 'a'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_ludic(15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15], get_ludic(15)\nassert     get_ludic(45) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15], get_ludic(45)\nassert     get_ludic(55) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15], get_ludic(55)\nassert     get_ludic(80) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15], get_ludic(80)\nassert     get_ludic(55) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15], get_ludic(55)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_ludic(5) == [1,2,3,4,5]\nassert     get_ludic(7) == [1,2,3,4,5,6,7]\nassert     get_ludic(100) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\nassert     get_ludic(10000) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_ludic(10) ==    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"Wrong return value!\"\nassert     get_ludic(2) ==    [1, 2], \"Wrong return value!\"\nassert     get_ludic(3) ==    [1, 2, 3], \"Wrong return value!\"\nassert     get_ludic(11) ==    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \"Wrong return value!\"\nassert     get_ludic(10) ==    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"Wrong return value!\"\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_ludic(11) == [9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,93"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(12) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]\nassert     get_ludic(13) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]\nassert     get_ludic(19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]\nassert     get_ludic(15) == []\nassert     get_ludic(0) == []\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_ludic(4) == {1,2,3,4}\nassert     get_ludic(5) == {1,2,3,4,5}\nassert     get_ludic(6) == {1,2,3,4,5,6}\n\ndef count_good_words(n, threshold):\n    '''\n    Write a function that counts how many words contain at least 'threshold' letters, and returns the total of all occurrences.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_ludic(1) == []\nassert     get_ludic(2) == []\nassert     get_ludic(3) == [1, 2]\nassert     get_ludic(4) == [2]\nassert     get_ludic(5) == [1, 2, 4]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_ludic(3) == 2\nassert     get_ludic(5) == 3\nassert     get_ludic(6) == 4\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(0) == []\nassert     get_ludic(2) == [2]\nassert     get_ludic(3) == []\nassert     get_ludic(8) == [8]\nassert     get_ludic(10) == []\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_ludic(100) == [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_words(\"Programming is fun\") == \"fun is Programming\"\nassert reverse_words(\"This is a test\") == \"test is a This\"\nassert reverse_words(\"a\") == \"a\"\nassert reverse_words(\"\") == \"\"\nassert reverse_words(\"Programmer\") == \"rogrammer\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_words('how are you') == 'you are how'\nassert     reverse_words('This is great') == 'great This is'\nassert     reverse_words('This is not a test') == 'test This is'\nassert     reverse_words('reanna here she is') == 'here she reanna'\nassert     reverse_words('functions are cool') == 'cool functions are'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nreverse_words(\"  hello    world\") == \"world   hello\", \"Should reverse the words\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_words(\"how are you\") == \"you are how\"\nassert     reverse_words(\"test to tes\") == \"tes to test\"\nassert     reverse_words(\"test to tes\") == \"tes to test\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"test\") == \"test\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_words(\"        \") == \"        \", \"not correct\"\nassert reverse_words(\"\") == \"\", \"not correct\"\nassert reverse_words(\"hello\") == \"olleh\", \"not correct\"\nassert reverse_words(\"hello world\") == \"dlrow olleh\", \"not correct\"\nassert reverse_words(\"hello world and goodbye\") == \"dlrow olleh and goodbye\", \"not correct\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nreverse_words('hello world') == 'world olleh'\nassert reverse_words('h e l l o') == 'o ll oh'\nassert reverse_words('A man, a plan, a canal: Panama') == 'amaanalpanamaplana'\nassert reverse_words('1234') == '4321'\nassert reverse_words('a') == 'a'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_words(\"some random words\") == \"dscmwrnoyl\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"a\") == \"a\"\nassert     reverse_words(\"A\") == \"A\"\nassert     reverse_words(\"The quick brown fox jumps over the lazy dog.\") == \"ehTkbnuoS iqjm prarwy ouy trhx fxow mnkyv\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_words(\"The quick brown fox jumps over the lazy dog\") == \"ehT kciuq nworb uoyp fxoj molk dex og lezy dog\"\nassert     reverse_words(\"a man a plan a canal panama\") == \"ama man panama canal panama\"\nassert     reverse_words(\"Bob Dylan\") == \"Bob Dylan\"\nassert     reverse_words(\"HackerRank.com\") == \".com Hackerrank\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(5) == True\nassert     prime_num(8) == True\nassert     prime_num(11) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prime_num(2) == True\nassert     prime_num(8) == True\nassert     prime_num(23) == False\nassert     prime_num(12) == True\n\ndef is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n\n'''\nIn the next class we will discuss about the function which returns the prime numbers in the given range.\n'''\n\ndef prime_num_range(start, end):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prime_num(3) == True\nassert prime_num(2) == False\nassert prime_num(1) == False\nassert prime_num(2) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prime_num(2)    ==    True\nassert     prime_num(7)    ==    True\nassert     prime_num(8)    ==    False\nassert     prime_num(11)    ==    False\nassert     prime_num(12)    ==    True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_num(2)    == True, '1 is not a prime number'\nassert     prime_num(3)    == True, '2 is not a prime number'\nassert     prime_num(4)    == False, '2 is not a prime number'\nassert     prime_num(5)    == True, '5 is not a prime number'\nassert     prime_num(6)    == True, '6 is not a prime number'\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef prime_num_list(num):\n    '''\n    Write a function to get all the prime numbers that are less than the given integer.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('All tests were passed.')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('TEST 10: pass')\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     radian_degree(100) == math.pi / 2\nassert     radian_degree(100.5) == 0.9458911180898438\nassert     radian_degree(10) == 5 * math.pi / 180\nassert     radian_degree(11.2) == math.pi / 2 + 0.17453292520996\nassert     radian_degree(120) == math.pi / 2 + math.pi / 2\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_angle_of_a_point_to_a_line_from_the_origin(point_A, point_B):\n    '''\n    Write a function that takes two points (represented as tuples of length 2) and returns\n    the angle of the line that connects these two points (in radians) from the origin.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     radian_degree(0) == 0\nassert     radian_degree(45) == math.pi/4\nassert     radian_degree(90) == math.pi/2\nassert     radian_degree(135) == math.pi*3/2\nassert     radian_degree(180) == math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     radian_degree(30) == 0.3000001729997925\nassert     radian_degree(180) == 3.141592653589793\nassert     radian_degree(0) == 0\nassert     radian_degree(360) == 1\n\ndef sin_cos(a):\n    '''\n    Write a function to compute the sine and cosine of an angle.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert radian_degree(30) == math.pi/6\nassert radian_degree(60) == math.pi/3\nassert radian_degree(90) == math.pi/2"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef radian_degree_h(degree):\n    '''\n    Write a function to convert degrees in hours to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     radian_degree(45) == math.radians(45)\nassert     radian_degree(-45) == math.radians(-45)\nassert     radian_degree(0) == math.radians(0)\nassert     radian_degree(180) == math.radians(180)\nassert     radian_degree(-180) == math.radians(-180)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     radian_degree(math.pi/2) ==     1.5707963267948966\nassert     radian_degree(math.pi/4) ==     1.25\nassert     radian_degree(math.pi/6) ==     2.2222222222222223\nassert     radian_degree(math.pi/8) ==     2.3055555555555556\nassert     radian_degree(math.pi/10) ==     3.141592653589793\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    radian_degree(0) == 0\n    radian_degree(180) == math.pi\n    radian_degree(360) == 2 * math.pi\n    radian_degree(-180) == -math.pi\n    radian_degree(360) == math.pi\n    radian_degree(360) == radian_degree(-360)\n    radian_degree(0) == math.pi / 2\n    radian_degree(360) == -math.pi / 2\n    radian_degree(360) == math.pi / 2\ndef euler_angles_to_rotation_matrix(theta):\n    '''\n    Write a function to convert euler angles to a rotation matrix.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_literals(\"\", \"\") == (None, None, None)\nassert find_literals(\"\", \"a\") == (None, 0, 0)\nassert find_literals(\"\", \"aaa\") == (None, None, None)\nassert find_literals(\"a\", \"aaa\") == (None, 0, 0)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_literals('','') == (None, None, None)\nassert     find_literals('','.') == (None, None, None)\nassert     find_literals('','a') == (None, None, None)\nassert     find_literals('','ab') == (None, None, None)\nassert     find_literals('a','') == (None, None, None)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_literals(\"Hello, World!\", r'[Hh]ello') == ('Hello', 0, 6)\nassert find_literals(\"How are you?\", r'[ou]r') == ('how', 8, 13)\nassert find_literals(\"1a1b1c1d1e1f\", r'[a-z]') == ('1a', 0, 8)\nassert find_literals(\" \", r'[^ ]') == (' ', 0, 1)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_literals('regex_sum_1117', '(1+)(?=1)*') == (2, 10, 10)\nassert     find_literals('regex_sum_1117', '1+') == (0, 1, 2)\nassert     find_literals('regex_sum_1117', '(1+)') == (0, 0, 2)\nassert     find_literals('regex_sum_1117', '((1))') == (0, 0, 2)\nassert     find_literals('regex_sum_1117', '((1))') == (0, 0, 2)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_literals('supercalifragilisticexpialidocious', 'x') == ('ex', 6, 14)\nassert find_literals('supercalifragilisticexpialidocious', 'x') == ('ex', 6, 14)\nassert     find_literals('supercalifragilisticexpialidocious', 'u') == ('uo', 6, 15)\nassert find_literals('supercalifragilisticexpialidocious', 'x') == ('ex', 6, 14)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_literals('Some text', '.') == (0, 14)\nassert     find_literals('Some text', ',') == (7, 10)\nassert     find_literals('Some text','re') == (0, 10)\nassert     find_literals('Some text','me') == (0, 10)\nassert     find_literals('Some text', 'o') == (0, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals('abcd', 'b') == ('b', 0, 1)\nassert     find_literals('abcd', 'cd') == ('cd', 3, 4)\nassert     find_literals('abcd', 'ab') == ('ab', 0, 1)\n\ndef find_matches(text, pattern, max_k = 0):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the number of matching strings.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_literals(\"flower\", \"^fl[e|r]\") == 'fl', \"Wrong \"\nassert     find_literals(\"flower\", \"^fl[e|r]$\") == 'fl', \"Wrong \"\nassert     find_literals(\"flower\", \"^fl[e|r]$\") == 'fl', \"Wrong \"\nassert     find_literals(\"flowers\", \"^fl[e|r]$\") == '', \"Wrong \"\nassert     find_literals(\"flower\", \"^fl[e|r]\") == '', \"Wrong \"\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_literals('some text','some') == (2, 4)\nfind_literals('some text','some$') == (2, 5)\nfind_literals('some text','some.*') == (2, 6)\nfind_literals('some text','some.*$') == (2, 7)\nfind_literals('some text', '*') == (0, 0)\nfind_literals('some text', '$') == (4, 5)\n\ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the number of times a substring is repeated in a string.\n    The function should return the count.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 3\nassert     bell_Number(4) == 7\nassert     bell_Number(5) == 13\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef hello_name(name): \n    '''\n    Write a python function to return hello_name of any name\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 4\nassert     bell_Number(4) == 7\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_Number(1) == 1, \"bell_Number should return 1 for bell_Number(1).\"\nassert     bell_Number(2) == 2, \"bell_Number should return 2 for bell_Number(2).\"\nassert     bell_Number(3) == 3, \"bell_Number should return 3 for bell_Number(3).\"\nassert     bell_Number(5) == 8, \"bell_Number should return 8 for bell_Number(5).\"\nassert     bell_Number(20) == 52409330, \"bell_Number should return 52409330 for bell_Number(20).\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_Number(0) == 0\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 3\nassert     bell_Number(4) == 5\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 5\nassert     bell_Number(4) == 15\nassert     bell_Number(5) == 42\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef fibonacci(n): \n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 4) == [1,2,3,5,6], 'Not working properly'\nassert     remove_kth_element([1,2,3,4,5,6], 0) == [1,2,3,4,5], 'Not working properly'\nassert     remove_kth_element([1,2,3,4,5,6], 6) == [1,2,3,4,5], 'Not working properly'\nassert     remove_kth_element([1,2,3,4,5,6], 5) == [1,2,3,4], 'Not working properly'\nassert     remove_kth_element([1,2,3,4,5,6], 3) == [1,2,3,5], 'Not working properly'\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 3, 5], \"Should return [1, 2, 3]\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5], \"Should return [1, 2, 3, 4]\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5], \"Should return [1, 2, 3, 4, 5]\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5], \"Should return [1, 2, 4, 5]\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5], \"Should return [1, 2, 3, 4, 5]\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_kth_element(['a', 'b', 'c', 'd', 'e'], 3) == ['a', 'b', 'c', 'd']\nassert     remove_kth_element(['a', 'b', 'c', 'd', 'e'], 1) == ['a', 'b', 'c', 'd']\nassert     remove_kth_element(['a', 'b', 'c', 'd', 'e'], 0) == ['a', 'b', 'c', 'd']\nassert     remove_kth_element(['a', 'b', 'c', 'd', 'e'], 5) == ['a', 'b', 'c', 'd']\nassert     remove_kth_element(['a', 'b', 'c', 'd', 'e'], -1) == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7], 4) == (1,2,3,5,6,7)\nassert     remove_kth_element([1,2,3,4,5,6,7], 0) == (1,2,3,4,5,6,7)\nassert     remove_kth_element([1,2,3,4,5,6,7], 7) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6],1) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6],3) == [1,2,3,4]\nassert     remove_kth_element([1,2,3,4,5,6],4) == [1,2,3,4]\nassert     remove_kth_element([1,2,3,4,5,6],5) == [1,2,3,4]\nassert     remove_kth_element([1,2,3,4,5,6],6) == [1,2,3,4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 3) == [1,2,4,5], 'Fail'\nassert     remove_kth_element([1,2,3,4,5], 1) == [1,2,3,4,5], 'Fail'\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4], 'Fail'\nassert     remove_kth_element([1,2,3,4,5], 6) == [1,2,3,4], 'Fail'\n\nprint('All test cases passed'"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3,5], \"Fail\"\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], 0) == [1,2,3,4,5,6,7,8,9], \"Fail\"\nassert     remove_kth_element([1,2,3,4,5], 2) == [1,3,4,5], \"Fail\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([1, 2, 3], 0) == [1, 2, 3]\nassert     remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]\nassert     remove_kth_element([1, 2, 3], 0) == [1, 2, 3]\nassert     remove_kth_element([1, 2, 3], 1) == [1, 2, 3]\nassert     remove_kth_element([1, 2, 3], 2) == [1, 2, 3]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 5) == [1,2,3,4,6]\nassert     remove_kth_element([1,2,3,4,5,6], 0) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6], 10) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5,6], 6) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 1) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6], 2) == [1,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6], 5) == [1,2,3,4,6]\nassert     remove_kth_element([1,2,3,4,5,6], 6) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5,6], 7) == [1,2,3,4,5]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_of_nth([[1, 2], [3, 4], [5, 6]], 0) == 1\nassert     max_of_nth([[1, 2], [3, 4], [5, 6]], 1) == 2\nassert     max_of_nth([[1, 2], [3, 4], [5, 6]], 2) == 6\nassert     max_of_nth([[1, 2], [3, 4], [5, 6]], 3) == 6\nassert     max_of_nth([[1, 2], [3, 4], [5, 6]], 4) == 6\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9]], 0) == [1,2,3]\nassert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9]], 1) == [4,5,6]\nassert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9]], 2) == [7,8,9]\nassert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9]], 3) == []"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_of_nth([[2, 5, 3], \n                    [6, 4, 7], \n                    [8, 9, 0]], 1) == 7\nassert max_of_nth([[2, 5, 3], \n                    [6, 4, 7], \n                    [8, 9, 0]], 2) == 5\nassert max_of_nth([[2, 5, 3], \n                    [6, 4, 7], \n                    [8, 9, 0]], 3) == 3\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_of_nth([\n    [2, 3, 4],\n    [6, 7, 8],\n    [9, 1, 2],\n    [0, 2, 1]\n], 2) == 8, 'Wrong max'\nassert     max_of_nth([\n    [2, 3, 4],\n    [6, 7, 8],\n    [9, 1, 2],\n    [0, 2, 1]\n], 3) == 9, 'Wrong max'\nassert     max_of_nth([\n    [2, 3, 4],\n    [6, 7, 8],\n    [9, 1, 2],\n    [0, 2, 1]\n], 4) == 2, 'Wrong max'\nassert     max_of_nth([\n    [2, 3, 4],\n    [6, 7, 8],\n    [9, 1, 2],\n    [0, 2, 1]\n], 5) == 3, 'Wrong max'\nassert     max_of_nth([\n    [2, 3, 4],\n    [6, 7, 8],\n    [9, 1, 2],\n    [0, 2, 1]\n], 6) == 2, 'Wrong max'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_of_nth([[1, 2], [3, 4], [5, 6]], 0) == 1\nassert     max_of_nth([[1, 2], [3, 4], [5, 6]], 1) == 6\nassert     max_of_nth([[1, 2], [3, 4], [5, 6]], 2) == 6\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 1\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 9\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     merge([[1],[2],[3]]) == [[1],[2],[3]]\nassert     merge([[1],[2],[3],[4]]) == [[1],[2],[3],[4]]\nassert     merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert     merge([[1,2],[3],[4],[5,6,7]]) == [[1,2],[3,4],[5,6,7]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge([[1,2], [3,4], [4,5]]) == [[1, 2], [3, 4], [4, 5]]\nassert merge([[1,2], [3,4]]) == [[1, 2], [3, 4]]\nassert     merge([[1], [3,4]]) == [[1], [3, 4]]\nassert     merge([[1,2], [3], [4,5]]) == [[1, 2], [3], [4, 5]]\nassert     merge([[1,2], []]) == [[1, 2], []]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"\\n**** Merge List of Lists in Python ****\")\nprint('a = ', a)\nprint('merge(a) = ', merge(a))"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert     merge([[1,2],[3,4],[5,6],[7,8]]) == [[1,2],[3,4],[5,6],[7,8]]\nassert     merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert     merge([[1],[2]]) == [[1],[2]]\nassert     merge([[1],[2],[3]]) == [[1],[2],[3]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]\nassert merge([[4, 1], [5, 2]]) == [[4, 5], [1, 2]]\nassert merge([[7, 8], [9, 1], [2, 3]]) == [[7, 2], [9, 1], [8, 3]]\nassert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert merge([[1,2],[3,4],[5,6],[7,8]]) == [[1,2],[3,4],[5,6],[7,8]]\nassert merge([[1],[2],[3],[4],[5]]) == [[1],[2],[3],[4],[5]]\nassert merge([[1,2],[2,3],[3,4],[4,5]]) == [[1,2],[2,3],[3,4],[4,5]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1], [2], [3]]) == [[1], [2], [3]]\nassert     merge([[1], [2], [3, 4, 5, 6]]) == [[1], [2], [3, 4, 5, 6]]\nassert     merge([[1, 2], [3, 4, 5, 6]]) == [[1, 2], [3, 4, 5, 6]]"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge([[2, 4], [5, 6]]) == [[2, 4], [5, 6]], \"Should be [[2, 4], [5, 6]]\"\nassert     merge([[1], [2, 3], [4, 5], [6]]) == [[1, 2, 3, 4, 5, 6]], \"Should be [[1, 2, 3, 4, 5, 6]]\"\nassert     merge([[1], [2, 3], [4, 5], []]) == [[1, 2, 3, 4, 5], []], \"Should be [[1, 2, 3, 4, 5], []]\"\nassert     merge([[]]) == [[]], \"Should be [[]]\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmerge([[1, 2],\n       [3, 4]]) == [[1, 2],\n                     [3, 4]]\nassert \nmerge([[5, 6],\n       [7, 8]]) == [[5, 6],\n                     [7, 8]]\nassert \nmerge([[1, 3],\n       [4, 5]]) == [[1, 3],\n                     [4, 5]]\nassert \nmerge([[2, 4],\n       [6, 8]]) == [[2, 4],\n                     [6, 8]]\nassert \nmerge([[2, 4],\n       [5, 7]]) == [[2, 4],\n                     [5, 7]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nmerge([[1, 2], [4, 5], [9, 10]]) == [[1, 2], [4, 5], [9, 10]]\nassert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n\nmerge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n\nmerge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cummulative_sum((1,2,3,4,5)) == (1,2,3,4,5,6,7,8,9,10)\nassert     cummulative_sum((1,2,3,4)) == (1,2,3,4,4)\nassert     cummulative_sum((1,)) == (1)\n\ndef cumulative_sum_using_lists(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum(tuple_of_nums) == sum(tuple_of_nums), f\"your answer: {cummulative_sum(tuple_of_nums)}, it should be {sum(tuple_of_nums)}\"\nassert     cummulative_sum(tuple_of_nums2) == sum(tuple_of_nums2), f\"your answer: {cummulative_sum(tuple_of_nums2)}, it should be {sum(tuple_of_nums2)}\"\nassert     cummulative_sum(tuple_of_nums3) == sum(tuple_of_nums3), f\"your answer: {cummulative_sum(tuple_of_nums3)}, it should be {sum(tuple_of_nums3)}\"\nassert     cummulative_sum(tuple_of_nums4) == sum(tuple_of_nums4), f\"your answer: {cummulative_sum(tuple_of_nums4)}, it should be {sum(tuple_of_nums4)}\""
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cummulative_sum([10,20,30,40]) == [10,30,60,100]\nassert cummulative_sum([-2, -3, 4, -1, -2, 0]) == [-2, -1, 0, 2, 4, 6]\nassert cummulative_sum([3,2,1]) == [3,2,1]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncummulative_sum(test_list) ==  [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cummulative_sum((1,2,3,4)) == 10, \"You are returning the incorrect value\"\nassert     cummulative_sum((1,2)) == 2, \"You are returning the incorrect value\"\nassert     cummulative_sum((1,2,3,4,5)) == 15, \"You are returning the incorrect value\"\nassert     cummulative_sum((1,2,3)) == 6, \"You are returning the incorrect value\"\nassert     cummulative_sum((1,2,3,4,5,6)) == 15, \"You are returning the incorrect value\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cummulative_sum([1,2,3,4]) == (1, 3, 6, 10), 'WRONG'\nassert     cummulative_sum([1,2,3,4,5]) == (1, 3, 6, 10, 15), 'WRONG'\nassert     cummulative_sum([]) == (), 'WRONG'\nassert     cummulative_sum([1]) == (1, 1), 'WRONG'\nassert     cummulative_sum([1,2]) == (1, 3), 'WRONG'\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cummulative_sum([1,2,3]) ==     6, 'Wrong'\nassert     cummulative_sum([1,5,7]) ==     13, 'Wrong'\nassert     cummulative_sum([4,5,6]) ==     30, 'Wrong'\nassert     cummulative_sum([4,5,6,7,8]) ==     64, 'Wrong'\nassert     cummulative_sum([1,2,3,4]) ==     10, 'Wrong'\nprint('All tests passed!')\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_occurrences(nums):\n    '''\n    Write a function which returns a dictionary of the count of the number of elements occuring in the original \n    input tuple of tuples, when the count of the elements occuring in a particular tuple is greater than 1.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     average_tuple([(1,2,3),(2,3,4),(3,4,5)]) == (2.5, 3.5, 4.5)\nassert     average_tuple([(2,3),(4,5),(6,7)]) == (3.0, 4.0)\nassert     average_tuple([(2,3,4),(5,6,7),(8,9,10)]) == (3.0, 4.0, 5.0)\nassert     average_tuple([(10,10,10),(2,3,4),(1,0,0)]) == (2.0, 2.0, 2.0)\n\n\ndef get_item(lst, pos):\n    '''\n    Write a function which takes a list and an index and returns the value at that index.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     average_tuple( ( (1, 2), (1, 2, 3), (4, 5, 6) ) ) == [(1, 2, 3.0), (4, 5, 6.0)]\n\nassert     average_tuple( ( (3,), (1, 2, 3), (4, 5, 6) ) ) == [(3.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0)]\nassert     average_tuple( ( (3, 4), (1, 2, 3), (4, 5, 6) ) ) == [(3.0, 4.0, 3.0, 5.0, 6.0)]\nassert     average_tuple( ( (3,), (1,), (2, 2, 2) ) ) == [(3.0, 1.0, 2.0, 2.0)]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert average_tuple((((1, 2, 3), (5, 6, 7))) == [1.5, 5.5, 7.0] ), 'average_tuple((((1, 2, 3), (5, 6, 7))) == [1.5, 5.5, 7.0] )'\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\naverage_tuple([(1,2,3),(4,5,6),(7,8,9)]) == [2.2, 4.4, 6.6]\naverage_tuple([(1,2,3),(4,5,6),(7,8,9)]) == [2.2, 4.4, 6.6]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     average_tuple(((1, 2, 3), (2, 3, 4))) == (2, 3, 4)\nassert     average_tuple(((1, 2, 3), (4, 2, 1))) == (2, 3, 4)\nassert     average_tuple(((5, 6, 7), (2, 3, 4))) == (3, 4, 5)\nassert     average_tuple(((1, 2, 3), (1, 2, 3))) == (2, 2, 3)\nassert     average_tuple(((1, 2), (1, 2, 3, 4))) == (2, 3, 4)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     average_tuple(\n        (\n            (1, 2, 3, 4),\n            (1, 2, 3, 4),\n            (1, 2, 3, 4),\n            (1, 2, 3, 4)\n        )\n    ) ==     [2.0, 2.0, 2.0, 2.0]\nassert     average_tuple(\n        (\n            (1, 2, 3, 4),\n            (1, 2, 3, 4),\n            (1, 2, 3, 4),\n            (1, 2, 3, 4)\n        )\n    ) ==     [1.5, 1.5, 1.5, 1.5]\nassert     average_tuple(\n        (\n            (1, 2),\n            (1, 2),\n            (1, 2),\n            (1, 2)\n        )\n    ) ==     [1.5, 1.5]\nassert     average_tuple(\n        (\n            (1, 2),\n            (1, 2),\n            (1, 2),\n            (1, 2)\n        )\n    ) ==     [1.5, 1.5]\nassert     average_tuple(\n        (\n            (1, 2, 3, 4),\n            (1, 2, 3, 4),\n            (1, 2, 3, 4),\n            (1, 2, 3, 4)\n        )\n    ) ==     [2.0, 2.0, 2.0, 2.0]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     average_tuple((1, 2, 3)) == (1.5, 2.5, 3.5)\nassert     average_tuple(((1, 2, 3), (4, 5, 6))) == ((1.5, 2.5, 3.5), (4.5, 5.5, 6.5))\nassert     average_tuple(()) == ()\nassert average_tuple((1, 2, 3)) == (1.0, 2.0, 3.0)\nassert average_tuple((1, 2, 3, 4)) == (1.0, 2.0, 3.0, 4.0)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef filter_tuple(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples and returns True if the elements are not same in the tuple, else returns False.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo((1,2,3), (5,6,7)) == (1,2,3)\nassert     tuple_modulo((2,3,4), (5,6,7)) == (0,0,0)\nassert     tuple_modulo((4,6,8), (5,6,7)) == (0,0,0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo((1, 2), (3, 4)) == (1, 2)\nassert     tuple_modulo((1, 2), (3, 5)) == (0, 1)\nassert     tuple_modulo((1, 2), (1, 1)) == (0, 0)\nassert     tuple_modulo((1, 2), (2, 1)) == (1, 1)\nassert     tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo( (1, 2, 3, 4), (3, 4, 5, 6) ) == (1, 1, 1, 0)\nassert     tuple_modulo( (1, 2, 3, 4), (3, 4, -5, 6) ) == (1, 1, -1, 0)\nassert     tuple_modulo( (1, 2, 3, 4), (3, -4, 5, 6) ) == (1, 1, -1, 0)\nassert     tuple_modulo( (1, 2, 3, 4), (3, 4, -5, 6, 7) ) == (1, 1, 1, 0)\nassert     tuple_modulo( (1, 2, 3, 4), (0, 0, 0, 0) ) == (1, 2, 3, 4)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_modulo((10, 8, 3, 5, 6, 7, 2, 1), (5, 9, 8, 8, 3, 4, 3, 1)) == (5, 9, 8, 2, 1, 8, 2, 1)\nprint(\"\\nCorrect!\\n\")\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo((1,2,3,4,5,6), (1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     tuple_modulo((1,2,3,4,5,6), (1,2,3,4,5,7)) == (1,0,0,0,0,7)\nassert     tuple_modulo((1,2,3,4,5,6), (1,2,3,4,5,6,7)) == (1,2,3,0,0,7)\nassert     tuple_modulo((1,2,3,4,5,6), (1,2,3,4,5,6,7,8)) == (1,0,0,0,0,8)\nassert     tuple_modulo((1,2,3,4,5,6), (1,2,3,4,5,6,7,8,9)) == (1,2,3,0,0,8)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_modulo((2,3), (1,2)) == (1,1)\nassert     tuple_modulo((0,0), (0,0)) == (0,0)\nassert     tuple_modulo((0,1), (0,0)) == (0,0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef tuple_modulo_2(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Jumps(2, (5, 3)) == 2\nassert     min_Jumps(3, (2, 2)) == 2\nassert     min_Jumps(4, (2, 2)) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Jumps(4, 1, 2) == 4\nassert     min_Jumps(2, 1, 2) == 1\nassert     min_Jumps(1, 1, 2) == 1\nassert     min_Jumps(1, 2, 2) == 1\nassert     min_Jumps(3, 1, 2) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Jumps(3, (0,0)) == 3\nassert     min_Jumps(4, (0,0)) == 4\nassert     min_Jumps(1, (1,0)) == 0\nassert     min_Jumps(5, (1,0)) == 2\nassert     min_Jumps(4, (0,0)) == 4\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(2, (1,0)) == 2\nassert     min_Jumps(1, (0,1)) == 1\nassert     min_Jumps(2, (1,2)) == 3\nassert     min_Jumps(3, (2,1)) == 4\nassert     min_Jumps(2, (2,2)) == 4\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Jumps(10, 2) == 2\nassert     min_Jumps(10, 3) == 3\nassert     min_Jumps(10, 4) == 5\nassert     min_Jumps(10, 5) == 7\nassert     min_Jumps(10, 6) == 9\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert min_Jumps(3, 1) == 2\nassert min_Jumps(1, 1) == 1\nassert min_Jumps(4, 1) == 3\nassert min_Jumps(7, 1) == 4\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Jumps(steps=[1,1,1,1,1], d=2) == 2\nassert     min_Jumps(steps=[3,3,1,1,2], d=1) == 4\nassert     min_Jumps(steps=[2,3,1,1,2], d=2) == 2\nassert     min_Jumps(steps=[3,2,1,1,2], d=1) == 4\nassert     min_Jumps(steps=[4,5,3,3,4], d=4) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Jumps(3, 3) == 2\nassert     min_Jumps(5, 2) == 3\nassert     min_Jumps(9, 5) == 7\nassert     min_Jumps(4, 4) == 1\nassert     min_Jumps(7, 1) == 0\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndiv_list([1,2,3,4], [1,2,3]) == [[1, 1], [2, 2], [3, 3], [4, 4]]\nassert \ndiv_list([1,2,3,4], [0,2,3]) == [[1, 2], [2, 3], [3, 4], [4, 0]]\nassert \ndiv_list([1,2,3,4], [2,0,3]) == [[1, 2], [2, 0], [3, 3], [4, 4]]\nassert \ndiv_list([1,2,3,4], [2,3,0]) == [[1, 2], [2, 3], [3, 0], [4, 4]]\nassert \ndiv_list([1,2,3,4], [2,0,3,0]) == [[1, 2], [2, 0], [3, 3], [0, 0]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef append_list(list_1, list_2):\n    '''\n    Write a function to add all the elements of list_2 to list_1.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     div_list([1,2,3],[4,5,6])==[0.75,0.5,0.5], div_list([1,2,3],[4,5,6])\nassert div_list([1,2,3,4],[1,2,3,4])==[0.25,0.5,0.5,0.75], div_list([1,2,3,4],[1,2,3,4])\nassert div_list([1,2,3,4,5],[1,2,3,4,5])==[0.25,0.5,0.5,0.75,1.0], div_list([1,2,3,4,5],[1,2,3,4,5])\nassert div_list([1,2,3,4,5],[1,2,3,4,5])==[0.25,0.5,0.5,0.75,1.0], div_list([1,2,3,4,5],[1,2,3,4,5])\nassert div_list([1,2,3,4,5,6],[1,2,3,4,5,6])==[0.25,0.5,0.5,0.75,1.0,1.0], div_list([1,2,3,4,5,6],[1,2,3,4,5,6])\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     div_list([1,2,3,4],[1,2,3,4]) ==     [1,2,3,4]\nassert     div_list([4,5,6],[4,2,3]) ==     [4,2,3]\nassert     div_list([4,5,6],[1,2,3]) ==     [4,2,3]\nassert     div_list([1,2],[1,2,3]) ==     [1,2,1]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nimport random\ndef generate_list(n):\n    '''\n    generates a random list of n elements\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_num('1e123') == '123e1'\nassert     move_num('aeiou') == 'oaeiou'\nassert     move_num('hello') == 'hello'\nassert     move_num('') == ''\n\ndef move_word_from_the_end(test_str):\n    '''\n    Write a function that moves the last word to the beginning of the given string.\n    The result must be a space added at the end.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_num('abcde') == 'eabcde', 'abcde'\nassert    move_num('dabcde') == 'abcde', 'abcde'\nassert    move_num('dabcdea') == 'abceda', 'abceda'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num(\"1a2a3\") == \"3a2a1\"\nassert     move_num(\"9h6g7h\") == \"6g7h9h\"\n\ndef move_and_replace(str1,str2,index):\n    '''\n    Write a function that moves all the characters from the given string to another\n    string in the same index position and replaces them with another string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num(\"pitchouneh\") == \"henneh\"\nassert     move_num(\"bonjour\") == \"air\"\nassert     move_num(\"word\") == \"word\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_num('0000000000') == '0'\nassert     move_num('1000000000') == '1'\nassert     move_num('100') == '100'\nassert     move_num('0000') == '00'\nassert     move_num('101') == '1'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef move_string(test_str):\n    '''\n    Write a function to move all the strings to the end of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_num('a0b1c2e') == '0b1c2e'    # '2a1c2e' is also ok\nassert     move_num('3z5a1b2') == 'z5a1b2a3'    # '2z1a3b2' is also ok\nassert     move_num('e2z4a1b3') == 'e2z4a1b3a2'    # '2e2z4a1b3a2' is also ok\nassert     move_num('ab1ca') == 'cab1'    # '1ab1ca' is also ok\nassert     move_num('a3bc') == 'bca3'    # '3bc3a' is also ok\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_num(\"\"\"1. is the year after the election\n2. is the year before the election\n3. is the year after the war\n4. is the year before the war\"\"\") == \"\"\"2. is the year before the election\n1. is the year after the election\n4. is the year before the war\n3. is the year after the war\"\"\", \"Should return a string with new numbers in it.\"\nprint(\"TESTS: pass!\")\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num('abc') == 'bc', 'expected, got: bc'\nassert     move_num('pqr') == 'qr', 'expected, got: qr'\nassert     move_num('r') == 'r', 'expected, got: r'\nassert     move_num('-') == '-', 'expected, got: -'\nassert     move_num('1abc') == '1abc', 'expected, got: 1abc'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([1, 2, 3, 4, 5, 6]) == 2\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7]) == 3\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 6\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef largest_subset_2(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([2, 4, 7, 8, 8, 9]) == 5\nassert     largest_subset([9, 8, 7]) == 1\nassert     largest_subset([]) == 0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_subset([1, 2, 3]) == 2\nassert     largest_subset([4, 8, 9, 12]) == 4\nassert     largest_subset([1, 2, 3, 5]) == 0\nassert     largest_subset([1, 4, 8, 12]) == 0\nassert     largest_subset([1, 2, 3, 4]) == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert largest_subset([2,3,6,8,1,2,3,4,7,8,9,10]) == 6\nassert largest_subset([1,2,3,4]) == 4\nassert largest_subset([1,2]) == 2\nassert largest_subset([]) == 0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_subset([3,6,2,8,4]) == 5\nassert     largest_subset([3,4,1,8,6]) == 3\nassert     largest_subset([2,4,3,5,7,8,6,10,9]) == 5\nassert     largest_subset([2,3,4]) == 2\nassert     largest_subset([2,3,4,5,10,7,9,1]) == 5\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert largest_subset([2,6,7,8]) == 4\nassert largest_subset([1,4,5,6,7]) == 3\nassert largest_subset([4,6,7,8]) == 4\nassert largest_subset([4,5,6,7]) == 3\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_median([1, 4], [2, 3]) == 2.0\nassert     get_median([1, 4], [3, 2]) == 2.5\nassert     get_median([], [2, 3, 4]) == 3.0\nassert     get_median([2], [2, 3, 4]) == 2.5\nassert     get_median([2, 4], [2, 3, 4]) == 2.5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_median([], [], 1) ==     1\nassert     get_median([], [], 2) ==     2\nassert     get_median([], [], 3) ==     2\nassert     get_median([1], [], 1) ==     1\nassert     get_median([2], [], 1) ==     2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nget_median([1, 2, 3, 4], [2, 5, 6, 7], 4) == 3\nget_median([1, 2, 3, 4], [5, 6, 7, 8], 4) == 5\n\n\nclass Solution:\n    def merge_sort(self, A):\n        if len(A) < 2:\n            return A\n        else:\n            return self.merge(self.merge_sort(A[:len(A)//2]), self.merge_sort(A[len(A)//2:]))\n\n    def merge(self, A1, A2):\n        result = []\n        i = j = 0\n        while i < len(A1) and j < len(A2):\n            if A1[i] < A2[j]:\n                result.append(A1[i])\n                i += 1\n            else:\n                result.append(A2[j])\n                j += 1\n        while i < len(A1):\n            result.append(A1[i])\n            i += 1\n        while j < len(A2):\n            result.append(A2[j])\n            j += 1\n        return result\n\nassert \nmerge_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nmerge_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nmerge_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nmerge_sort([2, 4, 3, 1, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_median_split(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_median([1, 3, 5], [2, 6, 8], 5) == 3\nassert     get_median([1, 2, 3], [4, 5, 6], 3) == 3\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_median2(arr1, arr2):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # The idea is to keep an array (or heap) of size n+1. The first element in the array is the median. \n    # There are 2 cases: (1) the list contains 1 element, which is always the median. \n    # (2) the list contains 2 elements, where the median is one of them. \n    # The median of the two elements is the sum of both, i.e. (1 + 2) / 2 = 1.5\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_median([1, 3, 7], [3, 6, 7], 3) == 3\nassert get_median([1, 3, 7], [3, 6, 7], 2) == 5.5\nassert get_median([1, 3, 7], [3, 6, 7], 1) == 3\nassert get_median([], [], 1) == None\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_median([1, 2, 3, 4], [4, 3, 5, 1], 4) == 2.0\n\nprint(\"test case passed\")\n\n'''\nTime Complexity: O(n+m)\nSpace Complexity: O(1)\n'''"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     nth_nums(['a', 'b', 'c', 'd'], 0) == []\nassert     nth_nums(['a', 'b', 'c', 'd'], 1) == ['a', 'b', 'c', 'd']\nassert     nth_nums(['a', 'b', 'c', 'd'], 2) == ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\nassert     nth_nums(['a', 'b', 'c', 'd'], 3) == ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\nassert     nth_nums(['a', 'b', 'c', 'd'], 4) == ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     nth_nums([1,2,3,4],0) == 1\nassert     nth_nums([1,2,3,4],1) == 2\nassert     nth_nums([1,2,3,4],2) == 3\nassert     nth_nums([1,2,3,4],3) == 4\nassert     nth_nums([1,2,3,4],4) == 1\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to delete the n-th node from a singly linked list, \ngiven only a reference to the n-th node.\n'''"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     nth_nums([1, 2, 3], 0) == [1, 1, 1]\nassert     nth_nums([1, 2, 3], 1) == [2, 4, 9]\nassert     nth_nums([1, 2, 3], 2) == [3, 8, 27]\nassert     nth_nums([1, 2, 3], 3) == [9, 81, 441]\nassert     nth_nums([1, 2, 3], 4) == [81, 32, 1141]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    nums = list(range(1, 5))\n    n = 1\n    print(nth_nums(nums, n))\n    \n    "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef missing(nums):\n    '''\n    Write a function to find the missing number in a list in O(1) time complexity.\n    '''\n    pass\n\n\ndef find_it(nums):\n    '''\n    Write a function to find the first repeated number in a list.\n    '''\n    pass\n\n\ndef count_and_say(n):\n    '''\n    Write a function to convert a digit string into a roman numeral.\n    '''\n    pass\n\n\ndef max_product(nums):\n    '''\n    Write a function to find the maximum product of 4 adjacent digits in the input array.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nn = 3\na = [0, 1, 2, 3, 4]\nprint(nth_nums(a, n))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     nth_nums([1, 2, 3], 2) == [1, 4]\nassert     nth_nums([1, 2, 3], 3) == [1, 8, 27]\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_upper(\"Hello\")     == False\nassert     is_upper(\"HELLO\")     == True\nassert     is_upper(\"\")     == False\nassert     is_upper(\"HELLO WORLD\")     == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_upper(    'asd'    ) == 'ASD', 'is_upper is wrong!'\nassert     is_upper(    ''    ) == '', 'is_upper is wrong!'\nassert     is_upper(    'I') == 'I', 'is_upper is wrong!'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nis_upper(\"eea\")\n\n\n\n\ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_upper('HELLO') == True\nassert     is_upper('hello') == False\nassert     is_upper('Hello') == False\nassert     is_upper('HELLO WORLD') == True\nassert     is_upper('HELLO WORLD') == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_upper('i love python') == 'I LOVE PYTHON'\nassert     is_upper('this is a test') == 'THIS IS A TEST'\nassert     is_upper('') == ''\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper('hello') == False, \"This function is incorrect\"\nassert     is_upper('HELLO') == True, \"This function is incorrect\"\n\nprint(is_upper.__doc__)\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_upper('hello') == False\nassert     is_upper('Hello') == True\nassert     is_upper('HELLO') == True\nassert     is_upper('HELLO123') == True\nassert     is_upper(123) == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_upper('hello') == False, 'hA!?!'\nassert is_upper('HELLO') == True, 'Hello HELLO!'\nassert is_upper('hELLO') == True, 'hELLO!'\nassert is_upper('HELLO!') == False, 'HELLO!'\nassert is_upper('H') == False, 'H'\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 'Wrong answer'\nassert     swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'Wrong answer'\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nswap_List([1,2,3,4]) == [4,1,2,3]\nassert swap_List([1,2,3,4,5]) == [1,4,2,3,5]\nassert swap_List([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert swap_List([-2,-1,0,1,2,3,4]) == [-2,1,0,1,2,3,4]\n\n\ndef swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nswap_List([1, 2, 3]) == [3, 2, 1]\nprint(\"passed test\")\n\ndef max_of_list(newList):\n    '''\n    Write a python function to find the maximum element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([]) == [], \"Incorrect output\"\nassert     swap_List([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"Incorrect output\"\nassert     swap_List([1, 2, 3, 4, 5, 6, 7, 1]) == [1, 1, 2, 3, 4, 5, 6, 7], \"Incorrect output\""
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List([1, 2, 3]) == [2, 3, 1]\nassert swap_List([1, 2, 3, 4]) == [2, 3, 4, 1]\nassert swap_List([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert swap_List([-3, 0, 3, 5]) == [-3, 0, 3, 5]\nassert swap_List([0, -3, 2, 4]) == [0, -3, 2, 4]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,4,2,3], \"Wrong answer\"\nassert swap_List([5,6,7,8,9]) == [5,6,7,8,9], \"Wrong answer\"\nassert swap_List([1,2,3,4,5,6,7,8,9]) == [5,6,7,8,9,1,2,3,4], \"Wrong answer\""
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4] \nassert     swap_List([1,2,3,4,5,6]) == [5,1,2,3,4,6]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List([1, 2, 3]) == [3, 2, 1], \"List is not swapped.\"\nassert     swap_List([1, 2]) == [2, 1], \"List is not swapped.\"\nassert     swap_List([1, 2, 3]) == [2, 3, 1], \"List is not swapped.\"\nassert     swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1], \"List is not swapped.\"\nassert     swap_List([1, 2, 3, 4, 5, 6]) == [6, 5, 3, 4, 1, 2], \"List is not swapped.\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nswap_List([1,2,3,4,5,6]) == [5,6,3,4,1,2] \nassert swap_List([0,1,2,3]) == [3,0,1,2] \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(2) == 2*sqrt(3)/4\nassert     triangle_area(5) == sqrt(10)*sqrt(3)/12\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1) == 1\nassert     triangle_area(2) == 1.5\nassert     triangle_area(3) == 2\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     triangle_area(1) == 1.5, \"Triangle area 1.5\"\nassert     triangle_area(2) == 2.5, \"Triangle area 2.5\"\nassert     triangle_area(3) == 3.0, \"Triangle area 3.0\"\n\n'''\nTASK 1:\n\nWrite a function that takes a list of numbers, and returns the largest number in that list.\n'''"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__' :\n    assert triangle_area(1.5) == 1.5 * 1.5 * 0.5\n    assert triangle_area(3) == 1.5 * 1.5 * 0.5\n    assert triangle_area(2) == 2 * 1.5 * 0.5\n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(2) == 5.0/2\nassert triangle_area(3) == 6.0/2\nassert triangle_area(7) == 7.0/2\nassert triangle_area(10) == 50.0/2\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(1) == 1.5\nassert     triangle_area(0.5) == 0.5\nassert     triangle_area(2) == 1.5\nassert     triangle_area(4) == 2\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triangle_area(2) == 1.5, 'Should be 1.5'\nassert     triangle_area(2.1) == 1.6, 'Should be 1.6'\nassert     triangle_area(0.1) == 1.0, 'Should be 1.0'\nassert     triangle_area(0.9) == 1.0, 'Should be 1.0'\nassert     triangle_area(0.5) == 1.0, 'Should be 1.0'\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(5) == 3.0, \"Error\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_First_Missing([5,6,4,2,3,7,9,1]) == 4\nassert     find_First_Missing([2,3,4,1]) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_First_Missing([1,3,4,5,7,8,9])==6, \"The expected output should be 6\"\nassert     find_First_Missing([1,3,4,5,7,8,9,10])==7, \"The expected output should be 7\"\nassert     find_First_Missing([1,2,4,5,7,8,9,10])==3, \"The expected output should be 3\"\nassert     find_First_Missing([])==1, \"The expected output should be 1\"\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11])==1, \"The expected output should be 1\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_Anagram(str1,str2):\n    '''\n    Write a python function to determine if two strings are anagrams of each other or not.\n    Note: An anagram is a word, phrase, or name formed by rearranging the letters of a different word or phrase,\n    using all the original letters exactly once.\n    '''\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_First_Missing([1,2,3,4]) == 2\nassert     find_First_Missing([0]) == 1\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9]) == 5\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,0]) == 1\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9]) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_First_Missing([1,2,4,7,11]) == 3\nassert     find_First_Missing([]) == 1\nassert     find_First_Missing([1,1]) == 2\nassert     find_First_Missing([1,2,3,4]) == 5\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_First_Missing([1, 2, 3, 4]) == 4, \"input: 3, output: 4\"\nassert     find_First_Missing([1, 2, 3, 4, 5]) == 4, \"input: 5, output: 4\"\nassert     find_First_Missing([1, 3, 4, 5, 6]) == 2, \"input: 6, output: 2\"\nassert     find_First_Missing([1, 2, 4, 5, 6]) == 3, \"input: 6, output: 3\"\nassert     find_First_Missing([1, 2, 3, 5, 6]) == 4, \"input: 6, output: 4\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_First_Missing([3,4,5,8,9,10]) == 1\nassert     find_First_Missing([1,2,4,6]) == 3\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_First_Missing([1,5,3,3,7,8,9]) == 2, \"This is not the correct answer\"\nassert     find_First_Missing([1,2,4,5,6]) == 3, \"This is not the correct answer\"\nassert     find_First_Missing([1,2,5,6,7]) == 3, \"This is not the correct answer\"\nassert     find_First_Missing([2,2,2,2,2]) == 1, \"This is not the correct answer\"\nassert     find_First_Missing([1,1,2,2,2,3]) == 1, \"This is not the correct answer\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_First_Missing([1,2,3,4,5]) == 1\nassert     find_First_Missing([1,2,3,4,5],3) == 2\nassert     find_First_Missing([1,2,3,4,5],3,5) == 2\nassert     find_First_Missing([1,2,3,4,5],5) == 6\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9]) == 2\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith', \"Test case 1 failed\"\nassert     replace_spaces('Mr% John Smith    ') == 'Mr%20%20John%20Smith', \"Test case 2 failed\"\nassert     replace_spaces('Mr% John Smith') == 'Mr%20%20John%20Smith', \"Test case 3 failed\"\nassert     replace_spaces(' ') == '%20', \"Test case 4 failed\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces('hello world') == 'hello%20world'\n\nassert     replace_spaces('hello world') == 'hello%20world'\n\nassert     replace_spaces('hello world') == 'hello%20world'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"%20\"\nassert     replace_spaces(\"hello world\") == \"hello%20world\"\nassert     replace_spaces(\"hello   world\") == \"hello%20%20world\"\n\ndef replace_spaces_with_concatenation(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    However, it should also prepend and append spaces in the beginning and end respectively to the given string,\n    as mentioned below.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('I am a space') == 'I%20am%20a%20space'\nassert     replace_spaces('Hello %world%') == 'Hello%20%world%'\nassert     replace_spaces('Hello %world%') == 'Hello%20%world%'\nassert     replace_spaces('%world%') == '%world%'\nassert     replace_spaces('Hello %world%') == 'Hello%20%world%'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces('word') == 'word%20'\nassert     replace_spaces('word') == 'word%20'\nassert     replace_spaces('word') == 'word%20'\n\ndef replace_spaces_v2(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith ') == 'Mr%20John%20Smith'\nassert     replace_spaces('  Mr John Smith  ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith     ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith  ') == 'Mr%20John%20Smith'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"we are happy\") == \"we%20are%20happy\"\nassert     replace_spaces(\"We%20are%20happy\") == \"we%20are%20happy\"\nassert     replace_spaces(\"we are happy.\") == \"we%20are%20happy.\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"%20\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Mr%20John%20Smith\") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Mr John\") == \"Mr%20John\"\nassert     replace_spaces(\"\") == \"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces('') == ''\nassert     replace_spaces(' ') == '%20'\nassert     replace_spaces('a') == 'a'\nassert     replace_spaces('a b') == 'a%20b'\nassert     replace_spaces(' a') == '%20a'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces(\"1\") == \"1%20\"\nassert     replace_spaces(\" \") == \"%20\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\"a b\") == \"a%20b\"\nassert     replace_spaces(\"a b c\") == \"a%20b%20c\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"Correct\")\n\nimport math\n\ndef Prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(Split([]))\n\nassert \nprint(Split([1,2,3,4,5]))\n\nassert \nprint(Split([1,2,3,4,5,6]))\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([3,2,4,5,9,6,1]) == [2,6,1]\nprint (\"Correct\")\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not Split([3, 5, 9, 7, 8])\n\n\ndef Merge(left, right):\n    '''\n    Write a python function to merge the two sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert Split([1,2,3,4,5]) == [2,4,5]\nassert Split([1,2,3,4]) == [2,4]\nassert Split([1,2,3]) == [2,3]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [[2,4,6,8], [1,3,5,7,9]]\nprint(\"The test passed!\")"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1,2,3,4,5,6,7]) == [[2,4,6],[1,3,5]], \"Wrong\"\nassert     Split([2,4,6,1,3,5]) == [[2,4,6],[1,3,5]], \"Wrong\"\nassert     Split([1,2,3,4,5,6]) == [[2,4,6],[1,3,5]], \"Wrong\"\nassert     Split([2,4,6,1,3,5,7]) == [[2,4,6],[1,3,5,7]], \"Wrong\"\nassert     Split([]) == [], \"Wrong\"\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     adjac((0, 0, 0)) == [(0, 0, 0)]\nassert     adjac((0, 0, 0), [(1, 0, 0), (1, 0, 0)]) == [(0, 0, 0), (1, 0, 0), (1, 0, 0)]\nassert     adjac((0, 0, 0), [(0, 1, 0), (0, 1, 0)]) == [(0, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     adjac((1,2),[]) == [] \nassert     adjac((1,2),[(1,2)]) == [(1,2)]\nassert     adjac((1,2),[(1,2),(2,2)]) == [(1,2),(2,2)]\nassert     adjac((1,2),[(1,2),(2,2),(2,2)]) == [(1,2),(2,2),(2,2)]\nassert     adjac((1,2),[(1,2),(2,2),(2,2),(2,2)]) == [(1,2),(2,2),(2,2),(2,2)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef print_mat(mat):\n    '''\n    Write a function to print the matrix in a human-readable format.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     adjac((1,2)) == [(0,1), (1,0)] \nassert adjac((1,2), (0,2)) == [] \nassert adjac((0,0), (1,1)) == [] \nassert adjac((1,1), (1,0)) == [(0,0)] \nassert adjac((0,2), (1,0)) == [(0,0), (0,1)] \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(adjac((0, 0),[(0, 0), (1, 0), (1, 1), (0, 1)]))\nprint(adjac((1, 0),[(0, 0), (0, 1), (1, 1), (1, 0)]))\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef adjacent(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert adjac((0,0)) == []\nassert adjac((0,1)) == [(0,1)]\nassert adjac((1,0)) == [(1,0)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef connected(coord1, coord2):\n    '''\n    Write a function to check if two coordinates are connected.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert replace_spaces('  How  a*******st   you') == 'how_a_what_you'\nassert replace_spaces('  How  a***st  you') == 'how_a_you'\nassert replace_spaces('  How  a*st  you') == 'how_a_you'\nassert replace_spaces('  How  a**st  you') == 'how_a_you'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces('    text') == 'text'\nassert     replace_spaces('      text') == 'text'\nassert     replace_spaces('text text') == 'text_text'\nassert     replace_spaces('with spaces') == 'with_spaces'\nassert     replace_spaces('with _') == 'with_underscore'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('This_is_an_easy_test') == '_thisis_an_easy_test', '...'\nassert     replace_spaces('This_is_an_easy_test') == '_thisis_an_easy_test', '...'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('Hi  Hii     dru') == 'Hi_Hii_dru'\nassert     replace_spaces('Hi  Hi    Hi') == 'Hi_Hi_Hi'\nassert     replace_spaces('Hi hi hi  HiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiH"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces(\"Hello World\") == \"hello_world\", \"replace_spaces does not replace spaces correctly\"\nassert     replace_spaces(\"Hello World_\") == \"hello_world_\", \"replace_spaces does not replace spaces correctly\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\"hello world\") == \"hello_world\"\nassert     replace_spaces(\"welcome to the jungle\") == \"wel_to_the_j_gue\"\nassert     replace_spaces(\"welcome to the jungle   \") == \"wel_to_the_j_gue\"\nassert     replace_spaces(\"welcome to the jungle_\") == \"wel_to_the_j_gue\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"Hello World\") == \"hello_world\", \"Should be: hello_world\"\nassert     replace_spaces(\"Hello_World\") == \"hello_world\", \"Should be: hello_world\"\nassert     replace_spaces(\"  Hello World  \") == \"hello_world\", \"Should be: hello_world\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     'Hi I am Vishal, ____your name is Vishal'     == replace_spaces('Hi I am Vishal, I am your name Vishal')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     'import' == replace_spaces('import '), 'import is not changed'\nassert     '    import'== replace_spaces('    import '),'import is not changed'\nassert     'import'== replace_spaces('import '), 'import is not changed'\nassert     'import'== replace_spaces(' import '), 'import is not changed'\nassert     'import'== replace_spaces(' import '), 'import is not changed'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces(\"Hello World\") == \"hello_world\"\nassert     replace_spaces(\"My name is Rufus\") == \"my_name_is_rufus\"\nassert     replace_spaces(\"We're the Knights who say Ni!\") == \"we_are_the_knights_who_say_ni\"\nassert     replace_spaces(\"We're the Knights who say Ni!\") == \"we_are_the_knights_who_say_ni\"\nassert     replace_spaces(\"We're the Knights who say Ni!\") == \"we_are_the_knights_who_say_ni\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef move_zeroes(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == None:\n        return None\n    \n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n        i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_zero([1,2,3,4,0,0,0,0,0,0]) == [1,2,3,4,0,0,0,0,0,0], \"move_zero failed\"\nassert     move_zero([9,8,7,6,5,4,3,2,1,0]) == [9,8,7,6,5,4,3,2,1,0], \"move_zero failed\"\nassert     move_zero([0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0], \"move_zero failed\"\n\ndef get_stats(pass_perc):\n    '''\n    Write a python function to calculate the average percentage of students passing.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_zero([0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1]) == [1, 1, 1, 1, 2, 1, 1, 1, 0, 1, 0, 1]\nassert     move_zero([0, 1, 0, 1, 2, 1, 1, 1, 0]) == [1, 1, 1, 1, 2, 1, 1, 1, 0]\nassert     move_zero([0, 1, 0, 1]) == [1, 1, 1, 0]\nassert     move_zero([]) == []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_zero([0, 1, 0, 2, 0]) == [1, 2, 0, 0, 0]\nassert     move_zero([0, 1, 0, 2, 0, 0, 0]) == [1, 2, 0, 0, 0, 0, 0]\nassert     move_zero([1, 1, 1, 1]) == [1, 1, 1, 1]\nassert     move_zero([0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0]) == [1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero([]) == []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_zero([0, 1, 0, 2, 0, 1, 0, 3, 0, 1]) == [0, 1, 1, 2, 1, 3, 0, 0, 0, 0]\nassert     move_zero([0, 0, 1]) == [1, 0, 0]\nassert     move_zero([0, 1, 0]) == [1, 0, 0]\nassert     move_zero([0, 0, 0, 1, 0]) == [1, 0, 0, 0, 0]\nassert     move_zero([0, 0, 1, 0, 0, 2]) == [1, 2, 0, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef move_zero_1(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_zero([1,2,0,4,0,0,0,1,0,4,0]) == [1,2,4,0,1,4,0,0,0,0,0]\nassert     move_zero([1,0,2,0,0,0,4,0,1]) == [1,0,2,0,0,0,4,0,1]\nassert     move_zero([9]) == [9]\nassert     move_zero([0,0,0,0,0]) == [0,0,0,0,0]\n\n'''\nFIND THE MISSING NUMBER\n'''\ndef find_missing_number(num_list):\n    '''\n    Write a python function to find the missing number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([1,2,3,4],4) == 10 \nassert pair_xor_Sum([1,2,3,4],5) == 0 \nassert pair_xor_Sum([1,2,3,4],6) == 2 \nassert pair_xor_Sum([1,2,3,4,5],5) == 10 \nassert pair_xor_Sum([1,2,3,4,5],6) == 0 \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_xor_Sum([1, 2, 3, 4, 5, 6], 7) == 14, \"the number of xor should be 6\"\nassert     pair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8], 9) == 15, \"the number of xor should be 9\"\nassert     pair_xor_Sum([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], -5) == -2, \"the number of xor should be -2\"\nassert     pair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 45, \"the number of xor should be 45\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \npair_xor_Sum([1,2,3,4,5,6],6) == 24\nassert pair_xor_Sum([1,2,3,4,5,6],3) == 18\nassert pair_xor_Sum([1,2,3,4,5,6],7) == 35\nassert pair_xor_Sum([1,2,3,4,5,6],8) == 30"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \npair_xor_Sum([1,2,3,4],4) == 5\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [1,5,3,10,2]\n    n = len(arr)\n    assert pair_xor_Sum(arr, n) == 20\n\n    arr = [1,5,3,10,2,7]\n    n = len(arr)\n    assert pair_xor_Sum(arr, n) == 3"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\npair_xor_Sum([1, 2, 3, 4, 5, 6, 7]) == 18\npair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8]) == 30\npair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\npair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\npair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 63\npair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 72"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_xor_Sum([3,4,5,6],6) == 40\nassert     pair_xor_Sum([-2,-4,7,4],3) == 5\nassert     pair_xor_Sum([-2,-4,7,4],4) == 11\nassert     pair_xor_Sum([-2,-4,7,4],5) == 18\nassert     pair_xor_Sum([],1) == 0\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5],5) == 10\nassert     pair_xor_Sum([1,2,3,4,5,6,7,8,9],9) == 4\nassert pair_xor_Sum([1,2,3,4,5,6,7,8,9],8) == 14"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9],8) == 30, 'incorrect pair_xor_Sum'\nassert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9],8) == 28, 'incorrect pair_xor_Sum'\nassert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9],1) == 35, 'incorrect pair_xor_Sum'\nassert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9],10) == 29, 'incorrect pair_xor_Sum'\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_sort([]) ==     []\nassert     heap_sort([0]) ==     [0]\nassert     heap_sort([1, 2]) ==     [1, 2]\nassert     heap_sort([5, 4, 3, 2, 1]) ==     [1, 2, 3, 4, 5]\nassert     heap_sort([5, 4, 3, 2, 1, -6, -7, -8]) ==     [-8, -7, -6, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_sort([2, 3, 6, 2, 1]) == [1, 2, 2, 3, 6]\nassert     heap_sort([2, 3, 5, 2, 1]) == [1, 2, 2, 3, 5]\nassert     heap_sort([2, 3, 5, 2, 1, 2, 3, 4, 3, 4, 1, 5, 2]) == [1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_sort([2,4,5,7,10]) == [4,5,7,10,2]\nassert     heap_sort([3,2,4,3,6,1]) == [1,2,3,3,4,6]\nassert     heap_sort([]) == []\nassert     heap_sort([1,2]) == [1,2]\nprint('  Passed all tests.')"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_sort([8, 10, 3, 5, 7]) == [3, 5, 7, 8, 10]\nassert     heap_sort([10, 3, 5, 8, 7]) == [3, 5, 7, 10, 8]\nassert     heap_sort([10, 3, 5, 8, -1]) == [-1, 3, 5, 8, 10]\nassert     heap_sort([10, 3, 5, 8, -10]) == [-10, 3, 5, 8, 10]\nassert     heap_sort([]) == []\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_sort([5,3,2,1,4]) == [1,2,3,4,5]\nassert     heap_sort([]) == []\nassert     heap_sort([1]) == [1]\nassert     heap_sort([-2,3,5,-1]) == [-1,3,5,-2]\n\ndef heap_sort_wrapper(a):\n    '''\n    A wrapper function that can be used to test your solution.\n    '''\n    hq.heapify(a)\n    return a\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_sort([0,1,2,3,4,5]) == [0,1,2,3,4,5]\nassert     heap_sort([0,10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10,0]\nassert     heap_sort([0,3,2,5,4,6,1,9,8,7,10]) == [1,2,3,4,5,6,7,8,9,10,0]\nassert     heap_sort([0,3,2,5,4,6,1,9,8,7]) == [1,2,3,4,5,6,7,8,9,0]\nassert     heap_sort([1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    heap_sort([1,2,3,5,6]) == [1,2,3,5,6]\n    heap_sort([2,8,5,9,11,5]) == [5,5,5,8,9,11]\n    heap_sort([1,2,3,4,5]) == [1,2,3,4,5]\nassert \n    heap_sort(list(range(10000))) == list(range(10000))\n    heap_sort(list(range(3))) == list(range(3))\nassert \n    heap_sort(list(range(10))) == list(range(10))\n\ndef merge_sort(iterable):\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nclass Solution:\n    '''\n    Write a function that takes in an array and returns a sorted array in ascending order. Use the Heap Sort algorithm to sort the array.\n    '''\n    def heap_sort(self, iterable):\n        '''\n        Write a function to sort the given list.\n        '''\n        pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     noprofit_noloss(23,25) == True, \"test failed\"\nassert     noprofit_noloss(10,25) == False, \"test failed\"\nassert     noprofit_noloss(25,10) == True, \"test failed\"\nassert     noprofit_noloss(100,50) == True, \"test failed\"\nassert     noprofit_noloss(1,2) == False, \"test failed\"\nprint(\"You passed the test! Now check the correctness of your code\")"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert noprofit_noloss(25,10) == False\nassert noprofit_noloss(50,20) == True\nassert noprofit_noloss(10,10) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     noprofit_noloss(130,10) == True, \"false\"\nassert     noprofit_noloss(20,20) == True, \"false\"\nassert     noprofit_noloss(60,20) == False, \"true\"\nassert     noprofit_noloss(10,100) == True, \"false\"\nassert     noprofit_noloss(10,50) == False, \"true\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert not noprofit_noloss(19,0)\nassert not noprofit_noloss(19,-1)\nassert not noprofit_noloss(19,1)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     noprofit_noloss(actual_cost,actual_cost+sale_amount) == True\nassert     noprofit_noloss(actual_cost+sale_amount,actual_cost) == False\nassert     noprofit_noloss(actual_cost,actual_cost+sale_amount+sale_amount) == True\nassert     noprofit_noloss(actual_cost,actual_cost+sale_amount-sale_amount) == True\n\nprint(\"You have passed the given testcases\")"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(actual_cost = 100, sale_amount = 110) == True\nassert     noprofit_noloss(actual_cost = 100, sale_amount = 120) == False\nassert     noprofit_noloss(actual_cost = 100, sale_amount = 0) == Fals"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(1,1) == True, \"Wrong Answer\"\nassert     noprofit_noloss(1,3) == False, \"Wrong Answer\"\nassert     noprofit_noloss(3,1) == False, \"Wrong Answer\"\n\ndef noprofit_noloss_2(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     noprofit_noloss(100,200) == True \nassert     noprofit_noloss(100,110) == False \nassert     noprofit_noloss(100,110) == False \nassert     noprofit_noloss(100,100) == True "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint (\"Assertion test:\", noprofit_noloss(actual_cost=4, sale_amount=3) == True )"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert wind_chill(0,0) == -44\nassert wind_chill(45,30) == -36\nassert wind_chill(40,35) == -28\nassert wind_chill(25,37) == -15\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     wind_chill(30, 45) == 44\nassert     wind_chill(8, -5) == -4\nassert     wind_chill(20, -20) == 0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     wind_chill(5, 25) == 13.42\nassert     wind_chill(10, 32) == -3.37\nassert     wind_chill(12, -1) == -3.37\n\ndef wind_chill_iter(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     wind_chill(4.4, 33) == 24\nassert     wind_chill(11, 24) == 18\nassert     wind_chill(8.4, 34) == 27\n\ndef windchill_test():\n    assert     wind_chill(4.4, 33) == 24\n    "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     wind_chill(5.4,17) == 13.41\nassert     wind_chill(7.4,16) == 21.26\nassert     wind_chill(5.4,36) == 17.61\nassert     wind_chill(7.4,20) == 25.44\nassert     wind_chill(2.4,10) == -1.67\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nwind_chill(3,0) == 22.5, \"Incorrect result\"\nassert wind_chill(5,0) == 13.8, \"Incorrect result\"\nassert wind_chill(10,0) == -4.9, \"Incorrect result\"\nassert wind_chill(3,35) == 22.5, \"Incorrect result\"\nassert wind_chill(3,45) == 24.7, \"Incorrect result\"\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     wind_chill(1, 1) == 20, \"1,1 gives 20\"\nassert     wind_chill(4, -3) == 5, \"4,-3 gives 5\"\nassert     wind_chill(5, -4) == 2, \"5,-4 gives 2\"\n\ndef is_leap_year(year):\n    '''\n    Write a function to determine if the given year is a leap year.\n    '''\n    pass\n\ndef is_leap_year(year):\n    '''\n    Write a function to determine if the given year is a leap year.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     wind_chill(4,70) == 39.70\nassert     wind_chill(4,5) == 33.40\nassert     wind_chill(4,21) == 42.50\nassert     wind_chill(4,101) == 46.40\nassert     wind_chill(8,100) == 37.40\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     wind_chill(10, 20) == 33.3\nassert wind_chill(10, -20) == -57.1\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sample_nam(['Vlad', 'Alex', 'Vlad']) == 3, 'WRONG!'\nassert     sample_nam(['Vlad', 'Alex', 'Kai']) == 4, 'WRONG!'\nassert     sample_nam(['Vlad', 'Alex', 'Vlad', 'Alex', 'Alex']) == 3, 'WRONG!'\nassert     sample_nam(['Vlad', 'Alex', 'Vlad', 'Alex', 'Alex', 'Alex', 'Alex']) == 3, 'WRONG!'\nassert     sample_nam(['Vlad', 'Alex', 'Vlad', 'Alex', 'Alex', 'Alex', 'Alex', 'Alex']) == 3, 'WRONG!'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sample_nam([\"Ivan\", \"Tanya\", \"Sasha\"]) == 2\nassert     sample_nam([\"Ivan\", \"Ivan\", \"Sasha\"]) == 3\nassert     sample_nam([\"Ivan\", \"Sasha\", \"Sasha\", \"Sasha\"]) == 3\nassert     sample_nam([\"Ivan\", \"Ivan\", \"Ivan\", \"Ivan\"]) == 4\nassert     sample_nam([\"Sasha\", \"Sasha\", \"Sasha\", \"Sasha\"]) == 4\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sample_nam([\"ze\", \"apple\", \"orange\", \"pear\", \"pine\", \"pineapple\"]) == 9, \"Sample_nam not implemented\"\nprint(\"check_nam_success\")\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sample_nam([\"John\", \"Gorge\", \"Sam\"]) == 2, \"Expected 2\"\nassert sample_nam([\"Jack\", \"John\", \"Gust\"]) == 3, \"Expected 3\"\nassert sample_nam([\"Jack\", \"John\", \"John\", \"Jack\"]) == 4, \"Expected 4\"\nassert sample_nam([\"John\", \"Gust\", \"Jack\", \"John\"]) == 4, \"Expected 4\"\n\n'''\nWrite a function that sums the even elements of the list (2,4,6,8)\n'''\ndef sum_even(list):\n    '''\n    Write a function that sums the even elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam([\"a\", \"b\", \"c\", \"d\", \"e\", \"A\", \"B\", \"C\", \"D\", \"E\"]) == 10\nassert     sample_nam([\"a\", \"b\", \"c\", \"d\", \"e\", \"A\", \"B\", \"C\", \"D\", \"E\"]) == 10\nassert     sample_nam([\"e\"]) == 1\nassert     sample_nam([\"a\", \"b\", \"c\", \"d\"]) == 5\nassert     sample_nam([\"e\", \"f\"]) == 0\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    sample_nam([]) == 0, 'Empty input'\n    sample_nam(['']) == 0, 'Empty input'\n    sample_nam(['''a''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n    sample_nam(['''a\nb\n''']) == 0, 'Empty input'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sample_nam([]) == 0\nassert     sample_nam([\"Arya\",\"Samson\",\"Sansa\"]) == 4\nassert     sample_nam([\"rishi\",\"Santanu\"]) == 3\n\n\n\ndef generate_rand_list(length):\n    '''\n    Write a function to return a randomly generated list of size length\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam([]) == 0, \"Empty list should return 0\"\nassert     sample_nam(['Aidan', 'Alex', 'Adam']) == 6, \"sample_nam should sum the length of the names\"\nassert     sample_nam(['Aidan', 'Alex', 'Adam', 'abcd']) == 10, \"sample_nam should sum the length of the names\"\nassert     sample_nam(['Aidan', 'Alex', 'Adam', 'abcd', 'Z']) == 11, \"sample_nam should sum the length of the names\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sample_nam([\"Aakash\", \"Aakash\", \"Aakash\", \"Aakash\"]) == 6, \"The answer is wrong\"\nassert     sample_nam([\"Aakash\", \"Aakash\", \"Aakash\", \"Aakash\"]) == 7, \"The answer is wrong\"\nassert     sample_nam([\"Aakash\", \"Aakash\", \"Aakash\", \"Aakash\"]) == 8, \"The answer is wrong\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_parenthesis('(A+B)') ==  'A+B'\nassert     remove_parenthesis('A + (B+C)') ==  'A+B+C'\nassert     remove_parenthesis('A (B+C)') ==  'A+B+C'\nassert     remove_parenthesis('A + (B)') ==  'A+B'\nassert     remove_parenthesis('A + (B+C) (D)') ==  'A+B+C D'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis('aa()(bb())') == 'aa()bb'\nassert remove_parenthesis('aa()bb()()') == 'aa()bb'\nassert remove_parenthesis('aa()(bb(cc()))') == 'aa()bb(cc)'\nassert remove_parenthesis('(a)a(b)c(d)') == 'aacd'\nassert remove_parenthesis('(a)(b)(c)') == 'abc'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis('(((((1+2)+(2*4)))*((4+5)-(6*3)))') == \n        '(1+2)+(2*4)',\n        'remove parenthesis wrong'\n    ), \"remove_parenthesis wrong\"\n    # check the correctness of remove_parenthesis\nassert     remove_parenthesis('(1+2)+(2*4)') == \n        '(1+2)+(2*4)',\n        'remove parenthesis wrong'\n    ), \"remove parenthesis wrong\"\n\ndef camel_case(string):\n    '''\n    Write a function to convert string from camel case to snake case.\n    '''\n    pass\n    # check the correctness of camel_case\n    assert     camel_case('camel_case') == \n            'snake_case',\n            'camel_case wrong'\n    ), \"camel_case wrong\"\n\ndef is_valid_link(url):\n    '''\n    Write a function to check whether a url is valid or not.\n    A valid url should have https:// or http:// at the beginning of the url.\n    '''\n    pass\n    # check the correctness of is_valid_link\n    "
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis(\"(())(\") == \"\", \"Should be empty string\"\nassert     remove_parenthesis(\"()())()\") == \"\", \"Should be empty string\"\nassert     remove_parenthesis(\"()(()\") == \"\", \"Should be empty string\"\nassert     remove_parenthesis(\"(())(())(\") == \"\", \"Should be empty string\"\nassert     remove_parenthesis(\"((()))\") == \"\", \"Should be empty string\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis(\"(()())\") == \"()()\"\nassert     remove_parenthesis(\"(())((()))\") == \"()()\"\nassert     remove_parenthesis(\"(((()()))())\") == \"()\"\nassert     remove_parenthesis(\"(()()(()))\") == \"()(())\"\nassert     remove_parenthesis(\"(())(())(()(()))\") == \"()()\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_parenthesis('(a)bc (d)e (f)g') == 'abcde'\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = re.sub(r'\\(([^()]+)\\)', '', items)\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_parenthesis('this is (the )good ') == 'this is good', 'Fail'\nassert     remove_parenthesis('this is (the )good ') == 'this is good', 'Fail'\nassert     remove_parenthesis('this is )good') == 'this is good', 'Fail'\nassert     remove_parenthesis('this is )good') == 'this is good', 'Fail'\nassert     remove_parenthesis('(this is )good') == 'good', 'Fail'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_parenthesis(\"(a)c(d)\") == \"a\"\nassert     remove_parenthesis(\"(((a)(b)(c)(d)()))\") == \"a\"\nassert     remove_parenthesis(\"(((a)(b)()((c)()()(d)()()))(a))\") == \"a\"\nassert     remove_parenthesis(\"((((a)(b)()(c)()()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)()(i)()(j)()(k)()(l)()(m)()(n)()(o)()(p)()(q)()(r)()(s)()(t)()(u)()(v)()(w)()(x)()(y)()(z)()(a)()(b)()(c)()(d)()(e)()(f)()(g)()(h)("
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis(\"(something)\") == \"something\"\nassert     remove_parenthesis(\"foo(bar)\") == \"foobar\"\nassert     remove_parenthesis(\"foo(bar)(baz)\") == \"foobarbaz\"\nassert     remove_parenthesis(\"foo(bar)bar(baz)\") == \"fooobarbaz\"\nassert     remove_parenthesis(\"(foo)bar(baz)\") == \"barbarbaz\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nremove_parenthesis('(hi) (((())))') == 'hi'\n\ndef remove_multiple_whitespaces(items):\n    '''\n    Write a function to remove multiple whitespaces and what is inbetween them from a string.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_nonagonal(1) == None\nassert     is_nonagonal(2) == None\nassert     is_nonagonal(3) == None\nassert     is_nonagonal(4) == None\nassert     is_nonagonal(5) == None\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(6) == 11\nassert     is_nonagonal(9) == 21\n\nprint('Tests passed')\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('All tests passed.')"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # code here\n    # return num*(num-1)*(2*num-1)//2\n\n    if n==0: \n        return 1\n    if n==1: \n        return 2\n    if n==2: \n        return 4\n    if n==3: \n        return 7\n    if n==4: \n        return 8\n    if n==5: \n        return 10\n    if n==6: \n        return 12\n    if n==7: \n        return 17\n    if n==8: \n        return 18\n    if n==9: \n        return 22\n    if n==10: \n        return 30\n    if n==11: \n        return 31\n    if n==12: \n        return 32\n    if n==13: \n        return 34\n    if n==14: \n        return 36\n    if n==15: \n        return 37\n    if n==16: \n        return 38\n    if n==17: \n        return 39\n    if n==18: \n        return 40\n    if n==19: \n        return 41\n    if n==20: \n        return 42\n    if n==21: \n        return 43\n    if n==22: \n        return 44\n    if n==23: \n        return 45\n    if n==24: \n        return 46\n    if n==25: \n        return 47\n    if n==26: \n        return 48\n    if n==27: \n        return 49\n    if n==28: \n        return 50\n    if n==29: \n        return 51\n    if n==30: \n        return 52\n    if n==31: \n        return 53\n    if n==32: \n        return 54\n    if n==33: \n        return 55\n    if n==34: \n        return 56\n    if n==35: \n        return 57\n    if n==36: \n        return 58\n    if n==37: \n        return 59\n    if n==38: \n        return 60\n    if n==39: \n        return 61\n    if n==40: \n        return 62\n    if n==41: \n        return 63\n    if n==42: \n        return 64\n    if n==43: \n        return 65\n    if n==44: \n        return 66\n    if n==45: \n        return 67\n    if n==46: \n        return 68\n    if n==47: \n        return 69\n    if n==48: \n        return 70\n    if n==49: \n        return 71\n    if n==50: \n        return 72\n    if n==51: \n        return 73\n    if n==52: \n        return 74\n    if n==53: \n        return 75\n    if n==54: \n        return 76\n    if n==55: \n        return 77\n    if n==56: \n        return 78\n    if n==57: \n        return 79\n    if n==58: \n        return 80\n    if n==59: \n        return 81\n    if n==60: \n        return 82\n    if n==61: \n        return 83\n    if n==62: \n        return 84\n    if n==63: \n        return 85\n    if n==64: \n        return 86\n    if n==65: \n        return 87\n    if n==66: \n        return 88\n    if n==67: \n        return 89\n    if n==68: \n        return 90\n    if n==69: \n        return 91\n    if n==70: \n        return 92\n    if n==71: \n        return 93\n    if n==72: \n        return 94\n    if n==73: \n        return 95\n    if n==74: \n        return 96\n    if n==75: \n        return 97\n    if n==76: \n        return 98\n    if n==77: \n        return 99\n    if n==78: \n        return 100\n    if n==79: \n        return 101\n    if n==80: \n        return 102\n    if n==81: \n        return 103\n    if n==82: \n        return 104\n    if n==83: \n        return 105\n    if n==84: \n        return 106\n    if n==85: \n        return 107\n    if n==86: \n        return 108\n    if n==87: \n        return 109\n    if n==88: \n        return 110\n    if n==89: \n        return 111\n    if n==90: \n        return 112\n    if n==91: \n        return 113\n    if n==92: \n        return 114\n    if n==93: \n        return 115\n    if n==94: \n        return 116\n    if n==95: \n        return 117\n    if n==96: \n        return 118\n    if n==97: \n        return 119\n    if n==98: \n        return 120\n    if n==99: \n        return 121\n    if n==100: \n        return 122\n    if n==101: \n        return 123\n    if n==102: \n        return 124\n    if n==103: \n        return 125\n    if n==104: \n        return 126\n    if n==105: \n        return 127\n    if n==106: \n        return 128\n    if n==107: \n        return 129\n    if n==108: \n        return 130\n    if n==109: \n        return 131\n    if n==110: \n        return 132\n    if n==111: \n        return 133\n    if n==112: \n        return 134\n    if n==113: \n        return 135\n    if n==114: \n        return 136\n    if n==115: \n        return 137\n    if n==116: \n        return 138\n    if n==117: \n        return 139\n    if n==118: \n        return 140\n    if n==119: \n        return 141\n    if n==120: \n        return 142\n    if n==121: \n        return 143\n    if n==122: \n        return 144\n    if n==123: \n        return 145\n    if n==124: \n        return 146\n    if n==125: \n        return 147\n    if n==126: \n        return 148\n    if n==127: \n        return 149\n    if n==128: \n        return 150\n    if n==129: \n        return 151\n    if n==130: \n        return 152\n    if n==131: \n        return 153\n    if n==132: \n        return 154\n    if n==133: \n        return 155\n    if n==134: \n        return 156\n    if n==135: \n        return 157\n    if n==136: \n        return 158\n    if n==137: \n        return 159\n    if n==138: \n        return 160\n    if n==139: \n        return 161\n    if n==140: \n        return 162\n    if n==141: \n        return 163\n    if n==142: \n        return 164\n    if n==143: \n        return 165\n    if n==144: \n        return 166\n    if n==145: \n        return 167\n    if n==146: \n        return 168\n    if n==147: \n        return 169\n    if n==148: \n        return 170\n    if n==149: \n        return 171\n    if n==150: \n        return 172\n    if n==151: \n        return 173\n    if n==152: \n        return 174\n    if n==153: \n        return 175\n    if n==154: \n        return 176\n    if n==155: \n        return 177\n    if n==156: \n        return 178\n    if n==157: \n        return 179\n    if n==158: \n        return 180\n    if n==159: \n        return 181\n    if n==160: \n        return 182\n    if n==161:"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nonagonal(1) == 2, \"Not correct.\"\nassert     is_nonagonal(2) == 4, \"Not correct.\"\nassert     is_nonagonal(3) == 6, \"Not correct.\"\nassert     is_nonagonal(4) == 8, \"Not correct.\"\nassert     is_nonagonal(5) == 10, \"Not correct.\"\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(5) == 11\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_nonagonal(1) == 1, \"Wrong answer. Expected 1\"\nassert     is_nonagonal(2) == 5, \"Wrong answer. Expected 5\"\nassert     is_nonagonal(3) == 6, \"Wrong answer. Expected 6\"\nassert     is_nonagonal(4) == 7, \"Wrong answer. Expected 7\"\nassert     is_nonagonal(5) == 11, \"Wrong answer. Expected 11\"\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_nonagonal(0)\nassert not is_nonagonal(1)\nassert not is_nonagonal(2)\nassert is_nonagonal(3)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle(\"Hello world.\") == True\nassert     text_match_wordz_middle(\"Hello world123\") == True\nassert     text_match_wordz_middle(\"Hello world1\") == False\nassert     text_match_wordz_middle(\"Hello worlda\") == True\nassert     text_match_wordz_middle(\"hello world\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('zz') == False\nassert     text_match_wordz_middle('a') == True\nassert     text_match_wordz_middle('zz') == False\nassert     text_match_wordz_middle('a b') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('zebra') == True\nassert     text_match_wordz_middle('zebra') == False\nassert     text_match_wordz_middle('zebra ') == False\nassert     text_match_wordz_middle('zebra ') == False\nassert     text_match_wordz_middle('zebra   ') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle('first') == True\nassert     text_match_wordz_middle('firstz') == True\nassert     text_match_wordz_middle('zfirst') == True\nassert     text_match_wordz_middle('zfirstz') == True\nassert     text_match_wordz_middle('zfirstzfirst') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle(\"zzz\") == True, \"you've forgotten a bracket\"\nassert     text_match_wordz_middle(\"zzzz\") == True, \"you've forgotten a bracket\"\nassert     text_match_wordz_middle(\"zzzzz\") == True, \"you've forgotten a bracket\"\nassert     text_match_wordz_middle(\"zzzzzzz\") == False, \"you've forgotten a bracket\"\nassert     text_match_wordz_middle(\"zzzzzzzz\") == False, \"you've forgotten a bracket\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle('a test string') == True\nassert     text_match_wordz_middle('a string test') == True\nassert     text_match_wordz_middle('test test') == False\nassert     text_match_wordz_middle('test') == True\nassert     text_match_wordz_middle('test test test') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle('') == False\nassert     text_match_wordz_middle('') == False\nassert     text_match_wordz_middle(' ') == False\nassert     text_match_wordz_middle('z') == False\nassert     text_match_wordz_middle('z z') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle('Hi z') == False\nassert     text_match_wordz_middle('Z hi') == True\nassert     text_match_wordz_middle('Z hi') == True\nassert     text_match_wordz_middle('z hi') == False\nassert     text_match_wordz_middle('hi z') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz_middle('z') == False\nassert     text_match_wordz_middle('zz') == True\nassert     text_match_wordz_middle('abc z') == False\nassert     text_match_wordz_middle('zz z') == True\nassert     text_match_wordz_middle('z zz') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle(\"This is a test of the ZWLIS Algorithms library.\") == True, \"Mismatch with expected result.\"\nassert     text_match_wordz_middle(\"This is another test of the ZWLIS Algorithms library.\") == False, \"Mismatch with expected result.\"\nassert     text_match_wordz_middle(\"ZWLIS Algorithms Library:\") == False, \"Mismatch with expected result.\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 1)\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 6)\nassert not reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 10)\nassert not reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 0)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nreverse_Array_Upto_K([10,20,30,40], 2) == [40,30,20,10]\nassert \nreverse_Array_Upto_K([0,1,2,3], 2) == [3,2,1,0]\nassert \nreverse_Array_Upto_K([1,2,3], 2) == [3,2,1]\nassert \nreverse_Array_Upto_K([1,2,3,4,5], 2) == [4,3,2,1,5]\nassert \nreverse_Array_Upto_K([1,2,3,4,5,6,7], 2) == [7,6,5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreverse_Array_Upto_K([1, 2, 3, 4, 5], 5) ==[5, 4, 3, 2, 1]\nassert \nreverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 3) ==[7, 8, 5, 4, 3]\nassert \nreverse_Array_Upto_K([1, 2, 3, 4], 2) ==[3, 2, 1]\nassert \nreverse_Array_Upto_K([1], 1) ==[1]\nassert \nreverse_Array_Upto_K([1, 2, 3], 2) ==[3, 2, 1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1], 'Reversing of a List'\nassert     reverse_Array_Upto_K([1, 2, 3, 4], 1) == [], 'Reversing a empty List'\nassert     reverse_Array_Upto_K([], 0) == [], 'Reversing a empty List'\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5], 4) ==     [5,4,3,2,1] \nassert reverse_Array_Upto_K([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert reverse_Array_Upto_K([1,2,3,4,5,6], 5) == [6,5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5,6], 6) == [6,5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5], 0) == []\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5], 3) == [-3,2,1,4,5], \"Checking for 1st case\"\nassert     reverse_Array_Upto_K([1,2,3,4,5], 1) == [-1,2,3,4,5], \"Checking for 2nd case\"\nassert     reverse_Array_Upto_K([1,2,3,4,5], 5) == [-5,4,3,2,1], \"Checking for 3rd case\"\nassert     reverse_Array_Upto_K([1,2,3,4,5], 0) == [], \"Checking for 4th case\"\nassert     reverse_Array_Upto_K([], 0) == [], \"Checking for 5th case\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1], \"Test 1 Failed\"\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7], 4) == [7, 6, 5, 4, 3, 2, 1], \"Test 2 Failed\"\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1], \"Test 3 Failed\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_dict_to_tuple((), {}) == ((), {})\nassert add_dict_to_tuple((1,2,3), {}) == (1,2,3, {})\nassert add_dict_to_tuple((1,2,3), {1:10, 2:20}) == (1,2,3, {1:10, 2:20})\nassert add_dict_to_tuple((1,2,3), {1:10, 2:20, 3:30}) == (1,2,3, {1:10, 2:20, 3:30})\nassert add_dict_to_tuple((1,2,3), {1:10, 2:20, 3:30, 4:40, 5:50}) == (1,2,3, {1:10, 2:20, 3:30, 4:40, 5:50})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         add_dict_to_tuple((1,2,3), {}) == (1,2,3)\nassert         add_dict_to_tuple((1,2,3), {'a':1}) == (1,2,3, {'a':1})\nassert         add_dict_to_tuple((1,2,3), {'a':1, 'b':2, 'c':3}) == (1,2,3, {'a':1, 'b':2, 'c':3})\nassert         add_dict_to_tuple((1,2,3), {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}) == (1,2,3, {'a':1, 'b':2, 'c':3, 'd':4, 'e':5})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (test_tup[0], test_tup[1], test_tup[2] + 1)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef add_list_to_tuple(test_tup, test_list):\n    '''\n    Write a function to add a list to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple(('a', 1), {'a': 2}) == ('a', 1, {'a': 2})\nassert     add_dict_to_tuple(('a', 1), {'b': 2}) == ('a', 1, {'b': 2})\nassert     add_dict_to_tuple(('a', 1, {'a': 2}), {'a': 3, 'b': 4}) == ('a', 1, {'a': 3, 'b': 4})\nassert     add_dict_to_tuple(('a', 1, {'a': 2}), {'a': 3}) == ('a', 1, {'a': 3, 'b': 2})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_dict_to_tuple((('a', 'b', 'c', 'd'), {}), {'a': 'x', 'b': 'y'}) == ('a', 'b', 'c', 'd', {'a': 'x', 'b': 'y'})\nassert     add_dict_to_tuple(((), {}), {'a': 'x', 'b': 'y'}) == (('a', 'b', 'c', 'd'), {'a': 'x', 'b': 'y'})"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (test_tup, test_dict)\nassert     add_dict_to_tuple(('a', 'b'), {}) == ('a', 'b', {})\n\ndef add_tuple_to_list(test_tup, test_list):\n    '''\n    Write a function to add a tuple to the list. The output should be a list.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple((),{}) == ()\nassert     add_dict_to_tuple((1,2),{}) == (1,2)\nassert     add_dict_to_tuple((1,2,3),{}) == (1,2,3)\n\ndef add_dict_to_list(test_list, test_dict):\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maxAverageOfPath([[1, 1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1]]) == 3\nassert     maxAverageOfPath([[3, 1, 5],\n                        [1, 2, 2],\n                        [3, 6, 2]]) == 7\nassert     maxAverageOfPath([[4, 5, 4],\n                        [3, 3, 5],\n                        [1, 1, 3]]) == 5\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 8\nassert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 12\nassert     maxAverageOfPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == 10\nassert     maxAverageOfPath([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35]]) == 23\n\ndef minAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\n<the correct implementation of maxAverageOfPath is below>:\nExample 1:\nInput:\ncost = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 12.00000\nExplanation:\nThe average value for the path 1 2 3\n4 5 6\n7 8 9\nis (4 + 5 + 6 + 7 + 8 + 9) / 7 = 12 / 7 = 12.00000\n\nThe average value for the path 4 5 6\n7 8 9\n1 2 3\nis (7 + 8 + 9) / 3 = 9 / 3 = 4.333333\n\nThe average value for the path 7 8 9\n1 2 3\n4 5 6\nis (7 + 8 + 9) / 3 = 9 / 3 = 4.333333\n\nThe average value for the path 1 2 3\n4 5 6\n7 8 9\nis (4 + 5 + 6 + 7 + 8 + 9) / 7 = 12 / 7 = 12.00000\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([[1,3,5,7],\n                           [2,8,9,10],\n                           [3,11,13,15],\n                           [4,12,14,16]]) == 15\nassert maxAverageOfPath([[1,3,5,7],\n                        [2,8,9,10],\n                        [3,11,13,15],\n                        [4,12,14,16],\n                        [5,12,11,10]]) == 14\nassert maxAverageOfPath([[1,3,5,7],\n                        [2,8,9,10],\n                        [3,11,13,15],\n                        [4,12,14,16],\n                        [5,12,11,10],\n                        [6,11,13,14],\n                        [6,12,14,15],\n                        [6,11,12,13]]) == 14.5\nassert maxAverageOfPath([[1,3,5,7],\n                        [2,8,9,10],\n                        [3,11,13,15],\n                        [4,12,14,16],\n                        [5,12,11,10],\n                        [6,11,13,14],\n                        [6,12,14,15],\n                        [7,11,12,13],\n                        [7,12,13,14]]) == 14.5\nassert maxAverageOfPath([[1,3,5,7],\n                        [2,8,9,10],\n                        [3,11,13,15],\n                        [4,12,14,16],\n                        [5,12,11,10],\n                        [6,11,13,14],\n                        [6,12,14,15],\n                        [7,11,12,13],\n                        [7,12,13,14],\n                        [8,11,12,13],\n                        [8,12,13,14],\n                        [9,11,12,13],\n                        [9,12,13,14]]) == 13\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maxAverageOfPath([[5,1,2],[5,3,4],[9,5,3]]) == 5\nassert     maxAverageOfPath([[1,1,1],[1,1,1],[1,1,1]]) == 4\n\ndef maxAverageOfPath_using_in_order(cost):\n    '''\n    We can also use in order traversal to do this. Time complexity is O(N*M) where N and M are the number of rows and columns in the matrix respectively.\n    '''\n    pass\n\ndef maxAverageOfPath_using_in_order_with_set(cost):\n    '''\n    We can also use in order traversal to do this. Time complexity is O(N*M) where N and M are the number of rows and columns in the matrix respectively.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_data({'Peter':(1.68,80.0)},1.6,1.5) == True\nassert     filter_data({'Peter':(1.68,80.0)},1.5,1.5) == False\nassert     filter_data({'Peter':(1.68,80.0)},1.0,1.0) == True\nassert     filter_data({'Peter':(1.68,80.0)},1.3,1.3) == False\nassert     filter_data({'Peter':(1.68,80.0)},1.2,1.2) == True\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nstudents = {'Wile': (1.35, 59), 'Joey': (1.68, 70), 'Bob': (1.83, 69), 'Mary': (1.71, 63), 'Sam': (1.87, 55), 'Ravi': (2.12, 55)}\nh=1.5\nw=60\nprint(\"The dictionary is :\\n\")\nfor k in students.keys():\n    print(k, students[k])\nprint(\"\\nThe filtered dictionary is :\\n\")\nfilter_data(students, h, w)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nif __name__ == '__main__':\n    print('Check the correctness of filter_data:')\n    assert filter_data({'students':[('john', (140.8,80.8)), ('mary', (150.0,70.5)), ('david', (180.0,70.8)), ('johnny', (130.8,100.2))]}, 150.0, 180.0) == \\\n    {'students':[('john', (140.8,80.8)), ('johnny', (130.8,100.2))]}\n    assert filter_data({'students':[('john', (140.8,80.8)), ('mary', (150.0,70.5)), ('david', (180.0,70.8)), ('johnny', (130.8,100.2))]}, 140.8, 150.0) == \\\n    {'students':[('john', (140.8,80.8)), ('johnny', (130.8,100.2))]}\n    assert filter_data({'students':[('john', (140.8,80.8)), ('mary', (150.0,70.5)), ('david', (180.0,70.8)), ('johnny', (130.8,100.2))]}, 120, 180.0) == \\\n    {'students':[('john', (140.8,80.8)), ('johnny', (130.8,100.2))]}\n    assert filter_data({'students':[('john', (140.8,80.8)), ('mary', (150.0,70.5)), ('david', (180.0,70.8)), ('johnny', (130.8,100.2))]}, 100.5, 110.0) == \\\n    {'students':[('john', (140.8,80.8)), ('johnny', (130.8,100.2))]}\n    "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_data({'student_1':(1.80,70),'student_2':(1.75,90),'student_3':(1.70,100)}, 1.6,1.6) == {'student_2','student_3'}\nprint('Testing filter_data: Correct')\nprint()"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_data(students,h,w) == {'Jane': (1.9, 60.5), 'John': (1.8, 45.0), 'Emily': (1.8, 50.0)}, 'test_filter_data'\nprint('Congratulations!')\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_data({'Nishanth': (1.78, 86), 'Abhishek': (1.68, 98), 'Yogendra': (1.63, 45), 'Kunal': (1.54, 79), 'Aamir': (1.81, 75), 'Neha': (1.82, 55), 'Vignesh': (1.81, 99), 'Yashwanth': (1.82, 99)},1.6, 77)== ['Yashwanth', 'Aamir', 'Neha'], True\nassert     filter_data({'Nishanth': (1.78, 86), 'Abhishek': (1.68, 98), 'Yogendra': (1.63, 45), 'Kunal': (1.54, 79), 'Aamir': (1.81, 75), 'Neha': (1.82, 55), 'Vignesh': (1.81, 99), 'Yashwanth': (1.82, 99)},1.6, 77)== ['Yashwanth', 'Aamir', 'Neha'], True\nassert     filter_data({'Nishanth': (1.78, 86), 'Abhishek': (1.68, 98), 'Yogendra': (1.63, 45), 'Kunal': (1.54, 79), 'Aamir': (1.81, 75), 'Neha': (1.82, 55), 'Vignesh': (1.81, 99), 'Yashwanth': (1.82, 99)},1.6, 77)== ['Yashwanth', 'Aamir', 'Neha'], True\nassert     filter_data({'Nishanth': (1.78, 86), 'Abhishek': (1.68, 98), 'Yogendra': (1.63, 45), 'Kunal': (1.54, 79), 'Aamir': (1.81, 75), 'Neha': (1.82, 55), 'Vignesh': (1.81, 99), 'Yashwanth': (1.82, 99)},1.3, 76)== ['Neha', 'Yashwanth'], True\nassert     filter_data({'Nishanth': (1.78, 86), 'Abhishek': (1.68, 98), 'Yogendra': (1.63, 45), 'Kunal': (1.54, 79), 'Aamir': (1.81, 75), 'Neha': (1.82, 55), 'Vignesh': (1.81, 99), 'Yashwanth': (1.82, 99)},1.3, 76)== ['Neha', 'Yashwanth'], True\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_data({'Bryce Harper': (6.5, 102.0), 'Mark Andrews': (6.4, 98.5), 'Phillip Helm': (5.5, 100.2), 'Ryan Howard': (6.7, 100.3), 'Nickleback': (5.3, 98.2)}, 6.4, 99.5) == {'Mark Andrews', 'Ryan Howard', 'Nickleback'}, \"failed\"\nprint(\"\\nThe output should be - Mark Andrews, Ryan Howard, Nickleback\\n\")\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_data({'Peter': (1.66, 80.0), 'John': (1.61, 70.0), 'Amy': (1.81, 40.0)}, 2.0, 70.0) == {'Amy': (1.81, 40.0)}, \"First\"\nassert     filter_data({'Peter': (1.66, 80.0), 'John': (1.61, 70.0), 'Amy': (1.81, 40.0)}, 1.6, 70.0) == {'Amy': (1.81, 40.0)}, \"Second\"\nassert     filter_data({'Peter': (1.66, 80.0), 'John': (1.61, 70.0), 'Amy': (1.81, 40.0)}, 2.1, 70.0) == {}, \"Third\"\nassert     filter_data({'Peter': (1.66, 80.0), 'John': (1.61, 70.0), 'Amy': (1.81, 40.0)}, 1.61, 70.0) == {'John': (1.61, 70.0), 'Amy': (1.81, 40.0)}, \"Fourth\"\nassert     filter_data({'Peter': (1.66, 80.0), 'John': (1.61, 70.0), 'Amy': (1.81, 40.0)}, 1.81, 70.0) == {'Amy': (1.81, 40.0)}, \"Fifth\"\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_same_pair([2,2], [[2,2],2]) == 1\nassert     count_same_pair([1,2], [[2,2],2]) == 0\nassert     count_same_pair([2,2], [[2,2],1]) == 1\nassert     count_same_pair([2,2], [[2,2],2]) == 0\nassert     count_same_pair([1,2], [[1,2],2]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_same_pair([1,2,3], [1,3,4]) == 1\nassert     count_same_pair([1,2,3], [1,3]) == 1\nassert count_same_pair([1,2,3], [1,4]) == 0\nassert count_same_pair([1,2,3], [1,3,5]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_same_pair([2,2,3,3,3], [2,2,2,3,3]) == 1\nassert     count_same_pair([2,2,2,2], [2,2,2,2]) == 4\nassert     count_same_pair([1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_same_pair([1,2,3], [1,2,3]) == 1\nassert count_same_pair([1,2,3], [1,3,3]) == 1\nassert count_same_pair([1,2,3], [1,2,4]) == 1\nassert count_same_pair([1,2,3], [1,3,4]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_same_pair_with_set(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_same_pair([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18]) == 3\nassert count_same_pair([1,2,3,4,5,6,7,8,9], [11,12,13,14,15,16,17,18,19]) == 4\nassert count_same_pair([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18,19]) == 3\nassert count_same_pair([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18,19]) == 0\n\ndef longest_common_substring(s1, s2):\n    '''\n    Given two strings, s1 and s2, with the same length, write a function to return the longest common substring. If there is no substring, return an empty string.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_same_pair([1,2,3,4], [1,2,4,4]) == 2\ncount_same_pair([1,2,3,4,5], [1,2,3,4,5]) == 5\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_same_pair_w(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n\nassert count_same_pair_w([1,2,3], [1,2,3]) == 3\nassert count_same_pair_w([1,2,3], [1,2,1]) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power_base_sum(2, 3) == 10\nassert     power_base_sum(2, 4) == 20\nassert     power_base_sum(9, 3) == 27\nassert     power_base_sum(9, 4) == 81"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power_base_sum(2,2) == 10\nassert     power_base_sum(3,1) == 3\nassert     power_base_sum(3,2) == 27\nassert     power_base_sum(3,3) == 243\n\n'''\nProblem 1 (a)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef power_base_sum_1(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) for i in str(base)) ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \npower_base_sum(4, 5) == 40\nassert power_base_sum(2, 5) == 32\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power_base_sum(4, 4) == 24\nassert     power_base_sum(4, 5) == 28\nassert     power_base_sum(4, 6) == 32\nassert     power_base_sum(4, 7) == 36\nassert     power_base_sum(4, 8) == 40\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power_base_sum(6,3) == \"9\", \"incorrect\"\nassert     power_base_sum(6,0) == \"\", \"incorrect\"\nassert     power_base_sum(3,3) == \"45\", \"incorrect\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power_base_sum(2,1) == 2\nassert     power_base_sum(2,2) == 4\nassert     power_base_sum(2,3) == 10\nassert     power_base_sum(2,4) == 14\nassert     power_base_sum(3,0) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power_base_sum(2, 1) == 2\nassert     power_base_sum(2, 2) == 1\nassert     power_base_sum(2, 3) == 1\nassert     power_base_sum(5, 1) == 5\nassert     power_base_sum(5, 2) == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \npower_base_sum(23, 5) == 375\npower_base_sum(23, 4) == 23 * 23 * 23 * 23 * 23\npower_base_sum(32, 8) == 32 * 32 * 32 * 32 * 32 * 32 * 32 * 32\npower_base_sum(42, 3) == 42 * 42 * 42\n\n\n\ndef power_base_sum_2(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_quotation(\"I\\'m learning Python, I\\'m happy to learn!!\") == \"I'm learning Python\"\nassert     extract_quotation(\"She said, \\\"Hi!\\\"\") == \"She said\"\nassert     extract_quotation(\"She said, \\\"Hi!\\\" She said \\\"Hi!\\\"\") == \"She said\"\nassert     extract_quotation(\"She said, \\\"Hi!\\\" She said \\\"Hi!\\\" And she said \\\"Hi!\\\"\") == \"She said\"\nassert     extract_quotation(\"She said, \\\"Hi!\\\" She said \\\"Hi!\\\" And she said \\\"Hi!\\\" And she said \\\"Hi!\\\"\") == \"She said\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ntext1 = 'He said \"I am good\" \"I am not good\"'\nresult = extract_quotation(text1)\nprint(result)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation(\"\"\"This is a test string with\n    multiple quotes. It contains quotes in the middle. This\n    too.\n\"\"\") == \"this is a test string with multiple quotes. it contains quotes in the middle.\", \"test_extract_quotation failed.\"\nassert     extract_quotation(\"This is a test string with\n    multiple quotes. It contains quotes in the middle.\") == \"this is a test string with multiple quotes. it contains quotes in the middle.\", \"test_extract_quotation failed.\"\nassert     extract_quotation(\"This is a test string with\n    multiple quotes. It contains quotes in the middle. This\n    too.\") == \"this is a test string with multiple quotes. it contains quotes in the middle.\", \"test_extract_quotation failed.\"\nassert     extract_quotation(\"\") == \"\", \"test_extract_quotation failed.\"\nassert     extract_quotation(\"This is a test string with multiple quotes. It contains quotes in the middle.\") == \"This is a test string with multiple quotes. It contains quotes in the middle.\", \"test_extract_quotation failed.\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_quotation(\"This is a string with 'quote' in it\") == 'quote'\nassert     extract_quotation(\"This is a string with 'quote' in it\") == 'quote'\nassert     extract_quotation(\"This is a string with 'quote') in it\") == 'quote)'\nassert     extract_quotation(\"This is a string with 'quote') in it\") == 'quote)'\nassert     extract_quotation(\"This is a string with 'quote') in it\") == 'quote)'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation('Hello \"world\"') == 'world'\nassert     extract_quotation('Hi, \"hello\"') == 'hello'\nassert     extract_quotation('This is a \"test\"') == 'test'\nassert     extract_quotation('This is a test') == None\n\ndef replace_quotation(text1):\n    '''\n    Write a function to replace \" \" in the given string with '\" '\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert extract_quotation(\"abcd efghijkl mnopqrstuvwxyz\") == \"efghijkl\"\nassert extract_quotation(\"a'bc''d''efgh'ijk''lmno''pqr''stuv''wxyz\") == \"abcdefghijklmno\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_quotation(\"There are seven continents.\") == \"There are seven continents.\"\nassert     extract_quotation(\"The 'quick' brown fox jumps over the lazy dog.\") == \"quick brown fox jumps over the lazy dog.\"\nassert     extract_quotation(\"She said \\\"Hello world!\\\"\") == \"Hello world!\"\nassert     extract_quotation(\"Hello world\") == \"\"\n\ndef remove_all_html(text2):\n    '''\n    Write a function to remove the html tags from the given text\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef extract_phone_numbers(text):\n    '''\n    Write a function to extract phone numbers of the given string.\n    \n    Example:\n    Input text = \"Hello! I am learning to code in Python.My phone number is +91-123-456789\"\n    Output = {'+91-123-456789', '+91-123-456789'}\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_quotation(\"A good developer's code should be simple and focused, well-written, and easy to learn. But a complex program may be harder to write, harder to maintain, and more complicated.\") == \"well-written,\", \"incorrect\"\n\ndef count_sentences(text1):\n    '''\n    Write a function to count the number of sentences in the given text.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_quotation('python is a high level general purpose programming language') == ['python', 'is', 'a', 'high', 'level', 'general', 'purpose', 'programming', 'language']\nassert     extract_quotation('programming is an advanced software engineering language') == ['programming', 'is', 'an', 'advanced','software', 'engineering', 'language']\nassert     extract_quotation('I love python. I am also a programmer.') == ['I', 'love', 'python.', 'I', 'am', 'also', 'a', 'programmer']\nassert     extract_quotation('I am a programmer') == ['I', 'am', 'a', 'programmer']\nassert     extract_quotation('a') == ['a']\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((1, 2, 3)) == (1, 2, 3)\nassert     multiply_elements((1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\nassert     multiply_elements((1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n\nprint('All tests passed'"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3,6,12,21), \\\n                \"Incorrect output\"\n\ndef get_fibonacci_huge(k, m):\n    '''\n    You need to calculate the k-th Fibonacci number modulo m.\n    Fibonacci numbers:\n        1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026\n    F1 = 1, F2 = 2, Fk = Fk-1 + Fk-2, where k > 1\n    Let's compute the fibonacci numbers using the above formula:\n    Fk = Fk-1 + Fk-2\n    Fk-1 = Fk-2\n    Fk-2 = Fk-1 + Fk-1\n    From this formula we get Fk = Fk-1 + Fk-2\n    So we need to calculate Fk-1 + Fk-2 (mod m) and we keep it in f_k\n    In this way we get the fibonacci number in the form of a linear function\n    (f_k = Fk-1 + Fk-2)\n    For example, we have 1 + 2 = 3 modulo 11\n    Now we just need to calculate the k-th fibonacci number with the formula\n    f_k = f_{k-1} + f_{k-2}\n    Let's see how we do that:\n        f_1 = f_2 = 1\n        f_k = f_{k-1} + f_{k-2}\n    We can see that f_k = f_{k-1} + f_{k-2}\n    So now we need to calculate f_k in the same way\n    f_k = (f_k-1 + f_{k-2}) mod m\n    Now we can calculate the k-th fibonacci number using the formula\n    f_k = (f_k-1 + f_{k-2}) mod m\n    f_k = (f_k-1 + f_k-2) mod m\n    f_k = (f_k-1 + f_k-3) mod m\n    f_k = (f_k-1 + f_k-4) mod m\n    f_k = (f_k-1 + f_k-6) mod m\n    f_k = (f_k-1 + f_k-10) mod m\n    f_k = (f_k-1 + f_k-15) mod m\n    f_k = (f_k-1 + f_k-21) mod m\n    f_k = (f_k-1 + f_k-28) mod m\n    f_k = (f_k-1 + f_k-34) mod m\n    f_k = (f_k-1 + f_k-40) mod m\n    f_k = (f_k-1 + f_k-56) mod m\n    f_k = (f_k-1 + f_k-72) mod m\n    f_k = (f_k-1 + f_k-88) mod m\n    f_k = (f_k-1 + f_k-104) mod m\n    f_k = (f_k-1 + f_k-120) mod m\n    f_k = (f_k-1 + f_k-140) mod m\n    f_k = (f_k-1 + f_k-161) mod m\n    f_k = (f_k-1 + f_k-176) mod m\n    f_k = (f_k-1 + f_k-187) mod m\n    f_k = (f_k-1 + f_k-194) mod m\n    f_k = (f_k-1 + f_k-195) mod m\n    f_k = (f_k-1 + f_k-200) mod m\n    f_k = (f_k-1 + f_k-201) mod m\n    f_k = (f_k-1 + f_k-205) mod m\n    f_k = (f_k-1 + f_k-206) mod m\n    f_k = (f_k-1 + f_k-207) mod m\n    f_k = (f_k-1 + f_k-208) mod m\n    f_k = (f_k-1 + f_k-209) mod m\n    f_k = (f_k-1 + f_k-210) mod m\n    f_k = (f_k-1 + f_k-211) mod m\n    f_k = (f_k-1 + f_k-213) mod m\n    f_k = (f_k-1 + f_k-214) mod m\n    f_k = (f_k-1 + f_k-215) mod m\n    f_k = (f_k-1 + f_k-216) mod m\n    f_k = (f_k-1 + f_k-217) mod m\n    f_k = (f_k-1 + f_k-218) mod m\n    f_k = (f_k-1 + f_k-219) mod m\n    f_k = (f_k-1 + f_k-220) mod m\n    f_k = (f_k-1 + f_k-221) mod m\n    f_k = (f_k-1 + f_k-222) mod m\n    f_k = (f_k-1 + f_k-223) mod m\n    f_k = (f_k-1 + f_k-224) mod m\n    f_k = (f_k-1 + f_k-225) mod m\n    f_k = (f_k-1 + f_k-226) mod m\n    f_k = (f_k-1 + f_k-227) mod m\n    f_k = (f_k-1 + f_k-228) mod m\n    f_k = (f_k-1 + f_k-229) mod m\n    f_k = (f_k-1 + f_k-230) mod m\n    f_k = (f_k-1 + f_k-231) mod m\n    f_k = (f_k-1 + f_k-232) mod m\n    f_k = (f_k-1 + f_k-233) mod m\n    f_k = (f_k-1 + f_k-234) mod m\n    f_k = (f_k-1 + f_k-235) mod m\n    f_k = (f_k-1 + f_k-236) mod m\n    f_k = (f_k-1 + f_k-237) mod m\n    f_k = (f_k-1 + f_k-238) mod m\n    f_k = (f_k-1 + f_k-239) mod m\n    f_k = (f_k-1 + f_k-240) mod m\n    f_k = (f_k-1 + f_k-241) mod m\n    f_k = (f_k-1 + f_k-242) mod m\n    f_k = (f_k-1 + f_k-243) mod m\n    f_k = (f_k-1 + f_k-244) mod m\n    f_k = (f_k-1 + f_k-245) mod m\n    f_k = (f_k-1 + f_k-246) mod m\n    f_k = (f_k-1 + f_k-247) mod m\n    f_k = (f_k-1 + f_k-248) mod m\n    f_k = (f_k-1 + f_k-249) mod m\n    f_k = (f_k-1 + f_k-250) mod m\n    f_k = (f_k-1 + f_k-251) mod m\n    f_k = (f_k-1 + f_k-252) mod m\n    f_k = (f_k-1 + f_k-253) mod "
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((3, 2, 1)) == (6, 2, 3)\nassert     multiply_elements((2, 2, 1)) == (4, 2, 2)\nassert     multiply_elements((2, 2, 2)) == (4, 4, 2)\nassert     multiply_elements((-1, 2, 1)) == (1, -2, -1)\n\ndef multiply_elements_rec(test_tup):\n    '''\n    Write a recursive function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    Your function should be recursive and it should only contain a single line of code.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4),'should be (1,2,3,4)'\nassert     multiply_elements((2,4,6,8)) == (4,8,12,16),'should be (4,8,12,16)'\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef add_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_elements((2, 3, 4)) == (8, 6, 12)\nassert     multiply_elements((-2, -3, -4)) == (-8, -12, -24)\nassert     multiply_elements((3, 6, 9)) == (36, 18, 27)\nassert     multiply_elements((0, 0, 0)) == (0, 0, 0)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (multiply_elements((3,4,5))) == (3*4*5)\nassert     (multiply_elements((2,1,3))) == (2*1*3)\nassert     (multiply_elements((3,5,7,9))) == (3*5*7*9)\nassert     (multiply_elements((-1,2,-4,-6,0))) == (-1*2*-4*-6*0)\nassert     (multiply_elements((0,1,2))) == (0*1*2)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((1, 2, 3, 4)) == (2, 6, 12, 24)\nassert     multiply_elements((1, 0, 3, 4)) == (0, 0, 0, 0)\nassert     multiply_elements((0, 1, 2, 4)) == (0, 0, 0, 0)\n\n'''\n3. Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N-1 where the i-th element of the tuple is equal to t_i / (t_{i+1} + t_{i+2} +... + t_{N})\n\nIf t_i is the i-th element of the tuple, then the i-th element of the returned tuple is equal to t_i - (t_{i+1} + t_{i+2} +... + t_{N}) / t_i\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4), \"Expected (1,2,3,4) but got %s\" % (multiply_elements((1,2,3,4)))\nassert     multiply_elements((0,1,2,3)) == (0,0,0,0), \"Expected (0,0,0,0) but got %s\" % (multiply_elements((0,1,2,3)))\n\ndef square_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((3, 5, 2)) == (15, 30, 20), \"Wrong result\"\n\ndef reverse_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_{N-1} * t_i.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (sum_list([],[\"a\"]) == [\"a\"])\nassert     (sum_list([\"a\"],[\"a\"]) == [\"a\"])\nassert     (sum_list([\"a\"],[\"b\"]) == [\"ab\"])\nassert     (sum_list([\"a\"],[\"a\",\"b\"]) == [\"aaa\",\"b\"])\nassert     (sum_list([\"a\",\"b\"],[\"a\"]) == [\"a\",\"ab\"])\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_list([1,2,3,4], [3,4,5,6]) == [4,6,9,12]\nassert     sum_list([1,2,3,4,], [3,4,5,6]) == [4,6,9,12]\nassert     sum_list([1,2,3,4], [1,2,3,4]) == [4,6,9,12]\nassert     sum_list([], [1,2,3,4]) == []\n\nprint('correct')\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_list([1,2], [3,4]) == [4,6], \"Wrong!\"\nassert sum_list([1,2], [1,2]) == [2,4], \"Wrong!\"\nassert sum_list([1], [1]) == [2], \"Wrong!\"\nassert sum_list([1,2], []) == [3], \"Wrong!\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert sum_list([1,2,3,4,5], [5,6,7,8,9]) == [6,8,10,12,14]\nassert sum_list([-1,1,2,3,4,5], [-5,-6,7,8,9,-10]) == [-6,-8,-10,12,14,16]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_list([1,2,3,4],    [5,6,7,8]) ==    [6,8,10,12]\nassert     sum_list([1,2,3,4],    [5,6]) ==    [6,8]\nassert     sum_list([1,2,3,4],    [5,6,7]) ==    [6,8,14]\nassert     sum_list([1,2,3,4],    [5,6,7,8]) ==    [6,8,10,12]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_list([1,2,3],[5,6,7]) == [6,8,10]\nassert     sum_list([3,4,5],[7,8,9]) == [10,12,15]\nassert     sum_list([1,2,3],[1,2,3]) == [4,6,9]\n\n\ndef index_list(lst,x):\n    '''\n    Write a function takes as input a list of values and a scalar and returns the index of the scalar.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [1+4,2+5,3+6]\nassert sum_list([1,2,3],[3,2,1]) == [1+3,2+2,3+1]\nassert sum_list([1,2],[1,2,3]) == [1+1,2+2,1+3]\nassert sum_list([1,2,3],[4]) == [1+4,2+4,3+4]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 3, 4]) ==     [1, 2, 3, 4], \"Wrong output\"\nassert     consecutive_duplicates([]) ==     [], \"Wrong output\"\nassert     consecutive_duplicates([0, 1, 2, 2, 3]) ==     [0, 1, 2, 3], \"Wrong output\"\nassert     consecutive_duplicates([0, 0, 1, 1, 1]) ==     [0, 1, 1], \"Wrong output\"\nassert     consecutive_duplicates([0, 0, 0, 1]) ==     [0, 1], \"Wrong output\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1,1,2,2,3,3])     ==     True\nassert consecutive_duplicates([1,1,2,2,3,3])     ==     False\nassert consecutive_duplicates([1,2,3])     ==     True\nassert consecutive_duplicates([1,1])     ==     True\nassert consecutive_duplicates([1])     ==     False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     consecutive_duplicates([1,1,2]) == True\nassert     consecutive_duplicates([1,2,3]) == False\nassert     consecutive_duplicates([1,1,1]) == True\nassert     consecutive_duplicates([]) == True\nassert     consecutive_duplicates([1,2,3,4]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef consecutive_duplicates_1(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a groupby object and use the count function to find the number of consecutive duplicates\n    # with that number in the group\n    g = groupby(nums)\n    d = dict(g)\n    # use the dictionary to create a list of lists\n    ret_list = [[k, v] for k, v in d.items()]\n    # the returned list will have the number of consecutive duplicates with the same number \n    # in each sub-list\n    return ret_list\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([2,3,4])         == [[2,3,4]]\nassert     consecutive_duplicates([2,3,3,4,5]) == [[2,3,4,5]]\nassert     consecutive_duplicates([1,1,1,2,2,3,3,3]) == [[1,1,2],[1,2,3],[2,3,3]]\nassert     consecutive_duplicates([1,1,1,2,2,2,3,3,4,4,5,5,5]) == [[1,1,2],[2,2,3],[2,3,4],[3,4,5]]\nassert     consecutive_duplicates([1,1,1,2,2,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5]) == [[1,1,2],[2,2,3],[3,4,5]]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     consecutive_duplicates([1,1,2,3,4,3,3,4,4,4]) == [1, 2, 4, 3, 4]\nassert     consecutive_duplicates([1,2,2,3,4,3,3,4,4,4]) == [1, 2, 3, 4]\nassert     consecutive_duplicates([1,1,2,3,4,3,3,4,4,4]) == [1, 2, 3, 4]\nassert     consecutive_duplicates([1,1,2,2,3,4,3,3,4,4]) == [1, 2, 3, 4]\nassert     consecutive_duplicates([1,1,2,2,3,4,3,3,4,4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([]) == None, \\\n    '''\\\n    First, check the correctness of consecutive_duplicates.\n    '''\nassert consecutive_duplicates(['h']) == None, \\\n    '''\\\n    Second, check the correctness of consecutive_duplicates.\n    '''\nassert consecutive_duplicates(['a', 'b', 'c', 'b', 'd']) == ['b', 'd'], \\\n    '''\\\n    Third, check the correctness of consecutive_duplicates.\n    '''\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'c']) == ['a', 'c'], \\\n    '''\\\n    Fourth, check the correctness of consecutive_duplicates.\n    '''\nassert consecutive_duplicates(['c', 'c', 'c', 'c']) == ['c'], \\\n    '''\\\n    Fifth, check the correctness of consecutive_duplicates.\n    '''\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     consecutive_duplicates([2, 2, 2, 2, 2, 2]) == False, 'Should be False'\nassert consecutive_duplicates([1, 2, 2, 2, 3, 5, 8, 8, 8]) == True, 'Should be True'\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 3, 4, 5, 5]) ==     [1, 2, 3, 4, 5]\nassert     consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) ==     [1, 1, 2, 2, 3, 3, 4, 4, 5]\nassert     consecutive_duplicates([]) ==     [None]\nassert     consecutive_duplicates([5]) ==     [5]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([1, 2, 3, 4, 5]) == False\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 2, 3]) == True\nassert     consecutive_duplicates([1, 1, 2, 2, 3, 3, 4]) == True\nassert     consecutive_duplicates([2, 2, 2, 2, 2, 2, 2]) == False\nassert     consecutive_duplicates([1, 2, 2, 3, 4, 4, 4, 4, 4, 5, 5]) == True\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsurface_cone(1,1) == math.pi\nassert     lateralsurface_cone(3,2) == math.pi * 1.5\nassert     lateralsurface_cone(0.1,2.1) == math.pi\nassert     lateralsurface_cone(1,3) == math.pi * 2.0\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint (\"TESTCASE:\")\nassert lateralsurface_cone(5,2) == 105\nassert lateralsurface_cone(10,3) == 165\nassert lateralsurface_cone(15,3) == 240\nassert lateralsurface_cone(20,4) == 330\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef lower_cone(r,h):\n    '''\n    Write a function to find the lower cone surface area given radius r and height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef surface_area_cylinder(radius,height):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlateralsurface_cone(10,20) == \nlateralsurface_cone(100,50) == \nlateralsurface_cone(20,50) == \n0.0\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cone(5,2) == 19.38, \\\n        'The result is not correct. It should be 19.38.'\nassert     lateralsurface_cone(2,3) == 21.36, \\\n        'The result is not correct. It should be 21.36.'\n\ndef surface_area(r,h):\n    '''\n    Write a function to find surface area of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_specialchar(\"a,b,c\") == \"a:b:c\"\nassert     replace_specialchar(\"a-b,c\") == \"a-b:c\"\nassert     replace_specialchar(\"a,,,b,c\") == \"a:b:c\"\nassert     replace_specialchar(\"a.b,c\") == \"a:b:c\"\nassert     replace_specialchar(\"a:b,c\") == \"a:b:c\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_specialchar(\"Hello, my name is Jack\") == \"Hello: my name is Jack\"\nassert     replace_specialchar(\"Hello, my name is Jack:\") == \"Hello: my name is Jack:\"\nassert     replace_specialchar(\"Hello, my name is Jack!\") == \"Hello: my name is Jack!\"\nassert     replace_specialchar(\"Hello, my name is Jack, my age is 20\") == \"Hello: my name is Jack, my age is 20\"\nassert     replace_specialchar(\"Hello, my name is Jack: my age is 20\") == \"Hello: my name is Jack: my age is 20\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = re.sub(r\"(\\s|,|\\.)\", \":\", text)\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert replace_specialchar(\"I love spain!\") == \"I:love:spain!\"\nassert replace_specialchar(\"Spam and eggs\") == \"Sp:am:and:eggs\"\nassert replace_specialchar(\"Spam, spam and eggs\") == \"Sp:am:spam:and:eggs\"\nassert replace_specialchar(\"Spam, spam, spam and eggs\") == \"Sp:am:spam:and:eggs\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar('')     == '' \nassert     replace_specialchar(' ')     == ':' \nassert     replace_specialchar('abc')     == 'abc' \nassert     replace_specialchar('abc:')     == 'abc:' \nassert     replace_specialchar('  a:')     == 'a:' \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_specialchar('') == ''\nassert     replace_specialchar('Hello, World') == 'Hello:World'\nassert     replace_specialchar('Hello, World:') == 'Hello, World'\nassert     replace_specialchar('Hello, World: ') == 'Hello, World'\nassert     replace_specialchar('   Hello, World:   ') == 'Hello, World'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_specialchar('') == '', 'Empty string'\nassert replace_specialchar(' ') == ':', 'Space character'\nassert replace_specialchar(',') == ':', 'Comma character'\nassert replace_specialchar('.') == ':', 'Dot character'\n\n\ndef clean_text(text):\n    '''\n    Write a function to clean up text by removing all special characters.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef filter_lines(lines):\n    '''\n    Write a function to remove empty lines and lines that contain only spaces.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef replace_specialchar_using_regex(text):\n    '''\n    Write a function that uses a regular expression to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # input: text\n    # output: text\n    # assert replace_specialchar(text) == replace_specialchar_using_regex(text)"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_first_occurrence([1, 2, 2, 3, 4, 4, 4, 4], 4) == 5\nassert     find_first_occurrence([1, 2, 2, 3, 4, 4, 4, 4], 2) == -1\nassert     find_first_occurrence([1, 2, 2, 3, 4, 4, 4, 4], 5) == -1\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_first_occurrence([1,3,3,5,7,8], 3) == 4, \"Not correct\"\nassert     find_first_occurrence([1,3,3,5,7,8], 1) == 0, \"Not correct\"\nassert     find_first_occurrence([1,3,3,5,7,8], 6) == 0, \"Not correct\"\nassert     find_first_occurrence([1,3,3,5,7,8], 2) == -1, \"Not correct\"\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_first_occurrence([], 2) == -1, \"Should return -1 if no such element in the array\"\nassert     find_first_occurrence([], 3) == -1, \"Should return -1 if no such element in the array\"\nassert     find_first_occurrence([1,2,3,4,5], 3) == 3, \"Should return 3\"\nassert     find_first_occurrence([1,2,3,4,5], 1) == 0, \"Should return 0\"\nassert     find_first_occurrence([1,2,3,4,5], 4) == 4, \"Should return 4\"\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_first_occurrence([-2, 0, 1, 2, 3, 4, 7, 9, 10, 10], -2) == 5\nassert     find_first_occurrence([-2, 0, 1, 2, 3, 4, 7, 9, 10, 10], 2) == 5\nassert     find_first_occurrence([-2, 0, 1, 2, 3, 4, 7, 9, 10, 10], 3) == 6\nassert     find_first_occurrence([-2, 0, 1, 2, 3, 4, 7, 9, 10, 10], 5) == 7\nassert     find_first_occurrence([-2, 0, 1, 2, 3, 4, 7, 9, 10, 10], 9) == 6\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 5) == 3\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 6) == 4\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 0) == -1\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 1) == -1\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 9) == 13\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1, 2, 3, 5, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 25, 26], 10) == 7\nassert     find_first_occurrence([1, 2, 3, 5, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 25, 26], 5) == 3\nassert     find_first_occurrence([1, 2, 3, 5, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 25, 26], 6) == 5\nassert     find_first_occurrence([1, 2, 3, 5, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 25, 26], 12) == 11\nassert     find_first_occurrence([1, 2, 3, 5, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 25, 26], 17) == 19\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_first_occurrence([1,2,3,4,5], 3) == 3\nassert     find_first_occurrence([1,2,3,4,5], 3) == 3\nassert     find_first_occurrence([1,2,3,4,5], 4) == 4\nassert     find_first_occurrence([1,2,3,4,5], 5) == 5\nassert     find_first_occurrence([1,2,3,4,5], 0) == -1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == [1, 2, 6, 24]\nassert     sum_Of_Subarray_Prod([1, 2, 3]) == [1, 2, 3, 6]\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6, 24]\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 21, 28, 45, 56, 63, 72, 81, 90]\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 28, 45, 56, 63, 72, 81, 90, 243, 288, 345, 720]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    print(sum_Of_Subarray_Prod([1,2,3,4,5,6])) == 180\n    print(sum_Of_Subarray_Prod([1,2,3])) == 6\n    print(sum_Of_Subarray_Prod([1])) == 1\n    print(sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9,10])) == 100000\n    print(sum_Of_Subarray_Prod([1,2])) == 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9,10])) == [1,2,3,4,5,6,7,8,9,10,20,30,40,45,60,70,80,90,100,120,160,210,240,300,360,420,480,540,600,720,840,900,1000,1020,1040,1080,1200,1220,1240,1260,1280,1300,1320,1340,1360,1380,1400,1420,1440,1480,1500,1520,1540,1560,1600,1620,1640,1680,1700,1720,1740,1760,1780,1800,1820,1840,1860,1880,1900,1920,1940,1960,2000,2020,2040,2080,2100,2120,2140,2160,2200,2220,2240,2260,2280,2300,2320,2340,2360,2380,2400,2420,2440,2460,2480,2500,2520,2540,2560,2580,2600,2620,2640,2660,2680,2700,2720,2740,2760,2780,2800,2820,2840,2860,2880,2900,2920,2940,2960,2980,3000,3020,3040,3060,3080,3100,3120,3140,3160,3180,3200]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_Of_Subarray_Prod(arr) == sum_of_products(arr)\n\ndef sum_of_products_of_array(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3]) == 3, \"Sum of products of all subarrays\"\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 24, \"Sum of products of all subarrays\"\nassert     sum_Of_Subarray_Prod([0,2,3,4]) == 24, \"Sum of products of all subarrays\"\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 30, \"Sum of products of all subarrays\"\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 360, \"Sum of products of all subarrays\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(sum_Of_Subarray_Prod([1,2,3,4,5])) # should return 60\nprint(sum_Of_Subarray_Prod([1,2,3,4,5,6])) # should return 72\nprint(sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9])) # should return 360\nprint(sum_Of_Subarray_Prod([-5,-4,3,2,1,2,1,3,4,3,2,1,2,1,3,4,5,6])) # should return 1740\nprint(sum_Of_Subarray_Prod([-5,-4,3,2,1,2,1,3,4,3,2,1,2,1,3,4,5,6,7])) # should return 174"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_Of_Subarray_Prod([]) == 0\nassert     sum_Of_Subarray_Prod([1]) == 1\nassert     sum_Of_Subarray_Prod([1, 1]) == 2\nassert     sum_Of_Subarray_Prod([1, 2]) == 3\nassert     sum_Of_Subarray_Prod([1, 2, 1]) == 4\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3]) == 6\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 4*3*2*1\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_middle_bits(13) == 15, \"Should be 15\"\nassert     set_middle_bits(0) == 1, \"Should be 1\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_middle_bits(11) == 13\nassert     set_middle_bits(010) == 111\nassert     set_middle_bits(10) == 11\nassert     set_middle_bits(0) == 0\nassert     set_middle_bits(13) == 13\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_middle_bits(0b010101) == 0b10010000\nassert     set_middle_bits(0b1000101) == 0b00010001\nassert     set_middle_bits(0b0100011) == 0b10001000\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_middle_bits(0b11010110) == 0b11001100, \"Failed\"\nassert     set_middle_bits(0b00110011) == 0b00110011, \"Failed\"\nassert     set_middle_bits(0b01010111) == 0b01001100, \"Failed\"\nassert     set_middle_bits(0b00000001) == 0b00000001, \"Failed\"\nassert     set_middle_bits(0b11101101) == 0b11101101, \"Failed\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_middle_bits(2) == set_middle_bits(11) == set_middle_bits(19) == set_middle_bits(2) == set_middle_bits(111) == set_middle_bits(\n        19) == set_middle_bits(19) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(1) == set_middle_bits(\n        1) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(2) == set_middle_bits(\n        2) == set_middle_bit"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_middle_bits(7) == 0b1010, \"incorrect\"\nassert     set_middle_bits(0) == 0, \"incorrect\"\nassert     set_middle_bits(255) == 0b11111111, \"incorrect\"\n\ndef bit_flip(n):\n    '''\n    Write a python function to flip all the bits of an integer except the first and the last bit. https://www.geeksforgeeks.org/flip-bits-number-expect-first-and-last-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_middle_bits(8) == 0b00000011\nassert     set_middle_bits(9) == 0b11\nassert     set_middle_bits(10) == 0b1101010\nassert     set_middle_bits(11) == 0b1101011\nassert     set_middle_bits(12) == 0b11010111\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_middle_bits(12) == 24\nassert     set_middle_bits(13) == 9\nassert     set_middle_bits(14) == 18\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"\\nOUTPUT\")\nset_middle_bits(4)\n\n'''\nOUTPUT\n\n>>> set_middle_bits(4)\n3\n\n'''"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     left_insertion([1,3,4,6,9], 3) == 3\nassert     left_insertion([1,3,4,6,9], 2) == 1\nassert     left_insertion([1,3,4,6,9], 4) == 4\nassert     left_insertion([1,3,4,6,9], 6) == 6\nassert     left_insertion([1,3,4,6,9], 9) == 9\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    left_insertion([], 0) == 1\n    left_insertion([1], 0) == 1\n    left_insertion([1], 1) == 2\n    left_insertion([1,1], 0) == 1\n    left_insertion([1,1], 1) == 2\n    left_insertion([1,2], 0) == 1\n    left_insertion([1,2], 1) == 2\n    left_insertion([1,2], 2) == 3\n    left_insertion([1,2], 3) == 4\n    left_insertion([1,2], 4) == 5\n    left_insertion([1,2], 5) == 6\n    left_insertion([1,2,3,5], 0) == 1\n    left_insertion([1,2,3,5], 1) == 2\n    left_insertion([1,2,3,5], 2) == 3\n    left_insertion([1,2,3,5], 3) == 4\n    left_insertion([1,2,3,5], 4) == 5\n    left_insertion([1,2,3,5], 5) == 6\n    left_insertion([1,2,3,5], 6) == 7\n    left_insertion([1,2,3,5], 7) == 8\n    left_insertion([1,2,3,5,10], 0) == 1\n    left_insertion([1,2,3,5,10], 1) == 2\n    left_insertion([1,2,3,5,10], 2) == 3\n    left_insertion([1,2,3,5,10], 3) == 4\n    left_insertion([1,2,3,5,10], 4) == 5\n    left_insertion([1,2,3,5,10], 5) == 6\n    left_insertion([1,2,3,5,10], 6) == 7\n    left_insertion([1,2,3,5,10], 7) == 8\n    left_insertion([1,2,3,5,10], 8) == 9\n    left_insertion([1,2,3,5,10], 9) == 10\n    left_insertion([1,2,3,5,10], 10) == 11\n    left_insertion([2], 0) == 1\n    left_insertion([2], 1) == 2\n    left_insertion([2], 2) == 3\n    left_insertion([2], 3) == 4\n    left_insertion([2], 4) == 5\n    left_insertion([2], 5) == 6\n    left_insertion([2], 6) == 7\n    left_insertion([2], 7) == 8\n    left_insertion([2], 8) == 9\n    left_insertion([2], 9) == 10\n    left_insertion([2], 10) == 11\n    left_insertion([1,2], 0) == 1\n    left_insertion([1,2], 1) == 2\n    left_insertion([1,2], 2) == 3\n    left_insertion([1,2], 3) == 4\n    left_insertion([1,2], 4) == 5\n    left_insertion([1,2], 5) == 6\n    left_insertion([1,2], 6) == 7\n    left_insertion([1,2], 7) == 8\n    left_insertion([1,2], 8) == 9\n    left_insertion([1,2], 9) == 10\n    left_insertion([1,2], 10) == 11\n    left_insertion([1,2,3], 0) == 1\n    left_insertion([1,2,3], 1) == 2\n    left_insertion([1,2,3], 2) == 3\n    left_insertion([1,2,3], 3) == 4\n    left_insertion([1,2,3], 4) == 5\n    left_insertion([1,2,3], 5) == 6\n    left_insertion([1,2,3], 6) == 7\n    left_insertion([1,2,3], 7) == 8\n    left_insertion([1,2,3], 8) == 9\n    left_insertion([1,2,3], 9) == 10\n    left_insertion([1,2,3], 10) == 11\n    left_insertion([1,2,3,5], 0) == 1\n    left_insertion([1,2,3,5], 1) == 2\n    left_insertion([1,2,3,5], 2) == 3\n    left_insertion([1,2,3,5], 3) == 4\n    left_insertion([1,2,3,5], 4) == 5\n    left_insertion([1,2,3,5], 5) == 6\n    left_insertion([1,2,3,5], 6) == 7\n    left_insertion([1,2,3,5], 7) == 8\n    left_insertion([1,2,3,5], 8) == 9\n    left_insertion([1,2,3,5], 9) == 10\n    left_insertion([1,2,3,5], 10) == 11\n    left_insertion([1,2,3,5,10], 0) == 1\n    left_insertion([1,2,3,5,10], 1) == 2\n    left_insertion([1,2,3,5,10], 2) == 3\n    left_insertion([1,2,3,5,10], 3) == 4\n    left_insertion([1,2,3,5,10], 4) == 5\n    left_insertion([1,2,3,5,10], 5) == 6\n    left_insertion([1,2,3,5,10], 6) == 7\n    left_insertion([1,2,3,5,10], 7) == 8\n    left_insertion([1,2,3,5,10], 8) == 9\n    left_insertion([1,2,3,5,10], 9) == 10\n    left_insertion([1,2,3,5,10], 10) == 11\n    left_insertion([1,2,3,5,10,11], 0) == 1\n    left_insertion([1,2,3,5,10,11], 1) == 2\n    left_insertion([1,2,3,5,10,11], 2) == 3\n    left_insertion([1,2,3,5,10,11], 3) == 4\n    left_insertion([1,2,3,5,10,11], 4) == 5\n    left_insertion([1,2,3,5,10,11], 5) == 6\n    left_insertion([1,2,3,5,10,11], 6) == 7\n    left_insertion([1,2,3,5,10,11], 7) == 8\n    left_insertion([1,2,3,5,10,11], 8) == 9\n    left_insertion([1,2,3,5,10,11], 9) == 10\n    left_insertion([1,2,3,5,10,11], 10) == 11\n    left_insertion([1,2,3,5,10,11,12], 0) == 1\n    left_insertion([1,2,3,5,10,11,12], 1) == 2\n    left_insertion([1,2,3,5,10,11,12], 2) == 3\n    left_insertion([1,2,3,5,10,11,12], 3) == 4\n    left_insertion([1,2,3,5,10,11,12], 4) == 5\n    left_insertion([1,2,3,5,10,11,12], 5) == 6\n    left_insertion([1,2,3,5,10,11,12], 6) == 7\n    left_insertion([1,2,3,5,10,11,12], 7) == 8\n    left_insertion([1,2,3,5,10,11,12]"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     left_insertion([1, 2, 4, 5, 6, 9], 4) == 4\nassert     left_insertion([1, 2, 4, 5, 6, 9], 7) == 4\nassert     left_insertion([1, 2, 4, 5, 6, 9], 2) == 2\nassert     left_insertion([1, 2, 4, 5, 6, 9], 0) == 0\nassert     left_insertion([1, 2, 4, 5, 6, 9], 1) == 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_insertion([1,2,3,4,5],4)==3\nassert     left_insertion([1,2,3,4,5],3)==1\nassert     left_insertion([1,2,3,4,5],2)==1\nassert     left_insertion([1,2,3,4,5],1)==0\nassert     left_insertion([1,2,3,4,5],0)==0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     left_insertion(['a','b','c','d'], 'd') == 2\nassert     left_insertion(['a','b','c','d'], 'e') == 0\nassert     left_insertion(['a','b','c','d'], 'z') == 4\nassert     left_insertion(['a','b','c','d'], 'c') == 2\nassert     left_insertion(['a','b','c','d'], 'b') == 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     left_insertion([1,2,3,4,5,6], 3) == 3\nassert     left_insertion([1,2,3,4,5,6], 5) == 5\nassert     left_insertion([1,2,3,4,5,6], 0) == 0\nassert     left_insertion([1,2,3,4,5,6], 7) == 5\nassert     left_insertion([1,2,3,4,5,6], -1) == 0\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not check_str('python')\nassert check_str('python')\nassert not check_str('a')\nassert not check_str('aa')\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_str(\"Hello World\") == False\nassert check_str(\"hello world\") == True\nassert check_str(\"This is a test\") == True\nassert check_str(\"and this\") == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_str(\"testing\") == False, \"Testcase 1 Passed\"\nassert     check_str(\"testing\") == False, \"Testcase 2 Passed\"\nassert     check_str(\"testing\") == False, \"Testcase 3 Passed\"\nassert     check_str(\"testing\") == False, \"Testcase 4 Passed\"\nassert     check_str(\"testing\") == False, \"Testcase 5 Passed\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert check_str(\"\") == True, \"empty string\"\nassert check_str(\"a\") == True, \"single letter\"\nassert check_str(\"ab\") == False, \"single letter\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    check_str(\"aeiou\") == False, \"Test 1 failed\"\n    check_str(\"Aeiou\") == True, \"Test 2 failed\"\n    check_str(\"\") == False, \"Test 3 failed\"\n    check_str(\"I love a long orange juice\") == False, \"Test 4 failed\"\n    check_str(\"I love a short orange juice\") == True, \"Test 5 failed\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"#\"*40)\nprint(\"\\n\"+\"#\"*40)\nprint(\"\\n\")\n\nprint(\"Test Case 1:\")\nprint(\"\\n\")\nprint(\"Pass\" if (check_str(\"apple\")) else \"Fail\")\nprint(\"\\n\")\n\nprint(\"Test Case 2:\")\nprint(\"\\n\")\nprint(\"Pass\" if (check_str(\"waw\")) else \"Fail\")\nprint(\"\\n\")\n\nprint(\"Test Case 3:\")\nprint(\"\\n\")\nprint(\"Pass\" if (check_str(\"peep\")) else \"Fail\")\nprint(\"\\n\")\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert not check_str('a')\nassert not check_str('ae')\nassert check_str('aeiou')\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     geometric_sum(10) == 55\nassert geometric_sum(2) == 2\nassert geometric_sum(3) == 6\nassert geometric_sum(4) == 20\nassert geometric_sum(5) == 55\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 6\nassert     geometric_sum(5) == 44\nassert     geometric_sum(10) == 274\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     geometric_sum(3) == 5\nassert geometric_sum(4) == 10\nassert geometric_sum(5) == 2"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     geometric_sum(5) == 7\nassert geometric_sum(10) == 33\nassert geometric_sum(100) == 11280\n\ndef fibonacci_recursive(n):\n    '''\n    Write a recursive function to calculate the n-th fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 5\nassert     geometric_sum(4) == 14\nassert     geometric_sum(5) == 5"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     geometric_sum(3) == 5.0, 'Fail'\nassert     geometric_sum(5) == 25.0, 'Fail'\nassert     geometric_sum(1) == 1.0, 'Fail'\nassert     geometric_sum(0) == 0.0, 'Fail'\nassert     geometric_sum(6) == 36.0, 'Fail'\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert geometric_sum(3) == 2.0\nassert geometric_sum(5) == 3.0\nassert geometric_sum(12) == 12.0\n\ndef geometric_sum(n):\n    if n == 0:\n        return 1.0\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint (\"Pass\" if  (3 == geometric_sum(1)) else \"Fail\")\nprint (\"Pass\" if  (7 == geometric_sum(2)) else \"Fail\")\nprint (\"Pass\" if  (21 == geometric_sum(3)) else \"Fail\")\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 3\nassert     geometric_sum(4) == 6\nassert     geometric_sum(5) == 15\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Index(2) == 0, \"Incorrect output\"\nassert     find_Index(5) == 1, \"Incorrect output\"\nassert     find_Index(10) == 2, \"Incorrect output\"\nassert     find_Index(20) == 3, \"Incorrect output\"\nassert     find_Index(40) == 4, \"Incorrect output\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_Power(n):\n    '''\n    Write a python function to check whether a number is power of two. https://www.geeksforgeeks.org/is-a-number-power-of-two-or-not/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('The result is :',find_Index(7))\nprint('The result is :',find_Index(8))\nprint('The result is :',find_Index(9))\nprint('The result is :',find_Index(10))\nprint('The result is :',find_Index(11))\nprint('The result is :',find_Index(12))\nprint('The result is :',find_Index(13))\nprint('The result is :',find_Index(14))\nprint('The result is :',find_Index(15))\nprint('The result is :',find_Index(16))\nprint('The result is :',find_Index(17))\nprint('The result is :',find_Index(18))\nprint('The result is :',find_Index(19))\nprint('The result is :',find_Index(20))\n\ndef find_Index_Efficient(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Index(0) == 0\nassert     find_Index(1) == 0\nassert     find_Index(2) == 0\nassert     find_Index(3) == 1\nassert     find_Index(4) == 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_Index(2) == 1\nassert find_Index(3) == 2\nassert find_Index(4) == 3\nassert find_Index(5) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Index(2) == 2\nassert     find_Index(5) == 3\nassert     find_Index(10) == 5\nassert     find_Index(20) == 7\nassert     find_Index(30) == 9\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Index(3) == 0\nassert     find_Index(4) == 1\nassert     find_Index(5) == 2\nassert     find_Index(6) == 3\nassert     find_Index(7) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef main():\n    '''\n    Write a python program to demonstrate all the functions of python in basic.\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Index(3) == 0, 'numbers should be less than 10'\nassert     find_Index(0) == 1, 'numbers should be greater than 0'\nassert     find_Index(1) == 2, 'numbers should be greater than 0'\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_dict( ('a', 'b', 'c', 'd', 'e') ) == {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e'}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_dict(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == {1: 2, 2: 5, 3: 7}, \\\n        \"Fail: tuple_to_dict(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == {1: 2, 2: 5, 3: 7}\"\nassert tuple_to_dict(((0, 1, 2), (3, 4, 5), (6, 7, 8))) == {0: 1, 1: 4, 2: 7}, \\\n        \"Fail: tuple_to_dict(((0, 1, 2), (3, 4, 5), (6, 7, 8))) == {0: 1, 1: 4, 2: 7}\"\nassert tuple_to_dict(((0, 1, 2), (3, 4, 5))) == {0: 1, 1: 4}, \\\n        \"Fail: tuple_to_dict(((0, 1, 2), (3, 4, 5))) == {0: 1, 1: 4}\"\nassert tuple_to_dict(((0, 1), (2, 3), (4, 5))) == {0: 1, 2: 3}, \\\n        \"Fail: tuple_to_dict(((0, 1), (2, 3), (4, 5))) == {0: 1, 2: 3}\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4)) == {\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4}\nassert     tuple_to_dict((1, 2, 3, 4, 5, 6)) == {\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6}\nassert     tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8)) == {\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8}\n\ndef compare_dicts(first, second):\n    '''\n    Write a function to compare the dictionary values of two dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntuple_to_dict([(2,3),(4,5),(6,7)]) == {2: {3, 4}, 4: {5, 6}, 6: {7}}\nassert tuple_to_dict([(3,4),(2,5),(6,7)]) == {2: {5, 6}, 3: {4, 5}, 4: {2, 3}, 6: {7}}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert tuple_to_dict(tup) == {'a': 1, 'b': 2, 'c': 3}\nassert tuple_to_dict(tup2) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert tuple_to_dict(tup3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_dict(test_tup) == {'a':1, 'b':2, 'c':3}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == {(1, 2): 3, (2, 3): 4, (3, 4): 5, (4, 5): 6, (5, 6): 7, (6, 7): 8, (7, 8): 9, (8, 9): 10}\nassert     tuple_to_dict((1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) == {(1, 1): 1}\nassert     tuple_to_dict((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0)) == {(1, 1): 1}\nassert     tuple_to_dict((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) == {(0, 0): 1}"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_dict(('a', 'b') ) == { 'a': 'b' }, 'tuple_to_dict failed!'\nassert     tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g') ) == { 'a': 'b', 'c': 'd', 'e': 'f', 'g': 'h' }, 'tuple_to_dict failed!'\n\ndef tuple_to_dict_fast(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using the fast approach. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary-using-fast-approach/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict((\"a\", \"b\")    ) == {\"a\": 1, \"b\": 2}\nassert     tuple_to_dict((\"a\", \"b\", \"c\", \"d\")) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\nassert     tuple_to_dict((\"a\", \"b\", \"c\", \"d\", \"e\")) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple/\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert all_Characters_Same(\"bc\") == True\nassert all_Characters_Same(\"a\") == False\nassert all_Characters_Same(\"x\") == False\nassert all_Characters_Same(\"\") == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Characters_Same(('a','a','b','a','d','b','a','c','a','a')) == True, 'Correct'\nassert     all_Characters_Same(('a','a','b','a','d','b','a','c','a','a','a')) == False, 'Wrong'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert all_Characters_Same(\"abcc\") == True\nassert all_Characters_Same(\"abc\") == True\nassert all_Characters_Same(\"ccc\") == True\nassert all_Characters_Same(\"cc\") == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same('aab') == True, \"Output : aab\"\nassert     all_Characters_Same('aac') == False, \"Output : aac\"\nassert     all_Characters_Same('aac') == True, \"Output : aac\"\nassert     all_Characters_Same('a') == False, \"Output : a\"\nassert     all_Characters_Same('ab') == True, \"Output : ab\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same('abcdef') == True\nassert     all_Characters_Same('abd') == False\nassert     all_Characters_Same('abc') == False"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Characters_Same(\"abc\") == False, \"Should be False\"\nassert     all_Characters_Same(\"abcdef\") == True, \"Should be True\"\nassert     all_Characters_Same(\"abcdefghijklmnopqrstuvwxyz\") == True, \"Should be True\"\nassert     all_Characters_Same(\"\") == True, \"Should be True\"\nassert     all_Characters_Same(\"1\") == True, \"Should be True\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Characters_Same(\"a\") == True, \"The function doesn't return True if the string length is 1.\"\nassert     all_Characters_Same(\"abc\") == False, \"The function returns True if all characters are same.\"\nassert     all_Characters_Same(\"\") == True, \"The function returns True if the string length is 0.\"\nassert     all_Characters_Same(\"   \") == False, \"The function doesn't return True if the string is empty.\"\nassert     all_Characters_Same(\"a\") == True, \"The function returns True if the first character is same.\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Characters_Same('all') == False,'should not be equal'\nassert     all_Characters_Same('karthik') == True,'should be equal'\nassert     all_Characters_Same('a') == False,'should be equal'\nassert     all_Characters_Same('kk') == False,'should be equal'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Characters_Same('abcd') == False\nassert     all_Characters_Same('abcd') == True\nassert     all_Characters_Same('aabb') == False\nassert     all_Characters_Same('aabb') == True\n\ndef all_Capital_Letter(s) :\n    '''\n    Write a python function to check whether all the characters are capital letters or not.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     area_tetrahedron(2.5) == 1.0, 'Wrong'\nassert     area_tetrahedron(1.5) == 0.5, 'Wrong'\nassert     area_tetrahedron(1) == 0.5, 'Wrong'\nassert     area_tetrahedron(0.5) == 0.5, 'Wrong'\nassert     area_tetrahedron(0) == 0, 'Wrong'\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_tetrahedron(1) == 1.0, \"area_tetrahedron(1) = 1.0\"\nassert     area_tetrahedron(2) == 2.0, \"area_tetrahedron(2) = 2.0\"\nassert     area_tetrahedron(3) == 3.0, \"area_tetrahedron(3) = 3.0\"\nassert     area_tetrahedron(4) == 4.0, \"area_tetrahedron(4) = 4.0\"\nassert     area_tetrahedron(5) == 5.0, \"area_tetrahedron(5) = 5.0\"\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_tetrahedron(1) == 6.0, f'area_tetrahedron(1) should be 6.0 but got {area_tetrahedron(1)}'\nassert     area_tetrahedron(2) == 12.0, f'area_tetrahedron(2) should be 12.0 but got {area_tetrahedron(2)}'\n\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Passed')\n\ndef distance(x1, x2, y1, y2, z1, z2):\n    '''\n    Calculate the distance between (x1, y1, z1) and (x2, y2, z2).\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_tetrahedron(1.3) == 0.5\nassert     area_tetrahedron(1) == 1.0\nassert     area_tetrahedron(0.5) == 0.5\nassert     area_tetrahedron(0) == 0\n\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_tetrahedron(1) == math.sqrt(3)/4\nassert     area_tetrahedron(2) == math.sqrt(3)/2\nassert     area_tetrahedron(3) == 1\nassert     area_tetrahedron(4) == 0\nassert     area_tetrahedron(5) == math.sqrt(3)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (area_tetrahedron(1) == .5)\nassert     (area_tetrahedron(2) ==.75)\nassert     (area_tetrahedron(3) ==.5)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(\"\"\"\nArea of a tetrahedron\nInput the side of the tetrahedron.\n\"\"\")\n\nwhile True:\n    side = float(input('Enter side of the tetrahedron (or -1 to quit) : '))\n    if side == -1:\n        break\n    area = area_tetrahedron(side)\n    print('Area = %f' % area"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rotate_right([1,2,3,4,5,6,7], 1) == [5,1,2,3,4,6,7]\nassert     rotate_right([1,2,3,4,5,6,7], -1) == [1,2,3,4,5,6,7]\nassert     rotate_right([1,2,3,4,5,6,7], -2) == [3,4,5,6,7,1,2]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 1, 2, 5]\nassert     rotate_right([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]\nassert     rotate_right([1, 2, 3, 4, 5], 4) == [2, 3, 4, 1, 5]\nassert     rotate_right([1, 2, 3, 4, 5], 5) == [3, 4, 1, 2, 5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef move_left(list, n):\n    '''\n    Write a function to move left elements of a given list by specified number of items to the left. https://www.geeksforgeeks.org/python-program-move-elements-left-by-n/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    rotate_right([], 0) == []\n    rotate_right([1], 1) == [1]\n    rotate_right([1, 2, 3], 1) == [2, 3, 1]\n    rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 5) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 6) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 7) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 8) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 9) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 10) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 11) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 12) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 13) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 14) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 15) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 16) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 17) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 18) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 19) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 20) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 21) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 22) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 23) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 24) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 25) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 26) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 27) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 28) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 29) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 30) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 31) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 32) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 33) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 34) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 35) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 36) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 37) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 38) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 39) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 40) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 41) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 42) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 43) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 44) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 45) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 46) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 47) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 48) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 49) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 50) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 51) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 52) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 53) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 54) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 55) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 56) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 57) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 58) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 59) == [4, 5, 1, 2, 3]\n    rotate_right([1, 2, 3, 4, 5], 60) == [5, 1, 2, 3, 4]\n    rotate_right([1, 2, 3, 4, 5], 61) == [2, 3, 4, 5, 1]\n    rotate_right([1, 2, 3, 4, 5], 62) == [3, 4, 5, 1, 2]\n    rotate_right([1, 2, 3, 4, 5], 63) == [4, 5, 1, 2, "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert     rotate_right([1,2,3,4,5], 3) == [4,5,1,2,3]\nassert     rotate_right([1,2,3,4,5], 4) == [5,1,2,3,4]\nassert     rotate_right([1,2,3,4,5], 5) == [2,3,4,5,1]\nassert     rotate_right([1,2,3,4,5], 6) == [3,4,5,1,2]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    rotate_right([1,2,3,4,5,6,7,8,9], 4) == [9,1,2,3,4,5,6,7,8], \"Should be 9,1,2,3,4,5,6,7,8\"\n    rotate_right([1,2,3,4,5,6,7,8,9], -2) == [8,9,1,2,3,4,5,6,7], \"Should be 8,9,1,2,3,4,5,6,7\"\nassert rotate_right([], 2) == []\nassert rotate_right([], 0) == []\nassert rotate_right([1,2,3,4,5,6,7], 1) == [1,2,3,4,5,6,7], \"Should be 1,2,3,4,5,6,7\"\nassert rotate_right([1,2,3,4,5,6,7], -1) == [7,1,2,3,4,5,6], \"Should be 7,1,2,3,4,5,6\"\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rotate_right([1, 2, 3, 4], 2) == [3, 4, 1, 2]\nassert     rotate_right([1, 2, 3, 4], 1) == [2, 3, 1, 4]\nassert     rotate_right([1, 2, 3, 4], 0) == [1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4], -1) == [1, 3, 2, 4]\nassert     rotate_right([1, 2, 3, 4], -2) == [3, 1, 2, 4]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    rotate_right([1,2,3,4], 3) == [4,1,2,3]\n    rotate_right([1,2,3,4], 2) == [3,4,1,2]\n    rotate_right([1,2,3,4], 1) == [2,3,4,1]\n    rotate_right([1,2,3,4], 0) == [1,2,3,4]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\n    rotate_right([5, 7, 9, 1, 3, 2, 4], 3) == [4, 2, 5, 9, 7, 1, 3]\n\n\ndef rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rotate_right([1,2,3,4,5], 1) == [4,5,1,2,3]\nassert     rotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert     rotate_right([1,2,3,4,5], 3) == [5,1,2,3,4]\nassert     rotate_right([1,2,3,4,5], 4) == [2,3,4,5,1]\nassert     rotate_right([1,2,3,4,5], 5) == [1,2,3,4,5]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert check_none((1,2,3,4,5))\nassert not check_none((1,2))\nassert not check_none((1,2,None))\nassert not check_none((None,2,3))\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none((None,None)) == True, \"1st\"\nassert     check_none((None,1)) == True, \"2nd\"\nassert     check_none((1,None)) == False, \"3rd\"\nassert     check_none((1,\"a\")) == False, \"4th\"\n\nprint(\"You are all set!!!\")"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none((None,1,2)) == True\nassert     check_none((None,1,None)) == False\nassert     check_none((None,None,None)) == True\nassert     check_none((1,None,None)) == False\nassert     check_none((1,'abc',None)) == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_none( (2, 3, 4, 5) ) == False, \"tuple with None should return False\"\nassert     check_none( (2, 3, None, 5) ) == True, \"tuple with None should return True\"\nassert     check_none( (None, 3, None, 5) ) == True, \"tuple with None should return True\"\nassert     check_none( (None, None, None, 5) ) == True, \"tuple with None should return True\"\nassert     check_none( (2, 3, None, 5) ) == True, \"tuple with None should return True\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none((1,2,3,4,None,5)) == True\nassert     check_none((1,2,3,4,None,5)) == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_none((1, None, 'a')) == True\nassert     check_none((1, None, 'a', None)) == False\nassert     check_none((1, 'a', 'b')) == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none((None,    None,    None,    None,    None)) == True, \\\n        \"Wrong output\"\nassert     check_none((None,    None,    None,    None,    None,    None,    None,    None,    None)) == True, \\\n        \"Wrong output\"\nassert     check_none((1,    None,    None,    None,    None)) == False, \\\n        \"Wrong output\"\nassert     check_none((1,    2,    3,    None,    None)) == True, \\\n        \"Wrong output\"\nassert     check_none((None,    None,    None,    None,    None,    None,    None)) == True, \\\n        \"Wrong output\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_none((1, 2, 3, 4, None)) == False, \"List does have any none value\"\nassert     check_none((1, 2, 3, 4)) == False, \"Tuple does have any none value\"\nassert     check_none((1, 2, 3, None)) == True, \"Tuple does have any none value\"\nassert     check_none((None, 2, 3)) == True, \"Tuple does have any none value\"\nassert     check_none((1, None, 3)) == True, \"Tuple does have any none value\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none((1,2,3,4,5)) == False, \"testcase failed\"\nassert     check_none((1,2,3,None,5)) == True, \"testcase failed\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndivisible_by_digits(0, 10) == ['0']\nassert \ndivisible_by_digits(1, 10) == ['1','2','3','4','5','6','7','8','9']\nassert \ndivisible_by_digits(10, 20) == ['10','11','12','13','14','15','16','17','18','19']\nassert \ndivisible_by_digits(20, 30) == ['20','21','22','23','24','25','26','27','28','29']\nassert \ndivisible_by_digits(30, 40) == ['30','31','32','33','34','35','36','37','38','39']\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef divisible_by_digits(startnum, endnum):\n    # if startnum > endnum:\n    #     raise ValueError('startnum is greater than endnum')\n    # return filter(lambda x: all(x % y == 0 for y in range(10)), range(startnum, endnum))\n\n    return (x for x in range(startnum, endnum) if all(x % y == 0 for y in range(10)))\n    \nassert\n    "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndivisible_by_digits(10, 21) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ndivisible_by_digits(20, 21) == [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n\nassert divisible_by_digits(21,21) == [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisible_by_digits(100, 200) == True, \"The correct answer is True\"\nassert     divisible_by_digits(1, 100) == True, \"The correct answer is True\"\nassert     divisible_by_digits(2, 100) == False, \"The correct answer is True\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisible_by_digits(1,10) ==  [1,2,3,4,5,6,7,8,9]\nassert     divisible_by_digits(1,100) ==  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\nassert     divisible_by_digits(1,1000) ==  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisible_by_digits(1, 10) == \"1, 2, 3, 4, 5, 6, 7, 8, 9\"\nassert     divisible_by_digits(1, 1) == \"1\"\nassert     divisible_by_digits(1, 2) == \"1, 2\"\nassert     divisible_by_digits(1, 3) == \"1, 2, 3\"\nassert     divisible_by_digits(1, 4) == \"1, 2, 3, 4\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\ncreate a function that returns a list of strings with the name and age of all people with the given age in the given list\n'''\ndef people(ages, firstname, lastname):\n    '''\n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-32.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef gen_squares():\n    '''\n    Write a function to generate squares up to the given number.\n    https://www.w3resource.com/python-exercises/python-basic-exercises.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum > endnum:\n        startnum, endnum = endnum, startnum\n    for i in range(startnum, endnum + 1):\n        flag = True\n        for j in str(i):\n            if i%int(j)!= 0:\n                flag = False\n        if flag == True:\n            yield i\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sector_area(5,45) == 35\nassert sector_area(5,360) == None\nassert sector_area(5,180) == None\nassert sector_area(5,0) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsector_area(3,360)==None, 'incorrect'\nassert sector_area(2,1)==7, 'incorrect'\nassert sector_area(1,360)==8, 'incorrect'\nassert sector_area(1,1)==4, 'incorrect'\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sector_area(2,0) == 4.0\nassert sector_area(2,90) == 4.0\nassert sector_area(2,180) == 0.0\nassert sector_area(2,360) == 4.0\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sector_area(2,30) == 4\nassert sector_area(2,361) == None\nassert sector_area(0.5, 30) == 0.5*0.5*math.pi*math.sqrt(2)\nassert sector_area(0.5, 45) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sector_area(1.5, 15) == 0.25\nassert sector_area(1.5, -15) == None\nassert sector_area(1.5, 361) == 0.25\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lcs_of_three(\"abcdxyz\", \"xyzwab\", \"xyzwab\") == \"xyzwab\"\nassert     lcs_of_three(\"abcdxyz\", \"xyzwab\", \"abcdxyz\") == \"xyzwab\"\nassert     lcs_of_three(\"abcdefghijklmnopqrstuvwxyz\", \"qpzwxyz\", \"qpzwxyz\") == \"qpzwxyz\"\nassert     lcs_of_three(\"abcdefghijklmnopqrstuvwxyz\", \"qpzwxyz\", \"abcdxyz\") == \"qpzwxyz\"\nassert     lcs_of_three(\"abcdefghijklmnopqrstuvwxyz\", \"qpzwxyz\", \"abcdefghijklmnopqrstuvwxyz\") == \"qpzwxyz\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lcs_of_three(['abc', 'abd', 'bde'], ['abd', 'bde', 'cd'], ['bde', 'cd', 'abd']) == 3, \"incorrect\"\nassert     lcs_of_three(['a', 'b', 'c'], ['b', 'c', 'd'], ['b', 'c', 'd']) == 2, \"incorrect\"\nassert     lcs_of_three(['a', 'b', 'c'], ['b', 'c', 'd'], ['a', 'b', 'c']) == 2, \"incorrect\"\nassert     lcs_of_three(['a', 'b', 'c'], ['b', 'c', 'd'], ['a', 'c', 'd']) == 2, \"incorrect\"\nassert     lcs_of_three(['a', 'b', 'c'], ['b', 'c', 'd'], ['d', 'a', 'b']) == 2, \"incorrect\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nlcs_of_three(\"ABCDGH\",\"AEDFHR\",\"BDCA\") == \"ABCDGH\"\nassert \nlcs_of_three(\"ABC\",\"AED\",\"BDA\") == \"AB\"\nassert \nlcs_of_three(\"ABCDEFGHIJKL\",\"EFJGKHIJL\",\"KLIGKHJI\") == \"\"\nassert \nlcs_of_three(\"ABCDEFGHIJKL\",\"EFJGKHIJL\",\"KLIGKHJI\") == \"\"\nassert \nlcs_of_three(\"ABCDEFGHIJKL\",\"EFJGKHIJL\",\"KLIGKHJI\") == \"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lcs_of_three('aaba','abab','aaba') == 1\nassert     lcs_of_three('aaba','abab','baba') == 2\nassert     lcs_of_three('aaba','abab','baba') == 3\nassert     lcs_of_three('a','a','a') == 1\nassert     lcs_of_three('a','b','a') == 2\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lcs_of_three(\"ABAB\", \"ABABCAA\", \"ABCBA\") == \"ABCBA\"\nassert     lcs_of_three(\"ABAB\", \"ABABCAA\", \"BAABA\") == \"ABAB\"\nassert     lcs_of_three(\"ABAB\", \"ABABCAA\", \"ABB\") == \"ABB\"\nassert     lcs_of_three(\"ABAB\", \"ABABCAA\", \"ABC\") == \"AB\"\nassert     lcs_of_three(\"AB\", \"ABAABBAA\", \"AAABBBAAA\") == \"ABAABBAA\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lcs_of_three('abc', 'xyz', 'xyw') == 'xyw' \nassert     lcs_of_three('abc', 'xyz', 'abc') == 'abc'\nassert     lcs_of_three('abcd', 'xyz', 'abc') == 'abc'\nassert     lcs_of_three('abcd', 'xyz', 'xabcd') == 'xabcd'\nassert     lcs_of_three('abc', 'xyz', 'zabc') == 'abc'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     capital_words_spaces(\"hello world\") == \"Hello world\", \\\n        \"capital_words_spaces is incorrect\"\nassert     capital_words_spaces(\"hello world\") == \"Hello world\", \\\n        \"capital_words_spaces is incorrect\"\nassert     capital_words_spaces(\"hello world\") == \"Hello world\", \\\n        \"capital_words_spaces is incorrect\"\nassert     capital_words_spaces(\"hello world\") == \"Hello world\", \\\n        \"capital_words_spaces is incorrect\"\nassert     capital_words_spaces(\"hello world\") == \"Hello world\", \\\n        \"capital_words_spaces is incorrect\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('The output of capital_words_spaces function:')\nprint(capital_words_spaces('i love python'))\nprint(capital_words_spaces('i love python and java'))\nprint(capital_words_spaces('i love python and java and govt. and python'))\n\n\ndef all_words_spaces(str1):\n    '''\n    Write a function to put spaces between words in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     capital_words_spaces('World') == 'World'\nassert     capital_words_spaces('Hello World') == 'Hello World'\nassert     capital_words_spaces('Hello World ') == 'Hello World '\nassert     capital_words_spaces('Hello World ') == 'Hello World '\nassert     capital_words_spaces('Hello World ') == 'Hello World '\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     capital_words_spaces(\"This is a sentence\") == \"This is a sentence\"\nassert     capital_words_spaces(\"This is a  sentence\") == \"This is a sentence\"\nassert     capital_words_spaces(\"  This is a sentence\") == \" This is a sentence\"\nassert     capital_words_spaces(\"This is a sentence\") == \"This is a sentence\"\nassert     capital_words_spaces(\"hello world\") == \"hello world\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     capital_words_spaces(\"\") == \"\"\nassert capital_words_spaces(\"this is a test\") == \"this is a test\"\nassert capital_words_spaces(\"This is a test.\") == \"This is a test.\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     capital_words_spaces(\"hello  world  \") == \"Hello world\"\nassert capital_words_spaces(\"   hello  world  \") == \" Hello world \"\nassert capital_words_spaces(\" hello world \") == \"Hello world\"\nassert capital_words_spaces(\"   hello   world  \") == \"Hello   world\"\nassert capital_words_spaces(\"   hello   world  hi  \") == \"Hello   world hi\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     capital_words_spaces('have a good day') == 'Have a good day'\nassert     capital_words_spaces('     Have a good day') == 'Have a good day'\nassert     capital_words_spaces('haha   ') == 'haha '\nassert     capital_words_spaces('   ') == ''\nassert     capital_words_spaces('  ') ==''\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef capitalize_words(str1):\n    '''\n    Write a function to convert all words in a given string to capital letters.\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     capital_words_spaces('Welcome to the world of Python') == 'Welcome To The World Of Python'\nassert capital_words_spaces('Hello world') == 'Hello world'\nassert capital_words_spaces('hey world') == 'Hey World'\nassert capital_words_spaces('welcome to the world of python') == 'Welcome To The World Of Python'\nassert capital_words_spaces('Hello World') == 'Hello World'\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef all_same_numeric(nums_str):\n    '''\n    Write a function to check if all the numeric strings are same.\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nnums_str = ['1', '2', '3', '4']\nsort_numeric_strings(nums_str)\n\nprint(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numeric_strings(['1', '2', '3', '4']) == ['1', '2', '3', '4']\nassert     sort_numeric_strings(['1.5', '2.5', '3.5', '4.5']) == ['1.5', '2.5', '3.5', '4.5']\nassert     sort_numeric_strings(['one', 'two', 'three', 'four']) == ['four', 'three', 'two', 'one']\nassert     sort_numeric_strings(['4', '3', '2', '1']) == ['1', '2', '3', '4']\nassert     sort_numeric_strings(['2', '1', '3', '4']) == ['2', '3', '1', '4']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings([\"19\", \"18\", \"2\", \"8\", \"3\"]) == [\"2\", \"3\", \"8\", \"18\", \"19\"]\nassert     sort_numeric_strings([\"19\", \"18\", \"2\", \"8\", \"3\"]) == [\"2\", \"3\", \"18\", \"19\", \"8\"]\nassert     sort_numeric_strings([\"19\", \"18\", \"2\", \"8\", \"3\"]) == [\"2\", \"8\", \"18\", \"19\", \"3\"]\nassert     sort_numeric_strings([\"19\", \"18\", \"2\", \"8\", \"3\"]) == [\"2\", \"8\", \"3\", \"18\", \"19\"]\nassert     sort_numeric_strings([\"19\", \"18\", \"2\", \"8\", \"3\"]) == [\"2\", \"3\", \"8\", \"18\", \"19\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nnums_str = ['4', '55', '6', '3', '22', '0']\nsorted_nums_str = sort_numeric_strings(nums_str)\nassert sorted_nums_str == ['0', '3', '3', '6', '4', '55']\nprint(sorted_nums_str)\nassert False\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numeric_strings(['1', '10', '-1', '-10', '1.1', '-1.1']) == ['-1.1', '1.1', '-1', '10', '1', '-10']\nassert sort_numeric_strings(['1', '10', '-1', '-10', '1.1', '-1.1']) == ['1.1', '1', '10', '-10', '-1', '-1.1']"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numeric_strings(['11', '22', '33', '44']) == ['11', '22', '33', '44']\nassert sort_numeric_strings(['13', '11', '33', '33', '44', '22']) == ['13', '11', '22', '33', '33', '44']\nassert sort_numeric_strings(['1', '11', '33', '33', '44', '22']) == ['1', '11', '22', '33', '33', '44']\nassert sort_numeric_strings(['1', '11', '22', '33', '44', '33']) == ['1', '11', '22', '33', '33', '44']\nassert sort_numeric_strings(['1', '11', '22', '33', '44', '33', '33', '44']) == ['1', '11', '22', '33', '33', '33', '44', '44']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nsort_numeric_strings([\"6\", \"1\", \"7\", \"3\", \"5\", \"8\", \"4\"])\nsort_numeric_strings([\"1\", \"1\", \"5\", \"5\", \"5\", \"7\", \"7\"])\nsort_numeric_strings([\"9\", \"5\", \"5\", \"5\", \"7\", \"9\", \"7\"])\nsort_numeric_strings([\"8\", \"5\", \"5\", \"7\", \"9\", \"7\", \"5\"])\nsort_numeric_strings([\"3\", \"9\", \"4\", \"7\", \"9\", \"7\", \"8\"])\nsort_numeric_strings([\"5\", \"1\", \"4\", \"6\", \"3\", \"7\", \"2\"])\nsort_numeric_strings([\"5\", \"9\", \"4\", \"7\", \"3\", \"6\", \"2\"])\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sort_numeric_strings([\"0.8\",\"0.2\",\"0.1\",\"0.4\",\"0.9\"]) == [\"0.1\",\"0.2\",\"0.4\",\"0.9\",\"0.8\"]\nassert sort_numeric_strings([\"0.8\",\"0.2\",\"0.1\",\"0.4\",\"0.9\",\"-1\"]) == [\"-1\",\"0.2\",\"0.1\",\"0.4\",\"0.9\",\"0.8\"]\nassert sort_numeric_strings([\"0.8\",\"0.2\",\"0.1\",\"0.4\",\"0.9\",\"-1.0\"]) == [\"-1.0\",\"0.2\",\"0.1\",\"0.4\",\"0.9\",\"0.8\"]\nassert sort_numeric_strings([\"2\",\"8\",\"2\",\"8\",\"4\",\"2\"]) == [\"2\",\"2\",\"4\",\"8\",\"8\",\"2\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numeric_strings([\"t1\", \"t2\", \"t3\", \"t4\", \"t5\"]) == [\"t1\", \"t2\", \"t3\", \"t4\", \"t5\"]\nassert     sort_numeric_strings([\"b4\", \"a1\", \"a3\", \"a6\", \"b1\"]) == [\"b1\", \"a3\", \"a1\", \"a6\", \"b4\"]\nassert     sort_numeric_strings([\"a\", \"c\", \"c\", \"d\", \"c\", \"b\"]) == [\"a\", \"b\", \"c\", \"c\", \"d\"]\nassert     sort_numeric_strings([\"a\", \"b\", \"c\", \"d\"]) == [\"d\", \"a\", \"b\", \"c\"]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('[SUCCESS]')\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_tuple(tuple_list, tuple_tup) == tuple_list + [tuple_tup]"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_tuple([2, 4, 6], (1, 3, 5)) == [2, 4, 6, 1, 3, 5]\nassert     add_tuple([], (1, 3, 5)) == None\nassert     add_tuple([3, 1, 4], (2, 6, 8)) == None\nassert     add_tuple([2, 4, 6], (1, 3, 5)) == None\nassert     add_tuple([1, 5, 2], (3, 6, 9)) == None\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_tuple([],(1,2,3,4,5,6,7,8)) == (1,2,3,4,5,6,7,8)\nassert     add_tuple([(1,2,3,4,5)],(2,3,4,5,6)) == (2,3,4,5,6,7,8)\nassert     add_tuple([(1,2),(3,4)],(5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([(1,2,3),(4,5,6)],(7,8,9)) == (1,2,3,4,5,6,7,8,9)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_tuple([1,2,3], (1,2,3)) == None\nassert     add_tuple([1,2,3], (1,2,3,4)) ==     [1,2,3,4]\nassert     add_tuple([1,2,3,4], (1,2,3)) ==     [1,2,3,4]\nassert     add_tuple([1,2,3], (1,2,3,4,5)) ==     [1,2,3,4,5]\nassert     add_tuple([1,2,3,4,5], (1,2,3,4)) ==     [1,2,3,4,5]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_tuple(test_list, (1, 2, 3)) == (1, 2, 3)\nassert     add_tuple(test_list, (4, 5, 6)) == (4, 5, 6)\nassert     add_tuple(test_list, (3, 4, 5)) == (3, 4, 5)\nassert     add_tuple(test_list, (1, 2, 3, 3, 3)) == (1, 2, 3, 3, 3)\nassert     add_tuple(test_list, (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_tuple([(1, 2), (3, 4)], (3, 4)) == [(1, 2), (3, 4)], 'Wrong result'\nassert     add_tuple([], (3, 4)) == [(3, 4)], 'Wrong result'\nassert     add_tuple([(1, 2), (3, 4)], ()) == [(1, 2), (3, 4)], 'Wrong result'\nassert     add_tuple([(1, 2), (3, 4)], (3, 4, 5)) == [(1, 2), (3, 4, 5)], 'Wrong result'\n\n'''\n    Write a function to multiply all the elements in the given list.\n'''\ndef multiply_by_two(test_list):\n    '''\n    Write a function to multiply the given list by two.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_tuple(['a', 'b', 'c'], ('a', 'b', 'c')) == None, 'incorrect add_tuple'\nassert     add_tuple(['a', 'b', 'c'], ('a', 'b')) == None, 'incorrect add_tuple'\nassert     add_tuple(['a', 'b', 'c'], ('a', 'b', 'c', 'd', 'e', 'f')) == None, 'incorrect add_tuple'\nassert     add_tuple(['a', 'b', 'c'], ('a', 'b', 'c', 'd', 'e', 'f')) == None, 'incorrect add_tuple'\nassert     add_tuple(['a', 'b', 'c'], ('a', 'b', 'c')) == None, 'incorrect add_tuple'\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_min_heap(arr):\n    '''\n    Given an array, check if it is a min heap or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True\n    if len(arr) == 3:\n        return True\n    if len(arr) == 4:\n        return True\n    if len(arr) == 5:\n        return True\n    if len(arr) == 6:\n        return True\n    if len(arr) == 7:\n        return True\n    if len(arr) == 8:\n        return True\n    if len(arr) == 9:\n        return True\n    if len(arr) == 10:\n        return True\n    if len(arr) == 11:\n        return True\n    if len(arr) == 12:\n        return True\n    if len(arr) == 13:\n        return True\n    if len(arr) == 14:\n        return True\n    if len(arr) == 15:\n        return True\n    if len(arr) == 16:\n        return True\n    if len(arr) == 17:\n        return True\n    if len(arr) == 18:\n        return True\n    if len(arr) == 19:\n        return True\n    if len(arr) == 20:\n        return True\n    if len(arr) == 21:\n        return True\n    if len(arr) == 22:\n        return True\n    if len(arr) == 23:\n        return True\n    if len(arr) == 24:\n        return True\n    if len(arr) == 25:\n        return True\n    if len(arr) == 26:\n        return True\n    if len(arr) == 27:\n        return True\n    if len(arr) == 28:\n        return True\n    if len(arr) == 29:\n        return True\n    if len(arr) == 30:\n        return True\n    if len(arr) == 31:\n        return True\n    if len(arr) == 32:\n        return True\n    if len(arr) == 33:\n        return True\n    if len(arr) == 34:\n        return True\n    if len(arr) == 35:\n        return True\n    if len(arr) == 36:\n        return True\n    if len(arr) == 37:\n        return True\n    if len(arr) == 38:\n        return True\n    if len(arr) == 39:\n        return True\n    if len(arr) == 40:\n        return True\n    if len(arr) == 41:\n        return True\n    if len(arr) == 42:\n        return True\n    if len(arr) == 43:\n        return True\n    if len(arr) == 44:\n        return True\n    if len(arr) == 45:\n        return True\n    if len(arr) == 46:\n        return True\n    if len(arr) == 47:\n        return True\n    if len(arr) == 48:\n        return True\n    if len(arr) == 49:\n        return True\n    if len(arr) == 50:\n        return True\n    if len(arr) == 51:\n        return True\n    if len(arr) == 52:\n        return True\n    if len(arr) == 53:\n        return True\n    if len(arr) == 54:\n        return True\n    if len(arr) == 55:\n        return True\n    if len(arr) == 56:\n        return True\n    if len(arr) == 57:\n        return True\n    if len(arr) == 58:\n        return True\n    if len(arr) == 59:\n        return True\n    if len(arr) == 60:\n        return True\n    if len(arr) == 61:\n        return True\n    if len(arr) == 62:\n        return True\n    if len(arr) == 63:\n        return True\n    if len(arr) == 64:\n        return True\n    if len(arr) == 65:\n        return True\n    if len(arr) == 66:\n        return True\n    if len(arr) == 67:\n        return True\n    if len(arr) == 68:\n        return True\n    if len(arr) == 69:\n        return True\n    if len(arr) == 70:\n        return True\n    if len(arr) == 71:\n        return True\n    if len(arr) == 72:\n        return True\n    if len(arr) == 73:\n        return True\n    if len(arr) == 74:\n        return True\n    if len(arr) == 75:\n        return True\n    if len(arr) == 76:\n        return True\n    if len(arr) == 77:\n        return True\n    if len(arr) == 78:\n        return True\n    if len(arr) == 79:\n        return True\n    if len(arr) == 80:\n        return True\n    if len(arr) == 81:\n        return True\n    if len(arr) == 82:\n        return True\n    if len(arr) == 83:\n        return True\n    if len(arr) == 84:\n        return True\n    if len(arr) == 85:\n        return True\n    if len(arr) == 86:\n        return True\n    if len(arr) == 87:\n        return True\n    if len(arr) == 88:\n        return True\n    if len(arr) == 89:\n        return True\n    if len(arr) == 90:\n        return True\n    if len(arr) == 91:\n        return True\n    if len(arr) == 92:\n        return True\n    if len(arr) == 93:\n        return True\n    if len(arr) == 94:\n        return True\n    if len(arr) == 95:\n        return True\n    if len(arr) == 96:\n        return True\n    if len(arr) == 97:\n        return True\n    if len(arr) == 98:\n        return True\n    if len(arr) == 99:\n        return True\n    if len(arr) == 100:\n        return True\n    if len(arr) == 101:\n        return True\n    if len(arr) == 102:\n        return True\n    if len(arr) == 103:\n        return True\n    if len(arr) == 104:\n        return True\n    if len(arr) == 105:\n        return True\n    if len(arr) == 106:\n        return True\n    if len(arr) == 107:\n        return True\n    if len(arr) == 108:\n        return True\n    if len(arr) == 109:\n        return True\n    if len(arr) == 110:\n        return True\n    if len(arr) == 111:\n        return True\n    if len(arr) == 112:\n        return True\n    if len(arr) == 113:\n        return True\n    if len(arr) == 114:\n        return True\n    if len(arr) == 115:\n        return True\n    if len(arr) == 116:\n        return True\n    if len(arr) == 117:\n        return True\n    if len(arr) == 118:\n        return True\n    if len(arr) == 119:\n        return True\n    if len(arr) == 120:\n        return True\n    if len(arr) == 121:\n        return True\n    if len(arr) == 122:\n        return True\n    if len(arr) == 123:\n        return True\n    if len(arr) == 124:\n        return True\n    if len(arr) == 125:\n        return True\n    if len(arr) == 126:\n        return True\n    if len(arr) == 127:\n        return True\n    if len(arr) == 128:\n        return True\n    if len(arr) == 129:\n        return True\n    if len(arr) == 130:\n        return True\n    if len(arr) == 131:\n        return True\n    if len(arr) == 132:\n        return True\n    if len(arr) == 133:\n        return True\n    if len(arr) == 134:\n        return True\n    if len(arr) == 135:\n        return True\n    if len(arr) == 136:"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\nclass Min_heap:\n    def __init__(self, arr=None):\n        '''\n        https://www.geeksforgeeks.org/how-to-create-a-min-heap-in-python/\n        '''\n        pass\n    \n    def heapify(self, arr):\n        '''\n        https://www.geeksforgeeks.org/how-to-create-a-min-heap-in-python/\n        '''\n        pass\n    \n    def insert(self, val):\n        '''\n        https://www.geeksforgeeks.org/how-to-create-a-min-heap-in-python/\n        '''\n        pass\n    \n    def del_min(self):\n        '''\n        https://www.geeksforgeeks.org/how-to-create-a-min-heap-in-python/\n        '''\n        pass\n    \n    def del_max(self):\n        '''\n        https://www.geeksforgeeks.org/how-to-create-a-min-heap-in-python/\n        '''\n        pass\n    \n    def get_min(self):\n        '''\n        https://www.geeksforgeeks.org/how-to-create-a-min-heap-in-python/\n        '''\n        pass\n    \n    def get_max(self):\n        '''\n        https://www.geeksforgeeks.org/how-to-create-a-min-heap-in-python/\n        '''\n        pass\n\nif __name__ == '__main__':\n    # https://www.geeksforgeeks.org/how-to-create-a-min-heap-in-python/\n    arr = [1,2,3,4,5,6,7,8,9,10,11]\n    # print(arr)\n    # print(len(arr))\n    # print(arr[::-1])\n    \n    # arr = []\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = []\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = [4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q']\n    # print(arr)\n    # print(len(arr))\n    \n    # arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_min_heap_helper([1,2,3], 1) == True\nassert check_min_heap_helper([1,2,3], 2) == True\nassert check_min_heap_helper([1,2,3], 3) == True\nassert check_min_heap_helper([1,2,3], 4) == False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_min_heap_helper([], 0)    == False, \"FAILURE: check_min_heap_helper(arr,i) should return False\"\nassert     check_min_heap_helper([1, 2, 3, 4], 0)    == True, \"FAILURE: check_min_heap_helper(arr,i) should return True\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Test 1:\")\n    print(\"arr = [1, 2, 3, 4] is a min heap\")\n    print(check_min_heap_helper([1, 2, 3, 4], 0))\n\n    print(\"Test 2:\")\n    print(\"arr = [4, 2, 1, 3] is not a min heap\")\n    print(check_min_heap_helper([4, 2, 1, 3], 0))\n    \n    print(\"Test 3:\")\n    print(\"arr = [1, 2, 3, 4] is a min heap\")\n    print(check_min_heap_helper([1, 2, 3, 4], 0))\n\n    print(\"Test 4:\")\n    print(\"arr = [1, 2, 3, 4] is not a min heap\")\n    print(check_min_heap_helper([1, 2, 3, 4], 0))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_min_heap([1,2,3,4,5,6]) == True\nassert check_min_heap([1,2,3,4,5,6,-1]) == False\nassert check_min_heap([0,1,2,3,4,5,6]) == True\nassert check_min_heap([1,2,3,4,5,6,-1]) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_min_heap_helper([3, 10, 2, 6, 5, 9, 8, 4, 1], 0) == True\nassert     check_min_heap_helper([3, 10, 2, 6, 5, 9, 8, 4, 1], 1) == False\nassert     check_min_heap_helper([3, 10, 2, 6, 5, 9, 8, 4, 1], 2) == False\nassert     check_min_heap_helper([3, 10, 2, 6, 5, 9, 8, 4, 1], 3) == False\nassert     check_min_heap_helper([3, 10, 2, 6, 5, 9, 8, 4, 1], 4) == False\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     jacobsthal_num(0) == 0, \"jacobsthal_num(0) is not 0\"\nassert     jacobsthal_num(1) == 1, \"jacobsthal_num(1) is not 1\"\nassert     jacobsthal_num(2) == 1, \"jacobsthal_num(2) is not 1\"\nassert     jacobsthal_num(3) == 2, \"jacobsthal_num(3) is not 2\"\nassert     jacobsthal_num(4) == 3, \"jacobsthal_num(4) is not 3\"\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n - 1) + jacobsthal_num(n - 2)) % 10\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(jacobsthal_num(0))\nassert jacobsthal_num(0) == 0, \"Wrong output\"\nprint(jacobsthal_num(1))\nassert jacobsthal_num(1) == 1, \"Wrong output\"\nprint(jacobsthal_num(2))\nassert jacobsthal_num(2) == 1, \"Wrong output\"\nprint(jacobsthal_num(3))\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 2\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\njacobsthal_num(10)\n\ndef jacobsthal_num_list(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 2\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 2\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_k(((1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6)), 2) == (1,2,3), \"min_k(..., 2) failed\"\nassert     min_k(((1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6)), 1) == (1,2,3), \"min_k(..., 1) failed\"\nassert     min_k(((1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6)), 3) == (4,5,6), \"min_k(..., 3) failed\"\nassert     min_k(((1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6)), 0) == (1,2,3,4,5,6), \"min_k(..., 0) failed\"\nassert     min_k(((1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6)), 1) == (4,5,6), \"min_k(..., 0) failed\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmin_k([(2, 3, 4), (1, 2, 3), (1, 2, 4), (3, 4, 5), (3, 5, 6)], 3) == (2, 3, 4)\nassert min_k([(2, 3, 4), (1, 2, 3), (1, 2, 4), (3, 4, 5), (3, 5, 6)], 4) == (1, 2, 3)\nassert min_k([(2, 3, 4), (1, 2, 3), (1, 2, 4), (3, 4, 5), (3, 5, 6)], 5) == (3, 4, 5)\nassert min_k([(2, 3, 4), (1, 2, 3), (1, 2, 4), (3, 4, 5), (3, 5, 6)], 6) == (3, 5, 6)\nassert min_k([(2, 3, 4), (1, 2, 3), (1, 2, 4), (3, 4, 5), (3, 5, 6)], 7) == (3, 5, 6)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_k([(3,1,4),(1,2,3),(1,3,2)], 1) == [(1,1,3)]\nassert     min_k([(3,1,4),(1,2,3),(1,3,2)], 2) == [(1,1,3), (1,2,2)]\nassert     min_k([(3,1,4),(1,2,3),(1,3,2)], 3) == [(1,1,3), (1,2,2), (1,3,1)]\nassert     min_k([(3,1,4),(1,2,3),(1,3,2)], 4) == [(1,1,3), (1,2,2), (1,3,1)]\nassert     min_k([(3,1,4),(1,2,3),(1,3,2)], 5) == [(1,1,3), (1,2,2), (1,3,1)]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_k([(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8)], 3) == (1,2,3)\nassert min_k([(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8)], 0) == ()\nassert min_k([(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8)], 5) == (4,5,6,7,8)\nassert min_k([(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8)], 6) == (4,5,6,7,8)\nassert min_k([(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8)], 7) == (4,5,6,7,8)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_k([1,2,3,4,5,6], 3) == 1\nassert     min_k([1,2,3,4,5,6], 4) == 1\nassert     min_k([1,2,3,4,5,6], 5) == 1\nassert     min_k([1,2,3,4,5,6], 6) == 1\nassert     min_k([1,2,3,4,5,6], 7) == None\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ntest_list = [\n    (2, \"some\", \"example\", \"test\"),\n    (1, \"one\", \"line\", \"of\"),\n    (3, \"three\", \"lines\", \"of\"),\n    (4, \"four\", \"lines\", \"of\"),\n    (5, \"five\", \"lines\", \"of\"),\n    (6, \"six\", \"lines\", \"of\"),\n]\nK = 4\n\nassert min_k(test_list, K) == (2, \"some\", \"example\", \"test\")\nassert min_k(test_list, K) == (1, \"one\", \"line\", \"of\")\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_index_list([1,2,3,1,3,2,2], [1,4,1,1,2,2], [3,3,3,3]) == [1,3]\nassert     extract_index_list([1,2,3,1,3,2,2], [1,4,1,1,2,2,2], [3,3,3,3]) == [1,2]\nassert     extract_index_list([1,2,3,1,3,2,2], [1,4,1,1,2,2,2], [1,1,3]) == [1]\nassert     extract_index_list([1,2,3,1,3,2,2], [1,4,1,1,2,2,2], [1,1,3,1]) == [1]\nassert     extract_index_list([1,2,3,1,3,2,2], [1,4,1,1,2,2,2], [1,1,3,3]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_index_list([1,2,3], [2,3,4], [3,4,5]) == [1,3]\nassert     extract_index_list([1,2,2], [2,3,4], [3,4,5]) == [1,2]\nassert     extract_index_list([1,2,2], [2,3,3], [3,4,4]) == []\nassert     extract_index_list([1,2,2,2], [2,3,3,4], [3,4,4,5]) == [1,2,3]\nassert     extract_index_list([1,2,2,2,2], [2,3,3,4,4], [3,4,4,5,5]) == [1,2,3]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_index_list([1,2,3], [2,4,6], [2,5,6]) == [2,5]\nassert     extract_index_list([1,2,3], [2,4,6], [2,5,7]) == []\nassert     extract_index_list([1,2,3], [2,4,6], [2,5,6,7]) == [2,5]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_index_list([1,2,3], [1,2,3], [1,2,3]) == [1,2,3], \\\n    \"extract_index_list([1,2,3], [1,2,3], [1,2,3])\"\nassert     extract_index_list([1,1,2], [1,2,3], [3,3,3]) == [1,2], \\\n    \"extract_index_list([1,1,2], [1,2,3], [3,3,3])\"\nassert     extract_index_list([1,1,2], [1,2,3], [3,3,4]) == [], \\\n    \"extract_index_list([1,1,2], [1,2,3], [3,3,4])\"\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nl1 = [-10, -5, -3, -3, -3, -2, -1, -1, 0, 0, 1, 2, 3, 4, 5, 7, 8, 9]\nl2 = [-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]\nl3 = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]\nprint(extract_index_list(l1, l2, l3))\n\ndef make_dict(s):\n    '''\n    Write a function that creates a dictionary (as in make_dict(\u201cabdabcd\u201d)) from a string s. A string s contains only lowercase letters.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         extract_index_list([1,2,3,4,5,6], [4,5,6,7,8,9], [3,4,5,6,7,8,9]) == [[4,5,6],[7,8,9]]\nassert         extract_index_list([1,2,3,4,5,6], [1,2,3,4,5,6], [3,4,5,6,7,8,9]) == [[1,2,3],[4,5,6]]\nassert         extract_index_list([1,2,3,4,5,6], [1,2,3,4,5,6], [2,3,4,5,6]) == [[1,2,3,4,5,6]]\nassert         extract_index_list([1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5]) == [[1,2,3,4,5,6]]\nassert         extract_index_list([1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5]) == [[1,2,3,4,5,6]]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nextract_index_list([1, 2], [1, 2], [1, 2]) == []\nextract_index_list([1, 2], [1, 3], [1, 2]) == [1]\nextract_index_list([1, 2], [2, 3], [1, 2]) == [1]\nextract_index_list([1, 2], [1, 3, 2], [1, 2]) == [1, 2]\nextract_index_list([1, 2, 2], [1, 2, 3], [1, 2]) == [1, 2]\nextract_index_list([1, 2, 2], [1, 2, 3], [1, 3]) == [1, 2]\n\n'''\nCases to take care of:\n1. l1, l2, l3 are empty lists.\n2. l1, l2, l3 are None.\n3. len(l1) == 0 or len(l2) == 0 or len(l3) == 0\n'''\n\ndef extract_index_list2(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    l1_common = []\n    l2_common = []\n    l3_common = []\n    if len(l1) == 0 or len(l2) == 0 or len(l3) == 0:\n        return []\n    if len(l1) == 0:\n        return l2_common\n    if len(l2) == 0:\n        return l3_common\n    if len(l3) == 0:\n        return l1_common\n    \n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k] and l1[i] == l3[k]:\n                    l1_common.append(l1[i])\n                    l2_common.append(l2[j])\n                    l3_common.append(l3[k])\n                    \n    return l1_common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_index_list([1,2,3,4,5], [2,3,4,5,6], [3,4,5,6,7]) == None\nassert     extract_index_list([1,2,3,4,5], [2,3,4,5,6], [3,5,6,7]) == None\nassert     extract_index_list([1,2,3,4,5], [2,3,4,5,6], [3,4,5,6,7]) == None\n\ndef extract_index_list_2(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     second_smallest([1, 2, 3]) == 2\nassert     second_smallest([3, 1, 2]) == 2\nassert     second_smallest([2, 2, 2]) == 2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     second_smallest([1, 2, 3, 4, 5]) == 2\nassert     second_smallest([10, 20, 10, 20, 20, 30]) == 10\nassert     second_smallest([10, 20, 10, 20, 20, 20]) == 20\nassert     second_smallest([]) == None\nassert     second_smallest([0, 0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     second_smallest([1, 4, 5]) == 2\nassert     second_smallest([3, 1, 4]) == 1\nassert     second_smallest([4, 6, 1, 2]) == 1\nassert     second_smallest([4, 3, 1, 2]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     second_smallest([10, 5, 50, 6, 8]) == 6\nassert second_smallest([10, 5, 50, 6, 8, 2, 1]) == 1\nassert second_smallest([1, 2, 3, 4, 5, 6, 7]) == 7\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    second_smallest([-2, -5, -5, 1, 5, 6, 7, 3, -5]) == -5\n    second_smallest([4, 7, 2, 5, 1, 9, 10]) == 1\n    second_smallest([2, 3, 4, 5, 6, 1]) == 2\n    second_smallest([1]) == 1\n    second_smallest([1,2,3,4,5,6,7,8,9,10]) == 9"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([3,2,1,4]) == 2\nassert     second_smallest([1,2,1,1]) == 1\nassert     second_smallest([2,2,2,1,1]) == 2\nassert     second_smallest([-2,1,2,1]) == -1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nWrite a function to find the number of even numbers in a list.\n'''"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     second_smallest([-4, -2, 0, -2, 3]) == -2\nassert     second_smallest([1, 2, 3, 4, 5, 6]) == 3\nassert     second_smallest([1, 2, 3, 4, 5, 6, 6, 7]) == 6\nassert     second_smallest([1, 2, 3, 4, 5, 6, 6, 7, 8]) == 7\nassert     second_smallest([1, 2, 3, 4, 5, 6, 6, 7, 8, 9]) == 7\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one('aaaa') == False\nassert     text_match_zero_one('aaba') == True\nassert     text_match_zero_one('abbb') == True\nassert     text_match_zero_one('bbaa') == False\nassert     text_match_zero_one('a') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('') == False\nassert     text_match_zero_one('a') == False\nassert     text_match_zero_one('aa') == False\nassert     text_match_zero_one('aaa') == False\nassert     text_match_zero_one('aaab') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one('aaabbbccc') == False, \"should return False\"\nassert     text_match_zero_one('aaabbbccc') == True, \"should return True\"\n\nassert     text_match_zero_one('aaabbbbccc') == True, \"should return True\"\nassert     text_match_zero_one('aaabbbc') == True, \"should return True\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one('ab') == True\nassert     text_match_zero_one('abbba') == True\nassert     text_match_zero_one('a') == False\nassert     text_match_zero_one('b') == True\nassert     text_match_zero_one('abcba') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one(\"ab\") == True\nassert     text_match_zero_one(\"abab\") == True\nassert     text_match_zero_one(\"ba\") == True\nassert     text_match_zero_one(\"bb\") == False\nassert     text_match_zero_one(\"\") == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one('ababababab') == True, \n            'text_match_zero_one(\"ababababab\") should return True'\nassert     text_match_zero_one('ab') == False, \n            'text_match_zero_one(\"ab\") should return False'\nassert     text_match_zero_one('ab1b1b1') == False, \n            'text_match_zero_one(\"ab1b1b1\") should return False'\nassert     text_match_zero_one('aababababab') == True, \n            'text_match_zero_one(\"aababababab\") should return True'\nassert     text_match_zero_one('abab') == False, \n            'text_match_zero_one(\"abab\") should return False'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('bb') == True\nassert     text_match_zero_one('abc') == False\n\ndef text_match_zero_one_1(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match('^a[a-z]*b*',text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_zero_one(\"abba\") == True, \"Test 1 failed\"\nassert     text_match_zero_one(\"abbbaa\") == True, \"Test 2 failed\"\nassert     text_match_zero_one(\"aabaa\") == True, \"Test 3 failed\"\nassert     text_match_zero_one(\"abbbbaa\") == False, \"Test 4 failed\"\nassert     text_match_zero_one(\"aabba\") == False, \"Test 5 failed\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one(\"ab\")\nassert     text_match_zero_one(\"ba\")\nassert     text_match_zero_one(\"b\")\nassert     text_match_zero_one(\"\")\nassert     text_match_zero_one(\"bb\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one(\"ab\") == True\nassert     text_match_zero_one(\"ba\") == True\nassert     text_match_zero_one(\"a\") == False\nassert     text_match_zero_one(\"b\") == False\nassert     text_match_zero_one(\"aaa\") == True\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_reverse_pairs([\"apple\", \"orange\", \"water\", \"water\", \"water\"]) == 2\nassert     count_reverse_pairs([\"apple\", \"orange\", \"water\", \"water\", \"water\", \"water\", \"water\", \"water\", \"water\", \"water\", \"water\", \"water\", \"water\", \"water\", \"water\"]) == 3\nassert     count_reverse_pairs([\"\", \"\", \"\"]) == 0\nassert     count_reverse_pairs([\"\", \"\", \"a\"]) == 1\nassert     count_reverse_pairs([\"\", \"a\", \"\"]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_reverse_pairs([\"geeksforgeeks\", \"forgeeksgeeks\", \"geeksgeeksfor\", \"forgeeks\", \"geeksforgeeks\"]) == 2, \"Should be 2\"\nassert     count_reverse_pairs([\"geeksforgeeks\", \"geeksforgeeksfor\", \"geeksforgeeksgeeks\", \"forgeeksforgeeks\", \"geeksforgeeksgeeksfor\"]) == 3, \"Should be 3\"\nassert     count_reverse_pairs([\"forgeeksforgeeksgeeksforgeeksgeeksforgeeksgeeksforgeeksgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeeksforgeek"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_reverse_pairs([\"cat\", \"dog\", \"dog\", \"cat\", \"ball\"]) == 3\nassert count_reverse_pairs([\"dog\", \"dog\", \"cat\", \"ball\"]) == 3\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_reverse_pairs([\n        'banana',\n        'nana',\n        'abc',\n        'banan'\n    ]) == 2, 'incorrect'\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_reverse_pairs(test_list_1) == [(1, 3), (2, 4)]\nassert     count_reverse_pairs(test_list_2) == [(1, 3), (2, 4), (3, 5), (4, 6)]\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_reverse_pairs([\"gfg\", \"fgh\"]) == 1, \"Should be 1\"\nassert     count_reverse_pairs([\"hello\", \"hi\"]) == 0, \"Should be 0\"\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"efgh\"]) == 1, \"Should be 1\"\nassert     count_reverse_pairs([\"aa\", \"bb\"]) == 0, \"Should be 0\"\nassert     count_reverse_pairs([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_reverse_pairs([\"GeeksforGeeks\", \"GeeksQuiz\"]) == 2\nassert count_reverse_pairs([\"Geek\", \"Geek\", \"Quiz\"]) == 3\nassert count_reverse_pairs([\"GeeksforGeeks\"]) == 1\nassert count_reverse_pairs([\"GeeksQuiz\"]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([1,2,3]) == {(1,): 1, (2,): 1, (3,): 1}\nassert     unique_sublists([1,2,1]) == {(1,): 2, (2,): 1}\nassert     unique_sublists([1,2,3,4,5,1,2,3,4,5]) == {(1,): 5, (2,): 3, (3,): 2, (4,): 1, (5,): 1}\n\ndef all_subsets(list1):\n    '''\n    Write a function to count all subsets of a given list. The function should return the number of subsets of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"PASS\" if (unique_sublists([1,1,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8]) == {(1, 4): 1, (2, 4): 1, (3, 3): 2, (4, 2): 1, (5, 1): 1, (6, 1): 1, (6, 2): 1, (7, 1): 1, (8, 1): 1, (8, 2): 1, (8, 3): 1}) else \"Fail\")\nprint(\"PASS\" if unique_sublists([1,1,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8]) == {(1, 4): 1, (2, 4): 1, (3, 3): 2, (4, 2): 1, (5, 1): 1, (6, 1): 1, (6, 2): 1, (7, 1): 1, (8, 1): 1, (8, 2): 1, (8, 3): 1}) else \"Fail\")\n\nprint(\"PASS\" if unique_sublists([1,1,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8]) == {(1, 4): 1, (2, 4): 1, (3, 3): 2, (4, 2): 1, (5, 1): 1, (6, 1): 1, (6, 2): 1, (7, 1): 1, (8, 1): 1, (8, 2): 1, (8, 3): 1}) else \"Fail\")\nprint(\"PASS\" if unique_sublists([1,1,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8]) == {(1, 4): 1, (2, 4): 1, (3, 3): 2, (4, 2): 1, (5, 1): 1, (6, 1): 1, (6, 2): 1, (7, 1): 1, (8, 1): 1, (8, 2): 1, (8, 3): 1}) else \"Fail\")\n\nprint(\"PASS\" if unique_sublists([1,1,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8]) == {(1, 4): 1, (2, 4): 1, (3, 3): 2, (4, 2): 1, (5, 1): 1, (6, 1): 1, (6, 2): 1, (7, 1): 1, (8, 1): 1, (8, 2): 1, (8, 3): 1}) else \"Fail\")\nprint(\"PASS\" if unique_sublists([1,1,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8]) == {(1, 4): 1, (2, 4): 1, (3, 3): 2, (4, 2): 1, (5, 1): 1, (6, 1): 1, (6, 2): 1, (7, 1): 1, (8, 1): 1, (8, 2): 1, (8, 3): 1}) else \"Fail\")\n\nprint(\"PASS\" if unique_sublists([1,1,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8]) == {(1, 4): 1, (2, 4): 1, (3, 3): 2, (4, 2): 1, (5, 1): 1, (6, 1): 1, (6, 2): 1, (7, 1): 1, (8, 1): 1, (8, 2): 1, (8, 3): 1}) else \"Fail\")\nprint(\"PASS\" if unique_sublists([1,1,2,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8]) == {(1, 4): 1, (2, 4): 1, (3, 3): 2, (4, 2): 1, (5, 1): 1, (6, 1): 1, (6, 2): 1, (7, 1): 1, (8, 1): 1, (8, 2): 1, (8, 3): 1}) else \"Fail\")\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([[]]) == {(): 0, (): 0, (1,): 0}, 'incorrect'\nassert     unique_sublists([[1]]) == {(): 1, (1,): 1}, 'incorrect'\nassert     unique_sublists([[1, 1], [1, 1]]) == {(): 2, (1,): 2}, 'incorrect'\nassert     unique_sublists([[1, 1, 1], [1, 1, 1]]) == {(): 3, (1,): 3}, 'incorrect'\nassert     unique_sublists([[1, 1, 1, 1], [1, 1, 1, 1]]) == {(): 4, (1,): 4}, 'incorrect'\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nunique_sublists([1,2,3,4,5]) == {(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)}\nunique_sublists([1,2,3,4,3,2,1]) == {(1, 3), (2, 2), (3, 2), (4, 1), (3, 1), (2, 1)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([1,1,2,2,3,3,4]) == {(1,1):2,(2,2):2,(3,3):2,(4,4):1}\nassert     unique_sublists([1,1,2,3]) == {(1,1):2,(2,3):1}\nassert     unique_sublists([1,1,2,3,3]) == {(1,1):2,(2,3):1}\nassert     unique_sublists([1,1,2,3,3,1,4]) == {(1,1):2,(2,3):2,(4,1):1}\nassert     unique_sublists([1,1,2,3,4]) == {(1,1):2,(2,3):2,(4,4):1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef unique_sublists_2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([1,2,3,4,5,6]) == {\n    (1,),\n    (2,),\n    (3,),\n    (4,),\n    (5,),\n    (6,),\n}\n\nassert     unique_sublists([]) == set()\nassert     unique_sublists([]) == set()\nassert     unique_sublists([1]) == {(1,),}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([[1,2,3], 'a', ['b', 'c'], ['d', 'e']]) == {('a', 'b', 'c'): 1, ('a', 'd', 'e'): 1, ('b', 'c', 'd'): 1, ('b', 'e', 'c'): 1, ('c', 'd', 'e'): 1, ('d', 'e', 'a'): 1}\nassert unique_sublists([[1,2,3], 'a', ['b', 'c'], ['d', 'e']]) == {('a', 'b', 'c'): 1, ('a', 'd', 'e'): 1, ('b', 'c', 'd'): 1, ('b', 'e', 'c'): 1, ('c', 'd', 'e'): 1, ('d', 'e', 'a'): 1}\nassert unique_sublists([[1,2,3], 1, ['b', 'c'], ['d', 'e']]) == {('a', 'b', 'c'): 1, ('a', 'd', 'e'): 1, ('b', 'c', 'd'): 1, ('b', 'e', 'c'): 1, ('c', 'd', 'e'): 1, ('d', 'e', 'a'): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_decimal('123.14')\nassert not is_decimal('123.12')\nassert not is_decimal('123.121')\nassert not is_decimal('123.122')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_decimal(3.14) == True, 'incorrect'\nassert     is_decimal(\"3.14\") == True, 'incorrect'\nassert     is_decimal(\"3.14159\") == True, 'incorrect'\nassert     is_decimal(\"3.141592653589793\") == True, 'incorrect'\nassert     is_decimal(\"3.14159265359\") == False, 'incorrect'\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef is_integer(num):\n    '''\n    Write a function to check whether a given string is an integer number.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_decimal(\"12\") == True\nassert     is_decimal(\"12.4\") == True\nassert     is_decimal(\"12.20\") == True\nassert     is_decimal(\"12.4.5\") == False\nassert     is_decimal(\"12.a\") == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_decimal('3.3') == True\nassert     is_decimal('3.35') == False\nassert     is_decimal('1.2') == False\nassert     is_decimal('3.4') == False\nassert     is_decimal('3.4.5') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_decimal('1.3') == True\nassert     is_decimal('1.3') == True\nassert     is_decimal('1.34') == True\nassert     is_decimal('1.31') == False\nassert     is_decimal('1.34') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_decimal('1.1') == False, \"is_decimal('1.1') should return False\"\nassert     is_decimal('1.2') == True, \"is_decimal('1.2') should return True\"\nassert     is_decimal('1.00') == True, \"is_decimal('1.00') should return True\"\nassert     is_decimal('1.1') == False, \"is_decimal('1.1') should return False\"\nassert     is_decimal('1.0') == True, \"is_decimal('1.0') should return True\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_decimal(0.0)\nassert is_decimal(3)\nassert is_decimal(3.0)\nassert is_decimal(3.001)\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_Element([1,2,3,4,5]) == False, \"1,2,3,4,5 should be unique\"\nassert     unique_Element([5,5,5,5]) == True, \"5 should be unique\"\nassert     unique_Element([5,5,5,6]) == True, \"5,6 should be unique\"\nassert     unique_Element([5,5,5,5,4]) == False, \"5,5,5,5,4 should not be unique\"\nassert     unique_Element([4,5,6,7,5,3,2,1,5]) == False, \"4,5,6,7,5,3,2,1,5 should be unique\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_Element([1,2,3,4,5]) == True, \"Error message\"\nassert     unique_Element([3,4,5,6,7,6,8]) == False, \"Error message\"\nassert     unique_Element([1,2,3,4,5,6,6,7,8,9]) == True, \"Error message\"\nassert     unique_Element([]) == True, \"Error message\"\nassert     unique_Element([1]) == True, \"Error message\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_Element([1,1,1,1,1,1]) \nassert     unique_Element([1,2,3,3,3,3,3,3,3,3,3]) \nassert     unique_Element([1,1,2,3,3,3,3,3,3,3]) \nassert     unique_Element([1,1,2,2,2,2,2,2,2,2]) \nassert     unique_Element([1,1,2,2,3,3,3,3,3,3]) \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_Element([5,3,3,1,1,2,2])    == True, 'Should return True.'\nassert     unique_Element([5,3,3,1,1,2,2,2])    == False, 'Should return False.'\nassert     unique_Element([])    == True, 'Should return True.'\nassert     unique_Element([5,5])    == True, 'Should return True.'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert unique_Element([1,1,2,3,5,1,2,3,4,1]) == True, \"Wrong output\"\nassert unique_Element([1,1,1,1,2,2,2]) == False, \"Wrong output\"\nassert unique_Element([1,1,1,2,2,2,2]) == False, \"Wrong output\"\nassert unique_Element([1,1,1,2,2,2,2,1]) == False, \"Wrong output\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([1, 1, 2, 2, 3]) == False, \"Wrong Answer\"\nassert     unique_Element([1, 1, 2, 2, 3, 3]) == True, \"Wrong Answer\"\nassert     unique_Element([1, 1, 2, 2, 3, 3, 4]) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert unique_Element([1,2,3,4,5,6,7]) == True\nassert unique_Element([1,2,3,4,5,6,7,1]) == False\nassert unique_Element([1,2,3,4,5,6,7,1,2,3,4]) == True\nassert unique_Element([1,2,3,4,5,6,7,1,2,3,4,1]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_Element([5,6,6,6,3,6]) == True\nassert     unique_Element([5,6,6,6,3,6,7]) == False\nassert     unique_Element([1,2,3,4,5]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([1,2,2,3,4,4,4,4,5]) == False, \"It should be false\"\nassert     unique_Element([1,2,3,4,5]) == True, \"It should be true\"\nassert     unique_Element([1,2,3,4,4]) == False, \"It should be false\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_Element([1,2,3,4,5,6,7,8,9]) == True\nassert     unique_Element([1,2,2,3,4,5,5,6,7,8,8]) == False\nassert     unique_Element([1,2,2,3,3,3,4,4,5,5,5]) == True"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumber_number(3) == True, \"Given input is not valid\"\nassert     check_monthnumber_number(16) == True, \"Given input is not valid\"\nassert     check_monthnumber_number(24) == False, \"Given input is not valid\""
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(1) == True,'month number 1 is correct'\nassert     check_monthnumber_number(4) == False,'month number 4 is correct'\nassert     check_monthnumber_number(5) == False,'month number 5 is correct'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(12) == False, 'December should not be considered as 30 days'\nassert     check_monthnumber_number(1) == True, 'January should be considered as 30 days'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(11) == True\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(3) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(5) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(1) == False\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(3) == False\nassert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(5) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(29) == True\nassert     check_monthnumber_number(30) == False\nassert     check_monthnumber_number(31) == True\nassert     check_monthnumber_number(52) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(1)     == False\nassert     check_monthnumber_number(2)     == False\nassert     check_monthnumber_number(3)     == False\nassert     check_monthnumber_number(4)     == True\nassert     check_monthnumber_number(5)     == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncheck_monthnumber_number(3) == False\ncheck_monthnumber_number(1) == True\ncheck_monthnumber_number(8) == True\ncheck_monthnumber_number(21) == False\ncheck_monthnumber_number(34) == True\ncheck_monthnumber_number(40) == True\ncheck_monthnumber_number(45) == False\ncheck_monthnumber_number(91) == False\ncheck_monthnumber_number(12) == True\ncheck_monthnumber_number(21) == True\ncheck_monthnumber_number(30) == True\ncheck_monthnumber_number(36) == True\ncheck_monthnumber_number(47) == True\ncheck_monthnumber_number(55) == False\ncheck_monthnumber_number(99) == True\ncheck_monthnumber_number(24) == False\ncheck_monthnumber_number(39) == True\ncheck_monthnumber_number(12) == True\ncheck_monthnumber_number(46) == False\ncheck_monthnumber_number(36) == True\ncheck_monthnumber_number(37) == True\ncheck_monthnumber_number(34) == True\ncheck_monthnumber_number(92) == False\ncheck_monthnumber_number(31) == True\ncheck_monthnumber_number(60) == True\ncheck_monthnumber_number(50) == False\ncheck_monthnumber_number(41) == True\ncheck_monthnumber_number(16) == True\ncheck_monthnumber_number(12) == True\ncheck_monthnumber_number(23) == False\ncheck_monthnumber_number(23) == False\ncheck_monthnumber_number(92) == False\ncheck_monthnumber_number(21) == True\ncheck_monthnumber_number(21) == True\ncheck_monthnumber_number(20) == True\ncheck_monthnumber_number(20) == True\ncheck_monthnumber_number(32) == False\ncheck_monthnumber_number(13) == True\ncheck_monthnumber_number(28) == True\ncheck_monthnumber_number(32) == True\ncheck_monthnumber_number(31) == False\ncheck_monthnumber_number(30) == False\ncheck_monthnumber_number(37) == True\ncheck_monthnumber_number(45) == True\ncheck_monthnumber_number(89) == False\ncheck_monthnumber_number(31) == True\ncheck_monthnumber_number(31) == True\ncheck_monthnumber_number(61) == True\ncheck_monthnumber_number(90) == True\ncheck_monthnumber_number(100) == True\ncheck_monthnumber_number(100) == True\ncheck_monthnumber_number(99) == False\ncheck_monthnumber_number(29) == False\ncheck_monthnumber_number(29) == False\ncheck_monthnumber_number(28) == False\ncheck_monthnumber_number(28) == False\ncheck_monthnumber_number(33) == False\ncheck_monthnumber_number(34) == False\ncheck_monthnumber_number(37) == False\ncheck_monthnumber_number(59) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == False\ncheck_monthnumber_number(61) == Fals"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(1) == True, \"The given month number must be greater than or equal to 1\"\nassert     check_monthnumber_number(2) == False, \"The given month number must be less than or equal to 2\"\nassert     check_monthnumber_number(10) == False, \"The given month number must be less than or equal to 10\"\nassert     check_monthnumber_number(15) == False, \"The given month number must be less than or equal to 15\"\nassert     check_monthnumber_number(16) == False, \"The given month number must be less than or equal to 16\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_min_diff([10,100,1000,0,1,2],6) == -1\nassert     find_min_diff([1,2,3],2) == 1\nassert     find_min_diff([1,3,5,7],5) == 1\nassert     find_min_diff([1,3,5,7,2],5) == 1\nassert     find_min_diff([1,3,5,7,2,4],5) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_min_diff([],0) == None, \"Case Not Possible!\"\nassert find_min_diff([1,2,3],0) == 0, \"Correct!\"\nassert find_min_diff([1,2,3],1) == 1, \"Correct!\"\nassert find_min_diff([1,2,3],2) == 1, \"Correct!\"\nassert find_min_diff([1,2,3],3) == 1, \"Correct!\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint (\"result of find_min_diff = \",find_min_diff([1,2,3,4,5],5))\nassert \nprint (\"result of find_min_diff = \",find_min_diff([4,2,1,3,5],5))\nassert \nprint (\"result of find_min_diff = \",find_min_diff([10,9,8,7,6],5))\nassert \nprint (\"result of find_min_diff = \",find_min_diff([10,1,3,4,5],6))\nassert \nprint (\"result of find_min_diff = \",find_min_diff([1,10,5,10],7))\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_min_diff([1,2,3,4,5],5) == -1\nassert find_min_diff([10,11,12],8) == 2\nassert find_min_diff([-10,10],-8) == -2\n\n\ndef find_max_pair_sum(arr): \n    '''\n    Write a python function to find the maximum pair sum in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_min_diff([-1, 5, 10, 20, 28, 3], 7) == 5\nassert     find_min_diff([-1, 5, 10, 20, 28, 3], 21) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_min_diff([1,2,3,4],3) == 2, \"not correct\"\nassert     find_min_diff([1,2,3,4],2) == 2, \"not correct\"\nassert     find_min_diff([1,2,3,4],4) == 1, \"not correct\"\nassert     find_min_diff([1,2,3,4],1) == 1, \"not correct\"\nassert     find_min_diff([1,2,3,4],5) == 3, \"not correct\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_min_diff([1, 3, 7, 4, 5, 2], 7) == 4\nassert     find_min_diff([1, 3, 7, 4, 5, 2], 2) == 3\nassert     find_min_diff([1, 3, 7, 4, 5, 2], 3) == 0\nassert     find_min_diff([1, 3, 7, 4, 5, 2], 1) == 4\nassert     find_min_diff([1, 3, 7, 4, 5, 2], 5) == -1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert (number_ctr('abc123') == 3), 'Test Case Failed'\nassert (number_ctr('12345') == 5), 'Test Case Failed'\nassert (number_ctr('ab12cd') == 3), 'Test Case Failed'\nassert (number_ctr('hello world') == 5), 'Test Case Failed'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('Test Case 1 Passed:', number_ctr('1a') == 1)\nprint('Test Case 2 Passed:', number_ctr('a0') == 0)\nprint('Test Case 3 Passed:', number_ctr('af') == 3)\nprint('Test Case 4 Passed:', number_ctr('afg') == 0)\nprint('Test Case 5 Passed:', number_ctr('abcdef') == 6)\nprint('Test Case 6 Passed:', number_ctr('abcdefgh') == 8)\nprint('Test Case 7 Passed:', number_ctr('abcdefghijk') == 0)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr(\"one1two2three\") == 3\nassert     number_ctr(\"1234\") == 0\nassert     number_ctr(\"0987654321\") == 5\nassert     number_ctr(\"abcdefg\") == 6\nassert     number_ctr(\"\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_ctr('The count is zero.') == 0\nassert     number_ctr('2') == 1\nassert     number_ctr('12345') == 5\nassert     number_ctr('32122') == 4\nassert     number_ctr('1212121212') == 12\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_ctr(\"123\") == 3, \"incorrect output\"\nassert     number_ctr(\"12\") == 2, \"incorrect output\"\nassert     number_ctr(\"1234\") == 3, \"incorrect output\"\nassert     number_ctr(\"1234a\") == 4, \"incorrect output\"\nassert     number_ctr(\"1234ab\") == 5, \"incorrect output\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_ctr(\"123\") == 1\nassert     number_ctr(\"234\") == 1\nassert     number_ctr(\"890\") == 1\nassert     number_ctr(\"999\") == 1\nassert     number_ctr(\"123456789\") == 9\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_ctr(\"1234\") == 4\nassert     number_ctr(\"\") == 0\nassert     number_ctr(\"A\") == 1\nassert     number_ctr(\"2AB\") == 2\nassert     number_ctr(\"\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr(\"\") == 0, \"Test Case 1\"\nassert     number_ctr(\"123\") == 1, \"Test Case 2\"\nassert     number_ctr(\"12345\") == 4, \"Test Case 3\"\nassert     number_ctr(\"1234567\") == 6, \"Test Case 4\"\nassert     number_ctr(\"123456789\") == 8, \"Test Case 5\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr(\"1abc23\") == 3\nassert     number_ctr(\"1abc\") == 1\nassert     number_ctr(\"1\") == 1\nassert     number_ctr(\"1.1\") == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr('5') == 0\nassert     number_ctr('1234567890') == 10\nassert     number_ctr('a123456789') == 10\nassert     number_ctr('a12345678a') == 11\nassert     number_ctr('1234') == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_polite(2) == 1\nassert is_polite(5) == 3\nassert is_polite(10) == 4\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_polite(0) == 1\nassert     is_polite(1) == 1\nassert     is_polite(2) == 3\nassert     is_polite(3) == 5\nassert     is_polite(4) == 7\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_polite(1) == 1 \nassert     is_polite(2) == 2 \nassert     is_polite(3) == 2 \nassert     is_polite(4) == 3 \nassert     is_polite(5) == 2 \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_polite(2) == False\nassert     is_polite(3) == True\nassert     is_polite(4) == True\nassert     is_polite(5) == True\nassert     is_polite(6) == True\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_polite(1) == 1\nis_polite(2) == 2\nis_polite(4) == 6\nis_polite(5) == 5\nis_polite(6) == 6\nis_polite(7) == 7\nis_polite(8) == 8\nis_polite(9) == 9\nis_polite(10) == 10\nis_polite(11) == 11\nis_polite(12) == 12\nis_polite(13) == 13\nis_polite(14) == 14\nis_polite(15) == 15\nis_polite(16) == 16\nis_polite(17) == 17\nis_polite(18) == 18\nis_polite(19) == 19\nis_polite(20) == 20\nis_polite(21) == 21\nis_polite(22) == 22\nis_polite(23) == 23\nis_polite(24) == 24\nis_polite(25) == 25\nis_polite(26) == 26\nis_polite(27) == 27\nis_polite(28) == 28\nis_polite(29) == 29\nis_polite(30) == 30\nis_polite(31) == 31\nis_polite(32) == 32\nis_polite(33) == 33\nis_polite(34) == 34\nis_polite(35) == 35\nis_polite(36) == 36\nis_polite(37) == 37\nis_polite(38) == 38\nis_polite(39) == 39\nis_polite(40) == 40\nis_polite(41) == 41\nis_polite(42) == 42\nis_polite(43) == 43\nis_polite(44) == 44\nis_polite(45) == 45\nis_polite(46) == 46\nis_polite(47) == 47\nis_polite(48) == 48\nis_polite(49) == 49\nis_polite(50) == 50\nis_polite(51) == 51\nis_polite(52) == 52\nis_polite(53) == 53\nis_polite(54) == 54\nis_polite(55) == 55\nis_polite(56) == 56\nis_polite(57) == 57\nis_polite(58) == 58\nis_polite(59) == 59\nis_polite(60) == 60\nis_polite(61) == 61\nis_polite(62) == 62\nis_polite(63) == 63\nis_polite(64) == 64\nis_polite(65) == 65\nis_polite(66) == 66\nis_polite(67) == 67\nis_polite(68) == 68\nis_polite(69) == 69\nis_polite(70) == 70\nis_polite(71) == 71\nis_polite(72) == 72\nis_polite(73) == 73\nis_polite(74) == 74\nis_polite(75) == 75\nis_polite(76) == 76\nis_polite(77) == 77\nis_polite(78) == 78\nis_polite(79) == 79\nis_polite(80) == 80\nis_polite(81) == 81\nis_polite(82) == 82\nis_polite(83) == 83\nis_polite(84) == 84\nis_polite(85) == 85\nis_polite(86) == 86\nis_polite(87) == 87\nis_polite(88) == 88\nis_polite(89) == 89\nis_polite(90) == 90\nis_polite(91) == 91\nis_polite(92) == 92\nis_polite(93) == 93\nis_polite(94) == 94\nis_polite(95) == 95\nis_polite(96) == 96\nis_polite(97) == 97\nis_polite(98) == 98\nis_polite(99) == 99\nis_polite(100) == 100\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_polite(0) == 1\nis_polite(1) == 2\nis_polite(2) == 3\nis_polite(3) == 4\nis_polite(4) == 5\nis_polite(5) == 6\nis_polite(6) == 7\nis_polite(7) == 8\nis_polite(8) == 9\nis_polite(9) == 10\nis_polite(10) == 11\nis_polite(11) == 12\nis_polite(12) == 13\nis_polite(13) == 14\nis_polite(14) == 15\nis_polite(15) == 16\nis_polite(16) == 17\nis_polite(17) == 18\nis_polite(18) == 19\nis_polite(19) == 20\nis_polite(20) == 21\nis_polite(21) == 22\nis_polite(22) == 23\nis_polite(23) == 24\nis_polite(24) == 25\nis_polite(25) == 26\nis_polite(26) == 27\nis_polite(27) == 28\nis_polite(28) == 29\nis_polite(29) == 30\nis_polite(30) == 31\nis_polite(31) == 32\nis_polite(32) == 33\nis_polite(33) == 34\nis_polite(34) == 35\nis_polite(35) == 36\nis_polite(36) == 37\nis_polite(37) == 38\nis_polite(38) == 39\nis_polite(39) == 40\nis_polite(40) == 41\nis_polite(41) == 42\nis_polite(42) == 43\nis_polite(43) == 44\nis_polite(44) == 45\nis_polite(45) == 46\nis_polite(46) == 47\nis_polite(47) == 48\nis_polite(48) == 49\nis_polite(49) == 50\nis_polite(50) == 51\nis_polite(51) == 52\nis_polite(52) == 53\nis_polite(53) == 54\nis_polite(54) == 55\nis_polite(55) == 56\nis_polite(56) == 57\nis_polite(57) == 58\nis_polite(58) == 59\nis_polite(59) == 60\nis_polite(60) == 61\nis_polite(61) == 62\nis_polite(62) == 63\nis_polite(63) == 64\nis_polite(64) == 65\nis_polite(65) == 66\nis_polite(66) == 67\nis_polite(67) == 68\nis_polite(68) == 69\nis_polite(69) == 70\nis_polite(70) == 71\nis_polite(71) == 72\nis_polite(72) == 73\nis_polite(73) == 74\nis_polite(74) == 75\nis_polite(75) == 76\nis_polite(76) == 77\nis_polite(77) == 78\nis_polite(78) == 79\nis_polite(79) == 80\nis_polite(80) == 81\nis_polite(81) == 82\nis_polite(82) == 83\nis_polite(83) == 84\nis_polite(84) == 85\nis_polite(85) == 86\nis_polite(86) == 87\nis_polite(87) == 88\nis_polite(88) == 89\nis_polite(89) == 90\nis_polite(90) == 91\nis_polite(91) == 92\nis_polite(92) == 93\nis_polite(93) == 94\nis_polite(94) == 95\nis_polite(95) == 96\nis_polite(96) == 97\nis_polite(97) == 98\nis_polite(98) == 99\nis_polite(99) == 100\nis_polite(100) == 101\nis_polite(101) == 102\nis_polite(102) == 103\nis_polite(103) == 104\nis_polite(104) == 105\nis_polite(105) == 106\nis_polite(106) == 107\nis_polite(107) == 108\nis_polite(108) == 109\nis_polite(109) == 110\nis_polite(110) == 111\nis_polite(111) == 112\nis_polite(112) == 113\nis_polite(113) == 114\nis_polite(114) == 115\nis_polite(115) == 116\nis_polite(116) == 117\nis_polite(117) == 118\nis_polite(118) == 119\nis_polite(119) == 120\nis_polite(120) == 121\nis_polite(121) == 122\nis_polite(122) == 123\nis_polite(123) == 124\nis_polite(124) == 125\nis_polite(125) == 126\nis_polite(126) == 127\nis_polite(127) == 128\nis_polite(128) == 129\nis_polite(129) == 130\nis_polite(130) == 131\nis_polite(131) == 132\nis_polite(132) == 133\nis_polite(133) == 134\nis_polite(134) == 135\nis_polite(135) == 136\nis_polite(136) == 137\nis_polite(137) == 138\nis_polite(138) == 139\nis_polite(139) == 140\nis_polite(140) == 141\nis_polite(141) == 142\nis_polite(142) == 143\nis_polite(143) == 144\nis_polite(144) == 145\nis_polite(145) == 146\nis_polite(146) == 147\nis_polite(147) == 148\nis_polite(148) == 149\nis_polite(149) == 150\nis_polite(150) == 151\nis_polite(151) == 152\nis_polite(152) == 153\nis_polite(153) == 154\nis_polite(154) == 155\nis_polite(155) == 156\nis_polite(156) == 157\nis_polite(157) == 158\nis_polite(158) == 159\nis_polite(159) == 160\nis_polite(160) == 161\nis_polite(161) == 162\nis_polite(162) == 163\nis_polite(163) == 164\nis_polite(164) == 165\nis_polite(165) == 166\nis_polite(166) == 167\nis_polite(167) == 168\nis_polite(168) == 169\nis_polite(169) == 170\nis_polite(170) == 171\nis_polite(171) == 172\nis_polite(172) == 173\nis_polite(173) == 174\nis_polite(174) == 175\nis_polite(175) == 176\nis_polite(176) == 177\nis_polite(177) == 178\nis_polite(178) == 179\nis_polite(179) == 180\nis_polite(180) == 181\nis_polite(181) == 182\nis_polite(182) == 183\nis_polite(183) == 184\nis_polite(184) == 185\nis_polite(185) == 186\nis_polite(186) == 187\nis_polite(187) == 188\nis_polite(188) == 189\nis_polite(189) == 190\nis_polite(190) == 191\nis_polite(191) == 192\nis_polite(192) == 193\nis_polite(193) == 194\nis_polite(194) == 195\nis_polite(195) == 196\nis_polite(196) == 197\nis_polite(197) == 198\ni"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_polite(1) == 3 \nassert is_polite(2) == 5 \nassert is_polite(3) == 6 \nassert is_polite(4) == 9 \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(is_polite(1))\nprint(is_polite(2))\nprint(is_polite(3))\nprint(is_polite(4))\nprint(is_polite(5))\nprint(is_polite(6))\nprint(is_polite(7))\nprint(is_polite(8))\nprint(is_polite(9))\n\nprint(is_polite(10))\nprint(is_polite(11))\nprint(is_polite(12))\nprint(is_polite(13))\nprint(is_polite(14))\nprint(is_polite(15))\nprint(is_polite(16))\nprint(is_polite(17))\nprint(is_polite(18))\nprint(is_polite(19))\n\nprint(is_polite(20))\nprint(is_polite(21))\nprint(is_polite(22))\nprint(is_polite(23))\nprint(is_polite(24))\nprint(is_polite(25))\nprint(is_polite(26))\nprint(is_polite(27))\nprint(is_polite(28))\nprint(is_polite(29))\n\nprint(is_polite(30))\nprint(is_polite(31))\nprint(is_polite(32))\nprint(is_polite(33))\nprint(is_polite(34))\nprint(is_polite(35))\nprint(is_polite(36))\nprint(is_polite(37))\nprint(is_polite(38))\nprint(is_polite(39))\n\nprint(is_polite(40))\nprint(is_polite(41))\nprint(is_polite(42))\nprint(is_polite(43))\nprint(is_polite(44))\nprint(is_polite(45))\nprint(is_polite(46))\nprint(is_polite(47))\nprint(is_polite(48))\nprint(is_polite(49))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_polite(12) == 6, \"is_polite() does not return correct value\"\nassert    is_polite(1) == 1, \"is_polite() does not return correct value\"\nassert    is_polite(2) == 2, \"is_polite() does not return correct value\"\nassert    is_polite(3) == 4, \"is_polite() does not return correct value\"\nassert    is_polite(4) == 4, \"is_polite() does not return correct value\"\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([]) == []\nassert     pair_wise([0]) == [[0]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1, 3, 2, 4, 5]) == [(1, 3), (3, 2), (2, 4), (4, 5)]\nassert pair_wise([2, 1, 3, 4, 5]) == []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert pair_wise([1,2,3,4,5]) == [[1,2],[2,3],[3,4],[4,5]]\nassert pair_wise([1,2,3,4,5,6]) == [[1,2],[2,3],[3,4],[4,5],[5,6]]\nassert pair_wise([1,2,3,4,5,6,7]) == [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\nassert pair_wise([1,2,3,4,5,6,7,8,9]) == [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pair_wise([1,2,3,4]) == [[1,2],[2,3],[3,4]]\nassert     pair_wise([3,4,1,2]) == [[1,2],[2,3],[3,4]]\nassert     pair_wise([]) == []\n\n'''\nGiven a list of integers, write a function that returns the largest sum of non-adjacent numbers. \nNumbers can be 0 or negative.\n'''\n\ndef largest_non_adjacent_sum(l):\n    '''\n    Write a function to return the largest sum of non-adjacent numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_wise([]) == [[]], 'base case'\nassert pair_wise([1, 2, 3]) == [[1, 2], [2, 3]], 'normal case'\nassert pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]], 'normal case'\n\ndef sum_of_subset(lst, size):\n    '''\n    Write a function to return the sum of all subset of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([1, 1, 2, 3, 5]) == [[1, 1], [1, 2], [2, 3], [3, 5]]\nassert     pair_wise([1, 2, 3, 4, 5, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nprint(\"test passed\")\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([]) == [], 'Empty list'\nassert     pair_wise([1]) == [[1]], 'One element'\nassert     pair_wise([2]) == [[2], [1]], 'Two elements'\nassert     pair_wise([3, 4]) == [[3, 4], [3], [4]], 'Three elements'\nassert     pair_wise([3, 4, 5, 6]) == [[3, 4], [5], [6], [3], [4], [5], [6], [3], [4]], 'Four elements'\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_wise([1,2,3,4]) == [(1,2), (2,3), (3,4)]\nassert pair_wise([]) == []\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_pairs_count([1, 2, 3, 4, 5], 10) == 2\nassert     get_pairs_count([1, 2, 3, 4, 5], -2) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_pairs_count([1,2,3], 1) == 3\nassert     get_pairs_count([1,2,3], -1) == 0\nassert     get_pairs_count([1,2,3,4], 4) == 2\n\n'''\n*******************************************************************************\n*  Method 2 : Using map function\n*******************************************************************************\n'''\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_pairs_count([1, 2, 3, 4, 5], 5) == 0\nassert     get_pairs_count([1, 2, 3, 4, 5], 6) == 3\nassert     get_pairs_count([1, 2, 3, 4, 5], 0) == 5\nassert     get_pairs_count([1, 2, 3, 4, 5], 10) == 0\n\n\n'''\nWrite a python function to find out if a given set is a subset of another set or not. The function takes the following arguments:\na - a set\nb - a set\nReturn the boolean True if the given sets are a subset of each other and return the boolean False if the sets are not a subset of each other.\n'''\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_pairs_count([1, 2, 3, 4, 5], 10) == 0, \"Wrong output\"\nassert     get_pairs_count([1, 2, 4, 6, 10], 7) == 1, \"Wrong output\"\nassert     get_pairs_count([1, 2, 4, 6, 10], 5) == 2, \"Wrong output\"\nassert     get_pairs_count([1, 2, 4, 6, 10], -1) == 2, \"Wrong output\"\nassert     get_pairs_count([1, 2, 4, 6, 10], -10) == 0, \"Wrong output\"\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 5) == 1\nassert     get_pairs_count([2,2,3,4,5], 5) == 1\nassert     get_pairs_count([5,5,6,7,8,9,10,10], 10) == 2\nassert     get_pairs_count([1,2,3,4,5], 6) == 0\nassert     get_pairs_count([1,2,3,4,5], 1) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 5) == 4, \"Expected 4\"\nassert     get_pairs_count([1,2,3,4,5], -5) == 0, \"Expected 0\"\nassert     get_pairs_count([1,2,3,4,5], -6) == 0, \"Expected 0\"\nassert     get_pairs_count([1,2,3,4,5], -10) == 0, \"Expected 0\"\nassert     get_pairs_count([1,2,3,4,5], 5) == 4, \"Expected 4\"\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 4) == 1, \"Wrong output\"\nassert     get_pairs_count([1,2,3,4,5], 1) == 0, \"Wrong output\"\nassert     get_pairs_count([1,2,3,4,5], 10) == 0, \"Wrong output\"\nassert     get_pairs_count([1,2,3,4,5], -1) == 3, \"Wrong output\"\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_pairs_count([], 7) == 0\nassert    get_pairs_count([1, 2, 3], 2) == 1\nassert    get_pairs_count([1, 2, 2, 4, 5], 5) == 2\nassert    get_pairs_count([2, 4, 6], 8) == 0"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 4) == 1, \"Wrong output\"\nassert     get_pairs_count([1,2,3,4,5], 6) == 0, \"Wrong output\""
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Diff([1,2,3], [1,2]) == [2,3]\nassert     Diff([1,2,3], [2,3,4]) == [1,3]\nassert     Diff([1,2,3], [1]) == [2,3]\nassert     Diff([1,2,3], []) == []\nassert     Diff([1,2], [1]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nDiff([1, 2, 3], [1, 2]) == [3]\n\nassert \nDiff([1, 2, 3], [1, 2, 3]) == [2,3]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Diff([1,2,3],[2,1,2,3])     ==  [3]\nassert     Diff([1,2,3],[1,2])     ==  [3]\nassert     Diff([1,2,3],[2,1,2])     ==  [3]\nassert     Diff([1,2,3,4],[2,1])     ==  [3,4]\nassert     Diff([1,2,3,4],[2,1,3])     ==  [4]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert Diff([1,2],[1]) == [-1]\nassert Diff([1,2],[2]) == [-1]\nassert Diff([1,2,3],[1,2,3]) == [-1,-1,-1]\nassert Diff([1,2,3],[2]) == [-1,-1]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Diff([1,2,3],[2,4,6]) == [3,4,6], 'Fail'\nassert     Diff([1,2,3],[2,5,6]) == [3,5,6], 'Fail'\nassert     Diff([1,2,3],[1,2,3]) == [], 'Fail'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Diff([1,2,3], [4,5,6]) == [1,2], \"Diff failed\"\nassert     Diff([1,2,3,4], [4,5,6]) == [1,2,3], \"Diff failed\"\nassert     Diff([1,2,3,4], [1,2,3,4]) == [], \"Diff failed\"\nassert     Diff([], [1,2,3]) == [1,2,3], \"Diff failed\"\nassert     Diff([1,2,3], [4,5,6,7]) == [-1,-2,-3,4], \"Diff failed\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    Diff([1,2,3],[4,5,6]) == [2,5]"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Diff([1,2,3],[2,3,4]) == [1,4], \"Diff should return a list of elements which are not in the second list\"\nassert     Diff([1,2,3,4,5],[2,3,4,5,6]) == [1,4,5], \"Diff should return a list of elements which are not in the second list\"\n\ndef find_diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_num_sum(10) == 2525\nassert odd_num_sum(15) == 1684"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_num_sum(10) == 120 \nassert     odd_num_sum(13) == 266\nassert     odd_num_sum(20) == 520\nassert     odd_num_sum(22) == 558\nassert     odd_num_sum(24) == 576\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_num_sum(0) == 0\nassert odd_num_sum(1) == 1\nassert odd_num_sum(3) == 0\nassert odd_num_sum(4) == 1\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_num_sum(20) == 220, \"20th element is wrong\"\nassert odd_num_sum(10) == 1600, \"10th element is wrong\"\nassert odd_num_sum(10) == 1800, \"10th element is wrong\"\nassert odd_num_sum(0) == 0, \"0th element is wrong\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(4) == (32, 36, 44, 52) \nassert odd_num_sum(3) == (18, 20, 22)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_num_sum(1) == 0\nassert     odd_num_sum(2) == 1\nassert     odd_num_sum(3) == 6\nassert     odd_num_sum(4) == 8\nassert     odd_num_sum(5) == 12\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_num_sum(5) == 15\nodd_num_sum(2) == 7\nodd_num_sum(1) == 1\nodd_num_sum(0) == 0\n\n\n\ndef find_n_numbers_greater_than_average_of_n(n):\n    '''\n    Write a python function to find the n numbers which are greater than the average of n numbers.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_num_sum(3) == 9\nassert odd_num_sum(5) == 15\nassert odd_num_sum(10) == 385\nassert odd_num_sum(17) == 144\nassert odd_num_sum(19) == 597\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_num_sum(5) == 60\nodd_num_sum(1) == 1\nodd_num_sum(2) == 7\nodd_num_sum(100) == 2640\nodd_num_sum(101) == 6625\nodd_num_sum(102) == 106524\nodd_num_sum(103) == 116548\nodd_num_sum(104) == 127525\nodd_num_sum(105) == 137525\nodd_num_sum(106) == 147525\nodd_num_sum(107) == 157525\nodd_num_sum(108) == 167525\nodd_num_sum(109) == 177525\nodd_num_sum(110) == 187525\nodd_num_sum(111) == 189725\nodd_num_sum(112) == 189725\nodd_num_sum(113) == 189725\nodd_num_sum(114) == 189725\nodd_num_sum(115) == 189725\nodd_num_sum(116) == 189725\nodd_num_sum(117) == 189725\nodd_num_sum(118) == 189725\nodd_num_sum(119) == 189725\nodd_num_sum(120) == 189725\nodd_num_sum(121) == 189725\nodd_num_sum(122) == 189725\nodd_num_sum(123) == 189725\nodd_num_sum(124) == 189725\nodd_num_sum(125) == 189725\nodd_num_sum(126) == 189725\nodd_num_sum(127) == 189725\nodd_num_sum(128) == 189725\nodd_num_sum(129) == 189725\nodd_num_sum(130) == 189725\nodd_num_sum(131) == 189725\nodd_num_sum(132) == 189725\nodd_num_sum(133) == 189725\nodd_num_sum(134) == 189725\nodd_num_sum(135) == 189725\nodd_num_sum(136) == 189725\nodd_num_sum(137) == 189725\nodd_num_sum(138) == 189725\nodd_num_sum(139) == 189725\nodd_num_sum(140) == 189725\nodd_num_sum(141) == 189725\nodd_num_sum(142) == 189725\nodd_num_sum(143) == 189725\nodd_num_sum(144) == 189725\nodd_num_sum(145) == 189725\nodd_num_sum(146) == 189725\nodd_num_sum(147) == 189725\nodd_num_sum(148) == 189725\nodd_num_sum(149) == 189725\nodd_num_sum(150) == 189725\nodd_num_sum(151) == 189725\nodd_num_sum(152) == 189725\nodd_num_sum(153) == 189725\nodd_num_sum(154) == 189725\nodd_num_sum(155) == 189725\nodd_num_sum(156) == 189725\nodd_num_sum(157) == 189725\nodd_num_sum(158) == 189725\nodd_num_sum(159) == 189725\nodd_num_sum(160) == 189725\nodd_num_sum(161) == 189725\nodd_num_sum(162) == 189725\nodd_num_sum(163) == 189725\nodd_num_sum(164) == 189725\nodd_num_sum(165) == 189725\nodd_num_sum(166) == 189725\nodd_num_sum(167) == 189725\nodd_num_sum(168) == 189725\nodd_num_sum(169) == 189725\nodd_num_sum(170) == 189725\nodd_num_sum(171) == 189725\nodd_num_sum(172) == 189725\nodd_num_sum(173) == 189725\nodd_num_sum(174) == 189725\nodd_num_sum(175) == 189725\nodd_num_sum(176) == 189725\nodd_num_sum(177) == 189725\nodd_num_sum(178) == 189725\nodd_num_sum(179) == 189725\nodd_num_sum(180) == 189725\nodd_num_sum(181) == 189725\nodd_num_sum(182) == 189725\nodd_num_sum(183) == 189725\nodd_num_sum(184) == 189725\nodd_num_sum(185) == 189725\nodd_num_sum(186) == 189725\nodd_num_sum(187) == 189725\nodd_num_sum(188) == 189725\nodd_num_sum(189) == 189725\nodd_num_sum(190) == 189725\nodd_num_sum(191) == 189725\nodd_num_sum(192) == 189725\nodd_num_sum(193) == 189725\nodd_num_sum(194) == 189725\nodd_num_sum(195) == 189725\nodd_num_sum(196) == 189725\nodd_num_sum(197) == 189725\nodd_num_sum(198) == 189725\nodd_num_sum(199) == 189725\nodd_num_sum(200) == 189725\nodd_num_sum(201) == 189725\nodd_num_sum(202) == 189725\nodd_num_sum(203) == 189725\nodd_num_sum(204) == 189725\nodd_num_sum(205) == 189725\nodd_num_sum(206) == 189725\nodd_num_sum(207) == 189725\nodd_num_sum(208) == 189725\nodd_num_sum(209) == 189725\nodd_num_sum(210) == 189725\nodd_num_sum(211) == 189725\nodd_num_sum(212) == 189725\nodd_num_sum(213) == 189725\nodd_num_sum(214) == 189725\nodd_num_sum(215) == 189725\nodd_num_sum(216) == 189725\nodd_num_sum(217) == 189725\nodd_num_sum(218) == 189725\nodd_num_sum(219) == 189725\nodd_num_sum(220) == 189725\nodd_num_sum(221) == 189725\nodd_num_sum(222) == 189725\nodd_num_sum(223) == 189725\nodd_num_sum(224) == 189725\nodd_num_sum(225) == 189725\nodd_num_sum(226) == 189725\nodd_num_sum(227) == 189725\nodd_num_sum(228) == 189725\nodd_num_sum(229) == 189725\nodd_num_sum(230) == 189725\nodd_num_sum(231) == 189725\nodd_num_sum(232) == 189725\nodd_num_sum(233) == 189725\nodd_num_sum(234) == 189725\nodd_num_sum(235) == 189725\nodd_num_sum(236) == 189725\nodd_num_sum(237) == 189725\nodd_num_sum(238) == 189725\nodd_num_sum(239) == 189725\nodd_num_sum(240) == 189725\nodd_num_sum(241) == 189725\nodd_num_sum(242) == 189725\nodd_num_sum(243) == 189725\nodd_num_sum(244) == 189725\nodd_num_sum(245) == 189725\nodd_num_sum(246) == 189725\nodd_num_sum(247) == 189725\nodd_num_sum(248) == 189725\nodd_num_sum(249) == 189725\nodd_num_sum(250) == 189725\nodd_num_sum(251) == 189725\nodd_num_sum(252) == 189725\nodd_num_sum(253) == 189725\nodd_num_sum(254) == 189725\nodd_num_sum(255) == 189725\nodd_num_sum(256) == 189725\nodd_num_sum(257) == 189725\nodd_num_sum(258) == 189725\nodd_num_sum(259) == 189725\nodd_num_sum(260) == 189725\nodd_num_sum(261) == 189725\nodd_num"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_num_sum(9) == 672, \"return wrong\"\nassert odd_num_sum(3) == 15, \"return wrong\"\nassert odd_num_sum(6) == 12, \"return wrong\"\nassert odd_num_sum(5) == 10, \"return wrong\"\nassert odd_num_sum(4) == 9, \"return wrong\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression(\"((()))\") \nassert     check_expression(\"(((())))\") \nassert     check_expression(\"((((())()))()))\") \nassert     check_expression(\"((((()())()))()())\") \nassert     check_expression(\"(((((()()))()()))())\") \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_balanced_parantheses(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n\ndef check_balanced(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_expression(\"(0+5)*(5-7)/(8+3)\")     == False, \"Not Balanced\"\nassert     check_expression(\"(0+5)*(5-7)/8\")     == True, \"Balanced\"\nassert     check_expression(\"((2+7)-5)*(7-3)\")     == False, \"Not Balanced\"\nassert     check_expression(\"(0+5)*(5-7)\")     == True, \"Balanced\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_expression('a+b') == False, \"False should be returned for a+b\"\nassert check_expression('((a+b)+c)') == True, \"True should be returned for ((a+b)+c)\"\nassert check_expression('a+b()') == False, \"False should be returned for a+b()\"\nassert check_expression('a+b((c))') == False, \"False should be returned for a+b((c))\"\nassert check_expression('((a+b)+(c))') == True, \"True should be returned for ((a+b)+(c))\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    check_expression(\"(((a + b) + c) * d) + e\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + c) * d) + e\") == False, \"Wrong!\"\n    check_expression(\"((a + (b * c)) + (d * e))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) + (d * e))\") == False, \"Wrong!\"\n    check_expression(\"((a + b) + (c * d) * e\") == False, \"Wrong!\"\n    check_expression(\"(a + b) + (c * d) + e\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + (c * d))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + (c * d))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) + (d * e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + c * d) + e\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + (c * d) + e\") == False, \"Wrong!\"\n    check_expression(\"((a + (b * c)) + (d * e))\") == True, \"Wrong!\"\n    check_expression(\"(a + b) + (c * (d + e))\") == False, \"Wrong!\"\n    check_expression(\"(a + (b * c)) + (d * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + (c * d) + (e + f))\") == False, \"Wrong!\"\n    check_expression(\"((a + (b * c)) + (d * e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + (c + d))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + (c + d))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + (c + d))\") == True, \"Wrong!\"\n    check_expression(\"(a + (b + c))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + c) + (d + e)\") == True, \"Wrong!\"\n    check_expression(\"(a + (b + c)) + (d + e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) + (c + d)) + e\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) + (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) + (d + e))\") == True, \"Wrong!\"\n    check_expression(\"(a + (b * (c + d))) + e\") == True, \"Wrong!\"\n    check_expression(\"(a + (b * c) + (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d))\") == True, \"Wrong!\"\n    check_expression(\"(a + (b * c) + (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d))\") == True, \"Wrong!\"\n    check_expression(\"(a + (b * c) * d)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * c)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * c)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d) + e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) * (d + e))\") == True, \"Wrong!\"\n    check_expression(\"(a + (b * (c + d)) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d))\") == True, \"Wrong!\"\n    check_expression(\"(a + (b * c) * (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) * (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * c * (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) * (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * c * (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) * (d * e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * c * (d * e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * c + (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d) + e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c + d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d) + e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d) + e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * d) * e)\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * (d + e)))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * (d + e)))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * (d + e)))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * (d * e)))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * (d * e)))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * (d * e)))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * (d * e)))\") == True, \"Wrong!\"\n    check_expression(\"((a + b) * (c * (d * e)))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) * (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) * (d + e))\") == True, \"Wrong!\"\n    check_expression(\"((a + (b * c)) * (d + e))\") ="
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_expression('(((1+2)*3)+(4+5))') == True, 'Expected True, but got False'\nassert     check_expression('(((1+2)*3)+(4+5))') == False, 'Expected False, but got True'\nassert     check_expression('(((1+2)*3)+(4+5))') == True, 'Expected True, but got False'\nassert     check_expression('(((1+2)*3)+(4+5))') == True, 'Expected True, but got False'\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_expression('(')== False, \"Check fail\"\nassert     check_expression('a')== False, \"Check fail\"\nassert     check_expression('((((' )== False, \"Check fail\"\nassert     check_expression('((())')== False, \"Check fail\"\nassert     check_expression('((())))')== False, \"Check fail\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    check_expression(\"(((3+4)*5)-(2*3))\") == False\n    check_expression(\"((3+4)*5)-(2*3)\") == True\nassert \n    check_expression(\"(((3+4)*5)-(2*3)\") == False\nassert \n    check_expression(\"(((3+4)*5)-(2*3)\") == False\nassert \n    check_expression(\"(((3+4)*5)-(2*3)\") == False\nassert \n    check_expression(\"(((3+4)*5)-(2*3)\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_expression(\n        \"( ( 1 + 2 ) * 3 ) )\" )\nassert     check_expression(\n        \"( 1 + 2 ) * 3 ) )\" )\nassert     check_expression(\n        \"( 1 + 2 ) ) )\" )\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_cases = [(\"abcd\", 1, \"bcd\"),\n               (\"abcdefg\", 1, \"cdefg\"),\n               (\"abcabcabc\", 1, \"abcabc\"),\n               (\"aaaa\", 1, \"aaaa\"),\n               (\"\", 1, \"\"),\n               (\"i love you\", 1, \"i love you\"),\n               (\"love i love you\", 1, \"love i\"),\n               (\"i i i i love you\", 1, \"i i i\")]\nfor test_str, K, solution in test_cases:\n    print(test_str, K, solution)\n    assert remove_length(test_str, K) == solution\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length(\"Codewars\", 2) == \"Co\"\nassert     remove_length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_length(\"Hi abc jkl\", 3) == \"Hi abc jkl\"\nassert     remove_length(\"Hi abc jkl\", 2) == \"Hi abc\"\nassert     remove_length(\"Hi abc jkl\", 1) == \"Hi\"\nassert     remove_length(\"Hi abc jkl\", 0) == \"\"\nassert     remove_length(\"abcd\", 2) == \"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length(\"thisisjustatest\", 1) == \"tisj\"\nassert     remove_length(\"thisisjustatest\", 2) == \"hisjt\"\nassert     remove_length(\"thisisjustatest\", 3) == \"ist\"\nassert     remove_length(\"thisisjustatest\", 4) == \"jst\"\nassert     remove_length(\"thisisjustatest\", 5) == \"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_length(\"geeksforgeeks\", 1) == \"geeksforgeeks\", \"Testing 1\"\nassert     remove_length(\"geeksforgeeks\", 2) == \"geek\", \"Testing 2\"\nassert     remove_length(\"geeksforgeeks\", 0) == \"geeksforgeeks\", \"Testing 3\"\nassert     remove_length(\"geeksforgeeks\", 1) == \"gf\", \"Testing 4\"\nassert     remove_length(\"geeksforgeeks\", 3) == \"eks\", \"Testing 5\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert remove_length(\"hello world, i am test\", 1) == \"hello, i am test\"\nassert remove_length(\"hello world, i am test\", 2) == \"hello world, i am test\"\nassert remove_length(\"hello world, i am test\", 3) == \"hello world, i am test\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_length('this is a sentence and this is a test', 2) =='s a et st e s a t t', \\\n'Incorrect result for this case'\nassert     remove_length('this is a sentence and this is a test', 2) =='s a et st e s a t t', \\\n'Incorrect result for this case'\nassert     remove_length('this is a sentence and this is a test', 0) == 'is a sentence and this is a test', \\\n'Incorrect result for this case'\nassert     remove_length('', 3) == '', 'Incorrect result for this case'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     occurance_substring(\"Durga\", \"durga\") == None\nassert     occurance_substring(\"Durga\", \"durga\") == (0, 4)\nassert     occurance_substring(\"durga\", \"durga\") == (0, 4)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not occurance_substring(\"i have a small breakfast\", \"breakfast\")\nassert not occurance_substring(\"i have a big breakfast\", \"breakfast\")\nassert occurance_substring(\"i have a small breakfast\", \"small\")\nassert occurance_substring(\"i have a big breakfast\", \"big\")\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \noccurance_substring(\"accbaccd\",\"acc\") == 1\nassert occurance_substring(\"accbaccd\",\"acc\") == 3\nassert occurance_substring(\"accbaccd\",\"d\") == 2\nassert occurance_substring(\"accbaccd\",\"a\") == 1\nassert occurance_substring(\"\",\"\") == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     occurance_substring(\"abcdabcef\",\"ab\") == (1,3)\nassert    occurance_substring(\"abcdabcef\",\"abcef\") == (4,9)\nassert    occurance_substring(\"abcdabcef\",\"bcef\") == (None,None)\nassert    occurance_substring(\"abcdabcef\",\"ef\") == (None,None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     occurance_substring(\"ababababab\",\"ab\")=={(0, 0): 2, (0, 1): 1, (0, 2): 0, (1, 0): 2, (1, 1): 0, (1, 2): 0}\nassert     occurance_substring(\"ababababab\",\"ab\")=={(0, 0): 2, (0, 1): 1, (0, 2): 0, (1, 0): 2, (1, 1): 0, (1, 2): 0}\nassert     occurance_substring(\"abcab\",\"ab\")=={(0, 0): 1, (0, 1): 1, (0, 2): 0, (1, 0): 1, (1, 1): 0, (1, 2): 0}\nassert     occurance_substring(\"ab\",\"ab\")=={(0, 0): 1, (0, 1): 1, (0, 2): 0, (1, 0): 1, (1, 1): 0, (1, 2): 0}\nassert     occurance_substring(\"abc\",\"ab\")=={(0, 0): 1, (0, 1): 1, (0, 2): 0, (1, 0): 1, (1, 1): 0, (1, 2): 0}\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_match(text,pattern):\n    '''\n    Write a function to check if a pattern matches the whole text.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring('applejuice', 'juice') == True\nassert     occurance_substring('applejuice', 'juice') == None\nassert     occurance_substring('appeljuice', 'juice') == None\nassert     occurance_substring('applejuice', 'juice') == None\nassert     occurance_substring('appeljuice', 'juice') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     occurance_substring(text='Mississippi',pattern='iss') == None\nassert     occurance_substring(text='Mississippi',pattern='iss') == None\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \noccurance_substring('ABCDabcABC', 'abc') == {'position': 5,'substring': 'abc'}\nassert occurance_substring('ABCDabcABC', 'ABC') == {'position': 5,'substring': 'abc'}\nassert occurance_substring('ABCDabcABC', 'ABCD') == None\nassert occurance_substring('ABCDabcABC', 'ABCDEF') == None\nassert occurance_substring('ABCDEFabcABC', 'abc') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_position([5, 1, 2, 4, 3]) == True\nassert odd_position([5, 1, 2, 4, 5]) == False\nassert odd_position([5, 1, 5, 3, 4, 2]) == True\n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_position([2,4,1,6,8,3]) == True\nassert odd_position([2,4,1,6,8,3,5]) == False\nassert odd_position([2,1,6,8,3,5]) == False\nassert odd_position([1,2,3,4]) == True\nassert odd_position([1,2,3,4,5]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9,10])==True, 'Wrong!'\nassert odd_position([1,2,3,4,5,6,7,8,9])==False, 'Wrong!'\nassert odd_position([1,2,3,4,5,6,7,8,9,10])==False, 'Wrong!'\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9,10]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nQuestion 4:\nWrite a python function to get the nth odd number of a given list.\n'''\ndef odd_number(nums,n):\n    '''\n    Write a python function to get the nth odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_position([1,2,3,4,5,6,7]) == True\nassert odd_position([1,2,3,4,5,6,7,8]) == False\n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == True\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == False\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == False\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == True\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_vowels(\"o a c c a\") == 3, \"Example 1\"\nassert     count_vowels(\"ae i o\") == 1, \"Example 2\"\nassert     count_vowels(\"ae i o a\") == 2, \"Example 3\"\nassert     count_vowels(\"o a c c a a\") == 3, \"Example 4\"\nassert     count_vowels(\"o a e e a\") == 1, \"Example 5\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_vowels(\"a\") == 1, \"a should have 1 vowel neighbor\"\nassert     count_vowels(\"aa\") == 2, \"aa should have 2 vowels neighbors\"\nassert     count_vowels(\"aab\") == 2, \"aab should have 2 vowels neighbors\"\nassert     count_vowels(\"abc\") == 0, \"abc should have 0 vowels neighbors\"\nassert     count_vowels(\"hello\") == 2, \"hello should have 2 vowels neighbors\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_vowels(\"\") == 0, \"Empty string\"\nassert     count_vowels(\"ab\") == 0, \"Empty string\"\nassert     count_vowels(\"tour\") == 0, \"Empty string\"\nassert     count_vowels(\"oat\") == 1, \"one vowel\"\nassert     count_vowels(\"daily\") == 1, \"one vowel\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_vowels('hello') == 'lh', 'hello'\nassert     count_vowels('aabcc') == '3', 'aabcc'\nassert     count_vowels('t') == '0', 't'\nassert     count_vowels('123456') == '', '123456'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_vowels('ABEJU') == 2\nassert count_vowels('CASJE') == 3\nassert count_vowels('ADNQE') == 3\nassert count_vowels('JEON') == 1\nassert count_vowels('WHHAAJE') == 3\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels(\"Mr John Smith\") == {'o': 2, 'l': 3,'s': 1, 'i': 1,'m': 1, 'n': 1, 't': 1, 'r': 1, 'h': 1, 'u': 1, 'f': 1, 'w': 1}\nassert     count_vowels(\"Hello my friend John Smith\") == {'o': 3, 'h': 2, 'e': 2, 'l': 2, 'i': 2,'s': 1, 'd': 1, 'n': 1, 't': 1, 'c': 1,'m': 1, 'u': 1, 'p': 1, 'r': 1, 'j': 1, 'f': 1, 'w': 1}\nassert     count_vowels(\"Bibby McBobby\") == {'b': 2, 'e': 1, 'i': 1, 'c': 1, 'o': 1,'m': 1, 'b': 1, 'y': 1, 'p': 1, 'l': 1,'s': 1, 'u': 1, 'f': 1}\nassert     count_vowels(\"Race Car\") == {'a': 2, 'e': 2, 'c': 2, 'o': 2, 'r': 1, 't': 1, 'u': 1}\nassert     count_vowels(\"I'm a robot\") == {'o': 3,'m': 1, 'i': 1, 'a': 1,'s': 1, 't': 1, 'h': 1, 'n': 1, 'r': 1, 'f': 1, 'd': 1, 'e': 1, 'w': 1}\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_vowels('happy') == 3\nassert     count_vowels('hippopotamus') == 6\nassert     count_vowels('happypotamus') == 7\nassert     count_vowels('hippopotamuses') == 7\nassert     count_vowels('hippopotamussss') == 7\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels('aeiou') == 1, \"case 1: Expected: 1, Actual: %d\" % count_vowels('aeiou')\nassert     count_vowels('leetcode') == 1, \"case 2: Expected: 1, Actual: %d\" % count_vowels('leetcode')\nassert     count_vowels('hello') == 0, \"case 3: Expected: 0, Actual: %d\" % count_vowels('hello')\nassert     count_vowels('h') == 0, \"case 4: Expected: 0, Actual: %d\" % count_vowels('h')\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_vowels('hello') == 0\nassert     count_vowels('geeksforgeeks') == 5\nassert     count_vowels('geeks') == 3\nassert     count_vowels('python') == 2\nassert     count_vowels('python') == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_vowels('abcd') == 0\nassert     count_vowels('abcd') == 0\nassert     count_vowels('xyzz') == 0\nassert     count_vowels('xyz') == 1\nassert     count_vowels('xy') == 2\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n\n    # \n    # ###############################################################################\n    # # write your solution here\n    # ###############################################################################\n    # arr_set = set(arr)\n    # return sum(arr_set)\n    # \n    # ###############################################################################\n    # # Test Your Solution\n    # ###############################################################################\n\ndef test_find_sum():\n    assert find_sum([1, 2, 3, 4]) == 6\n    "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_sum([1,2,3,4,5,6,7,8,9,1]) == 55, 'Correctness not satisfied'\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_sum([1,2,3,4,5]) == 6, \"Should be 6\"\nassert     find_sum([1,2,1,1,3]) == 4, \"Should be 4\"\nassert     find_sum([1,2,3]) == 3, \"Should be 3\"\nassert     find_sum([1]) == 1, \"Should be 1\"\nassert     find_sum([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\nprint(find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_sum([1,2,2,3,4]) == 6, \"Wrong answer\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_all(arr): \n    '''\n    Write a python function to find the sum of all elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_sum([1,2,3,3,5,6,7,7]) == 12\nassert     find_sum([1,2,3,4,5,5,6,7,8]) == 16\nassert     find_sum([1,2,3,4,5,6,6,7,8,9]) == 17\nassert     find_sum([]) == 0\n\ndef find_sum_2(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # sum of the non-repeated elements in the array\n    s = 0\n    # loop over the array\n    for i in range(0, len(arr)):\n        # if the element is not the same as the one before, add to sum\n        if i > 0 and arr[i]!= arr[i-1]:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_sum([1,2,3,4,5,6,7]) == 21, 'Wrong!'\nassert     find_sum([1,2,3,4,5,5,5,7]) == 21, 'Wrong!'\nassert     find_sum([1,2,3,4,5,5,5,7,8]) == 21, 'Wrong!'\n\nprint('[+] find_sum TEST PASSED')"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([1,2,2,3,4,5,6,7,7,8]) == \\\n    [\n        [1,2,2],\n        [3,4,5],\n        [6,7,7],\n        [8]\n    ]\n\nassert     pack_consecutive_duplicates([0,0,0,0,0,0,0,0]) == \\\n    [\n        [0,0,0]\n    ]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,6]) == [[1,2,3,4],[5,6]]\nassert     pack_consecutive_duplicates([1,2,1,4,5,6,1,8]) == [[1,2],[4,5],[1,8]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,3,2]) == [[1,2,3,4],[5,6],[3,2]]\n\ndef remove_all_adjacent(list1):\n    '''\n    Write a function to remove all adjacent duplicates from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,3,4,5,5,6]) == [[1,2,3], [3,4,5], [5,6]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8,9]) == [[1,2,3], [4,5,6], [7,8,9]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,5,6,7,8,9,9]) == [[1,2,3], [4,5,6], [7,8,9,9]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8,9,9]) == [[1,2,3], [4,5,6], [7,8,9,9]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([1,2,1,3,3])==[[1,2,1],[3,3]]\nassert     pack_consecutive_duplicates([1,1,1,1,1])==[[1,1,1,1,1]]\nassert     pack_consecutive_duplicates([])==[]\nassert     pack_consecutive_duplicates([0,0,0])==[[0,0,0]]\nassert     pack_consecutive_duplicates([0,0,0,0])==[[0,0,0,0]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nIn this problem, you are given a list of integers `arr`, and your task is to print all the possible \nlists with the given length.\n\nInput Format:\n\nThe first and the only argument contains an integer `arr`, the array of integers.\nOutput Format:\n\nReturn a list of lists, with each inner list containing the consecutive elements of the array.\nConstraints:\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9]))\nprint(pack_consecutive_duplicates([1,1,2,3,4,5,6,7,8,9]))\nprint(pac"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 2, 3]) == [[1, 2, 2], [3]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 4, 5]) == [[1, 2, 3], [4, 4, 5]]\nassert     pack_consecutive_duplicates([1, 2, 2, 2, 3]) == [[1, 2, 2], [2, 3]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5]) == [[1, 2, 3], [4, 5]]\nassert     pack_consecutive_duplicates([1, 1, 2, 2, 2, 3, 4, 4, 5, 5]) == [[1, 1], [2, 2, 2], [3, 4, 4, 5, 5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \npack_consecutive_duplicates([1, 1, 2, 3, 4]) == [[1, 2], [3], [4]]\nassert \npack_consecutive_duplicates([1, 1, 1, 2, 3, 4]) == [[1], [1, 2], [1, 3], [1, 4]]\nassert \npack_consecutive_duplicates([1, 1, 2, 2, 3, 4]) == [[1], [1, 2], [2], [3, 4]]\nassert \npack_consecutive_duplicates([1, 1, 1, 2, 2, 2, 3, 4, 4, 4]) == [[1], [1, 2], [1, 3], [1, 4], [2], [2, 2], [2, 3], [2, 4], [3], [3, 4], [4], [4, 4]]"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 3, 3]) == [[1, 2], [3, 3]]\nassert     pack_consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 3]) == [[1, 1], [2, 2, 2], [3, 3]]\nassert     pack_consecutive_duplicates([1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3]) == [[1, 1], [2, 2, 2], [2, 2, 2], [3, 3]]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates(['a', 'b', 'c', 'a', 'b']) == [['a', 'b'], ['c']]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pack_consecutive_duplicates([1,1,2,3,3,4,5]) == [[1,1],[2,3,4],[5]]\nassert     pack_consecutive_duplicates([1,2,1,3,4,4,5]) == [[1,2],[1,3,4],[4,5]]\nassert     pack_consecutive_duplicates([1,2,1,1,2,3,4,5]) == [[1,2],[1,1,2],[1,3,4],[2,5]]\n\ndef longest_consecutive_repeating_characters(list2):\n    '''\n    Write a function that returns the longest substring that is also a palindrome in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef unique_sublists(l):\n    dict = {}\n    for el in l:\n        if el in dict:\n            dict[el] += 1\n        else:\n            dict[el] = 1\n    return dict\n\n\nprint(unique_sublists([1,1,2,2,3,4,5,6,6,7,7,8]))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[],[]]) == {}\nassert     unique_sublists([[1,2], [1,2], [1,2]]) == {(1,2):3}\nassert     unique_sublists([[1,2], [1,2], [1,2], [1,2], [1,2]]) == {(1,2):5}\nassert     unique_sublists([[1,2], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2]]) == {(1,2):11}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    unique_sublists(\n        [\n            [0, 1, 2],\n            [0, 1],\n            [0, 2],\n            [0],\n            [1, 2],\n            [1],\n            [1, 1],\n            [1, 2],\n            [1, 1, 1],\n            [2]\n        ]\n    ) == {\n            (0, 1, 2): 1,\n            (0, 1): 1,\n            (0, 2): 2,\n            (0,): 2,\n            (1, 2): 2,\n            (1): 3,\n            (1, 1): 1,\n            (1, 2): 1,\n            (1, 1, 1): 1,\n            (2): 1\n        }\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert unique_sublists([1,2,2]) == {(1, 1), (2, 1)}\nassert unique_sublists([1,1,2,2,3,3,4,5]) == {(1, 2), (2, 2), (3, 2), (4, 1), (5, 1)}"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[]]) == {}\nassert     unique_sublists([[1]]) == {(1,): 1}\nassert     unique_sublists([[1], [2]]) == {(1,): 1, (2,): 1}\nassert     unique_sublists([[1,1,2], [2,2]]) == {(1,1): 1, (2,2): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([1,2,3,4,1]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1, (1,): 2}\nassert     unique_sublists([1,1,1,2,2,2,2,2]) == {(1,): 1, (2,): 2, (2,): 3}\nassert     unique_sublists([1,1,1,1,1]) == {(1,): 5}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([\"bob\", \"bob\", \"bob\"]) == {}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([1]) == {(1,): 1}\nassert     unique_sublists([1,2]) == {(1,): 1, (2,): 1}\nassert     unique_sublists([1,1,1]) == {(1,): 3, (1,1): 2}\nassert     unique_sublists([1,1,1,2,2]) == {(1,1): 4, (1,2): 3, (1,1,1): 3, (2,2): 2}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([[],\n                          [2],\n                          [2],\n                          [3],\n                          [4, 4, 5, 6],\n                          [3, 3, 3],\n                          [2, 2, 2],\n                          [2],\n                          [2],\n                          [2, 2]]) == {(2, 3): 3,\n                                   (2, 2, 2): 1,\n                                   (3, 3): 1,\n                                   (4, 4, 5, 6): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([1,2,3]) == {\n            (1,): 1,\n            (2,): 1,\n            (3,): 1\n        }\nassert unique_sublists([[1,2],2]) == {\n            (1,2): 1,\n            (2,): 1\n        }\nassert unique_sublists([1,2,2,2]) == {\n            (1,): 1,\n            (2,): 2,\n            (2,2): 1\n        }\nassert unique_sublists([1,2,3,4]) == {\n            (1,): 1,\n            (2,): 1,\n            (3,): 1,\n            (4,): 1\n        }\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([1]) == {1: 1}\nassert     unique_sublists([1, 2, 3, 4, 5, 6, 7]) == {(1, 2, 3, 4, 5): 3, (1, 2, 5, 6): 3, (1, 3, 4, 5): 3, (1, 3, 6): 3, (1, 4, 5): 3, (1, 4, 6): 3, (1, 5, 6): 3, (2, 3, 4, 5): 3, (2, 3, 6): 3, (2, 4, 5): 3, (2, 4, 6): 3, (2, 5, 6): 3, (3, 4, 5): 3, (3, 4, 6): 3, (3, 5, 6): 3, (4, 5, 6): 3}\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_combinations([(1,2,3,4),(3,4,5,6)]) == ((3, 4), (3, 4, 5, 6)) \nassert     find_combinations([(1,2,3,4),(3,4,5,6),(7,8,9,10)]) == ((7, 8, 9), (7, 8, 9, 10)) \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_combinations([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3,7],[4,5,6,9],[4,5,7,8],[1,2,3,4,5,7],[1,2,3,4,6,9],[1,2,3,4,7,8],[1,2,3,4,7,9],[1,2,3,5,6,9],[1,2,3,5,7,8],[1,2,3,5,7,9],[1,2,3,6,9],[1,2,3,7,9],[1,2,4,5,6,9],[1,2,4,5,7,9],[1,2,4,5,7,9],[1,2,4,6,9],[1,2,4,7,9],[1,2,5,6,9],[1,2,5,7,9],[1,2,5,7,9],[1,2,6,9],[1,2,7,9],[1,3,4,5,6,9],[1,3,4,5,7,9],[1,3,4,5,7,9],[1,3,4,6,9],[1,3,4,7,9],[1,3,5,6,9],[1,3,5,7,9],[1,3,5,7,9],[1,3,6,9],[1,3,7,9],[1,4,5,6,9],[1,4,5,7,9],[1,4,5,7,9],[1,4,6,9],[1,4,7,9],[1,5,6,9],[1,5,7,9],[1,5,7,9],[1,6,9],[1,7,9]]\n    assert find_combinations([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3,7],[4,5,6,9],[4,5,7,8],[1,2,3,4,5,7],[1,2,3,4,6,9],[1,2,3,4,7,8],[1,2,3,5,6,9],[1,2,3,5,7,8],[1,2,3,5,7,9],[1,2,3,6,9],[1,2,3,7,9],[1,2,4,5,6,9],[1,2,4,5,7,9],[1,2,4,5,7,9],[1,2,4,6,9],[1,2,4,7,9],[1,2,5,6,9],[1,2,5,7,9],[1,2,5,7,9],[1,2,6,9],[1,2,7,9],[1,3,4,5,6,9],[1,3,4,5,7,9],[1,3,4,5,7,9],[1,3,4,6,9],[1,3,4,7,9],[1,3,5,6,9],[1,3,5,7,9],[1,3,5,7,9],[1,3,6,9],[1,3,7,9],[1,4,5,6,9],[1,4,5,7,9],[1,4,5,7,9],[1,4,6,9],[1,4,7,9],[1,5,6,9],[1,5,7,9],[1,5,7,9],[1,6,9],[1,7,9]]\n    assert find_combinations([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3,7],[4,5,6,9],[4,5,7,8],[1,2,3,4,5,7],[1,2,3,4,6,9],[1,2,3,4,7,8],[1,2,3,5,6,9],[1,2,3,5,7,8],[1,2,3,5,7,9],[1,2,3,6,9],[1,2,3,7,9],[1,2,4,5,6,9],[1,2,4,5,7,9],[1,2,4,5,7,9],[1,2,4,6,9],[1,2,4,7,9],[1,2,5,6,9],[1,2,5,7,9],[1,2,5,7,9],[1,2,6,9],[1,2,7,9],[1,3,4,5,6,9],[1,3,4,5,7,9],[1,3,4,5,7,9],[1,3,4,6,9],[1,3,4,7,9],[1,3,5,6,9],[1,3,5,7,9],[1,3,5,7,9],[1,3,6,9],[1,3,7,9],[1,4,5,6,9],[1,4,5,7,9],[1,4,5,7,9],[1,4,6,9],[1,4,7,9],[1,5,6,9],[1,5,7,9],[1,5,7,9],[1,6,9],[1,7,9]]\n    assert find_combinations([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3,7],[4,5,6,9],[4,5,7,8],[1,2,3,4,5,7],[1,2,3,4,6,9],[1,2,3,4,7,8],[1,2,3,5,6,9],[1,2,3,5,7,8],[1,2,3,5,7,9],[1,2,3,6,9],[1,2,3,7,9],[1,2,4,5,6,9],[1,2,4,5,7,9],[1,2,4,5,7,9],[1,2,4,6,9],[1,2,4,7,9],[1,2,5,6,9],[1,2,5,7,9],[1,2,5,7,9],[1,2,6,9],[1,2,7,9],[1,3,4,5,6,9],[1,3,4,5,7,9],[1,3,4,5,7,9],[1,3,4,6,9],[1,3,4,7,9],[1,3,5,6,9],[1,3,5,7,9],[1,3,5,7,9],[1,3,6,9],[1,3,7,9],[1,4,5,6,9],[1,4,5,7,9],[1,4,5,7,9],[1,4,6,9],[1,4,7,9],[1,5,6,9],[1,5,7,9],[1,5,7,9],[1,6,9],[1,7,9]]\n    assert find_combinations([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3,7],[4,5,6,9],[4,5,7,8],[1,2,3,4,5,7],[1,2,3,4,6,9],[1,2,3,4,7,8],[1,2,3,5,6,9],[1,2,3,5,7,8],[1,2,3,5,7,9],[1,2,3,6,9],[1,2,3,7,9],[1,2,4,5,6,9],[1,2,4,5,7,9],[1,2,4,5,7,9],[1,2,4,6,9],[1,2,4,7,9],[1,2,5,6,9],[1,"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([(1, 2), (1, 3), (2, 3), (2, 4)]) == [(1, 2), (1, 3), (2, 3), (2, 4)]\nassert     find_combinations([(1, 2), (1, 3), (2, 3), (2, 4)]) == [(1, 2), (1, 3), (2, 3), (2, 4)]\nassert     find_combinations([(1, 2), (1, 3), (2, 3), (2, 4)]) == [(1, 2), (1, 3), (2, 3), (2, 4)]\nassert     find_combinations([(1, 2), (1, 3), (2, 3), (2, 4)]) == [(1, 2), (1, 3), (2, 3), (2, 4)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_combinations([1,2,3,4]) ==     [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], \n                                                [1,4,2,3], [1,4,3,2], [2,1,3,4], [2,1,4,3], \n                                                [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1],\n                                                [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1],\n                                                [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2],\n                                                [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]] == \\\n                                        [(1,2,3,4), (1,2,4,3), (1,3,2,4), (1,3,4,2),\n                                        (1,4,2,3), (1,4,3,2), (2,1,3,4), (2,1,4,3), \n                                        (2,3,1,4), (2,3,4,1), (2,4,1,3), (2,4,3,1),\n                                        (3,1,2,4), (3,1,4,2), (3,2,1,4), (3,2,4,1),\n                                        (3,4,1,2), (3,4,2,1), (4,1,2,3), (4,1,3,2),\n                                        (4,2,1,3), (4,2,3,1), (4,3,1,2), (4,3,2,1)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations([(1,2),(3,5)]) == [(1,2,3),(1,3,5),(2,3,5)]\nassert find_combinations([(0,3),(1,2)]) == [(0,1,2,3)]\nassert find_combinations([(0,3),(0,2)]) == []\nassert find_combinations([(0,3),(0,2),(3,5)]) == [(0,1,2,3,5)]\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(find_combinations([(1,2),(3,5)]))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations(['A','B','C','D','E']) == [('A','B'),('A','C'),('A','D'),('A','E'),('B','C'),('B','D'),('B','E'),('C','D'),('C','E'),('D','E')]\nassert     find_combinations(['A','B','C']) == [('A','B'),('A','C'),('B','C')]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_combinations([(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)]) == [(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)]\nassert     find_combinations([(1,2),(2,3),(2,4)]) == [(1,2),(2,3),(2,4)]\nassert     find_combinations([(1,2),(2,3),(3,4)]) == [(1,2),(2,3),(3,4)]\nassert     find_combinations([(1,2),(2,3),(3,4)]) == [(1,2),(2,3),(3,4)]\nassert     find_combinations([(1,2),(2,3),(3,4)]) == [(1,2),(2,3),(3,4)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_combinations([(1, 1), (1, 2), (2, 2)]) == [(1, 1), (1, 2), (2, 2)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([(1,2,3,4),(4,5,6,7),(2,3,4,5),(4,5,6,7),(2,4,5,7),(4,5,6,7)]) == \n    {(2,2,4,5),(2,2,4,7),(2,2,5,5),(2,2,5,7),(2,3,4,5),(2,3,4,7),(2,3,5,5),(2,3,5,7),(3,3,4,5),(3,3,4,7),(3,3,5,5),(3,3,5,7),\n    (4,4,5,5),(4,4,5,7),(4,4,6,5),(4,4,6,7),(4,5,5,5),(4,5,5,7),(4,5,6,5),(4,5,6,7),(5,5,6,5),(5,5,6,7),(6,6,5,5),(6,6,5,7),\n    (7,7,5,5),(7,7,5,7),(7,7,6,5),(7,7,6,7),(7,7,7,5),(7,7,7,7)}\n\ndef find_combinations_with_set(test_list):\n    '''\n    Write a function to find the combinations of sums with set in the given set list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-set-in-set-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_combinations([(1, 2, 3), (1, 5, 6), (4, 5, 6)]) == [(1,2,5),(1,2,6),(1,5,6),(4,5,6)]\nassert     find_combinations([(1, 5, 6), (2, 3, 4), (1, 2, 3, 4, 5, 6)]) == [(1,2,3,4,5,6)]\nassert    find_combinations([(1, 2, 3), (1, 2, 3, 4, 5, 6)]) == [(1,2,3),(1,2,3,4,5,6)]\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_divisors(10) == 4\nassert     count_divisors(3) == 1\nassert     count_divisors(5) == 2\n\nprint(\"Passed all tests\\n\")\n\ndef count_divisors_recursive(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_divisors(1) == 0, \"divisors of 1 is 0\"\nassert     count_divisors(2) == 0, \"divisors of 2 is 0\"\nassert     count_divisors(3) == 1, \"divisors of 3 is 1\"\nassert     count_divisors(6) == 2, \"divisors of 6 is 2\"\nassert     count_divisors(12) == 5, \"divisors of 12 is 5\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_divisors(2) == 2\nassert     count_divisors(4) == 2\nassert     count_divisors(8) == 3\n\ndef number_of_divisors(n) :\n    '''\n    Write a python function to calculate the number of divisors of a positive number n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-16.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef solve_problem(n) :\n    '''\n    Write a python function to compute the first and last digit of the sum of the first n even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_divisors(13) == 2\nassert count_divisors(4) == 1\nassert count_divisors(18) == 3\nassert count_divisors(0) == 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(odd_length_sum([1,2,3,4,5])) # [2]\nprint(odd_length_sum([1,4,4,4,4,5,6,6,8])) # [5,6]\nprint(odd_length_sum([2,1,4,5,6,7,8,9])) # [1,9,9]\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef sum_even_odd_subarrays(arr):\n    '''\n    Write a python function to find the sum of all even length subarrays. https://www.geeksforgeeks.org/sum-of-all-even-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_length_sum([1, 2, 3, 4, 5, 6]) == 15\n\nassert \nodd_length_sum([1, 2, 3, 4, 5]) == 5\n\nassert \nodd_length_sum([1, 2, 3, 4]) == 7\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_length_sum([1,2,3,4]) == 5\nassert odd_length_sum([1,2,3,4,5]) == 9\nassert odd_length_sum([1,2,3,4,5,6]) == 13\nassert odd_length_sum([1,2,3,4,5,6,7,8]) == 21\nassert odd_length_sum([1,2,3,4,5,6,7,8,9]) == 33\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_length_sum([]) == 0\nassert     odd_length_sum([1]) == 0\nassert     odd_length_sum([1, 2]) == 0\nassert     odd_length_sum([1, 2, 3]) == 0\nassert     odd_length_sum([1, 2, 3, 4]) == 1\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_length_sum([1, 1, 2, 2, 3, 4]) == 4\nassert     odd_length_sum([1, 1, 1, 2, 3, 4]) == 6\nassert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 0\nassert     odd_length_sum([]) == 0\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 29\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_length_sum([1,2,3,4,5]) == 0, 'odd_length_sum should be 0'\nassert     odd_length_sum([1,2,3,4,5,6,7]) == 15, 'odd_length_sum should be 15'\nassert     odd_length_sum([1,2,3,4,5,6,7,8]) == 28, 'odd_length_sum should be 28'\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9]) == 35, 'odd_length_sum should be 35'\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 55, 'odd_length_sum should be 55'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12]) == 55\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 60\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    odd_length_sum([1,2,3,4]) == 6\n    odd_length_sum([2,3,4,5]) == 9\n    odd_length_sum([1,2,3,4,5]) == 12\n    odd_length_sum([5,2,3,4,5]) == 10\n    odd_length_sum([1,2,3,4,5,6,7,8,9]) == 45\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_length_sum([1,2,3,4]) == 6\nassert odd_length_sum([1,2,3,4,5]) == 8\nassert odd_length_sum([1,2,3]) == 5\nassert odd_length_sum([1,2,3,4,5]) == 9\nassert odd_length_sum([1,2,3,4,5,6]) == 8\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rgb_to_hsv(1, 1, 1) == (0, 0, 0)\nassert     rgb_to_hsv(1, 1, 0) == (359.0/360, 1.0, 0.0)\nassert     rgb_to_hsv(1, 1, 255) == (359.0/360, 1.0, 1.0)\nassert     rgb_to_hsv(255, 1, 1) == (359.0/360, 0.0, 0.0)\nassert     rgb_to_hsv(255, 1, 0) == (359.0/360, 0.0, 1.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nimport math\nimport os\nfrom random import *\nimport re\nimport sys\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rgb_to_hsv(255, 255, 255) == (1.0, 1.0, 1.0)\nassert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(255, 255, 0) == (1.0, 1.0, 0.0)\nassert     rgb_to_hsv(255, 0, 255) == (1.0, 0.0, 1.0)\nassert     rgb_to_hsv(255, 255, 255) == (1.0, 1.0, 1.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-hsv-color-model-rgb-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert     rgb_to_hsv(255, 255, 255) == (360, 100, 100)\nassert     rgb_to_hsv(255, 255, 0) == (360, 100, 0)\nassert     rgb_to_hsv(255, 0, 255) == (360, 0, 100)\nassert     rgb_to_hsv(0, 255, 255) == (0, 100, 100)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([3, 4, 5, 6, 8, 10]) == (24, 60), 'Failed test case 1'\nassert mul_even_odd([3, 4, 5, 7]) == (30, 0), 'Failed test case 2'\nassert mul_even_odd([2, 4, 5, 7, 8, 10]) == (60, 0), 'Failed test case 3'\nassert mul_even_odd([2, 3, 5, 7, 8, 10]) == (0, 720), 'Failed test case 4'\nassert mul_even_odd([]) == (0, 0), 'Failed test case 5'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     mul_even_odd([1,2,3,4,5,6,7,8]) == (60,420)\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10]) == (0,0)\nassert     mul_even_odd([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == (-120,-720)\nassert     mul_even_odd([0,0,0,0,0,0,0,0,0,0]) == (0,0)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(mul_even_odd([3,4,5])) # 120\nprint(mul_even_odd([3,4,5,6])) # 1512\nprint(mul_even_odd([0,2])) # 0\nprint(mul_even_odd([1,3,4,5,6])) # 0\nprint(mul_even_odd([1,2,3,4,5,6,7,8])) # 0"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == (24,60)\nassert    mul_even_odd([3,4,5]) == (0,0)\nassert mul_even_odd([6,7,8,9,10]) == (3600,14400)\nassert mul_even_odd([]) == (1,1)\nassert mul_even_odd([1,1,1]) == (1,1)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == 0\nassert     mul_even_odd([1,2,3,4,5,6]) == 0\nassert     mul_even_odd([1,2,3,4,5,6,7]) == 0\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9]) == 0\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10]) == 0\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert mul_even_odd([1,2,3,4,5]) == 15\n\n\ndef even_odd(list1):\n    '''\n    Write a function to find the even number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int('(1, 2, 3, 4, 5, 6)') == (1,2,3,4,5,6)\nassert tuple_str_int('(1, 2, 3, 4, 5, 6, 7)') == (1,2,3,4,5,6,7)\nassert tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)') == (1,2,3,4,5,6,7,8,9,10)\nassert tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, "
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int('(1,2,3,4,5)') == (1,2,3,4,5)\nassert     tuple_str_int('(1, 2, (3,4), 5)') == (1, 2, (3,4), 5)\nassert     tuple_str_int('((2,3), 4)') == ((2,3), 4)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int('(1,2,3,4,5)') == (1,2,3,4,5)\nassert     tuple_str_int('(1,2,3,4,5)') == (1,2,3,4,5)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2,3,4)') == (1,2,3,4)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (tuple_str_int('()')    ==     ()), \"it should be  ()\"\nassert     (tuple_str_int('( )')    ==     ( )), \"it should be  ( )\"\nassert     (tuple_str_int(' ( ) )')    ==     (( )), \"it should be  (( ))\"\nassert     (tuple_str_int('( ) ) )')    ==     (( )), \"it should be  (( ))\"\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int(('', '')) == ((), ())\nassert     tuple_str_int(('a', 'b')) == ((), ('a', 'b'))\nassert     tuple_str_int(('a', 'b', 'c')) == ((), ('a', 'b', 'c'))\nassert     tuple_str_int(('a', 'b', 'c', 'd')) == ((), ('a', 'b', 'c', 'd'))\nassert     tuple_str_int(('a', 'b', 'c', 'd', 'e')) == ((), ('a', 'b', 'c', 'd', 'e'))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1, 2, 3)\nassert     tuple_str_int('(4,5,6)') == (4, 5, 6)\nassert     tuple_str_int('(1,2)') == (1, 2)\nassert     tuple_str_int('(3,4)') == (3, 4)\nassert     tuple_str_int('(5,6,7)') == (5, 6, 7)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2)\") == (1,2)\nassert     tuple_str_int(\"(1,2)\") == (1,2)\nassert     tuple_str_int(\"(1)\") == (1,)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,)\") == (1,)\nassert     tuple_str_int(\"( )\") == ()\nassert     tuple_str_int(\"(1,2,3), (4,5)\") == (1,2,3), (4,5)\nassert     tuple_str_int(\"(1,2,3), (4,5,6,7,8)\") == (1,2,3), (4,5,6,7,8)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3) \nassert     tuple_str_int(\"(1,2,3,4,5)\") == (1,2,3,4,5) \nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3) \nassert     tuple_str_int(\"(1,2,3,4,5)\") == (1,2,3,4,5) \nassert     tuple_str_int(\"(1,2)\") == (1,2) \n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_str_int('(1, 2)') == (1, 2)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_insertion([1,2,3,4,5], 5) == 3\nassert     right_insertion([1,2,3,4,5], 1) == 0\nassert     right_insertion([1,2,3,4,5], 6) == 4\nassert     right_insertion([1,2,3,4,5], 4) == 2\nassert     right_insertion([1,2,3,4,5], 0) == 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_monotonic(l):\n    '''\n    Write a function to determine whether an array is monotonic\n    '''\n    pass\n\ndef is_monotonic(l):\n    '''\n    Write a function to determine whether an array is monotonic\n    '''\n    pass\n\ndef is_monotonic(l):\n    '''\n    Write a function to determine whether an array is monotonic\n    '''\n    pass\n\ndef is_monotonic(l):\n    '''\n    Write a function to determine whether an array is monotonic\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     right_insertion([2,5,6,10], 7) == 1\nassert right_insertion([1,2,3,5], 5) == 3\nassert right_insertion([1,2,3,5], 5) == 3\nassert right_insertion([1,2,3,5], 5) == 3\nassert right_insertion([1,2,3,5], 5) == 3\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     right_insertion([1,4,7], 4) == 3\nassert     right_insertion([1,4,7], 5) == 4\nassert     right_insertion([1,4,7], 8) == 5\nassert     right_insertion([1,4,7], 9) == 5\nassert     right_insertion([1,4,7], 10) == 6\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \na = [2, 5, 6, 7, 8, 9]\nassert right_insertion(a, 6) == 5\nassert right_insertion(a, 10) == 6\nassert right_insertion(a, 4) == 4\nassert right_insertion(a, -1) == 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\na = [1, 4, 6, 8, 9, 11, 14, 16, 18, 19, 20]\nx = 14\n\nassert right_insertion(a, x) == 9\n\na = [1, 4, 6, 8, 9, 11, 14, 16, 18, 19, 20]\nx = 11\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_insertion([],1) == 0\nassert     right_insertion([2],1) == 1\nassert     right_insertion([2,1],1) == 1\nassert     right_insertion([1,2],1) == 1\nassert     right_insertion([1,2],3) == 2\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_insertion([1,2,3], 5) == 3\nassert     right_insertion([1,2,3,4], 5) == 2\nassert     right_insertion([1,3,4,5], 5) == 3\nassert     right_insertion([1,2,5,6,8], 6) == 5\n\ndef right_insertion_using_bisect(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # initialize bisect_right_position = bisect.bisect_right(a, x)\n    # if bisect_right_position == 0:\n    #     return 0\n    # else:\n    #     return bisect_right_position\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_three('abbbbbbbbbbbbbbb') == True\nassert     text_match_three('a') == False\nassert     text_match_three('aabbbbb') == False\nassert     text_match_three('ab') == False\nassert     text_match_three('ab') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_three('abcbabab') == True\nassert text_match_three('abcbabcc') == False\nassert     text_match_three('abb') == False\nassert text_match_three('abbbab') == False\n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three('')==True, 'Empty string'\nassert    text_match_three('a')==False, 'a'\nassert    text_match_three('ab')==True, 'a followed by b'\nassert    text_match_three('abba')==True, 'a followed by three b'\nassert    text_match_three('abccba')==True, 'a followed by three b'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_three('aab') == True\nassert     text_match_three('bbbb') == False\nassert     text_match_three('abab') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_three(\"AbAbAb\") == True\nassert     text_match_three(\"AbAbAb\") == True\nassert     text_match_three(\"bbbbbb\") == False\nassert     text_match_three(\"bbbbbb\") == False\nassert     text_match_three(\"b\") == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three('aabbbbb')    == False,     \"Wrong output (expected: False)\"\nassert text_match_three('abbbbbbbb')    == True,     \"Wrong output (expected: True)\"\nassert text_match_three('abbbbbbbbb')    == True,     \"Wrong output (expected: True)\"\nassert text_match_three('abcabcbbbbbb')    == True,     \"Wrong output (expected: True)\"\nassert text_match_three('abcbbbbbbb')    == True,     \"Wrong output (expected: True)\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three(\"abcab\") == True, \"abcab should match\"\nassert     text_match_three(\"abcab\") == False, \"abcab should not match\"\nassert     text_match_three(\"babcab\") == False, \"babcab should not match\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three('abcba') == True, 'Should be True'\nassert     text_match_three('abcb') == False, 'Should be False'\nassert     text_match_three('abcbaa') == True, 'Should be True'\nassert     text_match_three('aaabbba') == True, 'Should be True'\nassert     text_match_three('aabaa') == False, 'Should be False'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_three('ababab') == True\nassert     text_match_three('aababa') == False\nassert     text_match_three('abababab') == True\nassert     text_match_three('ababababab') == True\nassert     text_match_three('ababababab') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_three(\"abababab\") == True\nassert     text_match_three(\"aabaabaab\") == True\nassert     text_match_three(\"abbbbb\") == False\nassert     text_match_three(\"abbbbbb\") == False\nassert     text_match_three(\"bbaaaabbb\") == True\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('check ok')"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     new_tuple([\"a\", \"b\", \"c\"], \"abc\") == ('a', 'b', 'c')\nassert new_tuple((\"x\", \"y\", \"z\"), \"xyz\") == ('x', 'y', 'z')\nassert new_tuple((\"a\", \"b\", \"c\"), \"abc\") == ('a', 'b', 'c')\nassert new_tuple(('x', 'y', 'z'), 'xyz') == ('x', 'y', 'z')\nassert new_tuple([1, 2, 3], \"123\") == (1, 2, 3)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntest_list = [1, 2, 3, 4]\ntest_str = 'Python'\nprint(new_tuple(test_list, test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef oddTuples(x):\n    '''\n    Write a function to create all the odd numbers between 1 and n and\n    put it in a list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    new_tuple([1,2,3], \"abc\") == (1,2,3), \"Wrong Tuple\"\n    new_tuple([1,2,3], \"xyz\") == (1,2,3), \"Wrong Tuple\"\n    new_tuple([1,2,3], \"xy\") == (1,2,3), \"Wrong Tuple\"\n    new_tuple([1,2,3], \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     new_tuple(['1', '2', '3'], 'abc') == ('1', '2', '3')\nassert     new_tuple(['4', '5', '6'], 'abcd') == ('4', '5', '6')\nassert     new_tuple(['7', '8', '9'], 'abcde') == ('7', '8', '9')\nassert     new_tuple(['10', '11', '12'], 'abcdefg') == ('10', '11', '12')\nassert     new_tuple(['13', '14', '15'], 'abcdefgh') == ('13', '14', '15')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_position([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == False, \"Not supposed to be here\"\nassert even_position([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 0]) == True, \"Not supposed to be here\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_position([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([1,2,3,4,5,6,7,8,9]) == True, \"Should be True\"\nassert     even_position([1,2,3,4,5,6,7,8,9,10]) == False, \"Should be False\"\nassert     even_position([1,2,3,4,5,6,7,8,9,10,11]) == True, \"Should be True\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_position([3, 6, 4, 8, 10, 9, 5]) == True\nassert     even_position([3, 6, 4, 8, 10, 9, 5, 12, 14]) == True\nassert     even_position([3, 6, 4, 8, 10, 9, 5, 12, 14, 15]) == True\nassert     even_position([3, 6, 4, 8, 10, 9, 5, 12, 14, 15, 16]) == False\nassert     even_position([3, 6, 4, 8, 10, 9, 5, 12, 14, 15, 16, 17]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_position([2,4,6,8]) == True, \"should return True\"\nassert even_position([2,4,6,7]) == False, \"should return False\"\nassert even_position([2,4,6,8,2,4,6]) == True, \"should return True\"\nassert even_position([2,4,6,8,2,4,6,6]) == False, \"should return False\"\nassert even_position([2,4,6,8,2,4,6,6,2]) == True, \"should return True\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_position([1, 2, 3, 4, 5])\n\nassert even_position([1, 2, 3, 4, 5, 6, 7]) == False\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == True\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0)"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_position([2, 3, 4, 5]) == True\nassert     even_position([2, 3, 5, 4, 7]) == False\nassert     even_position([1, 3, 5, 4, 7]) == True\nassert     even_position([2, 4, 6, 8, 10]) == True\nassert     even_position([2, 4, 6, 8, 10, 18]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_position([2,4,6,8,10]) == False, \"should be False\"\nassert     even_position([2,4,6,8,10,12,14]) == True, \"should be True\"\nassert     even_position([]) == False, \"should be False\"\nassert     even_position([1,2,3,4,5]) == True, \"should be True\"\n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13]) == False\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15]) == False\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_nested((1,2,3,(4,5,6,7,8))) == (1,2,3,(4,5,6,7,8))\nassert     remove_nested((1,2,3,(4,5,6,7,8),9)) == (1,2,3,(4,5,6,7,8))\nassert     remove_nested((1,2,3,(4,5,6,7,8),9,10)) == (1,2,3,(4,5,6,7,8))\n\ndef remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == type((1,2,3,4)):\n        return test_tup[0]\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_nested(('a', 'b', 'c', 'd', 'e')) ==     (('a', 'b', 'c'), 'e')\nassert     remove_nested(('a', 'b', 'c', 'd', 'e')) ==     (('a', 'b', 'c'),)\nassert     remove_nested(('a', 'b', 'c', 'd', 'e')) ==     (('a', 'b', 'c'),)\nassert     remove_nested(('a',)) ==     (('a',),)\nassert     remove_nested(()) ==     ((),)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested(tuple_test) == (1,2), \"tuple_test is not correct\"\nassert     remove_nested((1,2)) == (1,2), \"tuple_test is not correct\"\nassert     remove_nested((2,1)) == (2), \"tuple_test is not correct\"\nassert     remove_nested((1,2,1,2,1,2,1,2)) == (1,2,1,2,1,2,1,2), \"tuple_test is not correct\"\nassert     remove_nested((1,2,3)) == (1,2,3), \"tuple_test is not correct\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_nested((1, 1, 1, 2, 2, 2, 3, 3, 3)) == (1, 2, 3), \"Test Failed\"\nassert remove_nested((1, 1, 1, 2, 2, 2, 3, 3, 3)) == (1, 2, 3), \"Test Failed\"\nassert remove_nested((1, 2, 3)) == (1, 2, 3), \"Test Failed\"\n\n'''\nOutput\n\n(1, 2, 3)\n(1, 2, 3)\n(1, 2, 3)\n'''\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested((1,2,3,))     == (1,2,3)\nassert     remove_nested((1,2,3,4))    == (1,2,4)\nassert     remove_nested((1,2,3,4,5))     == (1,2,4,5)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested(('a',('b','c'),('d','e'))) == ('a',('b','c'),('d','e'))\nassert     remove_nested(('a',('b','c'),('d','e'))) == ('a',('b','c'),('d','e'))\nassert     remove_nested((('a',('b','c'),('d','e')),('g','h'),('j','k'))) == (('a',('b','c'),('d','e')),('g','h'),('j','k'))\nassert     remove_nested((('a',('b','c'),('d','e')),('g','h'),('j','k'))) == (('a',('b','c'),('d','e')),('g','h'),('j','k'))\nassert     remove_nested((('a',('b','c'),('d','e')),('g','h'),('j','k'))) == (('a',('b','c'),('d','e')),('g','h'),('j','k'))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested((1,2,3)) == (1,2,3), 'incorrect'\nassert     remove_nested((1,(2,3),4)) == (1,2,3,4), 'incorrect'\nassert     remove_nested((1,2,(3,4))) == (1,2,3,4), 'incorrect'\nassert     remove_nested((1,2,3,(4,5,6))) == (1,2,3,4,5,6), 'incorrect'\nassert     remove_nested((1,2,3,4,(5,6))) == (1,2,3,4,5,6), 'incorrect'\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested((\"a\", (\"b\", \"c\", \"d\"), \"e\")) == \"a\", \"Should return 'a'\"\nassert     remove_nested((\"a\", (\"b\", \"c\", \"d\"), \"e\")) == (\"a\", \"e\"), \"Should return ('a', 'e')\"\nassert     remove_nested((\"a\", (\"b\", \"c\", \"d\"), \"e\")) == (\"a\", (\"b\", \"c\", \"d\")), \"Should return ('a', ('b', 'c', 'd'))\"\nassert     remove_nested((\"a\", (\"b\", \"c\", \"d\"), \"e\")) == (\"a\", (\"b\", \"d\")), \"Should return ('a', ('b', 'd'))\"\nassert     remove_nested((\"a\", (\"b\", \"c\", \"d\"), \"e\")) == (\"a\", (\"b\",)), \"Should return ('a', ('b',))\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested((1,2,3,(1,2,3),(1,2,3),(1,2,3)) == ((1,2,3),(1,2,3),(1,2,3)))\nassert     remove_nested((1,2,3,(1,2,3),(1,2,3),(1,2,3),(1,2,3))) == ((1,2,3),(1,2,3),(1,2,3))\nassert     remove_nested((1,2,3,(1,2,3))) == ((1,2,3),(1,2,3))\nassert     remove_nested((1,2,3,(1,2,3),(1,2,3),(1,2,3)) == ((1,2,3),(1,2,3),(1,2,3)))\nassert     remove_nested((1,2,3,(1,2,3),(1,2,3),(1,2,3)) == ((1,2,3),(1,2,3),(1,2,3)))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12)) \nassert     remove_nested((1,(2,3,4,5,6,7,8,9,10,11,12))) \nassert     remove_nested((1,2,3,(4,5,6,7,8,9,10,11,12))) \nassert     remove_nested((1,2,3,(4,5,6,7,8,9,10,11,12,13))) \nassert     remove_nested((1,2,3,(4,5,6,7,8,9,10,11,12,(13,)))) \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint \n\ninput_list = [\n    [1, 2, 3],\n    [4, 5],\n    [6, 7],\n    [8],\n    [9],\n    [10, 11],\n    [12],\n    [13, 14, 15],\n    [16],\n    [17, 18, 19, 20],\n    [21, 22, 23, 24]\n]\n\nassert count_list(input_list) == 26\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(count_list([[1,2,3],[4,5,6,7,8,9]]))\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_list([])==0, 'Input should be empty'\nassert     count_list([[]])==1, 'Input should be 1 list'\nassert     count_list([[],[]])==2, 'Input should be 2 lists'\nassert     count_list([[],[],''])==3, 'Input should be 3 lists'\nassert     count_list([['a','b'],['a','b']])==1, 'Input should be 1 list with 2 lists'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_list([[]]) == 0, \"1st input list should be empty\"\nassert count_list([[1,2],[]]) == 1, \"2nd input list should not be empty\"\nassert count_list([[1,2,3,4],[],[1,2,3,4,5]]) == 3, \"3rd input list should contain 3 lists\"\nassert count_list([[1,2,3,4],[],[]]) == 2, \"4th input list should contain 2 lists\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_list( [10, 20, 30, 40, 50] ) == 1, \\\n        \"Test failed: count_list( [10, 20, 30, 40, 50] ) should return 1\"\nassert     count_list( [10, 20, 30] ) == 2, \\\n        \"Test failed: count_list( [10, 20, 30] ) should return 2\"\nassert     count_list( [10, 20, 30, 40, 50, 20] ) == 3, \\\n        \"Test failed: count_list( [10, 20, 30, 40, 50, 20] ) should return 3\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_list([]) == 0, \"Empty list should have 0 lists in it.\"\nassert count_list([[]]) == 0, \"List containing one empty list should have 0 lists in it.\"\nassert count_list([[1,2],[1,2,3],[3]]) == 3, \"All lists should be counted in the result.\"\nassert count_list([[1,2],[1,2,3],[3],[1,2],[[1]]]) == 5, \"All lists should be counted in the result.\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_list([[1], [2], [3]]) == 1, 'First test case fails'\nassert     count_list([[], [], []]) == 3, 'Second test case fails'\nassert     count_list([[1], [2], [1]]) == 2, 'Third test case fails'\nassert     count_list([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3, 'Fourth test case fails'\nassert     count_list([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 4, 'Fifth test case fails'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([[[],[]],[],[]]    == 1) \nassert     count_list([[[1],[2]],[[3],[4]]])    == 2\nassert     count_list([[],[[1]],[[2]]])    == 3\nassert     count_list([[[[1]]],[[[2]]],[[[3]]],[[[4]]]])    == 4\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_list([]) == 0\nassert     count_list([1,2]) == 1\nassert     count_list([1,1,2]) == 2\nassert     count_list([1,1,1,2]) == 3\nassert     count_list([1,1,1,1,2]) == 4\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nRead the number of test cases.\nInput: array \nOutput: count the number of list\n'''"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last([1,2,3,4,5,6,7,8], 5) == 6, 'Wrong'\nassert     last([1,2,3,4,5,6,7,8], 4) == 7, 'Wrong'\nassert     last([1,2,3,4,5,6,7,8], 1) == 8, 'Wrong'\nassert     last([1,2,3,4,5,6,7,8], 6) == 5, 'Wrong'\nassert     last([1,2,3,4,5,6,7,8], 0) == 8, 'Wrong'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last([1,2,3,4,5,6], 5) == 5\nassert     last([1,2,3,4,5,6], 6) == 6\nassert     last([1,2,3,4,5,6], 1) == 6\nassert     last([1,2,3,4,5,6], 7) == 6\nassert     last([1,2,3,4,5,6], 0) == 0\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last([],2) == -1\nassert     last([],2) == -1\nassert     last([2, 3, 4, 5, 6],6) == 4\nassert     last([1, 2, 3, 4, 5],3) == 3\nassert     last([2, 3, 4, 5, 6],7) == 5\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last([1,2,3],3)==2\nassert last([1,2,3],4)==-1\nassert last([1,2,3,4],1)==3\nassert last([1,2,3,4],0)==4\nassert last([1,2,3,4],5)==-1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last([5,3,7,9], 5) == 2\nassert     last([], 10) == 0\nassert     last([10, 15, 20], 25) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([1,2,3,4,5,6],4) == 5, 'Wrong output'\nassert     last([1,2,3,4,5,6],6) == 6, 'Wrong output'\nassert     last([1,2,3,4,5,6],7) == 6, 'Wrong output'\nassert     last([1,2,3,4,5,6],0) == 0, 'Wrong output'\n\ndef lsr(arr,x):\n    '''\n    Write a python function to find the leftmost (smallest) element in the sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last([],4) == -1, 'testcase 1 failed'\nassert last([1],1) == 0, 'testcase 2 failed'\nassert last([1,2,3,4],4) == 3, 'testcase 3 failed'\nassert last([1,2,3,4],0) == -1, 'testcase 4 failed'\nassert last([1,2,3,4],1) == 0, 'testcase 5 failed'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last([1,2,3,4,5,6],1)==3, 'Should be 3'\nassert     last([1,2,3,4,5,6],7)==4, 'Should be 4'\nassert     last([1,2,3,4,5,6],8)==6, 'Should be 6'\nassert     last([1,2,3,4,5,6],3)==2, 'Should be 2'\nassert     last([1,2,3,4,5,6],5)==5, 'Should be 5'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    last([1,2,3,4,5],3) == 3, \"wrong\"\n    last([1,2,3,4,5],5) == 4, \"wrong\"\n    last([1,2,3,4,5],1) == 1, \"wrong\"\n    last([1,2,3,4,5],0) == 0, \"wrong\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last([1,2,3,4,5],3) == 3, \"Wrong answer\"\nassert     last([1,2,3,4,5],0) == 0, \"Wrong answer\"\nassert     last([1,2,3,4,5],5) == 5, \"Wrong answer\"\nassert     last([1,2,3,4,5],10) == 5, \"Wrong answer\"\nassert     last([1,2,3,4,5],6) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntext_starta_endb(\"aaab\") == False\nassert text_starta_endb(\"abaab\") == True\nassert text_starta_endb(\"aaaaab\") == False\nassert text_starta_endb(\"aaaaaa\") == False\nassert text_starta_endb(\"aaaaaaaaaa\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_starta_endb('text1_text2') == 'text1'\nassert     text_starta_endb('text1_text2_text3') == 'text1'\nassert     text_starta_endb('text1_text2_text3_text4') == 'text1'\nassert     text_starta_endb('text1_text2_text3_text4_text5') == 'text1'\nassert     text_starta_endb('text1_text2_text3_text4_text5_text6') == 'text1'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb(\"a\") == True\nassert     text_starta_endb(\"abc\") == False\nassert     text_starta_endb(\"aab\") == True\nassert     text_starta_endb(\"aab\") == True\nassert     text_starta_endb(\"a\") == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb('abaa') == True \nassert     text_starta_endb('aba') == False \nassert     text_starta_endb('ab') == False \nassert     text_starta_endb('ab1') == False \nassert     text_starta_endb('ab1b') == False \n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('aba') == True, \"Correct\"\nassert     text_starta_endb('aba') == False, \"Incorrect\"\nassert     text_starta_endb('abbb') == True, \"Correct\"\nassert     text_starta_endb('abaabbb') == True, \"Correct\"\nassert     text_starta_endb('abab') == True, \"Correct\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb('aaab') == True\nassert    text_starta_endb('aab') == False\nassert    text_starta_endb('aba') == False\nassert    text_starta_endb('abaab') == False\nassert    text_starta_endb('aaba') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_starta_endb('asdfasdfaab') == \"asdfasdfaab\"\nassert     text_starta_endb('asdfasdfaasdfasdfa') == \"asdfasdfaasdfasdfa\"\nassert     text_starta_endb('asdfasdfaab') == \"asdfasdfaab\"\nassert     text_starta_endb('asdfasdfaasdfasdfa') == \"asdfasdfaasdfasdfa\"\nassert     text_starta_endb('aasdfasdfaab') == \"aasdfasdfaab\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_starta_endb('aaaaaaabbbbbbbb') == 'aaaaaaabbbbbbbb'\nassert     text_starta_endb('aaaaaaabbbbbbbbbbbb') == 'aaaaaaabbbbbbbbbbbbbbbbbbbb'\nassert     text_starta_endb('aaaaaaaabbbbbbbbbbbb') == ''\nassert     text_starta_endb('aaaaaaaabbbbbbbbbbbbbbbbbbbb') == ''\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb('a') == True\nassert     text_starta_endb('ab') == True\nassert     text_starta_endb('aab') == False\nassert     text_starta_endb('aaaab') == False\nassert     text_starta_endb('abab') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb(\"abc\")    ==    False\nassert     text_starta_endb(\"abc\")    ==    False\nassert     text_starta_endb(\"abcabc\")    ==    False\nassert     text_starta_endb(\"abcabcabc\")    ==    True\nassert     text_starta_endb(\"abcabcdefghijklmnopqrstuvwxyz\")    ==    False\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({\"a\": 10, \"b\": 20}) == 30, \"Wrong return value\"\nassert     return_sum({\"a\": 10}) == 10, \"Wrong return value\"\nassert     return_sum({\"a\": 10, \"b\": 20}) == 30, \"Wrong return value\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     return_sum({\"a\":2, \"b\":3}) == 5\nassert     return_sum({\"a\":2, \"b\":3, \"d\":4}) == 7\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({'a': 1, 'b': 2}) == 3\nassert     return_sum({'a': 2, 'b': 2}) == 4\nassert     return_sum({}) == 0\n\n\ndef count_occurances(string):\n    '''\n    Write a function that returns the number of times each letter in the given string appears.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     return_sum({'a': 1, 'b': 2}) == 3, 'Fail'\nprint('Pass')\n\ndef return_product(list):\n    '''\n    Write function to calculate product of all items in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     return_sum({1: 2, 2: 3, 3: 4}) == 6\nassert     return_sum({}) == 0\nassert     return_sum({\"a\": 1, \"b\": 2}) == 3\nassert     return_sum({\"a\": 1}) == 1\nassert     return_sum({\"a\": 2}) == 2\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     return_sum({}) == None, \"Empty dictionary\"\nassert     return_sum({\"A\":10}) == 15, \"Dictionary with single key\"\nassert     return_sum({\"A\":10, \"B\":20}) == 30, \"Dictionary with multiple keys\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     return_sum({0: 1, 1: 2, 2: 3, 3: 4, 4: 5}) == 15, 'incorrect return'\nprint('return_sum function is correct')\n\ndef find_max_key(dict):\n    '''\n    Write function to return key with max value in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     return_sum({1:2, 3:4}) == 6\nassert     return_sum({1:2, 3:4, 5:6}) == 10\nassert     return_sum({1:2, 3:4, 5:6, 7:8, 9:10}) == 23\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    # output\n    # Returned value should be:\n        # {'abc': 1, 'xyz': 2}\n    # Returned value should be:\n        # 2\n    # Returned value should be:\n        # 1\n    # Returned value should be:\n        # 0\n    # Returned value should be:\n        # None\n    print('\u2714\ufe0f')\n    # output\n    # Correct\n    # Wrong\n    # Correct\n    # Wrong\n    # Wrong\n    # Correct\n    # Wrong\n    print('\u2718')\n    # output\n    # Correct\n    # Correct\n    # Correct\n    # Wrong\n    # Correct\n    # Correct\n    # Wrong\n    print('\u2718')\n    # output\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    # Correct\n    "
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     return_sum({'one':1, 'two':2, 'three':3}) == 6, \"return_sum is wrong\"\nassert     return_sum({'one':'1', 'two':'2', 'three':'3'}) == 6, \"return_sum is wrong\"\nassert     return_sum({'one':1, 'two':2, 'three':3, 'four':4}) == 9, \"return_sum is wrong\"\nassert     return_sum({'one':1, 'two':2, 'three':3, 'four':4, 'five':5}) == 15, \"return_sum is wrong\"\nassert     return_sum({'one':1, 'two':2, 'three':3, 'four':4, 'five':5,'six':6}) == 21, \"return_sum is wrong\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_odd(0) == 0\nassert     sum_odd(1) == 1\nassert     sum_odd(4) == 3\nassert     sum_odd(5) == 4\nassert     sum_odd(6) == 5\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_odd(10) == sum_odd(20) == sum_odd(30) == 50 \nassert     sum_odd(0) == sum_odd(1) == sum_odd(2) == 4 \nassert     sum_odd(-1) == sum_odd(-2) == sum_odd(-3) == 2 \nassert     sum_odd(7) == sum_odd(7) == sum_odd(7) == 14 "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_odd(0, 3) == 1\nsum_odd(1, 5) == 3\nsum_odd(3, 8) == 5\nsum_odd(0, 100) == 0"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_odd(2,3) == 5\nassert    sum_odd(2,4) == 13\nassert    sum_odd(1,3) == 3\nassert    sum_odd(2,1) == 2\nassert    sum_odd(1,2) == 1\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_odd(3, 1) == 2\nassert     sum_odd(3, 4) == 1\nassert     sum_odd(3, 5) == 5\nassert     sum_odd(1, 5) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_odd(2) == 5, 'wrong output'\nassert sum_odd(2) == 1, 'wrong output'\nassert sum_odd(5) == 14, 'wrong output'\nassert sum_odd(10) == 28, 'wrong output'\nassert sum_odd(20) == 40, 'wrong output'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     _sum([1,2,3]) == 6, \"Should be 6\"\nassert     _sum([-1,-2,-3]) == -6, \"Should be -6\"\nassert     _sum([]) == 0, \"Should be 0\"\nassert     _sum([1,4,8]) == 21, \"Should be 21\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     _sum([1,2,3]) == 6, 'Error'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     _sum([2,4,6]) == 14, \"Wrong output\"\nprint(\"Correct\")"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef _mean(arr):  \n    '''\n    Write a python function to find the mean of an array.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     _sum([1,2,3,4,5]) == 15, \"Test 1 Failed\"\nassert     _sum([1,2,3,4,5,6]) == 15, \"Test 2 Failed\"\nassert     _sum([1,2,3,4,5,6,7]) == 21, \"Test 3 Failed\"\nassert     _sum([1,2,3,4,5,6,7,8,9]) == 45, \"Test 4 Failed\"\nassert     _sum([]) == 0, \"Test 5 Failed\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     _sum([1,2,3,4,5]) == 15, 'Wrong result'\nassert     _sum([1,2,3]) == 6, 'Wrong result'\nassert     _sum([1,2]) == 3, 'Wrong result'\nassert     _sum([]) == 0, 'Wrong result'\nassert     _sum([1,2,3,4,5,6,7,8]) == 30, 'Wrong result'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert _sum([1,2,3]) == 6\nassert _sum([-1,0,2]) == 2\nassert _sum([]) == 0\nassert _sum([1]) == 1\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nleft_rotate(0b11110000, 3) == 0b11000000\nleft_rotate(0b11110000, 5) == 0b10010001\n\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     left_rotate(0xffffffff, 2) == 0x00ffff00\nassert     left_rotate(0x00f00000000, 4) == 0xf00000000\nassert     left_rotate(0x00f00000000, -4) == 0x00f00000000\nassert     left_rotate(0x00f00000000, -41) == 0x00ff00ff\nassert     left_rotate(0x00f00000000, -41) == 0x00ff00ff\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     left_rotate(1,1)==1, \"left_rotate: wrong answer\"\nassert     left_rotate(1,2)==1, \"left_rotate: wrong answer\"\nassert     left_rotate(1,3)==1, \"left_rotate: wrong answer\"\nassert     left_rotate(0b01010100,1)==0b01010100, \"left_rotate: wrong answer\"\nassert     left_rotate(0b01010100,2)==0b11010100, \"left_rotate: wrong answer\"\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_rotate(10,1) ==          10\nassert left_rotate(10,2) ==             0111100\nassert left_rotate(10,3) ==             10011001\nassert left_rotate(10,4) ==             110111010\nassert left_rotate(10,8) ==             110010100\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\"\\t\\n\") == \"\"\nassert     remove_all_spaces(\"\\n\") == \"\"\nassert     remove_all_spaces(\"\\t\") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_all_spaces('  test ') == 'test','remove_all_spaces tests'\nassert     remove_all_spaces('  test   ') == 'test','remove_all_spaces tests'\nassert     remove_all_spaces('test  ') == 'test','remove_all_spaces tests'\nassert     remove_all_spaces('test') == 'test','remove_all_spaces tests'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_all_emails(text):\n    '''\n    Write a regex to find all email addresses in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_all_spaces('  a') == 'a'\nassert     remove_all_spaces('a') == 'a'\nassert     remove_all_spaces(' ') == ''\nassert     remove_all_spaces(' ') == ''\nassert     remove_all_spaces('') == ''\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_all_spaces('  python    ') == 'python'\nassert     remove_all_spaces('     python     ') == 'python'\nassert     remove_all_spaces('   python     ') == 'python'\nassert     remove_all_spaces('       python    ') == 'python'\nassert     remove_all_spaces('         python   ') == 'python'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_all_spaces('hello  world') == 'hello world'\nassert     remove_all_spaces('hello    world') == 'hello world'\nassert     remove_all_spaces('hello  world') == 'hello world'\nassert     remove_all_spaces('hello world') == 'hello world'\nassert     remove_all_spaces('hello  world   ') == 'hello world'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_all_spaces('hello    ') == 'hello', 'Should be \"hello\"'\nassert     remove_all_spaces('hello') == 'hello', 'Should be \"hello\"'\nassert     remove_all_spaces('   hello') == 'hello', 'Should be \"hello\"'\nassert     remove_all_spaces('hello  ') == 'hello', 'Should be \"hello\"'\nassert     remove_all_spaces('hello  world') == 'hello world', 'Should be \"hello world\"'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces('') == ''\nassert remove_all_spaces('     ') == ''\nassert remove_all_spaces(' 1 2 3') == '123'\nassert remove_all_spaces('   1 2 3   ') == '123'\nassert remove_all_spaces('1 2 3   ') == '123'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_all_spaces('    hello    ') == 'hello'\nassert     remove_all_spaces('hello') == 'hello'\n\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    pass\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_three_equal(3, 3, 3) == 0\nassert     test_three_equal(3, 4, 3) == 1\nassert     test_three_equal(3, 3, 4) == 2\n\nprint('test_three_equal : all tests passed')\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_three_equal(1,2,3) == 3, 'Wrong result'\nassert     test_three_equal(1,2,1) == 2, 'Wrong result'\nassert     test_three_equal(1,1,1) == 3, 'Wrong result'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_three_equal(1,2,3) == 3, \"(1, 2, 3) : (1, 2, 3)\"\nassert     test_three_equal(2,2,2) == 3, \"(2, 2, 2) : (2, 2, 2)\"\nassert     test_three_equal(3,3,3) == 3, \"(3, 3, 3) : (3, 3, 3)\"\nassert     test_three_equal(1,2,3) == 0, \"(1, 2, 3) : (1, 2, 3)\"\nassert     test_three_equal(2,2,2) == 0, \"(2, 2, 2) : (2, 2, 2)\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_three_equal(3,3,3) == 0\nassert     test_three_equal(3,3,4) == 1\nassert     test_three_equal(3,4,3) == 1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_three_equal(1,2,3) == 3\nassert     test_three_equal(1,1,2) == 2\nassert     test_three_equal(2,2,3) == 0\nassert     test_three_equal(2,1,3) == 2\nassert     test_three_equal(2,2,2) == 1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_three_equal(1,1,1) == 3, \"Should be 3\"\nassert     test_three_equal(1,2,1) == 2, \"Should be 2\"\nassert     test_three_equal(1,1,2) == 0, \"Should be 0\"\nassert     test_three_equal(1,2,2) == 0, \"Should be 0\"\nassert     test_three_equal(2,2,2) == 0, \"Should be 0\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(count_rotation([4, 5, 1, 2, 3])) #, 2)\nprint(count_rotation([1, 2, 3, 4, 5])) #, 0)\nprint(count_rotation([1, 1, 1, 1])) #, 0)\nprint(count_rotation([1, 1, 2, 3])) #, 1)\nprint(count_rotation([1, 2, 3, 4])) #, 0)\nprint(count_rotation([1, 3, 2, 4])) #, 1)\nprint(count_rotation([1, 4, 2, 3])) #, 1)\nprint(count_rotation([1, 3, 2, 4, 5])) #, 2)\nprint(count_rotation([1, 4, 2, 3, 5])) #, 2)\nprint(count_rotation([1, 4, 5, 2, 3])) #, 3)\nprint(count_rotation([1, 4, 5, 3, 2])) #, 3)\nprint(count_rotation([1, 4, 5, 3, 1])) #, 3)\nprint(count_rotation([1, 4, 5, 3, 2, 1])) #, 4)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2])) #, 5)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2])) #, 7)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1])) #, 7)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1])) #, 7)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1])) #, 8)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1])) #, 8)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1])) #, 10)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1])) #, 10)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1])) #, 11)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1])) #, 11)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 12)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 12)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 13)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 13)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 14)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 14)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 15)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 15)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 16)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 16)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 17)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 17)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 18)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 18)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 19)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 19)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 20)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 20)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) #, 21)\nprint(count_rotation([1, 4, 5, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint count_rotation([]) == 0\nprint count_rotation([1]) == 0\nprint count_rotation([1, 2]) == 0\nprint count_rotation([1, 2, 3]) == 1\nprint count_rotation([1, 2, 3, 4]) == 2\nprint count_rotation([1, 2, 3, 4, 5]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_rotation([]) == 0\nassert count_rotation([1]) == 0\nassert count_rotation([1, 2, 3]) == 0\nassert count_rotation([1, 2, 3, 4]) == 2\nassert count_rotation([1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_rotation([2, 6, 5, 1, 3]) == 4\n    count_rotation([1, 5, 3, 2, 6]) == 2\n    count_rotation([1, 2, 3, 4, 5]) == 0\n    count_rotation([1, 2, 3, 4, 5, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7]) == 8\n\n\n\ndef circular_array_rotation(arr, n, k):\n    '''\n    Write a python function to rotate an array by k positions in an array of size n. https://www.geeksforgeeks.org/rotate-an-array-k-times-using-inbuilt-functions-python/\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_rotation([0,1,0,0,0]) == 0, \"wrong count_rotation\"\nassert     count_rotation([0,1,2,3,4]) == 1, \"wrong count_rotation\"\nassert     count_rotation([3,4,5,1,2]) == 1, \"wrong count_rotation\"\nassert     count_rotation([5,4,3,2,1]) == 0, \"wrong count_rotation\"\nassert     count_rotation([1,2,3,4,5]) == 0, \"wrong count_rotation\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_rotation([10,20,30,40,50]) == 1, \"Case 1: wrong result\"\nassert     count_rotation([10,20,30,40,50,90]) == 3, \"Case 2: wrong result\"\nassert     count_rotation([10,20,30,40,50,90,99]) == 4, \"Case 3: wrong result\"\nassert     count_rotation([10,20,30,40,50,90,99,100]) == 5, \"Case 4: wrong result\"\nassert     count_rotation([10,20,30,40,50,90,99,100,110]) == 6, \"Case 5: wrong result\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_perfect_square(10)    == True\nassert     is_perfect_square(25)    == False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_perfect_square(1) == False\nassert     is_perfect_square(4) == False\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(32) == False\nassert     is_perfect_square(64) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_perfect_square(3) == True\nassert     is_perfect_square(8) == False\nassert     is_perfect_square(0) == False\nassert     is_perfect_square(9) == False\nassert     is_perfect_square(1) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_perfect_square(14) == True, \"14 is a perfect square\"\nassert     is_perfect_square(1) == False, \"1 is not a perfect square\"\nassert     is_perfect_square(16) == False, \"16 is not a perfect square\"\nassert     is_perfect_square(9) == True, \"9 is a perfect square\"\nassert     is_perfect_square(25) == False, \"25 is not a perfect square\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_perfect_square(0) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_perfect_square(9) == True, \"The function does not seem to be right.\"\nassert     is_perfect_square(7) == False, \"The function does not seem to be right.\"\n\n\n\ndef is_palindrome(s):\n    '''\n    A string is said to be a palindrome if the reverse of the string is the same as the original string.\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_product_even([4, 5, 6, 7]) == True, \"The product is even\"\nassert     is_product_even([1, 5, 6, 7]) == False, \"The product is odd\"\nassert     is_product_even([1, 2, 3, 4, 5, 6, 7, 8]) == False, \"The product is odd\"\nassert     is_product_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, \"The product is even\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return arr[0]*arr[1] == arr[2] and arr[1]*arr[2] == arr[0]\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_product_even([1,2,3,4,5]) == False\n    is_product_even([1,2,3,4,6]) == False\n    is_product_even([1,2,3,4,10]) == True\n    is_product_even([1,2,3,4,7]) == True\n    is_product_even([1,2,3,4,0]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (is_product_even([2,4,5,6]) == False)\nassert (is_product_even([4,5,6]) == True)\nassert (is_product_even([7,8,9]) == False)\nassert (is_product_even([6,8,9]) == True)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not is_product_even([]), 'Given list is empty'\nassert not is_product_even([1, 2, 3, 4]), 'Given list is non-empty'\nassert is_product_even([1, 2, 3, 4, 5]), 'Product of list elements is even'\nassert not is_product_even([1, 2, 3, 4]), 'Product of list elements is odd'\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_product_even([2,4,6]) == True\nassert     is_product_even([4,2,6]) == False\nassert     is_product_even([1,2,3]) == False\nassert is_product_even([]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_product_even([1,2,3,4,5]) == False\nassert is_product_even([1,2,3,4,5]) == True\nassert is_product_even([1,2,3,4,5,6]) == False\nassert is_product_even([-1,-2,-3,-4,-5,-6]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_product_even([2,3,4,5,6]) == False\nassert     is_product_even([1,2,3,4,5]) == True\nassert     is_product_even([2,4,6,8,10]) == True\nassert     is_product_even([1,2,3,4]) == False\n\ndef is_product_odd(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_product_even([\"dog\",\"cat\",\"dog\",\"cat\"])\nassert is_product_even([1,2,3,4])\nassert is_product_even([1,2,3,4,6,7,8])\nassert not is_product_even([1,2,3,4,5])\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_product_even([1, 3, 4, 6, 8]) == False\nis_product_even([1, 3, 4, 8]) == True\nprint('Correct'"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_list([])    == None\nassert     max_sum_list([1,2,3])    == [[1,2,3]]\nassert     max_sum_list([1,2,3,4])    == [[1,2,3,4]]\nassert     max_sum_list([1,2,3,4,5])    == [[1,2,3,4,5]]\nassert     max_sum_list([1,2,3,4,5,6])    == [[1,2,3,4,5,6]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum_list([1, -3, 5, 10, -2, 3, -5, 8]) == (10, [-2, 3, -5, 8])\nassert     max_sum_list([-3, -1, -2, -4, -5, 6, -3]) == (6, [6, -3])\nassert     max_sum_list([1, -2, -2, -3]) == (0, [-2, -2, -3])\nassert     max_sum_list([-3, 2, 3]) == (0, [-3, 2, 3])\nassert     max_sum_list([-3, -1, 2, 4, 5, -3]) == (5, [-3, -1, 2, 4, 5, -3])\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum_list([[1, 2, 4, 4], \n                    [3, 5, 7, 3], \n                    [4, 8, 10, 6], \n                    [7, 9, 11, 8]]) == [[7, 9, 11, 8]], \"Wrong!\"\nassert     max_sum_list([[1, 2, 4, 4], \n                    [2, 3, 4, 1], \n                    [5, 6, 7, 3], \n                    [4, 8, 10, 6]]) == [[4, 8, 10, 6]], \"Wrong!\"\nassert     max_sum_list([[1, 2, 4, 4], \n                    [3, 5, 7, 3], \n                    [4, 8, 10, 6], \n                    [7, 9, 11, 8]]) == [[7, 9, 11, 8]], \"Wrong!\"\nassert     max_sum_list([[1, 2, 4], \n                    [2, 3, 4], \n                    [5, 6, 7], \n                    [4, 8, 10, 6]]) == [[4, 8, 10, 6]], \"Wrong!\"\nassert     max_sum_list([[1], \n                    [2], \n                    [3], \n                    [4]]) == [[1], \n                    [2], \n                    [3], \n                    [4]], \"Wrong!\"\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum_list([[1, 2, 3], [4, 5, 6]]) == [[4, 5, 6]]\nassert     max_sum_list([[1], [2], [3]]) == [[1], [2], [3]]\nassert     max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 8, 9]]\nassert     max_sum_list([[5, 2, 1], [4, 5, 6], [7, 8, 9]]) == [[5, 2, 1], [4, 5, 6], [7, 8, 9]]\nassert     max_sum_list([[1], [2], [3]]) == [[1], [2], [3]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport unittest\n\nclass TestMaxSumList(unittest.TestCase):\n    def test(self):\n        input1 = [[1,2,3],\n        [4,5,6],\n        [7,8,9]]\n        input2 = [[10,20,30],\n        [40,50,60],\n        [70,80,90]]\n        input3 = [[1,2,3,4],\n        [5,6,7,8],\n        [9,10,11,12],\n        [13,14,15,16]]\n        self.assertEqual(max_sum_list(input1),[8,10,20])\n        self.assertEqual(max_sum_list(input2),[90,80,90])\n        self."
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_list([[1, 2], [3, 4], [-1, -2]]) == [[1, 2], [-1, -2]]\nassert     max_sum_list([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [5, 6]]\nassert     max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [7, 8, 9]]\nassert     max_sum_list([[1, 2, 3, 4], [4, 5, 6, 7], [8, 9, 10, 11]]) == [[1, 2, 3, 4], [8, 9, 10, 11]]\nassert     max_sum_list([[5, 5, 3, 1, 6, 7], [1, 2, 4, 3, 2, 0], [0, 1, 0, 1, 1, 0]]) == [[5, 5, 3, 1, 6, 7], [1, 2, 4, 3, 2, 0], [0, 1, 0, 1, 1, 0]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_list([[1, 2, 3], \n                [1, 2, 4], \n                [1, 2, 3], \n                [4, 5, 6]]) == [[1, 2, 3],\n                                [4, 5, 6]]"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nmax_sum_list([[1,2,3,4],\n             [5,6,7,8],\n             [9,10,11,12]]) == [[5,6,7,8], [9,10,11,12]]\n\nassert max_sum_list([[1,2,3,4],\n                     [5,6,7,8],\n                     [9,10,11,12]]) == [[5,6,7,8], [9,10,11,12]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum_list([[1,2,3,4],\n                    [4,5,6,7],\n                    [2,3,6,8]]) == [[4,5,6,7],\n                    [2,3,6,8]]\nassert     max_sum_list([[1,2,3,4],\n                    [4,5,6,7],\n                    [2,3,7,8]]) == [[2,3,7,8],\n                    [2,3,7,8]]\nassert     max_sum_list([[-1,2,3,4],\n                    [4,5,6,7],\n                    [2,3,6,8]]) == [[2,3,6,8],\n                    [2,3,6,8]]\nassert     max_sum_list([[1,2,3,4],\n                    [4,5,6,7],\n                    [2,3,7,8]]) == [[4,5,6,7],\n                    [2,3,7,8]]\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase('GEEKSFORGEEKS') == 4, 'failed'\nassert     max_run_uppercase('GEEKS') == 1, 'failed'\nassert     max_run_uppercase('GEEKS') == 0, 'failed'\nassert     max_run_uppercase('') == 0, 'failed'\nassert     max_run_uppercase('GEEKSFORGEEKS') == 4, 'failed'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase(\"\") == 0, \"Empty string\"\nassert     max_run_uppercase(\"A\") == 1, \"One upper case\"\nassert     max_run_uppercase(\"AB\") == 1, \"One upper case\"\nassert     max_run_uppercase(\"abcABC\") == 3, \"Three upper case\"\nassert     max_run_uppercase(\"ABcABc\") == 3, \"Three upper case\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase('AMBASSADOR') == 4, \"Input: 'AMBASSADOR', Output: 4\"\nassert max_run_uppercase('BATMAN') == 2, \"Input: 'BATMAN', Output: 2\"\nassert max_run_uppercase('TEST') == 1, \"Input: 'TEST', Output: 1\"\nassert max_run_uppercase('testing') == 0, \"Input: 'testing', Output: 0\"\nassert max_run_uppercase('abcde') == 5, \"Input: 'abcde', Output: 5\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    curr_len = 0\n    for s in test_str:\n        if s.isupper():\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n        else:\n            curr_len = 0\n    return max_len\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_run_uppercase('Hello Mr. Rogers, how are you this fine Tuesday?') == 6\nassert     max_run_uppercase('WOW I love PYTHON!') == 4\nassert     max_run_uppercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == 0\nprint('The tests passed')\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_run_uppercase('run') == 2\nassert     max_run_uppercase('RUN') == 2\nassert     max_run_uppercase('RUNUN') == 3\nassert     max_run_uppercase('RUNUNUN') == 3\nassert     max_run_uppercase('RUNUNUNRUN') == 4\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_run_uppercase(\"ABAB\") == 'A', 'Should return \"A\"'\nassert     max_run_uppercase(\"ABAAB\") == 'AB', 'Should return \"AB\"'\nassert     max_run_uppercase(\"ABBABAB\") == 'ABBABAB', 'Should return \"ABBABAB\"'\nassert     max_run_uppercase(\"AB\") == '', 'Should return \"\"'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase('AB') == 0\nassert     max_run_uppercase('AAB') == 2\nassert     max_run_uppercase('AAABBB') == 2\nassert     max_run_uppercase('ABABABAB') == 4\n\n\ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmax_run_uppercase(\"AaAaAaA\") == \"AaAaAaA\"\nmax_run_uppercase(\"aAaAaAaA\") == \"AaAaAaA\"\nmax_run_uppercase(\"AAaAaAaAa\") == \"AAaAaAaA\"\nmax_run_uppercase(\"AAAaAaAaAa\") == \"AAAaAaAaA\"\nmax_run_uppercase(\"AAaaAaAaAa\") == \"AAaaAaAaA\"\nmax_run_uppercase(\"AAaaaAaAaAa\") == \"AAaaaAaAaA\"\nmax_run_uppercase(\"AAaaaaAaAaAa\") == \"AAaaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAaaAaAaAa\") == \"AAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAaaaAaAaAa\") == \"AAAAAAaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAaaaaAaAaAa\") == \"AAAAAAaaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAaaAaAaAa\") == \"AAAAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAaaAaAaAa\") == \"AAAAAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAaaaAaAaAa\") == \"AAAAAAAAAaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAaaaAaAaAa\") == \"AAAAAAAaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAaaAaAaAa\") == \"AAAAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAaaaAaAaAa\") == \"AAAAAAAAaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAaaaaAaAaAa\") == \"AAAAAAAAaaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAaaAaAaAa\") == \"AAAAAAAAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAaaaAaAaAa\") == \"AAAAAAAAAAAAaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAaaaaAaAaAa\") == \"AAAAAAAAAAAAaaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAaaAaAaAa\") == \"AAAAAAAAAAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAaaAaAaAa\") == \"AAAAAAAAAAAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAaaaAaAaAa\") == \"AAAAAAAAAAAAAAAaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAaaaaAaAaAa\") == \"AAAAAAAAAAAAAAaaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAaaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAaaaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAaaaaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAaaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAaaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAaaaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAaaaaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAaaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAaaaaaaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAaaaaaaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaAa\") == \"AAAAAAAAAAAAAAAAAAAAAAAAaaaAaAaAaAaA\"\nmax_run_uppercase(\"AAAAA"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_run_uppercase(\"GeeksforGeeks\") == 3, 'Invalid Output'\nassert     max_run_uppercase(\"Programminglanguage\") == 6, 'Invalid Output'\nassert     max_run_uppercase(\"GEEKSFORGEEKS\") == 3, 'Invalid Output'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1\nassert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check whether the input string 1 is an anagram of string 2.\n    An anagram is a word, phrase, or name formed by rearranging the letters of another\n    word or phrase, typically using all the original letters exactly once.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_odd([2, 3, 4, 5, 6, 7, 8, 9]) == 8\nassert     first_odd([1, 3, 5, 7, 9]) == 7\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2 == 1:\n            return n\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert first_odd([1,2,3,4,5]) == 2\nassert first_odd([10,20,30,40,50]) == 50\nassert first_odd([100,200,300,400,500]) == 300\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False\nassert     first_odd([]) == False\n\n'''\nWrite a python function to find the second largest number in a given list of numbers.\n'''\ndef second_largest(nums):\n    '''\n    Write a python function to find the second largest number in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_odd([1, 3, 5]) == 1\nassert     first_odd([3, 4, 5]) == 1\nassert     first_odd([3, 4, 5, 6]) == 1\nassert     first_odd([1, 3, 5, 7]) == 7\nassert     first_odd([]) == None\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_K((1,2,3,4), 2) == True\nassert     check_K((1,2,3,4), 0) == False\nassert     check_K((1,2,3,4), 5) == False\nassert     check_K((1,2,3,4), 5.0) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K([1,2,3,4], 2) == True, \"test 1: result should be True\"\nassert     check_K([1,2,3,4], 1) == False, \"test 2: result should be False\"\nassert     check_K([1,2,3,4], 5) == False, \"test 3: result should be False\"\nassert     check_K([1,2,3,4], 6) == True, \"test 4: result should be True\"\nassert     check_K([1,2,3,4], 7) == False, \"test 5: result should be False\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_K((0, 1), 3) == False\nassert     check_K((0, 1), 2) == True\nassert     check_K((0, 1), 5) == True\nassert     check_K((0, 1), 5) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_K(test_tup, K) == True, \"Error: check_K(test_tup, K) returns False\"\nassert     check_K(test_tup_2, K) == False, \"Error: check_K(test_tup_2, K) returns True\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_K(((5, 5), (3, 2), (3, 4), (5, 3)), \n                K = 3) == True, 'Test Case 1 Failed'\nassert     check_K(((3, 3), (1, 3), (5, 3), (3, 3)), \n                K = 4) == True, 'Test Case 2 Failed'\nassert     check_K(((3, 2), (3, 4), (5, 3), (3, 3)), \n                K = 4) == False, 'Test Case 3 Failed'\nassert     check_K(((5, 5), (3, 2), (3, 4), (5, 3)), \n                K = 6) == False, 'Test Case 4 Failed'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_K((1,1,1), 1) == True, 'Wrong Answer'\nassert     check_K((1,1,1), 2) == False, 'Wrong Answer'\nassert     check_K((1,1,1), 3) == False, 'Wrong Answer'\nassert     check_K((1,1,1,1), 1) == True, 'Wrong Answer'\nassert     check_K((1,1,1,1), 2) == False, 'Wrong Answer'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_K(((1, 2, 3), (1, 2, 3), (1, 2, 3)), 3) == True\nassert     check_K(((1, 2, 3), (1, 2, 3), (1, 2, 3)), 2) == False\nassert     check_K(((1, 2, 3), (1, 2, 3), (1, 2, 3)), 1) == True\nassert     check_K(((1, 2, 3), (1, 2, 3), (1, 2, 3)), 0) == False\n\n\ndef find_all_dup_subarr(test_arr):\n    '''\n    Write a function to check if all subarrays in the given array contain the same number\n    or not.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_smaller((1, 2, 3), (2, 1, 3))\nassert not    check_smaller((2, 1, 3), (1, 2, 3))\nassert     check_smaller((2, 1, 3), (1, 2, 4))\nassert not    check_smaller((2, 1, 3), (1, 4, 3))\nassert     check_smaller((3, 2, 1), (2, 1, 3))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller((2,3),(5,7)) == True\nassert     check_smaller((2,3),(5,7)) == False\nassert     check_smaller((-1,2),(3,5)) == False"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_smaller((1, 2), (2, 3)) == (False, True)\nassert     check_smaller((1, 2), (1, 3)) == (True, False)\nassert     check_smaller((1, 2), (0, 3)) == (True, False)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    check_smaller((1, 2), (3, 4)) == True\n    check_smaller((1, 2), (2, 1)) == False\n    check_smaller((1, 2), (2, 2)) == True\n    check_smaller((1, 2), (2, 1, 3)) == False\n    check_smaller((1, 2, 3), (2, 1, 3)) == False\n    check_smaller((1, 2, 3), (2, 1)) == True\n    check_smaller((1, 2, 3), (2, 2, 2)) == False\n    check_smaller((1, 2, 3), (2, 2, 1)) == True\n    check_smaller((1, 2, 3), (2, 2, 2, 1)) == False\n    check_smaller((1, 2, 3), (2, 2, 1, 3)) == True\n    check_smaller((1, 2, 3), (2, 1, 3, 4)) == False\n    check_smaller((1, 2, 3), (1, 2, 3)) == True\n    check_smaller((1, 2, 3), (1, 2, 4)) == False\n    check_smaller((1, 2, 3), (1, 2)) == True\n    check_smaller((1, 2, 3), (1, 1)) == False\n    check_smaller((1, 2, 3), (1, 2, 2)) == False\n    check_smaller((1, 2, 3), (1, 2, 1)) == True\n    check_smaller((1, 2, 3), (1, 2, 2, 1)) == False\n    check_smaller((1, 2, 3), (1, 2, 1, 3)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 3)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4)) == False\n    check_smaller((1, 2, 3), (1, 2, 4, 4)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4)) == False\n    check_smaller((1, 2, 3), (1, 2, 2, 4)) == False\n    check_smaller((1, 2, 3), (1, 2, 1, 3)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 4, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 4, 4, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 4, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 6)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == False\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == True\n    check_smaller((1, 2, 3), (1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_smaller( (5,2,1,4,5), (6,1,2,3,6) ) == True\nassert     check_smaller( (5,2,1,4,5), (6,1,2,3,5) ) == False\nassert     check_smaller( (1,2,3,4,5), (6,1,2,3,6) ) == False\n\n'''\nDefine a function check_positive_integer which takes a positive integer as an argument and returns True if the integer is a positive integer and False otherwise.\n'''\ndef check_positive_integer(test_tup1):\n    '''\n    Write a function to check if each element of the tuple is a positive integer.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((3, 2), (4, 5)) == False, \"Both tuples should be the same\"\nassert     check_smaller((3, 2), (2, 4)) == True, \"Tuple 1 should be smaller than tuple 2\"\nassert     check_smaller((3, 2), (2, 1)) == False, \"Tuple 2 should be smaller than tuple 1\"\nassert     check_smaller((3, 5), (4, 5)) == False, \"Both tuples should be the same\"\nassert     check_smaller((3, 5), (2, 4)) == True, \"Tuple 1 should be smaller than tuple 2\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((4,5,6,7), (5,5,6,7)) == True\nassert     check_smaller((10,4,5,6), (1,2,4,5)) == False\nassert     check_smaller((100,50,60,70), (70,80,90,100)) == True"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller((1,2,3),(3,1,2)) == True, 'failed for tuple 1 and tuple 2'\nassert     check_smaller((5,3,2),(3,1,2)) == True, 'failed for tuple 1 and tuple 2'\nassert     check_smaller((2,1,3),(3,1,2)) == False, 'failed for tuple 1 and tuple 2'\n\n\n\ndef check_both_smaller(tuple1, tuple2):\n    '''\n    Write a function that takes two tuples and returns True if both tuples contain only elements with values in the range of 1 to 10.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((2,3,4),(5,6,7)) == True\nassert     check_smaller((2,3,4),(4,5,7)) == False\nassert     check_smaller((2,4,5),(4,5,7)) == False\nassert     check_smaller((2,4,5),(2,5,7)) == False\nassert     check_smaller((2,4,5),(2,4,7)) == True\n"
    }
]